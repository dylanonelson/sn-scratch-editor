(()=>{var e={92:e=>{self,e.exports=(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};let n,r,i,o;var s;e.d(t,{default:()=>S}),function(e){e.SetSize="set-size",e.StreamItems="stream-items",e.StreamContextItem="stream-context-item",e.SaveItems="save-items",e.SelectItem="select-item",e.AssociateItem="associate-item",e.DeassociateItem="deassociate-item",e.ClearSelection="clear-selection",e.CreateItem="create-item",e.CreateItems="create-items",e.DeleteItems="delete-items",e.SetComponentData="set-component-data",e.InstallLocalComponent="install-local-component",e.ToggleActivateComponent="toggle-activate-component",e.RequestPermissions="request-permissions",e.PresentConflictResolution="present-conflict-resolution",e.DuplicateItem="duplicate-item",e.ComponentRegistered="component-registered",e.ActivateThemes="themes",e.Reply="reply",e.SaveSuccess="save-success",e.SaveError="save-error",e.ThemesActivated="themes-activated",e.KeyDown="key-down",e.KeyUp="key-up",e.Click="click"}(n||(n={})),function(e){e[e.Web=1]="Web",e[e.Desktop=2]="Desktop",e[e.Mobile=3]="Mobile"}(r||(r={})),function(e){e.Any="*",e.Item="SF|Item",e.RootKey="SN|RootKey|NoSync",e.ItemsKey="SN|ItemsKey",e.EncryptedStorage="SN|EncryptedStorage",e.Note="Note",e.Tag="Tag",e.SmartTag="SN|SmartTag",e.Component="SN|Component",e.Editor="SN|Editor",e.ActionsExtension="Extension",e.UserPrefs="SN|UserPreferences",e.HistorySession="SN|HistorySession",e.Theme="SN|Theme",e.Mfa="SF|MFA",e.ServerExtension="SF|Extension",e.FilesafeCredentials="SN|FileSafe|Credentials",e.FilesafeFileMetadata="SN|FileSafe|FileMetadata",e.FilesafeIntegration="SN|FileSafe|Integration",e.ExtensionRepo="SN|ExtensionRepo"}(i||(i={})),function(e){e.Pinned="pinned",e.Archived="archived",e.Locked="locked",e.UserModifiedDate="client_updated_at",e.DefaultEditor="defaultEditor",e.MobileRules="mobileRules",e.NotAvailableOnMobile="notAvailableOnMobile",e.MobileActive="mobileActive",e.LastSize="lastSize",e.PrefersPlainEditor="prefersPlainEditor",e.ComponentInstallError="installError"}(o||(o={}));var l=new Uint8Array(16);function a(){if(!s&&!(s="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return s(l)}const c=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,h=function(e){return"string"==typeof e&&c.test(e)};for(var u=[],d=0;d<256;++d)u.push((d+256).toString(16).substr(1));const p=function(e,t,n){var r=(e=e||{}).random||(e.rng||a)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var i=0;i<16;++i)t[n+i]=r[i];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(u[e[t+0]]+u[e[t+1]]+u[e[t+2]]+u[e[t+3]]+"-"+u[e[t+4]]+u[e[t+5]]+"-"+u[e[t+6]]+u[e[t+7]]+"-"+u[e[t+8]]+u[e[t+9]]+"-"+u[e[t+10]]+u[e[t+11]]+u[e[t+12]]+u[e[t+13]]+u[e[t+14]]+u[e[t+15]]).toLowerCase();if(!h(n))throw TypeError("Stringified UUID is invalid");return n}(r)},f=e=>{var t;const n={[r.Web]:"web",[r.Desktop]:"desktop",[r.Mobile]:"mobile"};return null!==(t=n[e])&&void 0!==t?t:n[r.Web]},m=e=>null!=e,g=()=>{};class y{static get isSupported(){return!(!window.console&&!console)}static get info(){return y.isSupported&&this.enabled?console.log.bind(console):g}static get error(){return y.isSupported?console.error.bind(console):g}}var k,b,v,w;function x(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function C(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?x(Object(n),!0).forEach((function(t){D(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):x(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}(b="enabled")in(k=y)?Object.defineProperty(k,b,{value:!1,enumerable:!0,configurable:!0,writable:!0}):k[b]=!1,function(e){e.Component="component"}(v||(v={})),function(e){e.Shift="Shift",e.Ctrl="Control",e.Meta="Meta"}(w||(w={}));class S{constructor(e){if(D(this,"contentWindow",void 0),D(this,"initialPermissions",void 0),D(this,"onReadyCallback",void 0),D(this,"component",{activeThemes:[],acceptsThemes:!0}),D(this,"sentMessages",[]),D(this,"messageQueue",[]),D(this,"lastStreamedItem",void 0),D(this,"pendingSaveItems",void 0),D(this,"pendingSaveTimeout",void 0),D(this,"pendingSaveParams",void 0),D(this,"coallesedSaving",!0),D(this,"coallesedSavingDelay",250),D(this,"messageHandler",void 0),D(this,"keyDownEventListener",void 0),D(this,"keyUpEventListener",void 0),D(this,"clickEventListener",void 0),D(this,"onThemesChangeCallback",void 0),D(this,"concernTimeouts",[]),!e||!e.targetWindow)throw new Error("contentWindow must be a valid Window object.");this.contentWindow=e.targetWindow,this.processParameters(e),this.registerMessageHandler(),this.registerKeyboardEventListeners(),this.registerMouseEventListeners()}processParameters(e){var t;const{initialPermissions:n,options:r,onReady:i,onThemesChange:o}=e;var s;n&&n.length>0&&(this.initialPermissions=n),m(null==r?void 0:r.coallesedSaving)&&(this.coallesedSaving=r.coallesedSaving),m(null==r?void 0:r.coallesedSavingDelay)&&(this.coallesedSavingDelay=r.coallesedSavingDelay),m(null==r?void 0:r.acceptsThemes)&&(this.component.acceptsThemes=null===(s=null==r?void 0:r.acceptsThemes)||void 0===s||s),m(i)&&(this.onReadyCallback=i),m(o)&&(this.onThemesChangeCallback=o),y.enabled=null!==(t=null==r?void 0:r.debug)&&void 0!==t&&t}deinit(){this.onReadyCallback=void 0,this.component={acceptsThemes:!0,activeThemes:[]},this.messageQueue=[],this.sentMessages=[],this.lastStreamedItem=void 0,this.pendingSaveItems=void 0,this.pendingSaveTimeout=void 0,this.pendingSaveParams=void 0,this.messageHandler&&(this.contentWindow.document.removeEventListener("message",this.messageHandler),this.contentWindow.removeEventListener("message",this.messageHandler)),this.keyDownEventListener&&this.contentWindow.removeEventListener("keydown",this.keyDownEventListener),this.keyUpEventListener&&this.contentWindow.removeEventListener("keyup",this.keyUpEventListener),this.clickEventListener&&this.contentWindow.removeEventListener("click",this.clickEventListener)}registerMessageHandler(){this.messageHandler=e=>{if(y.info("Components API Message received:",e.data),document.referrer&&new URL(document.referrer).origin!==new URL(e.origin).origin)return;const{data:t}=e,r=(e=>{if("string"!=typeof e)return!1;try{const t=JSON.parse(e),n=Object.prototype.toString.call(t);return"[object Object]"===n||"[object Array]"===n}catch(e){return!1}})(t)?JSON.parse(t):t;if(r){if(void 0===this.component.origin&&r.action===n.ComponentRegistered)this.component.origin=e.origin;else if(e.origin!==this.component.origin)return;this.handleMessage(r)}else y.error("Invalid data received. Skipping...")},this.contentWindow.document.addEventListener("message",this.messageHandler,!1),this.contentWindow.addEventListener("message",this.messageHandler,!1),y.info("Waiting for messages...")}registerKeyboardEventListeners(){this.keyDownEventListener=e=>{y.info("A key has been pressed: ".concat(e.key)),e.ctrlKey?this.keyDownEvent(w.Ctrl):e.shiftKey?this.keyDownEvent(w.Shift):(e.metaKey||"Meta"===e.key)&&this.keyDownEvent(w.Meta)},this.keyUpEventListener=e=>{y.info("A key has been released: ".concat(e.key)),"Control"===e.key?this.keyUpEvent(w.Ctrl):"Shift"===e.key?this.keyUpEvent(w.Shift):"Meta"===e.key&&this.keyUpEvent(w.Meta)},this.contentWindow.addEventListener("keydown",this.keyDownEventListener,!1),this.contentWindow.addEventListener("keyup",this.keyUpEventListener,!1)}registerMouseEventListeners(){this.clickEventListener=e=>{y.info("A click has been performed."),this.mouseClickEvent()},this.contentWindow.addEventListener("click",this.clickEventListener,!1)}handleMessage(e){switch(e.action){case n.ComponentRegistered:this.component.sessionKey=e.sessionKey,e.componentData&&(this.component.data=e.componentData),this.onReady(e.data),y.info("Component successfully registered with payload:",e);break;case n.ActivateThemes:this.activateThemes(e.data.themes);break;default:{var t,r;if(!e.original)return;const n=null===(t=this.sentMessages)||void 0===t?void 0:t.filter((t=>{var n;return t.messageId===(null===(n=e.original)||void 0===n?void 0:n.messageId)}))[0];if(!n){const e=this.contentWindow.document.title,t=("The extension '".concat(e,"' is attempting to communicate with Standard Notes, ")+"but an error is preventing it from doing so. Please restart this extension and try again.").replace("  "," ");return void y.info(t)}null==n||null===(r=n.callback)||void 0===r||r.call(n,e.data);break}}}onReady(e){this.component.environment=e.environment,this.component.platform=e.platform,this.component.uuid=e.uuid,this.initialPermissions&&this.initialPermissions.length>0&&this.requestPermissions(this.initialPermissions);for(const e of this.messageQueue)this.postMessage(e.action,e.data,e.callback);this.messageQueue=[],y.info("Data passed to onReady:",e),this.activateThemes(e.activeThemeUrls||[]),this.postMessage(n.ThemesActivated,{}),this.onReadyCallback&&this.onReadyCallback()}getSelfComponentUUID(){return this.component.uuid}isRunningInDesktopApplication(){return this.component.environment===f(r.Desktop)}isRunningInMobileApplication(){return this.component.environment===f(r.Mobile)}getComponentDataValueForKey(e){if(this.component.data)return this.component.data[e]}setComponentDataValueForKey(e,t){if(!this.component.data)throw new Error("The component has not been initialized.");if(!e||e&&0===e.length)throw new Error("The key for the data value should be a valid string.");this.component.data=C(C({},this.component.data),{},{[e]:t}),this.postMessage(n.SetComponentData,{componentData:this.component.data})}clearComponentData(){this.component.data={},this.postMessage(n.SetComponentData,{componentData:this.component.data})}postMessage(e,t,n){if(!this.component.sessionKey)return void this.messageQueue.push({action:e,data:t,api:v.Component,callback:n});const r={action:e,data:t,messageId:this.generateUUID(),sessionKey:this.component.sessionKey,api:v.Component},i=JSON.parse(JSON.stringify(r));let o;i.callback=n,this.sentMessages.push(i),o=this.isRunningInMobileApplication()?JSON.stringify(r):r,y.info("Posting message:",o),this.contentWindow.parent.postMessage(o,this.component.origin)}requestPermissions(e,t){this.postMessage(n.RequestPermissions,{permissions:e},(()=>{t&&t()}))}activateThemes(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(!this.component.acceptsThemes)return;y.info("Incoming themes:",e);const{activeThemes:t}=this.component;if(t&&t.sort().toString()==e.sort().toString())return;let n=e;const r=[];for(const i of t)e.includes(i)?n=n.filter((e=>e!==i)):r.push(i);y.info("Deactivating themes:",r),y.info("Activating themes:",n);for(const e of r)this.deactivateTheme(e);this.component.activeThemes=e;for(const e of n){if(!e)continue;const t=this.contentWindow.document.createElement("link");t.id=btoa(e),t.href=e,t.type="text/css",t.rel="stylesheet",t.media="screen,print",t.className="custom-theme",this.contentWindow.document.getElementsByTagName("head")[0].appendChild(t)}this.onThemesChangeCallback&&this.onThemesChangeCallback()}themeElementForUrl(e){return Array.from(this.contentWindow.document.getElementsByClassName("custom-theme")).slice().find((t=>t.id==btoa(e)))}deactivateTheme(e){const t=this.themeElementForUrl(e);t&&t.parentNode&&(t.setAttribute("disabled","true"),t.parentNode.removeChild(t))}generateUUID(){return p()}get platform(){return this.component.platform}get environment(){return this.component.environment}streamItems(e,t){this.postMessage(n.StreamItems,{content_types:e},(e=>{t(e.items)}))}streamContextItem(e){this.postMessage(n.StreamContextItem,{},(t=>{const{item:n}=t;(!this.lastStreamedItem||this.lastStreamedItem.uuid!==n.uuid)&&this.pendingSaveTimeout&&(clearTimeout(this.pendingSaveTimeout),this.performSavingOfItems(this.pendingSaveParams),this.pendingSaveTimeout=void 0,this.pendingSaveParams=void 0),this.lastStreamedItem=n,e(this.lastStreamedItem)}))}selectItem(e){this.postMessage(n.SelectItem,{item:this.jsonObjectForItem(e)})}clearSelection(){this.postMessage(n.ClearSelection,{content_type:i.Tag})}createItem(e,t){this.postMessage(n.CreateItem,{item:this.jsonObjectForItem(e)},(e=>{let{item:n}=e;!n&&e.items&&e.items.length>0&&(n=e.items[0]),this.associateItem(n),t&&t(n)}))}createItems(e,t){const r=e.map((e=>this.jsonObjectForItem(e)));this.postMessage(n.CreateItems,{items:r},(e=>{t&&t(e.items)}))}associateItem(e){this.postMessage(n.AssociateItem,{item:this.jsonObjectForItem(e)})}deassociateItem(e){this.postMessage(n.DeassociateItem,{item:this.jsonObjectForItem(e)})}deleteItem(e,t){this.deleteItems([e],t)}deleteItems(e,t){const r={items:e.map((e=>this.jsonObjectForItem(e)))};this.postMessage(n.DeleteItems,r,(e=>{t&&t(e)}))}sendCustomEvent(e,t,n){this.postMessage(e,t,(e=>{n&&n(e)}))}saveItem(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.saveItems([e],t,n)}saveItemWithPresave(e,t,n){this.saveItemsWithPresave([e],t,n)}saveItemsWithPresave(e,t,n){this.saveItems(e,n,!1,t)}performSavingOfItems(e){let{items:t,presave:r,callback:i}=e;const o=setTimeout((()=>{this.concernTimeouts.forEach((e=>clearTimeout(e))),alert("This editor is unable to communicate with Standard Notes. Your changes may not be saved. Please backup your changes, then restart the application and try again.")}),5e3);this.concernTimeouts.push(o),r&&r();const s=[];for(const e of t)s.push(this.jsonObjectForItem(e));this.postMessage(n.SaveItems,{items:s},(()=>{this.concernTimeouts.forEach((e=>clearTimeout(e))),null==i||i()}))}saveItems(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3?arguments[3]:void 0;if(this.pendingSaveItems||(this.pendingSaveItems=[]),this.coallesedSaving&&!n){this.pendingSaveTimeout&&clearTimeout(this.pendingSaveTimeout);const n=e.map((e=>e.uuid)),i=this.pendingSaveItems.filter((e=>!n.includes(e.uuid)));this.pendingSaveItems=i.concat(e),this.pendingSaveParams={items:this.pendingSaveItems,presave:r,callback:t},this.pendingSaveTimeout=setTimeout((()=>{this.performSavingOfItems(this.pendingSaveParams),this.pendingSaveItems=[],this.pendingSaveTimeout=void 0,this.pendingSaveParams=null}),this.coallesedSavingDelay)}else this.performSavingOfItems({items:e,presave:r,callback:t})}setSize(e,t){this.postMessage(n.SetSize,{type:"container",width:e,height:t})}keyDownEvent(e){this.postMessage(n.KeyDown,{keyboardModifier:e})}keyUpEvent(e){this.postMessage(n.KeyUp,{keyboardModifier:e})}mouseClickEvent(){this.postMessage(n.Click,{})}jsonObjectForItem(e){const t=Object.assign({},e);return t.children=null,t.parent=null,t}getItemAppDataValue(e,t){var n,r;return null==e||null===(n=e.content)||void 0===n||null===(r=n.appData)||void 0===r?void 0:r["org.standardnotes.sn"][t]}}return t.default})()},115:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg>'},415:e=>{e.exports='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"></path><path d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path></svg>'}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e={};n.r(e),n.d(e,{decode:()=>il,encode:()=>ll,format:()=>al,parse:()=>wl});var t={};n.r(t),n.d(t,{Any:()=>Dl,Cc:()=>Sl,Cf:()=>_l,P:()=>xl,S:()=>Cl,Z:()=>El});var r={};n.r(r),n.d(r,{arrayReplaceAt:()=>ta,assign:()=>ea,escapeHtml:()=>pa,escapeRE:()=>ma,fromCodePoint:()=>ra,has:()=>Xl,isMdAsciiPunct:()=>ba,isPunctChar:()=>ka,isSpace:()=>ga,isString:()=>Yl,isValidEntityCode:()=>na,isWhiteSpace:()=>ya,lib:()=>wa,normalizeReference:()=>va,unescapeAll:()=>aa,unescapeMd:()=>la});var i={};function o(e){this.content=e}n.r(i),n.d(i,{parseLinkDestination:()=>Ca,parseLinkLabel:()=>xa,parseLinkTitle:()=>Da}),o.prototype={constructor:o,find:function(e){for(var t=0;t<this.content.length;t+=2)if(this.content[t]===e)return t;return-1},get:function(e){var t=this.find(e);return-1==t?void 0:this.content[t+1]},update:function(e,t,n){var r=n&&n!=e?this.remove(n):this,i=r.find(e),s=r.content.slice();return-1==i?s.push(n||e,t):(s[i+1]=t,n&&(s[i]=n)),new o(s)},remove:function(e){var t=this.find(e);if(-1==t)return this;var n=this.content.slice();return n.splice(t,2),new o(n)},addToStart:function(e,t){return new o([e,t].concat(this.remove(e).content))},addToEnd:function(e,t){var n=this.remove(e).content.slice();return n.push(e,t),new o(n)},addBefore:function(e,t,n){var r=this.remove(t),i=r.content.slice(),s=r.find(e);return i.splice(-1==s?i.length:s,0,t,n),new o(i)},forEach:function(e){for(var t=0;t<this.content.length;t+=2)e(this.content[t],this.content[t+1])},prepend:function(e){return(e=o.from(e)).size?new o(e.content.concat(this.subtract(e).content)):this},append:function(e){return(e=o.from(e)).size?new o(this.subtract(e).content.concat(e.content)):this},subtract:function(e){var t=this;e=o.from(e);for(var n=0;n<e.content.length;n+=2)t=t.remove(e.content[n]);return t},toObject:function(){var e={};return this.forEach((function(t,n){e[t]=n})),e},get size(){return this.content.length>>1}},o.from=function(e){if(e instanceof o)return e;var t=[];if(e)for(var n in e)t.push(n,e[n]);return new o(t)};const s=o;function l(e,t,n){for(let r=0;;r++){if(r==e.childCount||r==t.childCount)return e.childCount==t.childCount?null:n;let i=e.child(r),o=t.child(r);if(i!=o){if(!i.sameMarkup(o))return n;if(i.isText&&i.text!=o.text){for(let e=0;i.text[e]==o.text[e];e++)n++;return n}if(i.content.size||o.content.size){let e=l(i.content,o.content,n+1);if(null!=e)return e}n+=i.nodeSize}else n+=i.nodeSize}}function a(e,t,n,r){for(let i=e.childCount,o=t.childCount;;){if(0==i||0==o)return i==o?null:{a:n,b:r};let s=e.child(--i),l=t.child(--o),c=s.nodeSize;if(s!=l){if(!s.sameMarkup(l))return{a:n,b:r};if(s.isText&&s.text!=l.text){let e=0,t=Math.min(s.text.length,l.text.length);for(;e<t&&s.text[s.text.length-e-1]==l.text[l.text.length-e-1];)e++,n--,r--;return{a:n,b:r}}if(s.content.size||l.content.size){let e=a(s.content,l.content,n-1,r-1);if(e)return e}n-=c,r-=c}else n-=c,r-=c}}class c{constructor(e,t){if(this.content=e,this.size=t||0,null==t)for(let t=0;t<e.length;t++)this.size+=e[t].nodeSize}nodesBetween(e,t,n,r=0,i){for(let o=0,s=0;s<t;o++){let l=this.content[o],a=s+l.nodeSize;if(a>e&&!1!==n(l,r+s,i||null,o)&&l.content.size){let i=s+1;l.nodesBetween(Math.max(0,e-i),Math.min(l.content.size,t-i),n,r+i)}s=a}}descendants(e){this.nodesBetween(0,this.size,e)}textBetween(e,t,n,r){let i="",o=!0;return this.nodesBetween(e,t,((s,l)=>{let a=s.isText?s.text.slice(Math.max(e,l)-l,t-l):s.isLeaf?r?"function"==typeof r?r(s):r:s.type.spec.leafText?s.type.spec.leafText(s):"":"";s.isBlock&&(s.isLeaf&&a||s.isTextblock)&&n&&(o?o=!1:i+=n),i+=a}),0),i}append(e){if(!e.size)return this;if(!this.size)return e;let t=this.lastChild,n=e.firstChild,r=this.content.slice(),i=0;for(t.isText&&t.sameMarkup(n)&&(r[r.length-1]=t.withText(t.text+n.text),i=1);i<e.content.length;i++)r.push(e.content[i]);return new c(r,this.size+e.size)}cut(e,t=this.size){if(0==e&&t==this.size)return this;let n=[],r=0;if(t>e)for(let i=0,o=0;o<t;i++){let s=this.content[i],l=o+s.nodeSize;l>e&&((o<e||l>t)&&(s=s.isText?s.cut(Math.max(0,e-o),Math.min(s.text.length,t-o)):s.cut(Math.max(0,e-o-1),Math.min(s.content.size,t-o-1))),n.push(s),r+=s.nodeSize),o=l}return new c(n,r)}cutByIndex(e,t){return e==t?c.empty:0==e&&t==this.content.length?this:new c(this.content.slice(e,t))}replaceChild(e,t){let n=this.content[e];if(n==t)return this;let r=this.content.slice(),i=this.size+t.nodeSize-n.nodeSize;return r[e]=t,new c(r,i)}addToStart(e){return new c([e].concat(this.content),this.size+e.nodeSize)}addToEnd(e){return new c(this.content.concat(e),this.size+e.nodeSize)}eq(e){if(this.content.length!=e.content.length)return!1;for(let t=0;t<this.content.length;t++)if(!this.content[t].eq(e.content[t]))return!1;return!0}get firstChild(){return this.content.length?this.content[0]:null}get lastChild(){return this.content.length?this.content[this.content.length-1]:null}get childCount(){return this.content.length}child(e){let t=this.content[e];if(!t)throw new RangeError("Index "+e+" out of range for "+this);return t}maybeChild(e){return this.content[e]||null}forEach(e){for(let t=0,n=0;t<this.content.length;t++){let r=this.content[t];e(r,n,t),n+=r.nodeSize}}findDiffStart(e,t=0){return l(this,e,t)}findDiffEnd(e,t=this.size,n=e.size){return a(this,e,t,n)}findIndex(e,t=-1){if(0==e)return u(0,e);if(e==this.size)return u(this.content.length,e);if(e>this.size||e<0)throw new RangeError(`Position ${e} outside of fragment (${this})`);for(let n=0,r=0;;n++){let i=r+this.child(n).nodeSize;if(i>=e)return i==e||t>0?u(n+1,i):u(n,r);r=i}}toString(){return"<"+this.toStringInner()+">"}toStringInner(){return this.content.join(", ")}toJSON(){return this.content.length?this.content.map((e=>e.toJSON())):null}static fromJSON(e,t){if(!t)return c.empty;if(!Array.isArray(t))throw new RangeError("Invalid input for Fragment.fromJSON");return new c(t.map(e.nodeFromJSON))}static fromArray(e){if(!e.length)return c.empty;let t,n=0;for(let r=0;r<e.length;r++){let i=e[r];n+=i.nodeSize,r&&i.isText&&e[r-1].sameMarkup(i)?(t||(t=e.slice(0,r)),t[t.length-1]=i.withText(t[t.length-1].text+i.text)):t&&t.push(i)}return new c(t||e,n)}static from(e){if(!e)return c.empty;if(e instanceof c)return e;if(Array.isArray(e))return this.fromArray(e);if(e.attrs)return new c([e],e.nodeSize);throw new RangeError("Can not convert "+e+" to a Fragment"+(e.nodesBetween?" (looks like multiple versions of prosemirror-model were loaded)":""))}}c.empty=new c([],0);const h={index:0,offset:0};function u(e,t){return h.index=e,h.offset=t,h}function d(e,t){if(e===t)return!0;if(!e||"object"!=typeof e||!t||"object"!=typeof t)return!1;let n=Array.isArray(e);if(Array.isArray(t)!=n)return!1;if(n){if(e.length!=t.length)return!1;for(let n=0;n<e.length;n++)if(!d(e[n],t[n]))return!1}else{for(let n in e)if(!(n in t)||!d(e[n],t[n]))return!1;for(let n in t)if(!(n in e))return!1}return!0}class p{constructor(e,t){this.type=e,this.attrs=t}addToSet(e){let t,n=!1;for(let r=0;r<e.length;r++){let i=e[r];if(this.eq(i))return e;if(this.type.excludes(i.type))t||(t=e.slice(0,r));else{if(i.type.excludes(this.type))return e;!n&&i.type.rank>this.type.rank&&(t||(t=e.slice(0,r)),t.push(this),n=!0),t&&t.push(i)}}return t||(t=e.slice()),n||t.push(this),t}removeFromSet(e){for(let t=0;t<e.length;t++)if(this.eq(e[t]))return e.slice(0,t).concat(e.slice(t+1));return e}isInSet(e){for(let t=0;t<e.length;t++)if(this.eq(e[t]))return!0;return!1}eq(e){return this==e||this.type==e.type&&d(this.attrs,e.attrs)}toJSON(){let e={type:this.type.name};for(let t in this.attrs){e.attrs=this.attrs;break}return e}static fromJSON(e,t){if(!t)throw new RangeError("Invalid input for Mark.fromJSON");let n=e.marks[t.type];if(!n)throw new RangeError(`There is no mark type ${t.type} in this schema`);let r=n.create(t.attrs);return n.checkAttrs(r.attrs),r}static sameSet(e,t){if(e==t)return!0;if(e.length!=t.length)return!1;for(let n=0;n<e.length;n++)if(!e[n].eq(t[n]))return!1;return!0}static setFrom(e){if(!e||Array.isArray(e)&&0==e.length)return p.none;if(e instanceof p)return[e];let t=e.slice();return t.sort(((e,t)=>e.type.rank-t.type.rank)),t}}p.none=[];class f extends Error{}class m{constructor(e,t,n){this.content=e,this.openStart=t,this.openEnd=n}get size(){return this.content.size-this.openStart-this.openEnd}insertAt(e,t){let n=y(this.content,e+this.openStart,t);return n&&new m(n,this.openStart,this.openEnd)}removeBetween(e,t){return new m(g(this.content,e+this.openStart,t+this.openStart),this.openStart,this.openEnd)}eq(e){return this.content.eq(e.content)&&this.openStart==e.openStart&&this.openEnd==e.openEnd}toString(){return this.content+"("+this.openStart+","+this.openEnd+")"}toJSON(){if(!this.content.size)return null;let e={content:this.content.toJSON()};return this.openStart>0&&(e.openStart=this.openStart),this.openEnd>0&&(e.openEnd=this.openEnd),e}static fromJSON(e,t){if(!t)return m.empty;let n=t.openStart||0,r=t.openEnd||0;if("number"!=typeof n||"number"!=typeof r)throw new RangeError("Invalid input for Slice.fromJSON");return new m(c.fromJSON(e,t.content),n,r)}static maxOpen(e,t=!0){let n=0,r=0;for(let r=e.firstChild;r&&!r.isLeaf&&(t||!r.type.spec.isolating);r=r.firstChild)n++;for(let n=e.lastChild;n&&!n.isLeaf&&(t||!n.type.spec.isolating);n=n.lastChild)r++;return new m(e,n,r)}}function g(e,t,n){let{index:r,offset:i}=e.findIndex(t),o=e.maybeChild(r),{index:s,offset:l}=e.findIndex(n);if(i==t||o.isText){if(l!=n&&!e.child(s).isText)throw new RangeError("Removing non-flat range");return e.cut(0,t).append(e.cut(n))}if(r!=s)throw new RangeError("Removing non-flat range");return e.replaceChild(r,o.copy(g(o.content,t-i-1,n-i-1)))}function y(e,t,n,r){let{index:i,offset:o}=e.findIndex(t),s=e.maybeChild(i);if(o==t||s.isText)return r&&!r.canReplace(i,i,n)?null:e.cut(0,t).append(n).append(e.cut(t));let l=y(s.content,t-o-1,n);return l&&e.replaceChild(i,s.copy(l))}function k(e,t,n){if(n.openStart>e.depth)throw new f("Inserted content deeper than insertion position");if(e.depth-n.openStart!=t.depth-n.openEnd)throw new f("Inconsistent open depths");return b(e,t,n,0)}function b(e,t,n,r){let i=e.index(r),o=e.node(r);if(i==t.index(r)&&r<e.depth-n.openStart){let s=b(e,t,n,r+1);return o.copy(o.content.replaceChild(i,s))}if(n.content.size){if(n.openStart||n.openEnd||e.depth!=r||t.depth!=r){let{start:i,end:s}=function(e,t){let n=t.depth-e.openStart,r=t.node(n).copy(e.content);for(let e=n-1;e>=0;e--)r=t.node(e).copy(c.from(r));return{start:r.resolveNoCache(e.openStart+n),end:r.resolveNoCache(r.content.size-e.openEnd-n)}}(n,e);return D(o,S(e,i,s,t,r))}{let r=e.parent,i=r.content;return D(r,i.cut(0,e.parentOffset).append(n.content).append(i.cut(t.parentOffset)))}}return D(o,_(e,t,r))}function v(e,t){if(!t.type.compatibleContent(e.type))throw new f("Cannot join "+t.type.name+" onto "+e.type.name)}function w(e,t,n){let r=e.node(n);return v(r,t.node(n)),r}function x(e,t){let n=t.length-1;n>=0&&e.isText&&e.sameMarkup(t[n])?t[n]=e.withText(t[n].text+e.text):t.push(e)}function C(e,t,n,r){let i=(t||e).node(n),o=0,s=t?t.index(n):i.childCount;e&&(o=e.index(n),e.depth>n?o++:e.textOffset&&(x(e.nodeAfter,r),o++));for(let e=o;e<s;e++)x(i.child(e),r);t&&t.depth==n&&t.textOffset&&x(t.nodeBefore,r)}function D(e,t){return e.type.checkContent(t),e.copy(t)}function S(e,t,n,r,i){let o=e.depth>i&&w(e,t,i+1),s=r.depth>i&&w(n,r,i+1),l=[];return C(null,e,i,l),o&&s&&t.index(i)==n.index(i)?(v(o,s),x(D(o,S(e,t,n,r,i+1)),l)):(o&&x(D(o,_(e,t,i+1)),l),C(t,n,i,l),s&&x(D(s,_(n,r,i+1)),l)),C(r,null,i,l),new c(l)}function _(e,t,n){let r=[];if(C(null,e,n,r),e.depth>n){x(D(w(e,t,n+1),_(e,t,n+1)),r)}return C(t,null,n,r),new c(r)}m.empty=new m(c.empty,0,0);class E{constructor(e,t,n){this.pos=e,this.path=t,this.parentOffset=n,this.depth=t.length/3-1}resolveDepth(e){return null==e?this.depth:e<0?this.depth+e:e}get parent(){return this.node(this.depth)}get doc(){return this.node(0)}node(e){return this.path[3*this.resolveDepth(e)]}index(e){return this.path[3*this.resolveDepth(e)+1]}indexAfter(e){return e=this.resolveDepth(e),this.index(e)+(e!=this.depth||this.textOffset?1:0)}start(e){return 0==(e=this.resolveDepth(e))?0:this.path[3*e-1]+1}end(e){return e=this.resolveDepth(e),this.start(e)+this.node(e).content.size}before(e){if(!(e=this.resolveDepth(e)))throw new RangeError("There is no position before the top-level node");return e==this.depth+1?this.pos:this.path[3*e-1]}after(e){if(!(e=this.resolveDepth(e)))throw new RangeError("There is no position after the top-level node");return e==this.depth+1?this.pos:this.path[3*e-1]+this.path[3*e].nodeSize}get textOffset(){return this.pos-this.path[this.path.length-1]}get nodeAfter(){let e=this.parent,t=this.index(this.depth);if(t==e.childCount)return null;let n=this.pos-this.path[this.path.length-1],r=e.child(t);return n?e.child(t).cut(n):r}get nodeBefore(){let e=this.index(this.depth),t=this.pos-this.path[this.path.length-1];return t?this.parent.child(e).cut(0,t):0==e?null:this.parent.child(e-1)}posAtIndex(e,t){t=this.resolveDepth(t);let n=this.path[3*t],r=0==t?0:this.path[3*t-1]+1;for(let t=0;t<e;t++)r+=n.child(t).nodeSize;return r}marks(){let e=this.parent,t=this.index();if(0==e.content.size)return p.none;if(this.textOffset)return e.child(t).marks;let n=e.maybeChild(t-1),r=e.maybeChild(t);if(!n){let e=n;n=r,r=e}let i=n.marks;for(var o=0;o<i.length;o++)!1!==i[o].type.spec.inclusive||r&&i[o].isInSet(r.marks)||(i=i[o--].removeFromSet(i));return i}marksAcross(e){let t=this.parent.maybeChild(this.index());if(!t||!t.isInline)return null;let n=t.marks,r=e.parent.maybeChild(e.index());for(var i=0;i<n.length;i++)!1!==n[i].type.spec.inclusive||r&&n[i].isInSet(r.marks)||(n=n[i--].removeFromSet(n));return n}sharedDepth(e){for(let t=this.depth;t>0;t--)if(this.start(t)<=e&&this.end(t)>=e)return t;return 0}blockRange(e=this,t){if(e.pos<this.pos)return e.blockRange(this);for(let n=this.depth-(this.parent.inlineContent||this.pos==e.pos?1:0);n>=0;n--)if(e.pos<=this.end(n)&&(!t||t(this.node(n))))return new T(this,e,n);return null}sameParent(e){return this.pos-this.parentOffset==e.pos-e.parentOffset}max(e){return e.pos>this.pos?e:this}min(e){return e.pos<this.pos?e:this}toString(){let e="";for(let t=1;t<=this.depth;t++)e+=(e?"/":"")+this.node(t).type.name+"_"+this.index(t-1);return e+":"+this.parentOffset}static resolve(e,t){if(!(t>=0&&t<=e.content.size))throw new RangeError("Position "+t+" out of range");let n=[],r=0,i=t;for(let t=e;;){let{index:e,offset:o}=t.content.findIndex(i),s=i-o;if(n.push(t,e,r+o),!s)break;if(t=t.child(e),t.isText)break;i=s-1,r+=o+1}return new E(t,n,i)}static resolveCached(e,t){let n=O.get(e);if(n)for(let e=0;e<n.elts.length;e++){let r=n.elts[e];if(r.pos==t)return r}else O.set(e,n=new A);let r=n.elts[n.i]=E.resolve(e,t);return n.i=(n.i+1)%M,r}}class A{constructor(){this.elts=[],this.i=0}}const M=12,O=new WeakMap;class T{constructor(e,t,n){this.$from=e,this.$to=t,this.depth=n}get start(){return this.$from.before(this.depth+1)}get end(){return this.$to.after(this.depth+1)}get parent(){return this.$from.node(this.depth)}get startIndex(){return this.$from.index(this.depth)}get endIndex(){return this.$to.indexAfter(this.depth)}}const N=Object.create(null);class F{constructor(e,t,n,r=p.none){this.type=e,this.attrs=t,this.marks=r,this.content=n||c.empty}get children(){return this.content.content}get nodeSize(){return this.isLeaf?1:2+this.content.size}get childCount(){return this.content.childCount}child(e){return this.content.child(e)}maybeChild(e){return this.content.maybeChild(e)}forEach(e){this.content.forEach(e)}nodesBetween(e,t,n,r=0){this.content.nodesBetween(e,t,n,r,this)}descendants(e){this.nodesBetween(0,this.content.size,e)}get textContent(){return this.isLeaf&&this.type.spec.leafText?this.type.spec.leafText(this):this.textBetween(0,this.content.size,"")}textBetween(e,t,n,r){return this.content.textBetween(e,t,n,r)}get firstChild(){return this.content.firstChild}get lastChild(){return this.content.lastChild}eq(e){return this==e||this.sameMarkup(e)&&this.content.eq(e.content)}sameMarkup(e){return this.hasMarkup(e.type,e.attrs,e.marks)}hasMarkup(e,t,n){return this.type==e&&d(this.attrs,t||e.defaultAttrs||N)&&p.sameSet(this.marks,n||p.none)}copy(e=null){return e==this.content?this:new F(this.type,this.attrs,e,this.marks)}mark(e){return e==this.marks?this:new F(this.type,this.attrs,this.content,e)}cut(e,t=this.content.size){return 0==e&&t==this.content.size?this:this.copy(this.content.cut(e,t))}slice(e,t=this.content.size,n=!1){if(e==t)return m.empty;let r=this.resolve(e),i=this.resolve(t),o=n?0:r.sharedDepth(t),s=r.start(o),l=r.node(o).content.cut(r.pos-s,i.pos-s);return new m(l,r.depth-o,i.depth-o)}replace(e,t,n){return k(this.resolve(e),this.resolve(t),n)}nodeAt(e){for(let t=this;;){let{index:n,offset:r}=t.content.findIndex(e);if(t=t.maybeChild(n),!t)return null;if(r==e||t.isText)return t;e-=r+1}}childAfter(e){let{index:t,offset:n}=this.content.findIndex(e);return{node:this.content.maybeChild(t),index:t,offset:n}}childBefore(e){if(0==e)return{node:null,index:0,offset:0};let{index:t,offset:n}=this.content.findIndex(e);if(n<e)return{node:this.content.child(t),index:t,offset:n};let r=this.content.child(t-1);return{node:r,index:t-1,offset:n-r.nodeSize}}resolve(e){return E.resolveCached(this,e)}resolveNoCache(e){return E.resolve(this,e)}rangeHasMark(e,t,n){let r=!1;return t>e&&this.nodesBetween(e,t,(e=>(n.isInSet(e.marks)&&(r=!0),!r))),r}get isBlock(){return this.type.isBlock}get isTextblock(){return this.type.isTextblock}get inlineContent(){return this.type.inlineContent}get isInline(){return this.type.isInline}get isText(){return this.type.isText}get isLeaf(){return this.type.isLeaf}get isAtom(){return this.type.isAtom}toString(){if(this.type.spec.toDebugString)return this.type.spec.toDebugString(this);let e=this.type.name;return this.content.size&&(e+="("+this.content.toStringInner()+")"),R(this.marks,e)}contentMatchAt(e){let t=this.type.contentMatch.matchFragment(this.content,0,e);if(!t)throw new Error("Called contentMatchAt on a node with invalid content");return t}canReplace(e,t,n=c.empty,r=0,i=n.childCount){let o=this.contentMatchAt(e).matchFragment(n,r,i),s=o&&o.matchFragment(this.content,t);if(!s||!s.validEnd)return!1;for(let e=r;e<i;e++)if(!this.type.allowsMarks(n.child(e).marks))return!1;return!0}canReplaceWith(e,t,n,r){if(r&&!this.type.allowsMarks(r))return!1;let i=this.contentMatchAt(e).matchType(n),o=i&&i.matchFragment(this.content,t);return!!o&&o.validEnd}canAppend(e){return e.content.size?this.canReplace(this.childCount,this.childCount,e.content):this.type.compatibleContent(e.type)}check(){this.type.checkContent(this.content),this.type.checkAttrs(this.attrs);let e=p.none;for(let t=0;t<this.marks.length;t++){let n=this.marks[t];n.type.checkAttrs(n.attrs),e=n.addToSet(e)}if(!p.sameSet(e,this.marks))throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((e=>e.type.name))}`);this.content.forEach((e=>e.check()))}toJSON(){let e={type:this.type.name};for(let t in this.attrs){e.attrs=this.attrs;break}return this.content.size&&(e.content=this.content.toJSON()),this.marks.length&&(e.marks=this.marks.map((e=>e.toJSON()))),e}static fromJSON(e,t){if(!t)throw new RangeError("Invalid input for Node.fromJSON");let n;if(t.marks){if(!Array.isArray(t.marks))throw new RangeError("Invalid mark data for Node.fromJSON");n=t.marks.map(e.markFromJSON)}if("text"==t.type){if("string"!=typeof t.text)throw new RangeError("Invalid text node in JSON");return e.text(t.text,n)}let r=c.fromJSON(e,t.content),i=e.nodeType(t.type).create(t.attrs,r,n);return i.type.checkAttrs(i.attrs),i}}F.prototype.text=void 0;class I extends F{constructor(e,t,n,r){if(super(e,t,null,r),!n)throw new RangeError("Empty text nodes are not allowed");this.text=n}toString(){return this.type.spec.toDebugString?this.type.spec.toDebugString(this):R(this.marks,JSON.stringify(this.text))}get textContent(){return this.text}textBetween(e,t){return this.text.slice(e,t)}get nodeSize(){return this.text.length}mark(e){return e==this.marks?this:new I(this.type,this.attrs,this.text,e)}withText(e){return e==this.text?this:new I(this.type,this.attrs,e,this.marks)}cut(e=0,t=this.text.length){return 0==e&&t==this.text.length?this:this.withText(this.text.slice(e,t))}eq(e){return this.sameMarkup(e)&&this.text==e.text}toJSON(){let e=super.toJSON();return e.text=this.text,e}}function R(e,t){for(let n=e.length-1;n>=0;n--)t=e[n].type.name+"("+t+")";return t}class B{constructor(e){this.validEnd=e,this.next=[],this.wrapCache=[]}static parse(e,t){let n=new z(e,t);if(null==n.next)return B.empty;let r=L(n);n.next&&n.err("Unexpected trailing text");let i=function(e){let t=Object.create(null);return n(U(e,0));function n(r){let i=[];r.forEach((t=>{e[t].forEach((({term:t,to:n})=>{if(!t)return;let r;for(let e=0;e<i.length;e++)i[e][0]==t&&(r=i[e][1]);U(e,n).forEach((e=>{r||i.push([t,r=[]]),-1==r.indexOf(e)&&r.push(e)}))}))}));let o=t[r.join(",")]=new B(r.indexOf(e.length-1)>-1);for(let e=0;e<i.length;e++){let r=i[e][1].sort(j);o.next.push({type:i[e][0],next:t[r.join(",")]||n(r)})}return o}}(function(e){let t=[[]];return i(o(e,0),n()),t;function n(){return t.push([])-1}function r(e,n,r){let i={term:r,to:n};return t[e].push(i),i}function i(e,t){e.forEach((e=>e.to=t))}function o(e,t){if("choice"==e.type)return e.exprs.reduce(((e,n)=>e.concat(o(n,t))),[]);if("seq"!=e.type){if("star"==e.type){let s=n();return r(t,s),i(o(e.expr,s),s),[r(s)]}if("plus"==e.type){let s=n();return i(o(e.expr,t),s),i(o(e.expr,s),s),[r(s)]}if("opt"==e.type)return[r(t)].concat(o(e.expr,t));if("range"==e.type){let s=t;for(let t=0;t<e.min;t++){let t=n();i(o(e.expr,s),t),s=t}if(-1==e.max)i(o(e.expr,s),s);else for(let t=e.min;t<e.max;t++){let t=n();r(s,t),i(o(e.expr,s),t),s=t}return[r(s)]}if("name"==e.type)return[r(t,void 0,e.value)];throw new Error("Unknown expr type")}for(let r=0;;r++){let s=o(e.exprs[r],t);if(r==e.exprs.length-1)return s;i(s,t=n())}}}(r));return function(e,t){for(let n=0,r=[e];n<r.length;n++){let e=r[n],i=!e.validEnd,o=[];for(let t=0;t<e.next.length;t++){let{type:n,next:s}=e.next[t];o.push(n.name),!i||n.isText||n.hasRequiredAttrs()||(i=!1),-1==r.indexOf(s)&&r.push(s)}i&&t.err("Only non-generatable nodes ("+o.join(", ")+") in a required position (see https://prosemirror.net/docs/guide/#generatable)")}}(i,n),i}matchType(e){for(let t=0;t<this.next.length;t++)if(this.next[t].type==e)return this.next[t].next;return null}matchFragment(e,t=0,n=e.childCount){let r=this;for(let i=t;r&&i<n;i++)r=r.matchType(e.child(i).type);return r}get inlineContent(){return 0!=this.next.length&&this.next[0].type.isInline}get defaultType(){for(let e=0;e<this.next.length;e++){let{type:t}=this.next[e];if(!t.isText&&!t.hasRequiredAttrs())return t}return null}compatible(e){for(let t=0;t<this.next.length;t++)for(let n=0;n<e.next.length;n++)if(this.next[t].type==e.next[n].type)return!0;return!1}fillBefore(e,t=!1,n=0){let r=[this];return function i(o,s){let l=o.matchFragment(e,n);if(l&&(!t||l.validEnd))return c.from(s.map((e=>e.createAndFill())));for(let e=0;e<o.next.length;e++){let{type:t,next:n}=o.next[e];if(!t.isText&&!t.hasRequiredAttrs()&&-1==r.indexOf(n)){r.push(n);let e=i(n,s.concat(t));if(e)return e}}return null}(this,[])}findWrapping(e){for(let t=0;t<this.wrapCache.length;t+=2)if(this.wrapCache[t]==e)return this.wrapCache[t+1];let t=this.computeWrapping(e);return this.wrapCache.push(e,t),t}computeWrapping(e){let t=Object.create(null),n=[{match:this,type:null,via:null}];for(;n.length;){let r=n.shift(),i=r.match;if(i.matchType(e)){let e=[];for(let t=r;t.type;t=t.via)e.push(t.type);return e.reverse()}for(let e=0;e<i.next.length;e++){let{type:o,next:s}=i.next[e];o.isLeaf||o.hasRequiredAttrs()||o.name in t||r.type&&!s.validEnd||(n.push({match:o.contentMatch,type:o,via:r}),t[o.name]=!0)}}return null}get edgeCount(){return this.next.length}edge(e){if(e>=this.next.length)throw new RangeError(`There's no ${e}th edge in this content match`);return this.next[e]}toString(){let e=[];return function t(n){e.push(n);for(let r=0;r<n.next.length;r++)-1==e.indexOf(n.next[r].next)&&t(n.next[r].next)}(this),e.map(((t,n)=>{let r=n+(t.validEnd?"*":" ")+" ";for(let n=0;n<t.next.length;n++)r+=(n?", ":"")+t.next[n].type.name+"->"+e.indexOf(t.next[n].next);return r})).join("\n")}}B.empty=new B(!0);class z{constructor(e,t){this.string=e,this.nodeTypes=t,this.inline=null,this.pos=0,this.tokens=e.split(/\s*(?=\b|\W|$)/),""==this.tokens[this.tokens.length-1]&&this.tokens.pop(),""==this.tokens[0]&&this.tokens.shift()}get next(){return this.tokens[this.pos]}eat(e){return this.next==e&&(this.pos++||!0)}err(e){throw new SyntaxError(e+" (in content expression '"+this.string+"')")}}function L(e){let t=[];do{t.push(P(e))}while(e.eat("|"));return 1==t.length?t[0]:{type:"choice",exprs:t}}function P(e){let t=[];do{t.push(q(e))}while(e.next&&")"!=e.next&&"|"!=e.next);return 1==t.length?t[0]:{type:"seq",exprs:t}}function q(e){let t=function(e){if(e.eat("(")){let t=L(e);return e.eat(")")||e.err("Missing closing paren"),t}if(!/\W/.test(e.next)){let t=function(e,t){let n=e.nodeTypes,r=n[t];if(r)return[r];let i=[];for(let e in n){let r=n[e];r.isInGroup(t)&&i.push(r)}0==i.length&&e.err("No node type or group '"+t+"' found");return i}(e,e.next).map((t=>(null==e.inline?e.inline=t.isInline:e.inline!=t.isInline&&e.err("Mixing inline and block content"),{type:"name",value:t})));return e.pos++,1==t.length?t[0]:{type:"choice",exprs:t}}e.err("Unexpected token '"+e.next+"'")}(e);for(;;)if(e.eat("+"))t={type:"plus",expr:t};else if(e.eat("*"))t={type:"star",expr:t};else if(e.eat("?"))t={type:"opt",expr:t};else{if(!e.eat("{"))break;t=V(e,t)}return t}function $(e){/\D/.test(e.next)&&e.err("Expected number, got '"+e.next+"'");let t=Number(e.next);return e.pos++,t}function V(e,t){let n=$(e),r=n;return e.eat(",")&&(r="}"!=e.next?$(e):-1),e.eat("}")||e.err("Unclosed braced range"),{type:"range",min:n,max:r,expr:t}}function j(e,t){return t-e}function U(e,t){let n=[];return function t(r){let i=e[r];if(1==i.length&&!i[0].term)return t(i[0].to);n.push(r);for(let e=0;e<i.length;e++){let{term:r,to:o}=i[e];r||-1!=n.indexOf(o)||t(o)}}(t),n.sort(j)}function W(e){let t=Object.create(null);for(let n in e){let r=e[n];if(!r.hasDefault)return null;t[n]=r.default}return t}function H(e,t){let n=Object.create(null);for(let r in e){let i=t&&t[r];if(void 0===i){let t=e[r];if(!t.hasDefault)throw new RangeError("No value supplied for attribute "+r);i=t.default}n[r]=i}return n}function J(e,t,n,r){for(let r in t)if(!(r in e))throw new RangeError(`Unsupported attribute ${r} for ${n} of type ${r}`);for(let n in e){let r=e[n];r.validate&&r.validate(t[n])}}function K(e,t){let n=Object.create(null);if(t)for(let r in t)n[r]=new Z(e,r,t[r]);return n}class G{constructor(e,t,n){this.name=e,this.schema=t,this.spec=n,this.markSet=null,this.groups=n.group?n.group.split(" "):[],this.attrs=K(e,n.attrs),this.defaultAttrs=W(this.attrs),this.contentMatch=null,this.inlineContent=null,this.isBlock=!(n.inline||"text"==e),this.isText="text"==e}get isInline(){return!this.isBlock}get isTextblock(){return this.isBlock&&this.inlineContent}get isLeaf(){return this.contentMatch==B.empty}get isAtom(){return this.isLeaf||!!this.spec.atom}isInGroup(e){return this.groups.indexOf(e)>-1}get whitespace(){return this.spec.whitespace||(this.spec.code?"pre":"normal")}hasRequiredAttrs(){for(let e in this.attrs)if(this.attrs[e].isRequired)return!0;return!1}compatibleContent(e){return this==e||this.contentMatch.compatible(e.contentMatch)}computeAttrs(e){return!e&&this.defaultAttrs?this.defaultAttrs:H(this.attrs,e)}create(e=null,t,n){if(this.isText)throw new Error("NodeType.create can't construct text nodes");return new F(this,this.computeAttrs(e),c.from(t),p.setFrom(n))}createChecked(e=null,t,n){return t=c.from(t),this.checkContent(t),new F(this,this.computeAttrs(e),t,p.setFrom(n))}createAndFill(e=null,t,n){if(e=this.computeAttrs(e),(t=c.from(t)).size){let e=this.contentMatch.fillBefore(t);if(!e)return null;t=e.append(t)}let r=this.contentMatch.matchFragment(t),i=r&&r.fillBefore(c.empty,!0);return i?new F(this,e,t.append(i),p.setFrom(n)):null}validContent(e){let t=this.contentMatch.matchFragment(e);if(!t||!t.validEnd)return!1;for(let t=0;t<e.childCount;t++)if(!this.allowsMarks(e.child(t).marks))return!1;return!0}checkContent(e){if(!this.validContent(e))throw new RangeError(`Invalid content for node ${this.name}: ${e.toString().slice(0,50)}`)}checkAttrs(e){J(this.attrs,e,"node",this.name)}allowsMarkType(e){return null==this.markSet||this.markSet.indexOf(e)>-1}allowsMarks(e){if(null==this.markSet)return!0;for(let t=0;t<e.length;t++)if(!this.allowsMarkType(e[t].type))return!1;return!0}allowedMarks(e){if(null==this.markSet)return e;let t;for(let n=0;n<e.length;n++)this.allowsMarkType(e[n].type)?t&&t.push(e[n]):t||(t=e.slice(0,n));return t?t.length?t:p.none:e}static compile(e,t){let n=Object.create(null);e.forEach(((e,r)=>n[e]=new G(e,t,r)));let r=t.spec.topNode||"doc";if(!n[r])throw new RangeError("Schema is missing its top node type ('"+r+"')");if(!n.text)throw new RangeError("Every schema needs a 'text' type");for(let e in n.text.attrs)throw new RangeError("The text node type should not have attributes");return n}}class Z{constructor(e,t,n){this.hasDefault=Object.prototype.hasOwnProperty.call(n,"default"),this.default=n.default,this.validate="string"==typeof n.validate?function(e,t,n){let r=n.split("|");return n=>{let i=null===n?"null":typeof n;if(r.indexOf(i)<0)throw new RangeError(`Expected value of type ${r} for attribute ${t} on type ${e}, got ${i}`)}}(e,t,n.validate):n.validate}get isRequired(){return!this.hasDefault}}class Y{constructor(e,t,n,r){this.name=e,this.rank=t,this.schema=n,this.spec=r,this.attrs=K(e,r.attrs),this.excluded=null;let i=W(this.attrs);this.instance=i?new p(this,i):null}create(e=null){return!e&&this.instance?this.instance:new p(this,H(this.attrs,e))}static compile(e,t){let n=Object.create(null),r=0;return e.forEach(((e,i)=>n[e]=new Y(e,r++,t,i))),n}removeFromSet(e){for(var t=0;t<e.length;t++)e[t].type==this&&(e=e.slice(0,t).concat(e.slice(t+1)),t--);return e}isInSet(e){for(let t=0;t<e.length;t++)if(e[t].type==this)return e[t]}checkAttrs(e){J(this.attrs,e,"mark",this.name)}excludes(e){return this.excluded.indexOf(e)>-1}}class Q{constructor(e){this.linebreakReplacement=null,this.cached=Object.create(null);let t=this.spec={};for(let n in e)t[n]=e[n];t.nodes=s.from(e.nodes),t.marks=s.from(e.marks||{}),this.nodes=G.compile(this.spec.nodes,this),this.marks=Y.compile(this.spec.marks,this);let n=Object.create(null);for(let e in this.nodes){if(e in this.marks)throw new RangeError(e+" can not be both a node and a mark");let t=this.nodes[e],r=t.spec.content||"",i=t.spec.marks;if(t.contentMatch=n[r]||(n[r]=B.parse(r,this.nodes)),t.inlineContent=t.contentMatch.inlineContent,t.spec.linebreakReplacement){if(this.linebreakReplacement)throw new RangeError("Multiple linebreak nodes defined");if(!t.isInline||!t.isLeaf)throw new RangeError("Linebreak replacement nodes must be inline leaf nodes");this.linebreakReplacement=t}t.markSet="_"==i?null:i?X(this,i.split(" ")):""!=i&&t.inlineContent?null:[]}for(let e in this.marks){let t=this.marks[e],n=t.spec.excludes;t.excluded=null==n?[t]:""==n?[]:X(this,n.split(" "))}this.nodeFromJSON=this.nodeFromJSON.bind(this),this.markFromJSON=this.markFromJSON.bind(this),this.topNodeType=this.nodes[this.spec.topNode||"doc"],this.cached.wrappings=Object.create(null)}node(e,t=null,n,r){if("string"==typeof e)e=this.nodeType(e);else{if(!(e instanceof G))throw new RangeError("Invalid node type: "+e);if(e.schema!=this)throw new RangeError("Node type from different schema used ("+e.name+")")}return e.createChecked(t,n,r)}text(e,t){let n=this.nodes.text;return new I(n,n.defaultAttrs,e,p.setFrom(t))}mark(e,t){return"string"==typeof e&&(e=this.marks[e]),e.create(t)}nodeFromJSON(e){return F.fromJSON(this,e)}markFromJSON(e){return p.fromJSON(this,e)}nodeType(e){let t=this.nodes[e];if(!t)throw new RangeError("Unknown node type: "+e);return t}}function X(e,t){let n=[];for(let r=0;r<t.length;r++){let i=t[r],o=e.marks[i],s=o;if(o)n.push(o);else for(let t in e.marks){let r=e.marks[t];("_"==i||r.spec.group&&r.spec.group.split(" ").indexOf(i)>-1)&&n.push(s=r)}if(!s)throw new SyntaxError("Unknown mark type: '"+t[r]+"'")}return n}class ee{constructor(e,t){this.schema=e,this.rules=t,this.tags=[],this.styles=[];let n=this.matchedStyles=[];t.forEach((e=>{if(function(e){return null!=e.tag}(e))this.tags.push(e);else if(function(e){return null!=e.style}(e)){let t=/[^=]*/.exec(e.style)[0];n.indexOf(t)<0&&n.push(t),this.styles.push(e)}})),this.normalizeLists=!this.tags.some((t=>{if(!/^(ul|ol)\b/.test(t.tag)||!t.node)return!1;let n=e.nodes[t.node];return n.contentMatch.matchType(n)}))}parse(e,t={}){let n=new se(this,t,!1);return n.addAll(e,p.none,t.from,t.to),n.finish()}parseSlice(e,t={}){let n=new se(this,t,!0);return n.addAll(e,p.none,t.from,t.to),m.maxOpen(n.finish())}matchTag(e,t,n){for(let r=n?this.tags.indexOf(n)+1:0;r<this.tags.length;r++){let n=this.tags[r];if(le(e,n.tag)&&(void 0===n.namespace||e.namespaceURI==n.namespace)&&(!n.context||t.matchesContext(n.context))){if(n.getAttrs){let t=n.getAttrs(e);if(!1===t)continue;n.attrs=t||void 0}return n}}}matchStyle(e,t,n,r){for(let i=r?this.styles.indexOf(r)+1:0;i<this.styles.length;i++){let r=this.styles[i],o=r.style;if(!(0!=o.indexOf(e)||r.context&&!n.matchesContext(r.context)||o.length>e.length&&(61!=o.charCodeAt(e.length)||o.slice(e.length+1)!=t))){if(r.getAttrs){let e=r.getAttrs(t);if(!1===e)continue;r.attrs=e||void 0}return r}}}static schemaRules(e){let t=[];function n(e){let n=null==e.priority?50:e.priority,r=0;for(;r<t.length;r++){let e=t[r];if((null==e.priority?50:e.priority)<n)break}t.splice(r,0,e)}for(let t in e.marks){let r=e.marks[t].spec.parseDOM;r&&r.forEach((e=>{n(e=ae(e)),e.mark||e.ignore||e.clearMark||(e.mark=t)}))}for(let t in e.nodes){let r=e.nodes[t].spec.parseDOM;r&&r.forEach((e=>{n(e=ae(e)),e.node||e.ignore||e.mark||(e.node=t)}))}return t}static fromSchema(e){return e.cached.domParser||(e.cached.domParser=new ee(e,ee.schemaRules(e)))}}const te={address:!0,article:!0,aside:!0,blockquote:!0,canvas:!0,dd:!0,div:!0,dl:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,li:!0,noscript:!0,ol:!0,output:!0,p:!0,pre:!0,section:!0,table:!0,tfoot:!0,ul:!0},ne={head:!0,noscript:!0,object:!0,script:!0,style:!0,title:!0},re={ol:!0,ul:!0};function ie(e,t,n){return null!=t?(t?1:0)|("full"===t?2:0):e&&"pre"==e.whitespace?3:-5&n}class oe{constructor(e,t,n,r,i,o){this.type=e,this.attrs=t,this.marks=n,this.solid=r,this.options=o,this.content=[],this.activeMarks=p.none,this.match=i||(4&o?null:e.contentMatch)}findWrapping(e){if(!this.match){if(!this.type)return[];let t=this.type.contentMatch.fillBefore(c.from(e));if(!t){let t,n=this.type.contentMatch;return(t=n.findWrapping(e.type))?(this.match=n,t):null}this.match=this.type.contentMatch.matchFragment(t)}return this.match.findWrapping(e.type)}finish(e){if(!(1&this.options)){let e,t=this.content[this.content.length-1];if(t&&t.isText&&(e=/[ \t\r\n\u000c]+$/.exec(t.text))){let n=t;t.text.length==e[0].length?this.content.pop():this.content[this.content.length-1]=n.withText(n.text.slice(0,n.text.length-e[0].length))}}let t=c.from(this.content);return!e&&this.match&&(t=t.append(this.match.fillBefore(c.empty,!0))),this.type?this.type.create(this.attrs,t,this.marks):t}inlineContext(e){return this.type?this.type.inlineContent:this.content.length?this.content[0].isInline:e.parentNode&&!te.hasOwnProperty(e.parentNode.nodeName.toLowerCase())}}class se{constructor(e,t,n){this.parser=e,this.options=t,this.isOpen=n,this.open=0,this.localPreserveWS=!1;let r,i=t.topNode,o=ie(null,t.preserveWhitespace,0)|(n?4:0);r=i?new oe(i.type,i.attrs,p.none,!0,t.topMatch||i.type.contentMatch,o):new oe(n?null:e.schema.topNodeType,null,p.none,!0,null,o),this.nodes=[r],this.find=t.findPositions,this.needsBlock=!1}get top(){return this.nodes[this.open]}addDOM(e,t){3==e.nodeType?this.addTextNode(e,t):1==e.nodeType&&this.addElement(e,t)}addTextNode(e,t){let n=e.nodeValue,r=this.top,i=2&r.options?"full":this.localPreserveWS||(1&r.options)>0;if("full"===i||r.inlineContext(e)||/[^ \t\r\n\u000c]/.test(n)){if(i)n="full"!==i?n.replace(/\r?\n|\r/g," "):n.replace(/\r\n?/g,"\n");else if(n=n.replace(/[ \t\r\n\u000c]+/g," "),/^[ \t\r\n\u000c]/.test(n)&&this.open==this.nodes.length-1){let t=r.content[r.content.length-1],i=e.previousSibling;(!t||i&&"BR"==i.nodeName||t.isText&&/[ \t\r\n\u000c]$/.test(t.text))&&(n=n.slice(1))}n&&this.insertNode(this.parser.schema.text(n),t,!/\S/.test(n)),this.findInText(e)}else this.findInside(e)}addElement(e,t,n){let r=this.localPreserveWS,i=this.top;("PRE"==e.tagName||/pre/.test(e.style&&e.style.whiteSpace))&&(this.localPreserveWS=!0);let o,s=e.nodeName.toLowerCase();re.hasOwnProperty(s)&&this.parser.normalizeLists&&function(e){for(let t=e.firstChild,n=null;t;t=t.nextSibling){let e=1==t.nodeType?t.nodeName.toLowerCase():null;e&&re.hasOwnProperty(e)&&n?(n.appendChild(t),t=n):"li"==e?n=t:e&&(n=null)}}(e);let l=this.options.ruleFromNode&&this.options.ruleFromNode(e)||(o=this.parser.matchTag(e,this,n));e:if(l?l.ignore:ne.hasOwnProperty(s))this.findInside(e),this.ignoreFallback(e,t);else if(!l||l.skip||l.closeParent){l&&l.closeParent?this.open=Math.max(0,this.open-1):l&&l.skip.nodeType&&(e=l.skip);let n,r=this.needsBlock;if(te.hasOwnProperty(s))i.content.length&&i.content[0].isInline&&this.open&&(this.open--,i=this.top),n=!0,i.type||(this.needsBlock=!0);else if(!e.firstChild){this.leafFallback(e,t);break e}let o=l&&l.skip?t:this.readStyles(e,t);o&&this.addAll(e,o),n&&this.sync(i),this.needsBlock=r}else{let n=this.readStyles(e,t);n&&this.addElementByRule(e,l,n,!1===l.consuming?o:void 0)}this.localPreserveWS=r}leafFallback(e,t){"BR"==e.nodeName&&this.top.type&&this.top.type.inlineContent&&this.addTextNode(e.ownerDocument.createTextNode("\n"),t)}ignoreFallback(e,t){"BR"!=e.nodeName||this.top.type&&this.top.type.inlineContent||this.findPlace(this.parser.schema.text("-"),t,!0)}readStyles(e,t){let n=e.style;if(n&&n.length)for(let e=0;e<this.parser.matchedStyles.length;e++){let r=this.parser.matchedStyles[e],i=n.getPropertyValue(r);if(i)for(let e;;){let n=this.parser.matchStyle(r,i,this,e);if(!n)break;if(n.ignore)return null;if(t=n.clearMark?t.filter((e=>!n.clearMark(e))):t.concat(this.parser.schema.marks[n.mark].create(n.attrs)),!1!==n.consuming)break;e=n}}return t}addElementByRule(e,t,n,r){let i,o;if(t.node)if(o=this.parser.schema.nodes[t.node],o.isLeaf)this.insertNode(o.create(t.attrs),n,"BR"==e.nodeName)||this.leafFallback(e,n);else{let e=this.enter(o,t.attrs||null,n,t.preserveWhitespace);e&&(i=!0,n=e)}else{let e=this.parser.schema.marks[t.mark];n=n.concat(e.create(t.attrs))}let s=this.top;if(o&&o.isLeaf)this.findInside(e);else if(r)this.addElement(e,n,r);else if(t.getContent)this.findInside(e),t.getContent(e,this.parser.schema).forEach((e=>this.insertNode(e,n,!1)));else{let r=e;"string"==typeof t.contentElement?r=e.querySelector(t.contentElement):"function"==typeof t.contentElement?r=t.contentElement(e):t.contentElement&&(r=t.contentElement),this.findAround(e,r,!0),this.addAll(r,n),this.findAround(e,r,!1)}i&&this.sync(s)&&this.open--}addAll(e,t,n,r){let i=n||0;for(let o=n?e.childNodes[n]:e.firstChild,s=null==r?null:e.childNodes[r];o!=s;o=o.nextSibling,++i)this.findAtPoint(e,i),this.addDOM(o,t);this.findAtPoint(e,i)}findPlace(e,t,n){let r,i;for(let t=this.open,o=0;t>=0;t--){let s=this.nodes[t],l=s.findWrapping(e);if(l&&(!r||r.length>l.length+o)&&(r=l,i=s,!l.length))break;if(s.solid){if(n)break;o+=2}}if(!r)return null;this.sync(i);for(let e=0;e<r.length;e++)t=this.enterInner(r[e],null,t,!1);return t}insertNode(e,t,n){if(e.isInline&&this.needsBlock&&!this.top.type){let e=this.textblockFromContext();e&&(t=this.enterInner(e,null,t))}let r=this.findPlace(e,t,n);if(r){this.closeExtra();let t=this.top;t.match&&(t.match=t.match.matchType(e.type));let n=p.none;for(let i of r.concat(e.marks))(t.type?t.type.allowsMarkType(i.type):ce(i.type,e.type))&&(n=i.addToSet(n));return t.content.push(e.mark(n)),!0}return!1}enter(e,t,n,r){let i=this.findPlace(e.create(t),n,!1);return i&&(i=this.enterInner(e,t,n,!0,r)),i}enterInner(e,t,n,r=!1,i){this.closeExtra();let o=this.top;o.match=o.match&&o.match.matchType(e);let s=ie(e,i,o.options);4&o.options&&0==o.content.length&&(s|=4);let l=p.none;return n=n.filter((t=>!(o.type?o.type.allowsMarkType(t.type):ce(t.type,e))||(l=t.addToSet(l),!1))),this.nodes.push(new oe(e,t,l,r,null,s)),this.open++,n}closeExtra(e=!1){let t=this.nodes.length-1;if(t>this.open){for(;t>this.open;t--)this.nodes[t-1].content.push(this.nodes[t].finish(e));this.nodes.length=this.open+1}}finish(){return this.open=0,this.closeExtra(this.isOpen),this.nodes[0].finish(!(!this.isOpen&&!this.options.topOpen))}sync(e){for(let t=this.open;t>=0;t--){if(this.nodes[t]==e)return this.open=t,!0;this.localPreserveWS&&(this.nodes[t].options|=1)}return!1}get currentPos(){this.closeExtra();let e=0;for(let t=this.open;t>=0;t--){let n=this.nodes[t].content;for(let t=n.length-1;t>=0;t--)e+=n[t].nodeSize;t&&e++}return e}findAtPoint(e,t){if(this.find)for(let n=0;n<this.find.length;n++)this.find[n].node==e&&this.find[n].offset==t&&(this.find[n].pos=this.currentPos)}findInside(e){if(this.find)for(let t=0;t<this.find.length;t++)null==this.find[t].pos&&1==e.nodeType&&e.contains(this.find[t].node)&&(this.find[t].pos=this.currentPos)}findAround(e,t,n){if(e!=t&&this.find)for(let r=0;r<this.find.length;r++)if(null==this.find[r].pos&&1==e.nodeType&&e.contains(this.find[r].node)){t.compareDocumentPosition(this.find[r].node)&(n?2:4)&&(this.find[r].pos=this.currentPos)}}findInText(e){if(this.find)for(let t=0;t<this.find.length;t++)this.find[t].node==e&&(this.find[t].pos=this.currentPos-(e.nodeValue.length-this.find[t].offset))}matchesContext(e){if(e.indexOf("|")>-1)return e.split(/\s*\|\s*/).some(this.matchesContext,this);let t=e.split("/"),n=this.options.context,r=!(this.isOpen||n&&n.parent.type!=this.nodes[0].type),i=-(n?n.depth+1:0)+(r?0:1),o=(e,s)=>{for(;e>=0;e--){let l=t[e];if(""==l){if(e==t.length-1||0==e)continue;for(;s>=i;s--)if(o(e-1,s))return!0;return!1}{let e=s>0||0==s&&r?this.nodes[s].type:n&&s>=i?n.node(s-i).type:null;if(!e||e.name!=l&&!e.isInGroup(l))return!1;s--}}return!0};return o(t.length-1,this.open)}textblockFromContext(){let e=this.options.context;if(e)for(let t=e.depth;t>=0;t--){let n=e.node(t).contentMatchAt(e.indexAfter(t)).defaultType;if(n&&n.isTextblock&&n.defaultAttrs)return n}for(let e in this.parser.schema.nodes){let t=this.parser.schema.nodes[e];if(t.isTextblock&&t.defaultAttrs)return t}}}function le(e,t){return(e.matches||e.msMatchesSelector||e.webkitMatchesSelector||e.mozMatchesSelector).call(e,t)}function ae(e){let t={};for(let n in e)t[n]=e[n];return t}function ce(e,t){let n=t.schema.nodes;for(let r in n){let i=n[r];if(!i.allowsMarkType(e))continue;let o=[],s=e=>{o.push(e);for(let n=0;n<e.edgeCount;n++){let{type:r,next:i}=e.edge(n);if(r==t)return!0;if(o.indexOf(i)<0&&s(i))return!0}};if(s(i.contentMatch))return!0}}class he{constructor(e,t){this.nodes=e,this.marks=t}serializeFragment(e,t={},n){n||(n=de(t).createDocumentFragment());let r=n,i=[];return e.forEach((e=>{if(i.length||e.marks.length){let n=0,o=0;for(;n<i.length&&o<e.marks.length;){let t=e.marks[o];if(this.marks[t.type.name]){if(!t.eq(i[n][0])||!1===t.type.spec.spanning)break;n++,o++}else o++}for(;n<i.length;)r=i.pop()[1];for(;o<e.marks.length;){let n=e.marks[o++],s=this.serializeMark(n,e.isInline,t);s&&(i.push([n,r]),r.appendChild(s.dom),r=s.contentDOM||s.dom)}}r.appendChild(this.serializeNodeInner(e,t))})),n}serializeNodeInner(e,t){let{dom:n,contentDOM:r}=me(de(t),this.nodes[e.type.name](e),null,e.attrs);if(r){if(e.isLeaf)throw new RangeError("Content hole not allowed in a leaf node spec");this.serializeFragment(e.content,t,r)}return n}serializeNode(e,t={}){let n=this.serializeNodeInner(e,t);for(let r=e.marks.length-1;r>=0;r--){let i=this.serializeMark(e.marks[r],e.isInline,t);i&&((i.contentDOM||i.dom).appendChild(n),n=i.dom)}return n}serializeMark(e,t,n={}){let r=this.marks[e.type.name];return r&&me(de(n),r(e,t),null,e.attrs)}static renderSpec(e,t,n=null,r){return me(e,t,n,r)}static fromSchema(e){return e.cached.domSerializer||(e.cached.domSerializer=new he(this.nodesFromSchema(e),this.marksFromSchema(e)))}static nodesFromSchema(e){let t=ue(e.nodes);return t.text||(t.text=e=>e.text),t}static marksFromSchema(e){return ue(e.marks)}}function ue(e){let t={};for(let n in e){let r=e[n].spec.toDOM;r&&(t[n]=r)}return t}function de(e){return e.document||window.document}const pe=new WeakMap;function fe(e){let t=pe.get(e);return void 0===t&&pe.set(e,t=function(e){let t=null;function n(e){if(e&&"object"==typeof e)if(Array.isArray(e))if("string"==typeof e[0])t||(t=[]),t.push(e);else for(let t=0;t<e.length;t++)n(e[t]);else for(let t in e)n(e[t])}return n(e),t}(e)),t}function me(e,t,n,r){if("string"==typeof t)return{dom:e.createTextNode(t)};if(null!=t.nodeType)return{dom:t};if(t.dom&&null!=t.dom.nodeType)return t;let i,o=t[0];if("string"!=typeof o)throw new RangeError("Invalid array passed to renderSpec");if(r&&(i=fe(r))&&i.indexOf(t)>-1)throw new RangeError("Using an array from an attribute object as a DOM spec. This may be an attempted cross site scripting attack.");let s,l=o.indexOf(" ");l>0&&(n=o.slice(0,l),o=o.slice(l+1));let a=n?e.createElementNS(n,o):e.createElement(o),c=t[1],h=1;if(c&&"object"==typeof c&&null==c.nodeType&&!Array.isArray(c)){h=2;for(let e in c)if(null!=c[e]){let t=e.indexOf(" ");t>0?a.setAttributeNS(e.slice(0,t),e.slice(t+1),c[e]):a.setAttribute(e,c[e])}}for(let i=h;i<t.length;i++){let o=t[i];if(0===o){if(i<t.length-1||i>h)throw new RangeError("Content hole must be the only child of its parent node");return{dom:a,contentDOM:a}}{let{dom:t,contentDOM:i}=me(e,o,n,r);if(a.appendChild(t),i){if(s)throw new RangeError("Multiple content holes");s=i}}}return{dom:a,contentDOM:s}}const ge=Math.pow(2,16);function ye(e){return 65535&e}class ke{constructor(e,t,n){this.pos=e,this.delInfo=t,this.recover=n}get deleted(){return(8&this.delInfo)>0}get deletedBefore(){return(5&this.delInfo)>0}get deletedAfter(){return(6&this.delInfo)>0}get deletedAcross(){return(4&this.delInfo)>0}}class be{constructor(e,t=!1){if(this.ranges=e,this.inverted=t,!e.length&&be.empty)return be.empty}recover(e){let t=0,n=ye(e);if(!this.inverted)for(let e=0;e<n;e++)t+=this.ranges[3*e+2]-this.ranges[3*e+1];return this.ranges[3*n]+t+function(e){return(e-(65535&e))/ge}(e)}mapResult(e,t=1){return this._map(e,t,!1)}map(e,t=1){return this._map(e,t,!0)}_map(e,t,n){let r=0,i=this.inverted?2:1,o=this.inverted?1:2;for(let s=0;s<this.ranges.length;s+=3){let l=this.ranges[s]-(this.inverted?r:0);if(l>e)break;let a=this.ranges[s+i],c=this.ranges[s+o],h=l+a;if(e<=h){let i=l+r+((a?e==l?-1:e==h?1:t:t)<0?0:c);if(n)return i;let o=e==(t<0?l:h)?null:s/3+(e-l)*ge,u=e==l?2:e==h?1:4;return(t<0?e!=l:e!=h)&&(u|=8),new ke(i,u,o)}r+=c-a}return n?e+r:new ke(e+r,0,null)}touches(e,t){let n=0,r=ye(t),i=this.inverted?2:1,o=this.inverted?1:2;for(let t=0;t<this.ranges.length;t+=3){let s=this.ranges[t]-(this.inverted?n:0);if(s>e)break;let l=this.ranges[t+i];if(e<=s+l&&t==3*r)return!0;n+=this.ranges[t+o]-l}return!1}forEach(e){let t=this.inverted?2:1,n=this.inverted?1:2;for(let r=0,i=0;r<this.ranges.length;r+=3){let o=this.ranges[r],s=o-(this.inverted?i:0),l=o+(this.inverted?0:i),a=this.ranges[r+t],c=this.ranges[r+n];e(s,s+a,l,l+c),i+=c-a}}invert(){return new be(this.ranges,!this.inverted)}toString(){return(this.inverted?"-":"")+JSON.stringify(this.ranges)}static offset(e){return 0==e?be.empty:new be(e<0?[0,-e,0]:[0,0,e])}}be.empty=new be([]);class ve{constructor(e,t,n=0,r=(e?e.length:0)){this.mirror=t,this.from=n,this.to=r,this._maps=e||[],this.ownData=!(e||t)}get maps(){return this._maps}slice(e=0,t=this.maps.length){return new ve(this._maps,this.mirror,e,t)}appendMap(e,t){this.ownData||(this._maps=this._maps.slice(),this.mirror=this.mirror&&this.mirror.slice(),this.ownData=!0),this.to=this._maps.push(e),null!=t&&this.setMirror(this._maps.length-1,t)}appendMapping(e){for(let t=0,n=this._maps.length;t<e._maps.length;t++){let r=e.getMirror(t);this.appendMap(e._maps[t],null!=r&&r<t?n+r:void 0)}}getMirror(e){if(this.mirror)for(let t=0;t<this.mirror.length;t++)if(this.mirror[t]==e)return this.mirror[t+(t%2?-1:1)]}setMirror(e,t){this.mirror||(this.mirror=[]),this.mirror.push(e,t)}appendMappingInverted(e){for(let t=e.maps.length-1,n=this._maps.length+e._maps.length;t>=0;t--){let r=e.getMirror(t);this.appendMap(e._maps[t].invert(),null!=r&&r>t?n-r-1:void 0)}}invert(){let e=new ve;return e.appendMappingInverted(this),e}map(e,t=1){if(this.mirror)return this._map(e,t,!0);for(let n=this.from;n<this.to;n++)e=this._maps[n].map(e,t);return e}mapResult(e,t=1){return this._map(e,t,!1)}_map(e,t,n){let r=0;for(let n=this.from;n<this.to;n++){let i=this._maps[n].mapResult(e,t);if(null!=i.recover){let t=this.getMirror(n);if(null!=t&&t>n&&t<this.to){n=t,e=this._maps[t].recover(i.recover);continue}}r|=i.delInfo,e=i.pos}return n?e:new ke(e,r,null)}}const we=Object.create(null);class xe{getMap(){return be.empty}merge(e){return null}static fromJSON(e,t){if(!t||!t.stepType)throw new RangeError("Invalid input for Step.fromJSON");let n=we[t.stepType];if(!n)throw new RangeError(`No step type ${t.stepType} defined`);return n.fromJSON(e,t)}static jsonID(e,t){if(e in we)throw new RangeError("Duplicate use of step JSON ID "+e);return we[e]=t,t.prototype.jsonID=e,t}}class Ce{constructor(e,t){this.doc=e,this.failed=t}static ok(e){return new Ce(e,null)}static fail(e){return new Ce(null,e)}static fromReplace(e,t,n,r){try{return Ce.ok(e.replace(t,n,r))}catch(e){if(e instanceof f)return Ce.fail(e.message);throw e}}}function De(e,t,n){let r=[];for(let i=0;i<e.childCount;i++){let o=e.child(i);o.content.size&&(o=o.copy(De(o.content,t,o))),o.isInline&&(o=t(o,n,i)),r.push(o)}return c.fromArray(r)}class Se extends xe{constructor(e,t,n){super(),this.from=e,this.to=t,this.mark=n}apply(e){let t=e.slice(this.from,this.to),n=e.resolve(this.from),r=n.node(n.sharedDepth(this.to)),i=new m(De(t.content,((e,t)=>e.isAtom&&t.type.allowsMarkType(this.mark.type)?e.mark(this.mark.addToSet(e.marks)):e),r),t.openStart,t.openEnd);return Ce.fromReplace(e,this.from,this.to,i)}invert(){return new _e(this.from,this.to,this.mark)}map(e){let t=e.mapResult(this.from,1),n=e.mapResult(this.to,-1);return t.deleted&&n.deleted||t.pos>=n.pos?null:new Se(t.pos,n.pos,this.mark)}merge(e){return e instanceof Se&&e.mark.eq(this.mark)&&this.from<=e.to&&this.to>=e.from?new Se(Math.min(this.from,e.from),Math.max(this.to,e.to),this.mark):null}toJSON(){return{stepType:"addMark",mark:this.mark.toJSON(),from:this.from,to:this.to}}static fromJSON(e,t){if("number"!=typeof t.from||"number"!=typeof t.to)throw new RangeError("Invalid input for AddMarkStep.fromJSON");return new Se(t.from,t.to,e.markFromJSON(t.mark))}}xe.jsonID("addMark",Se);class _e extends xe{constructor(e,t,n){super(),this.from=e,this.to=t,this.mark=n}apply(e){let t=e.slice(this.from,this.to),n=new m(De(t.content,(e=>e.mark(this.mark.removeFromSet(e.marks))),e),t.openStart,t.openEnd);return Ce.fromReplace(e,this.from,this.to,n)}invert(){return new Se(this.from,this.to,this.mark)}map(e){let t=e.mapResult(this.from,1),n=e.mapResult(this.to,-1);return t.deleted&&n.deleted||t.pos>=n.pos?null:new _e(t.pos,n.pos,this.mark)}merge(e){return e instanceof _e&&e.mark.eq(this.mark)&&this.from<=e.to&&this.to>=e.from?new _e(Math.min(this.from,e.from),Math.max(this.to,e.to),this.mark):null}toJSON(){return{stepType:"removeMark",mark:this.mark.toJSON(),from:this.from,to:this.to}}static fromJSON(e,t){if("number"!=typeof t.from||"number"!=typeof t.to)throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");return new _e(t.from,t.to,e.markFromJSON(t.mark))}}xe.jsonID("removeMark",_e);class Ee extends xe{constructor(e,t){super(),this.pos=e,this.mark=t}apply(e){let t=e.nodeAt(this.pos);if(!t)return Ce.fail("No node at mark step's position");let n=t.type.create(t.attrs,null,this.mark.addToSet(t.marks));return Ce.fromReplace(e,this.pos,this.pos+1,new m(c.from(n),0,t.isLeaf?0:1))}invert(e){let t=e.nodeAt(this.pos);if(t){let e=this.mark.addToSet(t.marks);if(e.length==t.marks.length){for(let n=0;n<t.marks.length;n++)if(!t.marks[n].isInSet(e))return new Ee(this.pos,t.marks[n]);return new Ee(this.pos,this.mark)}}return new Ae(this.pos,this.mark)}map(e){let t=e.mapResult(this.pos,1);return t.deletedAfter?null:new Ee(t.pos,this.mark)}toJSON(){return{stepType:"addNodeMark",pos:this.pos,mark:this.mark.toJSON()}}static fromJSON(e,t){if("number"!=typeof t.pos)throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");return new Ee(t.pos,e.markFromJSON(t.mark))}}xe.jsonID("addNodeMark",Ee);class Ae extends xe{constructor(e,t){super(),this.pos=e,this.mark=t}apply(e){let t=e.nodeAt(this.pos);if(!t)return Ce.fail("No node at mark step's position");let n=t.type.create(t.attrs,null,this.mark.removeFromSet(t.marks));return Ce.fromReplace(e,this.pos,this.pos+1,new m(c.from(n),0,t.isLeaf?0:1))}invert(e){let t=e.nodeAt(this.pos);return t&&this.mark.isInSet(t.marks)?new Ee(this.pos,this.mark):this}map(e){let t=e.mapResult(this.pos,1);return t.deletedAfter?null:new Ae(t.pos,this.mark)}toJSON(){return{stepType:"removeNodeMark",pos:this.pos,mark:this.mark.toJSON()}}static fromJSON(e,t){if("number"!=typeof t.pos)throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");return new Ae(t.pos,e.markFromJSON(t.mark))}}xe.jsonID("removeNodeMark",Ae);class Me extends xe{constructor(e,t,n,r=!1){super(),this.from=e,this.to=t,this.slice=n,this.structure=r}apply(e){return this.structure&&Te(e,this.from,this.to)?Ce.fail("Structure replace would overwrite content"):Ce.fromReplace(e,this.from,this.to,this.slice)}getMap(){return new be([this.from,this.to-this.from,this.slice.size])}invert(e){return new Me(this.from,this.from+this.slice.size,e.slice(this.from,this.to))}map(e){let t=e.mapResult(this.from,1),n=e.mapResult(this.to,-1);return t.deletedAcross&&n.deletedAcross?null:new Me(t.pos,Math.max(t.pos,n.pos),this.slice,this.structure)}merge(e){if(!(e instanceof Me)||e.structure||this.structure)return null;if(this.from+this.slice.size!=e.from||this.slice.openEnd||e.slice.openStart){if(e.to!=this.from||this.slice.openStart||e.slice.openEnd)return null;{let t=this.slice.size+e.slice.size==0?m.empty:new m(e.slice.content.append(this.slice.content),e.slice.openStart,this.slice.openEnd);return new Me(e.from,this.to,t,this.structure)}}{let t=this.slice.size+e.slice.size==0?m.empty:new m(this.slice.content.append(e.slice.content),this.slice.openStart,e.slice.openEnd);return new Me(this.from,this.to+(e.to-e.from),t,this.structure)}}toJSON(){let e={stepType:"replace",from:this.from,to:this.to};return this.slice.size&&(e.slice=this.slice.toJSON()),this.structure&&(e.structure=!0),e}static fromJSON(e,t){if("number"!=typeof t.from||"number"!=typeof t.to)throw new RangeError("Invalid input for ReplaceStep.fromJSON");return new Me(t.from,t.to,m.fromJSON(e,t.slice),!!t.structure)}}xe.jsonID("replace",Me);class Oe extends xe{constructor(e,t,n,r,i,o,s=!1){super(),this.from=e,this.to=t,this.gapFrom=n,this.gapTo=r,this.slice=i,this.insert=o,this.structure=s}apply(e){if(this.structure&&(Te(e,this.from,this.gapFrom)||Te(e,this.gapTo,this.to)))return Ce.fail("Structure gap-replace would overwrite content");let t=e.slice(this.gapFrom,this.gapTo);if(t.openStart||t.openEnd)return Ce.fail("Gap is not a flat range");let n=this.slice.insertAt(this.insert,t.content);return n?Ce.fromReplace(e,this.from,this.to,n):Ce.fail("Content does not fit in gap")}getMap(){return new be([this.from,this.gapFrom-this.from,this.insert,this.gapTo,this.to-this.gapTo,this.slice.size-this.insert])}invert(e){let t=this.gapTo-this.gapFrom;return new Oe(this.from,this.from+this.slice.size+t,this.from+this.insert,this.from+this.insert+t,e.slice(this.from,this.to).removeBetween(this.gapFrom-this.from,this.gapTo-this.from),this.gapFrom-this.from,this.structure)}map(e){let t=e.mapResult(this.from,1),n=e.mapResult(this.to,-1),r=this.from==this.gapFrom?t.pos:e.map(this.gapFrom,-1),i=this.to==this.gapTo?n.pos:e.map(this.gapTo,1);return t.deletedAcross&&n.deletedAcross||r<t.pos||i>n.pos?null:new Oe(t.pos,n.pos,r,i,this.slice,this.insert,this.structure)}toJSON(){let e={stepType:"replaceAround",from:this.from,to:this.to,gapFrom:this.gapFrom,gapTo:this.gapTo,insert:this.insert};return this.slice.size&&(e.slice=this.slice.toJSON()),this.structure&&(e.structure=!0),e}static fromJSON(e,t){if("number"!=typeof t.from||"number"!=typeof t.to||"number"!=typeof t.gapFrom||"number"!=typeof t.gapTo||"number"!=typeof t.insert)throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");return new Oe(t.from,t.to,t.gapFrom,t.gapTo,m.fromJSON(e,t.slice),t.insert,!!t.structure)}}function Te(e,t,n){let r=e.resolve(t),i=n-t,o=r.depth;for(;i>0&&o>0&&r.indexAfter(o)==r.node(o).childCount;)o--,i--;if(i>0){let e=r.node(o).maybeChild(r.indexAfter(o));for(;i>0;){if(!e||e.isLeaf)return!0;e=e.firstChild,i--}}return!1}function Ne(e,t,n,r=n.contentMatch,i=!0){let o=e.doc.nodeAt(t),s=[],l=t+1;for(let t=0;t<o.childCount;t++){let a=o.child(t),h=l+a.nodeSize,u=r.matchType(a.type);if(u){r=u;for(let t=0;t<a.marks.length;t++)n.allowsMarkType(a.marks[t].type)||e.step(new _e(l,h,a.marks[t]));if(i&&a.isText&&"pre"!=n.whitespace){let e,t,r=/\r?\n|\r/g;for(;e=r.exec(a.text);)t||(t=new m(c.from(n.schema.text(" ",n.allowedMarks(a.marks))),0,0)),s.push(new Me(l+e.index,l+e.index+e[0].length,t))}}else s.push(new Me(l,h,m.empty));l=h}if(!r.validEnd){let t=r.fillBefore(c.empty,!0);e.replace(l,l,new m(t,0,0))}for(let t=s.length-1;t>=0;t--)e.step(s[t])}function Fe(e,t,n){return(0==t||e.canReplace(t,e.childCount))&&(n==e.childCount||e.canReplace(0,n))}function Ie(e){let t=e.parent.content.cutByIndex(e.startIndex,e.endIndex);for(let n=e.depth;;--n){let r=e.$from.node(n),i=e.$from.index(n),o=e.$to.indexAfter(n);if(n<e.depth&&r.canReplace(i,o,t))return n;if(0==n||r.type.spec.isolating||!Fe(r,i,o))break}return null}function Re(e){return{type:e,attrs:null}}function Be(e,t,n,r){t.forEach(((i,o)=>{if(i.isText){let s,l=/\r?\n|\r/g;for(;s=l.exec(i.text);){let i=e.mapping.slice(r).map(n+1+o+s.index);e.replaceWith(i,i+1,t.type.schema.linebreakReplacement.create())}}}))}function ze(e,t,n,r){t.forEach(((i,o)=>{if(i.type==i.type.schema.linebreakReplacement){let i=e.mapping.slice(r).map(n+1+o);e.replaceWith(i,i+1,t.type.schema.text("\n"))}}))}function Le(e,t,n=1,r){let i=e.resolve(t),o=i.depth-n,s=r&&r[r.length-1]||i.parent;if(o<0||i.parent.type.spec.isolating||!i.parent.canReplace(i.index(),i.parent.childCount)||!s.type.validContent(i.parent.content.cutByIndex(i.index(),i.parent.childCount)))return!1;for(let e=i.depth-1,t=n-2;e>o;e--,t--){let n=i.node(e),o=i.index(e);if(n.type.spec.isolating)return!1;let s=n.content.cutByIndex(o,n.childCount),l=r&&r[t+1];l&&(s=s.replaceChild(0,l.type.create(l.attrs)));let a=r&&r[t]||n;if(!n.canReplace(o+1,n.childCount)||!a.type.validContent(s))return!1}let l=i.indexAfter(o),a=r&&r[0];return i.node(o).canReplaceWith(l,l,a?a.type:i.node(o+1).type)}function Pe(e,t){let n=e.resolve(t),r=n.index();return qe(n.nodeBefore,n.nodeAfter)&&n.parent.canReplace(r,r+1)}function qe(e,t){return!(!e||!t||e.isLeaf||!function(e,t){t.content.size||e.type.compatibleContent(t.type);let n=e.contentMatchAt(e.childCount),{linebreakReplacement:r}=e.type.schema;for(let i=0;i<t.childCount;i++){let o=t.child(i),s=o.type==r?e.type.schema.nodes.text:o.type;if(n=n.matchType(s),!n)return!1;if(!e.type.allowsMarks(o.marks))return!1}return n.validEnd}(e,t))}function $e(e,t,n=t,r=m.empty){if(t==n&&!r.size)return null;let i=e.resolve(t),o=e.resolve(n);return Ve(i,o,r)?new Me(t,n,r):new je(i,o,r).fit()}function Ve(e,t,n){return!n.openStart&&!n.openEnd&&e.start()==t.start()&&e.parent.canReplace(e.index(),t.index(),n.content)}xe.jsonID("replaceAround",Oe);class je{constructor(e,t,n){this.$from=e,this.$to=t,this.unplaced=n,this.frontier=[],this.placed=c.empty;for(let t=0;t<=e.depth;t++){let n=e.node(t);this.frontier.push({type:n.type,match:n.contentMatchAt(e.indexAfter(t))})}for(let t=e.depth;t>0;t--)this.placed=c.from(e.node(t).copy(this.placed))}get depth(){return this.frontier.length-1}fit(){for(;this.unplaced.size;){let e=this.findFittable();e?this.placeNodes(e):this.openMore()||this.dropNode()}let e=this.mustMoveInline(),t=this.placed.size-this.depth-this.$from.depth,n=this.$from,r=this.close(e<0?this.$to:n.doc.resolve(e));if(!r)return null;let i=this.placed,o=n.depth,s=r.depth;for(;o&&s&&1==i.childCount;)i=i.firstChild.content,o--,s--;let l=new m(i,o,s);return e>-1?new Oe(n.pos,e,this.$to.pos,this.$to.end(),l,t):l.size||n.pos!=this.$to.pos?new Me(n.pos,r.pos,l):null}findFittable(){let e=this.unplaced.openStart;for(let t=this.unplaced.content,n=0,r=this.unplaced.openEnd;n<e;n++){let i=t.firstChild;if(t.childCount>1&&(r=0),i.type.spec.isolating&&r<=n){e=n;break}t=i.content}for(let t=1;t<=2;t++)for(let n=1==t?e:this.unplaced.openStart;n>=0;n--){let e,r=null;n?(r=He(this.unplaced.content,n-1).firstChild,e=r.content):e=this.unplaced.content;let i=e.firstChild;for(let e=this.depth;e>=0;e--){let o,{type:s,match:l}=this.frontier[e],a=null;if(1==t&&(i?l.matchType(i.type)||(a=l.fillBefore(c.from(i),!1)):r&&s.compatibleContent(r.type)))return{sliceDepth:n,frontierDepth:e,parent:r,inject:a};if(2==t&&i&&(o=l.findWrapping(i.type)))return{sliceDepth:n,frontierDepth:e,parent:r,wrap:o};if(r&&l.matchType(r.type))break}}}openMore(){let{content:e,openStart:t,openEnd:n}=this.unplaced,r=He(e,t);return!(!r.childCount||r.firstChild.isLeaf)&&(this.unplaced=new m(e,t+1,Math.max(n,r.size+t>=e.size-n?t+1:0)),!0)}dropNode(){let{content:e,openStart:t,openEnd:n}=this.unplaced,r=He(e,t);if(r.childCount<=1&&t>0){let i=e.size-t<=t+r.size;this.unplaced=new m(Ue(e,t-1,1),t-1,i?t-1:n)}else this.unplaced=new m(Ue(e,t,1),t,n)}placeNodes({sliceDepth:e,frontierDepth:t,parent:n,inject:r,wrap:i}){for(;this.depth>t;)this.closeFrontierNode();if(i)for(let e=0;e<i.length;e++)this.openFrontierNode(i[e]);let o=this.unplaced,s=n?n.content:o.content,l=o.openStart-e,a=0,h=[],{match:u,type:d}=this.frontier[t];if(r){for(let e=0;e<r.childCount;e++)h.push(r.child(e));u=u.matchFragment(r)}let p=s.size+e-(o.content.size-o.openEnd);for(;a<s.childCount;){let e=s.child(a),t=u.matchType(e.type);if(!t)break;a++,(a>1||0==l||e.content.size)&&(u=t,h.push(Je(e.mark(d.allowedMarks(e.marks)),1==a?l:0,a==s.childCount?p:-1)))}let f=a==s.childCount;f||(p=-1),this.placed=We(this.placed,t,c.from(h)),this.frontier[t].match=u,f&&p<0&&n&&n.type==this.frontier[this.depth].type&&this.frontier.length>1&&this.closeFrontierNode();for(let e=0,t=s;e<p;e++){let e=t.lastChild;this.frontier.push({type:e.type,match:e.contentMatchAt(e.childCount)}),t=e.content}this.unplaced=f?0==e?m.empty:new m(Ue(o.content,e-1,1),e-1,p<0?o.openEnd:e-1):new m(Ue(o.content,e,a),o.openStart,o.openEnd)}mustMoveInline(){if(!this.$to.parent.isTextblock)return-1;let e,t=this.frontier[this.depth];if(!t.type.isTextblock||!Ke(this.$to,this.$to.depth,t.type,t.match,!1)||this.$to.depth==this.depth&&(e=this.findCloseLevel(this.$to))&&e.depth==this.depth)return-1;let{depth:n}=this.$to,r=this.$to.after(n);for(;n>1&&r==this.$to.end(--n);)++r;return r}findCloseLevel(e){e:for(let t=Math.min(this.depth,e.depth);t>=0;t--){let{match:n,type:r}=this.frontier[t],i=t<e.depth&&e.end(t+1)==e.pos+(e.depth-(t+1)),o=Ke(e,t,r,n,i);if(o){for(let n=t-1;n>=0;n--){let{match:t,type:r}=this.frontier[n],i=Ke(e,n,r,t,!0);if(!i||i.childCount)continue e}return{depth:t,fit:o,move:i?e.doc.resolve(e.after(t+1)):e}}}}close(e){let t=this.findCloseLevel(e);if(!t)return null;for(;this.depth>t.depth;)this.closeFrontierNode();t.fit.childCount&&(this.placed=We(this.placed,t.depth,t.fit)),e=t.move;for(let n=t.depth+1;n<=e.depth;n++){let t=e.node(n),r=t.type.contentMatch.fillBefore(t.content,!0,e.index(n));this.openFrontierNode(t.type,t.attrs,r)}return e}openFrontierNode(e,t=null,n){let r=this.frontier[this.depth];r.match=r.match.matchType(e),this.placed=We(this.placed,this.depth,c.from(e.create(t,n))),this.frontier.push({type:e,match:e.contentMatch})}closeFrontierNode(){let e=this.frontier.pop().match.fillBefore(c.empty,!0);e.childCount&&(this.placed=We(this.placed,this.frontier.length,e))}}function Ue(e,t,n){return 0==t?e.cutByIndex(n,e.childCount):e.replaceChild(0,e.firstChild.copy(Ue(e.firstChild.content,t-1,n)))}function We(e,t,n){return 0==t?e.append(n):e.replaceChild(e.childCount-1,e.lastChild.copy(We(e.lastChild.content,t-1,n)))}function He(e,t){for(let n=0;n<t;n++)e=e.firstChild.content;return e}function Je(e,t,n){if(t<=0)return e;let r=e.content;return t>1&&(r=r.replaceChild(0,Je(r.firstChild,t-1,1==r.childCount?n-1:0))),t>0&&(r=e.type.contentMatch.fillBefore(r).append(r),n<=0&&(r=r.append(e.type.contentMatch.matchFragment(r).fillBefore(c.empty,!0)))),e.copy(r)}function Ke(e,t,n,r,i){let o=e.node(t),s=i?e.indexAfter(t):e.index(t);if(s==o.childCount&&!n.compatibleContent(o.type))return null;let l=r.fillBefore(o.content,!0,s);return l&&!function(e,t,n){for(let r=n;r<t.childCount;r++)if(!e.allowsMarks(t.child(r).marks))return!0;return!1}(n,o.content,s)?l:null}function Ge(e,t,n,r,i){if(t<n){let i=e.firstChild;e=e.replaceChild(0,i.copy(Ge(i.content,t+1,n,r,i)))}if(t>r){let t=i.contentMatchAt(0),n=t.fillBefore(e).append(e);e=n.append(t.matchFragment(n).fillBefore(c.empty,!0))}return e}function Ze(e,t){let n=[];for(let r=Math.min(e.depth,t.depth);r>=0;r--){let i=e.start(r);if(i<e.pos-(e.depth-r)||t.end(r)>t.pos+(t.depth-r)||e.node(r).type.spec.isolating||t.node(r).type.spec.isolating)break;(i==t.start(r)||r==e.depth&&r==t.depth&&e.parent.inlineContent&&t.parent.inlineContent&&r&&t.start(r-1)==i-1)&&n.push(r)}return n}class Ye extends xe{constructor(e,t,n){super(),this.pos=e,this.attr=t,this.value=n}apply(e){let t=e.nodeAt(this.pos);if(!t)return Ce.fail("No node at attribute step's position");let n=Object.create(null);for(let e in t.attrs)n[e]=t.attrs[e];n[this.attr]=this.value;let r=t.type.create(n,null,t.marks);return Ce.fromReplace(e,this.pos,this.pos+1,new m(c.from(r),0,t.isLeaf?0:1))}getMap(){return be.empty}invert(e){return new Ye(this.pos,this.attr,e.nodeAt(this.pos).attrs[this.attr])}map(e){let t=e.mapResult(this.pos,1);return t.deletedAfter?null:new Ye(t.pos,this.attr,this.value)}toJSON(){return{stepType:"attr",pos:this.pos,attr:this.attr,value:this.value}}static fromJSON(e,t){if("number"!=typeof t.pos||"string"!=typeof t.attr)throw new RangeError("Invalid input for AttrStep.fromJSON");return new Ye(t.pos,t.attr,t.value)}}xe.jsonID("attr",Ye);class Qe extends xe{constructor(e,t){super(),this.attr=e,this.value=t}apply(e){let t=Object.create(null);for(let n in e.attrs)t[n]=e.attrs[n];t[this.attr]=this.value;let n=e.type.create(t,e.content,e.marks);return Ce.ok(n)}getMap(){return be.empty}invert(e){return new Qe(this.attr,e.attrs[this.attr])}map(e){return this}toJSON(){return{stepType:"docAttr",attr:this.attr,value:this.value}}static fromJSON(e,t){if("string"!=typeof t.attr)throw new RangeError("Invalid input for DocAttrStep.fromJSON");return new Qe(t.attr,t.value)}}xe.jsonID("docAttr",Qe);let Xe=class extends Error{};Xe=function e(t){let n=Error.call(this,t);return n.__proto__=e.prototype,n},(Xe.prototype=Object.create(Error.prototype)).constructor=Xe,Xe.prototype.name="TransformError";class et{constructor(e){this.doc=e,this.steps=[],this.docs=[],this.mapping=new ve}get before(){return this.docs.length?this.docs[0]:this.doc}step(e){let t=this.maybeStep(e);if(t.failed)throw new Xe(t.failed);return this}maybeStep(e){let t=e.apply(this.doc);return t.failed||this.addStep(e,t.doc),t}get docChanged(){return this.steps.length>0}addStep(e,t){this.docs.push(this.doc),this.steps.push(e),this.mapping.appendMap(e.getMap()),this.doc=t}replace(e,t=e,n=m.empty){let r=$e(this.doc,e,t,n);return r&&this.step(r),this}replaceWith(e,t,n){return this.replace(e,t,new m(c.from(n),0,0))}delete(e,t){return this.replace(e,t,m.empty)}insert(e,t){return this.replaceWith(e,e,t)}replaceRange(e,t,n){return function(e,t,n,r){if(!r.size)return e.deleteRange(t,n);let i=e.doc.resolve(t),o=e.doc.resolve(n);if(Ve(i,o,r))return e.step(new Me(t,n,r));let s=Ze(i,e.doc.resolve(n));0==s[s.length-1]&&s.pop();let l=-(i.depth+1);s.unshift(l);for(let e=i.depth,t=i.pos-1;e>0;e--,t--){let n=i.node(e).type.spec;if(n.defining||n.definingAsContext||n.isolating)break;s.indexOf(e)>-1?l=e:i.before(e)==t&&s.splice(1,0,-e)}let a=s.indexOf(l),c=[],h=r.openStart;for(let e=r.content,t=0;;t++){let n=e.firstChild;if(c.push(n),t==r.openStart)break;e=n.content}for(let e=h-1;e>=0;e--){let t=c[e],n=(u=t.type).spec.defining||u.spec.definingForContent;if(n&&!t.sameMarkup(i.node(Math.abs(l)-1)))h=e;else if(n||!t.type.isTextblock)break}var u;for(let t=r.openStart;t>=0;t--){let l=(t+h+1)%(r.openStart+1),u=c[l];if(u)for(let t=0;t<s.length;t++){let c=s[(t+a)%s.length],h=!0;c<0&&(h=!1,c=-c);let d=i.node(c-1),p=i.index(c-1);if(d.canReplaceWith(p,p,u.type,u.marks))return e.replace(i.before(c),h?o.after(c):n,new m(Ge(r.content,0,r.openStart,l),l,r.openEnd))}}let d=e.steps.length;for(let l=s.length-1;l>=0&&(e.replace(t,n,r),!(e.steps.length>d));l--){let e=s[l];e<0||(t=i.before(e),n=o.after(e))}}(this,e,t,n),this}replaceRangeWith(e,t,n){return function(e,t,n,r){if(!r.isInline&&t==n&&e.doc.resolve(t).parent.content.size){let i=function(e,t,n){let r=e.resolve(t);if(r.parent.canReplaceWith(r.index(),r.index(),n))return t;if(0==r.parentOffset)for(let e=r.depth-1;e>=0;e--){let t=r.index(e);if(r.node(e).canReplaceWith(t,t,n))return r.before(e+1);if(t>0)return null}if(r.parentOffset==r.parent.content.size)for(let e=r.depth-1;e>=0;e--){let t=r.indexAfter(e);if(r.node(e).canReplaceWith(t,t,n))return r.after(e+1);if(t<r.node(e).childCount)return null}return null}(e.doc,t,r.type);null!=i&&(t=n=i)}e.replaceRange(t,n,new m(c.from(r),0,0))}(this,e,t,n),this}deleteRange(e,t){return function(e,t,n){let r=e.doc.resolve(t),i=e.doc.resolve(n),o=Ze(r,i);for(let t=0;t<o.length;t++){let n=o[t],s=t==o.length-1;if(s&&0==n||r.node(n).type.contentMatch.validEnd)return e.delete(r.start(n),i.end(n));if(n>0&&(s||r.node(n-1).canReplace(r.index(n-1),i.indexAfter(n-1))))return e.delete(r.before(n),i.after(n))}for(let o=1;o<=r.depth&&o<=i.depth;o++)if(t-r.start(o)==r.depth-o&&n>r.end(o)&&i.end(o)-n!=i.depth-o&&r.start(o-1)==i.start(o-1)&&r.node(o-1).canReplace(r.index(o-1),i.index(o-1)))return e.delete(r.before(o),n);e.delete(t,n)}(this,e,t),this}lift(e,t){return function(e,t,n){let{$from:r,$to:i,depth:o}=t,s=r.before(o+1),l=i.after(o+1),a=s,h=l,u=c.empty,d=0;for(let e=o,t=!1;e>n;e--)t||r.index(e)>0?(t=!0,u=c.from(r.node(e).copy(u)),d++):a--;let p=c.empty,f=0;for(let e=o,t=!1;e>n;e--)t||i.after(e+1)<i.end(e)?(t=!0,p=c.from(i.node(e).copy(p)),f++):h++;e.step(new Oe(a,h,s,l,new m(u.append(p),d,f),u.size-d,!0))}(this,e,t),this}join(e,t=1){return function(e,t,n){let r=null,{linebreakReplacement:i}=e.doc.type.schema,o=e.doc.resolve(t-n),s=o.node().type;if(i&&s.inlineContent){let e="pre"==s.whitespace,t=!!s.contentMatch.matchType(i);e&&!t?r=!1:!e&&t&&(r=!0)}let l=e.steps.length;if(!1===r){let r=e.doc.resolve(t+n);ze(e,r.node(),r.before(),l)}s.inlineContent&&Ne(e,t+n-1,s,o.node().contentMatchAt(o.index()),null==r);let a=e.mapping.slice(l),c=a.map(t-n);if(e.step(new Me(c,a.map(t+n,-1),m.empty,!0)),!0===r){let t=e.doc.resolve(c);Be(e,t.node(),t.before(),e.steps.length)}}(this,e,t),this}wrap(e,t){return function(e,t,n){let r=c.empty;for(let e=n.length-1;e>=0;e--){if(r.size){let t=n[e].type.contentMatch.matchFragment(r);if(!t||!t.validEnd)throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper")}r=c.from(n[e].type.create(n[e].attrs,r))}let i=t.start,o=t.end;e.step(new Oe(i,o,i,o,new m(r,0,0),n.length,!0))}(this,e,t),this}setBlockType(e,t=e,n,r=null){return function(e,t,n,r,i){if(!r.isTextblock)throw new RangeError("Type given to setBlockType should be a textblock");let o=e.steps.length;e.doc.nodesBetween(t,n,((t,n)=>{let s="function"==typeof i?i(t):i;if(t.isTextblock&&!t.hasMarkup(r,s)&&function(e,t,n){let r=e.resolve(t),i=r.index();return r.parent.canReplaceWith(i,i+1,n)}(e.doc,e.mapping.slice(o).map(n),r)){let i=null;if(r.schema.linebreakReplacement){let e="pre"==r.whitespace,t=!!r.contentMatch.matchType(r.schema.linebreakReplacement);e&&!t?i=!1:!e&&t&&(i=!0)}!1===i&&ze(e,t,n,o),Ne(e,e.mapping.slice(o).map(n,1),r,void 0,null===i);let l=e.mapping.slice(o),a=l.map(n,1),h=l.map(n+t.nodeSize,1);return e.step(new Oe(a,h,a+1,h-1,new m(c.from(r.create(s,null,t.marks)),0,0),1,!0)),!0===i&&Be(e,t,n,o),!1}}))}(this,e,t,n,r),this}setNodeMarkup(e,t,n=null,r){return function(e,t,n,r,i){let o=e.doc.nodeAt(t);if(!o)throw new RangeError("No node at given position");n||(n=o.type);let s=n.create(r,null,i||o.marks);if(o.isLeaf)return e.replaceWith(t,t+o.nodeSize,s);if(!n.validContent(o.content))throw new RangeError("Invalid content for node type "+n.name);e.step(new Oe(t,t+o.nodeSize,t+1,t+o.nodeSize-1,new m(c.from(s),0,0),1,!0))}(this,e,t,n,r),this}setNodeAttribute(e,t,n){return this.step(new Ye(e,t,n)),this}setDocAttribute(e,t){return this.step(new Qe(e,t)),this}addNodeMark(e,t){return this.step(new Ee(e,t)),this}removeNodeMark(e,t){let n=this.doc.nodeAt(e);if(!n)throw new RangeError("No node at position "+e);if(t instanceof p)t.isInSet(n.marks)&&this.step(new Ae(e,t));else{let r,i=n.marks,o=[];for(;r=t.isInSet(i);)o.push(new Ae(e,r)),i=r.removeFromSet(i);for(let e=o.length-1;e>=0;e--)this.step(o[e])}return this}split(e,t=1,n){return function(e,t,n=1,r){let i=e.doc.resolve(t),o=c.empty,s=c.empty;for(let e=i.depth,t=i.depth-n,l=n-1;e>t;e--,l--){o=c.from(i.node(e).copy(o));let t=r&&r[l];s=c.from(t?t.type.create(t.attrs,s):i.node(e).copy(s))}e.step(new Me(t,t,new m(o.append(s),n,n),!0))}(this,e,t,n),this}addMark(e,t,n){return function(e,t,n,r){let i,o,s=[],l=[];e.doc.nodesBetween(t,n,((e,a,c)=>{if(!e.isInline)return;let h=e.marks;if(!r.isInSet(h)&&c.type.allowsMarkType(r.type)){let c=Math.max(a,t),u=Math.min(a+e.nodeSize,n),d=r.addToSet(h);for(let e=0;e<h.length;e++)h[e].isInSet(d)||(i&&i.to==c&&i.mark.eq(h[e])?i.to=u:s.push(i=new _e(c,u,h[e])));o&&o.to==c?o.to=u:l.push(o=new Se(c,u,r))}})),s.forEach((t=>e.step(t))),l.forEach((t=>e.step(t)))}(this,e,t,n),this}removeMark(e,t,n){return function(e,t,n,r){let i=[],o=0;e.doc.nodesBetween(t,n,((e,s)=>{if(!e.isInline)return;o++;let l=null;if(r instanceof Y){let t,n=e.marks;for(;t=r.isInSet(n);)(l||(l=[])).push(t),n=t.removeFromSet(n)}else r?r.isInSet(e.marks)&&(l=[r]):l=e.marks;if(l&&l.length){let r=Math.min(s+e.nodeSize,n);for(let e=0;e<l.length;e++){let n,a=l[e];for(let e=0;e<i.length;e++){let t=i[e];t.step==o-1&&a.eq(i[e].style)&&(n=t)}n?(n.to=r,n.step=o):i.push({style:a,from:Math.max(s,t),to:r,step:o})}}})),i.forEach((t=>e.step(new _e(t.from,t.to,t.style))))}(this,e,t,n),this}clearIncompatible(e,t,n){return Ne(this,e,t,n),this}}const tt=Object.create(null);class nt{constructor(e,t,n){this.$anchor=e,this.$head=t,this.ranges=n||[new rt(e.min(t),e.max(t))]}get anchor(){return this.$anchor.pos}get head(){return this.$head.pos}get from(){return this.$from.pos}get to(){return this.$to.pos}get $from(){return this.ranges[0].$from}get $to(){return this.ranges[0].$to}get empty(){let e=this.ranges;for(let t=0;t<e.length;t++)if(e[t].$from.pos!=e[t].$to.pos)return!1;return!0}content(){return this.$from.doc.slice(this.from,this.to,!0)}replace(e,t=m.empty){let n=t.content.lastChild,r=null;for(let e=0;e<t.openEnd;e++)r=n,n=n.lastChild;let i=e.steps.length,o=this.ranges;for(let s=0;s<o.length;s++){let{$from:l,$to:a}=o[s],c=e.mapping.slice(i);e.replaceRange(c.map(l.pos),c.map(a.pos),s?m.empty:t),0==s&&pt(e,i,(n?n.isInline:r&&r.isTextblock)?-1:1)}}replaceWith(e,t){let n=e.steps.length,r=this.ranges;for(let i=0;i<r.length;i++){let{$from:o,$to:s}=r[i],l=e.mapping.slice(n),a=l.map(o.pos),c=l.map(s.pos);i?e.deleteRange(a,c):(e.replaceRangeWith(a,c,t),pt(e,n,t.isInline?-1:1))}}static findFrom(e,t,n=!1){let r=e.parent.inlineContent?new st(e):dt(e.node(0),e.parent,e.pos,e.index(),t,n);if(r)return r;for(let r=e.depth-1;r>=0;r--){let i=t<0?dt(e.node(0),e.node(r),e.before(r+1),e.index(r),t,n):dt(e.node(0),e.node(r),e.after(r+1),e.index(r)+1,t,n);if(i)return i}return null}static near(e,t=1){return this.findFrom(e,t)||this.findFrom(e,-t)||new ht(e.node(0))}static atStart(e){return dt(e,e,0,0,1)||new ht(e)}static atEnd(e){return dt(e,e,e.content.size,e.childCount,-1)||new ht(e)}static fromJSON(e,t){if(!t||!t.type)throw new RangeError("Invalid input for Selection.fromJSON");let n=tt[t.type];if(!n)throw new RangeError(`No selection type ${t.type} defined`);return n.fromJSON(e,t)}static jsonID(e,t){if(e in tt)throw new RangeError("Duplicate use of selection JSON ID "+e);return tt[e]=t,t.prototype.jsonID=e,t}getBookmark(){return st.between(this.$anchor,this.$head).getBookmark()}}nt.prototype.visible=!0;class rt{constructor(e,t){this.$from=e,this.$to=t}}let it=!1;function ot(e){it||e.parent.inlineContent||(it=!0,console.warn("TextSelection endpoint not pointing into a node with inline content ("+e.parent.type.name+")"))}class st extends nt{constructor(e,t=e){ot(e),ot(t),super(e,t)}get $cursor(){return this.$anchor.pos==this.$head.pos?this.$head:null}map(e,t){let n=e.resolve(t.map(this.head));if(!n.parent.inlineContent)return nt.near(n);let r=e.resolve(t.map(this.anchor));return new st(r.parent.inlineContent?r:n,n)}replace(e,t=m.empty){if(super.replace(e,t),t==m.empty){let t=this.$from.marksAcross(this.$to);t&&e.ensureMarks(t)}}eq(e){return e instanceof st&&e.anchor==this.anchor&&e.head==this.head}getBookmark(){return new lt(this.anchor,this.head)}toJSON(){return{type:"text",anchor:this.anchor,head:this.head}}static fromJSON(e,t){if("number"!=typeof t.anchor||"number"!=typeof t.head)throw new RangeError("Invalid input for TextSelection.fromJSON");return new st(e.resolve(t.anchor),e.resolve(t.head))}static create(e,t,n=t){let r=e.resolve(t);return new this(r,n==t?r:e.resolve(n))}static between(e,t,n){let r=e.pos-t.pos;if(n&&!r||(n=r>=0?1:-1),!t.parent.inlineContent){let e=nt.findFrom(t,n,!0)||nt.findFrom(t,-n,!0);if(!e)return nt.near(t,n);t=e.$head}return e.parent.inlineContent||(0==r||(e=(nt.findFrom(e,-n,!0)||nt.findFrom(e,n,!0)).$anchor).pos<t.pos!=r<0)&&(e=t),new st(e,t)}}nt.jsonID("text",st);class lt{constructor(e,t){this.anchor=e,this.head=t}map(e){return new lt(e.map(this.anchor),e.map(this.head))}resolve(e){return st.between(e.resolve(this.anchor),e.resolve(this.head))}}class at extends nt{constructor(e){let t=e.nodeAfter,n=e.node(0).resolve(e.pos+t.nodeSize);super(e,n),this.node=t}map(e,t){let{deleted:n,pos:r}=t.mapResult(this.anchor),i=e.resolve(r);return n?nt.near(i):new at(i)}content(){return new m(c.from(this.node),0,0)}eq(e){return e instanceof at&&e.anchor==this.anchor}toJSON(){return{type:"node",anchor:this.anchor}}getBookmark(){return new ct(this.anchor)}static fromJSON(e,t){if("number"!=typeof t.anchor)throw new RangeError("Invalid input for NodeSelection.fromJSON");return new at(e.resolve(t.anchor))}static create(e,t){return new at(e.resolve(t))}static isSelectable(e){return!e.isText&&!1!==e.type.spec.selectable}}at.prototype.visible=!1,nt.jsonID("node",at);class ct{constructor(e){this.anchor=e}map(e){let{deleted:t,pos:n}=e.mapResult(this.anchor);return t?new lt(n,n):new ct(n)}resolve(e){let t=e.resolve(this.anchor),n=t.nodeAfter;return n&&at.isSelectable(n)?new at(t):nt.near(t)}}class ht extends nt{constructor(e){super(e.resolve(0),e.resolve(e.content.size))}replace(e,t=m.empty){if(t==m.empty){e.delete(0,e.doc.content.size);let t=nt.atStart(e.doc);t.eq(e.selection)||e.setSelection(t)}else super.replace(e,t)}toJSON(){return{type:"all"}}static fromJSON(e){return new ht(e)}map(e){return new ht(e)}eq(e){return e instanceof ht}getBookmark(){return ut}}nt.jsonID("all",ht);const ut={map(){return this},resolve:e=>new ht(e)};function dt(e,t,n,r,i,o=!1){if(t.inlineContent)return st.create(e,n);for(let s=r-(i>0?0:1);i>0?s<t.childCount:s>=0;s+=i){let r=t.child(s);if(r.isAtom){if(!o&&at.isSelectable(r))return at.create(e,n-(i<0?r.nodeSize:0))}else{let t=dt(e,r,n+i,i<0?r.childCount:0,i,o);if(t)return t}n+=r.nodeSize*i}return null}function pt(e,t,n){let r=e.steps.length-1;if(r<t)return;let i,o=e.steps[r];(o instanceof Me||o instanceof Oe)&&(e.mapping.maps[r].forEach(((e,t,n,r)=>{null==i&&(i=r)})),e.setSelection(nt.near(e.doc.resolve(i),n)))}class ft extends et{constructor(e){super(e.doc),this.curSelectionFor=0,this.updated=0,this.meta=Object.create(null),this.time=Date.now(),this.curSelection=e.selection,this.storedMarks=e.storedMarks}get selection(){return this.curSelectionFor<this.steps.length&&(this.curSelection=this.curSelection.map(this.doc,this.mapping.slice(this.curSelectionFor)),this.curSelectionFor=this.steps.length),this.curSelection}setSelection(e){if(e.$from.doc!=this.doc)throw new RangeError("Selection passed to setSelection must point at the current document");return this.curSelection=e,this.curSelectionFor=this.steps.length,this.updated=-3&this.updated|1,this.storedMarks=null,this}get selectionSet(){return(1&this.updated)>0}setStoredMarks(e){return this.storedMarks=e,this.updated|=2,this}ensureMarks(e){return p.sameSet(this.storedMarks||this.selection.$from.marks(),e)||this.setStoredMarks(e),this}addStoredMark(e){return this.ensureMarks(e.addToSet(this.storedMarks||this.selection.$head.marks()))}removeStoredMark(e){return this.ensureMarks(e.removeFromSet(this.storedMarks||this.selection.$head.marks()))}get storedMarksSet(){return(2&this.updated)>0}addStep(e,t){super.addStep(e,t),this.updated=-3&this.updated,this.storedMarks=null}setTime(e){return this.time=e,this}replaceSelection(e){return this.selection.replace(this,e),this}replaceSelectionWith(e,t=!0){let n=this.selection;return t&&(e=e.mark(this.storedMarks||(n.empty?n.$from.marks():n.$from.marksAcross(n.$to)||p.none))),n.replaceWith(this,e),this}deleteSelection(){return this.selection.replace(this),this}insertText(e,t,n){let r=this.doc.type.schema;if(null==t)return e?this.replaceSelectionWith(r.text(e),!0):this.deleteSelection();{if(null==n&&(n=t),n=null==n?t:n,!e)return this.deleteRange(t,n);let i=this.storedMarks;if(!i){let e=this.doc.resolve(t);i=n==t?e.marks():e.marksAcross(this.doc.resolve(n))}return this.replaceRangeWith(t,n,r.text(e,i)),this.selection.empty||this.setSelection(nt.near(this.selection.$to)),this}}setMeta(e,t){return this.meta["string"==typeof e?e:e.key]=t,this}getMeta(e){return this.meta["string"==typeof e?e:e.key]}get isGeneric(){for(let e in this.meta)return!1;return!0}scrollIntoView(){return this.updated|=4,this}get scrolledIntoView(){return(4&this.updated)>0}}function mt(e,t){return t&&e?e.bind(t):e}class gt{constructor(e,t,n){this.name=e,this.init=mt(t.init,n),this.apply=mt(t.apply,n)}}const yt=[new gt("doc",{init:e=>e.doc||e.schema.topNodeType.createAndFill(),apply:e=>e.doc}),new gt("selection",{init:(e,t)=>e.selection||nt.atStart(t.doc),apply:e=>e.selection}),new gt("storedMarks",{init:e=>e.storedMarks||null,apply:(e,t,n,r)=>r.selection.$cursor?e.storedMarks:null}),new gt("scrollToSelection",{init:()=>0,apply:(e,t)=>e.scrolledIntoView?t+1:t})];class kt{constructor(e,t){this.schema=e,this.plugins=[],this.pluginsByKey=Object.create(null),this.fields=yt.slice(),t&&t.forEach((e=>{if(this.pluginsByKey[e.key])throw new RangeError("Adding different instances of a keyed plugin ("+e.key+")");this.plugins.push(e),this.pluginsByKey[e.key]=e,e.spec.state&&this.fields.push(new gt(e.key,e.spec.state,e))}))}}class bt{constructor(e){this.config=e}get schema(){return this.config.schema}get plugins(){return this.config.plugins}apply(e){return this.applyTransaction(e).state}filterTransaction(e,t=-1){for(let n=0;n<this.config.plugins.length;n++)if(n!=t){let t=this.config.plugins[n];if(t.spec.filterTransaction&&!t.spec.filterTransaction.call(t,e,this))return!1}return!0}applyTransaction(e){if(!this.filterTransaction(e))return{state:this,transactions:[]};let t=[e],n=this.applyInner(e),r=null;for(;;){let i=!1;for(let o=0;o<this.config.plugins.length;o++){let s=this.config.plugins[o];if(s.spec.appendTransaction){let l=r?r[o].n:0,a=r?r[o].state:this,c=l<t.length&&s.spec.appendTransaction.call(s,l?t.slice(l):t,a,n);if(c&&n.filterTransaction(c,o)){if(c.setMeta("appendedTransaction",e),!r){r=[];for(let e=0;e<this.config.plugins.length;e++)r.push(e<o?{state:n,n:t.length}:{state:this,n:0})}t.push(c),n=n.applyInner(c),i=!0}r&&(r[o]={state:n,n:t.length})}}if(!i)return{state:n,transactions:t}}}applyInner(e){if(!e.before.eq(this.doc))throw new RangeError("Applying a mismatched transaction");let t=new bt(this.config),n=this.config.fields;for(let r=0;r<n.length;r++){let i=n[r];t[i.name]=i.apply(e,this[i.name],this,t)}return t}get tr(){return new ft(this)}static create(e){let t=new kt(e.doc?e.doc.type.schema:e.schema,e.plugins),n=new bt(t);for(let r=0;r<t.fields.length;r++)n[t.fields[r].name]=t.fields[r].init(e,n);return n}reconfigure(e){let t=new kt(this.schema,e.plugins),n=t.fields,r=new bt(t);for(let t=0;t<n.length;t++){let i=n[t].name;r[i]=this.hasOwnProperty(i)?this[i]:n[t].init(e,r)}return r}toJSON(e){let t={doc:this.doc.toJSON(),selection:this.selection.toJSON()};if(this.storedMarks&&(t.storedMarks=this.storedMarks.map((e=>e.toJSON()))),e&&"object"==typeof e)for(let n in e){if("doc"==n||"selection"==n)throw new RangeError("The JSON fields `doc` and `selection` are reserved");let r=e[n],i=r.spec.state;i&&i.toJSON&&(t[n]=i.toJSON.call(r,this[r.key]))}return t}static fromJSON(e,t,n){if(!t)throw new RangeError("Invalid input for EditorState.fromJSON");if(!e.schema)throw new RangeError("Required config field 'schema' missing");let r=new kt(e.schema,e.plugins),i=new bt(r);return r.fields.forEach((r=>{if("doc"==r.name)i.doc=F.fromJSON(e.schema,t.doc);else if("selection"==r.name)i.selection=nt.fromJSON(i.doc,t.selection);else if("storedMarks"==r.name)t.storedMarks&&(i.storedMarks=t.storedMarks.map(e.schema.markFromJSON));else{if(n)for(let o in n){let s=n[o],l=s.spec.state;if(s.key==r.name&&l&&l.fromJSON&&Object.prototype.hasOwnProperty.call(t,o))return void(i[r.name]=l.fromJSON.call(s,e,t[o],i))}i[r.name]=r.init(e,i)}})),i}}function vt(e,t,n){for(let r in e){let i=e[r];i instanceof Function?i=i.bind(t):"handleDOMEvents"==r&&(i=vt(i,t,{})),n[r]=i}return n}class wt{constructor(e){this.spec=e,this.props={},e.props&&vt(e.props,this,this.props),this.key=e.key?e.key.key:Ct("plugin")}getState(e){return e[this.key]}}const xt=Object.create(null);function Ct(e){return e in xt?e+"$"+ ++xt[e]:(xt[e]=0,e+"$")}class Dt{constructor(e="key"){this.key=Ct(e)}get(e){return e.config.pluginsByKey[this.key]}getState(e){return e[this.key]}}const St=function(e){for(var t=0;;t++)if(!(e=e.previousSibling))return t},_t=function(e){let t=e.assignedSlot||e.parentNode;return t&&11==t.nodeType?t.host:t};let Et=null;const At=function(e,t,n){let r=Et||(Et=document.createRange());return r.setEnd(e,null==n?e.nodeValue.length:n),r.setStart(e,t||0),r},Mt=function(e,t,n,r){return n&&(Tt(e,t,n,r,-1)||Tt(e,t,n,r,1))},Ot=/^(img|br|input|textarea|hr)$/i;function Tt(e,t,n,r,i){for(;;){if(e==n&&t==r)return!0;if(t==(i<0?0:Nt(e))){let n=e.parentNode;if(!n||1!=n.nodeType||Ft(e)||Ot.test(e.nodeName)||"false"==e.contentEditable)return!1;t=St(e)+(i<0?0:1),e=n}else{if(1!=e.nodeType)return!1;if("false"==(e=e.childNodes[t+(i<0?-1:0)]).contentEditable)return!1;t=i<0?Nt(e):0}}}function Nt(e){return 3==e.nodeType?e.nodeValue.length:e.childNodes.length}function Ft(e){let t;for(let n=e;n&&!(t=n.pmViewDesc);n=n.parentNode);return t&&t.node&&t.node.isBlock&&(t.dom==e||t.contentDOM==e)}const It=function(e){return e.focusNode&&Mt(e.focusNode,e.focusOffset,e.anchorNode,e.anchorOffset)};function Rt(e,t){let n=document.createEvent("Event");return n.initEvent("keydown",!0,!0),n.keyCode=e,n.key=n.code=t,n}const Bt="undefined"!=typeof navigator?navigator:null,zt="undefined"!=typeof document?document:null,Lt=Bt&&Bt.userAgent||"",Pt=/Edge\/(\d+)/.exec(Lt),qt=/MSIE \d/.exec(Lt),$t=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(Lt),Vt=!!(qt||$t||Pt),jt=qt?document.documentMode:$t?+$t[1]:Pt?+Pt[1]:0,Ut=!Vt&&/gecko\/(\d+)/i.test(Lt);Ut&&(/Firefox\/(\d+)/.exec(Lt)||[0,0])[1];const Wt=!Vt&&/Chrome\/(\d+)/.exec(Lt),Ht=!!Wt,Jt=Wt?+Wt[1]:0,Kt=!Vt&&!!Bt&&/Apple Computer/.test(Bt.vendor),Gt=Kt&&(/Mobile\/\w+/.test(Lt)||!!Bt&&Bt.maxTouchPoints>2),Zt=Gt||!!Bt&&/Mac/.test(Bt.platform),Yt=!!Bt&&/Win/.test(Bt.platform),Qt=/Android \d/.test(Lt),Xt=!!zt&&"webkitFontSmoothing"in zt.documentElement.style,en=Xt?+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]:0;function tn(e){let t=e.defaultView&&e.defaultView.visualViewport;return t?{left:0,right:t.width,top:0,bottom:t.height}:{left:0,right:e.documentElement.clientWidth,top:0,bottom:e.documentElement.clientHeight}}function nn(e,t){return"number"==typeof e?e:e[t]}function rn(e){let t=e.getBoundingClientRect(),n=t.width/e.offsetWidth||1,r=t.height/e.offsetHeight||1;return{left:t.left,right:t.left+e.clientWidth*n,top:t.top,bottom:t.top+e.clientHeight*r}}function on(e,t,n){let r=e.someProp("scrollThreshold")||0,i=e.someProp("scrollMargin")||5,o=e.dom.ownerDocument;for(let s=n||e.dom;s;){if(1!=s.nodeType){s=_t(s);continue}let e=s,n=e==o.body,l=n?tn(o):rn(e),a=0,c=0;if(t.top<l.top+nn(r,"top")?c=-(l.top-t.top+nn(i,"top")):t.bottom>l.bottom-nn(r,"bottom")&&(c=t.bottom-t.top>l.bottom-l.top?t.top+nn(i,"top")-l.top:t.bottom-l.bottom+nn(i,"bottom")),t.left<l.left+nn(r,"left")?a=-(l.left-t.left+nn(i,"left")):t.right>l.right-nn(r,"right")&&(a=t.right-l.right+nn(i,"right")),a||c)if(n)o.defaultView.scrollBy(a,c);else{let n=e.scrollLeft,r=e.scrollTop;c&&(e.scrollTop+=c),a&&(e.scrollLeft+=a);let i=e.scrollLeft-n,o=e.scrollTop-r;t={left:t.left-i,top:t.top-o,right:t.right-i,bottom:t.bottom-o}}let h=n?"fixed":getComputedStyle(s).position;if(/^(fixed|sticky)$/.test(h))break;s="absolute"==h?s.offsetParent:_t(s)}}function sn(e){let t=[],n=e.ownerDocument;for(let r=e;r&&(t.push({dom:r,top:r.scrollTop,left:r.scrollLeft}),e!=n);r=_t(r));return t}function ln(e,t){for(let n=0;n<e.length;n++){let{dom:r,top:i,left:o}=e[n];r.scrollTop!=i+t&&(r.scrollTop=i+t),r.scrollLeft!=o&&(r.scrollLeft=o)}}let an=null;function cn(e,t){let n,r,i,o,s=2e8,l=0,a=t.top,c=t.top;for(let h=e.firstChild,u=0;h;h=h.nextSibling,u++){let e;if(1==h.nodeType)e=h.getClientRects();else{if(3!=h.nodeType)continue;e=At(h).getClientRects()}for(let d=0;d<e.length;d++){let p=e[d];if(p.top<=a&&p.bottom>=c){a=Math.max(p.bottom,a),c=Math.min(p.top,c);let e=p.left>t.left?p.left-t.left:p.right<t.left?t.left-p.right:0;if(e<s){n=h,s=e,r=e&&3==n.nodeType?{left:p.right<t.left?p.right:p.left,top:t.top}:t,1==h.nodeType&&e&&(l=u+(t.left>=(p.left+p.right)/2?1:0));continue}}else p.top>t.top&&!i&&p.left<=t.left&&p.right>=t.left&&(i=h,o={left:Math.max(p.left,Math.min(p.right,t.left)),top:p.top});!n&&(t.left>=p.right&&t.top>=p.top||t.left>=p.left&&t.top>=p.bottom)&&(l=u+1)}}return!n&&i&&(n=i,r=o,s=0),n&&3==n.nodeType?function(e,t){let n=e.nodeValue.length,r=document.createRange();for(let i=0;i<n;i++){r.setEnd(e,i+1),r.setStart(e,i);let n=fn(r,1);if(n.top!=n.bottom&&hn(t,n))return{node:e,offset:i+(t.left>=(n.left+n.right)/2?1:0)}}return{node:e,offset:0}}(n,r):!n||s&&1==n.nodeType?{node:e,offset:l}:cn(n,r)}function hn(e,t){return e.left>=t.left-1&&e.left<=t.right+1&&e.top>=t.top-1&&e.top<=t.bottom+1}function un(e,t,n){let r=e.childNodes.length;if(r&&n.top<n.bottom)for(let i=Math.max(0,Math.min(r-1,Math.floor(r*(t.top-n.top)/(n.bottom-n.top))-2)),o=i;;){let n=e.childNodes[o];if(1==n.nodeType){let e=n.getClientRects();for(let r=0;r<e.length;r++){let i=e[r];if(hn(t,i))return un(n,t,i)}}if((o=(o+1)%r)==i)break}return e}function dn(e,t){let n,r=e.dom.ownerDocument,i=0,o=function(e,t,n){if(e.caretPositionFromPoint)try{let r=e.caretPositionFromPoint(t,n);if(r)return{node:r.offsetNode,offset:Math.min(Nt(r.offsetNode),r.offset)}}catch(e){}if(e.caretRangeFromPoint){let r=e.caretRangeFromPoint(t,n);if(r)return{node:r.startContainer,offset:Math.min(Nt(r.startContainer),r.startOffset)}}}(r,t.left,t.top);o&&({node:n,offset:i}=o);let s,l=(e.root.elementFromPoint?e.root:r).elementFromPoint(t.left,t.top);if(!l||!e.dom.contains(1!=l.nodeType?l.parentNode:l)){let n=e.dom.getBoundingClientRect();if(!hn(t,n))return null;if(l=un(e.dom,t,n),!l)return null}if(Kt)for(let e=l;n&&e;e=_t(e))e.draggable&&(n=void 0);if(l=function(e,t){let n=e.parentNode;return n&&/^li$/i.test(n.nodeName)&&t.left<e.getBoundingClientRect().left?n:e}(l,t),n){if(Ut&&1==n.nodeType&&(i=Math.min(i,n.childNodes.length),i<n.childNodes.length)){let e,r=n.childNodes[i];"IMG"==r.nodeName&&(e=r.getBoundingClientRect()).right<=t.left&&e.bottom>t.top&&i++}let r;Xt&&i&&1==n.nodeType&&1==(r=n.childNodes[i-1]).nodeType&&"false"==r.contentEditable&&r.getBoundingClientRect().top>=t.top&&i--,n==e.dom&&i==n.childNodes.length-1&&1==n.lastChild.nodeType&&t.top>n.lastChild.getBoundingClientRect().bottom?s=e.state.doc.content.size:0!=i&&1==n.nodeType&&"BR"==n.childNodes[i-1].nodeName||(s=function(e,t,n,r){let i=-1;for(let n=t,o=!1;n!=e.dom;){let t,s=e.docView.nearestDesc(n,!0);if(!s)return null;if(1==s.dom.nodeType&&(s.node.isBlock&&s.parent||!s.contentDOM)&&((t=s.dom.getBoundingClientRect()).width||t.height)&&(s.node.isBlock&&s.parent&&(!o&&t.left>r.left||t.top>r.top?i=s.posBefore:(!o&&t.right<r.left||t.bottom<r.top)&&(i=s.posAfter),o=!0),!s.contentDOM&&i<0&&!s.node.isText))return(s.node.isBlock?r.top<(t.top+t.bottom)/2:r.left<(t.left+t.right)/2)?s.posBefore:s.posAfter;n=s.dom.parentNode}return i>-1?i:e.docView.posFromDOM(t,n,-1)}(e,n,i,t))}null==s&&(s=function(e,t,n){let{node:r,offset:i}=cn(t,n),o=-1;if(1==r.nodeType&&!r.firstChild){let e=r.getBoundingClientRect();o=e.left!=e.right&&n.left>(e.left+e.right)/2?1:-1}return e.docView.posFromDOM(r,i,o)}(e,l,t));let a=e.docView.nearestDesc(l,!0);return{pos:s,inside:a?a.posAtStart-a.border:-1}}function pn(e){return e.top<e.bottom||e.left<e.right}function fn(e,t){let n=e.getClientRects();if(n.length){let e=n[t<0?0:n.length-1];if(pn(e))return e}return Array.prototype.find.call(n,pn)||e.getBoundingClientRect()}const mn=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;function gn(e,t,n){let{node:r,offset:i,atom:o}=e.docView.domFromPos(t,n<0?-1:1),s=Xt||Ut;if(3==r.nodeType){if(!s||!mn.test(r.nodeValue)&&(n<0?i:i!=r.nodeValue.length)){let e=i,t=i,o=n<0?1:-1;return n<0&&!i?(t++,o=-1):n>=0&&i==r.nodeValue.length?(e--,o=1):n<0?e--:t++,yn(fn(At(r,e,t),o),o<0)}{let e=fn(At(r,i,i),n);if(Ut&&i&&/\s/.test(r.nodeValue[i-1])&&i<r.nodeValue.length){let t=fn(At(r,i-1,i-1),-1);if(t.top==e.top){let n=fn(At(r,i,i+1),-1);if(n.top!=e.top)return yn(n,n.left<t.left)}}return e}}if(!e.state.doc.resolve(t-(o||0)).parent.inlineContent){if(null==o&&i&&(n<0||i==Nt(r))){let e=r.childNodes[i-1];if(1==e.nodeType)return kn(e.getBoundingClientRect(),!1)}if(null==o&&i<Nt(r)){let e=r.childNodes[i];if(1==e.nodeType)return kn(e.getBoundingClientRect(),!0)}return kn(r.getBoundingClientRect(),n>=0)}if(null==o&&i&&(n<0||i==Nt(r))){let e=r.childNodes[i-1],t=3==e.nodeType?At(e,Nt(e)-(s?0:1)):1!=e.nodeType||"BR"==e.nodeName&&e.nextSibling?null:e;if(t)return yn(fn(t,1),!1)}if(null==o&&i<Nt(r)){let e=r.childNodes[i];for(;e.pmViewDesc&&e.pmViewDesc.ignoreForCoords;)e=e.nextSibling;let t=e?3==e.nodeType?At(e,0,s?0:1):1==e.nodeType?e:null:null;if(t)return yn(fn(t,-1),!0)}return yn(fn(3==r.nodeType?At(r):r,-n),n>=0)}function yn(e,t){if(0==e.width)return e;let n=t?e.left:e.right;return{top:e.top,bottom:e.bottom,left:n,right:n}}function kn(e,t){if(0==e.height)return e;let n=t?e.top:e.bottom;return{top:n,bottom:n,left:e.left,right:e.right}}function bn(e,t,n){let r=e.state,i=e.root.activeElement;r!=t&&e.updateState(t),i!=e.dom&&e.focus();try{return n()}finally{r!=t&&e.updateState(r),i!=e.dom&&i&&i.focus()}}const vn=/[\u0590-\u08ac]/;let wn=null,xn=null,Cn=!1;function Dn(e,t,n){return wn==t&&xn==n?Cn:(wn=t,xn=n,Cn="up"==n||"down"==n?function(e,t,n){let r=t.selection,i="up"==n?r.$from:r.$to;return bn(e,t,(()=>{let{node:t}=e.docView.domFromPos(i.pos,"up"==n?-1:1);for(;;){let n=e.docView.nearestDesc(t,!0);if(!n)break;if(n.node.isBlock){t=n.contentDOM||n.dom;break}t=n.dom.parentNode}let r=gn(e,i.pos,1);for(let e=t.firstChild;e;e=e.nextSibling){let t;if(1==e.nodeType)t=e.getClientRects();else{if(3!=e.nodeType)continue;t=At(e,0,e.nodeValue.length).getClientRects()}for(let e=0;e<t.length;e++){let i=t[e];if(i.bottom>i.top+1&&("up"==n?r.top-i.top>2*(i.bottom-r.top):i.bottom-r.bottom>2*(r.bottom-i.top)))return!1}}return!0}))}(e,t,n):function(e,t,n){let{$head:r}=t.selection;if(!r.parent.isTextblock)return!1;let i=r.parentOffset,o=!i,s=i==r.parent.content.size,l=e.domSelection();return l?vn.test(r.parent.textContent)&&l.modify?bn(e,t,(()=>{let{focusNode:t,focusOffset:i,anchorNode:o,anchorOffset:s}=e.domSelectionRange(),a=l.caretBidiLevel;l.modify("move",n,"character");let c=r.depth?e.docView.domAfterPos(r.before()):e.dom,{focusNode:h,focusOffset:u}=e.domSelectionRange(),d=h&&!c.contains(1==h.nodeType?h:h.parentNode)||t==h&&i==u;try{l.collapse(o,s),t&&(t!=o||i!=s)&&l.extend&&l.extend(t,i)}catch(e){}return null!=a&&(l.caretBidiLevel=a),d})):"left"==n||"backward"==n?o:s:r.pos==r.start()||r.pos==r.end()}(e,t,n))}class Sn{constructor(e,t,n,r){this.parent=e,this.children=t,this.dom=n,this.contentDOM=r,this.dirty=0,n.pmViewDesc=this}matchesWidget(e){return!1}matchesMark(e){return!1}matchesNode(e,t,n){return!1}matchesHack(e){return!1}parseRule(){return null}stopEvent(e){return!1}get size(){let e=0;for(let t=0;t<this.children.length;t++)e+=this.children[t].size;return e}get border(){return 0}destroy(){this.parent=void 0,this.dom.pmViewDesc==this&&(this.dom.pmViewDesc=void 0);for(let e=0;e<this.children.length;e++)this.children[e].destroy()}posBeforeChild(e){for(let t=0,n=this.posAtStart;;t++){let r=this.children[t];if(r==e)return n;n+=r.size}}get posBefore(){return this.parent.posBeforeChild(this)}get posAtStart(){return this.parent?this.parent.posBeforeChild(this)+this.border:0}get posAfter(){return this.posBefore+this.size}get posAtEnd(){return this.posAtStart+this.size-2*this.border}localPosFromDOM(e,t,n){if(this.contentDOM&&this.contentDOM.contains(1==e.nodeType?e:e.parentNode)){if(n<0){let n,r;if(e==this.contentDOM)n=e.childNodes[t-1];else{for(;e.parentNode!=this.contentDOM;)e=e.parentNode;n=e.previousSibling}for(;n&&(!(r=n.pmViewDesc)||r.parent!=this);)n=n.previousSibling;return n?this.posBeforeChild(r)+r.size:this.posAtStart}{let n,r;if(e==this.contentDOM)n=e.childNodes[t];else{for(;e.parentNode!=this.contentDOM;)e=e.parentNode;n=e.nextSibling}for(;n&&(!(r=n.pmViewDesc)||r.parent!=this);)n=n.nextSibling;return n?this.posBeforeChild(r):this.posAtEnd}}let r;if(e==this.dom&&this.contentDOM)r=t>St(this.contentDOM);else if(this.contentDOM&&this.contentDOM!=this.dom&&this.dom.contains(this.contentDOM))r=2&e.compareDocumentPosition(this.contentDOM);else if(this.dom.firstChild){if(0==t)for(let t=e;;t=t.parentNode){if(t==this.dom){r=!1;break}if(t.previousSibling)break}if(null==r&&t==e.childNodes.length)for(let t=e;;t=t.parentNode){if(t==this.dom){r=!0;break}if(t.nextSibling)break}}return(null==r?n>0:r)?this.posAtEnd:this.posAtStart}nearestDesc(e,t=!1){for(let n=!0,r=e;r;r=r.parentNode){let i,o=this.getDesc(r);if(o&&(!t||o.node)){if(!n||!(i=o.nodeDOM)||(1==i.nodeType?i.contains(1==e.nodeType?e:e.parentNode):i==e))return o;n=!1}}}getDesc(e){let t=e.pmViewDesc;for(let e=t;e;e=e.parent)if(e==this)return t}posFromDOM(e,t,n){for(let r=e;r;r=r.parentNode){let i=this.getDesc(r);if(i)return i.localPosFromDOM(e,t,n)}return-1}descAt(e){for(let t=0,n=0;t<this.children.length;t++){let r=this.children[t],i=n+r.size;if(n==e&&i!=n){for(;!r.border&&r.children.length;)for(let e=0;e<r.children.length;e++){let t=r.children[e];if(t.size){r=t;break}}return r}if(e<i)return r.descAt(e-n-r.border);n=i}}domFromPos(e,t){if(!this.contentDOM)return{node:this.dom,offset:0,atom:e+1};let n=0,r=0;for(let t=0;n<this.children.length;n++){let i=this.children[n],o=t+i.size;if(o>e||i instanceof Nn){r=e-t;break}t=o}if(r)return this.children[n].domFromPos(r-this.children[n].border,t);for(let e;n&&!(e=this.children[n-1]).size&&e instanceof _n&&e.side>=0;n--);if(t<=0){let e,r=!0;for(;e=n?this.children[n-1]:null,e&&e.dom.parentNode!=this.contentDOM;n--,r=!1);return e&&t&&r&&!e.border&&!e.domAtom?e.domFromPos(e.size,t):{node:this.contentDOM,offset:e?St(e.dom)+1:0}}{let e,r=!0;for(;e=n<this.children.length?this.children[n]:null,e&&e.dom.parentNode!=this.contentDOM;n++,r=!1);return e&&r&&!e.border&&!e.domAtom?e.domFromPos(0,t):{node:this.contentDOM,offset:e?St(e.dom):this.contentDOM.childNodes.length}}}parseRange(e,t,n=0){if(0==this.children.length)return{node:this.contentDOM,from:e,to:t,fromOffset:0,toOffset:this.contentDOM.childNodes.length};let r=-1,i=-1;for(let o=n,s=0;;s++){let n=this.children[s],l=o+n.size;if(-1==r&&e<=l){let i=o+n.border;if(e>=i&&t<=l-n.border&&n.node&&n.contentDOM&&this.contentDOM.contains(n.contentDOM))return n.parseRange(e,t,i);e=o;for(let t=s;t>0;t--){let n=this.children[t-1];if(n.size&&n.dom.parentNode==this.contentDOM&&!n.emptyChildAt(1)){r=St(n.dom)+1;break}e-=n.size}-1==r&&(r=0)}if(r>-1&&(l>t||s==this.children.length-1)){t=l;for(let e=s+1;e<this.children.length;e++){let n=this.children[e];if(n.size&&n.dom.parentNode==this.contentDOM&&!n.emptyChildAt(-1)){i=St(n.dom);break}t+=n.size}-1==i&&(i=this.contentDOM.childNodes.length);break}o=l}return{node:this.contentDOM,from:e,to:t,fromOffset:r,toOffset:i}}emptyChildAt(e){if(this.border||!this.contentDOM||!this.children.length)return!1;let t=this.children[e<0?0:this.children.length-1];return 0==t.size||t.emptyChildAt(e)}domAfterPos(e){let{node:t,offset:n}=this.domFromPos(e,0);if(1!=t.nodeType||n==t.childNodes.length)throw new RangeError("No node after pos "+e);return t.childNodes[n]}setSelection(e,t,n,r=!1){let i=Math.min(e,t),o=Math.max(e,t);for(let s=0,l=0;s<this.children.length;s++){let a=this.children[s],c=l+a.size;if(i>l&&o<c)return a.setSelection(e-l-a.border,t-l-a.border,n,r);l=c}let s=this.domFromPos(e,e?-1:1),l=t==e?s:this.domFromPos(t,t?-1:1),a=n.root.getSelection(),c=n.domSelectionRange(),h=!1;if((Ut||Kt)&&e==t){let{node:e,offset:t}=s;if(3==e.nodeType){if(h=!(!t||"\n"!=e.nodeValue[t-1]),h&&t==e.nodeValue.length)for(let t,n=e;n;n=n.parentNode){if(t=n.nextSibling){"BR"==t.nodeName&&(s=l={node:t.parentNode,offset:St(t)+1});break}let e=n.pmViewDesc;if(e&&e.node&&e.node.isBlock)break}}else{let n=e.childNodes[t-1];h=n&&("BR"==n.nodeName||"false"==n.contentEditable)}}if(Ut&&c.focusNode&&c.focusNode!=l.node&&1==c.focusNode.nodeType){let e=c.focusNode.childNodes[c.focusOffset];e&&"false"==e.contentEditable&&(r=!0)}if(!(r||h&&Kt)&&Mt(s.node,s.offset,c.anchorNode,c.anchorOffset)&&Mt(l.node,l.offset,c.focusNode,c.focusOffset))return;let u=!1;if((a.extend||e==t)&&!h){a.collapse(s.node,s.offset);try{e!=t&&a.extend(l.node,l.offset),u=!0}catch(e){}}if(!u){if(e>t){let e=s;s=l,l=e}let n=document.createRange();n.setEnd(l.node,l.offset),n.setStart(s.node,s.offset),a.removeAllRanges(),a.addRange(n)}}ignoreMutation(e){return!this.contentDOM&&"selection"!=e.type}get contentLost(){return this.contentDOM&&this.contentDOM!=this.dom&&!this.dom.contains(this.contentDOM)}markDirty(e,t){for(let n=0,r=0;r<this.children.length;r++){let i=this.children[r],o=n+i.size;if(n==o?e<=o&&t>=n:e<o&&t>n){let r=n+i.border,s=o-i.border;if(e>=r&&t<=s)return this.dirty=e==n||t==o?2:1,void(e!=r||t!=s||!i.contentLost&&i.dom.parentNode==this.contentDOM?i.markDirty(e-r,t-r):i.dirty=3);i.dirty=i.dom!=i.contentDOM||i.dom.parentNode!=this.contentDOM||i.children.length?3:2}n=o}this.dirty=2}markParentsDirty(){let e=1;for(let t=this.parent;t;t=t.parent,e++){let n=1==e?2:1;t.dirty<n&&(t.dirty=n)}}get domAtom(){return!1}get ignoreForCoords(){return!1}isText(e){return!1}}class _n extends Sn{constructor(e,t,n,r){let i,o=t.type.toDOM;if("function"==typeof o&&(o=o(n,(()=>i?i.parent?i.parent.posBeforeChild(i):void 0:r))),!t.type.spec.raw){if(1!=o.nodeType){let e=document.createElement("span");e.appendChild(o),o=e}o.contentEditable="false",o.classList.add("ProseMirror-widget")}super(e,[],o,null),this.widget=t,this.widget=t,i=this}matchesWidget(e){return 0==this.dirty&&e.type.eq(this.widget.type)}parseRule(){return{ignore:!0}}stopEvent(e){let t=this.widget.spec.stopEvent;return!!t&&t(e)}ignoreMutation(e){return"selection"!=e.type||this.widget.spec.ignoreSelection}destroy(){this.widget.type.destroy(this.dom),super.destroy()}get domAtom(){return!0}get side(){return this.widget.type.side}}class En extends Sn{constructor(e,t,n,r){super(e,[],t,null),this.textDOM=n,this.text=r}get size(){return this.text.length}localPosFromDOM(e,t){return e!=this.textDOM?this.posAtStart+(t?this.size:0):this.posAtStart+t}domFromPos(e){return{node:this.textDOM,offset:e}}ignoreMutation(e){return"characterData"===e.type&&e.target.nodeValue==e.oldValue}}class An extends Sn{constructor(e,t,n,r,i){super(e,[],n,r),this.mark=t,this.spec=i}static create(e,t,n,r){let i=r.nodeViews[t.type.name],o=i&&i(t,r,n);return o&&o.dom||(o=he.renderSpec(document,t.type.spec.toDOM(t,n),null,t.attrs)),new An(e,t,o.dom,o.contentDOM||o.dom,o)}parseRule(){return 3&this.dirty||this.mark.type.spec.reparseInView?null:{mark:this.mark.type.name,attrs:this.mark.attrs,contentElement:this.contentDOM}}matchesMark(e){return 3!=this.dirty&&this.mark.eq(e)}markDirty(e,t){if(super.markDirty(e,t),0!=this.dirty){let e=this.parent;for(;!e.node;)e=e.parent;e.dirty<this.dirty&&(e.dirty=this.dirty),this.dirty=0}}slice(e,t,n){let r=An.create(this.parent,this.mark,!0,n),i=this.children,o=this.size;t<o&&(i=Wn(i,t,o,n)),e>0&&(i=Wn(i,0,e,n));for(let e=0;e<i.length;e++)i[e].parent=r;return r.children=i,r}ignoreMutation(e){return this.spec.ignoreMutation?this.spec.ignoreMutation(e):super.ignoreMutation(e)}destroy(){this.spec.destroy&&this.spec.destroy(),super.destroy()}}class Mn extends Sn{constructor(e,t,n,r,i,o,s,l,a){super(e,[],i,o),this.node=t,this.outerDeco=n,this.innerDeco=r,this.nodeDOM=s}static create(e,t,n,r,i,o){let s,l=i.nodeViews[t.type.name],a=l&&l(t,i,(()=>s?s.parent?s.parent.posBeforeChild(s):void 0:o),n,r),c=a&&a.dom,h=a&&a.contentDOM;if(t.isText)if(c){if(3!=c.nodeType)throw new RangeError("Text must be rendered as a DOM text node")}else c=document.createTextNode(t.text);else if(!c){let e=he.renderSpec(document,t.type.spec.toDOM(t),null,t.attrs);({dom:c,contentDOM:h}=e)}h||t.isText||"BR"==c.nodeName||(c.hasAttribute("contenteditable")||(c.contentEditable="false"),t.type.spec.draggable&&(c.draggable=!0));let u=c;return c=qn(c,n,t),a?s=new Fn(e,t,n,r,c,h||null,u,a,i,o+1):t.isText?new Tn(e,t,n,r,c,u,i):new Mn(e,t,n,r,c,h||null,u,i,o+1)}parseRule(){if(this.node.type.spec.reparseInView)return null;let e={node:this.node.type.name,attrs:this.node.attrs};if("pre"==this.node.type.whitespace&&(e.preserveWhitespace="full"),this.contentDOM)if(this.contentLost){for(let t=this.children.length-1;t>=0;t--){let n=this.children[t];if(this.dom.contains(n.dom.parentNode)){e.contentElement=n.dom.parentNode;break}}e.contentElement||(e.getContent=()=>c.empty)}else e.contentElement=this.contentDOM;else e.getContent=()=>this.node.content;return e}matchesNode(e,t,n){return 0==this.dirty&&e.eq(this.node)&&$n(t,this.outerDeco)&&n.eq(this.innerDeco)}get size(){return this.node.nodeSize}get border(){return this.node.isLeaf?0:1}updateChildren(e,t){let n=this.node.inlineContent,r=t,i=e.composing?this.localCompositionInfo(e,t):null,o=i&&i.pos>-1?i:null,s=i&&i.pos<0,l=new jn(this,o&&o.node,e);!function(e,t,n,r){let i=t.locals(e),o=0;if(0==i.length){for(let n=0;n<e.childCount;n++){let s=e.child(n);r(s,i,t.forChild(o,s),n),o+=s.nodeSize}return}let s=0,l=[],a=null;for(let c=0;;){let h,u,d,p;for(;s<i.length&&i[s].to==o;){let e=i[s++];e.widget&&(h?(u||(u=[h])).push(e):h=e)}if(h)if(u){u.sort(Un);for(let e=0;e<u.length;e++)n(u[e],c,!!a)}else n(h,c,!!a);if(a)p=-1,d=a,a=null;else{if(!(c<e.childCount))break;p=c,d=e.child(c++)}for(let e=0;e<l.length;e++)l[e].to<=o&&l.splice(e--,1);for(;s<i.length&&i[s].from<=o&&i[s].to>o;)l.push(i[s++]);let f=o+d.nodeSize;if(d.isText){let e=f;s<i.length&&i[s].from<e&&(e=i[s].from);for(let t=0;t<l.length;t++)l[t].to<e&&(e=l[t].to);e<f&&(a=d.cut(e-o),d=d.cut(0,e-o),f=e,p=-1)}else for(;s<i.length&&i[s].to<f;)s++;r(d,d.isInline&&!d.isLeaf?l.filter((e=>!e.inline)):l.slice(),t.forChild(o,d),p),o=f}}(this.node,this.innerDeco,((t,i,o)=>{t.spec.marks?l.syncToMarks(t.spec.marks,n,e):t.type.side>=0&&!o&&l.syncToMarks(i==this.node.childCount?p.none:this.node.child(i).marks,n,e),l.placeWidget(t,e,r)}),((t,o,a,c)=>{let h;l.syncToMarks(t.marks,n,e),l.findNodeMatch(t,o,a,c)||s&&e.state.selection.from>r&&e.state.selection.to<r+t.nodeSize&&(h=l.findIndexWithChild(i.node))>-1&&l.updateNodeAt(t,o,a,h,e)||l.updateNextNode(t,o,a,e,c,r)||l.addNode(t,o,a,e,r),r+=t.nodeSize})),l.syncToMarks([],n,e),this.node.isTextblock&&l.addTextblockHacks(),l.destroyRest(),(l.changed||2==this.dirty)&&(o&&this.protectLocalComposition(e,o),In(this.contentDOM,this.children,e),Gt&&function(e){if("UL"==e.nodeName||"OL"==e.nodeName){let t=e.style.cssText;e.style.cssText=t+"; list-style: square !important",window.getComputedStyle(e).listStyle,e.style.cssText=t}}(this.dom))}localCompositionInfo(e,t){let{from:n,to:r}=e.state.selection;if(!(e.state.selection instanceof st)||n<t||r>t+this.node.content.size)return null;let i=e.input.compositionNode;if(!i||!this.dom.contains(i.parentNode))return null;if(this.node.inlineContent){let e=i.nodeValue,o=function(e,t,n,r){for(let i=0,o=0;i<e.childCount&&o<=r;){let s=e.child(i++),l=o;if(o+=s.nodeSize,!s.isText)continue;let a=s.text;for(;i<e.childCount;){let t=e.child(i++);if(o+=t.nodeSize,!t.isText)break;a+=t.text}if(o>=n){if(o>=r&&a.slice(r-t.length-l,r-l)==t)return r-t.length;let e=l<r?a.lastIndexOf(t,r-l-1):-1;if(e>=0&&e+t.length+l>=n)return l+e;if(n==r&&a.length>=r+t.length-l&&a.slice(r-l,r-l+t.length)==t)return r}}return-1}(this.node.content,e,n-t,r-t);return o<0?null:{node:i,pos:o,text:e}}return{node:i,pos:-1,text:""}}protectLocalComposition(e,{node:t,pos:n,text:r}){if(this.getDesc(t))return;let i=t;for(;i.parentNode!=this.contentDOM;i=i.parentNode){for(;i.previousSibling;)i.parentNode.removeChild(i.previousSibling);for(;i.nextSibling;)i.parentNode.removeChild(i.nextSibling);i.pmViewDesc&&(i.pmViewDesc=void 0)}let o=new En(this,i,t,r);e.input.compositionNodes.push(o),this.children=Wn(this.children,n,n+r.length,e,o)}update(e,t,n,r){return!(3==this.dirty||!e.sameMarkup(this.node))&&(this.updateInner(e,t,n,r),!0)}updateInner(e,t,n,r){this.updateOuterDeco(t),this.node=e,this.innerDeco=n,this.contentDOM&&this.updateChildren(r,this.posAtStart),this.dirty=0}updateOuterDeco(e){if($n(e,this.outerDeco))return;let t=1!=this.nodeDOM.nodeType,n=this.dom;this.dom=Ln(this.dom,this.nodeDOM,zn(this.outerDeco,this.node,t),zn(e,this.node,t)),this.dom!=n&&(n.pmViewDesc=void 0,this.dom.pmViewDesc=this),this.outerDeco=e}selectNode(){1==this.nodeDOM.nodeType&&this.nodeDOM.classList.add("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!0)}deselectNode(){1==this.nodeDOM.nodeType&&(this.nodeDOM.classList.remove("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||this.dom.removeAttribute("draggable"))}get domAtom(){return this.node.isAtom}}function On(e,t,n,r,i){qn(r,t,e);let o=new Mn(void 0,e,t,n,r,r,r,i,0);return o.contentDOM&&o.updateChildren(i,0),o}class Tn extends Mn{constructor(e,t,n,r,i,o,s){super(e,t,n,r,i,null,o,s,0)}parseRule(){let e=this.nodeDOM.parentNode;for(;e&&e!=this.dom&&!e.pmIsDeco;)e=e.parentNode;return{skip:e||!0}}update(e,t,n,r){return!(3==this.dirty||0!=this.dirty&&!this.inParent()||!e.sameMarkup(this.node))&&(this.updateOuterDeco(t),0==this.dirty&&e.text==this.node.text||e.text==this.nodeDOM.nodeValue||(this.nodeDOM.nodeValue=e.text,r.trackWrites==this.nodeDOM&&(r.trackWrites=null)),this.node=e,this.dirty=0,!0)}inParent(){let e=this.parent.contentDOM;for(let t=this.nodeDOM;t;t=t.parentNode)if(t==e)return!0;return!1}domFromPos(e){return{node:this.nodeDOM,offset:e}}localPosFromDOM(e,t,n){return e==this.nodeDOM?this.posAtStart+Math.min(t,this.node.text.length):super.localPosFromDOM(e,t,n)}ignoreMutation(e){return"characterData"!=e.type&&"selection"!=e.type}slice(e,t,n){let r=this.node.cut(e,t),i=document.createTextNode(r.text);return new Tn(this.parent,r,this.outerDeco,this.innerDeco,i,i,n)}markDirty(e,t){super.markDirty(e,t),this.dom==this.nodeDOM||0!=e&&t!=this.nodeDOM.nodeValue.length||(this.dirty=3)}get domAtom(){return!1}isText(e){return this.node.text==e}}class Nn extends Sn{parseRule(){return{ignore:!0}}matchesHack(e){return 0==this.dirty&&this.dom.nodeName==e}get domAtom(){return!0}get ignoreForCoords(){return"IMG"==this.dom.nodeName}}class Fn extends Mn{constructor(e,t,n,r,i,o,s,l,a,c){super(e,t,n,r,i,o,s,a,c),this.spec=l}update(e,t,n,r){if(3==this.dirty)return!1;if(this.spec.update&&(this.node.type==e.type||this.spec.multiType)){let i=this.spec.update(e,t,n);return i&&this.updateInner(e,t,n,r),i}return!(!this.contentDOM&&!e.isLeaf)&&super.update(e,t,n,r)}selectNode(){this.spec.selectNode?this.spec.selectNode():super.selectNode()}deselectNode(){this.spec.deselectNode?this.spec.deselectNode():super.deselectNode()}setSelection(e,t,n,r){this.spec.setSelection?this.spec.setSelection(e,t,n.root):super.setSelection(e,t,n,r)}destroy(){this.spec.destroy&&this.spec.destroy(),super.destroy()}stopEvent(e){return!!this.spec.stopEvent&&this.spec.stopEvent(e)}ignoreMutation(e){return this.spec.ignoreMutation?this.spec.ignoreMutation(e):super.ignoreMutation(e)}}function In(e,t,n){let r=e.firstChild,i=!1;for(let o=0;o<t.length;o++){let s=t[o],l=s.dom;if(l.parentNode==e){for(;l!=r;)r=Vn(r),i=!0;r=r.nextSibling}else i=!0,e.insertBefore(l,r);if(s instanceof An){let t=r?r.previousSibling:e.lastChild;In(s.contentDOM,s.children,n),r=t?t.nextSibling:e.firstChild}}for(;r;)r=Vn(r),i=!0;i&&n.trackWrites==e&&(n.trackWrites=null)}const Rn=function(e){e&&(this.nodeName=e)};Rn.prototype=Object.create(null);const Bn=[new Rn];function zn(e,t,n){if(0==e.length)return Bn;let r=n?Bn[0]:new Rn,i=[r];for(let o=0;o<e.length;o++){let s=e[o].type.attrs;if(s){s.nodeName&&i.push(r=new Rn(s.nodeName));for(let e in s){let o=s[e];null!=o&&(n&&1==i.length&&i.push(r=new Rn(t.isInline?"span":"div")),"class"==e?r.class=(r.class?r.class+" ":"")+o:"style"==e?r.style=(r.style?r.style+";":"")+o:"nodeName"!=e&&(r[e]=o))}}}return i}function Ln(e,t,n,r){if(n==Bn&&r==Bn)return t;let i=t;for(let t=0;t<r.length;t++){let o=r[t],s=n[t];if(t){let t;s&&s.nodeName==o.nodeName&&i!=e&&(t=i.parentNode)&&t.nodeName.toLowerCase()==o.nodeName||(t=document.createElement(o.nodeName),t.pmIsDeco=!0,t.appendChild(i),s=Bn[0]),i=t}Pn(i,s||Bn[0],o)}return i}function Pn(e,t,n){for(let r in t)"class"==r||"style"==r||"nodeName"==r||r in n||e.removeAttribute(r);for(let r in n)"class"!=r&&"style"!=r&&"nodeName"!=r&&n[r]!=t[r]&&e.setAttribute(r,n[r]);if(t.class!=n.class){let r=t.class?t.class.split(" ").filter(Boolean):[],i=n.class?n.class.split(" ").filter(Boolean):[];for(let t=0;t<r.length;t++)-1==i.indexOf(r[t])&&e.classList.remove(r[t]);for(let t=0;t<i.length;t++)-1==r.indexOf(i[t])&&e.classList.add(i[t]);0==e.classList.length&&e.removeAttribute("class")}if(t.style!=n.style){if(t.style){let n,r=/\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g;for(;n=r.exec(t.style);)e.style.removeProperty(n[1])}n.style&&(e.style.cssText+=n.style)}}function qn(e,t,n){return Ln(e,e,Bn,zn(t,n,1!=e.nodeType))}function $n(e,t){if(e.length!=t.length)return!1;for(let n=0;n<e.length;n++)if(!e[n].type.eq(t[n].type))return!1;return!0}function Vn(e){let t=e.nextSibling;return e.parentNode.removeChild(e),t}class jn{constructor(e,t,n){this.lock=t,this.view=n,this.index=0,this.stack=[],this.changed=!1,this.top=e,this.preMatch=function(e,t){let n=t,r=n.children.length,i=e.childCount,o=new Map,s=[];e:for(;i>0;){let l;for(;;)if(r){let e=n.children[r-1];if(!(e instanceof An)){l=e,r--;break}n=e,r=e.children.length}else{if(n==t)break e;r=n.parent.children.indexOf(n),n=n.parent}let a=l.node;if(a){if(a!=e.child(i-1))break;--i,o.set(l,i),s.push(l)}}return{index:i,matched:o,matches:s.reverse()}}(e.node.content,e)}destroyBetween(e,t){if(e!=t){for(let n=e;n<t;n++)this.top.children[n].destroy();this.top.children.splice(e,t-e),this.changed=!0}}destroyRest(){this.destroyBetween(this.index,this.top.children.length)}syncToMarks(e,t,n){let r=0,i=this.stack.length>>1,o=Math.min(i,e.length);for(;r<o&&(r==i-1?this.top:this.stack[r+1<<1]).matchesMark(e[r])&&!1!==e[r].type.spec.spanning;)r++;for(;r<i;)this.destroyRest(),this.top.dirty=0,this.index=this.stack.pop(),this.top=this.stack.pop(),i--;for(;i<e.length;){this.stack.push(this.top,this.index+1);let r=-1;for(let t=this.index;t<Math.min(this.index+3,this.top.children.length);t++){let n=this.top.children[t];if(n.matchesMark(e[i])&&!this.isLocked(n.dom)){r=t;break}}if(r>-1)r>this.index&&(this.changed=!0,this.destroyBetween(this.index,r)),this.top=this.top.children[this.index];else{let r=An.create(this.top,e[i],t,n);this.top.children.splice(this.index,0,r),this.top=r,this.changed=!0}this.index=0,i++}}findNodeMatch(e,t,n,r){let i,o=-1;if(r>=this.preMatch.index&&(i=this.preMatch.matches[r-this.preMatch.index]).parent==this.top&&i.matchesNode(e,t,n))o=this.top.children.indexOf(i,this.index);else for(let r=this.index,i=Math.min(this.top.children.length,r+5);r<i;r++){let i=this.top.children[r];if(i.matchesNode(e,t,n)&&!this.preMatch.matched.has(i)){o=r;break}}return!(o<0)&&(this.destroyBetween(this.index,o),this.index++,!0)}updateNodeAt(e,t,n,r,i){let o=this.top.children[r];return 3==o.dirty&&o.dom==o.contentDOM&&(o.dirty=2),!!o.update(e,t,n,i)&&(this.destroyBetween(this.index,r),this.index++,!0)}findIndexWithChild(e){for(;;){let t=e.parentNode;if(!t)return-1;if(t==this.top.contentDOM){let t=e.pmViewDesc;if(t)for(let e=this.index;e<this.top.children.length;e++)if(this.top.children[e]==t)return e;return-1}e=t}}updateNextNode(e,t,n,r,i,o){for(let s=this.index;s<this.top.children.length;s++){let l=this.top.children[s];if(l instanceof Mn){let a=this.preMatch.matched.get(l);if(null!=a&&a!=i)return!1;let c,h=l.dom,u=this.isLocked(h)&&!(e.isText&&l.node&&l.node.isText&&l.nodeDOM.nodeValue==e.text&&3!=l.dirty&&$n(t,l.outerDeco));if(!u&&l.update(e,t,n,r))return this.destroyBetween(this.index,s),l.dom!=h&&(this.changed=!0),this.index++,!0;if(!u&&(c=this.recreateWrapper(l,e,t,n,r,o)))return this.destroyBetween(this.index,s),this.top.children[this.index]=c,c.contentDOM&&(c.dirty=2,c.updateChildren(r,o+1),c.dirty=0),this.changed=!0,this.index++,!0;break}}return!1}recreateWrapper(e,t,n,r,i,o){if(e.dirty||t.isAtom||!e.children.length||!e.node.content.eq(t.content)||!$n(n,e.outerDeco)||!r.eq(e.innerDeco))return null;let s=Mn.create(this.top,t,n,r,i,o);if(s.contentDOM){s.children=e.children,e.children=[];for(let e of s.children)e.parent=s}return e.destroy(),s}addNode(e,t,n,r,i){let o=Mn.create(this.top,e,t,n,r,i);o.contentDOM&&o.updateChildren(r,i+1),this.top.children.splice(this.index++,0,o),this.changed=!0}placeWidget(e,t,n){let r=this.index<this.top.children.length?this.top.children[this.index]:null;if(!r||!r.matchesWidget(e)||e!=r.widget&&r.widget.type.toDOM.parentNode){let r=new _n(this.top,e,t,n);this.top.children.splice(this.index++,0,r),this.changed=!0}else this.index++}addTextblockHacks(){let e=this.top.children[this.index-1],t=this.top;for(;e instanceof An;)t=e,e=t.children[t.children.length-1];(!e||!(e instanceof Tn)||/\n$/.test(e.node.text)||this.view.requiresGeckoHackNode&&/\s$/.test(e.node.text))&&((Kt||Ht)&&e&&"false"==e.dom.contentEditable&&this.addHackNode("IMG",t),this.addHackNode("BR",this.top))}addHackNode(e,t){if(t==this.top&&this.index<t.children.length&&t.children[this.index].matchesHack(e))this.index++;else{let n=document.createElement(e);"IMG"==e&&(n.className="ProseMirror-separator",n.alt=""),"BR"==e&&(n.className="ProseMirror-trailingBreak");let r=new Nn(this.top,[],n,null);t!=this.top?t.children.push(r):t.children.splice(this.index++,0,r),this.changed=!0}}isLocked(e){return this.lock&&(e==this.lock||1==e.nodeType&&e.contains(this.lock.parentNode))}}function Un(e,t){return e.type.side-t.type.side}function Wn(e,t,n,r,i){let o=[];for(let s=0,l=0;s<e.length;s++){let a=e[s],c=l,h=l+=a.size;c>=n||h<=t?o.push(a):(c<t&&o.push(a.slice(0,t-c,r)),i&&(o.push(i),i=void 0),h>n&&o.push(a.slice(n-c,a.size,r)))}return o}function Hn(e,t=null){let n=e.domSelectionRange(),r=e.state.doc;if(!n.focusNode)return null;let i=e.docView.nearestDesc(n.focusNode),o=i&&0==i.size,s=e.docView.posFromDOM(n.focusNode,n.focusOffset,1);if(s<0)return null;let l,a,c=r.resolve(s);if(It(n)){for(l=s;i&&!i.node;)i=i.parent;let e=i.node;if(i&&e.isAtom&&at.isSelectable(e)&&i.parent&&(!e.isInline||!function(e,t,n){for(let r=0==t,i=t==Nt(e);r||i;){if(e==n)return!0;let t=St(e);if(!(e=e.parentNode))return!1;r=r&&0==t,i=i&&t==Nt(e)}}(n.focusNode,n.focusOffset,i.dom))){let e=i.posBefore;a=new at(s==e?c:r.resolve(e))}}else{if(n instanceof e.dom.ownerDocument.defaultView.Selection&&n.rangeCount>1){let t=s,i=s;for(let r=0;r<n.rangeCount;r++){let o=n.getRangeAt(r);t=Math.min(t,e.docView.posFromDOM(o.startContainer,o.startOffset,1)),i=Math.max(i,e.docView.posFromDOM(o.endContainer,o.endOffset,-1))}if(t<0)return null;[l,s]=i==e.state.selection.anchor?[i,t]:[t,i],c=r.resolve(s)}else l=e.docView.posFromDOM(n.anchorNode,n.anchorOffset,1);if(l<0)return null}let h=r.resolve(l);if(!a){a=tr(e,h,c,"pointer"==t||e.state.selection.head<c.pos&&!o?1:-1)}return a}function Jn(e){return e.editable?e.hasFocus():rr(e)&&document.activeElement&&document.activeElement.contains(e.dom)}function Kn(e,t=!1){let n=e.state.selection;if(Xn(e,n),Jn(e)){if(!t&&e.input.mouseDown&&e.input.mouseDown.allowDefault&&Ht){let t=e.domSelectionRange(),n=e.domObserver.currentSelection;if(t.anchorNode&&n.anchorNode&&Mt(t.anchorNode,t.anchorOffset,n.anchorNode,n.anchorOffset))return e.input.mouseDown.delayedSelectionSync=!0,void e.domObserver.setCurSelection()}if(e.domObserver.disconnectSelection(),e.cursorWrapper)!function(e){let t=e.domSelection(),n=document.createRange();if(!t)return;let r=e.cursorWrapper.dom,i="IMG"==r.nodeName;i?n.setStart(r.parentNode,St(r)+1):n.setStart(r,0);n.collapse(!0),t.removeAllRanges(),t.addRange(n),!i&&!e.state.selection.visible&&Vt&&jt<=11&&(r.disabled=!0,r.disabled=!1)}(e);else{let r,i,{anchor:o,head:s}=n;!Gn||n instanceof st||(n.$from.parent.inlineContent||(r=Zn(e,n.from)),n.empty||n.$from.parent.inlineContent||(i=Zn(e,n.to))),e.docView.setSelection(o,s,e,t),Gn&&(r&&Qn(r),i&&Qn(i)),n.visible?e.dom.classList.remove("ProseMirror-hideselection"):(e.dom.classList.add("ProseMirror-hideselection"),"onselectionchange"in document&&function(e){let t=e.dom.ownerDocument;t.removeEventListener("selectionchange",e.input.hideSelectionGuard);let n=e.domSelectionRange(),r=n.anchorNode,i=n.anchorOffset;t.addEventListener("selectionchange",e.input.hideSelectionGuard=()=>{n.anchorNode==r&&n.anchorOffset==i||(t.removeEventListener("selectionchange",e.input.hideSelectionGuard),setTimeout((()=>{Jn(e)&&!e.state.selection.visible||e.dom.classList.remove("ProseMirror-hideselection")}),20))})}(e))}e.domObserver.setCurSelection(),e.domObserver.connectSelection()}}const Gn=Kt||Ht&&Jt<63;function Zn(e,t){let{node:n,offset:r}=e.docView.domFromPos(t,0),i=r<n.childNodes.length?n.childNodes[r]:null,o=r?n.childNodes[r-1]:null;if(Kt&&i&&"false"==i.contentEditable)return Yn(i);if(!(i&&"false"!=i.contentEditable||o&&"false"!=o.contentEditable)){if(i)return Yn(i);if(o)return Yn(o)}}function Yn(e){return e.contentEditable="true",Kt&&e.draggable&&(e.draggable=!1,e.wasDraggable=!0),e}function Qn(e){e.contentEditable="false",e.wasDraggable&&(e.draggable=!0,e.wasDraggable=null)}function Xn(e,t){if(t instanceof at){let n=e.docView.descAt(t.from);n!=e.lastSelectedViewDesc&&(er(e),n&&n.selectNode(),e.lastSelectedViewDesc=n)}else er(e)}function er(e){e.lastSelectedViewDesc&&(e.lastSelectedViewDesc.parent&&e.lastSelectedViewDesc.deselectNode(),e.lastSelectedViewDesc=void 0)}function tr(e,t,n,r){return e.someProp("createSelectionBetween",(r=>r(e,t,n)))||st.between(t,n,r)}function nr(e){return!(e.editable&&!e.hasFocus())&&rr(e)}function rr(e){let t=e.domSelectionRange();if(!t.anchorNode)return!1;try{return e.dom.contains(3==t.anchorNode.nodeType?t.anchorNode.parentNode:t.anchorNode)&&(e.editable||e.dom.contains(3==t.focusNode.nodeType?t.focusNode.parentNode:t.focusNode))}catch(e){return!1}}function ir(e,t){let{$anchor:n,$head:r}=e.selection,i=t>0?n.max(r):n.min(r),o=i.parent.inlineContent?i.depth?e.doc.resolve(t>0?i.after():i.before()):null:i;return o&&nt.findFrom(o,t)}function or(e,t){return e.dispatch(e.state.tr.setSelection(t).scrollIntoView()),!0}function sr(e,t,n){let r=e.state.selection;if(!(r instanceof st)){if(r instanceof at&&r.node.isInline)return or(e,new st(t>0?r.$to:r.$from));{let n=ir(e.state,t);return!!n&&or(e,n)}}if(n.indexOf("s")>-1){let{$head:n}=r,i=n.textOffset?null:t<0?n.nodeBefore:n.nodeAfter;if(!i||i.isText||!i.isLeaf)return!1;let o=e.state.doc.resolve(n.pos+i.nodeSize*(t<0?-1:1));return or(e,new st(r.$anchor,o))}if(!r.empty)return!1;if(e.endOfTextblock(t>0?"forward":"backward")){let n=ir(e.state,t);return!!(n&&n instanceof at)&&or(e,n)}if(!(Zt&&n.indexOf("m")>-1)){let n,i=r.$head,o=i.textOffset?null:t<0?i.nodeBefore:i.nodeAfter;if(!o||o.isText)return!1;let s=t<0?i.pos-o.nodeSize:i.pos;return!!(o.isAtom||(n=e.docView.descAt(s))&&!n.contentDOM)&&(at.isSelectable(o)?or(e,new at(t<0?e.state.doc.resolve(i.pos-o.nodeSize):i)):!!Xt&&or(e,new st(e.state.doc.resolve(t<0?s:s+o.nodeSize))))}}function lr(e){return 3==e.nodeType?e.nodeValue.length:e.childNodes.length}function ar(e,t){let n=e.pmViewDesc;return n&&0==n.size&&(t<0||e.nextSibling||"BR"!=e.nodeName)}function cr(e,t){return t<0?function(e){let t=e.domSelectionRange(),n=t.focusNode,r=t.focusOffset;if(!n)return;let i,o,s=!1;Ut&&1==n.nodeType&&r<lr(n)&&ar(n.childNodes[r],-1)&&(s=!0);for(;;)if(r>0){if(1!=n.nodeType)break;{let e=n.childNodes[r-1];if(ar(e,-1))i=n,o=--r;else{if(3!=e.nodeType)break;n=e,r=n.nodeValue.length}}}else{if(hr(n))break;{let t=n.previousSibling;for(;t&&ar(t,-1);)i=n.parentNode,o=St(t),t=t.previousSibling;if(t)n=t,r=lr(n);else{if(n=n.parentNode,n==e.dom)break;r=0}}}s?ur(e,n,r):i&&ur(e,i,o)}(e):function(e){let t=e.domSelectionRange(),n=t.focusNode,r=t.focusOffset;if(!n)return;let i,o,s=lr(n);for(;;)if(r<s){if(1!=n.nodeType)break;if(!ar(n.childNodes[r],1))break;i=n,o=++r}else{if(hr(n))break;{let t=n.nextSibling;for(;t&&ar(t,1);)i=t.parentNode,o=St(t)+1,t=t.nextSibling;if(t)n=t,r=0,s=lr(n);else{if(n=n.parentNode,n==e.dom)break;r=s=0}}}i&&ur(e,i,o)}(e)}function hr(e){let t=e.pmViewDesc;return t&&t.node&&t.node.isBlock}function ur(e,t,n){if(3!=t.nodeType){let e,r;(r=function(e,t){for(;e&&t==e.childNodes.length&&!Ft(e);)t=St(e)+1,e=e.parentNode;for(;e&&t<e.childNodes.length;){let n=e.childNodes[t];if(3==n.nodeType)return n;if(1==n.nodeType&&"false"==n.contentEditable)break;e=n,t=0}}(t,n))?(t=r,n=0):(e=function(e,t){for(;e&&!t&&!Ft(e);)t=St(e),e=e.parentNode;for(;e&&t;){let n=e.childNodes[t-1];if(3==n.nodeType)return n;if(1==n.nodeType&&"false"==n.contentEditable)break;t=(e=n).childNodes.length}}(t,n))&&(t=e,n=e.nodeValue.length)}let r=e.domSelection();if(!r)return;if(It(r)){let e=document.createRange();e.setEnd(t,n),e.setStart(t,n),r.removeAllRanges(),r.addRange(e)}else r.extend&&r.extend(t,n);e.domObserver.setCurSelection();let{state:i}=e;setTimeout((()=>{e.state==i&&Kn(e)}),50)}function dr(e,t){let n=e.state.doc.resolve(t);if(!Ht&&!Yt&&n.parent.inlineContent){let r=e.coordsAtPos(t);if(t>n.start()){let n=e.coordsAtPos(t-1),i=(n.top+n.bottom)/2;if(i>r.top&&i<r.bottom&&Math.abs(n.left-r.left)>1)return n.left<r.left?"ltr":"rtl"}if(t<n.end()){let n=e.coordsAtPos(t+1),i=(n.top+n.bottom)/2;if(i>r.top&&i<r.bottom&&Math.abs(n.left-r.left)>1)return n.left>r.left?"ltr":"rtl"}}return"rtl"==getComputedStyle(e.dom).direction?"rtl":"ltr"}function pr(e,t,n){let r=e.state.selection;if(r instanceof st&&!r.empty||n.indexOf("s")>-1)return!1;if(Zt&&n.indexOf("m")>-1)return!1;let{$from:i,$to:o}=r;if(!i.parent.inlineContent||e.endOfTextblock(t<0?"up":"down")){let n=ir(e.state,t);if(n&&n instanceof at)return or(e,n)}if(!i.parent.inlineContent){let n=t<0?i:o,s=r instanceof ht?nt.near(n,t):nt.findFrom(n,t);return!!s&&or(e,s)}return!1}function fr(e,t){if(!(e.state.selection instanceof st))return!0;let{$head:n,$anchor:r,empty:i}=e.state.selection;if(!n.sameParent(r))return!0;if(!i)return!1;if(e.endOfTextblock(t>0?"forward":"backward"))return!0;let o=!n.textOffset&&(t<0?n.nodeBefore:n.nodeAfter);if(o&&!o.isText){let r=e.state.tr;return t<0?r.delete(n.pos-o.nodeSize,n.pos):r.delete(n.pos,n.pos+o.nodeSize),e.dispatch(r),!0}return!1}function mr(e,t,n){e.domObserver.stop(),t.contentEditable=n,e.domObserver.start()}function gr(e,t){let n=t.keyCode,r=function(e){let t="";return e.ctrlKey&&(t+="c"),e.metaKey&&(t+="m"),e.altKey&&(t+="a"),e.shiftKey&&(t+="s"),t}(t);if(8==n||Zt&&72==n&&"c"==r)return fr(e,-1)||cr(e,-1);if(46==n&&!t.shiftKey||Zt&&68==n&&"c"==r)return fr(e,1)||cr(e,1);if(13==n||27==n)return!0;if(37==n||Zt&&66==n&&"c"==r){let t=37==n?"ltr"==dr(e,e.state.selection.from)?-1:1:-1;return sr(e,t,r)||cr(e,t)}if(39==n||Zt&&70==n&&"c"==r){let t=39==n?"ltr"==dr(e,e.state.selection.from)?1:-1:1;return sr(e,t,r)||cr(e,t)}return 38==n||Zt&&80==n&&"c"==r?pr(e,-1,r)||cr(e,-1):40==n||Zt&&78==n&&"c"==r?function(e){if(!Kt||e.state.selection.$head.parentOffset>0)return!1;let{focusNode:t,focusOffset:n}=e.domSelectionRange();if(t&&1==t.nodeType&&0==n&&t.firstChild&&"false"==t.firstChild.contentEditable){let n=t.firstChild;mr(e,n,"true"),setTimeout((()=>mr(e,n,"false")),20)}return!1}(e)||pr(e,1,r)||cr(e,1):r==(Zt?"m":"c")&&(66==n||73==n||89==n||90==n)}function yr(e,t){e.someProp("transformCopied",(n=>{t=n(t,e)}));let n=[],{content:r,openStart:i,openEnd:o}=t;for(;i>1&&o>1&&1==r.childCount&&1==r.firstChild.childCount;){i--,o--;let e=r.firstChild;n.push(e.type.name,e.attrs!=e.type.defaultAttrs?e.attrs:null),r=e.content}let s=e.someProp("clipboardSerializer")||he.fromSchema(e.state.schema),l=Er(),a=l.createElement("div");a.appendChild(s.serializeFragment(r,{document:l}));let c,h=a.firstChild,u=0;for(;h&&1==h.nodeType&&(c=Sr[h.nodeName.toLowerCase()]);){for(let e=c.length-1;e>=0;e--){let t=l.createElement(c[e]);for(;a.firstChild;)t.appendChild(a.firstChild);a.appendChild(t),u++}h=a.firstChild}return h&&1==h.nodeType&&h.setAttribute("data-pm-slice",`${i} ${o}${u?` -${u}`:""} ${JSON.stringify(n)}`),{dom:a,text:e.someProp("clipboardTextSerializer",(n=>n(t,e)))||t.content.textBetween(0,t.content.size,"\n\n"),slice:t}}function kr(e,t,n,r,i){let o,s,l=i.parent.type.spec.code;if(!n&&!t)return null;let a=t&&(r||l||!n);if(a){if(e.someProp("transformPastedText",(n=>{t=n(t,l||r,e)})),l)return t?new m(c.from(e.state.schema.text(t.replace(/\r\n?/g,"\n"))),0,0):m.empty;let n=e.someProp("clipboardTextParser",(n=>n(t,i,r,e)));if(n)s=n;else{let n=i.marks(),{schema:r}=e.state,s=he.fromSchema(r);o=document.createElement("div"),t.split(/(?:\r\n?|\n)+/).forEach((e=>{let t=o.appendChild(document.createElement("p"));e&&t.appendChild(s.serializeNode(r.text(e,n)))}))}}else e.someProp("transformPastedHTML",(t=>{n=t(n,e)})),o=function(e){let t=/^(\s*<meta [^>]*>)*/.exec(e);t&&(e=e.slice(t[0].length));let n,r=Er().createElement("div"),i=/<([a-z][^>\s]+)/i.exec(e);(n=i&&Sr[i[1].toLowerCase()])&&(e=n.map((e=>"<"+e+">")).join("")+e+n.map((e=>"</"+e+">")).reverse().join(""));if(r.innerHTML=function(e){let t=window.trustedTypes;if(!t)return e;Ar||(Ar=t.defaultPolicy||t.createPolicy("ProseMirrorClipboard",{createHTML:e=>e}));return Ar.createHTML(e)}(e),n)for(let e=0;e<n.length;e++)r=r.querySelector(n[e])||r;return r}(n),Xt&&function(e){let t=e.querySelectorAll(Ht?"span:not([class]):not([style])":"span.Apple-converted-space");for(let n=0;n<t.length;n++){let r=t[n];1==r.childNodes.length&&" "==r.textContent&&r.parentNode&&r.parentNode.replaceChild(e.ownerDocument.createTextNode(" "),r)}}(o);let h=o&&o.querySelector("[data-pm-slice]"),u=h&&/^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(h.getAttribute("data-pm-slice")||"");if(u&&u[3])for(let e=+u[3];e>0;e--){let e=o.firstChild;for(;e&&1!=e.nodeType;)e=e.nextSibling;if(!e)break;o=e}if(!s){let t=e.someProp("clipboardParser")||e.someProp("domParser")||ee.fromSchema(e.state.schema);s=t.parseSlice(o,{preserveWhitespace:!(!a&&!u),context:i,ruleFromNode:e=>"BR"!=e.nodeName||e.nextSibling||!e.parentNode||br.test(e.parentNode.nodeName)?null:{ignore:!0}})}if(u)s=function(e,t){if(!e.size)return e;let n,r=e.content.firstChild.type.schema;try{n=JSON.parse(t)}catch(t){return e}let{content:i,openStart:o,openEnd:s}=e;for(let e=n.length-2;e>=0;e-=2){let t=r.nodes[n[e]];if(!t||t.hasRequiredAttrs())break;i=c.from(t.create(n[e+1],i)),o++,s++}return new m(i,o,s)}(Dr(s,+u[1],+u[2]),u[4]);else if(s=m.maxOpen(function(e,t){if(e.childCount<2)return e;for(let n=t.depth;n>=0;n--){let r,i=t.node(n).contentMatchAt(t.index(n)),o=[];if(e.forEach((e=>{if(!o)return;let t,n=i.findWrapping(e.type);if(!n)return o=null;if(t=o.length&&r.length&&wr(n,r,e,o[o.length-1],0))o[o.length-1]=t;else{o.length&&(o[o.length-1]=xr(o[o.length-1],r.length));let t=vr(e,n);o.push(t),i=i.matchType(t.type),r=n}})),o)return c.from(o)}return e}(s.content,i),!0),s.openStart||s.openEnd){let e=0,t=0;for(let t=s.content.firstChild;e<s.openStart&&!t.type.spec.isolating;e++,t=t.firstChild);for(let e=s.content.lastChild;t<s.openEnd&&!e.type.spec.isolating;t++,e=e.lastChild);s=Dr(s,e,t)}return e.someProp("transformPasted",(t=>{s=t(s,e)})),s}const br=/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;function vr(e,t,n=0){for(let r=t.length-1;r>=n;r--)e=t[r].create(null,c.from(e));return e}function wr(e,t,n,r,i){if(i<e.length&&i<t.length&&e[i]==t[i]){let o=wr(e,t,n,r.lastChild,i+1);if(o)return r.copy(r.content.replaceChild(r.childCount-1,o));if(r.contentMatchAt(r.childCount).matchType(i==e.length-1?n.type:e[i+1]))return r.copy(r.content.append(c.from(vr(n,e,i+1))))}}function xr(e,t){if(0==t)return e;let n=e.content.replaceChild(e.childCount-1,xr(e.lastChild,t-1)),r=e.contentMatchAt(e.childCount).fillBefore(c.empty,!0);return e.copy(n.append(r))}function Cr(e,t,n,r,i,o){let s=t<0?e.firstChild:e.lastChild,l=s.content;return e.childCount>1&&(o=0),i<r-1&&(l=Cr(l,t,n,r,i+1,o)),i>=n&&(l=t<0?s.contentMatchAt(0).fillBefore(l,o<=i).append(l):l.append(s.contentMatchAt(s.childCount).fillBefore(c.empty,!0))),e.replaceChild(t<0?0:e.childCount-1,s.copy(l))}function Dr(e,t,n){return t<e.openStart&&(e=new m(Cr(e.content,-1,t,e.openStart,0,e.openEnd),t,e.openEnd)),n<e.openEnd&&(e=new m(Cr(e.content,1,n,e.openEnd,0,0),e.openStart,n)),e}const Sr={thead:["table"],tbody:["table"],tfoot:["table"],caption:["table"],colgroup:["table"],col:["table","colgroup"],tr:["table","tbody"],td:["table","tbody","tr"],th:["table","tbody","tr"]};let _r=null;function Er(){return _r||(_r=document.implementation.createHTMLDocument("title"))}let Ar=null;const Mr={},Or={},Tr={touchstart:!0,touchmove:!0};class Nr{constructor(){this.shiftKey=!1,this.mouseDown=null,this.lastKeyCode=null,this.lastKeyCodeTime=0,this.lastClick={time:0,x:0,y:0,type:"",button:0},this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastIOSEnter=0,this.lastIOSEnterFallbackTimeout=-1,this.lastFocus=0,this.lastTouch=0,this.lastChromeDelete=0,this.composing=!1,this.compositionNode=null,this.composingTimeout=-1,this.compositionNodes=[],this.compositionEndedAt=-2e8,this.compositionID=1,this.compositionPendingChanges=0,this.domChangeCount=0,this.eventHandlers=Object.create(null),this.hideSelectionGuard=null}}function Fr(e,t){e.input.lastSelectionOrigin=t,e.input.lastSelectionTime=Date.now()}function Ir(e){e.someProp("handleDOMEvents",(t=>{for(let n in t)e.input.eventHandlers[n]||e.dom.addEventListener(n,e.input.eventHandlers[n]=t=>Rr(e,t))}))}function Rr(e,t){return e.someProp("handleDOMEvents",(n=>{let r=n[t.type];return!!r&&(r(e,t)||t.defaultPrevented)}))}function Br(e,t){if(!t.bubbles)return!0;if(t.defaultPrevented)return!1;for(let n=t.target;n!=e.dom;n=n.parentNode)if(!n||11==n.nodeType||n.pmViewDesc&&n.pmViewDesc.stopEvent(t))return!1;return!0}function zr(e){return{left:e.clientX,top:e.clientY}}function Lr(e,t,n,r,i){if(-1==r)return!1;let o=e.state.doc.resolve(r);for(let r=o.depth+1;r>0;r--)if(e.someProp(t,(t=>r>o.depth?t(e,n,o.nodeAfter,o.before(r),i,!0):t(e,n,o.node(r),o.before(r),i,!1))))return!0;return!1}function Pr(e,t,n){if(e.focused||e.focus(),e.state.selection.eq(t))return;let r=e.state.tr.setSelection(t);"pointer"==n&&r.setMeta("pointer",!0),e.dispatch(r)}function qr(e,t,n,r,i){return Lr(e,"handleClickOn",t,n,r)||e.someProp("handleClick",(n=>n(e,t,r)))||(i?function(e,t){if(-1==t)return!1;let n,r,i=e.state.selection;i instanceof at&&(n=i.node);let o=e.state.doc.resolve(t);for(let e=o.depth+1;e>0;e--){let t=e>o.depth?o.nodeAfter:o.node(e);if(at.isSelectable(t)){r=n&&i.$from.depth>0&&e>=i.$from.depth&&o.before(i.$from.depth+1)==i.$from.pos?o.before(i.$from.depth):o.before(e);break}}return null!=r&&(Pr(e,at.create(e.state.doc,r),"pointer"),!0)}(e,n):function(e,t){if(-1==t)return!1;let n=e.state.doc.resolve(t),r=n.nodeAfter;return!!(r&&r.isAtom&&at.isSelectable(r))&&(Pr(e,new at(n),"pointer"),!0)}(e,n))}function $r(e,t,n,r){return Lr(e,"handleDoubleClickOn",t,n,r)||e.someProp("handleDoubleClick",(n=>n(e,t,r)))}function Vr(e,t,n,r){return Lr(e,"handleTripleClickOn",t,n,r)||e.someProp("handleTripleClick",(n=>n(e,t,r)))||function(e,t,n){if(0!=n.button)return!1;let r=e.state.doc;if(-1==t)return!!r.inlineContent&&(Pr(e,st.create(r,0,r.content.size),"pointer"),!0);let i=r.resolve(t);for(let t=i.depth+1;t>0;t--){let n=t>i.depth?i.nodeAfter:i.node(t),o=i.before(t);if(n.inlineContent)Pr(e,st.create(r,o+1,o+1+n.content.size),"pointer");else{if(!at.isSelectable(n))continue;Pr(e,at.create(r,o),"pointer")}return!0}}(e,n,r)}function jr(e){return Yr(e)}Or.keydown=(e,t)=>{let n=t;if(e.input.shiftKey=16==n.keyCode||n.shiftKey,!Hr(e,n)&&(e.input.lastKeyCode=n.keyCode,e.input.lastKeyCodeTime=Date.now(),!Qt||!Ht||13!=n.keyCode))if(229!=n.keyCode&&e.domObserver.forceFlush(),!Gt||13!=n.keyCode||n.ctrlKey||n.altKey||n.metaKey)e.someProp("handleKeyDown",(t=>t(e,n)))||gr(e,n)?n.preventDefault():Fr(e,"key");else{let t=Date.now();e.input.lastIOSEnter=t,e.input.lastIOSEnterFallbackTimeout=setTimeout((()=>{e.input.lastIOSEnter==t&&(e.someProp("handleKeyDown",(t=>t(e,Rt(13,"Enter")))),e.input.lastIOSEnter=0)}),200)}},Or.keyup=(e,t)=>{16==t.keyCode&&(e.input.shiftKey=!1)},Or.keypress=(e,t)=>{let n=t;if(Hr(e,n)||!n.charCode||n.ctrlKey&&!n.altKey||Zt&&n.metaKey)return;if(e.someProp("handleKeyPress",(t=>t(e,n))))return void n.preventDefault();let r=e.state.selection;if(!(r instanceof st&&r.$from.sameParent(r.$to))){let t=String.fromCharCode(n.charCode);/[\r\n]/.test(t)||e.someProp("handleTextInput",(n=>n(e,r.$from.pos,r.$to.pos,t)))||e.dispatch(e.state.tr.insertText(t).scrollIntoView()),n.preventDefault()}};const Ur=Zt?"metaKey":"ctrlKey";Mr.mousedown=(e,t)=>{let n=t;e.input.shiftKey=n.shiftKey;let r=jr(e),i=Date.now(),o="singleClick";i-e.input.lastClick.time<500&&function(e,t){let n=t.x-e.clientX,r=t.y-e.clientY;return n*n+r*r<100}(n,e.input.lastClick)&&!n[Ur]&&e.input.lastClick.button==n.button&&("singleClick"==e.input.lastClick.type?o="doubleClick":"doubleClick"==e.input.lastClick.type&&(o="tripleClick")),e.input.lastClick={time:i,x:n.clientX,y:n.clientY,type:o,button:n.button};let s=e.posAtCoords(zr(n));s&&("singleClick"==o?(e.input.mouseDown&&e.input.mouseDown.done(),e.input.mouseDown=new Wr(e,s,n,!!r)):("doubleClick"==o?$r:Vr)(e,s.pos,s.inside,n)?n.preventDefault():Fr(e,"pointer"))};class Wr{constructor(e,t,n,r){let i,o;if(this.view=e,this.pos=t,this.event=n,this.flushed=r,this.delayedSelectionSync=!1,this.mightDrag=null,this.startDoc=e.state.doc,this.selectNode=!!n[Ur],this.allowDefault=n.shiftKey,t.inside>-1)i=e.state.doc.nodeAt(t.inside),o=t.inside;else{let n=e.state.doc.resolve(t.pos);i=n.parent,o=n.depth?n.before():0}const s=r?null:n.target,l=s?e.docView.nearestDesc(s,!0):null;this.target=l&&1==l.dom.nodeType?l.dom:null;let{selection:a}=e.state;(0==n.button&&i.type.spec.draggable&&!1!==i.type.spec.selectable||a instanceof at&&a.from<=o&&a.to>o)&&(this.mightDrag={node:i,pos:o,addAttr:!(!this.target||this.target.draggable),setUneditable:!(!this.target||!Ut||this.target.hasAttribute("contentEditable"))}),this.target&&this.mightDrag&&(this.mightDrag.addAttr||this.mightDrag.setUneditable)&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!0),this.mightDrag.setUneditable&&setTimeout((()=>{this.view.input.mouseDown==this&&this.target.setAttribute("contentEditable","false")}),20),this.view.domObserver.start()),e.root.addEventListener("mouseup",this.up=this.up.bind(this)),e.root.addEventListener("mousemove",this.move=this.move.bind(this)),Fr(e,"pointer")}done(){this.view.root.removeEventListener("mouseup",this.up),this.view.root.removeEventListener("mousemove",this.move),this.mightDrag&&this.target&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&this.target.removeAttribute("draggable"),this.mightDrag.setUneditable&&this.target.removeAttribute("contentEditable"),this.view.domObserver.start()),this.delayedSelectionSync&&setTimeout((()=>Kn(this.view))),this.view.input.mouseDown=null}up(e){if(this.done(),!this.view.dom.contains(e.target))return;let t=this.pos;this.view.state.doc!=this.startDoc&&(t=this.view.posAtCoords(zr(e))),this.updateAllowDefault(e),this.allowDefault||!t?Fr(this.view,"pointer"):qr(this.view,t.pos,t.inside,e,this.selectNode)?e.preventDefault():0==e.button&&(this.flushed||Kt&&this.mightDrag&&!this.mightDrag.node.isAtom||Ht&&!this.view.state.selection.visible&&Math.min(Math.abs(t.pos-this.view.state.selection.from),Math.abs(t.pos-this.view.state.selection.to))<=2)?(Pr(this.view,nt.near(this.view.state.doc.resolve(t.pos)),"pointer"),e.preventDefault()):Fr(this.view,"pointer")}move(e){this.updateAllowDefault(e),Fr(this.view,"pointer"),0==e.buttons&&this.done()}updateAllowDefault(e){!this.allowDefault&&(Math.abs(this.event.x-e.clientX)>4||Math.abs(this.event.y-e.clientY)>4)&&(this.allowDefault=!0)}}function Hr(e,t){return!!e.composing||!!(Kt&&Math.abs(t.timeStamp-e.input.compositionEndedAt)<500)&&(e.input.compositionEndedAt=-2e8,!0)}Mr.touchstart=e=>{e.input.lastTouch=Date.now(),jr(e),Fr(e,"pointer")},Mr.touchmove=e=>{e.input.lastTouch=Date.now(),Fr(e,"pointer")},Mr.contextmenu=e=>jr(e);const Jr=Qt?5e3:-1;function Kr(e,t){clearTimeout(e.input.composingTimeout),t>-1&&(e.input.composingTimeout=setTimeout((()=>Yr(e)),t))}function Gr(e){for(e.composing&&(e.input.composing=!1,e.input.compositionEndedAt=function(){let e=document.createEvent("Event");return e.initEvent("event",!0,!0),e.timeStamp}());e.input.compositionNodes.length>0;)e.input.compositionNodes.pop().markParentsDirty()}function Zr(e){let t=e.domSelectionRange();if(!t.focusNode)return null;let n=function(e,t){for(;;){if(3==e.nodeType&&t)return e;if(1==e.nodeType&&t>0){if("false"==e.contentEditable)return null;t=Nt(e=e.childNodes[t-1])}else{if(!e.parentNode||Ft(e))return null;t=St(e),e=e.parentNode}}}(t.focusNode,t.focusOffset),r=function(e,t){for(;;){if(3==e.nodeType&&t<e.nodeValue.length)return e;if(1==e.nodeType&&t<e.childNodes.length){if("false"==e.contentEditable)return null;e=e.childNodes[t],t=0}else{if(!e.parentNode||Ft(e))return null;t=St(e)+1,e=e.parentNode}}}(t.focusNode,t.focusOffset);if(n&&r&&n!=r){let t=r.pmViewDesc,i=e.domObserver.lastChangedTextNode;if(n==i||r==i)return i;if(!t||!t.isText(r.nodeValue))return r;if(e.input.compositionNode==r){let e=n.pmViewDesc;if(e&&e.isText(n.nodeValue))return r}}return n||r}function Yr(e,t=!1){if(!(Qt&&e.domObserver.flushingSoon>=0)){if(e.domObserver.forceFlush(),Gr(e),t||e.docView&&e.docView.dirty){let n=Hn(e),r=e.state.selection;return n&&!n.eq(r)?e.dispatch(e.state.tr.setSelection(n)):!e.markCursor&&!t||r.$from.node(r.$from.sharedDepth(r.to)).inlineContent?e.updateState(e.state):e.dispatch(e.state.tr.deleteSelection()),!0}return!1}}Or.compositionstart=Or.compositionupdate=e=>{if(!e.composing){e.domObserver.flush();let{state:t}=e,n=t.selection.$to;if(t.selection instanceof st&&(t.storedMarks||!n.textOffset&&n.parentOffset&&n.nodeBefore.marks.some((e=>!1===e.type.spec.inclusive))))e.markCursor=e.state.storedMarks||n.marks(),Yr(e,!0),e.markCursor=null;else if(Yr(e,!t.selection.empty),Ut&&t.selection.empty&&n.parentOffset&&!n.textOffset&&n.nodeBefore.marks.length){let t=e.domSelectionRange();for(let n=t.focusNode,r=t.focusOffset;n&&1==n.nodeType&&0!=r;){let t=r<0?n.lastChild:n.childNodes[r-1];if(!t)break;if(3==t.nodeType){let n=e.domSelection();n&&n.collapse(t,t.nodeValue.length);break}n=t,r=-1}}e.input.composing=!0}Kr(e,Jr)},Or.compositionend=(e,t)=>{e.composing&&(e.input.composing=!1,e.input.compositionEndedAt=t.timeStamp,e.input.compositionPendingChanges=e.domObserver.pendingRecords().length?e.input.compositionID:0,e.input.compositionNode=null,e.input.compositionPendingChanges&&Promise.resolve().then((()=>e.domObserver.flush())),e.input.compositionID++,Kr(e,20))};const Qr=Vt&&jt<15||Gt&&en<604;function Xr(e,t,n,r,i){let o=kr(e,t,n,r,e.state.selection.$from);if(e.someProp("handlePaste",(t=>t(e,i,o||m.empty))))return!0;if(!o)return!1;let s=function(e){return 0==e.openStart&&0==e.openEnd&&1==e.content.childCount?e.content.firstChild:null}(o),l=s?e.state.tr.replaceSelectionWith(s,r):e.state.tr.replaceSelection(o);return e.dispatch(l.scrollIntoView().setMeta("paste",!0).setMeta("uiEvent","paste")),!0}function ei(e){let t=e.getData("text/plain")||e.getData("Text");if(t)return t;let n=e.getData("text/uri-list");return n?n.replace(/\r?\n/g," "):""}Mr.copy=Or.cut=(e,t)=>{let n=t,r=e.state.selection,i="cut"==n.type;if(r.empty)return;let o=Qr?null:n.clipboardData,s=r.content(),{dom:l,text:a}=yr(e,s);o?(n.preventDefault(),o.clearData(),o.setData("text/html",l.innerHTML),o.setData("text/plain",a)):function(e,t){if(!e.dom.parentNode)return;let n=e.dom.parentNode.appendChild(document.createElement("div"));n.appendChild(t),n.style.cssText="position: fixed; left: -10000px; top: 10px";let r=getSelection(),i=document.createRange();i.selectNodeContents(t),e.dom.blur(),r.removeAllRanges(),r.addRange(i),setTimeout((()=>{n.parentNode&&n.parentNode.removeChild(n),e.focus()}),50)}(e,l),i&&e.dispatch(e.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent","cut"))},Or.paste=(e,t)=>{let n=t;if(e.composing&&!Qt)return;let r=Qr?null:n.clipboardData,i=e.input.shiftKey&&45!=e.input.lastKeyCode;r&&Xr(e,ei(r),r.getData("text/html"),i,n)?n.preventDefault():function(e,t){if(!e.dom.parentNode)return;let n=e.input.shiftKey||e.state.selection.$from.parent.type.spec.code,r=e.dom.parentNode.appendChild(document.createElement(n?"textarea":"div"));n||(r.contentEditable="true"),r.style.cssText="position: fixed; left: -10000px; top: 10px",r.focus();let i=e.input.shiftKey&&45!=e.input.lastKeyCode;setTimeout((()=>{e.focus(),r.parentNode&&r.parentNode.removeChild(r),n?Xr(e,r.value,null,i,t):Xr(e,r.textContent,r.innerHTML,i,t)}),50)}(e,n)};class ti{constructor(e,t,n){this.slice=e,this.move=t,this.node=n}}const ni=Zt?"altKey":"ctrlKey";function ri(e,t){let n=e.someProp("dragCopies",(e=>!e(t)));return null!=n?n:!t[ni]}Mr.dragstart=(e,t)=>{let n=t,r=e.input.mouseDown;if(r&&r.done(),!n.dataTransfer)return;let i,o=e.state.selection,s=o.empty?null:e.posAtCoords(zr(n));if(s&&s.pos>=o.from&&s.pos<=(o instanceof at?o.to-1:o.to));else if(r&&r.mightDrag)i=at.create(e.state.doc,r.mightDrag.pos);else if(n.target&&1==n.target.nodeType){let t=e.docView.nearestDesc(n.target,!0);t&&t.node.type.spec.draggable&&t!=e.docView&&(i=at.create(e.state.doc,t.posBefore))}let l=(i||e.state.selection).content(),{dom:a,text:c,slice:h}=yr(e,l);(!n.dataTransfer.files.length||!Ht||Jt>120)&&n.dataTransfer.clearData(),n.dataTransfer.setData(Qr?"Text":"text/html",a.innerHTML),n.dataTransfer.effectAllowed="copyMove",Qr||n.dataTransfer.setData("text/plain",c),e.dragging=new ti(h,ri(e,n),i)},Mr.dragend=e=>{let t=e.dragging;window.setTimeout((()=>{e.dragging==t&&(e.dragging=null)}),50)},Or.dragover=Or.dragenter=(e,t)=>t.preventDefault(),Or.drop=(e,t)=>{let n=t,r=e.dragging;if(e.dragging=null,!n.dataTransfer)return;let i=e.posAtCoords(zr(n));if(!i)return;let o=e.state.doc.resolve(i.pos),s=r&&r.slice;s?e.someProp("transformPasted",(t=>{s=t(s,e)})):s=kr(e,ei(n.dataTransfer),Qr?null:n.dataTransfer.getData("text/html"),!1,o);let l=!(!r||!ri(e,n));if(e.someProp("handleDrop",(t=>t(e,n,s||m.empty,l))))return void n.preventDefault();if(!s)return;n.preventDefault();let a=s?function(e,t,n){let r=e.resolve(t);if(!n.content.size)return t;let i=n.content;for(let e=0;e<n.openStart;e++)i=i.firstChild.content;for(let e=1;e<=(0==n.openStart&&n.size?2:1);e++)for(let t=r.depth;t>=0;t--){let n=t==r.depth?0:r.pos<=(r.start(t+1)+r.end(t+1))/2?-1:1,o=r.index(t)+(n>0?1:0),s=r.node(t),l=!1;if(1==e)l=s.canReplace(o,o,i);else{let e=s.contentMatchAt(o).findWrapping(i.firstChild.type);l=e&&s.canReplaceWith(o,o,e[0])}if(l)return 0==n?r.pos:n<0?r.before(t+1):r.after(t+1)}return null}(e.state.doc,o.pos,s):o.pos;null==a&&(a=o.pos);let c=e.state.tr;if(l){let{node:e}=r;e?e.replace(c):c.deleteSelection()}let h=c.mapping.map(a),u=0==s.openStart&&0==s.openEnd&&1==s.content.childCount,d=c.doc;if(u?c.replaceRangeWith(h,h,s.content.firstChild):c.replaceRange(h,h,s),c.doc.eq(d))return;let p=c.doc.resolve(h);if(u&&at.isSelectable(s.content.firstChild)&&p.nodeAfter&&p.nodeAfter.sameMarkup(s.content.firstChild))c.setSelection(new at(p));else{let t=c.mapping.map(a);c.mapping.maps[c.mapping.maps.length-1].forEach(((e,n,r,i)=>t=i)),c.setSelection(tr(e,p,c.doc.resolve(t)))}e.focus(),e.dispatch(c.setMeta("uiEvent","drop"))},Mr.focus=e=>{e.input.lastFocus=Date.now(),e.focused||(e.domObserver.stop(),e.dom.classList.add("ProseMirror-focused"),e.domObserver.start(),e.focused=!0,setTimeout((()=>{e.docView&&e.hasFocus()&&!e.domObserver.currentSelection.eq(e.domSelectionRange())&&Kn(e)}),20))},Mr.blur=(e,t)=>{let n=t;e.focused&&(e.domObserver.stop(),e.dom.classList.remove("ProseMirror-focused"),e.domObserver.start(),n.relatedTarget&&e.dom.contains(n.relatedTarget)&&e.domObserver.currentSelection.clear(),e.focused=!1)},Mr.beforeinput=(e,t)=>{if(Ht&&Qt&&"deleteContentBackward"==t.inputType){e.domObserver.flushSoon();let{domChangeCount:t}=e.input;setTimeout((()=>{if(e.input.domChangeCount!=t)return;if(e.dom.blur(),e.focus(),e.someProp("handleKeyDown",(t=>t(e,Rt(8,"Backspace")))))return;let{$cursor:n}=e.state.selection;n&&n.pos>0&&e.dispatch(e.state.tr.delete(n.pos-1,n.pos).scrollIntoView())}),50)}};for(let e in Or)Mr[e]=Or[e];function ii(e,t){if(e==t)return!0;for(let n in e)if(e[n]!==t[n])return!1;for(let n in t)if(!(n in e))return!1;return!0}class oi{constructor(e,t){this.toDOM=e,this.spec=t||hi,this.side=this.spec.side||0}map(e,t,n,r){let{pos:i,deleted:o}=e.mapResult(t.from+r,this.side<0?-1:1);return o?null:new ai(i-n,i-n,this)}valid(){return!0}eq(e){return this==e||e instanceof oi&&(this.spec.key&&this.spec.key==e.spec.key||this.toDOM==e.toDOM&&ii(this.spec,e.spec))}destroy(e){this.spec.destroy&&this.spec.destroy(e)}}class si{constructor(e,t){this.attrs=e,this.spec=t||hi}map(e,t,n,r){let i=e.map(t.from+r,this.spec.inclusiveStart?-1:1)-n,o=e.map(t.to+r,this.spec.inclusiveEnd?1:-1)-n;return i>=o?null:new ai(i,o,this)}valid(e,t){return t.from<t.to}eq(e){return this==e||e instanceof si&&ii(this.attrs,e.attrs)&&ii(this.spec,e.spec)}static is(e){return e.type instanceof si}destroy(){}}class li{constructor(e,t){this.attrs=e,this.spec=t||hi}map(e,t,n,r){let i=e.mapResult(t.from+r,1);if(i.deleted)return null;let o=e.mapResult(t.to+r,-1);return o.deleted||o.pos<=i.pos?null:new ai(i.pos-n,o.pos-n,this)}valid(e,t){let n,{index:r,offset:i}=e.content.findIndex(t.from);return i==t.from&&!(n=e.child(r)).isText&&i+n.nodeSize==t.to}eq(e){return this==e||e instanceof li&&ii(this.attrs,e.attrs)&&ii(this.spec,e.spec)}destroy(){}}class ai{constructor(e,t,n){this.from=e,this.to=t,this.type=n}copy(e,t){return new ai(e,t,this.type)}eq(e,t=0){return this.type.eq(e.type)&&this.from+t==e.from&&this.to+t==e.to}map(e,t,n){return this.type.map(e,this,t,n)}static widget(e,t,n){return new ai(e,e,new oi(t,n))}static inline(e,t,n,r){return new ai(e,t,new si(n,r))}static node(e,t,n,r){return new ai(e,t,new li(n,r))}get spec(){return this.type.spec}get inline(){return this.type instanceof si}get widget(){return this.type instanceof oi}}const ci=[],hi={};class ui{constructor(e,t){this.local=e.length?e:ci,this.children=t.length?t:ci}static create(e,t){return t.length?yi(t,e,0,hi):di}find(e,t,n){let r=[];return this.findInner(null==e?0:e,null==t?1e9:t,r,0,n),r}findInner(e,t,n,r,i){for(let o=0;o<this.local.length;o++){let s=this.local[o];s.from<=t&&s.to>=e&&(!i||i(s.spec))&&n.push(s.copy(s.from+r,s.to+r))}for(let o=0;o<this.children.length;o+=3)if(this.children[o]<t&&this.children[o+1]>e){let s=this.children[o]+1;this.children[o+2].findInner(e-s,t-s,n,r+s,i)}}map(e,t,n){return this==di||0==e.maps.length?this:this.mapInner(e,t,0,0,n||hi)}mapInner(e,t,n,r,i){let o;for(let s=0;s<this.local.length;s++){let l=this.local[s].map(e,n,r);l&&l.type.valid(t,l)?(o||(o=[])).push(l):i.onRemove&&i.onRemove(this.local[s].spec)}return this.children.length?function(e,t,n,r,i,o,s){let l=e.slice();for(let e=0,t=o;e<n.maps.length;e++){let r=0;n.maps[e].forEach(((e,n,i,o)=>{let s=o-i-(n-e);for(let i=0;i<l.length;i+=3){let o=l[i+1];if(o<0||e>o+t-r)continue;let a=l[i]+t-r;n>=a?l[i+1]=e<=a?-2:-1:e>=t&&s&&(l[i]+=s,l[i+1]+=s)}r+=s})),t=n.maps[e].map(t,-1)}let a=!1;for(let t=0;t<l.length;t+=3)if(l[t+1]<0){if(-2==l[t+1]){a=!0,l[t+1]=-1;continue}let c=n.map(e[t]+o),h=c-i;if(h<0||h>=r.content.size){a=!0;continue}let u=n.map(e[t+1]+o,-1)-i,{index:d,offset:p}=r.content.findIndex(h),f=r.maybeChild(d);if(f&&p==h&&p+f.nodeSize==u){let r=l[t+2].mapInner(n,f,c+1,e[t]+o+1,s);r!=di?(l[t]=h,l[t+1]=u,l[t+2]=r):(l[t+1]=-2,a=!0)}else a=!0}if(a){let a=function(e,t,n,r,i,o,s){function l(e,t){for(let o=0;o<e.local.length;o++){let l=e.local[o].map(r,i,t);l?n.push(l):s.onRemove&&s.onRemove(e.local[o].spec)}for(let n=0;n<e.children.length;n+=3)l(e.children[n+2],e.children[n]+t+1)}for(let n=0;n<e.length;n+=3)-1==e[n+1]&&l(e[n+2],t[n]+o+1);return n}(l,e,t,n,i,o,s),c=yi(a,r,0,s);t=c.local;for(let e=0;e<l.length;e+=3)l[e+1]<0&&(l.splice(e,3),e-=3);for(let e=0,t=0;e<c.children.length;e+=3){let n=c.children[e];for(;t<l.length&&l[t]<n;)t+=3;l.splice(t,0,c.children[e],c.children[e+1],c.children[e+2])}}return new ui(t.sort(ki),l)}(this.children,o||[],e,t,n,r,i):o?new ui(o.sort(ki),ci):di}add(e,t){return t.length?this==di?ui.create(e,t):this.addInner(e,t,0):this}addInner(e,t,n){let r,i=0;e.forEach(((e,o)=>{let s,l=o+n;if(s=mi(t,e,l)){for(r||(r=this.children.slice());i<r.length&&r[i]<o;)i+=3;r[i]==o?r[i+2]=r[i+2].addInner(e,s,l+1):r.splice(i,0,o,o+e.nodeSize,yi(s,e,l+1,hi)),i+=3}}));let o=fi(i?gi(t):t,-n);for(let t=0;t<o.length;t++)o[t].type.valid(e,o[t])||o.splice(t--,1);return new ui(o.length?this.local.concat(o).sort(ki):this.local,r||this.children)}remove(e){return 0==e.length||this==di?this:this.removeInner(e,0)}removeInner(e,t){let n=this.children,r=this.local;for(let r=0;r<n.length;r+=3){let i,o=n[r]+t,s=n[r+1]+t;for(let t,n=0;n<e.length;n++)(t=e[n])&&t.from>o&&t.to<s&&(e[n]=null,(i||(i=[])).push(t));if(!i)continue;n==this.children&&(n=this.children.slice());let l=n[r+2].removeInner(i,o+1);l!=di?n[r+2]=l:(n.splice(r,3),r-=3)}if(r.length)for(let n,i=0;i<e.length;i++)if(n=e[i])for(let e=0;e<r.length;e++)r[e].eq(n,t)&&(r==this.local&&(r=this.local.slice()),r.splice(e--,1));return n==this.children&&r==this.local?this:r.length||n.length?new ui(r,n):di}forChild(e,t){if(this==di)return this;if(t.isLeaf)return ui.empty;let n,r;for(let t=0;t<this.children.length;t+=3)if(this.children[t]>=e){this.children[t]==e&&(n=this.children[t+2]);break}let i=e+1,o=i+t.content.size;for(let e=0;e<this.local.length;e++){let t=this.local[e];if(t.from<o&&t.to>i&&t.type instanceof si){let e=Math.max(i,t.from)-i,n=Math.min(o,t.to)-i;e<n&&(r||(r=[])).push(t.copy(e,n))}}if(r){let e=new ui(r.sort(ki),ci);return n?new pi([e,n]):e}return n||di}eq(e){if(this==e)return!0;if(!(e instanceof ui)||this.local.length!=e.local.length||this.children.length!=e.children.length)return!1;for(let t=0;t<this.local.length;t++)if(!this.local[t].eq(e.local[t]))return!1;for(let t=0;t<this.children.length;t+=3)if(this.children[t]!=e.children[t]||this.children[t+1]!=e.children[t+1]||!this.children[t+2].eq(e.children[t+2]))return!1;return!0}locals(e){return bi(this.localsInner(e))}localsInner(e){if(this==di)return ci;if(e.inlineContent||!this.local.some(si.is))return this.local;let t=[];for(let e=0;e<this.local.length;e++)this.local[e].type instanceof si||t.push(this.local[e]);return t}forEachSet(e){e(this)}}ui.empty=new ui([],[]),ui.removeOverlap=bi;const di=ui.empty;class pi{constructor(e){this.members=e}map(e,t){const n=this.members.map((n=>n.map(e,t,hi)));return pi.from(n)}forChild(e,t){if(t.isLeaf)return ui.empty;let n=[];for(let r=0;r<this.members.length;r++){let i=this.members[r].forChild(e,t);i!=di&&(i instanceof pi?n=n.concat(i.members):n.push(i))}return pi.from(n)}eq(e){if(!(e instanceof pi)||e.members.length!=this.members.length)return!1;for(let t=0;t<this.members.length;t++)if(!this.members[t].eq(e.members[t]))return!1;return!0}locals(e){let t,n=!0;for(let r=0;r<this.members.length;r++){let i=this.members[r].localsInner(e);if(i.length)if(t){n&&(t=t.slice(),n=!1);for(let e=0;e<i.length;e++)t.push(i[e])}else t=i}return t?bi(n?t:t.sort(ki)):ci}static from(e){switch(e.length){case 0:return di;case 1:return e[0];default:return new pi(e.every((e=>e instanceof ui))?e:e.reduce(((e,t)=>e.concat(t instanceof ui?t:t.members)),[]))}}forEachSet(e){for(let t=0;t<this.members.length;t++)this.members[t].forEachSet(e)}}function fi(e,t){if(!t||!e.length)return e;let n=[];for(let r=0;r<e.length;r++){let i=e[r];n.push(new ai(i.from+t,i.to+t,i.type))}return n}function mi(e,t,n){if(t.isLeaf)return null;let r=n+t.nodeSize,i=null;for(let t,o=0;o<e.length;o++)(t=e[o])&&t.from>n&&t.to<r&&((i||(i=[])).push(t),e[o]=null);return i}function gi(e){let t=[];for(let n=0;n<e.length;n++)null!=e[n]&&t.push(e[n]);return t}function yi(e,t,n,r){let i=[],o=!1;t.forEach(((t,s)=>{let l=mi(e,t,s+n);if(l){o=!0;let e=yi(l,t,n+s+1,r);e!=di&&i.push(s,s+t.nodeSize,e)}}));let s=fi(o?gi(e):e,-n).sort(ki);for(let e=0;e<s.length;e++)s[e].type.valid(t,s[e])||(r.onRemove&&r.onRemove(s[e].spec),s.splice(e--,1));return s.length||i.length?new ui(s,i):di}function ki(e,t){return e.from-t.from||e.to-t.to}function bi(e){let t=e;for(let n=0;n<t.length-1;n++){let r=t[n];if(r.from!=r.to)for(let i=n+1;i<t.length;i++){let o=t[i];if(o.from!=r.from){o.from<r.to&&(t==e&&(t=e.slice()),t[n]=r.copy(r.from,o.from),vi(t,i,r.copy(o.from,r.to)));break}o.to!=r.to&&(t==e&&(t=e.slice()),t[i]=o.copy(o.from,r.to),vi(t,i+1,o.copy(r.to,o.to)))}}return t}function vi(e,t,n){for(;t<e.length&&ki(n,e[t])>0;)t++;e.splice(t,0,n)}function wi(e){let t=[];return e.someProp("decorations",(n=>{let r=n(e.state);r&&r!=di&&t.push(r)})),e.cursorWrapper&&t.push(ui.create(e.state.doc,[e.cursorWrapper.deco])),pi.from(t)}const xi={childList:!0,characterData:!0,characterDataOldValue:!0,attributes:!0,attributeOldValue:!0,subtree:!0},Ci=Vt&&jt<=11;class Di{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}set(e){this.anchorNode=e.anchorNode,this.anchorOffset=e.anchorOffset,this.focusNode=e.focusNode,this.focusOffset=e.focusOffset}clear(){this.anchorNode=this.focusNode=null}eq(e){return e.anchorNode==this.anchorNode&&e.anchorOffset==this.anchorOffset&&e.focusNode==this.focusNode&&e.focusOffset==this.focusOffset}}class Si{constructor(e,t){this.view=e,this.handleDOMChange=t,this.queue=[],this.flushingSoon=-1,this.observer=null,this.currentSelection=new Di,this.onCharData=null,this.suppressingSelectionUpdates=!1,this.lastChangedTextNode=null,this.observer=window.MutationObserver&&new window.MutationObserver((e=>{for(let t=0;t<e.length;t++)this.queue.push(e[t]);Vt&&jt<=11&&e.some((e=>"childList"==e.type&&e.removedNodes.length||"characterData"==e.type&&e.oldValue.length>e.target.nodeValue.length))?this.flushSoon():this.flush()})),Ci&&(this.onCharData=e=>{this.queue.push({target:e.target,type:"characterData",oldValue:e.prevValue}),this.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this)}flushSoon(){this.flushingSoon<0&&(this.flushingSoon=window.setTimeout((()=>{this.flushingSoon=-1,this.flush()}),20))}forceFlush(){this.flushingSoon>-1&&(window.clearTimeout(this.flushingSoon),this.flushingSoon=-1,this.flush())}start(){this.observer&&(this.observer.takeRecords(),this.observer.observe(this.view.dom,xi)),this.onCharData&&this.view.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.connectSelection()}stop(){if(this.observer){let e=this.observer.takeRecords();if(e.length){for(let t=0;t<e.length;t++)this.queue.push(e[t]);window.setTimeout((()=>this.flush()),20)}this.observer.disconnect()}this.onCharData&&this.view.dom.removeEventListener("DOMCharacterDataModified",this.onCharData),this.disconnectSelection()}connectSelection(){this.view.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange)}disconnectSelection(){this.view.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange)}suppressSelectionUpdates(){this.suppressingSelectionUpdates=!0,setTimeout((()=>this.suppressingSelectionUpdates=!1),50)}onSelectionChange(){if(nr(this.view)){if(this.suppressingSelectionUpdates)return Kn(this.view);if(Vt&&jt<=11&&!this.view.state.selection.empty){let e=this.view.domSelectionRange();if(e.focusNode&&Mt(e.focusNode,e.focusOffset,e.anchorNode,e.anchorOffset))return this.flushSoon()}this.flush()}}setCurSelection(){this.currentSelection.set(this.view.domSelectionRange())}ignoreSelectionChange(e){if(!e.focusNode)return!0;let t,n=new Set;for(let t=e.focusNode;t;t=_t(t))n.add(t);for(let r=e.anchorNode;r;r=_t(r))if(n.has(r)){t=r;break}let r=t&&this.view.docView.nearestDesc(t);return r&&r.ignoreMutation({type:"selection",target:3==t.nodeType?t.parentNode:t})?(this.setCurSelection(),!0):void 0}pendingRecords(){if(this.observer)for(let e of this.observer.takeRecords())this.queue.push(e);return this.queue}flush(){let{view:e}=this;if(!e.docView||this.flushingSoon>-1)return;let t=this.pendingRecords();t.length&&(this.queue=[]);let n=e.domSelectionRange(),r=!this.suppressingSelectionUpdates&&!this.currentSelection.eq(n)&&nr(e)&&!this.ignoreSelectionChange(n),i=-1,o=-1,s=!1,l=[];if(e.editable)for(let e=0;e<t.length;e++){let n=this.registerMutation(t[e],l);n&&(i=i<0?n.from:Math.min(n.from,i),o=o<0?n.to:Math.max(n.to,o),n.typeOver&&(s=!0))}if(Ut&&l.length){let t=l.filter((e=>"BR"==e.nodeName));if(2==t.length){let[e,n]=t;e.parentNode&&e.parentNode.parentNode==n.parentNode?n.remove():e.remove()}else{let{focusNode:n}=this.currentSelection;for(let r of t){let t=r.parentNode;!t||"LI"!=t.nodeName||n&&Mi(e,n)==t||r.remove()}}}let a=null;i<0&&r&&e.input.lastFocus>Date.now()-200&&Math.max(e.input.lastTouch,e.input.lastClick.time)<Date.now()-300&&It(n)&&(a=Hn(e))&&a.eq(nt.near(e.state.doc.resolve(0),1))?(e.input.lastFocus=0,Kn(e),this.currentSelection.set(n),e.scrollToSelection()):(i>-1||r)&&(i>-1&&(e.docView.markDirty(i,o),function(e){if(_i.has(e))return;if(_i.set(e,null),-1!==["normal","nowrap","pre-line"].indexOf(getComputedStyle(e.dom).whiteSpace)){if(e.requiresGeckoHackNode=Ut,Ei)return;console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."),Ei=!0}}(e)),this.handleDOMChange(i,o,s,l),e.docView&&e.docView.dirty?e.updateState(e.state):this.currentSelection.eq(n)||Kn(e),this.currentSelection.set(n))}registerMutation(e,t){if(t.indexOf(e.target)>-1)return null;let n=this.view.docView.nearestDesc(e.target);if("attributes"==e.type&&(n==this.view.docView||"contenteditable"==e.attributeName||"style"==e.attributeName&&!e.oldValue&&!e.target.getAttribute("style")))return null;if(!n||n.ignoreMutation(e))return null;if("childList"==e.type){for(let n=0;n<e.addedNodes.length;n++){let r=e.addedNodes[n];t.push(r),3==r.nodeType&&(this.lastChangedTextNode=r)}if(n.contentDOM&&n.contentDOM!=n.dom&&!n.contentDOM.contains(e.target))return{from:n.posBefore,to:n.posAfter};let r=e.previousSibling,i=e.nextSibling;if(Vt&&jt<=11&&e.addedNodes.length)for(let t=0;t<e.addedNodes.length;t++){let{previousSibling:n,nextSibling:o}=e.addedNodes[t];(!n||Array.prototype.indexOf.call(e.addedNodes,n)<0)&&(r=n),(!o||Array.prototype.indexOf.call(e.addedNodes,o)<0)&&(i=o)}let o=r&&r.parentNode==e.target?St(r)+1:0,s=n.localPosFromDOM(e.target,o,-1),l=i&&i.parentNode==e.target?St(i):e.target.childNodes.length;return{from:s,to:n.localPosFromDOM(e.target,l,1)}}return"attributes"==e.type?{from:n.posAtStart-n.border,to:n.posAtEnd+n.border}:(this.lastChangedTextNode=e.target,{from:n.posAtStart,to:n.posAtEnd,typeOver:e.target.nodeValue==e.oldValue})}}let _i=new WeakMap,Ei=!1;function Ai(e,t){let n=t.startContainer,r=t.startOffset,i=t.endContainer,o=t.endOffset,s=e.domAtPos(e.state.selection.anchor);return Mt(s.node,s.offset,i,o)&&([n,r,i,o]=[i,o,n,r]),{anchorNode:n,anchorOffset:r,focusNode:i,focusOffset:o}}function Mi(e,t){for(let n=t.parentNode;n&&n!=e.dom;n=n.parentNode){let t=e.docView.nearestDesc(n,!0);if(t&&t.node.isBlock)return n}return null}function Oi(e){let t=e.pmViewDesc;if(t)return t.parseRule();if("BR"==e.nodeName&&e.parentNode){if(Kt&&/^(ul|ol)$/i.test(e.parentNode.nodeName)){let e=document.createElement("div");return e.appendChild(document.createElement("li")),{skip:e}}if(e.parentNode.lastChild==e||Kt&&/^(tr|table)$/i.test(e.parentNode.nodeName))return{ignore:!0}}else if("IMG"==e.nodeName&&e.getAttribute("mark-placeholder"))return{ignore:!0};return null}const Ti=/^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;function Ni(e,t,n,r,i){let o=e.input.compositionPendingChanges||(e.composing?e.input.compositionID:0);if(e.input.compositionPendingChanges=0,t<0){let t=e.input.lastSelectionTime>Date.now()-50?e.input.lastSelectionOrigin:null,n=Hn(e,t);if(n&&!e.state.selection.eq(n)){if(Ht&&Qt&&13===e.input.lastKeyCode&&Date.now()-100<e.input.lastKeyCodeTime&&e.someProp("handleKeyDown",(t=>t(e,Rt(13,"Enter")))))return;let r=e.state.tr.setSelection(n);"pointer"==t?r.setMeta("pointer",!0):"key"==t&&r.scrollIntoView(),o&&r.setMeta("composition",o),e.dispatch(r)}return}let s=e.state.doc.resolve(t),l=s.sharedDepth(n);t=s.before(l+1),n=e.state.doc.resolve(n).after(l+1);let a,h,u=e.state.selection,d=function(e,t,n){let r,{node:i,fromOffset:o,toOffset:s,from:l,to:a}=e.docView.parseRange(t,n),c=e.domSelectionRange(),h=c.anchorNode;if(h&&e.dom.contains(1==h.nodeType?h:h.parentNode)&&(r=[{node:h,offset:c.anchorOffset}],It(c)||r.push({node:c.focusNode,offset:c.focusOffset})),Ht&&8===e.input.lastKeyCode)for(let e=s;e>o;e--){let t=i.childNodes[e-1],n=t.pmViewDesc;if("BR"==t.nodeName&&!n){s=e;break}if(!n||n.size)break}let u=e.state.doc,d=e.someProp("domParser")||ee.fromSchema(e.state.schema),p=u.resolve(l),f=null,m=d.parse(i,{topNode:p.parent,topMatch:p.parent.contentMatchAt(p.index()),topOpen:!0,from:o,to:s,preserveWhitespace:"pre"!=p.parent.type.whitespace||"full",findPositions:r,ruleFromNode:Oi,context:p});if(r&&null!=r[0].pos){let e=r[0].pos,t=r[1]&&r[1].pos;null==t&&(t=e),f={anchor:e+l,head:t+l}}return{doc:m,sel:f,from:l,to:a}}(e,t,n),p=e.state.doc,f=p.slice(d.from,d.to);8===e.input.lastKeyCode&&Date.now()-100<e.input.lastKeyCodeTime?(a=e.state.selection.to,h="end"):(a=e.state.selection.from,h="start"),e.input.lastKeyCode=null;let m=function(e,t,n,r,i){let o=e.findDiffStart(t,n);if(null==o)return null;let{a:s,b:l}=e.findDiffEnd(t,n+e.size,n+t.size);if("end"==i){r-=s+Math.max(0,o-Math.min(s,l))-o}if(s<o&&e.size<t.size){let e=r<=o&&r>=s?o-r:0;o-=e,o&&o<t.size&&Ri(t.textBetween(o-1,o+1))&&(o+=e?1:-1),l=o+(l-s),s=o}else if(l<o){let t=r<=o&&r>=l?o-r:0;o-=t,o&&o<e.size&&Ri(e.textBetween(o-1,o+1))&&(o+=t?1:-1),s=o+(s-l),l=o}return{start:o,endA:s,endB:l}}(f.content,d.doc.content,d.from,a,h);if(m&&e.input.domChangeCount++,(Gt&&e.input.lastIOSEnter>Date.now()-225||Qt)&&i.some((e=>1==e.nodeType&&!Ti.test(e.nodeName)))&&(!m||m.endA>=m.endB)&&e.someProp("handleKeyDown",(t=>t(e,Rt(13,"Enter")))))return void(e.input.lastIOSEnter=0);if(!m){if(!(r&&u instanceof st&&!u.empty&&u.$head.sameParent(u.$anchor))||e.composing||d.sel&&d.sel.anchor!=d.sel.head){if(d.sel){let t=Fi(e,e.state.doc,d.sel);if(t&&!t.eq(e.state.selection)){let n=e.state.tr.setSelection(t);o&&n.setMeta("composition",o),e.dispatch(n)}}return}m={start:u.from,endA:u.to,endB:u.to}}e.state.selection.from<e.state.selection.to&&m.start==m.endB&&e.state.selection instanceof st&&(m.start>e.state.selection.from&&m.start<=e.state.selection.from+2&&e.state.selection.from>=d.from?m.start=e.state.selection.from:m.endA<e.state.selection.to&&m.endA>=e.state.selection.to-2&&e.state.selection.to<=d.to&&(m.endB+=e.state.selection.to-m.endA,m.endA=e.state.selection.to)),Vt&&jt<=11&&m.endB==m.start+1&&m.endA==m.start&&m.start>d.from&&"  "==d.doc.textBetween(m.start-d.from-1,m.start-d.from+1)&&(m.start--,m.endA--,m.endB--);let g,y=d.doc.resolveNoCache(m.start-d.from),k=d.doc.resolveNoCache(m.endB-d.from),b=p.resolve(m.start),v=y.sameParent(k)&&y.parent.inlineContent&&b.end()>=m.endA;if((Gt&&e.input.lastIOSEnter>Date.now()-225&&(!v||i.some((e=>"DIV"==e.nodeName||"P"==e.nodeName)))||!v&&y.pos<d.doc.content.size&&(!y.sameParent(k)||!y.parent.inlineContent)&&!/\S/.test(d.doc.textBetween(y.pos,k.pos,"",""))&&(g=nt.findFrom(d.doc.resolve(y.pos+1),1,!0))&&g.head>y.pos)&&e.someProp("handleKeyDown",(t=>t(e,Rt(13,"Enter")))))return void(e.input.lastIOSEnter=0);if(e.state.selection.anchor>m.start&&function(e,t,n,r,i){if(n-t<=i.pos-r.pos||Ii(r,!0,!1)<i.pos)return!1;let o=e.resolve(t);if(!r.parent.isTextblock){let e=o.nodeAfter;return null!=e&&n==t+e.nodeSize}if(o.parentOffset<o.parent.content.size||!o.parent.isTextblock)return!1;let s=e.resolve(Ii(o,!0,!0));return!(!s.parent.isTextblock||s.pos>n||Ii(s,!0,!1)<n)&&r.parent.content.cut(r.parentOffset).eq(s.parent.content)}(p,m.start,m.endA,y,k)&&e.someProp("handleKeyDown",(t=>t(e,Rt(8,"Backspace")))))return void(Qt&&Ht&&e.domObserver.suppressSelectionUpdates());Ht&&m.endB==m.start&&(e.input.lastChromeDelete=Date.now()),Qt&&!v&&y.start()!=k.start()&&0==k.parentOffset&&y.depth==k.depth&&d.sel&&d.sel.anchor==d.sel.head&&d.sel.head==m.endA&&(m.endB-=2,k=d.doc.resolveNoCache(m.endB-d.from),setTimeout((()=>{e.someProp("handleKeyDown",(function(t){return t(e,Rt(13,"Enter"))}))}),20));let w,x,C,D=m.start,S=m.endA;if(v)if(y.pos==k.pos)Vt&&jt<=11&&0==y.parentOffset&&(e.domObserver.suppressSelectionUpdates(),setTimeout((()=>Kn(e)),20)),w=e.state.tr.delete(D,S),x=p.resolve(m.start).marksAcross(p.resolve(m.endA));else if(m.endA==m.endB&&(C=function(e,t){let n,r,i,o=e.firstChild.marks,s=t.firstChild.marks,l=o,a=s;for(let e=0;e<s.length;e++)l=s[e].removeFromSet(l);for(let e=0;e<o.length;e++)a=o[e].removeFromSet(a);if(1==l.length&&0==a.length)r=l[0],n="add",i=e=>e.mark(r.addToSet(e.marks));else{if(0!=l.length||1!=a.length)return null;r=a[0],n="remove",i=e=>e.mark(r.removeFromSet(e.marks))}let h=[];for(let e=0;e<t.childCount;e++)h.push(i(t.child(e)));if(c.from(h).eq(e))return{mark:r,type:n}}(y.parent.content.cut(y.parentOffset,k.parentOffset),b.parent.content.cut(b.parentOffset,m.endA-b.start()))))w=e.state.tr,"add"==C.type?w.addMark(D,S,C.mark):w.removeMark(D,S,C.mark);else if(y.parent.child(y.index()).isText&&y.index()==k.index()-(k.textOffset?0:1)){let t=y.parent.textBetween(y.parentOffset,k.parentOffset);if(e.someProp("handleTextInput",(n=>n(e,D,S,t))))return;w=e.state.tr.insertText(t,D,S)}if(w||(w=e.state.tr.replace(D,S,d.doc.slice(m.start-d.from,m.endB-d.from))),d.sel){let t=Fi(e,w.doc,d.sel);t&&!(Ht&&e.composing&&t.empty&&(m.start!=m.endB||e.input.lastChromeDelete<Date.now()-100)&&(t.head==D||t.head==w.mapping.map(S)-1)||Vt&&t.empty&&t.head==D)&&w.setSelection(t)}x&&w.ensureMarks(x),o&&w.setMeta("composition",o),e.dispatch(w.scrollIntoView())}function Fi(e,t,n){return Math.max(n.anchor,n.head)>t.content.size?null:tr(e,t.resolve(n.anchor),t.resolve(n.head))}function Ii(e,t,n){let r=e.depth,i=t?e.end():e.pos;for(;r>0&&(t||e.indexAfter(r)==e.node(r).childCount);)r--,i++,t=!1;if(n){let t=e.node(r).maybeChild(e.indexAfter(r));for(;t&&!t.isLeaf;)t=t.firstChild,i++}return i}function Ri(e){if(2!=e.length)return!1;let t=e.charCodeAt(0),n=e.charCodeAt(1);return t>=56320&&t<=57343&&n>=55296&&n<=56319}class Bi{constructor(e,t){this._root=null,this.focused=!1,this.trackWrites=null,this.mounted=!1,this.markCursor=null,this.cursorWrapper=null,this.lastSelectedViewDesc=void 0,this.input=new Nr,this.prevDirectPlugins=[],this.pluginViews=[],this.requiresGeckoHackNode=!1,this.dragging=null,this._props=t,this.state=t.state,this.directPlugins=t.plugins||[],this.directPlugins.forEach($i),this.dispatch=this.dispatch.bind(this),this.dom=e&&e.mount||document.createElement("div"),e&&(e.appendChild?e.appendChild(this.dom):"function"==typeof e?e(this.dom):e.mount&&(this.mounted=!0)),this.editable=Pi(this),Li(this),this.nodeViews=qi(this),this.docView=On(this.state.doc,zi(this),wi(this),this.dom,this),this.domObserver=new Si(this,((e,t,n,r)=>Ni(this,e,t,n,r))),this.domObserver.start(),function(e){for(let t in Mr){let n=Mr[t];e.dom.addEventListener(t,e.input.eventHandlers[t]=t=>{!Br(e,t)||Rr(e,t)||!e.editable&&t.type in Or||n(e,t)},Tr[t]?{passive:!0}:void 0)}Kt&&e.dom.addEventListener("input",(()=>null)),Ir(e)}(this),this.updatePluginViews()}get composing(){return this.input.composing}get props(){if(this._props.state!=this.state){let e=this._props;this._props={};for(let t in e)this._props[t]=e[t];this._props.state=this.state}return this._props}update(e){e.handleDOMEvents!=this._props.handleDOMEvents&&Ir(this);let t=this._props;this._props=e,e.plugins&&(e.plugins.forEach($i),this.directPlugins=e.plugins),this.updateStateInner(e.state,t)}setProps(e){let t={};for(let e in this._props)t[e]=this._props[e];t.state=this.state;for(let n in e)t[n]=e[n];this.update(t)}updateState(e){this.updateStateInner(e,this._props)}updateStateInner(e,t){var n;let r=this.state,i=!1,o=!1;e.storedMarks&&this.composing&&(Gr(this),o=!0),this.state=e;let s=r.plugins!=e.plugins||this._props.plugins!=t.plugins;if(s||this._props.plugins!=t.plugins||this._props.nodeViews!=t.nodeViews){let e=qi(this);(function(e,t){let n=0,r=0;for(let r in e){if(e[r]!=t[r])return!0;n++}for(let e in t)r++;return n!=r})(e,this.nodeViews)&&(this.nodeViews=e,i=!0)}(s||t.handleDOMEvents!=this._props.handleDOMEvents)&&Ir(this),this.editable=Pi(this),Li(this);let l=wi(this),a=zi(this),c=r.plugins==e.plugins||r.doc.eq(e.doc)?e.scrollToSelection>r.scrollToSelection?"to selection":"preserve":"reset",h=i||!this.docView.matchesNode(e.doc,a,l);!h&&e.selection.eq(r.selection)||(o=!0);let u="preserve"==c&&o&&null==this.dom.style.overflowAnchor&&function(e){let t,n,r=e.dom.getBoundingClientRect(),i=Math.max(0,r.top);for(let o=(r.left+r.right)/2,s=i+1;s<Math.min(innerHeight,r.bottom);s+=5){let r=e.root.elementFromPoint(o,s);if(!r||r==e.dom||!e.dom.contains(r))continue;let l=r.getBoundingClientRect();if(l.top>=i-20){t=r,n=l.top;break}}return{refDOM:t,refTop:n,stack:sn(e.dom)}}(this);if(o){this.domObserver.stop();let t=h&&(Vt||Ht)&&!this.composing&&!r.selection.empty&&!e.selection.empty&&function(e,t){let n=Math.min(e.$anchor.sharedDepth(e.head),t.$anchor.sharedDepth(t.head));return e.$anchor.start(n)!=t.$anchor.start(n)}(r.selection,e.selection);if(h){let n=Ht?this.trackWrites=this.domSelectionRange().focusNode:null;this.composing&&(this.input.compositionNode=Zr(this)),!i&&this.docView.update(e.doc,a,l,this)||(this.docView.updateOuterDeco(a),this.docView.destroy(),this.docView=On(e.doc,a,l,this.dom,this)),n&&!this.trackWrites&&(t=!0)}t||!(this.input.mouseDown&&this.domObserver.currentSelection.eq(this.domSelectionRange())&&function(e){let t=e.docView.domFromPos(e.state.selection.anchor,0),n=e.domSelectionRange();return Mt(t.node,t.offset,n.anchorNode,n.anchorOffset)}(this))?Kn(this,t):(Xn(this,e.selection),this.domObserver.setCurSelection()),this.domObserver.start()}this.updatePluginViews(r),(null===(n=this.dragging)||void 0===n?void 0:n.node)&&!r.doc.eq(e.doc)&&this.updateDraggedNode(this.dragging,r),"reset"==c?this.dom.scrollTop=0:"to selection"==c?this.scrollToSelection():u&&function({refDOM:e,refTop:t,stack:n}){let r=e?e.getBoundingClientRect().top:0;ln(n,0==r?0:r-t)}(u)}scrollToSelection(){let e=this.domSelectionRange().focusNode;if(e&&this.dom.contains(1==e.nodeType?e:e.parentNode))if(this.someProp("handleScrollToSelection",(e=>e(this))));else if(this.state.selection instanceof at){let t=this.docView.domAfterPos(this.state.selection.from);1==t.nodeType&&on(this,t.getBoundingClientRect(),e)}else on(this,this.coordsAtPos(this.state.selection.head,1),e);else;}destroyPluginViews(){let e;for(;e=this.pluginViews.pop();)e.destroy&&e.destroy()}updatePluginViews(e){if(e&&e.plugins==this.state.plugins&&this.directPlugins==this.prevDirectPlugins)for(let t=0;t<this.pluginViews.length;t++){let n=this.pluginViews[t];n.update&&n.update(this,e)}else{this.prevDirectPlugins=this.directPlugins,this.destroyPluginViews();for(let e=0;e<this.directPlugins.length;e++){let t=this.directPlugins[e];t.spec.view&&this.pluginViews.push(t.spec.view(this))}for(let e=0;e<this.state.plugins.length;e++){let t=this.state.plugins[e];t.spec.view&&this.pluginViews.push(t.spec.view(this))}}}updateDraggedNode(e,t){let n=e.node,r=-1;if(this.state.doc.nodeAt(n.from)==n.node)r=n.from;else{let e=n.from+(this.state.doc.content.size-t.doc.content.size);(e>0&&this.state.doc.nodeAt(e))==n.node&&(r=e)}this.dragging=new ti(e.slice,e.move,r<0?void 0:at.create(this.state.doc,r))}someProp(e,t){let n,r=this._props&&this._props[e];if(null!=r&&(n=t?t(r):r))return n;for(let r=0;r<this.directPlugins.length;r++){let i=this.directPlugins[r].props[e];if(null!=i&&(n=t?t(i):i))return n}let i=this.state.plugins;if(i)for(let r=0;r<i.length;r++){let o=i[r].props[e];if(null!=o&&(n=t?t(o):o))return n}}hasFocus(){if(Vt){let e=this.root.activeElement;if(e==this.dom)return!0;if(!e||!this.dom.contains(e))return!1;for(;e&&this.dom!=e&&this.dom.contains(e);){if("false"==e.contentEditable)return!1;e=e.parentElement}return!0}return this.root.activeElement==this.dom}focus(){this.domObserver.stop(),this.editable&&function(e){if(e.setActive)return e.setActive();if(an)return e.focus(an);let t=sn(e);e.focus(null==an?{get preventScroll(){return an={preventScroll:!0},!0}}:void 0),an||(an=!1,ln(t,0))}(this.dom),Kn(this),this.domObserver.start()}get root(){let e=this._root;if(null==e)for(let e=this.dom.parentNode;e;e=e.parentNode)if(9==e.nodeType||11==e.nodeType&&e.host)return e.getSelection||(Object.getPrototypeOf(e).getSelection=()=>e.ownerDocument.getSelection()),this._root=e;return e||document}updateRoot(){this._root=null}posAtCoords(e){return dn(this,e)}coordsAtPos(e,t=1){return gn(this,e,t)}domAtPos(e,t=0){return this.docView.domFromPos(e,t)}nodeDOM(e){let t=this.docView.descAt(e);return t?t.nodeDOM:null}posAtDOM(e,t,n=-1){let r=this.docView.posFromDOM(e,t,n);if(null==r)throw new RangeError("DOM position not inside the editor");return r}endOfTextblock(e,t){return Dn(this,t||this.state,e)}pasteHTML(e,t){return Xr(this,"",e,!1,t||new ClipboardEvent("paste"))}pasteText(e,t){return Xr(this,e,null,!0,t||new ClipboardEvent("paste"))}serializeForClipboard(e){return yr(this,e)}destroy(){this.docView&&(!function(e){e.domObserver.stop();for(let t in e.input.eventHandlers)e.dom.removeEventListener(t,e.input.eventHandlers[t]);clearTimeout(e.input.composingTimeout),clearTimeout(e.input.lastIOSEnterFallbackTimeout)}(this),this.destroyPluginViews(),this.mounted?(this.docView.update(this.state.doc,[],wi(this),this),this.dom.textContent=""):this.dom.parentNode&&this.dom.parentNode.removeChild(this.dom),this.docView.destroy(),this.docView=null,Et=null)}get isDestroyed(){return null==this.docView}dispatchEvent(e){return function(e,t){Rr(e,t)||!Mr[t.type]||!e.editable&&t.type in Or||Mr[t.type](e,t)}(this,e)}dispatch(e){let t=this._props.dispatchTransaction;t?t.call(this,e):this.updateState(this.state.apply(e))}domSelectionRange(){let e=this.domSelection();return e?Kt&&11===this.root.nodeType&&function(e){let t=e.activeElement;for(;t&&t.shadowRoot;)t=t.shadowRoot.activeElement;return t}(this.dom.ownerDocument)==this.dom&&function(e,t){if(t.getComposedRanges){let n=t.getComposedRanges(e.root)[0];if(n)return Ai(e,n)}let n;function r(e){e.preventDefault(),e.stopImmediatePropagation(),n=e.getTargetRanges()[0]}return e.dom.addEventListener("beforeinput",r,!0),document.execCommand("indent"),e.dom.removeEventListener("beforeinput",r,!0),n?Ai(e,n):null}(this,e)||e:{focusNode:null,focusOffset:0,anchorNode:null,anchorOffset:0}}domSelection(){return this.root.getSelection()}}function zi(e){let t=Object.create(null);return t.class="ProseMirror",t.contenteditable=String(e.editable),e.someProp("attributes",(n=>{if("function"==typeof n&&(n=n(e.state)),n)for(let e in n)"class"==e?t.class+=" "+n[e]:"style"==e?t.style=(t.style?t.style+";":"")+n[e]:t[e]||"contenteditable"==e||"nodeName"==e||(t[e]=String(n[e]))})),t.translate||(t.translate="no"),[ai.node(0,e.state.doc.content.size,t)]}function Li(e){if(e.markCursor){let t=document.createElement("img");t.className="ProseMirror-separator",t.setAttribute("mark-placeholder","true"),t.setAttribute("alt",""),e.cursorWrapper={dom:t,deco:ai.widget(e.state.selection.from,t,{raw:!0,marks:e.markCursor})}}else e.cursorWrapper=null}function Pi(e){return!e.someProp("editable",(t=>!1===t(e.state)))}function qi(e){let t=Object.create(null);function n(e){for(let n in e)Object.prototype.hasOwnProperty.call(t,n)||(t[n]=e[n])}return e.someProp("nodeViews",n),e.someProp("markViews",n),t}function $i(e){if(e.spec.state||e.spec.filterTransaction||e.spec.appendTransaction)throw new RangeError("Plugins passed directly to the view must not have a state component")}var Vi=200,ji=function(){};ji.prototype.append=function(e){return e.length?(e=ji.from(e),!this.length&&e||e.length<Vi&&this.leafAppend(e)||this.length<Vi&&e.leafPrepend(this)||this.appendInner(e)):this},ji.prototype.prepend=function(e){return e.length?ji.from(e).append(this):this},ji.prototype.appendInner=function(e){return new Wi(this,e)},ji.prototype.slice=function(e,t){return void 0===e&&(e=0),void 0===t&&(t=this.length),e>=t?ji.empty:this.sliceInner(Math.max(0,e),Math.min(this.length,t))},ji.prototype.get=function(e){if(!(e<0||e>=this.length))return this.getInner(e)},ji.prototype.forEach=function(e,t,n){void 0===t&&(t=0),void 0===n&&(n=this.length),t<=n?this.forEachInner(e,t,n,0):this.forEachInvertedInner(e,t,n,0)},ji.prototype.map=function(e,t,n){void 0===t&&(t=0),void 0===n&&(n=this.length);var r=[];return this.forEach((function(t,n){return r.push(e(t,n))}),t,n),r},ji.from=function(e){return e instanceof ji?e:e&&e.length?new Ui(e):ji.empty};var Ui=function(e){function t(t){e.call(this),this.values=t}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var n={length:{configurable:!0},depth:{configurable:!0}};return t.prototype.flatten=function(){return this.values},t.prototype.sliceInner=function(e,n){return 0==e&&n==this.length?this:new t(this.values.slice(e,n))},t.prototype.getInner=function(e){return this.values[e]},t.prototype.forEachInner=function(e,t,n,r){for(var i=t;i<n;i++)if(!1===e(this.values[i],r+i))return!1},t.prototype.forEachInvertedInner=function(e,t,n,r){for(var i=t-1;i>=n;i--)if(!1===e(this.values[i],r+i))return!1},t.prototype.leafAppend=function(e){if(this.length+e.length<=Vi)return new t(this.values.concat(e.flatten()))},t.prototype.leafPrepend=function(e){if(this.length+e.length<=Vi)return new t(e.flatten().concat(this.values))},n.length.get=function(){return this.values.length},n.depth.get=function(){return 0},Object.defineProperties(t.prototype,n),t}(ji);ji.empty=new Ui([]);var Wi=function(e){function t(t,n){e.call(this),this.left=t,this.right=n,this.length=t.length+n.length,this.depth=Math.max(t.depth,n.depth)+1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.flatten=function(){return this.left.flatten().concat(this.right.flatten())},t.prototype.getInner=function(e){return e<this.left.length?this.left.get(e):this.right.get(e-this.left.length)},t.prototype.forEachInner=function(e,t,n,r){var i=this.left.length;return!(t<i&&!1===this.left.forEachInner(e,t,Math.min(n,i),r))&&(!(n>i&&!1===this.right.forEachInner(e,Math.max(t-i,0),Math.min(this.length,n)-i,r+i))&&void 0)},t.prototype.forEachInvertedInner=function(e,t,n,r){var i=this.left.length;return!(t>i&&!1===this.right.forEachInvertedInner(e,t-i,Math.max(n,i)-i,r+i))&&(!(n<i&&!1===this.left.forEachInvertedInner(e,Math.min(t,i),n,r))&&void 0)},t.prototype.sliceInner=function(e,t){if(0==e&&t==this.length)return this;var n=this.left.length;return t<=n?this.left.slice(e,t):e>=n?this.right.slice(e-n,t-n):this.left.slice(e,n).append(this.right.slice(0,t-n))},t.prototype.leafAppend=function(e){var n=this.right.leafAppend(e);if(n)return new t(this.left,n)},t.prototype.leafPrepend=function(e){var n=this.left.leafPrepend(e);if(n)return new t(n,this.right)},t.prototype.appendInner=function(e){return this.left.depth>=Math.max(this.right.depth,e.depth)+1?new t(this.left,new t(this.right,e)):new t(this,e)},t}(ji);const Hi=ji;class Ji{constructor(e,t){this.items=e,this.eventCount=t}popEvent(e,t){if(0==this.eventCount)return null;let n,r,i=this.items.length;for(;;i--){if(this.items.get(i-1).selection){--i;break}}t&&(n=this.remapping(i,this.items.length),r=n.maps.length);let o,s,l=e.tr,a=[],c=[];return this.items.forEach(((e,t)=>{if(!e.step)return n||(n=this.remapping(i,t+1),r=n.maps.length),r--,void c.push(e);if(n){c.push(new Ki(e.map));let t,i=e.step.map(n.slice(r));i&&l.maybeStep(i).doc&&(t=l.mapping.maps[l.mapping.maps.length-1],a.push(new Ki(t,void 0,void 0,a.length+c.length))),r--,t&&n.appendMap(t,r)}else l.maybeStep(e.step);return e.selection?(o=n?e.selection.map(n.slice(r)):e.selection,s=new Ji(this.items.slice(0,i).append(c.reverse().concat(a)),this.eventCount-1),!1):void 0}),this.items.length,0),{remaining:s,transform:l,selection:o}}addTransform(e,t,n,r){let i=[],o=this.eventCount,s=this.items,l=!r&&s.length?s.get(s.length-1):null;for(let n=0;n<e.steps.length;n++){let a,c=e.steps[n].invert(e.docs[n]),h=new Ki(e.mapping.maps[n],c,t);(a=l&&l.merge(h))&&(h=a,n?i.pop():s=s.slice(0,s.length-1)),i.push(h),t&&(o++,t=void 0),r||(l=h)}let a=o-n.depth;return a>Zi&&(s=function(e,t){let n;return e.forEach(((e,r)=>{if(e.selection&&0==t--)return n=r,!1})),e.slice(n)}(s,a),o-=a),new Ji(s.append(i),o)}remapping(e,t){let n=new ve;return this.items.forEach(((t,r)=>{let i=null!=t.mirrorOffset&&r-t.mirrorOffset>=e?n.maps.length-t.mirrorOffset:void 0;n.appendMap(t.map,i)}),e,t),n}addMaps(e){return 0==this.eventCount?this:new Ji(this.items.append(e.map((e=>new Ki(e)))),this.eventCount)}rebased(e,t){if(!this.eventCount)return this;let n=[],r=Math.max(0,this.items.length-t),i=e.mapping,o=e.steps.length,s=this.eventCount;this.items.forEach((e=>{e.selection&&s--}),r);let l=t;this.items.forEach((t=>{let r=i.getMirror(--l);if(null==r)return;o=Math.min(o,r);let a=i.maps[r];if(t.step){let o=e.steps[r].invert(e.docs[r]),c=t.selection&&t.selection.map(i.slice(l+1,r));c&&s++,n.push(new Ki(a,o,c))}else n.push(new Ki(a))}),r);let a=[];for(let e=t;e<o;e++)a.push(new Ki(i.maps[e]));let c=this.items.slice(0,r).append(a).append(n),h=new Ji(c,s);return h.emptyItemCount()>500&&(h=h.compress(this.items.length-n.length)),h}emptyItemCount(){let e=0;return this.items.forEach((t=>{t.step||e++})),e}compress(e=this.items.length){let t=this.remapping(0,e),n=t.maps.length,r=[],i=0;return this.items.forEach(((o,s)=>{if(s>=e)r.push(o),o.selection&&i++;else if(o.step){let e=o.step.map(t.slice(n)),s=e&&e.getMap();if(n--,s&&t.appendMap(s,n),e){let l=o.selection&&o.selection.map(t.slice(n));l&&i++;let a,c=new Ki(s.invert(),e,l),h=r.length-1;(a=r.length&&r[h].merge(c))?r[h]=a:r.push(c)}}else o.map&&n--}),this.items.length,0),new Ji(Hi.from(r.reverse()),i)}}Ji.empty=new Ji(Hi.empty,0);class Ki{constructor(e,t,n,r){this.map=e,this.step=t,this.selection=n,this.mirrorOffset=r}merge(e){if(this.step&&e.step&&!e.selection){let t=e.step.merge(this.step);if(t)return new Ki(t.getMap().invert(),t,this.selection)}}}class Gi{constructor(e,t,n,r,i){this.done=e,this.undone=t,this.prevRanges=n,this.prevTime=r,this.prevComposition=i}}const Zi=20;function Yi(e){let t=[];for(let n=e.length-1;n>=0&&0==t.length;n--)e[n].forEach(((e,n,r,i)=>t.push(r,i)));return t}function Qi(e,t){if(!e)return null;let n=[];for(let r=0;r<e.length;r+=2){let i=t.map(e[r],1),o=t.map(e[r+1],-1);i<=o&&n.push(i,o)}return n}let Xi=!1,eo=null;function to(e){let t=e.plugins;if(eo!=t){Xi=!1,eo=t;for(let e=0;e<t.length;e++)if(t[e].spec.historyPreserveItems){Xi=!0;break}}return Xi}const no=new Dt("history"),ro=new Dt("closeHistory");function io(e={}){return e={depth:e.depth||100,newGroupDelay:e.newGroupDelay||500},new wt({key:no,state:{init:()=>new Gi(Ji.empty,Ji.empty,null,0,-1),apply:(t,n,r)=>function(e,t,n,r){let i,o=n.getMeta(no);if(o)return o.historyState;n.getMeta(ro)&&(e=new Gi(e.done,e.undone,null,0,-1));let s=n.getMeta("appendedTransaction");if(0==n.steps.length)return e;if(s&&s.getMeta(no))return s.getMeta(no).redo?new Gi(e.done.addTransform(n,void 0,r,to(t)),e.undone,Yi(n.mapping.maps),e.prevTime,e.prevComposition):new Gi(e.done,e.undone.addTransform(n,void 0,r,to(t)),null,e.prevTime,e.prevComposition);if(!1===n.getMeta("addToHistory")||s&&!1===s.getMeta("addToHistory"))return(i=n.getMeta("rebased"))?new Gi(e.done.rebased(n,i),e.undone.rebased(n,i),Qi(e.prevRanges,n.mapping),e.prevTime,e.prevComposition):new Gi(e.done.addMaps(n.mapping.maps),e.undone.addMaps(n.mapping.maps),Qi(e.prevRanges,n.mapping),e.prevTime,e.prevComposition);{let i=n.getMeta("composition"),o=0==e.prevTime||!s&&e.prevComposition!=i&&(e.prevTime<(n.time||0)-r.newGroupDelay||!function(e,t){if(!t)return!1;if(!e.docChanged)return!0;let n=!1;return e.mapping.maps[0].forEach(((e,r)=>{for(let i=0;i<t.length;i+=2)e<=t[i+1]&&r>=t[i]&&(n=!0)})),n}(n,e.prevRanges)),l=s?Qi(e.prevRanges,n.mapping):Yi(n.mapping.maps);return new Gi(e.done.addTransform(n,o?t.selection.getBookmark():void 0,r,to(t)),Ji.empty,l,n.time,null==i?e.prevComposition:i)}}(n,r,t,e)},config:e,props:{handleDOMEvents:{beforeinput(e,t){let n=t.inputType,r="historyUndo"==n?so:"historyRedo"==n?lo:null;return!!r&&(t.preventDefault(),r(e.state,e.dispatch))}}}})}function oo(e,t){return(n,r)=>{let i=no.getState(n);if(!i||0==(e?i.undone:i.done).eventCount)return!1;if(r){let o=function(e,t,n){let r=to(t),i=no.get(t).spec.config,o=(n?e.undone:e.done).popEvent(t,r);if(!o)return null;let s=o.selection.resolve(o.transform.doc),l=(n?e.done:e.undone).addTransform(o.transform,t.selection.getBookmark(),i,r),a=new Gi(n?l:o.remaining,n?o.remaining:l,null,0,-1);return o.transform.setSelection(s).setMeta(no,{redo:n,historyState:a})}(i,n,e);o&&r(t?o.scrollIntoView():o)}return!0}}const so=oo(!1,!0),lo=oo(!0,!0);oo(!1,!1),oo(!0,!1);class ao{constructor(e,t,n={}){var r;this.match=e,this.match=e,this.handler="string"==typeof t?(r=t,function(e,t,n,i){let o=r;if(t[1]){let e=t[0].lastIndexOf(t[1]);o+=t[0].slice(e+t[1].length);let r=(n+=e)-i;r>0&&(o=t[0].slice(e-r,e)+o,n=i)}return e.tr.insertText(o,n,i)}):t,this.undoable=!1!==n.undoable,this.inCode=n.inCode||!1,this.inCodeMark=!1!==n.inCodeMark}}function co(e,t,n,r,i,o){if(e.composing)return!1;let s=e.state,l=s.doc.resolve(t),a=l.parent.textBetween(Math.max(0,l.parentOffset-500),l.parentOffset,null,"￼")+r;for(let c=0;c<i.length;c++){let h=i[c];if(!h.inCodeMark&&l.marks().some((e=>e.type.spec.code)))continue;if(l.parent.type.spec.code){if(!h.inCode)continue}else if("only"===h.inCode)continue;let u=h.match.exec(a),d=u&&u[0].length>=r.length&&h.handler(s,u,t-(u[0].length-r.length),n);if(d)return h.undoable&&d.setMeta(o,{transform:d,from:t,to:n,text:r}),e.dispatch(d),!0}return!1}new ao(/--$/,"—",{inCodeMark:!1});const ho=new ao(/\.\.\.$/,"…",{inCodeMark:!1}),uo=[new ao(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/,"“",{inCodeMark:!1}),new ao(/"$/,"”",{inCodeMark:!1}),new ao(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/,"‘",{inCodeMark:!1}),new ao(/'$/,"’",{inCodeMark:!1})];function po(e,t,n=null){return new ao(e,((e,r,i,o)=>{let s=e.doc.resolve(i),l=n instanceof Function?n(r):n;return s.node(-1).canReplaceWith(s.index(-1),s.indexAfter(-1),t)?e.tr.delete(i,o).setBlockType(i,i,t,l):null}))}const fo=["ol",0],mo=["ul",0],go=["li",0],yo={attrs:{order:{default:1,validate:"number"}},parseDOM:[{tag:"ol",getAttrs:e=>({order:e.hasAttribute("start")?+e.getAttribute("start"):1})}],toDOM:e=>1==e.attrs.order?fo:["ol",{start:e.attrs.order},0]},ko={parseDOM:[{tag:"ul"}],toDOM:()=>mo},bo={parseDOM:[{tag:"li"}],toDOM:()=>go,defining:!0};function vo(e,t=null){return function(n,r){let{$from:i,$to:o}=n.selection,s=i.blockRange(o);if(!s)return!1;let l=r?n.tr:null;return!!function(e,t,n,r=null){let i=!1,o=t,s=t.$from.doc;if(t.depth>=2&&t.$from.node(t.depth-1).type.compatibleContent(n)&&0==t.startIndex){if(0==t.$from.index(t.depth-1))return!1;let e=s.resolve(t.start-2);o=new T(e,e,t.depth),t.endIndex<t.parent.childCount&&(t=new T(t.$from,s.resolve(t.$to.end(t.depth)),t.depth)),i=!0}let l=function(e,t,n=null,r=e){let i=function(e,t){let{parent:n,startIndex:r,endIndex:i}=e,o=n.contentMatchAt(r).findWrapping(t);if(!o)return null;let s=o.length?o[0]:t;return n.canReplaceWith(r,i,s)?o:null}(e,t),o=i&&function(e,t){let{parent:n,startIndex:r,endIndex:i}=e,o=n.child(r),s=t.contentMatch.findWrapping(o.type);if(!s)return null;let l=(s.length?s[s.length-1]:t).contentMatch;for(let e=r;l&&e<i;e++)l=l.matchType(n.child(e).type);return l&&l.validEnd?s:null}(r,t);return o?i.map(Re).concat({type:t,attrs:n}).concat(o.map(Re)):null}(o,n,r,t);if(!l)return!1;e&&function(e,t,n,r,i){let o=c.empty;for(let e=n.length-1;e>=0;e--)o=c.from(n[e].type.create(n[e].attrs,o));e.step(new Oe(t.start-(r?2:0),t.end,t.start,t.end,new m(o,0,0),n.length,!0));let s=0;for(let e=0;e<n.length;e++)n[e].type==i&&(s=e+1);let l=n.length-s,a=t.start+n.length-(r?2:0),h=t.parent;for(let n=t.startIndex,r=t.endIndex,i=!0;n<r;n++,i=!1)!i&&Le(e.doc,a,l)&&(e.split(a,l),a+=2*l),a+=h.child(n).nodeSize}(e,t,l,i,n);return!0}(l,s,e,t)&&(r&&r(l.scrollIntoView()),!0)}}function wo(e,t){return function(n,r){let{$from:i,$to:o,node:s}=n.selection;if(s&&s.isBlock||i.depth<2||!i.sameParent(o))return!1;let l=i.node(-1);if(l.type!=e)return!1;if(0==i.parent.content.size&&i.node(-1).childCount==i.indexAfter(-1)){if(3==i.depth||i.node(-3).type!=e||i.index(-2)!=i.node(-2).childCount-1)return!1;if(r){let t=c.empty,o=i.index(-1)?1:i.index(-2)?2:3;for(let e=i.depth-o;e>=i.depth-3;e--)t=c.from(i.node(e).copy(t));let s=i.indexAfter(-1)<i.node(-2).childCount?1:i.indexAfter(-2)<i.node(-3).childCount?2:3;t=t.append(c.from(e.createAndFill()));let l=i.before(i.depth-(o-1)),a=n.tr.replace(l,i.after(-s),new m(t,4-o,0)),h=-1;a.doc.nodesBetween(l,a.doc.content.size,((e,t)=>{if(h>-1)return!1;e.isTextblock&&0==e.content.size&&(h=t+1)})),h>-1&&a.setSelection(nt.near(a.doc.resolve(h))),r(a.scrollIntoView())}return!0}let a=o.pos==i.end()?l.contentMatchAt(0).defaultType:null,h=n.tr.delete(i.pos,o.pos),u=a?[t?{type:e,attrs:t}:null,{type:a}]:void 0;return!!Le(h.doc,i.pos,2,u)&&(r&&r(h.split(i.pos,2,u).scrollIntoView()),!0)}}function xo(e){return function(t,n){let{$from:r,$to:i}=t.selection,o=r.blockRange(i,(t=>t.childCount>0&&t.firstChild.type==e));return!!o&&(!n||(r.node(o.depth-1).type==e?function(e,t,n,r){let i=e.tr,o=r.end,s=r.$to.end(r.depth);o<s&&(i.step(new Oe(o-1,s,o,s,new m(c.from(n.create(null,r.parent.copy())),1,0),1,!0)),r=new T(i.doc.resolve(r.$from.pos),i.doc.resolve(s),r.depth));const l=Ie(r);if(null==l)return!1;i.lift(r,l);let a=i.doc.resolve(i.mapping.map(o,-1)-1);Pe(i.doc,a.pos)&&a.nodeBefore.type==a.nodeAfter.type&&i.join(a.pos);return t(i.scrollIntoView()),!0}(t,n,e,o):function(e,t,n){let r=e.tr,i=n.parent;for(let e=n.end,t=n.endIndex-1,o=n.startIndex;t>o;t--)e-=i.child(t).nodeSize,r.delete(e-1,e+1);let o=r.doc.resolve(n.start),s=o.nodeAfter;if(r.mapping.map(n.end)!=n.start+o.nodeAfter.nodeSize)return!1;let l=0==n.startIndex,a=n.endIndex==i.childCount,h=o.node(-1),u=o.index(-1);if(!h.canReplace(u+(l?0:1),u+1,s.content.append(a?c.empty:c.from(i))))return!1;let d=o.pos,p=d+s.nodeSize;return r.step(new Oe(d-(l?1:0),p+(a?1:0),d+1,p-1,new m((l?c.empty:c.from(i.copy(c.empty))).append(a?c.empty:c.from(i.copy(c.empty))),l?0:1,a?0:1),l?0:1)),t(r.scrollIntoView()),!0}(t,n,o)))}}const Co=["p",0],Do=["blockquote",0],So=["hr"],_o=["pre",["code",0]],Eo=["br"],Ao={doc:{content:"block+"},paragraph:{content:"inline*",group:"block",parseDOM:[{tag:"p"}],toDOM:()=>Co},blockquote:{content:"block+",group:"block",defining:!0,parseDOM:[{tag:"blockquote"}],toDOM:()=>Do},horizontal_rule:{group:"block",parseDOM:[{tag:"hr"}],toDOM:()=>So},heading:{attrs:{level:{default:1,validate:"number"}},content:"inline*",group:"block",defining:!0,parseDOM:[{tag:"h1",attrs:{level:1}},{tag:"h2",attrs:{level:2}},{tag:"h3",attrs:{level:3}},{tag:"h4",attrs:{level:4}},{tag:"h5",attrs:{level:5}},{tag:"h6",attrs:{level:6}}],toDOM:e=>["h"+e.attrs.level,0]},code_block:{content:"text*",marks:"",group:"block",code:!0,defining:!0,parseDOM:[{tag:"pre",preserveWhitespace:"full"}],toDOM:()=>_o},text:{group:"inline"},image:{inline:!0,attrs:{src:{validate:"string"},alt:{default:null,validate:"string|null"},title:{default:null,validate:"string|null"}},group:"inline",draggable:!0,parseDOM:[{tag:"img[src]",getAttrs:e=>({src:e.getAttribute("src"),title:e.getAttribute("title"),alt:e.getAttribute("alt")})}],toDOM(e){let{src:t,alt:n,title:r}=e.attrs;return["img",{src:t,alt:n,title:r}]}},hard_break:{inline:!0,group:"inline",selectable:!1,parseDOM:[{tag:"br"}],toDOM:()=>Eo}},Mo=["em",0],Oo=["strong",0],To=["code",0],No={link:{attrs:{href:{validate:"string"},title:{default:null,validate:"string|null"}},inclusive:!1,parseDOM:[{tag:"a[href]",getAttrs:e=>({href:e.getAttribute("href"),title:e.getAttribute("title")})}],toDOM(e){let{href:t,title:n}=e.attrs;return["a",{href:t,title:n},0]}},em:{parseDOM:[{tag:"i"},{tag:"em"},{style:"font-style=italic"},{style:"font-style=normal",clearMark:e=>"em"==e.type.name}],toDOM:()=>Mo},strong:{parseDOM:[{tag:"strong"},{tag:"b",getAttrs:e=>"normal"!=e.style.fontWeight&&null},{style:"font-weight=400",clearMark:e=>"strong"==e.type.name},{style:"font-weight",getAttrs:e=>/^(bold(er)?|[5-9]\d{2,})$/.test(e)&&null}],toDOM:()=>Oo},code:{code:!0,parseDOM:[{tag:"code"}],toDOM:()=>To}},Fo=(new Q({nodes:Ao,marks:No}),"markdown_escaped"),Io="auto_link",Ro="sn-editor",Bo={content:"block+",toDOM:e=>["main",{class:Ro},0],parseDOM:[{tag:"main"}]},zo={content:"inline*",defining:!0,group:"block",toDOM:e=>["h1",{class:Ro},0],parseDOM:[{tag:"h1"}]},Lo={content:"inline*",defining:!0,group:"block",toDOM:e=>["h2",{class:Ro},0],parseDOM:[{tag:"h2"}]},Po={content:"inline*",defining:!0,group:"block",toDOM:e=>["h3",{class:Ro},0],parseDOM:[{tag:"h3"}]},qo={content:"inline*",group:"block",marks:"_",toDOM:e=>["p",{class:Ro},0],parseDOM:[{tag:"p"}]};var $o;!function(e){e[e.DONE=0]="DONE",e[e.EMPTY=1]="EMPTY"}($o||($o={}));const Vo={attrs:{status:{default:$o.EMPTY}},content:"inline*",defining:!0,group:"block",marks:"_",toDOM:e=>["div",{class:"checklist-item"},["input",Object.assign({type:"checkbox"},e.attrs.status===$o.DONE&&{checked:"true"})],["p",0]],parseDOM:[{contentElement:"p",tag:"div.checklist-item",getAttrs:e=>({status:e.querySelector("input").checked?$o.DONE:$o.EMPTY})}]},jo=Object.assign(Object.assign({},Ao.code_block),{attrs:Object.assign(Object.assign({},Ao.code_block.attrs),{[Fo]:{default:!1}}),toDOM(e){const t={[`data-${Fo}`]:e.attrs[Fo]};return e.attrs[Fo]?["pre",t,["div",{class:"info"},"i"],["code",0]]:["pre",t,["code",0]]}}),Uo=new Q({nodes:{doc:Bo,paragraph:qo,checklist_item:Vo,unordered_list:Object.assign(Object.assign({},ko),{content:"list_item+",group:"block",selectable:!1}),ordered_list:Object.assign(Object.assign({},yo),{content:"list_item+",group:"block",selectable:!1}),list_item:Object.assign(Object.assign({},bo),{content:"paragraph+",selectable:!1}),heading1:zo,heading2:Lo,heading3:Po,text:{group:"inline"},code_block:jo},marks:{link:{attrs:{href:{default:""},title:{default:null},[Io]:{default:!1}},inclusive:!1,parseDOM:[{tag:"a[href]",getAttrs:e=>({href:e.getAttribute("href"),title:e.getAttribute("title"),[`data-${Io}`]:e.getAttribute(`data-${Io}`)})}],toDOM(e){let{href:t,title:n}=e.attrs;return["a",{href:t,title:n,[`data-${Io}`]:e.attrs[Io]},0]}},em:Object.assign({},No.em),strong:Object.assign({},No.strong),code:Object.assign(Object.assign({},No.code),{attrs:Object.assign(Object.assign({},No.code.attrs),{[Fo]:{default:!1}})})}});function Wo(e,t){return new ao(new RegExp(`${e}(.*?)${e}$`),((e,n,r,i)=>{const[o,s]=n,{tr:l}=e;if(!s)return;const a=e.doc.resolve(r).marksAcross(e.doc.resolve(i));return l.replaceRangeWith(r,i,Uo.text(s,[...a,t.create()]))}))}function Ho(e,t){return new ao(new RegExp(`^${e}`),((n,r,i,o)=>{const s=n.doc.resolve(o);if(s.depth>1)return;if(r.input!==e)return;const l=[o,i+s.parent.nodeSize-2],a=n.doc.slice(...l),{tr:c}=n;return c.deleteRange(...l),c.replaceRangeWith(i,o,t.createAndFill()),c.setSelection(nt.near(c.doc.resolve(i))),c.insert(c.selection.from,a.content),c}))}const Jo=function({rules:e}){let t=new wt({state:{init:()=>null,apply(e,t){let n=e.getMeta(this);return n||(e.selectionSet||e.docChanged?null:t)}},props:{handleTextInput:(n,r,i,o)=>co(n,r,i,o,e,t),handleDOMEvents:{compositionend:n=>{setTimeout((()=>{let{$cursor:r}=n.state.selection;r&&co(n,r.pos,r.pos,"",e,t)}))}}},isInputRules:!0});return t}({rules:[...uo,ho,po(/^# /,Uo.nodes.heading2),po(/^## /,Uo.nodes.heading3),po(/^```/,Uo.nodes.code_block),Wo("`",Uo.marks.code),Wo("\\*",Uo.marks.strong),Wo("_",Uo.marks.em),Ho("1. ",Uo.nodes.ordered_list),Ho("- ",Uo.nodes.unordered_list)]}),Ko=(e,t)=>!e.selection.empty&&(t&&t(e.tr.deleteSelection().scrollIntoView()),!0);function Go(e,t){let{$cursor:n}=e.selection;return!n||(t?!t.endOfTextblock("backward",e):n.parentOffset>0)?null:n}function Zo(e,t,n=!1){for(let r=e;r;r="start"==t?r.firstChild:r.lastChild){if(r.isTextblock)return!0;if(n&&1!=r.childCount)return!1}return!1}function Yo(e){if(!e.parent.type.spec.isolating)for(let t=e.depth-1;t>=0;t--){if(e.index(t)>0)return e.doc.resolve(e.before(t+1));if(e.node(t).type.spec.isolating)break}return null}function Qo(e,t){let{$cursor:n}=e.selection;return!n||(t?!t.endOfTextblock("forward",e):n.parentOffset<n.parent.content.size)?null:n}function Xo(e){if(!e.parent.type.spec.isolating)for(let t=e.depth-1;t>=0;t--){let n=e.node(t);if(e.index(t)+1<n.childCount)return e.doc.resolve(e.after(t+1));if(n.type.spec.isolating)break}return null}function es(e){for(let t=0;t<e.edgeCount;t++){let{type:n}=e.edge(t);if(n.isTextblock&&!n.hasRequiredAttrs())return n}return null}const ts=(e,t)=>{let{$from:n,$to:r}=e.selection;if(e.selection instanceof at&&e.selection.node.isBlock)return!(!n.parentOffset||!Le(e.doc,n.pos)||(t&&t(e.tr.split(n.pos).scrollIntoView()),0));if(!n.depth)return!1;let i,o,s=[],l=!1,a=!1;for(let e=n.depth;;e--){if(n.node(e).isBlock){l=n.end(e)==n.pos+(n.depth-e),a=n.start(e)==n.pos-(n.depth-e),o=es(n.node(e-1).contentMatchAt(n.indexAfter(e-1)));let t=ns&&ns(r.parent,l,n);s.unshift(t||(l&&o?{type:o}:null)),i=e;break}if(1==e)return!1;s.unshift(null)}let c=e.tr;(e.selection instanceof st||e.selection instanceof ht)&&c.deleteSelection();let h=c.mapping.map(n.pos),u=Le(c.doc,h,s.length,s);if(u||(s[0]=o?{type:o}:null,u=Le(c.doc,h,s.length,s)),!u)return!1;if(c.split(h,s.length,s),!l&&a&&n.node(i).type!=o){let e=c.mapping.map(n.before(i)),t=c.doc.resolve(e);o&&n.node(i-1).canReplaceWith(t.index(),t.index()+1,o)&&c.setNodeMarkup(c.mapping.map(n.before(i)),o)}return t&&t(c.scrollIntoView()),!0};var ns;function rs(e,t,n,r){let i,o,s=t.nodeBefore,l=t.nodeAfter,a=s.type.spec.isolating||l.type.spec.isolating;if(!a&&function(e,t,n){let r=t.nodeBefore,i=t.nodeAfter,o=t.index();return!(!(r&&i&&r.type.compatibleContent(i.type))||(!r.content.size&&t.parent.canReplace(o-1,o)?(n&&n(e.tr.delete(t.pos-r.nodeSize,t.pos).scrollIntoView()),0):!t.parent.canReplace(o,o+1)||!i.isTextblock&&!Pe(e.doc,t.pos)||(n&&n(e.tr.join(t.pos).scrollIntoView()),0)))}(e,t,n))return!0;let h=!a&&t.parent.canReplace(t.index(),t.index()+1);if(h&&(i=(o=s.contentMatchAt(s.childCount)).findWrapping(l.type))&&o.matchType(i[0]||l.type).validEnd){if(n){let r=t.pos+l.nodeSize,o=c.empty;for(let e=i.length-1;e>=0;e--)o=c.from(i[e].create(null,o));o=c.from(s.copy(o));let a=e.tr.step(new Oe(t.pos-1,r,t.pos,r,new m(o,1,0),i.length,!0)),h=a.doc.resolve(r+2*i.length);h.nodeAfter&&h.nodeAfter.type==s.type&&Pe(a.doc,h.pos)&&a.join(h.pos),n(a.scrollIntoView())}return!0}let u=l.type.spec.isolating||r>0&&a?null:nt.findFrom(t,1),d=u&&u.$from.blockRange(u.$to),p=d&&Ie(d);if(null!=p&&p>=t.depth)return n&&n(e.tr.lift(d,p).scrollIntoView()),!0;if(h&&Zo(l,"start",!0)&&Zo(s,"end")){let r=s,i=[];for(;i.push(r),!r.isTextblock;)r=r.lastChild;let o=l,a=1;for(;!o.isTextblock;o=o.firstChild)a++;if(r.canReplace(r.childCount,r.childCount,o.content)){if(n){let r=c.empty;for(let e=i.length-1;e>=0;e--)r=c.from(i[e].copy(r));n(e.tr.step(new Oe(t.pos-i.length,t.pos+l.nodeSize,t.pos+a,t.pos+l.nodeSize-a,new m(r,i.length,0),0,!0)).scrollIntoView())}return!0}}return!1}function is(e){return function(t,n){let r=t.selection,i=e<0?r.$from:r.$to,o=i.depth;for(;i.node(o).isInline;){if(!o)return!1;o--}return!!i.node(o).isTextblock&&(n&&n(t.tr.setSelection(st.create(t.doc,e<0?i.start(o):i.end(o)))),!0)}}const ss=is(-1),ls=is(1);function as(e,t=null,n){let r=!1!==(n&&n.removeWhenPresent),i=!1!==(n&&n.enterInlineAtoms),o=!(n&&n.includeWhitespace);return function(n,s){let{empty:l,$cursor:a,ranges:c}=n.selection;if(l&&!a||!function(e,t,n,r){for(let i=0;i<t.length;i++){let{$from:o,$to:s}=t[i],l=0==o.depth&&e.inlineContent&&e.type.allowsMarkType(n);if(e.nodesBetween(o.pos,s.pos,((e,t)=>{if(l||!r&&e.isAtom&&e.isInline&&t>=o.pos&&t+e.nodeSize<=s.pos)return!1;l=e.inlineContent&&e.type.allowsMarkType(n)})),l)return!0}return!1}(n.doc,c,e,i))return!1;if(s)if(a)e.isInSet(n.storedMarks||a.marks())?s(n.tr.removeStoredMark(e)):s(n.tr.addStoredMark(e.create(t)));else{let l,a=n.tr;i||(c=function(e){let t=[];for(let n=0;n<e.length;n++){let{$from:r,$to:i}=e[n];r.doc.nodesBetween(r.pos,i.pos,((e,n)=>{if(e.isAtom&&e.content.size&&e.isInline&&n>=r.pos&&n+e.nodeSize<=i.pos)return n+1>r.pos&&t.push(new rt(r,r.doc.resolve(n+1))),r=r.doc.resolve(n+1+e.content.size),!1})),r.pos<i.pos&&t.push(new rt(r,i))}return t}(c)),l=r?!c.some((t=>n.doc.rangeHasMark(t.$from.pos,t.$to.pos,e))):!c.every((t=>{let n=!1;return a.doc.nodesBetween(t.$from.pos,t.$to.pos,((r,i,o)=>{if(n)return!1;n=!e.isInSet(r.marks)&&!!o&&o.type.allowsMarkType(e)&&!(r.isText&&/^\s*$/.test(r.textBetween(Math.max(0,t.$from.pos-i),Math.min(r.nodeSize,t.$to.pos-i))))})),!n}));for(let n=0;n<c.length;n++){let{$from:r,$to:i}=c[n];if(l){let n=r.pos,s=i.pos,l=r.nodeAfter,c=i.nodeBefore,h=o&&l&&l.isText?/^\s*/.exec(l.text)[0].length:0,u=o&&c&&c.isText?/\s*$/.exec(c.text)[0].length:0;n+h<s&&(n+=h,s-=u),a.addMark(n,s,e.create(t))}else a.removeMark(r.pos,i.pos,e)}s(a.scrollIntoView())}return!0}}function cs(...e){return function(t,n,r){for(let i=0;i<e.length;i++)if(e[i](t,n,r))return!0;return!1}}let hs=cs(Ko,((e,t,n)=>{let r=Go(e,n);if(!r)return!1;let i=Yo(r);if(!i){let n=r.blockRange(),i=n&&Ie(n);return null!=i&&(t&&t(e.tr.lift(n,i).scrollIntoView()),!0)}let o=i.nodeBefore;if(rs(e,i,t,-1))return!0;if(0==r.parent.content.size&&(Zo(o,"end")||at.isSelectable(o)))for(let n=r.depth;;n--){let s=$e(e.doc,r.before(n),r.after(n),m.empty);if(s&&s.slice.size<s.to-s.from){if(t){let n=e.tr.step(s);n.setSelection(Zo(o,"end")?nt.findFrom(n.doc.resolve(n.mapping.map(i.pos,-1)),-1):at.create(n.doc,i.pos-o.nodeSize)),t(n.scrollIntoView())}return!0}if(1==n||r.node(n-1).childCount>1)break}return!(!o.isAtom||i.depth!=r.depth-1)&&(t&&t(e.tr.delete(i.pos-o.nodeSize,i.pos).scrollIntoView()),!0)}),((e,t,n)=>{let{$head:r,empty:i}=e.selection,o=r;if(!i)return!1;if(r.parent.isTextblock){if(n?!n.endOfTextblock("backward",e):r.parentOffset>0)return!1;o=Yo(r)}let s=o&&o.nodeBefore;return!(!s||!at.isSelectable(s))&&(t&&t(e.tr.setSelection(at.create(e.doc,o.pos-s.nodeSize)).scrollIntoView()),!0)})),us=cs(Ko,((e,t,n)=>{let r=Qo(e,n);if(!r)return!1;let i=Xo(r);if(!i)return!1;let o=i.nodeAfter;if(rs(e,i,t,1))return!0;if(0==r.parent.content.size&&(Zo(o,"start")||at.isSelectable(o))){let n=$e(e.doc,r.before(),r.after(),m.empty);if(n&&n.slice.size<n.to-n.from){if(t){let r=e.tr.step(n);r.setSelection(Zo(o,"start")?nt.findFrom(r.doc.resolve(r.mapping.map(i.pos)),1):at.create(r.doc,r.mapping.map(i.pos))),t(r.scrollIntoView())}return!0}}return!(!o.isAtom||i.depth!=r.depth-1)&&(t&&t(e.tr.delete(i.pos,i.pos+o.nodeSize).scrollIntoView()),!0)}),((e,t,n)=>{let{$head:r,empty:i}=e.selection,o=r;if(!i)return!1;if(r.parent.isTextblock){if(n?!n.endOfTextblock("forward",e):r.parentOffset<r.parent.content.size)return!1;o=Xo(r)}let s=o&&o.nodeAfter;return!(!s||!at.isSelectable(s))&&(t&&t(e.tr.setSelection(at.create(e.doc,o.pos)).scrollIntoView()),!0)}));const ds={Enter:cs(((e,t)=>{let{$head:n,$anchor:r}=e.selection;return!(!n.parent.type.spec.code||!n.sameParent(r))&&(t&&t(e.tr.insertText("\n").scrollIntoView()),!0)}),((e,t)=>{let n=e.selection,{$from:r,$to:i}=n;if(n instanceof ht||r.parent.inlineContent||i.parent.inlineContent)return!1;let o=es(i.parent.contentMatchAt(i.indexAfter()));if(!o||!o.isTextblock)return!1;if(t){let n=(!r.parentOffset&&i.index()<i.parent.childCount?r:i).pos,s=e.tr.insert(n,o.createAndFill());s.setSelection(st.create(s.doc,n+1)),t(s.scrollIntoView())}return!0}),((e,t)=>{let{$cursor:n}=e.selection;if(!n||n.parent.content.size)return!1;if(n.depth>1&&n.after()!=n.end(-1)){let r=n.before();if(Le(e.doc,r))return t&&t(e.tr.split(r).scrollIntoView()),!0}let r=n.blockRange(),i=r&&Ie(r);return null!=i&&(t&&t(e.tr.lift(r,i).scrollIntoView()),!0)}),ts),"Mod-Enter":(e,t)=>{let{$head:n,$anchor:r}=e.selection;if(!n.parent.type.spec.code||!n.sameParent(r))return!1;let i=n.node(-1),o=n.indexAfter(-1),s=es(i.contentMatchAt(o));if(!s||!i.canReplaceWith(o,o,s))return!1;if(t){let r=n.after(),i=e.tr.replaceWith(r,r,s.createAndFill());i.setSelection(nt.near(i.doc.resolve(r),1)),t(i.scrollIntoView())}return!0},Backspace:hs,"Mod-Backspace":hs,"Shift-Backspace":hs,Delete:us,"Mod-Delete":us,"Mod-a":(e,t)=>(t&&t(e.tr.setSelection(new ht(e.doc))),!0)},ps={"Ctrl-h":ds.Backspace,"Alt-Backspace":ds["Mod-Backspace"],"Ctrl-d":ds.Delete,"Ctrl-Alt-Backspace":ds["Mod-Delete"],"Alt-Delete":ds["Mod-Delete"],"Alt-d":ds["Mod-Delete"],"Ctrl-a":ss,"Ctrl-e":ls};for(let e in ds)ps[e]=ds[e];const fs=("undefined"!=typeof navigator?/Mac|iP(hone|[oa]d)/.test(navigator.platform):!("undefined"==typeof os||!os.platform)&&"darwin"==os.platform())?ps:ds,ms="data-format";class gs{constructor(e,{onConfirm:t,onClear:n,text:r,url:i}){this.showCls="active",this.destroy=()=>{this.confirmBtn.removeEventListener("click",this.handleConfirm),this.cancelBtn.removeEventListener("click",this.handleCancel),this.clearBtn.removeEventListener("click",this.handleClear),document.removeEventListener("keydown",this.handleGlobalKeydown),this.el.classList.remove(this.showCls)},this.handleConfirm=()=>{this.onConfirm({text:this.textInput.value,url:this.urlInput.value}),this.destroy()},this.handleClear=()=>{this.onClear(),this.destroy()},this.handleCancel=()=>{this.destroy()},this.handleGlobalKeydown=e=>{const t=13===e.which;if(document.activeElement===this.textInput||document.activeElement===this.urlInput&&t)return void this.handleConfirm();e.which;27===e.which&&this.handleCancel()},this.handleGlobalClick=e=>{!1===this.frameEl.contains(e.target)&&this.destroy()},this.el=e,this.textInput.value=this.text=r,this.urlInput.value=this.url=i,this.onConfirm=t,this.onClear=n,this.frameEl=e.querySelector("#frame"),n?this.clearBtn.classList.add(this.showCls):this.clearBtn.classList.remove(this.showCls),this.el.classList.add(this.showCls),this.confirmBtn.addEventListener("click",this.handleConfirm),this.cancelBtn.addEventListener("click",this.handleCancel),this.clearBtn.addEventListener("click",this.handleClear),document.addEventListener("keydown",this.handleGlobalKeydown),document.addEventListener("click",this.handleGlobalClick),this.urlInput.focus()}get textInput(){return this.el.querySelector("input#text")}get urlInput(){return this.el.querySelector("input#url")}get confirmBtn(){return this.el.querySelector("button#confirm")}get cancelBtn(){return this.el.querySelector("button#cancel")}get clearBtn(){return this.el.querySelector("button#clear")}}class ys extends wt{constructor(e,t){super({view:n=>(this.view=n,this.modalEl=t,this.toolbarEl=e,e.addEventListener("click",this.handleToolbarClick),{destroy:()=>{var t;e.removeEventListener("click",this.handleToolbarClick),this.unhighlightSelectedAttrs(),null===(t=this.modal)||void 0===t||t.destroy()},update:(e,t)=>{this.unhighlightSelectedAttrs(),this.highlightSelectedAttrs(e.state)}}),props:{handleKeyDown:(e,t)=>{const n=84===t.which,r=t.ctrlKey;if(n&&r)return this.toggleChecklistItem(),!0;const i=55===t.which,o=t.metaKey||t.ctrlKey;if(i&&o)return this.toggleList(Uo.nodes.unordered_list,Uo.nodes.list_item),!0;if(85===t.which&&r)return this.toggleList(Uo.nodes.unordered_list,Uo.nodes.list_item),!0;if(79===t.which&&r)return this.toggleList(Uo.nodes.ordered_list,Uo.nodes.list_item),!0;if(187===t.which&&r)return this.promoteHeading(this.view.state,this.view.dispatch),!0;if(74===t.which&&r)return this.swapTextBlock(Uo.nodes.paragraph),!0;const s=32===t.which;if(r&&s)return function(e,t){const{$from:n,$to:r}=e.selection,i=n.blockRange(r);let o=!1;for(let e=i.startIndex,t=i.parent.child(e);e<i.endIndex;e+=1){if(t.type!==Uo.nodes.checklist_item)return!1;if(t.attrs.status===$o.DONE){o=!0;break}}if(!t)return!0;const{tr:s}=e;for(let e=i.startIndex,t=i.parent.child(e),n=i.start;e<i.endIndex;e+=1)s.setNodeMarkup(n,void 0,{status:o?$o.EMPTY:$o.DONE}),n+=t.nodeSize;return t(s),!0}(this.view.state,this.view.dispatch);const l=90===t.which;if(o&&l)return so(this.view.state,this.view.dispatch);const a=89===t.which;if(o&&a)return lo(this.view.state,this.view.dispatch);const c=73===t.which;if(o&&c)return this.toggleMark(Uo.marks.em),!0;const h=66===t.which;if(o&&h)return this.toggleMark(Uo.marks.strong),!0;const u=222===t.which;if(o&&u)return this.toggleMark(Uo.marks.code),!0;const d=75===t.which;return!(!o||!d)&&(this.activateLinkModal(this.view.state,this.view.dispatch),!0)}}}),this.swapTextBlock=e=>{let{dispatch:t,state:n}=this.view,{tr:r}=n;e!==Uo.nodes.unordered_list&&e!==Uo.nodes.ordered_list&&xo(Uo.nodes.list_item)(n,t),({dispatch:t,state:n}=this.view),({tr:r}=n);const{selection:{from:i,to:o}}=n;r.setBlockType(i,o,e),t(r),this.view.focus()},this.promoteHeading=(e,t)=>{const{selection:n}=e;if(!n.empty)return;const{$from:{parent:{type:r}}}=n;let i;i=r===Uo.nodes.heading2?Uo.nodes.heading1:r===Uo.nodes.heading3?Uo.nodes.heading2:r===Uo.nodes.heading1?Uo.nodes.paragraph:Uo.nodes.heading3,this.swapTextBlock(i)},this.toggleList=(e,t)=>{const{state:{selection:{$from:n,$to:r},tr:i}}=this.view;if(n.blockRange(r,(t=>t.type===e))){const{dispatch:e,state:n}=this.view;xo(t)(n,e)}else{const t=n.blockRange(r);for(let n=t.startIndex;n<t.endIndex;n+=1)if(t.parent.child(n).type===e)return;this.swapTextBlock(Uo.nodes.paragraph);const{dispatch:i,state:o}=this.view;vo(e)(o,i)}},this.toggleChecklistItem=()=>{const{dispatch:e,state:t}=this.view,{doc:n,tr:r}=t,{$from:i,$to:o}=t.selection,s=i.blockRange(o);for(let e=s.startIndex;e<s.endIndex;e+=1)if(s.parent.child(e).type===Uo.nodes.checklist_item)return void this.swapTextBlock(Uo.nodes.paragraph);this.swapTextBlock(Uo.nodes.checklist_item)},this.activateLinkModal=(e,t)=>{const{doc:n,selection:r}=e,{$from:i,$to:o}=r,s=i.marks().find((e=>e.type===Uo.marks.link&&!e.attrs[Io])),l=o.marks().find((e=>e.type===Uo.marks.link&&!e.attrs[Io])),a=s&&l;if(r.empty&&!a)return!1;if(s!==l)return!1;if(!t)return!0;const c=s;let h,u,d,p;if(c){const r=i.parent.nodeAt(i.parentOffset-i.textOffset);u=i.pos-i.textOffset,h=u+r.nodeSize,d=r.text,p=c.attrs.href;const o=new st(n.resolve(u),n.resolve(h));t(e.tr.setSelection(o))}else h=o.pos,u=i.pos,d=e.doc.textBetween(i.pos,o.pos),p="";const f=c&&(()=>this.view.dispatch(this.view.state.tr.step(new _e(u,h,c))));return this.modal=new gs(this.modalEl,{onClear:f,onConfirm:({text:e,url:t})=>{const n=Uo.marks.link.create({href:t}),r=Uo.text(e,[n]);this.view.dispatch(this.view.state.tr.replaceSelectionWith(r,!1))},text:d,url:p}),!0},this.toggleMark=e=>{as(e)(this.view.state,this.view.dispatch),this.view.focus()},this.unhighlightSelectedAttrs=()=>{this.toolbarEl.querySelectorAll(".selected").forEach((e=>{e.classList.remove("selected")}))},this.highlightSelectedAttrs=e=>{const t=this.getSelectedFormatAttrs(e);t&&t.forEach((e=>{const t=this.toolbarEl.querySelector(`[data-format=${e}]`);t&&t.classList.add("selected")}))},this.getSelectedFormatAndMarks=e=>{if(!e.selection)return;const t=[],{$from:n,$to:r,content:i}=e.selection,o=n.blockRange(r,(e=>e.type!==Uo.nodes.list_item));let s=null;for(let e=o.startIndex;e<o.endIndex;e+=1){const t=o.parent.child(e),n=t.type===Uo.nodes.list_item?o.parent.type:t.type;if(null!==s){if(s!==n){s=null;break}}else s=n}t.push(s);const l=n.marksAcross(r);return l&&t.push(...l.map((e=>e.type))),t},this.getSelectedFormatAttrs=e=>{const[t,...n]=this.getSelectedFormatAndMarks(e),r=[];switch(t){case Uo.nodes.heading1:case Uo.nodes.heading2:r.push("heading");break;case Uo.nodes.paragraph:r.push("paragraph");break;case Uo.nodes.unordered_list:r.push("unordered_list");break;case Uo.nodes.ordered_list:r.push("ordered_list");break;case Uo.nodes.checklist_item:r.push("checklist_item");break;default:r.push(null)}return n.forEach((e=>{switch(e){case Uo.marks.link:case Uo.marks.inline_link:r.push("link");break;case Uo.marks.em:r.push("em");break;case Uo.marks.strong:r.push("strong");break;case Uo.marks.code:r.push("code")}})),r},this.handleToolbarClick=e=>{const t=e.target.closest(`[${ms}]`);t&&(e.stopPropagation(),this.applyFormat(t.getAttribute(ms)))},this.applyFormat=e=>{switch(e){case"undo":so(this.view.state,this.view.dispatch);break;case"redo":lo(this.view.state,this.view.dispatch);break;case"paragraph":this.swapTextBlock(Uo.nodes.paragraph);break;case"code_block":this.swapTextBlock(Uo.nodes.code_block);break;case"heading":this.promoteHeading(this.view.state,this.view.dispatch);break;case"unordered_list":this.toggleList(Uo.nodes.unordered_list,Uo.nodes.list_item);break;case"ordered_list":this.toggleList(Uo.nodes.ordered_list,Uo.nodes.list_item);break;case"checklist_item":this.toggleChecklistItem();break;case"strong":case"em":case"code":this.toggleMark(Uo.marks[e]);break;case"link":this.activateLinkModal(this.view.state,this.view.dispatch)}}}}const ks="show",bs=new RegExp("^https?://"),vs=new RegExp("^mailto:");class ws extends wt{static nodeToAnchorHref(e){return bs.test(e)||vs.test(e)?e:`http://${e}`}constructor(e){super({view:e=>(this.view=e,{destroy:()=>{this.hide()},update:(e,t)=>{this.checkSelection()}})}),this.checkSelection=()=>{const e=this.view.state.selection;if(!(e instanceof st))return;const{$cursor:t}=e,n=Boolean(t&&t.nodeBefore&&t.nodeAfter&&t.nodeBefore.marks.some((e=>e.type===Uo.marks.link))&&t.nodeAfter.marks.some((e=>e.type===Uo.marks.link)));if(!1===n)return void this.hide();const r=t.nodeBefore.marks.find((e=>e.type===Uo.marks.link));this.show(t,r.attrs.href,r.attrs[Io])},this.hide=()=>{this.tooltipEl.classList.remove(ks)},this.show=(e,t,n)=>{this.linkTextEl.innerText=t,this.anchorEl.href=ws.nodeToAnchorHref(t),this.tooltipEl.classList.toggle("yes-auto-link",n),this.tooltipEl.classList.add(ks);const{left:r,top:i}=this.view.coordsAtPos(e.pos),o=this.tooltipEl.offsetWidth,s=document.documentElement.clientWidth;this.tooltipEl.style.left=r+o>s?`${Math.max(5,r-o)}px`:`${Math.max(5,r)}px`;const l=this.view.root.body;this.tooltipEl.style.top=`${i-36+l.scrollTop}px`},this.tooltipEl=e}get linkTextEl(){return this.tooltipEl.querySelector("div.text")}get anchorEl(){return this.tooltipEl.querySelector("a.link-anchor")}}class xs extends wt{constructor(e){super({view:t=>(this.view=t,this.el=e,this.el.addEventListener("click",this.handleClick),{destroy:()=>{this.el.removeEventListener("click",this.handleClick)}})}),this.handleClick=()=>{const{state:e}=this.view,{doc:t,tr:n}=e,r=t.nodeSize-2,i=e.doc.lastChild.type;(i===Uo.nodes.code_block||i.isLeaf)&&n.insert(r,Uo.nodes.paragraph.createAndFill()),n.setSelection(nt.atEnd(n.doc)),this.view.dispatch(n),this.view.focus()}}}const Cs={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let Ds;const Ss=new Uint8Array(16);const _s=[];for(let e=0;e<256;++e)_s.push((e+256).toString(16).slice(1));function Es(e,t=0){return(_s[e[t+0]]+_s[e[t+1]]+_s[e[t+2]]+_s[e[t+3]]+"-"+_s[e[t+4]]+_s[e[t+5]]+"-"+_s[e[t+6]]+_s[e[t+7]]+"-"+_s[e[t+8]]+_s[e[t+9]]+"-"+_s[e[t+10]]+_s[e[t+11]]+_s[e[t+12]]+_s[e[t+13]]+_s[e[t+14]]+_s[e[t+15]]).toLowerCase()}const As=function(e,t,n){if(Cs.randomUUID&&!t&&!e)return Cs.randomUUID();const r=(e=e||{}).random??e.rng?.()??function(){if(!Ds){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");Ds=crypto.getRandomValues.bind(crypto)}return Ds(Ss)}();if(r.length<16)throw new Error("Random bytes length must be >= 16");if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){if((n=n||0)<0||n+16>t.length)throw new RangeError(`UUID byte range ${n}:${n+15} is out of buffer bounds`);for(let e=0;e<16;++e)t[n+e]=r[e];return t}return Es(r)};var Ms=n(92),Os=n.n(Ms);const Ts="com.dylanonelson.sn-editor";function Ns(e){return e&&e.content&&e.content[Ts]||null}function Fs(e){return e?e.uuid:null}class Is{constructor(){let e;this._item=null,this.shouldCallListeners=(e,t)=>!e.isMetadataUpdate&&(Fs(e)!==Fs(t)||function(e){const t=Ns(e);return t&&t.lastSavedBy?t.lastSavedBy:null}(e)!==this._id),this._id=As(),this._listeners=[],this._ready=new Promise((t=>{e=t})),this.componentManager=new(Os())({targetWindow:window,options:{debug:!0,acceptsThemes:!0},onReady:()=>{this.componentManager.streamContextItem((t=>{console.debug("streamContextItem update:",t);const n=this.shouldCallListeners(t,this._item);this._item=t,n&&this._listeners.forEach((e=>{e(t)})),e()}))}})}get latestDoc(){return function(e){const t=Ns(e);return t&&t.doc?t.doc:null}(this._item)}get latestText(){return(e=this._item)&&e.content&&e.content.text?e.content.text:null;var e}onUpdate(e){return this._listeners.push(e),()=>{this._listeners=this._listeners.filter((t=>t!==e))}}ready(){return this._ready}saveNote(e,t,n){const r=Object.assign(Object.assign({},this._item),{content:Object.assign(Object.assign({},this._item.content),{[Ts]:{doc:e,lastSavedBy:this._id},text:t,preview_plain:n})});this.componentManager.saveItemWithPresave(r,(()=>{}),(()=>{}))}}Is.SN_ITEM_SAVE_KEY="com.dylanonelson.sn-editor",Is.itemSelectors={};const Rs=new Is;var Bs=n(415),zs=n.n(Bs),Ls=n(115),Ps=n.n(Ls);const qs="is-checked",$s={checklist_item(e,t,n){const r=document.createElement("div");r.classList.add("checklist-item");const i=document.createElement("div");i.classList.add("checkbox"),e.attrs.status===$o.DONE?(i.classList.add(qs),i.innerHTML=zs()):i.innerHTML=Ps();const o=document.createElement("div");o.classList.add("click-target"),o.contentEditable="false",o.tabIndex=0;const s=document.createElement("p");o.appendChild(i),r.appendChild(o),r.appendChild(s);const l=e=>{const{relatedTarget:n,target:r}=e;if(!1===o.contains(n))return;r===t.dom&&t.focus()},a=e=>{if(!1===o.contains(e.target))return;const r=i.classList.contains(qs),{tr:s}=t.state,l=n();s.setNodeMarkup(l,void 0,{status:r?$o.EMPTY:$o.DONE}),t.dispatch(s)};return t.dom.addEventListener("blur",l),t.dom.addEventListener("click",a),{dom:r,contentDOM:s,destroy(){t.dom.removeEventListener("blur",l),t.dom.removeEventListener("click",a)}}}};for(var Vs={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},js={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"'},Us="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),Ws="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),Hs=0;Hs<10;Hs++)Vs[48+Hs]=Vs[96+Hs]=String(Hs);for(Hs=1;Hs<=24;Hs++)Vs[Hs+111]="F"+Hs;for(Hs=65;Hs<=90;Hs++)Vs[Hs]=String.fromCharCode(Hs+32),js[Hs]=String.fromCharCode(Hs);for(var Js in Vs)js.hasOwnProperty(Js)||(js[Js]=Vs[Js]);const Ks="undefined"!=typeof navigator&&/Mac|iP(hone|[oa]d)/.test(navigator.platform),Gs="undefined"!=typeof navigator&&/Win/.test(navigator.platform);function Zs(e){let t,n,r,i,o=e.split(/-(?!$)/),s=o[o.length-1];"Space"==s&&(s=" ");for(let e=0;e<o.length-1;e++){let s=o[e];if(/^(cmd|meta|m)$/i.test(s))i=!0;else if(/^a(lt)?$/i.test(s))t=!0;else if(/^(c|ctrl|control)$/i.test(s))n=!0;else if(/^s(hift)?$/i.test(s))r=!0;else{if(!/^mod$/i.test(s))throw new Error("Unrecognized modifier name: "+s);Ks?i=!0:n=!0}}return t&&(s="Alt-"+s),n&&(s="Ctrl-"+s),i&&(s="Meta-"+s),r&&(s="Shift-"+s),s}function Ys(e,t,n=!0){return t.altKey&&(e="Alt-"+e),t.ctrlKey&&(e="Ctrl-"+e),t.metaKey&&(e="Meta-"+e),n&&t.shiftKey&&(e="Shift-"+e),e}function Qs(e){return new wt({props:{handleKeyDown:Xs(e)}})}function Xs(e){let t=function(e){let t=Object.create(null);for(let n in e)t[Zs(n)]=e[n];return t}(e);return function(e,n){let r,i=function(e){var t=!(Us&&e.metaKey&&e.shiftKey&&!e.ctrlKey&&!e.altKey||Ws&&e.shiftKey&&e.key&&1==e.key.length||"Unidentified"==e.key)&&e.key||(e.shiftKey?js:Vs)[e.keyCode]||e.key||"Unidentified";return"Esc"==t&&(t="Escape"),"Del"==t&&(t="Delete"),"Left"==t&&(t="ArrowLeft"),"Up"==t&&(t="ArrowUp"),"Right"==t&&(t="ArrowRight"),"Down"==t&&(t="ArrowDown"),t}(n),o=t[Ys(i,n)];if(o&&o(e.state,e.dispatch,e))return!0;if(1==i.length&&" "!=i){if(n.shiftKey){let r=t[Ys(i,n,!1)];if(r&&r(e.state,e.dispatch,e))return!0}if((n.altKey||n.metaKey||n.ctrlKey)&&!(Gs&&n.ctrlKey&&n.altKey)&&(r=Vs[n.keyCode])&&r!=i){let i=t[Ys(r,n)];if(i&&i(e.state,e.dispatch,e))return!0}}return!1}}function el(e,t){if(2===t.parent.nodeSize){const{pos:n}=t;return el(e.deleteRange(n-1,n+1),e.doc.resolve(e.mapping.map(n)))}return e}const tl=[Qs({Backspace:(e,t,n)=>!1!==function(e){const{$cursor:t}=e.selection;return Boolean(t&&t.parent.type===Uo.nodes.checklist_item)}(e)&&(!1!==n.endOfTextblock("left")&&void(0===e.selection.$cursor.index(0)&&function(e,t=null){return function(n,r){let i=!1;for(let r=0;r<n.selection.ranges.length&&!i;r++){let{$from:{pos:o},$to:{pos:s}}=n.selection.ranges[r];n.doc.nodesBetween(o,s,((r,o)=>{if(i)return!1;if(r.isTextblock&&!r.hasMarkup(e,t))if(r.type==e)i=!0;else{let t=n.doc.resolve(o),r=t.index();i=t.parent.canReplaceWith(r,r+1,e)}}))}if(!i)return!1;if(r){let i=n.tr;for(let r=0;r<n.selection.ranges.length;r++){let{$from:{pos:o},$to:{pos:s}}=n.selection.ranges[r];i.setBlockType(o,s,e,t)}r(i.scrollIntoView())}return!0}}(Uo.nodes.paragraph)(e,t))),Enter(e,t){const{selection:n,tr:r}=e,{$from:i,from:o}=n;if(i.parent.type!==Uo.nodes.checklist_item)return!1;r.deleteSelection();const s=r.doc.resolve(o);if(2===s.parent.nodeSize){const e=s.pos;return r.replaceWith(e-1,e+1,Uo.nodes.paragraph.createAndFill()),r.setSelection(nt.near(r.doc.resolve(e-1))),t(r),!0}return r.split(o,void 0,[{type:Uo.nodes.checklist_item}]),t(r),!0}}),Qs({Backspace(e,t){if(!1===function(e){const{$cursor:t}=e.selection;return Boolean(t&&2===t.parent.nodeSize)}(e))return!1;const n=e.selection;if(!(n instanceof st))return!1;const{$cursor:r}=n,i=nt.findFrom(e.doc.resolve(r.before()),-1,!0);if(!i)return!1;if(i.$cursor.node(-1).type!==Uo.nodes.list_item)return;let o=e.tr.setSelection(i);return o=el(o,r),t(o),!0},Enter:wo(Uo.nodes.list_item)}),Qs(fs)],nl={};function rl(e,t){"string"!=typeof t&&(t=rl.defaultChars);const n=function(e){let t=nl[e];if(t)return t;t=nl[e]=[];for(let e=0;e<128;e++){const n=String.fromCharCode(e);t.push(n)}for(let n=0;n<e.length;n++){const r=e.charCodeAt(n);t[r]="%"+("0"+r.toString(16).toUpperCase()).slice(-2)}return t}(t);return e.replace(/(%[a-f0-9]{2})+/gi,(function(e){let t="";for(let r=0,i=e.length;r<i;r+=3){const o=parseInt(e.slice(r+1,r+3),16);if(o<128)t+=n[o];else{if(192==(224&o)&&r+3<i){const n=parseInt(e.slice(r+4,r+6),16);if(128==(192&n)){const e=o<<6&1984|63&n;t+=e<128?"��":String.fromCharCode(e),r+=3;continue}}if(224==(240&o)&&r+6<i){const n=parseInt(e.slice(r+4,r+6),16),i=parseInt(e.slice(r+7,r+9),16);if(128==(192&n)&&128==(192&i)){const e=o<<12&61440|n<<6&4032|63&i;t+=e<2048||e>=55296&&e<=57343?"���":String.fromCharCode(e),r+=6;continue}}if(240==(248&o)&&r+9<i){const n=parseInt(e.slice(r+4,r+6),16),i=parseInt(e.slice(r+7,r+9),16),s=parseInt(e.slice(r+10,r+12),16);if(128==(192&n)&&128==(192&i)&&128==(192&s)){let e=o<<18&1835008|n<<12&258048|i<<6&4032|63&s;e<65536||e>1114111?t+="����":(e-=65536,t+=String.fromCharCode(55296+(e>>10),56320+(1023&e))),r+=9;continue}}t+="�"}}return t}))}rl.defaultChars=";/?:@&=+$,#",rl.componentChars="";const il=rl,ol={};function sl(e,t,n){"string"!=typeof t&&(n=t,t=sl.defaultChars),void 0===n&&(n=!0);const r=function(e){let t=ol[e];if(t)return t;t=ol[e]=[];for(let e=0;e<128;e++){const n=String.fromCharCode(e);/^[0-9a-z]$/i.test(n)?t.push(n):t.push("%"+("0"+e.toString(16).toUpperCase()).slice(-2))}for(let n=0;n<e.length;n++)t[e.charCodeAt(n)]=e[n];return t}(t);let i="";for(let t=0,o=e.length;t<o;t++){const s=e.charCodeAt(t);if(n&&37===s&&t+2<o&&/^[0-9a-f]{2}$/i.test(e.slice(t+1,t+3)))i+=e.slice(t,t+3),t+=2;else if(s<128)i+=r[s];else if(s>=55296&&s<=57343){if(s>=55296&&s<=56319&&t+1<o){const n=e.charCodeAt(t+1);if(n>=56320&&n<=57343){i+=encodeURIComponent(e[t]+e[t+1]),t++;continue}}i+="%EF%BF%BD"}else i+=encodeURIComponent(e[t])}return i}sl.defaultChars=";/?:@&=+$,-_.!~*'()#",sl.componentChars="-_.!~*'()";const ll=sl;function al(e){let t="";return t+=e.protocol||"",t+=e.slashes?"//":"",t+=e.auth?e.auth+"@":"",e.hostname&&-1!==e.hostname.indexOf(":")?t+="["+e.hostname+"]":t+=e.hostname||"",t+=e.port?":"+e.port:"",t+=e.pathname||"",t+=e.search||"",t+=e.hash||"",t}function cl(){this.protocol=null,this.slashes=null,this.auth=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.pathname=null}const hl=/^([a-z0-9.+-]+:)/i,ul=/:[0-9]*$/,dl=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,pl=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),fl=["'"].concat(pl),ml=["%","/","?",";","#"].concat(fl),gl=["/","?","#"],yl=/^[+a-z0-9A-Z_-]{0,63}$/,kl=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,bl={javascript:!0,"javascript:":!0},vl={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};cl.prototype.parse=function(e,t){let n,r,i,o=e;if(o=o.trim(),!t&&1===e.split("#").length){const e=dl.exec(o);if(e)return this.pathname=e[1],e[2]&&(this.search=e[2]),this}let s=hl.exec(o);if(s&&(s=s[0],n=s.toLowerCase(),this.protocol=s,o=o.substr(s.length)),(t||s||o.match(/^\/\/[^@\/]+@[^@\/]+/))&&(i="//"===o.substr(0,2),!i||s&&bl[s]||(o=o.substr(2),this.slashes=!0)),!bl[s]&&(i||s&&!vl[s])){let e,t,n=-1;for(let e=0;e<gl.length;e++)r=o.indexOf(gl[e]),-1!==r&&(-1===n||r<n)&&(n=r);t=-1===n?o.lastIndexOf("@"):o.lastIndexOf("@",n),-1!==t&&(e=o.slice(0,t),o=o.slice(t+1),this.auth=e),n=-1;for(let e=0;e<ml.length;e++)r=o.indexOf(ml[e]),-1!==r&&(-1===n||r<n)&&(n=r);-1===n&&(n=o.length),":"===o[n-1]&&n--;const i=o.slice(0,n);o=o.slice(n),this.parseHost(i),this.hostname=this.hostname||"";const s="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!s){const e=this.hostname.split(/\./);for(let t=0,n=e.length;t<n;t++){const n=e[t];if(n&&!n.match(yl)){let r="";for(let e=0,t=n.length;e<t;e++)n.charCodeAt(e)>127?r+="x":r+=n[e];if(!r.match(yl)){const r=e.slice(0,t),i=e.slice(t+1),s=n.match(kl);s&&(r.push(s[1]),i.unshift(s[2])),i.length&&(o=i.join(".")+o),this.hostname=r.join(".");break}}}}this.hostname.length>255&&(this.hostname=""),s&&(this.hostname=this.hostname.substr(1,this.hostname.length-2))}const l=o.indexOf("#");-1!==l&&(this.hash=o.substr(l),o=o.slice(0,l));const a=o.indexOf("?");return-1!==a&&(this.search=o.substr(a),o=o.slice(0,a)),o&&(this.pathname=o),vl[n]&&this.hostname&&!this.pathname&&(this.pathname=""),this},cl.prototype.parseHost=function(e){let t=ul.exec(e);t&&(t=t[0],":"!==t&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)};const wl=function(e,t){if(e&&e instanceof cl)return e;const n=new cl;return n.parse(e,t),n},xl=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/,Cl=/[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u31EF\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDC-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF76\uDF7B-\uDFD9\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC5\uDECE-\uDEDB\uDEE0-\uDEE8\uDEF0-\uDEF8\uDF00-\uDF92\uDF94-\uDFCA]/,Dl=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,Sl=/[\0-\x1F\x7F-\x9F]/,_l=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC3F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/,El=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/,Al=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((e=>e.charCodeAt(0)))),Ml=new Uint16Array("Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((e=>e.charCodeAt(0))));var Ol;const Tl=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]),Nl=null!==(Ol=String.fromCodePoint)&&void 0!==Ol?Ol:function(e){let t="";return e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),t+=String.fromCharCode(e),t};function Fl(e){var t;return e>=55296&&e<=57343||e>1114111?65533:null!==(t=Tl.get(e))&&void 0!==t?t:e}var Il;!function(e){e[e.NUM=35]="NUM",e[e.SEMI=59]="SEMI",e[e.EQUALS=61]="EQUALS",e[e.ZERO=48]="ZERO",e[e.NINE=57]="NINE",e[e.LOWER_A=97]="LOWER_A",e[e.LOWER_F=102]="LOWER_F",e[e.LOWER_X=120]="LOWER_X",e[e.LOWER_Z=122]="LOWER_Z",e[e.UPPER_A=65]="UPPER_A",e[e.UPPER_F=70]="UPPER_F",e[e.UPPER_Z=90]="UPPER_Z"}(Il||(Il={}));var Rl,Bl,zl;function Ll(e){return e>=Il.ZERO&&e<=Il.NINE}function Pl(e){return e>=Il.UPPER_A&&e<=Il.UPPER_F||e>=Il.LOWER_A&&e<=Il.LOWER_F}function ql(e){return e===Il.EQUALS||function(e){return e>=Il.UPPER_A&&e<=Il.UPPER_Z||e>=Il.LOWER_A&&e<=Il.LOWER_Z||Ll(e)}(e)}!function(e){e[e.VALUE_LENGTH=49152]="VALUE_LENGTH",e[e.BRANCH_LENGTH=16256]="BRANCH_LENGTH",e[e.JUMP_TABLE=127]="JUMP_TABLE"}(Rl||(Rl={})),function(e){e[e.EntityStart=0]="EntityStart",e[e.NumericStart=1]="NumericStart",e[e.NumericDecimal=2]="NumericDecimal",e[e.NumericHex=3]="NumericHex",e[e.NamedEntity=4]="NamedEntity"}(Bl||(Bl={})),function(e){e[e.Legacy=0]="Legacy",e[e.Strict=1]="Strict",e[e.Attribute=2]="Attribute"}(zl||(zl={}));class $l{constructor(e,t,n){this.decodeTree=e,this.emitCodePoint=t,this.errors=n,this.state=Bl.EntityStart,this.consumed=1,this.result=0,this.treeIndex=0,this.excess=1,this.decodeMode=zl.Strict}startEntity(e){this.decodeMode=e,this.state=Bl.EntityStart,this.result=0,this.treeIndex=0,this.excess=1,this.consumed=1}write(e,t){switch(this.state){case Bl.EntityStart:return e.charCodeAt(t)===Il.NUM?(this.state=Bl.NumericStart,this.consumed+=1,this.stateNumericStart(e,t+1)):(this.state=Bl.NamedEntity,this.stateNamedEntity(e,t));case Bl.NumericStart:return this.stateNumericStart(e,t);case Bl.NumericDecimal:return this.stateNumericDecimal(e,t);case Bl.NumericHex:return this.stateNumericHex(e,t);case Bl.NamedEntity:return this.stateNamedEntity(e,t)}}stateNumericStart(e,t){return t>=e.length?-1:(32|e.charCodeAt(t))===Il.LOWER_X?(this.state=Bl.NumericHex,this.consumed+=1,this.stateNumericHex(e,t+1)):(this.state=Bl.NumericDecimal,this.stateNumericDecimal(e,t))}addToNumericResult(e,t,n,r){if(t!==n){const i=n-t;this.result=this.result*Math.pow(r,i)+parseInt(e.substr(t,i),r),this.consumed+=i}}stateNumericHex(e,t){const n=t;for(;t<e.length;){const r=e.charCodeAt(t);if(!Ll(r)&&!Pl(r))return this.addToNumericResult(e,n,t,16),this.emitNumericEntity(r,3);t+=1}return this.addToNumericResult(e,n,t,16),-1}stateNumericDecimal(e,t){const n=t;for(;t<e.length;){const r=e.charCodeAt(t);if(!Ll(r))return this.addToNumericResult(e,n,t,10),this.emitNumericEntity(r,2);t+=1}return this.addToNumericResult(e,n,t,10),-1}emitNumericEntity(e,t){var n;if(this.consumed<=t)return null===(n=this.errors)||void 0===n||n.absenceOfDigitsInNumericCharacterReference(this.consumed),0;if(e===Il.SEMI)this.consumed+=1;else if(this.decodeMode===zl.Strict)return 0;return this.emitCodePoint(Fl(this.result),this.consumed),this.errors&&(e!==Il.SEMI&&this.errors.missingSemicolonAfterCharacterReference(),this.errors.validateNumericCharacterReference(this.result)),this.consumed}stateNamedEntity(e,t){const{decodeTree:n}=this;let r=n[this.treeIndex],i=(r&Rl.VALUE_LENGTH)>>14;for(;t<e.length;t++,this.excess++){const o=e.charCodeAt(t);if(this.treeIndex=jl(n,r,this.treeIndex+Math.max(1,i),o),this.treeIndex<0)return 0===this.result||this.decodeMode===zl.Attribute&&(0===i||ql(o))?0:this.emitNotTerminatedNamedEntity();if(r=n[this.treeIndex],i=(r&Rl.VALUE_LENGTH)>>14,0!==i){if(o===Il.SEMI)return this.emitNamedEntityData(this.treeIndex,i,this.consumed+this.excess);this.decodeMode!==zl.Strict&&(this.result=this.treeIndex,this.consumed+=this.excess,this.excess=0)}}return-1}emitNotTerminatedNamedEntity(){var e;const{result:t,decodeTree:n}=this,r=(n[t]&Rl.VALUE_LENGTH)>>14;return this.emitNamedEntityData(t,r,this.consumed),null===(e=this.errors)||void 0===e||e.missingSemicolonAfterCharacterReference(),this.consumed}emitNamedEntityData(e,t,n){const{decodeTree:r}=this;return this.emitCodePoint(1===t?r[e]&~Rl.VALUE_LENGTH:r[e+1],n),3===t&&this.emitCodePoint(r[e+2],n),n}end(){var e;switch(this.state){case Bl.NamedEntity:return 0===this.result||this.decodeMode===zl.Attribute&&this.result!==this.treeIndex?0:this.emitNotTerminatedNamedEntity();case Bl.NumericDecimal:return this.emitNumericEntity(0,2);case Bl.NumericHex:return this.emitNumericEntity(0,3);case Bl.NumericStart:return null===(e=this.errors)||void 0===e||e.absenceOfDigitsInNumericCharacterReference(this.consumed),0;case Bl.EntityStart:return 0}}}function Vl(e){let t="";const n=new $l(e,(e=>t+=Nl(e)));return function(e,r){let i=0,o=0;for(;(o=e.indexOf("&",o))>=0;){t+=e.slice(i,o),n.startEntity(r);const s=n.write(e,o+1);if(s<0){i=o+n.end();break}i=o+s,o=0===s?i+1:i}const s=t+e.slice(i);return t="",s}}function jl(e,t,n,r){const i=(t&Rl.BRANCH_LENGTH)>>7,o=t&Rl.JUMP_TABLE;if(0===i)return 0!==o&&r===o?n:-1;if(o){const t=r-o;return t<0||t>=i?-1:e[n+t]-1}let s=n,l=s+i-1;for(;s<=l;){const t=s+l>>>1,n=e[t];if(n<r)s=t+1;else{if(!(n>r))return e[t+i];l=t-1}}return-1}const Ul=Vl(Al);Vl(Ml);function Wl(e,t=zl.Legacy){return Ul(e,t)}function Hl(e){for(let t=1;t<e.length;t++)e[t][0]+=e[t-1][0]+1;return e}new Map(Hl([[9,"&Tab;"],[0,"&NewLine;"],[22,"&excl;"],[0,"&quot;"],[0,"&num;"],[0,"&dollar;"],[0,"&percnt;"],[0,"&amp;"],[0,"&apos;"],[0,"&lpar;"],[0,"&rpar;"],[0,"&ast;"],[0,"&plus;"],[0,"&comma;"],[1,"&period;"],[0,"&sol;"],[10,"&colon;"],[0,"&semi;"],[0,{v:"&lt;",n:8402,o:"&nvlt;"}],[0,{v:"&equals;",n:8421,o:"&bne;"}],[0,{v:"&gt;",n:8402,o:"&nvgt;"}],[0,"&quest;"],[0,"&commat;"],[26,"&lbrack;"],[0,"&bsol;"],[0,"&rbrack;"],[0,"&Hat;"],[0,"&lowbar;"],[0,"&DiacriticalGrave;"],[5,{n:106,o:"&fjlig;"}],[20,"&lbrace;"],[0,"&verbar;"],[0,"&rbrace;"],[34,"&nbsp;"],[0,"&iexcl;"],[0,"&cent;"],[0,"&pound;"],[0,"&curren;"],[0,"&yen;"],[0,"&brvbar;"],[0,"&sect;"],[0,"&die;"],[0,"&copy;"],[0,"&ordf;"],[0,"&laquo;"],[0,"&not;"],[0,"&shy;"],[0,"&circledR;"],[0,"&macr;"],[0,"&deg;"],[0,"&PlusMinus;"],[0,"&sup2;"],[0,"&sup3;"],[0,"&acute;"],[0,"&micro;"],[0,"&para;"],[0,"&centerdot;"],[0,"&cedil;"],[0,"&sup1;"],[0,"&ordm;"],[0,"&raquo;"],[0,"&frac14;"],[0,"&frac12;"],[0,"&frac34;"],[0,"&iquest;"],[0,"&Agrave;"],[0,"&Aacute;"],[0,"&Acirc;"],[0,"&Atilde;"],[0,"&Auml;"],[0,"&angst;"],[0,"&AElig;"],[0,"&Ccedil;"],[0,"&Egrave;"],[0,"&Eacute;"],[0,"&Ecirc;"],[0,"&Euml;"],[0,"&Igrave;"],[0,"&Iacute;"],[0,"&Icirc;"],[0,"&Iuml;"],[0,"&ETH;"],[0,"&Ntilde;"],[0,"&Ograve;"],[0,"&Oacute;"],[0,"&Ocirc;"],[0,"&Otilde;"],[0,"&Ouml;"],[0,"&times;"],[0,"&Oslash;"],[0,"&Ugrave;"],[0,"&Uacute;"],[0,"&Ucirc;"],[0,"&Uuml;"],[0,"&Yacute;"],[0,"&THORN;"],[0,"&szlig;"],[0,"&agrave;"],[0,"&aacute;"],[0,"&acirc;"],[0,"&atilde;"],[0,"&auml;"],[0,"&aring;"],[0,"&aelig;"],[0,"&ccedil;"],[0,"&egrave;"],[0,"&eacute;"],[0,"&ecirc;"],[0,"&euml;"],[0,"&igrave;"],[0,"&iacute;"],[0,"&icirc;"],[0,"&iuml;"],[0,"&eth;"],[0,"&ntilde;"],[0,"&ograve;"],[0,"&oacute;"],[0,"&ocirc;"],[0,"&otilde;"],[0,"&ouml;"],[0,"&div;"],[0,"&oslash;"],[0,"&ugrave;"],[0,"&uacute;"],[0,"&ucirc;"],[0,"&uuml;"],[0,"&yacute;"],[0,"&thorn;"],[0,"&yuml;"],[0,"&Amacr;"],[0,"&amacr;"],[0,"&Abreve;"],[0,"&abreve;"],[0,"&Aogon;"],[0,"&aogon;"],[0,"&Cacute;"],[0,"&cacute;"],[0,"&Ccirc;"],[0,"&ccirc;"],[0,"&Cdot;"],[0,"&cdot;"],[0,"&Ccaron;"],[0,"&ccaron;"],[0,"&Dcaron;"],[0,"&dcaron;"],[0,"&Dstrok;"],[0,"&dstrok;"],[0,"&Emacr;"],[0,"&emacr;"],[2,"&Edot;"],[0,"&edot;"],[0,"&Eogon;"],[0,"&eogon;"],[0,"&Ecaron;"],[0,"&ecaron;"],[0,"&Gcirc;"],[0,"&gcirc;"],[0,"&Gbreve;"],[0,"&gbreve;"],[0,"&Gdot;"],[0,"&gdot;"],[0,"&Gcedil;"],[1,"&Hcirc;"],[0,"&hcirc;"],[0,"&Hstrok;"],[0,"&hstrok;"],[0,"&Itilde;"],[0,"&itilde;"],[0,"&Imacr;"],[0,"&imacr;"],[2,"&Iogon;"],[0,"&iogon;"],[0,"&Idot;"],[0,"&imath;"],[0,"&IJlig;"],[0,"&ijlig;"],[0,"&Jcirc;"],[0,"&jcirc;"],[0,"&Kcedil;"],[0,"&kcedil;"],[0,"&kgreen;"],[0,"&Lacute;"],[0,"&lacute;"],[0,"&Lcedil;"],[0,"&lcedil;"],[0,"&Lcaron;"],[0,"&lcaron;"],[0,"&Lmidot;"],[0,"&lmidot;"],[0,"&Lstrok;"],[0,"&lstrok;"],[0,"&Nacute;"],[0,"&nacute;"],[0,"&Ncedil;"],[0,"&ncedil;"],[0,"&Ncaron;"],[0,"&ncaron;"],[0,"&napos;"],[0,"&ENG;"],[0,"&eng;"],[0,"&Omacr;"],[0,"&omacr;"],[2,"&Odblac;"],[0,"&odblac;"],[0,"&OElig;"],[0,"&oelig;"],[0,"&Racute;"],[0,"&racute;"],[0,"&Rcedil;"],[0,"&rcedil;"],[0,"&Rcaron;"],[0,"&rcaron;"],[0,"&Sacute;"],[0,"&sacute;"],[0,"&Scirc;"],[0,"&scirc;"],[0,"&Scedil;"],[0,"&scedil;"],[0,"&Scaron;"],[0,"&scaron;"],[0,"&Tcedil;"],[0,"&tcedil;"],[0,"&Tcaron;"],[0,"&tcaron;"],[0,"&Tstrok;"],[0,"&tstrok;"],[0,"&Utilde;"],[0,"&utilde;"],[0,"&Umacr;"],[0,"&umacr;"],[0,"&Ubreve;"],[0,"&ubreve;"],[0,"&Uring;"],[0,"&uring;"],[0,"&Udblac;"],[0,"&udblac;"],[0,"&Uogon;"],[0,"&uogon;"],[0,"&Wcirc;"],[0,"&wcirc;"],[0,"&Ycirc;"],[0,"&ycirc;"],[0,"&Yuml;"],[0,"&Zacute;"],[0,"&zacute;"],[0,"&Zdot;"],[0,"&zdot;"],[0,"&Zcaron;"],[0,"&zcaron;"],[19,"&fnof;"],[34,"&imped;"],[63,"&gacute;"],[65,"&jmath;"],[142,"&circ;"],[0,"&caron;"],[16,"&breve;"],[0,"&DiacriticalDot;"],[0,"&ring;"],[0,"&ogon;"],[0,"&DiacriticalTilde;"],[0,"&dblac;"],[51,"&DownBreve;"],[127,"&Alpha;"],[0,"&Beta;"],[0,"&Gamma;"],[0,"&Delta;"],[0,"&Epsilon;"],[0,"&Zeta;"],[0,"&Eta;"],[0,"&Theta;"],[0,"&Iota;"],[0,"&Kappa;"],[0,"&Lambda;"],[0,"&Mu;"],[0,"&Nu;"],[0,"&Xi;"],[0,"&Omicron;"],[0,"&Pi;"],[0,"&Rho;"],[1,"&Sigma;"],[0,"&Tau;"],[0,"&Upsilon;"],[0,"&Phi;"],[0,"&Chi;"],[0,"&Psi;"],[0,"&ohm;"],[7,"&alpha;"],[0,"&beta;"],[0,"&gamma;"],[0,"&delta;"],[0,"&epsi;"],[0,"&zeta;"],[0,"&eta;"],[0,"&theta;"],[0,"&iota;"],[0,"&kappa;"],[0,"&lambda;"],[0,"&mu;"],[0,"&nu;"],[0,"&xi;"],[0,"&omicron;"],[0,"&pi;"],[0,"&rho;"],[0,"&sigmaf;"],[0,"&sigma;"],[0,"&tau;"],[0,"&upsi;"],[0,"&phi;"],[0,"&chi;"],[0,"&psi;"],[0,"&omega;"],[7,"&thetasym;"],[0,"&Upsi;"],[2,"&phiv;"],[0,"&piv;"],[5,"&Gammad;"],[0,"&digamma;"],[18,"&kappav;"],[0,"&rhov;"],[3,"&epsiv;"],[0,"&backepsilon;"],[10,"&IOcy;"],[0,"&DJcy;"],[0,"&GJcy;"],[0,"&Jukcy;"],[0,"&DScy;"],[0,"&Iukcy;"],[0,"&YIcy;"],[0,"&Jsercy;"],[0,"&LJcy;"],[0,"&NJcy;"],[0,"&TSHcy;"],[0,"&KJcy;"],[1,"&Ubrcy;"],[0,"&DZcy;"],[0,"&Acy;"],[0,"&Bcy;"],[0,"&Vcy;"],[0,"&Gcy;"],[0,"&Dcy;"],[0,"&IEcy;"],[0,"&ZHcy;"],[0,"&Zcy;"],[0,"&Icy;"],[0,"&Jcy;"],[0,"&Kcy;"],[0,"&Lcy;"],[0,"&Mcy;"],[0,"&Ncy;"],[0,"&Ocy;"],[0,"&Pcy;"],[0,"&Rcy;"],[0,"&Scy;"],[0,"&Tcy;"],[0,"&Ucy;"],[0,"&Fcy;"],[0,"&KHcy;"],[0,"&TScy;"],[0,"&CHcy;"],[0,"&SHcy;"],[0,"&SHCHcy;"],[0,"&HARDcy;"],[0,"&Ycy;"],[0,"&SOFTcy;"],[0,"&Ecy;"],[0,"&YUcy;"],[0,"&YAcy;"],[0,"&acy;"],[0,"&bcy;"],[0,"&vcy;"],[0,"&gcy;"],[0,"&dcy;"],[0,"&iecy;"],[0,"&zhcy;"],[0,"&zcy;"],[0,"&icy;"],[0,"&jcy;"],[0,"&kcy;"],[0,"&lcy;"],[0,"&mcy;"],[0,"&ncy;"],[0,"&ocy;"],[0,"&pcy;"],[0,"&rcy;"],[0,"&scy;"],[0,"&tcy;"],[0,"&ucy;"],[0,"&fcy;"],[0,"&khcy;"],[0,"&tscy;"],[0,"&chcy;"],[0,"&shcy;"],[0,"&shchcy;"],[0,"&hardcy;"],[0,"&ycy;"],[0,"&softcy;"],[0,"&ecy;"],[0,"&yucy;"],[0,"&yacy;"],[1,"&iocy;"],[0,"&djcy;"],[0,"&gjcy;"],[0,"&jukcy;"],[0,"&dscy;"],[0,"&iukcy;"],[0,"&yicy;"],[0,"&jsercy;"],[0,"&ljcy;"],[0,"&njcy;"],[0,"&tshcy;"],[0,"&kjcy;"],[1,"&ubrcy;"],[0,"&dzcy;"],[7074,"&ensp;"],[0,"&emsp;"],[0,"&emsp13;"],[0,"&emsp14;"],[1,"&numsp;"],[0,"&puncsp;"],[0,"&ThinSpace;"],[0,"&hairsp;"],[0,"&NegativeMediumSpace;"],[0,"&zwnj;"],[0,"&zwj;"],[0,"&lrm;"],[0,"&rlm;"],[0,"&dash;"],[2,"&ndash;"],[0,"&mdash;"],[0,"&horbar;"],[0,"&Verbar;"],[1,"&lsquo;"],[0,"&CloseCurlyQuote;"],[0,"&lsquor;"],[1,"&ldquo;"],[0,"&CloseCurlyDoubleQuote;"],[0,"&bdquo;"],[1,"&dagger;"],[0,"&Dagger;"],[0,"&bull;"],[2,"&nldr;"],[0,"&hellip;"],[9,"&permil;"],[0,"&pertenk;"],[0,"&prime;"],[0,"&Prime;"],[0,"&tprime;"],[0,"&backprime;"],[3,"&lsaquo;"],[0,"&rsaquo;"],[3,"&oline;"],[2,"&caret;"],[1,"&hybull;"],[0,"&frasl;"],[10,"&bsemi;"],[7,"&qprime;"],[7,{v:"&MediumSpace;",n:8202,o:"&ThickSpace;"}],[0,"&NoBreak;"],[0,"&af;"],[0,"&InvisibleTimes;"],[0,"&ic;"],[72,"&euro;"],[46,"&tdot;"],[0,"&DotDot;"],[37,"&complexes;"],[2,"&incare;"],[4,"&gscr;"],[0,"&hamilt;"],[0,"&Hfr;"],[0,"&Hopf;"],[0,"&planckh;"],[0,"&hbar;"],[0,"&imagline;"],[0,"&Ifr;"],[0,"&lagran;"],[0,"&ell;"],[1,"&naturals;"],[0,"&numero;"],[0,"&copysr;"],[0,"&weierp;"],[0,"&Popf;"],[0,"&Qopf;"],[0,"&realine;"],[0,"&real;"],[0,"&reals;"],[0,"&rx;"],[3,"&trade;"],[1,"&integers;"],[2,"&mho;"],[0,"&zeetrf;"],[0,"&iiota;"],[2,"&bernou;"],[0,"&Cayleys;"],[1,"&escr;"],[0,"&Escr;"],[0,"&Fouriertrf;"],[1,"&Mellintrf;"],[0,"&order;"],[0,"&alefsym;"],[0,"&beth;"],[0,"&gimel;"],[0,"&daleth;"],[12,"&CapitalDifferentialD;"],[0,"&dd;"],[0,"&ee;"],[0,"&ii;"],[10,"&frac13;"],[0,"&frac23;"],[0,"&frac15;"],[0,"&frac25;"],[0,"&frac35;"],[0,"&frac45;"],[0,"&frac16;"],[0,"&frac56;"],[0,"&frac18;"],[0,"&frac38;"],[0,"&frac58;"],[0,"&frac78;"],[49,"&larr;"],[0,"&ShortUpArrow;"],[0,"&rarr;"],[0,"&darr;"],[0,"&harr;"],[0,"&updownarrow;"],[0,"&nwarr;"],[0,"&nearr;"],[0,"&LowerRightArrow;"],[0,"&LowerLeftArrow;"],[0,"&nlarr;"],[0,"&nrarr;"],[1,{v:"&rarrw;",n:824,o:"&nrarrw;"}],[0,"&Larr;"],[0,"&Uarr;"],[0,"&Rarr;"],[0,"&Darr;"],[0,"&larrtl;"],[0,"&rarrtl;"],[0,"&LeftTeeArrow;"],[0,"&mapstoup;"],[0,"&map;"],[0,"&DownTeeArrow;"],[1,"&hookleftarrow;"],[0,"&hookrightarrow;"],[0,"&larrlp;"],[0,"&looparrowright;"],[0,"&harrw;"],[0,"&nharr;"],[1,"&lsh;"],[0,"&rsh;"],[0,"&ldsh;"],[0,"&rdsh;"],[1,"&crarr;"],[0,"&cularr;"],[0,"&curarr;"],[2,"&circlearrowleft;"],[0,"&circlearrowright;"],[0,"&leftharpoonup;"],[0,"&DownLeftVector;"],[0,"&RightUpVector;"],[0,"&LeftUpVector;"],[0,"&rharu;"],[0,"&DownRightVector;"],[0,"&dharr;"],[0,"&dharl;"],[0,"&RightArrowLeftArrow;"],[0,"&udarr;"],[0,"&LeftArrowRightArrow;"],[0,"&leftleftarrows;"],[0,"&upuparrows;"],[0,"&rightrightarrows;"],[0,"&ddarr;"],[0,"&leftrightharpoons;"],[0,"&Equilibrium;"],[0,"&nlArr;"],[0,"&nhArr;"],[0,"&nrArr;"],[0,"&DoubleLeftArrow;"],[0,"&DoubleUpArrow;"],[0,"&DoubleRightArrow;"],[0,"&dArr;"],[0,"&DoubleLeftRightArrow;"],[0,"&DoubleUpDownArrow;"],[0,"&nwArr;"],[0,"&neArr;"],[0,"&seArr;"],[0,"&swArr;"],[0,"&lAarr;"],[0,"&rAarr;"],[1,"&zigrarr;"],[6,"&larrb;"],[0,"&rarrb;"],[15,"&DownArrowUpArrow;"],[7,"&loarr;"],[0,"&roarr;"],[0,"&hoarr;"],[0,"&forall;"],[0,"&comp;"],[0,{v:"&part;",n:824,o:"&npart;"}],[0,"&exist;"],[0,"&nexist;"],[0,"&empty;"],[1,"&Del;"],[0,"&Element;"],[0,"&NotElement;"],[1,"&ni;"],[0,"&notni;"],[2,"&prod;"],[0,"&coprod;"],[0,"&sum;"],[0,"&minus;"],[0,"&MinusPlus;"],[0,"&dotplus;"],[1,"&Backslash;"],[0,"&lowast;"],[0,"&compfn;"],[1,"&radic;"],[2,"&prop;"],[0,"&infin;"],[0,"&angrt;"],[0,{v:"&ang;",n:8402,o:"&nang;"}],[0,"&angmsd;"],[0,"&angsph;"],[0,"&mid;"],[0,"&nmid;"],[0,"&DoubleVerticalBar;"],[0,"&NotDoubleVerticalBar;"],[0,"&and;"],[0,"&or;"],[0,{v:"&cap;",n:65024,o:"&caps;"}],[0,{v:"&cup;",n:65024,o:"&cups;"}],[0,"&int;"],[0,"&Int;"],[0,"&iiint;"],[0,"&conint;"],[0,"&Conint;"],[0,"&Cconint;"],[0,"&cwint;"],[0,"&ClockwiseContourIntegral;"],[0,"&awconint;"],[0,"&there4;"],[0,"&becaus;"],[0,"&ratio;"],[0,"&Colon;"],[0,"&dotminus;"],[1,"&mDDot;"],[0,"&homtht;"],[0,{v:"&sim;",n:8402,o:"&nvsim;"}],[0,{v:"&backsim;",n:817,o:"&race;"}],[0,{v:"&ac;",n:819,o:"&acE;"}],[0,"&acd;"],[0,"&VerticalTilde;"],[0,"&NotTilde;"],[0,{v:"&eqsim;",n:824,o:"&nesim;"}],[0,"&sime;"],[0,"&NotTildeEqual;"],[0,"&cong;"],[0,"&simne;"],[0,"&ncong;"],[0,"&ap;"],[0,"&nap;"],[0,"&ape;"],[0,{v:"&apid;",n:824,o:"&napid;"}],[0,"&backcong;"],[0,{v:"&asympeq;",n:8402,o:"&nvap;"}],[0,{v:"&bump;",n:824,o:"&nbump;"}],[0,{v:"&bumpe;",n:824,o:"&nbumpe;"}],[0,{v:"&doteq;",n:824,o:"&nedot;"}],[0,"&doteqdot;"],[0,"&efDot;"],[0,"&erDot;"],[0,"&Assign;"],[0,"&ecolon;"],[0,"&ecir;"],[0,"&circeq;"],[1,"&wedgeq;"],[0,"&veeeq;"],[1,"&triangleq;"],[2,"&equest;"],[0,"&ne;"],[0,{v:"&Congruent;",n:8421,o:"&bnequiv;"}],[0,"&nequiv;"],[1,{v:"&le;",n:8402,o:"&nvle;"}],[0,{v:"&ge;",n:8402,o:"&nvge;"}],[0,{v:"&lE;",n:824,o:"&nlE;"}],[0,{v:"&gE;",n:824,o:"&ngE;"}],[0,{v:"&lnE;",n:65024,o:"&lvertneqq;"}],[0,{v:"&gnE;",n:65024,o:"&gvertneqq;"}],[0,{v:"&ll;",n:new Map(Hl([[824,"&nLtv;"],[7577,"&nLt;"]]))}],[0,{v:"&gg;",n:new Map(Hl([[824,"&nGtv;"],[7577,"&nGt;"]]))}],[0,"&between;"],[0,"&NotCupCap;"],[0,"&nless;"],[0,"&ngt;"],[0,"&nle;"],[0,"&nge;"],[0,"&lesssim;"],[0,"&GreaterTilde;"],[0,"&nlsim;"],[0,"&ngsim;"],[0,"&LessGreater;"],[0,"&gl;"],[0,"&NotLessGreater;"],[0,"&NotGreaterLess;"],[0,"&pr;"],[0,"&sc;"],[0,"&prcue;"],[0,"&sccue;"],[0,"&PrecedesTilde;"],[0,{v:"&scsim;",n:824,o:"&NotSucceedsTilde;"}],[0,"&NotPrecedes;"],[0,"&NotSucceeds;"],[0,{v:"&sub;",n:8402,o:"&NotSubset;"}],[0,{v:"&sup;",n:8402,o:"&NotSuperset;"}],[0,"&nsub;"],[0,"&nsup;"],[0,"&sube;"],[0,"&supe;"],[0,"&NotSubsetEqual;"],[0,"&NotSupersetEqual;"],[0,{v:"&subne;",n:65024,o:"&varsubsetneq;"}],[0,{v:"&supne;",n:65024,o:"&varsupsetneq;"}],[1,"&cupdot;"],[0,"&UnionPlus;"],[0,{v:"&sqsub;",n:824,o:"&NotSquareSubset;"}],[0,{v:"&sqsup;",n:824,o:"&NotSquareSuperset;"}],[0,"&sqsube;"],[0,"&sqsupe;"],[0,{v:"&sqcap;",n:65024,o:"&sqcaps;"}],[0,{v:"&sqcup;",n:65024,o:"&sqcups;"}],[0,"&CirclePlus;"],[0,"&CircleMinus;"],[0,"&CircleTimes;"],[0,"&osol;"],[0,"&CircleDot;"],[0,"&circledcirc;"],[0,"&circledast;"],[1,"&circleddash;"],[0,"&boxplus;"],[0,"&boxminus;"],[0,"&boxtimes;"],[0,"&dotsquare;"],[0,"&RightTee;"],[0,"&dashv;"],[0,"&DownTee;"],[0,"&bot;"],[1,"&models;"],[0,"&DoubleRightTee;"],[0,"&Vdash;"],[0,"&Vvdash;"],[0,"&VDash;"],[0,"&nvdash;"],[0,"&nvDash;"],[0,"&nVdash;"],[0,"&nVDash;"],[0,"&prurel;"],[1,"&LeftTriangle;"],[0,"&RightTriangle;"],[0,{v:"&LeftTriangleEqual;",n:8402,o:"&nvltrie;"}],[0,{v:"&RightTriangleEqual;",n:8402,o:"&nvrtrie;"}],[0,"&origof;"],[0,"&imof;"],[0,"&multimap;"],[0,"&hercon;"],[0,"&intcal;"],[0,"&veebar;"],[1,"&barvee;"],[0,"&angrtvb;"],[0,"&lrtri;"],[0,"&bigwedge;"],[0,"&bigvee;"],[0,"&bigcap;"],[0,"&bigcup;"],[0,"&diam;"],[0,"&sdot;"],[0,"&sstarf;"],[0,"&divideontimes;"],[0,"&bowtie;"],[0,"&ltimes;"],[0,"&rtimes;"],[0,"&leftthreetimes;"],[0,"&rightthreetimes;"],[0,"&backsimeq;"],[0,"&curlyvee;"],[0,"&curlywedge;"],[0,"&Sub;"],[0,"&Sup;"],[0,"&Cap;"],[0,"&Cup;"],[0,"&fork;"],[0,"&epar;"],[0,"&lessdot;"],[0,"&gtdot;"],[0,{v:"&Ll;",n:824,o:"&nLl;"}],[0,{v:"&Gg;",n:824,o:"&nGg;"}],[0,{v:"&leg;",n:65024,o:"&lesg;"}],[0,{v:"&gel;",n:65024,o:"&gesl;"}],[2,"&cuepr;"],[0,"&cuesc;"],[0,"&NotPrecedesSlantEqual;"],[0,"&NotSucceedsSlantEqual;"],[0,"&NotSquareSubsetEqual;"],[0,"&NotSquareSupersetEqual;"],[2,"&lnsim;"],[0,"&gnsim;"],[0,"&precnsim;"],[0,"&scnsim;"],[0,"&nltri;"],[0,"&NotRightTriangle;"],[0,"&nltrie;"],[0,"&NotRightTriangleEqual;"],[0,"&vellip;"],[0,"&ctdot;"],[0,"&utdot;"],[0,"&dtdot;"],[0,"&disin;"],[0,"&isinsv;"],[0,"&isins;"],[0,{v:"&isindot;",n:824,o:"&notindot;"}],[0,"&notinvc;"],[0,"&notinvb;"],[1,{v:"&isinE;",n:824,o:"&notinE;"}],[0,"&nisd;"],[0,"&xnis;"],[0,"&nis;"],[0,"&notnivc;"],[0,"&notnivb;"],[6,"&barwed;"],[0,"&Barwed;"],[1,"&lceil;"],[0,"&rceil;"],[0,"&LeftFloor;"],[0,"&rfloor;"],[0,"&drcrop;"],[0,"&dlcrop;"],[0,"&urcrop;"],[0,"&ulcrop;"],[0,"&bnot;"],[1,"&profline;"],[0,"&profsurf;"],[1,"&telrec;"],[0,"&target;"],[5,"&ulcorn;"],[0,"&urcorn;"],[0,"&dlcorn;"],[0,"&drcorn;"],[2,"&frown;"],[0,"&smile;"],[9,"&cylcty;"],[0,"&profalar;"],[7,"&topbot;"],[6,"&ovbar;"],[1,"&solbar;"],[60,"&angzarr;"],[51,"&lmoustache;"],[0,"&rmoustache;"],[2,"&OverBracket;"],[0,"&bbrk;"],[0,"&bbrktbrk;"],[37,"&OverParenthesis;"],[0,"&UnderParenthesis;"],[0,"&OverBrace;"],[0,"&UnderBrace;"],[2,"&trpezium;"],[4,"&elinters;"],[59,"&blank;"],[164,"&circledS;"],[55,"&boxh;"],[1,"&boxv;"],[9,"&boxdr;"],[3,"&boxdl;"],[3,"&boxur;"],[3,"&boxul;"],[3,"&boxvr;"],[7,"&boxvl;"],[7,"&boxhd;"],[7,"&boxhu;"],[7,"&boxvh;"],[19,"&boxH;"],[0,"&boxV;"],[0,"&boxdR;"],[0,"&boxDr;"],[0,"&boxDR;"],[0,"&boxdL;"],[0,"&boxDl;"],[0,"&boxDL;"],[0,"&boxuR;"],[0,"&boxUr;"],[0,"&boxUR;"],[0,"&boxuL;"],[0,"&boxUl;"],[0,"&boxUL;"],[0,"&boxvR;"],[0,"&boxVr;"],[0,"&boxVR;"],[0,"&boxvL;"],[0,"&boxVl;"],[0,"&boxVL;"],[0,"&boxHd;"],[0,"&boxhD;"],[0,"&boxHD;"],[0,"&boxHu;"],[0,"&boxhU;"],[0,"&boxHU;"],[0,"&boxvH;"],[0,"&boxVh;"],[0,"&boxVH;"],[19,"&uhblk;"],[3,"&lhblk;"],[3,"&block;"],[8,"&blk14;"],[0,"&blk12;"],[0,"&blk34;"],[13,"&square;"],[8,"&blacksquare;"],[0,"&EmptyVerySmallSquare;"],[1,"&rect;"],[0,"&marker;"],[2,"&fltns;"],[1,"&bigtriangleup;"],[0,"&blacktriangle;"],[0,"&triangle;"],[2,"&blacktriangleright;"],[0,"&rtri;"],[3,"&bigtriangledown;"],[0,"&blacktriangledown;"],[0,"&dtri;"],[2,"&blacktriangleleft;"],[0,"&ltri;"],[6,"&loz;"],[0,"&cir;"],[32,"&tridot;"],[2,"&bigcirc;"],[8,"&ultri;"],[0,"&urtri;"],[0,"&lltri;"],[0,"&EmptySmallSquare;"],[0,"&FilledSmallSquare;"],[8,"&bigstar;"],[0,"&star;"],[7,"&phone;"],[49,"&female;"],[1,"&male;"],[29,"&spades;"],[2,"&clubs;"],[1,"&hearts;"],[0,"&diamondsuit;"],[3,"&sung;"],[2,"&flat;"],[0,"&natural;"],[0,"&sharp;"],[163,"&check;"],[3,"&cross;"],[8,"&malt;"],[21,"&sext;"],[33,"&VerticalSeparator;"],[25,"&lbbrk;"],[0,"&rbbrk;"],[84,"&bsolhsub;"],[0,"&suphsol;"],[28,"&LeftDoubleBracket;"],[0,"&RightDoubleBracket;"],[0,"&lang;"],[0,"&rang;"],[0,"&Lang;"],[0,"&Rang;"],[0,"&loang;"],[0,"&roang;"],[7,"&longleftarrow;"],[0,"&longrightarrow;"],[0,"&longleftrightarrow;"],[0,"&DoubleLongLeftArrow;"],[0,"&DoubleLongRightArrow;"],[0,"&DoubleLongLeftRightArrow;"],[1,"&longmapsto;"],[2,"&dzigrarr;"],[258,"&nvlArr;"],[0,"&nvrArr;"],[0,"&nvHarr;"],[0,"&Map;"],[6,"&lbarr;"],[0,"&bkarow;"],[0,"&lBarr;"],[0,"&dbkarow;"],[0,"&drbkarow;"],[0,"&DDotrahd;"],[0,"&UpArrowBar;"],[0,"&DownArrowBar;"],[2,"&Rarrtl;"],[2,"&latail;"],[0,"&ratail;"],[0,"&lAtail;"],[0,"&rAtail;"],[0,"&larrfs;"],[0,"&rarrfs;"],[0,"&larrbfs;"],[0,"&rarrbfs;"],[2,"&nwarhk;"],[0,"&nearhk;"],[0,"&hksearow;"],[0,"&hkswarow;"],[0,"&nwnear;"],[0,"&nesear;"],[0,"&seswar;"],[0,"&swnwar;"],[8,{v:"&rarrc;",n:824,o:"&nrarrc;"}],[1,"&cudarrr;"],[0,"&ldca;"],[0,"&rdca;"],[0,"&cudarrl;"],[0,"&larrpl;"],[2,"&curarrm;"],[0,"&cularrp;"],[7,"&rarrpl;"],[2,"&harrcir;"],[0,"&Uarrocir;"],[0,"&lurdshar;"],[0,"&ldrushar;"],[2,"&LeftRightVector;"],[0,"&RightUpDownVector;"],[0,"&DownLeftRightVector;"],[0,"&LeftUpDownVector;"],[0,"&LeftVectorBar;"],[0,"&RightVectorBar;"],[0,"&RightUpVectorBar;"],[0,"&RightDownVectorBar;"],[0,"&DownLeftVectorBar;"],[0,"&DownRightVectorBar;"],[0,"&LeftUpVectorBar;"],[0,"&LeftDownVectorBar;"],[0,"&LeftTeeVector;"],[0,"&RightTeeVector;"],[0,"&RightUpTeeVector;"],[0,"&RightDownTeeVector;"],[0,"&DownLeftTeeVector;"],[0,"&DownRightTeeVector;"],[0,"&LeftUpTeeVector;"],[0,"&LeftDownTeeVector;"],[0,"&lHar;"],[0,"&uHar;"],[0,"&rHar;"],[0,"&dHar;"],[0,"&luruhar;"],[0,"&ldrdhar;"],[0,"&ruluhar;"],[0,"&rdldhar;"],[0,"&lharul;"],[0,"&llhard;"],[0,"&rharul;"],[0,"&lrhard;"],[0,"&udhar;"],[0,"&duhar;"],[0,"&RoundImplies;"],[0,"&erarr;"],[0,"&simrarr;"],[0,"&larrsim;"],[0,"&rarrsim;"],[0,"&rarrap;"],[0,"&ltlarr;"],[1,"&gtrarr;"],[0,"&subrarr;"],[1,"&suplarr;"],[0,"&lfisht;"],[0,"&rfisht;"],[0,"&ufisht;"],[0,"&dfisht;"],[5,"&lopar;"],[0,"&ropar;"],[4,"&lbrke;"],[0,"&rbrke;"],[0,"&lbrkslu;"],[0,"&rbrksld;"],[0,"&lbrksld;"],[0,"&rbrkslu;"],[0,"&langd;"],[0,"&rangd;"],[0,"&lparlt;"],[0,"&rpargt;"],[0,"&gtlPar;"],[0,"&ltrPar;"],[3,"&vzigzag;"],[1,"&vangrt;"],[0,"&angrtvbd;"],[6,"&ange;"],[0,"&range;"],[0,"&dwangle;"],[0,"&uwangle;"],[0,"&angmsdaa;"],[0,"&angmsdab;"],[0,"&angmsdac;"],[0,"&angmsdad;"],[0,"&angmsdae;"],[0,"&angmsdaf;"],[0,"&angmsdag;"],[0,"&angmsdah;"],[0,"&bemptyv;"],[0,"&demptyv;"],[0,"&cemptyv;"],[0,"&raemptyv;"],[0,"&laemptyv;"],[0,"&ohbar;"],[0,"&omid;"],[0,"&opar;"],[1,"&operp;"],[1,"&olcross;"],[0,"&odsold;"],[1,"&olcir;"],[0,"&ofcir;"],[0,"&olt;"],[0,"&ogt;"],[0,"&cirscir;"],[0,"&cirE;"],[0,"&solb;"],[0,"&bsolb;"],[3,"&boxbox;"],[3,"&trisb;"],[0,"&rtriltri;"],[0,{v:"&LeftTriangleBar;",n:824,o:"&NotLeftTriangleBar;"}],[0,{v:"&RightTriangleBar;",n:824,o:"&NotRightTriangleBar;"}],[11,"&iinfin;"],[0,"&infintie;"],[0,"&nvinfin;"],[4,"&eparsl;"],[0,"&smeparsl;"],[0,"&eqvparsl;"],[5,"&blacklozenge;"],[8,"&RuleDelayed;"],[1,"&dsol;"],[9,"&bigodot;"],[0,"&bigoplus;"],[0,"&bigotimes;"],[1,"&biguplus;"],[1,"&bigsqcup;"],[5,"&iiiint;"],[0,"&fpartint;"],[2,"&cirfnint;"],[0,"&awint;"],[0,"&rppolint;"],[0,"&scpolint;"],[0,"&npolint;"],[0,"&pointint;"],[0,"&quatint;"],[0,"&intlarhk;"],[10,"&pluscir;"],[0,"&plusacir;"],[0,"&simplus;"],[0,"&plusdu;"],[0,"&plussim;"],[0,"&plustwo;"],[1,"&mcomma;"],[0,"&minusdu;"],[2,"&loplus;"],[0,"&roplus;"],[0,"&Cross;"],[0,"&timesd;"],[0,"&timesbar;"],[1,"&smashp;"],[0,"&lotimes;"],[0,"&rotimes;"],[0,"&otimesas;"],[0,"&Otimes;"],[0,"&odiv;"],[0,"&triplus;"],[0,"&triminus;"],[0,"&tritime;"],[0,"&intprod;"],[2,"&amalg;"],[0,"&capdot;"],[1,"&ncup;"],[0,"&ncap;"],[0,"&capand;"],[0,"&cupor;"],[0,"&cupcap;"],[0,"&capcup;"],[0,"&cupbrcap;"],[0,"&capbrcup;"],[0,"&cupcup;"],[0,"&capcap;"],[0,"&ccups;"],[0,"&ccaps;"],[2,"&ccupssm;"],[2,"&And;"],[0,"&Or;"],[0,"&andand;"],[0,"&oror;"],[0,"&orslope;"],[0,"&andslope;"],[1,"&andv;"],[0,"&orv;"],[0,"&andd;"],[0,"&ord;"],[1,"&wedbar;"],[6,"&sdote;"],[3,"&simdot;"],[2,{v:"&congdot;",n:824,o:"&ncongdot;"}],[0,"&easter;"],[0,"&apacir;"],[0,{v:"&apE;",n:824,o:"&napE;"}],[0,"&eplus;"],[0,"&pluse;"],[0,"&Esim;"],[0,"&Colone;"],[0,"&Equal;"],[1,"&ddotseq;"],[0,"&equivDD;"],[0,"&ltcir;"],[0,"&gtcir;"],[0,"&ltquest;"],[0,"&gtquest;"],[0,{v:"&leqslant;",n:824,o:"&nleqslant;"}],[0,{v:"&geqslant;",n:824,o:"&ngeqslant;"}],[0,"&lesdot;"],[0,"&gesdot;"],[0,"&lesdoto;"],[0,"&gesdoto;"],[0,"&lesdotor;"],[0,"&gesdotol;"],[0,"&lap;"],[0,"&gap;"],[0,"&lne;"],[0,"&gne;"],[0,"&lnap;"],[0,"&gnap;"],[0,"&lEg;"],[0,"&gEl;"],[0,"&lsime;"],[0,"&gsime;"],[0,"&lsimg;"],[0,"&gsiml;"],[0,"&lgE;"],[0,"&glE;"],[0,"&lesges;"],[0,"&gesles;"],[0,"&els;"],[0,"&egs;"],[0,"&elsdot;"],[0,"&egsdot;"],[0,"&el;"],[0,"&eg;"],[2,"&siml;"],[0,"&simg;"],[0,"&simlE;"],[0,"&simgE;"],[0,{v:"&LessLess;",n:824,o:"&NotNestedLessLess;"}],[0,{v:"&GreaterGreater;",n:824,o:"&NotNestedGreaterGreater;"}],[1,"&glj;"],[0,"&gla;"],[0,"&ltcc;"],[0,"&gtcc;"],[0,"&lescc;"],[0,"&gescc;"],[0,"&smt;"],[0,"&lat;"],[0,{v:"&smte;",n:65024,o:"&smtes;"}],[0,{v:"&late;",n:65024,o:"&lates;"}],[0,"&bumpE;"],[0,{v:"&PrecedesEqual;",n:824,o:"&NotPrecedesEqual;"}],[0,{v:"&sce;",n:824,o:"&NotSucceedsEqual;"}],[2,"&prE;"],[0,"&scE;"],[0,"&precneqq;"],[0,"&scnE;"],[0,"&prap;"],[0,"&scap;"],[0,"&precnapprox;"],[0,"&scnap;"],[0,"&Pr;"],[0,"&Sc;"],[0,"&subdot;"],[0,"&supdot;"],[0,"&subplus;"],[0,"&supplus;"],[0,"&submult;"],[0,"&supmult;"],[0,"&subedot;"],[0,"&supedot;"],[0,{v:"&subE;",n:824,o:"&nsubE;"}],[0,{v:"&supE;",n:824,o:"&nsupE;"}],[0,"&subsim;"],[0,"&supsim;"],[2,{v:"&subnE;",n:65024,o:"&varsubsetneqq;"}],[0,{v:"&supnE;",n:65024,o:"&varsupsetneqq;"}],[2,"&csub;"],[0,"&csup;"],[0,"&csube;"],[0,"&csupe;"],[0,"&subsup;"],[0,"&supsub;"],[0,"&subsub;"],[0,"&supsup;"],[0,"&suphsub;"],[0,"&supdsub;"],[0,"&forkv;"],[0,"&topfork;"],[0,"&mlcp;"],[8,"&Dashv;"],[1,"&Vdashl;"],[0,"&Barv;"],[0,"&vBar;"],[0,"&vBarv;"],[1,"&Vbar;"],[0,"&Not;"],[0,"&bNot;"],[0,"&rnmid;"],[0,"&cirmid;"],[0,"&midcir;"],[0,"&topcir;"],[0,"&nhpar;"],[0,"&parsim;"],[9,{v:"&parsl;",n:8421,o:"&nparsl;"}],[44343,{n:new Map(Hl([[56476,"&Ascr;"],[1,"&Cscr;"],[0,"&Dscr;"],[2,"&Gscr;"],[2,"&Jscr;"],[0,"&Kscr;"],[2,"&Nscr;"],[0,"&Oscr;"],[0,"&Pscr;"],[0,"&Qscr;"],[1,"&Sscr;"],[0,"&Tscr;"],[0,"&Uscr;"],[0,"&Vscr;"],[0,"&Wscr;"],[0,"&Xscr;"],[0,"&Yscr;"],[0,"&Zscr;"],[0,"&ascr;"],[0,"&bscr;"],[0,"&cscr;"],[0,"&dscr;"],[1,"&fscr;"],[1,"&hscr;"],[0,"&iscr;"],[0,"&jscr;"],[0,"&kscr;"],[0,"&lscr;"],[0,"&mscr;"],[0,"&nscr;"],[1,"&pscr;"],[0,"&qscr;"],[0,"&rscr;"],[0,"&sscr;"],[0,"&tscr;"],[0,"&uscr;"],[0,"&vscr;"],[0,"&wscr;"],[0,"&xscr;"],[0,"&yscr;"],[0,"&zscr;"],[52,"&Afr;"],[0,"&Bfr;"],[1,"&Dfr;"],[0,"&Efr;"],[0,"&Ffr;"],[0,"&Gfr;"],[2,"&Jfr;"],[0,"&Kfr;"],[0,"&Lfr;"],[0,"&Mfr;"],[0,"&Nfr;"],[0,"&Ofr;"],[0,"&Pfr;"],[0,"&Qfr;"],[1,"&Sfr;"],[0,"&Tfr;"],[0,"&Ufr;"],[0,"&Vfr;"],[0,"&Wfr;"],[0,"&Xfr;"],[0,"&Yfr;"],[1,"&afr;"],[0,"&bfr;"],[0,"&cfr;"],[0,"&dfr;"],[0,"&efr;"],[0,"&ffr;"],[0,"&gfr;"],[0,"&hfr;"],[0,"&ifr;"],[0,"&jfr;"],[0,"&kfr;"],[0,"&lfr;"],[0,"&mfr;"],[0,"&nfr;"],[0,"&ofr;"],[0,"&pfr;"],[0,"&qfr;"],[0,"&rfr;"],[0,"&sfr;"],[0,"&tfr;"],[0,"&ufr;"],[0,"&vfr;"],[0,"&wfr;"],[0,"&xfr;"],[0,"&yfr;"],[0,"&zfr;"],[0,"&Aopf;"],[0,"&Bopf;"],[1,"&Dopf;"],[0,"&Eopf;"],[0,"&Fopf;"],[0,"&Gopf;"],[1,"&Iopf;"],[0,"&Jopf;"],[0,"&Kopf;"],[0,"&Lopf;"],[0,"&Mopf;"],[1,"&Oopf;"],[3,"&Sopf;"],[0,"&Topf;"],[0,"&Uopf;"],[0,"&Vopf;"],[0,"&Wopf;"],[0,"&Xopf;"],[0,"&Yopf;"],[1,"&aopf;"],[0,"&bopf;"],[0,"&copf;"],[0,"&dopf;"],[0,"&eopf;"],[0,"&fopf;"],[0,"&gopf;"],[0,"&hopf;"],[0,"&iopf;"],[0,"&jopf;"],[0,"&kopf;"],[0,"&lopf;"],[0,"&mopf;"],[0,"&nopf;"],[0,"&oopf;"],[0,"&popf;"],[0,"&qopf;"],[0,"&ropf;"],[0,"&sopf;"],[0,"&topf;"],[0,"&uopf;"],[0,"&vopf;"],[0,"&wopf;"],[0,"&xopf;"],[0,"&yopf;"],[0,"&zopf;"]]))}],[8906,"&fflig;"],[0,"&filig;"],[0,"&fllig;"],[0,"&ffilig;"],[0,"&ffllig;"]]));const Jl=new Map([[34,"&quot;"],[38,"&amp;"],[39,"&apos;"],[60,"&lt;"],[62,"&gt;"]]);String.prototype.codePointAt;function Kl(e,t){return function(n){let r,i=0,o="";for(;r=e.exec(n);)i!==r.index&&(o+=n.substring(i,r.index)),o+=t.get(r[0].charCodeAt(0)),i=r.index+1;return o+n.substring(i)}}Kl(/[&<>'"]/g,Jl),Kl(/["&\u00A0]/g,new Map([[34,"&quot;"],[38,"&amp;"],[160,"&nbsp;"]])),Kl(/[&<>\u00A0]/g,new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[160,"&nbsp;"]]));var Gl,Zl;function Yl(e){return"[object String]"===function(e){return Object.prototype.toString.call(e)}(e)}!function(e){e[e.XML=0]="XML",e[e.HTML=1]="HTML"}(Gl||(Gl={})),function(e){e[e.UTF8=0]="UTF8",e[e.ASCII=1]="ASCII",e[e.Extensive=2]="Extensive",e[e.Attribute=3]="Attribute",e[e.Text=4]="Text"}(Zl||(Zl={}));const Ql=Object.prototype.hasOwnProperty;function Xl(e,t){return Ql.call(e,t)}function ea(e){return Array.prototype.slice.call(arguments,1).forEach((function(t){if(t){if("object"!=typeof t)throw new TypeError(t+"must be object");Object.keys(t).forEach((function(n){e[n]=t[n]}))}})),e}function ta(e,t,n){return[].concat(e.slice(0,t),n,e.slice(t+1))}function na(e){return!(e>=55296&&e<=57343)&&(!(e>=64976&&e<=65007)&&(!!(65535&~e&&65534!=(65535&e))&&(!(e>=0&&e<=8)&&(11!==e&&(!(e>=14&&e<=31)&&(!(e>=127&&e<=159)&&!(e>1114111)))))))}function ra(e){if(e>65535){const t=55296+((e-=65536)>>10),n=56320+(1023&e);return String.fromCharCode(t,n)}return String.fromCharCode(e)}const ia=/\\([!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])/g,oa=new RegExp(ia.source+"|"+/&([a-z#][a-z0-9]{1,31});/gi.source,"gi"),sa=/^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;function la(e){return e.indexOf("\\")<0?e:e.replace(ia,"$1")}function aa(e){return e.indexOf("\\")<0&&e.indexOf("&")<0?e:e.replace(oa,(function(e,t,n){return t||function(e,t){if(35===t.charCodeAt(0)&&sa.test(t)){const n="x"===t[1].toLowerCase()?parseInt(t.slice(2),16):parseInt(t.slice(1),10);return na(n)?ra(n):e}const n=Wl(e);return n!==e?n:e}(e,n)}))}const ca=/[&<>"]/,ha=/[&<>"]/g,ua={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};function da(e){return ua[e]}function pa(e){return ca.test(e)?e.replace(ha,da):e}const fa=/[.?*+^$[\]\\(){}|-]/g;function ma(e){return e.replace(fa,"\\$&")}function ga(e){switch(e){case 9:case 32:return!0}return!1}function ya(e){if(e>=8192&&e<=8202)return!0;switch(e){case 9:case 10:case 11:case 12:case 13:case 32:case 160:case 5760:case 8239:case 8287:case 12288:return!0}return!1}function ka(e){return xl.test(e)||Cl.test(e)}function ba(e){switch(e){case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 124:case 125:case 126:return!0;default:return!1}}function va(e){return e=e.trim().replace(/\s+/g," "),"Ṿ"==="ẞ".toLowerCase()&&(e=e.replace(/ẞ/g,"ß")),e.toLowerCase().toUpperCase()}const wa={mdurl:e,ucmicro:t};function xa(e,t,n){let r,i,o,s;const l=e.posMax,a=e.pos;for(e.pos=t+1,r=1;e.pos<l;){if(o=e.src.charCodeAt(e.pos),93===o&&(r--,0===r)){i=!0;break}if(s=e.pos,e.md.inline.skipToken(e),91===o)if(s===e.pos-1)r++;else if(n)return e.pos=a,-1}let c=-1;return i&&(c=e.pos),e.pos=a,c}function Ca(e,t,n){let r,i=t;const o={ok:!1,pos:0,str:""};if(60===e.charCodeAt(i)){for(i++;i<n;){if(r=e.charCodeAt(i),10===r)return o;if(60===r)return o;if(62===r)return o.pos=i+1,o.str=aa(e.slice(t+1,i)),o.ok=!0,o;92===r&&i+1<n?i+=2:i++}return o}let s=0;for(;i<n&&(r=e.charCodeAt(i),32!==r)&&!(r<32||127===r);)if(92===r&&i+1<n){if(32===e.charCodeAt(i+1))break;i+=2}else{if(40===r&&(s++,s>32))return o;if(41===r){if(0===s)break;s--}i++}return t===i||0!==s||(o.str=aa(e.slice(t,i)),o.pos=i,o.ok=!0),o}function Da(e,t,n,r){let i,o=t;const s={ok:!1,can_continue:!1,pos:0,str:"",marker:0};if(r)s.str=r.str,s.marker=r.marker;else{if(o>=n)return s;let r=e.charCodeAt(o);if(34!==r&&39!==r&&40!==r)return s;t++,o++,40===r&&(r=41),s.marker=r}for(;o<n;){if(i=e.charCodeAt(o),i===s.marker)return s.pos=o+1,s.str+=aa(e.slice(t,o)),s.ok=!0,s;if(40===i&&41===s.marker)return s;92===i&&o+1<n&&o++,o++}return s.can_continue=!0,s.str+=aa(e.slice(t,o)),s}const Sa={};function _a(){this.rules=ea({},Sa)}Sa.code_inline=function(e,t,n,r,i){const o=e[t];return"<code"+i.renderAttrs(o)+">"+pa(o.content)+"</code>"},Sa.code_block=function(e,t,n,r,i){const o=e[t];return"<pre"+i.renderAttrs(o)+"><code>"+pa(e[t].content)+"</code></pre>\n"},Sa.fence=function(e,t,n,r,i){const o=e[t],s=o.info?aa(o.info).trim():"";let l,a="",c="";if(s){const e=s.split(/(\s+)/g);a=e[0],c=e.slice(2).join("")}if(l=n.highlight&&n.highlight(o.content,a,c)||pa(o.content),0===l.indexOf("<pre"))return l+"\n";if(s){const e=o.attrIndex("class"),t=o.attrs?o.attrs.slice():[];e<0?t.push(["class",n.langPrefix+a]):(t[e]=t[e].slice(),t[e][1]+=" "+n.langPrefix+a);const r={attrs:t};return`<pre><code${i.renderAttrs(r)}>${l}</code></pre>\n`}return`<pre><code${i.renderAttrs(o)}>${l}</code></pre>\n`},Sa.image=function(e,t,n,r,i){const o=e[t];return o.attrs[o.attrIndex("alt")][1]=i.renderInlineAsText(o.children,n,r),i.renderToken(e,t,n)},Sa.hardbreak=function(e,t,n){return n.xhtmlOut?"<br />\n":"<br>\n"},Sa.softbreak=function(e,t,n){return n.breaks?n.xhtmlOut?"<br />\n":"<br>\n":"\n"},Sa.text=function(e,t){return pa(e[t].content)},Sa.html_block=function(e,t){return e[t].content},Sa.html_inline=function(e,t){return e[t].content},_a.prototype.renderAttrs=function(e){let t,n,r;if(!e.attrs)return"";for(r="",t=0,n=e.attrs.length;t<n;t++)r+=" "+pa(e.attrs[t][0])+'="'+pa(e.attrs[t][1])+'"';return r},_a.prototype.renderToken=function(e,t,n){const r=e[t];let i="";if(r.hidden)return"";r.block&&-1!==r.nesting&&t&&e[t-1].hidden&&(i+="\n"),i+=(-1===r.nesting?"</":"<")+r.tag,i+=this.renderAttrs(r),0===r.nesting&&n.xhtmlOut&&(i+=" /");let o=!1;if(r.block&&(o=!0,1===r.nesting&&t+1<e.length)){const n=e[t+1];("inline"===n.type||n.hidden||-1===n.nesting&&n.tag===r.tag)&&(o=!1)}return i+=o?">\n":">",i},_a.prototype.renderInline=function(e,t,n){let r="";const i=this.rules;for(let o=0,s=e.length;o<s;o++){const s=e[o].type;void 0!==i[s]?r+=i[s](e,o,t,n,this):r+=this.renderToken(e,o,t)}return r},_a.prototype.renderInlineAsText=function(e,t,n){let r="";for(let i=0,o=e.length;i<o;i++)switch(e[i].type){case"text":case"html_inline":case"html_block":r+=e[i].content;break;case"image":r+=this.renderInlineAsText(e[i].children,t,n);break;case"softbreak":case"hardbreak":r+="\n"}return r},_a.prototype.render=function(e,t,n){let r="";const i=this.rules;for(let o=0,s=e.length;o<s;o++){const s=e[o].type;"inline"===s?r+=this.renderInline(e[o].children,t,n):void 0!==i[s]?r+=i[s](e,o,t,n,this):r+=this.renderToken(e,o,t,n)}return r};const Ea=_a;function Aa(){this.__rules__=[],this.__cache__=null}Aa.prototype.__find__=function(e){for(let t=0;t<this.__rules__.length;t++)if(this.__rules__[t].name===e)return t;return-1},Aa.prototype.__compile__=function(){const e=this,t=[""];e.__rules__.forEach((function(e){e.enabled&&e.alt.forEach((function(e){t.indexOf(e)<0&&t.push(e)}))})),e.__cache__={},t.forEach((function(t){e.__cache__[t]=[],e.__rules__.forEach((function(n){n.enabled&&(t&&n.alt.indexOf(t)<0||e.__cache__[t].push(n.fn))}))}))},Aa.prototype.at=function(e,t,n){const r=this.__find__(e),i=n||{};if(-1===r)throw new Error("Parser rule not found: "+e);this.__rules__[r].fn=t,this.__rules__[r].alt=i.alt||[],this.__cache__=null},Aa.prototype.before=function(e,t,n,r){const i=this.__find__(e),o=r||{};if(-1===i)throw new Error("Parser rule not found: "+e);this.__rules__.splice(i,0,{name:t,enabled:!0,fn:n,alt:o.alt||[]}),this.__cache__=null},Aa.prototype.after=function(e,t,n,r){const i=this.__find__(e),o=r||{};if(-1===i)throw new Error("Parser rule not found: "+e);this.__rules__.splice(i+1,0,{name:t,enabled:!0,fn:n,alt:o.alt||[]}),this.__cache__=null},Aa.prototype.push=function(e,t,n){const r=n||{};this.__rules__.push({name:e,enabled:!0,fn:t,alt:r.alt||[]}),this.__cache__=null},Aa.prototype.enable=function(e,t){Array.isArray(e)||(e=[e]);const n=[];return e.forEach((function(e){const r=this.__find__(e);if(r<0){if(t)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[r].enabled=!0,n.push(e)}),this),this.__cache__=null,n},Aa.prototype.enableOnly=function(e,t){Array.isArray(e)||(e=[e]),this.__rules__.forEach((function(e){e.enabled=!1})),this.enable(e,t)},Aa.prototype.disable=function(e,t){Array.isArray(e)||(e=[e]);const n=[];return e.forEach((function(e){const r=this.__find__(e);if(r<0){if(t)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[r].enabled=!1,n.push(e)}),this),this.__cache__=null,n},Aa.prototype.getRules=function(e){return null===this.__cache__&&this.__compile__(),this.__cache__[e]||[]};const Ma=Aa;function Oa(e,t,n){this.type=e,this.tag=t,this.attrs=null,this.map=null,this.nesting=n,this.level=0,this.children=null,this.content="",this.markup="",this.info="",this.meta=null,this.block=!1,this.hidden=!1}Oa.prototype.attrIndex=function(e){if(!this.attrs)return-1;const t=this.attrs;for(let n=0,r=t.length;n<r;n++)if(t[n][0]===e)return n;return-1},Oa.prototype.attrPush=function(e){this.attrs?this.attrs.push(e):this.attrs=[e]},Oa.prototype.attrSet=function(e,t){const n=this.attrIndex(e),r=[e,t];n<0?this.attrPush(r):this.attrs[n]=r},Oa.prototype.attrGet=function(e){const t=this.attrIndex(e);let n=null;return t>=0&&(n=this.attrs[t][1]),n},Oa.prototype.attrJoin=function(e,t){const n=this.attrIndex(e);n<0?this.attrPush([e,t]):this.attrs[n][1]=this.attrs[n][1]+" "+t};const Ta=Oa;function Na(e,t,n){this.src=e,this.env=n,this.tokens=[],this.inlineMode=!1,this.md=t}Na.prototype.Token=Ta;const Fa=Na,Ia=/\r\n?|\n/g,Ra=/\0/g;function Ba(e){return/^<\/a\s*>/i.test(e)}const za=/\+-|\.\.|\?\?\?\?|!!!!|,,|--/,La=/\((c|tm|r)\)/i,Pa=/\((c|tm|r)\)/gi,qa={c:"©",r:"®",tm:"™"};function $a(e,t){return qa[t.toLowerCase()]}function Va(e){let t=0;for(let n=e.length-1;n>=0;n--){const r=e[n];"text"!==r.type||t||(r.content=r.content.replace(Pa,$a)),"link_open"===r.type&&"auto"===r.info&&t--,"link_close"===r.type&&"auto"===r.info&&t++}}function ja(e){let t=0;for(let n=e.length-1;n>=0;n--){const r=e[n];"text"!==r.type||t||za.test(r.content)&&(r.content=r.content.replace(/\+-/g,"±").replace(/\.{2,}/g,"…").replace(/([?!])…/g,"$1..").replace(/([?!]){4,}/g,"$1$1$1").replace(/,{2,}/g,",").replace(/(^|[^-])---(?=[^-]|$)/gm,"$1—").replace(/(^|\s)--(?=\s|$)/gm,"$1–").replace(/(^|[^-\s])--(?=[^-\s]|$)/gm,"$1–")),"link_open"===r.type&&"auto"===r.info&&t--,"link_close"===r.type&&"auto"===r.info&&t++}}const Ua=/['"]/,Wa=/['"]/g;function Ha(e,t,n){return e.slice(0,t)+n+e.slice(t+1)}function Ja(e,t){let n;const r=[];for(let i=0;i<e.length;i++){const o=e[i],s=e[i].level;for(n=r.length-1;n>=0&&!(r[n].level<=s);n--);if(r.length=n+1,"text"!==o.type)continue;let l=o.content,a=0,c=l.length;e:for(;a<c;){Wa.lastIndex=a;const h=Wa.exec(l);if(!h)break;let u=!0,d=!0;a=h.index+1;const p="'"===h[0];let f=32;if(h.index-1>=0)f=l.charCodeAt(h.index-1);else for(n=i-1;n>=0&&("softbreak"!==e[n].type&&"hardbreak"!==e[n].type);n--)if(e[n].content){f=e[n].content.charCodeAt(e[n].content.length-1);break}let m=32;if(a<c)m=l.charCodeAt(a);else for(n=i+1;n<e.length&&("softbreak"!==e[n].type&&"hardbreak"!==e[n].type);n++)if(e[n].content){m=e[n].content.charCodeAt(0);break}const g=ba(f)||ka(String.fromCharCode(f)),y=ba(m)||ka(String.fromCharCode(m)),k=ya(f),b=ya(m);if(b?u=!1:y&&(k||g||(u=!1)),k?d=!1:g&&(b||y||(d=!1)),34===m&&'"'===h[0]&&f>=48&&f<=57&&(d=u=!1),u&&d&&(u=g,d=y),u||d){if(d)for(n=r.length-1;n>=0;n--){let u=r[n];if(r[n].level<s)break;if(u.single===p&&r[n].level===s){let s,d;u=r[n],p?(s=t.md.options.quotes[2],d=t.md.options.quotes[3]):(s=t.md.options.quotes[0],d=t.md.options.quotes[1]),o.content=Ha(o.content,h.index,d),e[u.token].content=Ha(e[u.token].content,u.pos,s),a+=d.length-1,u.token===i&&(a+=s.length-1),l=o.content,c=l.length,r.length=n;continue e}}u?r.push({token:i,pos:h.index,single:p,level:s}):d&&p&&(o.content=Ha(o.content,h.index,"’"))}else p&&(o.content=Ha(o.content,h.index,"’"))}}}const Ka=[["normalize",function(e){let t;t=e.src.replace(Ia,"\n"),t=t.replace(Ra,"�"),e.src=t}],["block",function(e){let t;e.inlineMode?(t=new e.Token("inline","",0),t.content=e.src,t.map=[0,1],t.children=[],e.tokens.push(t)):e.md.block.parse(e.src,e.md,e.env,e.tokens)}],["inline",function(e){const t=e.tokens;for(let n=0,r=t.length;n<r;n++){const r=t[n];"inline"===r.type&&e.md.inline.parse(r.content,e.md,e.env,r.children)}}],["linkify",function(e){const t=e.tokens;var n;if(e.md.options.linkify)for(let r=0,i=t.length;r<i;r++){if("inline"!==t[r].type||!e.md.linkify.pretest(t[r].content))continue;let i=t[r].children,o=0;for(let s=i.length-1;s>=0;s--){const l=i[s];if("link_close"!==l.type){if("html_inline"===l.type&&(n=l.content,/^<a[>\s]/i.test(n)&&o>0&&o--,Ba(l.content)&&o++),!(o>0)&&"text"===l.type&&e.md.linkify.test(l.content)){const n=l.content;let o=e.md.linkify.match(n);const a=[];let c=l.level,h=0;o.length>0&&0===o[0].index&&s>0&&"text_special"===i[s-1].type&&(o=o.slice(1));for(let t=0;t<o.length;t++){const r=o[t].url,i=e.md.normalizeLink(r);if(!e.md.validateLink(i))continue;let s=o[t].text;s=o[t].schema?"mailto:"!==o[t].schema||/^mailto:/i.test(s)?e.md.normalizeLinkText(s):e.md.normalizeLinkText("mailto:"+s).replace(/^mailto:/,""):e.md.normalizeLinkText("http://"+s).replace(/^http:\/\//,"");const l=o[t].index;if(l>h){const t=new e.Token("text","",0);t.content=n.slice(h,l),t.level=c,a.push(t)}const u=new e.Token("link_open","a",1);u.attrs=[["href",i]],u.level=c++,u.markup="linkify",u.info="auto",a.push(u);const d=new e.Token("text","",0);d.content=s,d.level=c,a.push(d);const p=new e.Token("link_close","a",-1);p.level=--c,p.markup="linkify",p.info="auto",a.push(p),h=o[t].lastIndex}if(h<n.length){const t=new e.Token("text","",0);t.content=n.slice(h),t.level=c,a.push(t)}t[r].children=i=ta(i,s,a)}}else for(s--;i[s].level!==l.level&&"link_open"!==i[s].type;)s--}}}],["replacements",function(e){let t;if(e.md.options.typographer)for(t=e.tokens.length-1;t>=0;t--)"inline"===e.tokens[t].type&&(La.test(e.tokens[t].content)&&Va(e.tokens[t].children),za.test(e.tokens[t].content)&&ja(e.tokens[t].children))}],["smartquotes",function(e){if(e.md.options.typographer)for(let t=e.tokens.length-1;t>=0;t--)"inline"===e.tokens[t].type&&Ua.test(e.tokens[t].content)&&Ja(e.tokens[t].children,e)}],["text_join",function(e){let t,n;const r=e.tokens,i=r.length;for(let e=0;e<i;e++){if("inline"!==r[e].type)continue;const i=r[e].children,o=i.length;for(t=0;t<o;t++)"text_special"===i[t].type&&(i[t].type="text");for(t=n=0;t<o;t++)"text"===i[t].type&&t+1<o&&"text"===i[t+1].type?i[t+1].content=i[t].content+i[t+1].content:(t!==n&&(i[n]=i[t]),n++);t!==n&&(i.length=n)}}]];function Ga(){this.ruler=new Ma;for(let e=0;e<Ka.length;e++)this.ruler.push(Ka[e][0],Ka[e][1])}Ga.prototype.process=function(e){const t=this.ruler.getRules("");for(let n=0,r=t.length;n<r;n++)t[n](e)},Ga.prototype.State=Fa;const Za=Ga;function Ya(e,t,n,r){this.src=e,this.md=t,this.env=n,this.tokens=r,this.bMarks=[],this.eMarks=[],this.tShift=[],this.sCount=[],this.bsCount=[],this.blkIndent=0,this.line=0,this.lineMax=0,this.tight=!1,this.ddIndent=-1,this.listIndent=-1,this.parentType="root",this.level=0;const i=this.src;for(let e=0,t=0,n=0,r=0,o=i.length,s=!1;t<o;t++){const l=i.charCodeAt(t);if(!s){if(ga(l)){n++,9===l?r+=4-r%4:r++;continue}s=!0}10!==l&&t!==o-1||(10!==l&&t++,this.bMarks.push(e),this.eMarks.push(t),this.tShift.push(n),this.sCount.push(r),this.bsCount.push(0),s=!1,n=0,r=0,e=t+1)}this.bMarks.push(i.length),this.eMarks.push(i.length),this.tShift.push(0),this.sCount.push(0),this.bsCount.push(0),this.lineMax=this.bMarks.length-1}Ya.prototype.push=function(e,t,n){const r=new Ta(e,t,n);return r.block=!0,n<0&&this.level--,r.level=this.level,n>0&&this.level++,this.tokens.push(r),r},Ya.prototype.isEmpty=function(e){return this.bMarks[e]+this.tShift[e]>=this.eMarks[e]},Ya.prototype.skipEmptyLines=function(e){for(let t=this.lineMax;e<t&&!(this.bMarks[e]+this.tShift[e]<this.eMarks[e]);e++);return e},Ya.prototype.skipSpaces=function(e){for(let t=this.src.length;e<t;e++){if(!ga(this.src.charCodeAt(e)))break}return e},Ya.prototype.skipSpacesBack=function(e,t){if(e<=t)return e;for(;e>t;)if(!ga(this.src.charCodeAt(--e)))return e+1;return e},Ya.prototype.skipChars=function(e,t){for(let n=this.src.length;e<n&&this.src.charCodeAt(e)===t;e++);return e},Ya.prototype.skipCharsBack=function(e,t,n){if(e<=n)return e;for(;e>n;)if(t!==this.src.charCodeAt(--e))return e+1;return e},Ya.prototype.getLines=function(e,t,n,r){if(e>=t)return"";const i=new Array(t-e);for(let o=0,s=e;s<t;s++,o++){let e=0;const l=this.bMarks[s];let a,c=l;for(a=s+1<t||r?this.eMarks[s]+1:this.eMarks[s];c<a&&e<n;){const t=this.src.charCodeAt(c);if(ga(t))9===t?e+=4-(e+this.bsCount[s])%4:e++;else{if(!(c-l<this.tShift[s]))break;e++}c++}i[o]=e>n?new Array(e-n+1).join(" ")+this.src.slice(c,a):this.src.slice(c,a)}return i.join("")},Ya.prototype.Token=Ta;const Qa=Ya;function Xa(e,t){const n=e.bMarks[t]+e.tShift[t],r=e.eMarks[t];return e.src.slice(n,r)}function ec(e){const t=[],n=e.length;let r=0,i=e.charCodeAt(r),o=!1,s=0,l="";for(;r<n;)124===i&&(o?(l+=e.substring(s,r-1),s=r):(t.push(l+e.substring(s,r)),l="",s=r+1)),o=92===i,r++,i=e.charCodeAt(r);return t.push(l+e.substring(s)),t}function tc(e,t){const n=e.eMarks[t];let r=e.bMarks[t]+e.tShift[t];const i=e.src.charCodeAt(r++);if(42!==i&&45!==i&&43!==i)return-1;if(r<n){if(!ga(e.src.charCodeAt(r)))return-1}return r}function nc(e,t){const n=e.bMarks[t]+e.tShift[t],r=e.eMarks[t];let i=n;if(i+1>=r)return-1;let o=e.src.charCodeAt(i++);if(o<48||o>57)return-1;for(;;){if(i>=r)return-1;if(o=e.src.charCodeAt(i++),!(o>=48&&o<=57)){if(41===o||46===o)break;return-1}if(i-n>=10)return-1}return i<r&&(o=e.src.charCodeAt(i),!ga(o))?-1:i}const rc="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",ic="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>",oc=new RegExp("^(?:"+rc+"|"+ic+"|\x3c!---?>|\x3c!--(?:[^-]|-[^-]|--[^>])*--\x3e|<[?][\\s\\S]*?[?]>|<![A-Za-z][^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)"),sc=new RegExp("^(?:"+rc+"|"+ic+")"),lc=[[/^<(script|pre|style|textarea)(?=(\s|>|$))/i,/<\/(script|pre|style|textarea)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","nav","noframes","ol","optgroup","option","p","param","search","section","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"].join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(sc.source+"\\s*$"),/^$/,!1]];const ac=[["table",function(e,t,n,r){if(t+2>n)return!1;let i=t+1;if(e.sCount[i]<e.blkIndent)return!1;if(e.sCount[i]-e.blkIndent>=4)return!1;let o=e.bMarks[i]+e.tShift[i];if(o>=e.eMarks[i])return!1;const s=e.src.charCodeAt(o++);if(124!==s&&45!==s&&58!==s)return!1;if(o>=e.eMarks[i])return!1;const l=e.src.charCodeAt(o++);if(124!==l&&45!==l&&58!==l&&!ga(l))return!1;if(45===s&&ga(l))return!1;for(;o<e.eMarks[i];){const t=e.src.charCodeAt(o);if(124!==t&&45!==t&&58!==t&&!ga(t))return!1;o++}let a=Xa(e,t+1),c=a.split("|");const h=[];for(let e=0;e<c.length;e++){const t=c[e].trim();if(!t){if(0===e||e===c.length-1)continue;return!1}if(!/^:?-+:?$/.test(t))return!1;58===t.charCodeAt(t.length-1)?h.push(58===t.charCodeAt(0)?"center":"right"):58===t.charCodeAt(0)?h.push("left"):h.push("")}if(a=Xa(e,t).trim(),-1===a.indexOf("|"))return!1;if(e.sCount[t]-e.blkIndent>=4)return!1;c=ec(a),c.length&&""===c[0]&&c.shift(),c.length&&""===c[c.length-1]&&c.pop();const u=c.length;if(0===u||u!==h.length)return!1;if(r)return!0;const d=e.parentType;e.parentType="table";const p=e.md.block.ruler.getRules("blockquote"),f=[t,0];e.push("table_open","table",1).map=f,e.push("thead_open","thead",1).map=[t,t+1],e.push("tr_open","tr",1).map=[t,t+1];for(let t=0;t<c.length;t++){const n=e.push("th_open","th",1);h[t]&&(n.attrs=[["style","text-align:"+h[t]]]);const r=e.push("inline","",0);r.content=c[t].trim(),r.children=[],e.push("th_close","th",-1)}let m;e.push("tr_close","tr",-1),e.push("thead_close","thead",-1);let g=0;for(i=t+2;i<n&&!(e.sCount[i]<e.blkIndent);i++){let r=!1;for(let t=0,o=p.length;t<o;t++)if(p[t](e,i,n,!0)){r=!0;break}if(r)break;if(a=Xa(e,i).trim(),!a)break;if(e.sCount[i]-e.blkIndent>=4)break;if(c=ec(a),c.length&&""===c[0]&&c.shift(),c.length&&""===c[c.length-1]&&c.pop(),g+=u-c.length,g>65536)break;if(i===t+2){e.push("tbody_open","tbody",1).map=m=[t+2,0]}e.push("tr_open","tr",1).map=[i,i+1];for(let t=0;t<u;t++){const n=e.push("td_open","td",1);h[t]&&(n.attrs=[["style","text-align:"+h[t]]]);const r=e.push("inline","",0);r.content=c[t]?c[t].trim():"",r.children=[],e.push("td_close","td",-1)}e.push("tr_close","tr",-1)}return m&&(e.push("tbody_close","tbody",-1),m[1]=i),e.push("table_close","table",-1),f[1]=i,e.parentType=d,e.line=i,!0},["paragraph","reference"]],["code",function(e,t,n){if(e.sCount[t]-e.blkIndent<4)return!1;let r=t+1,i=r;for(;r<n;)if(e.isEmpty(r))r++;else{if(!(e.sCount[r]-e.blkIndent>=4))break;r++,i=r}e.line=i;const o=e.push("code_block","code",0);return o.content=e.getLines(t,i,4+e.blkIndent,!1)+"\n",o.map=[t,e.line],!0}],["fence",function(e,t,n,r){let i=e.bMarks[t]+e.tShift[t],o=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(i+3>o)return!1;const s=e.src.charCodeAt(i);if(126!==s&&96!==s)return!1;let l=i;i=e.skipChars(i,s);let a=i-l;if(a<3)return!1;const c=e.src.slice(l,i),h=e.src.slice(i,o);if(96===s&&h.indexOf(String.fromCharCode(s))>=0)return!1;if(r)return!0;let u=t,d=!1;for(;(u++,!(u>=n))&&(i=l=e.bMarks[u]+e.tShift[u],o=e.eMarks[u],!(i<o&&e.sCount[u]<e.blkIndent));)if(e.src.charCodeAt(i)===s&&!(e.sCount[u]-e.blkIndent>=4||(i=e.skipChars(i,s),i-l<a||(i=e.skipSpaces(i),i<o)))){d=!0;break}a=e.sCount[t],e.line=u+(d?1:0);const p=e.push("fence","code",0);return p.info=h,p.content=e.getLines(t+1,u,a,!0),p.markup=c,p.map=[t,e.line],!0},["paragraph","reference","blockquote","list"]],["blockquote",function(e,t,n,r){let i=e.bMarks[t]+e.tShift[t],o=e.eMarks[t];const s=e.lineMax;if(e.sCount[t]-e.blkIndent>=4)return!1;if(62!==e.src.charCodeAt(i))return!1;if(r)return!0;const l=[],a=[],c=[],h=[],u=e.md.block.ruler.getRules("blockquote"),d=e.parentType;e.parentType="blockquote";let p,f=!1;for(p=t;p<n;p++){const t=e.sCount[p]<e.blkIndent;if(i=e.bMarks[p]+e.tShift[p],o=e.eMarks[p],i>=o)break;if(62===e.src.charCodeAt(i++)&&!t){let t,n,r=e.sCount[p]+1;32===e.src.charCodeAt(i)?(i++,r++,n=!1,t=!0):9===e.src.charCodeAt(i)?(t=!0,(e.bsCount[p]+r)%4==3?(i++,r++,n=!1):n=!0):t=!1;let s=r;for(l.push(e.bMarks[p]),e.bMarks[p]=i;i<o;){const t=e.src.charCodeAt(i);if(!ga(t))break;9===t?s+=4-(s+e.bsCount[p]+(n?1:0))%4:s++,i++}f=i>=o,a.push(e.bsCount[p]),e.bsCount[p]=e.sCount[p]+1+(t?1:0),c.push(e.sCount[p]),e.sCount[p]=s-r,h.push(e.tShift[p]),e.tShift[p]=i-e.bMarks[p];continue}if(f)break;let r=!1;for(let t=0,i=u.length;t<i;t++)if(u[t](e,p,n,!0)){r=!0;break}if(r){e.lineMax=p,0!==e.blkIndent&&(l.push(e.bMarks[p]),a.push(e.bsCount[p]),h.push(e.tShift[p]),c.push(e.sCount[p]),e.sCount[p]-=e.blkIndent);break}l.push(e.bMarks[p]),a.push(e.bsCount[p]),h.push(e.tShift[p]),c.push(e.sCount[p]),e.sCount[p]=-1}const m=e.blkIndent;e.blkIndent=0;const g=e.push("blockquote_open","blockquote",1);g.markup=">";const y=[t,0];g.map=y,e.md.block.tokenize(e,t,p),e.push("blockquote_close","blockquote",-1).markup=">",e.lineMax=s,e.parentType=d,y[1]=e.line;for(let n=0;n<h.length;n++)e.bMarks[n+t]=l[n],e.tShift[n+t]=h[n],e.sCount[n+t]=c[n],e.bsCount[n+t]=a[n];return e.blkIndent=m,!0},["paragraph","reference","blockquote","list"]],["hr",function(e,t,n,r){const i=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;let o=e.bMarks[t]+e.tShift[t];const s=e.src.charCodeAt(o++);if(42!==s&&45!==s&&95!==s)return!1;let l=1;for(;o<i;){const t=e.src.charCodeAt(o++);if(t!==s&&!ga(t))return!1;t===s&&l++}if(l<3)return!1;if(r)return!0;e.line=t+1;const a=e.push("hr","hr",0);return a.map=[t,e.line],a.markup=Array(l+1).join(String.fromCharCode(s)),!0},["paragraph","reference","blockquote","list"]],["list",function(e,t,n,r){let i,o,s,l,a=t,c=!0;if(e.sCount[a]-e.blkIndent>=4)return!1;if(e.listIndent>=0&&e.sCount[a]-e.listIndent>=4&&e.sCount[a]<e.blkIndent)return!1;let h,u,d,p=!1;if(r&&"paragraph"===e.parentType&&e.sCount[a]>=e.blkIndent&&(p=!0),(d=nc(e,a))>=0){if(h=!0,s=e.bMarks[a]+e.tShift[a],u=Number(e.src.slice(s,d-1)),p&&1!==u)return!1}else{if(!((d=tc(e,a))>=0))return!1;h=!1}if(p&&e.skipSpaces(d)>=e.eMarks[a])return!1;if(r)return!0;const f=e.src.charCodeAt(d-1),m=e.tokens.length;h?(l=e.push("ordered_list_open","ol",1),1!==u&&(l.attrs=[["start",u]])):l=e.push("bullet_list_open","ul",1);const g=[a,0];l.map=g,l.markup=String.fromCharCode(f);let y=!1;const k=e.md.block.ruler.getRules("list"),b=e.parentType;for(e.parentType="list";a<n;){o=d,i=e.eMarks[a];const t=e.sCount[a]+d-(e.bMarks[a]+e.tShift[a]);let r=t;for(;o<i;){const t=e.src.charCodeAt(o);if(9===t)r+=4-(r+e.bsCount[a])%4;else{if(32!==t)break;r++}o++}const u=o;let p;p=u>=i?1:r-t,p>4&&(p=1);const m=t+p;l=e.push("list_item_open","li",1),l.markup=String.fromCharCode(f);const g=[a,0];l.map=g,h&&(l.info=e.src.slice(s,d-1));const b=e.tight,v=e.tShift[a],w=e.sCount[a],x=e.listIndent;if(e.listIndent=e.blkIndent,e.blkIndent=m,e.tight=!0,e.tShift[a]=u-e.bMarks[a],e.sCount[a]=r,u>=i&&e.isEmpty(a+1)?e.line=Math.min(e.line+2,n):e.md.block.tokenize(e,a,n,!0),e.tight&&!y||(c=!1),y=e.line-a>1&&e.isEmpty(e.line-1),e.blkIndent=e.listIndent,e.listIndent=x,e.tShift[a]=v,e.sCount[a]=w,e.tight=b,l=e.push("list_item_close","li",-1),l.markup=String.fromCharCode(f),a=e.line,g[1]=a,a>=n)break;if(e.sCount[a]<e.blkIndent)break;if(e.sCount[a]-e.blkIndent>=4)break;let C=!1;for(let t=0,r=k.length;t<r;t++)if(k[t](e,a,n,!0)){C=!0;break}if(C)break;if(h){if(d=nc(e,a),d<0)break;s=e.bMarks[a]+e.tShift[a]}else if(d=tc(e,a),d<0)break;if(f!==e.src.charCodeAt(d-1))break}return l=h?e.push("ordered_list_close","ol",-1):e.push("bullet_list_close","ul",-1),l.markup=String.fromCharCode(f),g[1]=a,e.line=a,e.parentType=b,c&&function(e,t){const n=e.level+2;for(let r=t+2,i=e.tokens.length-2;r<i;r++)e.tokens[r].level===n&&"paragraph_open"===e.tokens[r].type&&(e.tokens[r+2].hidden=!0,e.tokens[r].hidden=!0,r+=2)}(e,m),!0},["paragraph","reference","blockquote"]],["reference",function(e,t,n,r){let i=e.bMarks[t]+e.tShift[t],o=e.eMarks[t],s=t+1;if(e.sCount[t]-e.blkIndent>=4)return!1;if(91!==e.src.charCodeAt(i))return!1;function l(t){const n=e.lineMax;if(t>=n||e.isEmpty(t))return null;let r=!1;if(e.sCount[t]-e.blkIndent>3&&(r=!0),e.sCount[t]<0&&(r=!0),!r){const r=e.md.block.ruler.getRules("reference"),i=e.parentType;e.parentType="reference";let o=!1;for(let i=0,s=r.length;i<s;i++)if(r[i](e,t,n,!0)){o=!0;break}if(e.parentType=i,o)return null}const i=e.bMarks[t]+e.tShift[t],o=e.eMarks[t];return e.src.slice(i,o+1)}let a=e.src.slice(i,o+1);o=a.length;let c=-1;for(i=1;i<o;i++){const e=a.charCodeAt(i);if(91===e)return!1;if(93===e){c=i;break}if(10===e){const e=l(s);null!==e&&(a+=e,o=a.length,s++)}else if(92===e&&(i++,i<o&&10===a.charCodeAt(i))){const e=l(s);null!==e&&(a+=e,o=a.length,s++)}}if(c<0||58!==a.charCodeAt(c+1))return!1;for(i=c+2;i<o;i++){const e=a.charCodeAt(i);if(10===e){const e=l(s);null!==e&&(a+=e,o=a.length,s++)}else if(!ga(e))break}const h=e.md.helpers.parseLinkDestination(a,i,o);if(!h.ok)return!1;const u=e.md.normalizeLink(h.str);if(!e.md.validateLink(u))return!1;i=h.pos;const d=i,p=s,f=i;for(;i<o;i++){const e=a.charCodeAt(i);if(10===e){const e=l(s);null!==e&&(a+=e,o=a.length,s++)}else if(!ga(e))break}let m,g=e.md.helpers.parseLinkTitle(a,i,o);for(;g.can_continue;){const t=l(s);if(null===t)break;a+=t,i=o,o=a.length,s++,g=e.md.helpers.parseLinkTitle(a,i,o,g)}for(i<o&&f!==i&&g.ok?(m=g.str,i=g.pos):(m="",i=d,s=p);i<o;){if(!ga(a.charCodeAt(i)))break;i++}if(i<o&&10!==a.charCodeAt(i)&&m)for(m="",i=d,s=p;i<o;){if(!ga(a.charCodeAt(i)))break;i++}if(i<o&&10!==a.charCodeAt(i))return!1;const y=va(a.slice(1,c));return!!y&&(r||(void 0===e.env.references&&(e.env.references={}),void 0===e.env.references[y]&&(e.env.references[y]={title:m,href:u}),e.line=s),!0)}],["html_block",function(e,t,n,r){let i=e.bMarks[t]+e.tShift[t],o=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;if(!e.md.options.html)return!1;if(60!==e.src.charCodeAt(i))return!1;let s=e.src.slice(i,o),l=0;for(;l<lc.length&&!lc[l][0].test(s);l++);if(l===lc.length)return!1;if(r)return lc[l][2];let a=t+1;if(!lc[l][1].test(s))for(;a<n&&!(e.sCount[a]<e.blkIndent);a++)if(i=e.bMarks[a]+e.tShift[a],o=e.eMarks[a],s=e.src.slice(i,o),lc[l][1].test(s)){0!==s.length&&a++;break}e.line=a;const c=e.push("html_block","",0);return c.map=[t,a],c.content=e.getLines(t,a,e.blkIndent,!0),!0},["paragraph","reference","blockquote"]],["heading",function(e,t,n,r){let i=e.bMarks[t]+e.tShift[t],o=e.eMarks[t];if(e.sCount[t]-e.blkIndent>=4)return!1;let s=e.src.charCodeAt(i);if(35!==s||i>=o)return!1;let l=1;for(s=e.src.charCodeAt(++i);35===s&&i<o&&l<=6;)l++,s=e.src.charCodeAt(++i);if(l>6||i<o&&!ga(s))return!1;if(r)return!0;o=e.skipSpacesBack(o,i);const a=e.skipCharsBack(o,35,i);a>i&&ga(e.src.charCodeAt(a-1))&&(o=a),e.line=t+1;const c=e.push("heading_open","h"+String(l),1);c.markup="########".slice(0,l),c.map=[t,e.line];const h=e.push("inline","",0);return h.content=e.src.slice(i,o).trim(),h.map=[t,e.line],h.children=[],e.push("heading_close","h"+String(l),-1).markup="########".slice(0,l),!0},["paragraph","reference","blockquote"]],["lheading",function(e,t,n){const r=e.md.block.ruler.getRules("paragraph");if(e.sCount[t]-e.blkIndent>=4)return!1;const i=e.parentType;e.parentType="paragraph";let o,s=0,l=t+1;for(;l<n&&!e.isEmpty(l);l++){if(e.sCount[l]-e.blkIndent>3)continue;if(e.sCount[l]>=e.blkIndent){let t=e.bMarks[l]+e.tShift[l];const n=e.eMarks[l];if(t<n&&(o=e.src.charCodeAt(t),(45===o||61===o)&&(t=e.skipChars(t,o),t=e.skipSpaces(t),t>=n))){s=61===o?1:2;break}}if(e.sCount[l]<0)continue;let t=!1;for(let i=0,o=r.length;i<o;i++)if(r[i](e,l,n,!0)){t=!0;break}if(t)break}if(!s)return!1;const a=e.getLines(t,l,e.blkIndent,!1).trim();e.line=l+1;const c=e.push("heading_open","h"+String(s),1);c.markup=String.fromCharCode(o),c.map=[t,e.line];const h=e.push("inline","",0);return h.content=a,h.map=[t,e.line-1],h.children=[],e.push("heading_close","h"+String(s),-1).markup=String.fromCharCode(o),e.parentType=i,!0}],["paragraph",function(e,t,n){const r=e.md.block.ruler.getRules("paragraph"),i=e.parentType;let o=t+1;for(e.parentType="paragraph";o<n&&!e.isEmpty(o);o++){if(e.sCount[o]-e.blkIndent>3)continue;if(e.sCount[o]<0)continue;let t=!1;for(let i=0,s=r.length;i<s;i++)if(r[i](e,o,n,!0)){t=!0;break}if(t)break}const s=e.getLines(t,o,e.blkIndent,!1).trim();e.line=o,e.push("paragraph_open","p",1).map=[t,e.line];const l=e.push("inline","",0);return l.content=s,l.map=[t,e.line],l.children=[],e.push("paragraph_close","p",-1),e.parentType=i,!0}]];function cc(){this.ruler=new Ma;for(let e=0;e<ac.length;e++)this.ruler.push(ac[e][0],ac[e][1],{alt:(ac[e][2]||[]).slice()})}cc.prototype.tokenize=function(e,t,n){const r=this.ruler.getRules(""),i=r.length,o=e.md.options.maxNesting;let s=t,l=!1;for(;s<n&&(e.line=s=e.skipEmptyLines(s),!(s>=n))&&!(e.sCount[s]<e.blkIndent);){if(e.level>=o){e.line=n;break}const t=e.line;let a=!1;for(let o=0;o<i;o++)if(a=r[o](e,s,n,!1),a){if(t>=e.line)throw new Error("block rule didn't increment state.line");break}if(!a)throw new Error("none of the block rules matched");e.tight=!l,e.isEmpty(e.line-1)&&(l=!0),s=e.line,s<n&&e.isEmpty(s)&&(l=!0,s++,e.line=s)}},cc.prototype.parse=function(e,t,n,r){if(!e)return;const i=new this.State(e,t,n,r);this.tokenize(i,i.line,i.lineMax)},cc.prototype.State=Qa;const hc=cc;function uc(e,t,n,r){this.src=e,this.env=n,this.md=t,this.tokens=r,this.tokens_meta=Array(r.length),this.pos=0,this.posMax=this.src.length,this.level=0,this.pending="",this.pendingLevel=0,this.cache={},this.delimiters=[],this._prev_delimiters=[],this.backticks={},this.backticksScanned=!1,this.linkLevel=0}uc.prototype.pushPending=function(){const e=new Ta("text","",0);return e.content=this.pending,e.level=this.pendingLevel,this.tokens.push(e),this.pending="",e},uc.prototype.push=function(e,t,n){this.pending&&this.pushPending();const r=new Ta(e,t,n);let i=null;return n<0&&(this.level--,this.delimiters=this._prev_delimiters.pop()),r.level=this.level,n>0&&(this.level++,this._prev_delimiters.push(this.delimiters),this.delimiters=[],i={delimiters:this.delimiters}),this.pendingLevel=this.level,this.tokens.push(r),this.tokens_meta.push(i),r},uc.prototype.scanDelims=function(e,t){const n=this.posMax,r=this.src.charCodeAt(e),i=e>0?this.src.charCodeAt(e-1):32;let o=e;for(;o<n&&this.src.charCodeAt(o)===r;)o++;const s=o-e,l=o<n?this.src.charCodeAt(o):32,a=ba(i)||ka(String.fromCharCode(i)),c=ba(l)||ka(String.fromCharCode(l)),h=ya(i),u=ya(l),d=!u&&(!c||h||a),p=!h&&(!a||u||c);return{can_open:d&&(t||!p||a),can_close:p&&(t||!d||c),length:s}},uc.prototype.Token=Ta;const dc=uc;function pc(e){switch(e){case 10:case 33:case 35:case 36:case 37:case 38:case 42:case 43:case 45:case 58:case 60:case 61:case 62:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 125:case 126:return!0;default:return!1}}const fc=/(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;const mc=[];for(let e=0;e<256;e++)mc.push(0);function gc(e,t){let n;const r=[],i=t.length;for(let o=0;o<i;o++){const i=t[o];if(126!==i.marker)continue;if(-1===i.end)continue;const s=t[i.end];n=e.tokens[i.token],n.type="s_open",n.tag="s",n.nesting=1,n.markup="~~",n.content="",n=e.tokens[s.token],n.type="s_close",n.tag="s",n.nesting=-1,n.markup="~~",n.content="","text"===e.tokens[s.token-1].type&&"~"===e.tokens[s.token-1].content&&r.push(s.token-1)}for(;r.length;){const t=r.pop();let i=t+1;for(;i<e.tokens.length&&"s_close"===e.tokens[i].type;)i++;i--,t!==i&&(n=e.tokens[i],e.tokens[i]=e.tokens[t],e.tokens[t]=n)}}"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach((function(e){mc[e.charCodeAt(0)]=1}));const yc={tokenize:function(e,t){const n=e.pos,r=e.src.charCodeAt(n);if(t)return!1;if(126!==r)return!1;const i=e.scanDelims(e.pos,!0);let o=i.length;const s=String.fromCharCode(r);if(o<2)return!1;let l;o%2&&(l=e.push("text","",0),l.content=s,o--);for(let t=0;t<o;t+=2)l=e.push("text","",0),l.content=s+s,e.delimiters.push({marker:r,length:0,token:e.tokens.length-1,end:-1,open:i.can_open,close:i.can_close});return e.pos+=i.length,!0},postProcess:function(e){const t=e.tokens_meta,n=e.tokens_meta.length;gc(e,e.delimiters);for(let r=0;r<n;r++)t[r]&&t[r].delimiters&&gc(e,t[r].delimiters)}};function kc(e,t){for(let n=t.length-1;n>=0;n--){const r=t[n];if(95!==r.marker&&42!==r.marker)continue;if(-1===r.end)continue;const i=t[r.end],o=n>0&&t[n-1].end===r.end+1&&t[n-1].marker===r.marker&&t[n-1].token===r.token-1&&t[r.end+1].token===i.token+1,s=String.fromCharCode(r.marker),l=e.tokens[r.token];l.type=o?"strong_open":"em_open",l.tag=o?"strong":"em",l.nesting=1,l.markup=o?s+s:s,l.content="";const a=e.tokens[i.token];a.type=o?"strong_close":"em_close",a.tag=o?"strong":"em",a.nesting=-1,a.markup=o?s+s:s,a.content="",o&&(e.tokens[t[n-1].token].content="",e.tokens[t[r.end+1].token].content="",n--)}}const bc={tokenize:function(e,t){const n=e.pos,r=e.src.charCodeAt(n);if(t)return!1;if(95!==r&&42!==r)return!1;const i=e.scanDelims(e.pos,42===r);for(let t=0;t<i.length;t++){e.push("text","",0).content=String.fromCharCode(r),e.delimiters.push({marker:r,length:i.length,token:e.tokens.length-1,end:-1,open:i.can_open,close:i.can_close})}return e.pos+=i.length,!0},postProcess:function(e){const t=e.tokens_meta,n=e.tokens_meta.length;kc(e,e.delimiters);for(let r=0;r<n;r++)t[r]&&t[r].delimiters&&kc(e,t[r].delimiters)}};const vc=/^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/,wc=/^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\x00-\x20]*)$/;const xc=/^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i,Cc=/^&([a-z][a-z0-9]{1,31});/i;function Dc(e){const t={},n=e.length;if(!n)return;let r=0,i=-2;const o=[];for(let s=0;s<n;s++){const n=e[s];if(o.push(0),e[r].marker===n.marker&&i===n.token-1||(r=s),i=n.token,n.length=n.length||0,!n.close)continue;t.hasOwnProperty(n.marker)||(t[n.marker]=[-1,-1,-1,-1,-1,-1]);const l=t[n.marker][(n.open?3:0)+n.length%3];let a=r-o[r]-1,c=a;for(;a>l;a-=o[a]+1){const t=e[a];if(t.marker===n.marker&&(t.open&&t.end<0)){let r=!1;if((t.close||n.open)&&(t.length+n.length)%3==0&&(t.length%3==0&&n.length%3==0||(r=!0)),!r){const r=a>0&&!e[a-1].open?o[a-1]+1:0;o[s]=s-a+r,o[a]=r,n.open=!1,t.end=s,t.close=!1,c=-1,i=-2;break}}}-1!==c&&(t[n.marker][(n.open?3:0)+(n.length||0)%3]=c)}}const Sc=[["text",function(e,t){let n=e.pos;for(;n<e.posMax&&!pc(e.src.charCodeAt(n));)n++;return n!==e.pos&&(t||(e.pending+=e.src.slice(e.pos,n)),e.pos=n,!0)}],["linkify",function(e,t){if(!e.md.options.linkify)return!1;if(e.linkLevel>0)return!1;const n=e.pos;if(n+3>e.posMax)return!1;if(58!==e.src.charCodeAt(n))return!1;if(47!==e.src.charCodeAt(n+1))return!1;if(47!==e.src.charCodeAt(n+2))return!1;const r=e.pending.match(fc);if(!r)return!1;const i=r[1],o=e.md.linkify.matchAtStart(e.src.slice(n-i.length));if(!o)return!1;let s=o.url;if(s.length<=i.length)return!1;s=s.replace(/\*+$/,"");const l=e.md.normalizeLink(s);if(!e.md.validateLink(l))return!1;if(!t){e.pending=e.pending.slice(0,-i.length);const t=e.push("link_open","a",1);t.attrs=[["href",l]],t.markup="linkify",t.info="auto";e.push("text","",0).content=e.md.normalizeLinkText(s);const n=e.push("link_close","a",-1);n.markup="linkify",n.info="auto"}return e.pos+=s.length-i.length,!0}],["newline",function(e,t){let n=e.pos;if(10!==e.src.charCodeAt(n))return!1;const r=e.pending.length-1,i=e.posMax;if(!t)if(r>=0&&32===e.pending.charCodeAt(r))if(r>=1&&32===e.pending.charCodeAt(r-1)){let t=r-1;for(;t>=1&&32===e.pending.charCodeAt(t-1);)t--;e.pending=e.pending.slice(0,t),e.push("hardbreak","br",0)}else e.pending=e.pending.slice(0,-1),e.push("softbreak","br",0);else e.push("softbreak","br",0);for(n++;n<i&&ga(e.src.charCodeAt(n));)n++;return e.pos=n,!0}],["escape",function(e,t){let n=e.pos;const r=e.posMax;if(92!==e.src.charCodeAt(n))return!1;if(n++,n>=r)return!1;let i=e.src.charCodeAt(n);if(10===i){for(t||e.push("hardbreak","br",0),n++;n<r&&(i=e.src.charCodeAt(n),ga(i));)n++;return e.pos=n,!0}let o=e.src[n];if(i>=55296&&i<=56319&&n+1<r){const t=e.src.charCodeAt(n+1);t>=56320&&t<=57343&&(o+=e.src[n+1],n++)}const s="\\"+o;if(!t){const t=e.push("text_special","",0);i<256&&0!==mc[i]?t.content=o:t.content=s,t.markup=s,t.info="escape"}return e.pos=n+1,!0}],["backticks",function(e,t){let n=e.pos;if(96!==e.src.charCodeAt(n))return!1;const r=n;n++;const i=e.posMax;for(;n<i&&96===e.src.charCodeAt(n);)n++;const o=e.src.slice(r,n),s=o.length;if(e.backticksScanned&&(e.backticks[s]||0)<=r)return t||(e.pending+=o),e.pos+=s,!0;let l,a=n;for(;-1!==(l=e.src.indexOf("`",a));){for(a=l+1;a<i&&96===e.src.charCodeAt(a);)a++;const r=a-l;if(r===s){if(!t){const t=e.push("code_inline","code",0);t.markup=o,t.content=e.src.slice(n,l).replace(/\n/g," ").replace(/^ (.+) $/,"$1")}return e.pos=a,!0}e.backticks[r]=l}return e.backticksScanned=!0,t||(e.pending+=o),e.pos+=s,!0}],["strikethrough",yc.tokenize],["emphasis",bc.tokenize],["link",function(e,t){let n,r,i,o,s="",l="",a=e.pos,c=!0;if(91!==e.src.charCodeAt(e.pos))return!1;const h=e.pos,u=e.posMax,d=e.pos+1,p=e.md.helpers.parseLinkLabel(e,e.pos,!0);if(p<0)return!1;let f=p+1;if(f<u&&40===e.src.charCodeAt(f)){for(c=!1,f++;f<u&&(n=e.src.charCodeAt(f),ga(n)||10===n);f++);if(f>=u)return!1;if(a=f,i=e.md.helpers.parseLinkDestination(e.src,f,e.posMax),i.ok){for(s=e.md.normalizeLink(i.str),e.md.validateLink(s)?f=i.pos:s="",a=f;f<u&&(n=e.src.charCodeAt(f),ga(n)||10===n);f++);if(i=e.md.helpers.parseLinkTitle(e.src,f,e.posMax),f<u&&a!==f&&i.ok)for(l=i.str,f=i.pos;f<u&&(n=e.src.charCodeAt(f),ga(n)||10===n);f++);}(f>=u||41!==e.src.charCodeAt(f))&&(c=!0),f++}if(c){if(void 0===e.env.references)return!1;if(f<u&&91===e.src.charCodeAt(f)?(a=f+1,f=e.md.helpers.parseLinkLabel(e,f),f>=0?r=e.src.slice(a,f++):f=p+1):f=p+1,r||(r=e.src.slice(d,p)),o=e.env.references[va(r)],!o)return e.pos=h,!1;s=o.href,l=o.title}if(!t){e.pos=d,e.posMax=p;const t=[["href",s]];e.push("link_open","a",1).attrs=t,l&&t.push(["title",l]),e.linkLevel++,e.md.inline.tokenize(e),e.linkLevel--,e.push("link_close","a",-1)}return e.pos=f,e.posMax=u,!0}],["image",function(e,t){let n,r,i,o,s,l,a,c,h="";const u=e.pos,d=e.posMax;if(33!==e.src.charCodeAt(e.pos))return!1;if(91!==e.src.charCodeAt(e.pos+1))return!1;const p=e.pos+2,f=e.md.helpers.parseLinkLabel(e,e.pos+1,!1);if(f<0)return!1;if(o=f+1,o<d&&40===e.src.charCodeAt(o)){for(o++;o<d&&(n=e.src.charCodeAt(o),ga(n)||10===n);o++);if(o>=d)return!1;for(c=o,l=e.md.helpers.parseLinkDestination(e.src,o,e.posMax),l.ok&&(h=e.md.normalizeLink(l.str),e.md.validateLink(h)?o=l.pos:h=""),c=o;o<d&&(n=e.src.charCodeAt(o),ga(n)||10===n);o++);if(l=e.md.helpers.parseLinkTitle(e.src,o,e.posMax),o<d&&c!==o&&l.ok)for(a=l.str,o=l.pos;o<d&&(n=e.src.charCodeAt(o),ga(n)||10===n);o++);else a="";if(o>=d||41!==e.src.charCodeAt(o))return e.pos=u,!1;o++}else{if(void 0===e.env.references)return!1;if(o<d&&91===e.src.charCodeAt(o)?(c=o+1,o=e.md.helpers.parseLinkLabel(e,o),o>=0?i=e.src.slice(c,o++):o=f+1):o=f+1,i||(i=e.src.slice(p,f)),s=e.env.references[va(i)],!s)return e.pos=u,!1;h=s.href,a=s.title}if(!t){r=e.src.slice(p,f);const t=[];e.md.inline.parse(r,e.md,e.env,t);const n=e.push("image","img",0),i=[["src",h],["alt",""]];n.attrs=i,n.children=t,n.content=r,a&&i.push(["title",a])}return e.pos=o,e.posMax=d,!0}],["autolink",function(e,t){let n=e.pos;if(60!==e.src.charCodeAt(n))return!1;const r=e.pos,i=e.posMax;for(;;){if(++n>=i)return!1;const t=e.src.charCodeAt(n);if(60===t)return!1;if(62===t)break}const o=e.src.slice(r+1,n);if(wc.test(o)){const n=e.md.normalizeLink(o);if(!e.md.validateLink(n))return!1;if(!t){const t=e.push("link_open","a",1);t.attrs=[["href",n]],t.markup="autolink",t.info="auto";e.push("text","",0).content=e.md.normalizeLinkText(o);const r=e.push("link_close","a",-1);r.markup="autolink",r.info="auto"}return e.pos+=o.length+2,!0}if(vc.test(o)){const n=e.md.normalizeLink("mailto:"+o);if(!e.md.validateLink(n))return!1;if(!t){const t=e.push("link_open","a",1);t.attrs=[["href",n]],t.markup="autolink",t.info="auto";e.push("text","",0).content=e.md.normalizeLinkText(o);const r=e.push("link_close","a",-1);r.markup="autolink",r.info="auto"}return e.pos+=o.length+2,!0}return!1}],["html_inline",function(e,t){if(!e.md.options.html)return!1;const n=e.posMax,r=e.pos;if(60!==e.src.charCodeAt(r)||r+2>=n)return!1;const i=e.src.charCodeAt(r+1);if(33!==i&&63!==i&&47!==i&&!function(e){const t=32|e;return t>=97&&t<=122}(i))return!1;const o=e.src.slice(r).match(oc);if(!o)return!1;if(!t){const t=e.push("html_inline","",0);t.content=o[0],s=t.content,/^<a[>\s]/i.test(s)&&e.linkLevel++,function(e){return/^<\/a\s*>/i.test(e)}(t.content)&&e.linkLevel--}var s;return e.pos+=o[0].length,!0}],["entity",function(e,t){const n=e.pos,r=e.posMax;if(38!==e.src.charCodeAt(n))return!1;if(n+1>=r)return!1;if(35===e.src.charCodeAt(n+1)){const r=e.src.slice(n).match(xc);if(r){if(!t){const t="x"===r[1][0].toLowerCase()?parseInt(r[1].slice(1),16):parseInt(r[1],10),n=e.push("text_special","",0);n.content=na(t)?ra(t):ra(65533),n.markup=r[0],n.info="entity"}return e.pos+=r[0].length,!0}}else{const r=e.src.slice(n).match(Cc);if(r){const n=Wl(r[0]);if(n!==r[0]){if(!t){const t=e.push("text_special","",0);t.content=n,t.markup=r[0],t.info="entity"}return e.pos+=r[0].length,!0}}}return!1}]],_c=[["balance_pairs",function(e){const t=e.tokens_meta,n=e.tokens_meta.length;Dc(e.delimiters);for(let e=0;e<n;e++)t[e]&&t[e].delimiters&&Dc(t[e].delimiters)}],["strikethrough",yc.postProcess],["emphasis",bc.postProcess],["fragments_join",function(e){let t,n,r=0;const i=e.tokens,o=e.tokens.length;for(t=n=0;t<o;t++)i[t].nesting<0&&r--,i[t].level=r,i[t].nesting>0&&r++,"text"===i[t].type&&t+1<o&&"text"===i[t+1].type?i[t+1].content=i[t].content+i[t+1].content:(t!==n&&(i[n]=i[t]),n++);t!==n&&(i.length=n)}]];function Ec(){this.ruler=new Ma;for(let e=0;e<Sc.length;e++)this.ruler.push(Sc[e][0],Sc[e][1]);this.ruler2=new Ma;for(let e=0;e<_c.length;e++)this.ruler2.push(_c[e][0],_c[e][1])}Ec.prototype.skipToken=function(e){const t=e.pos,n=this.ruler.getRules(""),r=n.length,i=e.md.options.maxNesting,o=e.cache;if(void 0!==o[t])return void(e.pos=o[t]);let s=!1;if(e.level<i){for(let i=0;i<r;i++)if(e.level++,s=n[i](e,!0),e.level--,s){if(t>=e.pos)throw new Error("inline rule didn't increment state.pos");break}}else e.pos=e.posMax;s||e.pos++,o[t]=e.pos},Ec.prototype.tokenize=function(e){const t=this.ruler.getRules(""),n=t.length,r=e.posMax,i=e.md.options.maxNesting;for(;e.pos<r;){const o=e.pos;let s=!1;if(e.level<i)for(let r=0;r<n;r++)if(s=t[r](e,!1),s){if(o>=e.pos)throw new Error("inline rule didn't increment state.pos");break}if(s){if(e.pos>=r)break}else e.pending+=e.src[e.pos++]}e.pending&&e.pushPending()},Ec.prototype.parse=function(e,t,n,r){const i=new this.State(e,t,n,r);this.tokenize(i);const o=this.ruler2.getRules(""),s=o.length;for(let e=0;e<s;e++)o[e](i)},Ec.prototype.State=dc;const Ac=Ec;function Mc(e){return Array.prototype.slice.call(arguments,1).forEach((function(t){t&&Object.keys(t).forEach((function(n){e[n]=t[n]}))})),e}function Oc(e){return Object.prototype.toString.call(e)}function Tc(e){return"[object Function]"===Oc(e)}function Nc(e){return e.replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}const Fc={fuzzyLink:!0,fuzzyEmail:!0,fuzzyIP:!1};const Ic={"http:":{validate:function(e,t,n){const r=e.slice(t);return n.re.http||(n.re.http=new RegExp("^\\/\\/"+n.re.src_auth+n.re.src_host_port_strict+n.re.src_path,"i")),n.re.http.test(r)?r.match(n.re.http)[0].length:0}},"https:":"http:","ftp:":"http:","//":{validate:function(e,t,n){const r=e.slice(t);return n.re.no_http||(n.re.no_http=new RegExp("^"+n.re.src_auth+"(?:localhost|(?:(?:"+n.re.src_domain+")\\.)+"+n.re.src_domain_root+")"+n.re.src_port+n.re.src_host_terminator+n.re.src_path,"i")),n.re.no_http.test(r)?t>=3&&":"===e[t-3]||t>=3&&"/"===e[t-3]?0:r.match(n.re.no_http)[0].length:0}},"mailto:":{validate:function(e,t,n){const r=e.slice(t);return n.re.mailto||(n.re.mailto=new RegExp("^"+n.re.src_email_name+"@"+n.re.src_host_strict,"i")),n.re.mailto.test(r)?r.match(n.re.mailto)[0].length:0}}},Rc="biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");function Bc(e){const t=e.re=function(e){const t={};e=e||{},t.src_Any=Dl.source,t.src_Cc=Sl.source,t.src_Z=El.source,t.src_P=xl.source,t.src_ZPCc=[t.src_Z,t.src_P,t.src_Cc].join("|"),t.src_ZCc=[t.src_Z,t.src_Cc].join("|");const n="[><｜]";return t.src_pseudo_letter="(?:(?![><｜]|"+t.src_ZPCc+")"+t.src_Any+")",t.src_ip4="(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",t.src_auth="(?:(?:(?!"+t.src_ZCc+"|[@/\\[\\]()]).)+@)?",t.src_port="(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?",t.src_host_terminator="(?=$|[><｜]|"+t.src_ZPCc+")(?!"+(e["---"]?"-(?!--)|":"-|")+"_|:\\d|\\.-|\\.(?!$|"+t.src_ZPCc+"))",t.src_path="(?:[/?#](?:(?!"+t.src_ZCc+"|"+n+"|[()[\\]{}.,\"'?!\\-;]).|\\[(?:(?!"+t.src_ZCc+"|\\]).)*\\]|\\((?:(?!"+t.src_ZCc+"|[)]).)*\\)|\\{(?:(?!"+t.src_ZCc+'|[}]).)*\\}|\\"(?:(?!'+t.src_ZCc+'|["]).)+\\"|\\\'(?:(?!'+t.src_ZCc+"|[']).)+\\'|\\'(?="+t.src_pseudo_letter+"|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!"+t.src_ZCc+"|[.]|$)|"+(e["---"]?"\\-(?!--(?:[^-]|$))(?:-*)|":"\\-+|")+",(?!"+t.src_ZCc+"|$)|;(?!"+t.src_ZCc+"|$)|\\!+(?!"+t.src_ZCc+"|[!]|$)|\\?(?!"+t.src_ZCc+"|[?]|$))+|\\/)?",t.src_email_name='[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*',t.src_xn="xn--[a-z0-9\\-]{1,59}",t.src_domain_root="(?:"+t.src_xn+"|"+t.src_pseudo_letter+"{1,63})",t.src_domain="(?:"+t.src_xn+"|(?:"+t.src_pseudo_letter+")|(?:"+t.src_pseudo_letter+"(?:-|"+t.src_pseudo_letter+"){0,61}"+t.src_pseudo_letter+"))",t.src_host="(?:(?:(?:(?:"+t.src_domain+")\\.)*"+t.src_domain+"))",t.tpl_host_fuzzy="(?:"+t.src_ip4+"|(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%)))",t.tpl_host_no_ip_fuzzy="(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%))",t.src_host_strict=t.src_host+t.src_host_terminator,t.tpl_host_fuzzy_strict=t.tpl_host_fuzzy+t.src_host_terminator,t.src_host_port_strict=t.src_host+t.src_port+t.src_host_terminator,t.tpl_host_port_fuzzy_strict=t.tpl_host_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_port_no_ip_fuzzy_strict=t.tpl_host_no_ip_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_fuzzy_test="localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:"+t.src_ZPCc+"|>|$))",t.tpl_email_fuzzy='(^|[><｜]|"|\\(|'+t.src_ZCc+")("+t.src_email_name+"@"+t.tpl_host_fuzzy_strict+")",t.tpl_link_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_fuzzy_strict+t.src_path+")",t.tpl_link_no_ip_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_no_ip_fuzzy_strict+t.src_path+")",t}(e.__opts__),n=e.__tlds__.slice();function r(e){return e.replace("%TLDS%",t.src_tlds)}e.onCompile(),e.__tlds_replaced__||n.push("a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]"),n.push(t.src_xn),t.src_tlds=n.join("|"),t.email_fuzzy=RegExp(r(t.tpl_email_fuzzy),"i"),t.link_fuzzy=RegExp(r(t.tpl_link_fuzzy),"i"),t.link_no_ip_fuzzy=RegExp(r(t.tpl_link_no_ip_fuzzy),"i"),t.host_fuzzy_test=RegExp(r(t.tpl_host_fuzzy_test),"i");const i=[];function o(e,t){throw new Error('(LinkifyIt) Invalid schema "'+e+'": '+t)}e.__compiled__={},Object.keys(e.__schemas__).forEach((function(t){const n=e.__schemas__[t];if(null===n)return;const r={validate:null,link:null};if(e.__compiled__[t]=r,"[object Object]"===Oc(n))return!function(e){return"[object RegExp]"===Oc(e)}(n.validate)?Tc(n.validate)?r.validate=n.validate:o(t,n):r.validate=function(e){return function(t,n){const r=t.slice(n);return e.test(r)?r.match(e)[0].length:0}}(n.validate),void(Tc(n.normalize)?r.normalize=n.normalize:n.normalize?o(t,n):r.normalize=function(e,t){t.normalize(e)});!function(e){return"[object String]"===Oc(e)}(n)?o(t,n):i.push(t)})),i.forEach((function(t){e.__compiled__[e.__schemas__[t]]&&(e.__compiled__[t].validate=e.__compiled__[e.__schemas__[t]].validate,e.__compiled__[t].normalize=e.__compiled__[e.__schemas__[t]].normalize)})),e.__compiled__[""]={validate:null,normalize:function(e,t){t.normalize(e)}};const s=Object.keys(e.__compiled__).filter((function(t){return t.length>0&&e.__compiled__[t]})).map(Nc).join("|");e.re.schema_test=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+s+")","i"),e.re.schema_search=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+s+")","ig"),e.re.schema_at_start=RegExp("^"+e.re.schema_search.source,"i"),e.re.pretest=RegExp("("+e.re.schema_test.source+")|("+e.re.host_fuzzy_test.source+")|@","i"),function(e){e.__index__=-1,e.__text_cache__=""}(e)}function zc(e,t){const n=e.__index__,r=e.__last_index__,i=e.__text_cache__.slice(n,r);this.schema=e.__schema__.toLowerCase(),this.index=n+t,this.lastIndex=r+t,this.raw=i,this.text=i,this.url=i}function Lc(e,t){const n=new zc(e,t);return e.__compiled__[n.schema].normalize(n,e),n}function Pc(e,t){if(!(this instanceof Pc))return new Pc(e,t);var n;t||(n=e,Object.keys(n||{}).reduce((function(e,t){return e||Fc.hasOwnProperty(t)}),!1)&&(t=e,e={})),this.__opts__=Mc({},Fc,t),this.__index__=-1,this.__last_index__=-1,this.__schema__="",this.__text_cache__="",this.__schemas__=Mc({},Ic,e),this.__compiled__={},this.__tlds__=Rc,this.__tlds_replaced__=!1,this.re={},Bc(this)}Pc.prototype.add=function(e,t){return this.__schemas__[e]=t,Bc(this),this},Pc.prototype.set=function(e){return this.__opts__=Mc(this.__opts__,e),this},Pc.prototype.test=function(e){if(this.__text_cache__=e,this.__index__=-1,!e.length)return!1;let t,n,r,i,o,s,l,a,c;if(this.re.schema_test.test(e))for(l=this.re.schema_search,l.lastIndex=0;null!==(t=l.exec(e));)if(i=this.testSchemaAt(e,t[2],l.lastIndex),i){this.__schema__=t[2],this.__index__=t.index+t[1].length,this.__last_index__=t.index+t[0].length+i;break}return this.__opts__.fuzzyLink&&this.__compiled__["http:"]&&(a=e.search(this.re.host_fuzzy_test),a>=0&&(this.__index__<0||a<this.__index__)&&null!==(n=e.match(this.__opts__.fuzzyIP?this.re.link_fuzzy:this.re.link_no_ip_fuzzy))&&(o=n.index+n[1].length,(this.__index__<0||o<this.__index__)&&(this.__schema__="",this.__index__=o,this.__last_index__=n.index+n[0].length))),this.__opts__.fuzzyEmail&&this.__compiled__["mailto:"]&&(c=e.indexOf("@"),c>=0&&null!==(r=e.match(this.re.email_fuzzy))&&(o=r.index+r[1].length,s=r.index+r[0].length,(this.__index__<0||o<this.__index__||o===this.__index__&&s>this.__last_index__)&&(this.__schema__="mailto:",this.__index__=o,this.__last_index__=s))),this.__index__>=0},Pc.prototype.pretest=function(e){return this.re.pretest.test(e)},Pc.prototype.testSchemaAt=function(e,t,n){return this.__compiled__[t.toLowerCase()]?this.__compiled__[t.toLowerCase()].validate(e,n,this):0},Pc.prototype.match=function(e){const t=[];let n=0;this.__index__>=0&&this.__text_cache__===e&&(t.push(Lc(this,n)),n=this.__last_index__);let r=n?e.slice(n):e;for(;this.test(r);)t.push(Lc(this,n)),r=r.slice(this.__last_index__),n+=this.__last_index__;return t.length?t:null},Pc.prototype.matchAtStart=function(e){if(this.__text_cache__=e,this.__index__=-1,!e.length)return null;const t=this.re.schema_at_start.exec(e);if(!t)return null;const n=this.testSchemaAt(e,t[2],t[0].length);return n?(this.__schema__=t[2],this.__index__=t.index+t[1].length,this.__last_index__=t.index+t[0].length+n,Lc(this,0)):null},Pc.prototype.tlds=function(e,t){return e=Array.isArray(e)?e:[e],t?(this.__tlds__=this.__tlds__.concat(e).sort().filter((function(e,t,n){return e!==n[t-1]})).reverse(),Bc(this),this):(this.__tlds__=e.slice(),this.__tlds_replaced__=!0,Bc(this),this)},Pc.prototype.normalize=function(e){e.schema||(e.url="http://"+e.url),"mailto:"!==e.schema||/^mailto:/i.test(e.url)||(e.url="mailto:"+e.url)},Pc.prototype.onCompile=function(){};const qc=Pc,$c=2147483647,Vc=36,jc=/^xn--/,Uc=/[^\0-\x7F]/,Wc=/[\x2E\u3002\uFF0E\uFF61]/g,Hc={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},Jc=Math.floor,Kc=String.fromCharCode;function Gc(e){throw new RangeError(Hc[e])}function Zc(e,t){const n=e.split("@");let r="";n.length>1&&(r=n[0]+"@",e=n[1]);const i=function(e,t){const n=[];let r=e.length;for(;r--;)n[r]=t(e[r]);return n}((e=e.replace(Wc,".")).split("."),t).join(".");return r+i}function Yc(e){const t=[];let n=0;const r=e.length;for(;n<r;){const i=e.charCodeAt(n++);if(i>=55296&&i<=56319&&n<r){const r=e.charCodeAt(n++);56320==(64512&r)?t.push(((1023&i)<<10)+(1023&r)+65536):(t.push(i),n--)}else t.push(i)}return t}const Qc=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},Xc=function(e,t,n){let r=0;for(e=n?Jc(e/700):e>>1,e+=Jc(e/t);e>455;r+=Vc)e=Jc(e/35);return Jc(r+36*e/(e+38))},eh=function(e){const t=[],n=e.length;let r=0,i=128,o=72,s=e.lastIndexOf("-");s<0&&(s=0);for(let n=0;n<s;++n)e.charCodeAt(n)>=128&&Gc("not-basic"),t.push(e.charCodeAt(n));for(let a=s>0?s+1:0;a<n;){const s=r;for(let t=1,i=Vc;;i+=Vc){a>=n&&Gc("invalid-input");const s=(l=e.charCodeAt(a++))>=48&&l<58?l-48+26:l>=65&&l<91?l-65:l>=97&&l<123?l-97:Vc;s>=Vc&&Gc("invalid-input"),s>Jc(($c-r)/t)&&Gc("overflow"),r+=s*t;const c=i<=o?1:i>=o+26?26:i-o;if(s<c)break;const h=Vc-c;t>Jc($c/h)&&Gc("overflow"),t*=h}const c=t.length+1;o=Xc(r-s,c,0==s),Jc(r/c)>$c-i&&Gc("overflow"),i+=Jc(r/c),r%=c,t.splice(r++,0,i)}var l;return String.fromCodePoint(...t)},th=function(e){const t=[],n=(e=Yc(e)).length;let r=128,i=0,o=72;for(const n of e)n<128&&t.push(Kc(n));const s=t.length;let l=s;for(s&&t.push("-");l<n;){let n=$c;for(const t of e)t>=r&&t<n&&(n=t);const a=l+1;n-r>Jc(($c-i)/a)&&Gc("overflow"),i+=(n-r)*a,r=n;for(const n of e)if(n<r&&++i>$c&&Gc("overflow"),n===r){let e=i;for(let n=Vc;;n+=Vc){const r=n<=o?1:n>=o+26?26:n-o;if(e<r)break;const i=e-r,s=Vc-r;t.push(Kc(Qc(r+i%s,0))),e=Jc(i/s)}t.push(Kc(Qc(e,0))),o=Xc(i,a,l===s),i=0,++l}++i,++r}return t.join("")},nh={version:"2.3.1",ucs2:{decode:Yc,encode:e=>String.fromCodePoint(...e)},decode:eh,encode:th,toASCII:function(e){return Zc(e,(function(e){return Uc.test(e)?"xn--"+th(e):e}))},toUnicode:function(e){return Zc(e,(function(e){return jc.test(e)?eh(e.slice(4).toLowerCase()):e}))}},rh={default:{options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:100},components:{core:{},block:{},inline:{}}},zero:{options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline","text_join"]},block:{rules:["paragraph"]},inline:{rules:["text"],rules2:["balance_pairs","fragments_join"]}}},commonmark:{options:{html:!0,xhtmlOut:!0,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline","text_join"]},block:{rules:["blockquote","code","fence","heading","hr","html_block","lheading","list","reference","paragraph"]},inline:{rules:["autolink","backticks","emphasis","entity","escape","html_inline","image","link","newline","text"],rules2:["balance_pairs","emphasis","fragments_join"]}}}},ih=/^(vbscript|javascript|file|data):/,oh=/^data:image\/(gif|png|jpeg|webp);/;function sh(e){const t=e.trim().toLowerCase();return!ih.test(t)||oh.test(t)}const lh=["http:","https:","mailto:"];function ah(e){const t=wl(e,!0);if(t.hostname&&(!t.protocol||lh.indexOf(t.protocol)>=0))try{t.hostname=nh.toASCII(t.hostname)}catch(e){}return ll(al(t))}function ch(e){const t=wl(e,!0);if(t.hostname&&(!t.protocol||lh.indexOf(t.protocol)>=0))try{t.hostname=nh.toUnicode(t.hostname)}catch(e){}return il(al(t),il.defaultChars+"%")}function hh(e,t){if(!(this instanceof hh))return new hh(e,t);t||Yl(e)||(t=e||{},e="default"),this.inline=new Ac,this.block=new hc,this.core=new Za,this.renderer=new Ea,this.linkify=new qc,this.validateLink=sh,this.normalizeLink=ah,this.normalizeLinkText=ch,this.utils=r,this.helpers=ea({},i),this.options={},this.configure(e),t&&this.set(t)}hh.prototype.set=function(e){return ea(this.options,e),this},hh.prototype.configure=function(e){const t=this;if(Yl(e)){const t=e;if(!(e=rh[t]))throw new Error('Wrong `markdown-it` preset "'+t+'", check name')}if(!e)throw new Error("Wrong `markdown-it` preset, can't be empty");return e.options&&t.set(e.options),e.components&&Object.keys(e.components).forEach((function(n){e.components[n].rules&&t[n].ruler.enableOnly(e.components[n].rules),e.components[n].rules2&&t[n].ruler2.enableOnly(e.components[n].rules2)})),this},hh.prototype.enable=function(e,t){let n=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach((function(t){n=n.concat(this[t].ruler.enable(e,!0))}),this),n=n.concat(this.inline.ruler2.enable(e,!0));const r=e.filter((function(e){return n.indexOf(e)<0}));if(r.length&&!t)throw new Error("MarkdownIt. Failed to enable unknown rule(s): "+r);return this},hh.prototype.disable=function(e,t){let n=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach((function(t){n=n.concat(this[t].ruler.disable(e,!0))}),this),n=n.concat(this.inline.ruler2.disable(e,!0));const r=e.filter((function(e){return n.indexOf(e)<0}));if(r.length&&!t)throw new Error("MarkdownIt. Failed to disable unknown rule(s): "+r);return this},hh.prototype.use=function(e){const t=[this].concat(Array.prototype.slice.call(arguments,1));return e.apply(e,t),this},hh.prototype.parse=function(e,t){if("string"!=typeof e)throw new Error("Input data should be a String");const n=new this.core.State(e,this,t);return this.core.process(n),n.tokens},hh.prototype.render=function(e,t){return t=t||{},this.renderer.render(this.parse(e,t),this.options,t)},hh.prototype.parseInline=function(e,t){const n=new this.core.State(e,this,t);return n.inlineMode=!0,this.core.process(n),n.tokens},hh.prototype.renderInline=function(e,t){return t=t||{},this.renderer.render(this.parseInline(e,t),this.options,t)};const uh=hh,dh=new Q({nodes:{doc:{content:"block+"},paragraph:{content:"inline*",group:"block",parseDOM:[{tag:"p"}],toDOM:()=>["p",0]},blockquote:{content:"block+",group:"block",parseDOM:[{tag:"blockquote"}],toDOM:()=>["blockquote",0]},horizontal_rule:{group:"block",parseDOM:[{tag:"hr"}],toDOM:()=>["div",["hr"]]},heading:{attrs:{level:{default:1}},content:"(text | image)*",group:"block",defining:!0,parseDOM:[{tag:"h1",attrs:{level:1}},{tag:"h2",attrs:{level:2}},{tag:"h3",attrs:{level:3}},{tag:"h4",attrs:{level:4}},{tag:"h5",attrs:{level:5}},{tag:"h6",attrs:{level:6}}],toDOM:e=>["h"+e.attrs.level,0]},code_block:{content:"text*",group:"block",code:!0,defining:!0,marks:"",attrs:{params:{default:""}},parseDOM:[{tag:"pre",preserveWhitespace:"full",getAttrs:e=>({params:e.getAttribute("data-params")||""})}],toDOM:e=>["pre",e.attrs.params?{"data-params":e.attrs.params}:{},["code",0]]},ordered_list:{content:"list_item+",group:"block",attrs:{order:{default:1},tight:{default:!1}},parseDOM:[{tag:"ol",getAttrs:e=>({order:e.hasAttribute("start")?+e.getAttribute("start"):1,tight:e.hasAttribute("data-tight")})}],toDOM:e=>["ol",{start:1==e.attrs.order?null:e.attrs.order,"data-tight":e.attrs.tight?"true":null},0]},bullet_list:{content:"list_item+",group:"block",attrs:{tight:{default:!1}},parseDOM:[{tag:"ul",getAttrs:e=>({tight:e.hasAttribute("data-tight")})}],toDOM:e=>["ul",{"data-tight":e.attrs.tight?"true":null},0]},list_item:{content:"block+",defining:!0,parseDOM:[{tag:"li"}],toDOM:()=>["li",0]},text:{group:"inline"},image:{inline:!0,attrs:{src:{},alt:{default:null},title:{default:null}},group:"inline",draggable:!0,parseDOM:[{tag:"img[src]",getAttrs:e=>({src:e.getAttribute("src"),title:e.getAttribute("title"),alt:e.getAttribute("alt")})}],toDOM:e=>["img",e.attrs]},hard_break:{inline:!0,group:"inline",selectable:!1,parseDOM:[{tag:"br"}],toDOM:()=>["br"]}},marks:{em:{parseDOM:[{tag:"i"},{tag:"em"},{style:"font-style=italic"},{style:"font-style=normal",clearMark:e=>"em"==e.type.name}],toDOM:()=>["em"]},strong:{parseDOM:[{tag:"strong"},{tag:"b",getAttrs:e=>"normal"!=e.style.fontWeight&&null},{style:"font-weight=400",clearMark:e=>"strong"==e.type.name},{style:"font-weight",getAttrs:e=>/^(bold(er)?|[5-9]\d{2,})$/.test(e)&&null}],toDOM:()=>["strong"]},link:{attrs:{href:{},title:{default:null}},inclusive:!1,parseDOM:[{tag:"a[href]",getAttrs:e=>({href:e.getAttribute("href"),title:e.getAttribute("title")})}],toDOM:e=>["a",e.attrs]},code:{code:!0,parseDOM:[{tag:"code"}],toDOM:()=>["code"]}}});class ph{constructor(e,t){this.schema=e,this.tokenHandlers=t,this.stack=[{type:e.topNodeType,attrs:null,content:[],marks:p.none}]}top(){return this.stack[this.stack.length-1]}push(e){this.stack.length&&this.top().content.push(e)}addText(e){if(!e)return;let t,n=this.top(),r=n.content,i=r[r.length-1],o=this.schema.text(e,n.marks);i&&(t=function(e,t){if(e.isText&&t.isText&&p.sameSet(e.marks,t.marks))return e.withText(e.text+t.text)}(i,o))?r[r.length-1]=t:r.push(o)}openMark(e){let t=this.top();t.marks=e.addToSet(t.marks)}closeMark(e){let t=this.top();t.marks=e.removeFromSet(t.marks)}parseTokens(e){for(let t=0;t<e.length;t++){let n=e[t],r=this.tokenHandlers[n.type];if(!r)throw new Error("Token type `"+n.type+"` not supported by Markdown parser");r(this,n,e,t)}}addNode(e,t,n){let r=this.top(),i=e.createAndFill(t,n,r?r.marks:[]);return i?(this.push(i),i):null}openNode(e,t){this.stack.push({type:e,attrs:t,content:[],marks:p.none})}closeNode(){let e=this.stack.pop();return this.addNode(e.type,e.attrs,e.content)}}function fh(e,t,n,r){return e.getAttrs?e.getAttrs(t,n,r):e.attrs instanceof Function?e.attrs(t):e.attrs}function mh(e,t){return e.noCloseToken||"code_inline"==t||"code_block"==t||"fence"==t}function gh(e){return"\n"==e[e.length-1]?e.slice(0,e.length-1):e}function yh(){}class kh{constructor(e,t,n){this.schema=e,this.tokenizer=t,this.tokens=n,this.tokenHandlers=function(e,t){let n=Object.create(null);for(let r in t){let i=t[r];if(i.block){let t=e.nodeType(i.block);mh(i,r)?n[r]=(e,n,r,o)=>{e.openNode(t,fh(i,n,r,o)),e.addText(gh(n.content)),e.closeNode()}:(n[r+"_open"]=(e,n,r,o)=>e.openNode(t,fh(i,n,r,o)),n[r+"_close"]=e=>e.closeNode())}else if(i.node){let t=e.nodeType(i.node);n[r]=(e,n,r,o)=>e.addNode(t,fh(i,n,r,o))}else if(i.mark){let t=e.marks[i.mark];mh(i,r)?n[r]=(e,n,r,o)=>{e.openMark(t.create(fh(i,n,r,o))),e.addText(gh(n.content)),e.closeMark(t)}:(n[r+"_open"]=(e,n,r,o)=>e.openMark(t.create(fh(i,n,r,o))),n[r+"_close"]=e=>e.closeMark(t))}else{if(!i.ignore)throw new RangeError("Unrecognized parsing spec "+JSON.stringify(i));mh(i,r)?n[r]=yh:(n[r+"_open"]=yh,n[r+"_close"]=yh)}}return n.text=(e,t)=>e.addText(t.content),n.inline=(e,t)=>e.parseTokens(t.children),n.softbreak=n.softbreak||(e=>e.addText(" ")),n}(e,n)}parse(e,t={}){let n,r=new ph(this.schema,this.tokenHandlers);r.parseTokens(this.tokenizer.parse(e,t));do{n=r.closeNode()}while(r.stack.length);return n||this.schema.topNodeType.createAndFill()}}function bh(e,t){for(;++t<e.length;)if("list_item_open"!=e[t].type)return e[t].hidden;return!1}new kh(dh,uh("commonmark",{html:!1}),{blockquote:{block:"blockquote"},paragraph:{block:"paragraph"},list_item:{block:"list_item"},bullet_list:{block:"bullet_list",getAttrs:(e,t,n)=>({tight:bh(t,n)})},ordered_list:{block:"ordered_list",getAttrs:(e,t,n)=>({order:+e.attrGet("start")||1,tight:bh(t,n)})},heading:{block:"heading",getAttrs:e=>({level:+e.tag.slice(1)})},code_block:{block:"code_block",noCloseToken:!0},fence:{block:"code_block",getAttrs:e=>({params:e.info||""}),noCloseToken:!0},hr:{node:"horizontal_rule"},image:{node:"image",getAttrs:e=>({src:e.attrGet("src"),title:e.attrGet("title")||null,alt:e.children[0]&&e.children[0].content||null})},hardbreak:{node:"hard_break"},em:{mark:"em"},strong:{mark:"strong"},link:{mark:"link",getAttrs:e=>({href:e.attrGet("href"),title:e.attrGet("title")||null})},code_inline:{mark:"code",noCloseToken:!0}});const vh={open:"",close:"",mixable:!0};class wh{constructor(e,t,n={}){this.nodes=e,this.marks=t,this.options=n}serialize(e,t={}){t=Object.assign({},this.options,t);let n=new Dh(this.nodes,this.marks,t);return n.renderContent(e),n.out}}const xh=new wh({blockquote(e,t){e.wrapBlock("> ",null,t,(()=>e.renderContent(t)))},code_block(e,t){const n=t.textContent.match(/`{3,}/gm),r=n?n.sort().slice(-1)[0]+"`":"```";e.write(r+(t.attrs.params||"")+"\n"),e.text(t.textContent,!1),e.write("\n"),e.write(r),e.closeBlock(t)},heading(e,t){e.write(e.repeat("#",t.attrs.level)+" "),e.renderInline(t,!1),e.closeBlock(t)},horizontal_rule(e,t){e.write(t.attrs.markup||"---"),e.closeBlock(t)},bullet_list(e,t){e.renderList(t,"  ",(()=>(t.attrs.bullet||"*")+" "))},ordered_list(e,t){let n=t.attrs.order||1,r=String(n+t.childCount-1).length,i=e.repeat(" ",r+2);e.renderList(t,i,(t=>{let i=String(n+t);return e.repeat(" ",r-i.length)+i+". "}))},list_item(e,t){e.renderContent(t)},paragraph(e,t){e.renderInline(t),e.closeBlock(t)},image(e,t){e.write("!["+e.esc(t.attrs.alt||"")+"]("+t.attrs.src.replace(/[\(\)]/g,"\\$&")+(t.attrs.title?' "'+t.attrs.title.replace(/"/g,'\\"')+'"':"")+")")},hard_break(e,t,n,r){for(let i=r+1;i<n.childCount;i++)if(n.child(i).type!=t.type)return void e.write("\\\n")},text(e,t){e.text(t.text,!e.inAutolink)}},{em:{open:"*",close:"*",mixable:!0,expelEnclosingWhitespace:!0},strong:{open:"**",close:"**",mixable:!0,expelEnclosingWhitespace:!0},link:{open:(e,t,n,r)=>(e.inAutolink=function(e,t,n){if(e.attrs.title||!/^\w+:/.test(e.attrs.href))return!1;let r=t.child(n);return!(!r.isText||r.text!=e.attrs.href||r.marks[r.marks.length-1]!=e)&&(n==t.childCount-1||!e.isInSet(t.child(n+1).marks))}(t,n,r),e.inAutolink?"<":"["),close(e,t,n,r){let{inAutolink:i}=e;return e.inAutolink=void 0,i?">":"]("+t.attrs.href.replace(/[\(\)"]/g,"\\$&")+(t.attrs.title?` "${t.attrs.title.replace(/"/g,'\\"')}"`:"")+")"},mixable:!0},code:{open:(e,t,n,r)=>Ch(n.child(r),-1),close:(e,t,n,r)=>Ch(n.child(r-1),1),escape:!1}});function Ch(e,t){let n,r=/`+/g,i=0;if(e.isText)for(;n=r.exec(e.text);)i=Math.max(i,n[0].length);let o=i>0&&t>0?" `":"`";for(let e=0;e<i;e++)o+="`";return i>0&&t<0&&(o+=" "),o}class Dh{constructor(e,t,n){this.nodes=e,this.marks=t,this.options=n,this.delim="",this.out="",this.closed=null,this.inAutolink=void 0,this.atBlockStart=!1,this.inTightList=!1,void 0===this.options.tightLists&&(this.options.tightLists=!1),void 0===this.options.hardBreakNodeName&&(this.options.hardBreakNodeName="hard_break")}flushClose(e=2){if(this.closed){if(this.atBlank()||(this.out+="\n"),e>1){let t=this.delim,n=/\s+$/.exec(t);n&&(t=t.slice(0,t.length-n[0].length));for(let n=1;n<e;n++)this.out+=t+"\n"}this.closed=null}}getMark(e){let t=this.marks[e];if(!t){if(!1!==this.options.strict)throw new Error(`Mark type \`${e}\` not supported by Markdown renderer`);t=vh}return t}wrapBlock(e,t,n,r){let i=this.delim;this.write(null!=t?t:e),this.delim+=e,r(),this.delim=i,this.closeBlock(n)}atBlank(){return/(^|\n)$/.test(this.out)}ensureNewLine(){this.atBlank()||(this.out+="\n")}write(e){this.flushClose(),this.delim&&this.atBlank()&&(this.out+=this.delim),e&&(this.out+=e)}closeBlock(e){this.closed=e}text(e,t=!0){let n=e.split("\n");for(let e=0;e<n.length;e++)this.write(),!t&&"["==n[e][0]&&/(^|[^\\])\!$/.test(this.out)&&(this.out=this.out.slice(0,this.out.length-1)+"\\!"),this.out+=t?this.esc(n[e],this.atBlockStart):n[e],e!=n.length-1&&(this.out+="\n")}render(e,t,n){if(this.nodes[e.type.name])this.nodes[e.type.name](this,e,t,n);else{if(!1!==this.options.strict)throw new Error("Token type `"+e.type.name+"` not supported by Markdown renderer");e.type.isLeaf||(e.type.inlineContent?this.renderInline(e):this.renderContent(e),e.isBlock&&this.closeBlock(e))}}renderContent(e){e.forEach(((t,n,r)=>this.render(t,e,r)))}renderInline(e,t=!0){this.atBlockStart=t;let n=[],r="",i=(t,i,o)=>{let s=t?t.marks:[];t&&t.type.name===this.options.hardBreakNodeName&&(s=s.filter((t=>{if(o+1==e.childCount)return!1;let n=e.child(o+1);return t.isInSet(n.marks)&&(!n.isText||/\S/.test(n.text))})));let l=r;if(r="",t&&t.isText&&s.some((e=>{let t=this.getMark(e.type.name);return t&&t.expelEnclosingWhitespace&&!e.isInSet(n)}))){let[e,r,i]=/^(\s*)(.*)$/m.exec(t.text);r&&(l+=r,(t=i?t.withText(i):null)||(s=n))}if(t&&t.isText&&s.some((t=>{let n=this.getMark(t.type.name);return n&&n.expelEnclosingWhitespace&&(o==e.childCount-1||!t.isInSet(e.child(o+1).marks))}))){let[e,i,o]=/^(.*?)(\s*)$/m.exec(t.text);o&&(r=o,(t=i?t.withText(i):null)||(s=n))}let a=s.length?s[s.length-1]:null,c=a&&!1===this.getMark(a.type.name).escape,h=s.length-(c?1:0);e:for(let e=0;e<h;e++){let t=s[e];if(!this.getMark(t.type.name).mixable)break;for(let r=0;r<n.length;r++){let i=n[r];if(!this.getMark(i.type.name).mixable)break;if(t.eq(i)){e>r?s=s.slice(0,r).concat(t).concat(s.slice(r,e)).concat(s.slice(e+1,h)):r>e&&(s=s.slice(0,e).concat(s.slice(e+1,r)).concat(t).concat(s.slice(r,h)));continue e}}}let u=0;for(;u<Math.min(n.length,h)&&s[u].eq(n[u]);)++u;for(;u<n.length;)this.text(this.markString(n.pop(),!1,e,o),!1);if(l&&this.text(l),t){for(;n.length<h;){let t=s[n.length];n.push(t),this.text(this.markString(t,!0,e,o),!1),this.atBlockStart=!1}c&&t.isText?this.text(this.markString(a,!0,e,o)+t.text+this.markString(a,!1,e,o+1),!1):this.render(t,e,o),this.atBlockStart=!1}(null==t?void 0:t.isText)&&t.nodeSize>0&&(this.atBlockStart=!1)};e.forEach(i),i(null,0,e.childCount),this.atBlockStart=!1}renderList(e,t,n){this.closed&&this.closed.type==e.type?this.flushClose(3):this.inTightList&&this.flushClose(1);let r=void 0!==e.attrs.tight?e.attrs.tight:this.options.tightLists,i=this.inTightList;this.inTightList=r,e.forEach(((i,o,s)=>{s&&r&&this.flushClose(1),this.wrapBlock(t,n(s),e,(()=>this.render(i,e,s)))})),this.inTightList=i}esc(e,t=!1){return e=e.replace(/[`*\\~\[\]_]/g,((t,n)=>"_"==t&&n>0&&n+1<e.length&&e[n-1].match(/\w/)&&e[n+1].match(/\w/)?t:"\\"+t)),t&&(e=e.replace(/^(\+[ ]|[\-*>])/,"\\$&").replace(/^(\s*)(#{1,6})(\s|$)/,"$1\\$2$3").replace(/^(\s*\d+)\.\s/,"$1\\. ")),this.options.escapeExtraCharacters&&(e=e.replace(this.options.escapeExtraCharacters,"\\$&")),e}quote(e){let t=-1==e.indexOf('"')?'""':-1==e.indexOf("'")?"''":"()";return t[0]+e+t[1]}repeat(e,t){let n="";for(let r=0;r<t;r++)n+=e;return n}markString(e,t,n,r){let i=this.getMark(e.type.name),o=t?i.open:i.close;return"string"==typeof o?o:o(this,e,n,r)}getEnclosingWhitespace(e){return{leading:(e.match(/^(\s+)/)||[void 0])[0],trailing:(e.match(/(\s+)$/)||[void 0])[0]}}}const Sh=new wh({heading1(e,t,n,r){e.write("# "),e.renderInline(t),e.closeBlock(t)},heading2(e,t,n,r){e.write("## "),e.renderInline(t),e.closeBlock(t)},heading3(e,t,n,r){e.write("### "),e.renderInline(t),e.closeBlock(t)},checklist_item(e,t,n,r){const i=t.attrs.status===$o.DONE?"[x] ":"[ ] ";e.write(i),e.renderInline(t),e.closeBlock(t)},paragraph(e,t,n,r){if(2===t.nodeSize)return e.write(" "),void e.closeBlock(t);xh.nodes.paragraph(e,t,n,r)},list_item(e,t,n,r){xh.nodes.list_item(e,t,n,r)},ordered_list(e,t,n,r){xh.nodes.ordered_list(e,t,n,r)},unordered_list(e,t,n,r){xh.nodes.bullet_list(e,t,n,r)},text(e,t,n,r){xh.nodes.text(e,t,n,r)},code_block(e,t,n,r){t.attrs[Fo]?(e.write(t.textContent),e.ensureNewLine()):xh.nodes.code_block(e,t,n,r)}},Object.assign(Object.assign({},xh.marks),{inline_link:xh.marks.link,code:{close:(e,t)=>t.attrs[Fo]?"":"`",escape:!1,open:(e,t)=>t.attrs[Fo]?"":"`"}})),_h=uh(),Eh=_h.core.State.prototype.Token,Ah=_h.inline.ruler.__find__("image"),Mh=_h.inline.ruler.__rules__[Ah].fn,Oh=["[x]","[X]","[ ]"];_h.use((e=>{e.core.ruler.after("block","checklist_item",(e=>{const t=e.src.split("\n");let n=!1,r=!1;return e.tokens=e.tokens.map((i=>{if(n&&"inline"===i.type&&(i.content=i.content.slice(3).trimLeft()),"paragraph_open"===i.type){const[o,s]=i.map,l=t[o];if(Oh.includes(l.slice(0,3))){r=!0,n=!0;const{Token:t}=e,i=new t("checklist_item_open","div",1);return i.attrPush(["status","x"===l[1].toLowerCase()?$o.DONE.toString():$o.EMPTY.toString()]),i}}else if(n&&"paragraph_close"===i.type)return n=!1,new e.Token("checklist_item_close","div",-1);return i})),r})),e.inline.ruler.at("image",(e=>{const{pos:t}=e,n=Mh(e);if(n){const n=new e.Token("code_inline","code",0);n.markup="`",n.content=e.src.slice(t,e.pos),n.attrSet(Fo,"true"),e.tokens[e.tokens.length-1]=n}return n}))}));class Th{static getTypeName(e){return e.replace("_open","").replace("_close","")}constructor(e){this.getTokens=()=>{const{fullTokenList:e,parseable:t}=this;if(!1===t){const{map:[t,n]}=e[0],r=new Eh("fence","code",0);return r.content=this.src.split("\n").slice(t,n).join("\n"),r.attrPush([Fo,"true"]),[r]}return e},this.resetInternalState=()=>{this.fullTokenList=[],this.tokenStack=[],this.parseable=!0},this.resetInternalState(),this.src=e}take(e){const{nesting:t}=e;let{type:n}=e;if(n=Th.getTypeName(n),this.fullTokenList.push(e),!1===Th.DOCUMENT_MAP.has(n)&&"inline"!==n&&(this.parseable=!1),this.parseable&&this.tokenStack.length&&t>=0){const e=Th.getTypeName(this.tokenStack[this.tokenStack.length-1].type);!1===Th.DOCUMENT_MAP.get(e).includes(n)&&(this.parseable=!1)}if(t>0&&this.tokenStack.push(e),t<0&&this.tokenStack.pop(),0===this.tokenStack.length){const e=this.getTokens();return this.resetInternalState(),e}return null}}Th.DOCUMENT_MAP=new Map([["heading1",["inline"]],["heading2",["inline"]],["heading3",["inline"]],["paragraph",["inline"]],["fence",["inline"]],["bullet_list",["list_item","inline"]],["ordered_list",["list_item","inline"]],["list_item",["paragraph","inline"]],["checklist_item",["inline"]],["inline",[]]]);const Nh=new kh(Uo,{parse(...e){window.mip=_h;const t=_h.parse(...e),n=[],r=new Th(e[0]);for(let e=0;e<t.length;e++){const i=t[e],{nesting:o,tag:s,type:l}=i;l.startsWith("heading")&&"h1"===s&&(i.type=i.type.replace("heading","heading1")),l.startsWith("heading")&&"h2"===s&&(i.type=l.replace("heading","heading2")),l.startsWith("heading")&&"h3"===s&&(i.type=l.replace("heading","heading3")),"link"===l&&i.attrGet("href")===i.content&&i.attrSet(Io,"true");const a=r.take(i);a&&n.push(...a)}return n}},{blockquote:{block:"code_block"},bullet_list:{block:"unordered_list"},fence:{block:"code_block",getAttrs:e=>"true"===e.attrGet(Fo)?{[Fo]:!0}:{}},heading1:{block:"heading1"},heading2:{block:"heading2"},heading3:{block:"heading3"},list_item:{block:"list_item"},ordered_list:{block:"ordered_list"},paragraph:{block:"paragraph"},checklist_item:{block:"checklist_item",getAttrs:e=>({status:e.attrGet("status")===$o.DONE.toString()?$o.DONE:$o.EMPTY})},em:{mark:"em"},strong:{mark:"strong"},code_inline:{getAttrs:e=>"true"===e.attrGet(Fo)?{[Fo]:!0}:{},mark:"code",noCloseToken:!0},link:{mark:"link",getAttrs:e=>Object.assign({href:e.attrGet("href"),title:e.attrGet("title")||null},"auto"===e.info&&{[Io]:!0})}}),Fh=new qc;class Ih extends wt{constructor(){super({appendTransaction:(e,t,n)=>(e=>{const{tr:t}=e;return t.doc.descendants(((e,n,r)=>{if(!e.isTextblock)return;const i=n+1,o=[];e.forEach(((e,t,r)=>{if(!e.isText)return;let s=e.marks.find((e=>e.type===Uo.marks.link));if(s&&!0===s.attrs[Io])if(o.length){const r=o[o.length-1];r.endPos===i+t&&(r.endPos=n+t+e.nodeSize)}else o.push({startPos:i+t,endPos:i+t+e.nodeSize})}));for(const e of o){const n=t.doc.textBetween(e.startPos,e.endPos);Fh.test(n)?t.addMark(e.startPos,e.endPos,Uo.marks.link.create({href:n,[Io]:!0})):t.removeMark(e.startPos,e.endPos,Uo.marks.link)}const s=Fh.match(e.textContent);if(s)for(const e of s){const r=n+1+e.index,i=r+e.text.length;if(!t.doc.rangeHasMark(r,i,Uo.marks.code)){if(t.doc.rangeHasMark(r,i,Uo.marks.link)){let e=[];if(t.doc.nodesBetween(r,i,(t=>{if(t.isText){const n=t.marks.find((e=>e.type===Uo.marks.link));n&&!1===n.attrs[Io]&&e.push(n)}})),e.length)continue}t.addMark(r,i,Uo.marks.link.create({href:e.url,[Io]:!0}))}}})),t})(n)})}}var Rh=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{a(r.next(e))}catch(e){o(e)}}function l(e){try{a(r.throw(e))}catch(e){o(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}a((r=r.apply(e,t||[])).next())}))};function Bh(){return Rs.latestText?Nh.parse(Rs.latestText):Rs.latestDoc?Uo.nodeFromJSON(Rs.latestDoc):Uo.topNodeType.createAndFill()}!function(){Rh(this,void 0,void 0,(function*(){yield Rs.ready();const e=window.view=new Bi(document.querySelector("#editor"),{state:bt.create({doc:Bh(),plugins:[...tl,new ys(document.querySelector("#toolbar"),document.querySelector("#link-modal")),new ws(document.querySelector("#link-tooltip")),new xs(document.querySelector("#extender")),new wt({props:{nodeViews:$s}}),new Ih,Jo,io()]}),dispatchTransaction(t){const n=e.state.apply(t);e.updateState(n),t.docChanged&&Rs.saveNote(n.doc.toJSON(),Sh.serialize(n.doc),n.doc.textBetween(0,n.doc.nodeSize-2," "))}});Rs.onUpdate((t=>{const n=e.state.plugins.filter((e=>e instanceof ys==!1));e.setProps({state:bt.create({doc:Bh(),plugins:[...n,new ys(document.querySelector("#toolbar"),document.querySelector("#link-modal"))]})})}))}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxHQUFHLFlBQVksQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsR0FBRyxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxlQUFlLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxlQUFlLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxXQUFXLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxXQUFXLENBQUMsSUFBSSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsR0FBRyxXQUFXLENBQUMsRUFBRSxvQkFBb0IsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLHNCQUFzQixDQUFDLEVBQUUsV0FBVyxDQUFDLEdBQUcsZUFBZSxDQUFDLElBQUksV0FBVyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsY0FBYyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsYUFBYSxDQUFDLEdBQUcsWUFBWSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsR0FBRyxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsS0FBSyxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxlQUFlLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSx5QkFBeUIsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsMkJBQTJCLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxlQUFlLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsR0FBRyxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxRQUFRLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsR0FBRyxlQUFlLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxHQUFHLDBCQUEwQixDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLEdBQUcsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEdBQUcsVUFBVSxDQUFDLEVBQUUsa0JBQWtCLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLGtCQUFrQixDQUFDLEVBQUUsbUJBQW1CLENBQUMsRUFBRSxvQkFBb0IsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLG9CQUFvQixDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUscUJBQXFCLENBQUMsRUFBRSxzQkFBc0IsQ0FBQyxFQUFFLG1CQUFtQixDQUFDLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLGtCQUFrQixDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUscUJBQXFCLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSx5QkFBeUIsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLHlCQUF5QixDQUFDLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLHNCQUFzQixDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsdUJBQXVCLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEVBQUUsbUJBQW1CLENBQUMsRUFBRSxzQkFBc0IsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLDBCQUEwQixDQUFDLEVBQUUsdUJBQXVCLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsZUFBZSxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsZUFBZSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsdUJBQXVCLENBQUMsRUFBRSwwQkFBMEIsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLDhCQUE4QixDQUFDLEVBQUUsY0FBYyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsY0FBYyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsbUJBQW1CLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksSUFBa0MsR0FBWSxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUMsS0FBSyxjQUFjLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksSUFBa0MsR0FBWSxDQUFDLENBQUMsSUFBSSxVQUFVLENBQUMsS0FBSyxjQUFjLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxlQUFlLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsb0JBQW9CLENBQUMsRUFBRSxvQkFBb0IsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLG9CQUFvQixDQUFDLEVBQUUsc0JBQXNCLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLG1CQUFtQixDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsZUFBZSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsc0JBQXNCLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSx3QkFBd0IsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLG9CQUFvQixDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsa0JBQWtCLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxzQkFBc0IsRUFBRSxLQUFLLEVBQUUsY0FBYyxDQUFDLEVBQUUsQ0FBQyxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLG9CQUFvQixDQUFDLEVBQUUscUJBQXFCLENBQUMsRUFBRSxlQUFlLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLDJCQUEyQixDQUFDLEVBQUUsMkJBQTJCLENBQUMsRUFBRSwwQkFBMEIsQ0FBQyxFQUFFLDRCQUE0QixDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsY0FBYyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsc0JBQXNCLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSwyQkFBMkIsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLGVBQWUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxHQUFHLHFCQUFxQixDQUFDLEVBQUUsc0JBQXNCLENBQUMsRUFBRSxlQUFlLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxHQUFHLFlBQVksQ0FBQyxFQUFFLGlCQUFpQixDQUFDLEVBQUUsMEJBQTBCLENBQUMsRUFBRSxVQUFVLENBQUMsRUFB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Q0FBQyxFQUFFLG9CQUFvQixDQUFDLEVBQUUsc0JBQXNCLENBQUMsRUFBRSx3QkFBd0IsQ0FBQyxFQUFFLHVCQUF1QixDQUFDLEVBQUUsd0JBQXdCLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxFQUFFLHVCQUF1QixDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxDQUFDLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFLHlCQUF5QixDQUFDLEVBQUUsQ0FBQyxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSwwQkFBMEIsQ0FBQyxHQUFHLFlBQVksQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxFQUFFLGtCQUFrQixDQUFDLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxlQUFlLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxjQUFjLENBQUMsR0FBRyxhQUFhLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxjQUFjLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxlQUFlLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsY0FBYyxDQUFDLEVBQUUsY0FBYyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsd0JBQXdCLENBQUMsRUFBRSxDQUFDLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLDhCQUE4QixDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsWUFBWSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLHVCQUF1QixDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsY0FBYyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLG9CQUFvQixDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsYUFBYSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsU0FBUyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQUUsWUFBWSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksSUFBa0MsR0FBWSxDQUFDLENBQUMsTUFBTSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsR0FBRyxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxVQUFVLENBQUMsRUFBRSxlQUFlLENBQUMsS0FBSyxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxZQUFZLENBQUMsRUFBRSxlQUFyOXRCLE1DZE0sR0FBYSxJQUFJLElBQUksQ0FDdkIsQ0FBQyxHQUFJLFVBQ0wsQ0FBQyxHQUFJLFNBQ0wsQ0FBQyxHQUFJLFVBQ0wsQ0FBQyxHQUFJLFFBQ0wsQ0FBQyxHQUFJLFVBTUwsT0FBTyxVQUFVLFlBbUVyQixTQUFTLEdBQ0wsRUFDQSxHQUVBLE9BQU8sU0FBZ0IsR0FDbkIsSUFBSSxFQUNBLEVBQVUsRUFDVixFQUFTLEdBRWIsS0FBUSxFQUFRLEVBQU0sS0FBSyxJQUNuQixJQUFZLEVBQU0sUUFDbEIsR0FBVSxFQUFLLFVBQVUsRUFBUyxFQUFNLFFBSTVDLEdBQVUsRUFBSSxJQUFJLEVBQU0sR0FBRyxXQUFXLElBR3RDLEVBQVUsRUFBTSxNQUFRLEVBRzVCLE9BQU8sRUFBUyxFQUFLLFVBQVUsRUFDbkMsQ0FDSixDQVMwQixHQUFXLFdBQVksSUFRbEIsR0FDM0IsY0FDQSxJQUFJLElBQUksQ0FDSixDQUFDLEdBQUksVUFDTCxDQUFDLEdBQUksU0FDTCxDQUFDLElBQUssYUFVWSxHQUN0QixlQUNBLElBQUksSUFBSSxDQUNKLENBQUMsR0FBSSxTQUNMLENBQUMsR0FBSSxRQUNMLENBQUMsR0FBSSxRQUNMLENBQUMsSUFBSyxhQ25JZCxJQUFZLEdBT0EsR0NSWixTQUFTQyxHQUFVeHdFLEdBQU8sTUFBdUIsb0JBRmpELFNBQWlCQSxHQUFPLE9BQU9KLE9BQU9NLFVBQVVtQixTQUFTakIsS0FBS0osRUFBSyxDQUVsQ3l3RSxDQUFPendFLEVBQTJCLEVEQ25FLFNBQVksR0FFUixpQkFFQSxrQkFDSCxDQUxELENBQVksUUFBVyxLQU92QixTQUFZLEdBS1IsbUJBTUEscUJBS0EsNkJBS0EsNkJBS0Esa0JBQ0gsQ0EzQkQsQ0FBWSxRQUFZLEtDTnhCLE1BQU0wd0UsR0FBa0I5d0UsT0FBT00sVUFBVUMsZUFFekMsU0FBU2kzQyxHQUFLMXVCLEVBQVFocEIsR0FDcEIsT0FBT2d4RSxHQUFnQnR3RSxLQUFLc29CLEVBQVFocEIsRUFDdEMsQ0FJQSxTQUFTLEdBQVFNLEdBZWYsT0FkZ0J5SyxNQUFNdkssVUFBVTBLLE1BQU14SyxLQUFLeUIsVUFBVyxHQUU5QzZMLFNBQVEsU0FBVWlqRSxHQUN4QixHQUFLQSxFQUFMLENBRUEsR0FBc0IsaUJBQVhBLEVBQ1QsTUFBTSxJQUFJM3VFLFVBQVUydUUsRUFBUyxrQkFHL0Ivd0UsT0FBTzRpQyxLQUFLbXVDLEdBQVFqakUsU0FBUSxTQUFVaE8sR0FDcENNLEVBQUlOLEdBQU9peEUsRUFBT2p4RSxFQUNwQixHQVJzQixDQVN4QixJQUVPTSxDQUNULENBSUEsU0FBUzR3RSxHQUFnQmxULEVBQUsxc0QsRUFBSzYvRCxHQUNqQyxNQUFPLEdBQUc1aUUsT0FBT3l2RCxFQUFJOXlELE1BQU0sRUFBR29HLEdBQU02L0QsRUFBYW5ULEVBQUk5eUQsTUFBTW9HLEVBQU0sR0FDbkUsQ0FFQSxTQUFTOC9ELEdBQW1CclIsR0FHMUIsUUFBSUEsR0FBSyxPQUFVQSxHQUFLLFdBRXBCQSxHQUFLLE9BQVVBLEdBQUssWUFDSCxPQUFoQkEsR0FBMkMsUUFBWixNQUFKQSxRQUU1QkEsR0FBSyxHQUFRQSxHQUFLLEtBQ1osS0FBTkEsTUFDQUEsR0FBSyxJQUFRQSxHQUFLLFFBQ2xCQSxHQUFLLEtBQVFBLEdBQUssUUFFbEJBLEVBQUksY0FFVixDQUVBLFNBQVMsR0FBZUEsR0FFdEIsR0FBSUEsRUFBSSxNQUFRLENBRWQsTUFBTXNSLEVBQWEsUUFEbkJ0UixHQUFLLFFBQzZCLElBQzVCdVIsRUFBYSxPQUFjLEtBQUp2UixHQUU3QixPQUFPOWMsT0FBT0MsYUFBYW11QixFQUFZQyxFQUN6QyxDQUNBLE9BQU9ydUIsT0FBT0MsYUFBYTZjLEVBQzdCLENBRUEsTUFBTXdSLEdBQWtCLDZDQUVsQkMsR0FBa0IsSUFBSXhSLE9BQU91UixHQUFlTixPQUFTLElBRG5DLDZCQUNtREEsT0FBUSxNQUU3RVEsR0FBeUIsc0NBNkIvQixTQUFTQyxHQUFZenJFLEdBQ25CLE9BQUlBLEVBQUkwWSxRQUFRLE1BQVEsRUFBWTFZLEVBQzdCQSxFQUFJbUMsUUFBUW1wRSxHQUFnQixLQUNyQyxDQUVBLFNBQVNJLEdBQWExckUsR0FDcEIsT0FBSUEsRUFBSTBZLFFBQVEsTUFBUSxHQUFLMVksRUFBSTBZLFFBQVEsS0FBTyxFQUFZMVksRUFFckRBLEVBQUltQyxRQUFRb3BFLElBQWlCLFNBQVUvMEQsRUFBT20xRCxFQUFTQyxHQUM1RCxPQUFJRCxHQXBDUixTQUErQm4xRCxFQUFPckcsR0FDcEMsR0FBMkIsS0FBdkJBLEVBQUtrUSxXQUFXLElBQXNCbXJELEdBQXVCandELEtBQUtwTCxHQUFPLENBQzNFLE1BQU04TSxFQUFpQyxNQUExQjlNLEVBQUssR0FBRy9ULGNBQ2pCaXJFLFNBQVNsM0QsRUFBS2xMLE1BQU0sR0FBSSxJQUN4Qm9pRSxTQUFTbDNELEVBQUtsTCxNQUFNLEdBQUksSUFFNUIsT0FBSWttRSxHQUFrQmx1RCxHQUNiLEdBQWNBLEdBR2hCekcsQ0FDVCxDQUVBLE1BQU1xMUQsRUFBVSxHQUFXcjFELEdBQzNCLE9BQUlxMUQsSUFBWXIxRCxFQUNQcTFELEVBR0ZyMUQsQ0FDVCxDQWtCV3MxRCxDQUFxQnQxRCxFQUFPbzFELEVBQ3JDLEdBQ0YsQ0FFQSxNQUFNRyxHQUFzQixTQUN0QkMsR0FBeUIsVUFDekJDLEdBQW9CLENBQ3hCLElBQUssUUFDTCxJQUFLLE9BQ0wsSUFBSyxPQUNMLElBQUssVUFHUCxTQUFTQyxHQUFtQm42QixHQUMxQixPQUFPazZCLEdBQWtCbDZCLEVBQzNCLENBRUEsU0FBU282QixHQUFZbnNFLEdBQ25CLE9BQUkrckUsR0FBb0J4d0QsS0FBS3ZiLEdBQ3BCQSxFQUFJbUMsUUFBUTZwRSxHQUF3QkUsSUFFdENsc0UsQ0FDVCxDQUVBLE1BQU1vc0UsR0FBbUIsdUJBRXpCLFNBQVNDLEdBQVVyc0UsR0FDakIsT0FBT0EsRUFBSW1DLFFBQVFpcUUsR0FBa0IsT0FDdkMsQ0FFQSxTQUFTdk0sR0FBUzVpRCxHQUNoQixPQUFRQSxHQUNOLEtBQUssRUFDTCxLQUFLLEdBQ0gsT0FBTyxFQUVYLE9BQU8sQ0FDVCxDQUdBLFNBQVNxdkQsR0FBY3J2RCxHQUNyQixHQUFJQSxHQUFRLE1BQVVBLEdBQVEsS0FBVSxPQUFPLEVBQy9DLE9BQVFBLEdBQ04sS0FBSyxFQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxJQUNMLEtBQUssS0FDTCxLQUFLLEtBQ0wsS0FBSyxLQUNMLEtBQUssTUFDSCxPQUFPLEVBRVgsT0FBTyxDQUNULENBS0EsU0FBU3N2RCxHQUFheDZCLEdBQ3BCLE9BQU8sR0FBVXgyQixLQUFLdzJCLElBQU8sR0FBVXgyQixLQUFLdzJCLEVBQzlDLENBU0EsU0FBU3k2QixHQUFnQno2QixHQUN2QixPQUFRQSxHQUNOLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLElBQ0wsS0FBSyxJQUNMLEtBQUssSUFDTCxLQUFLLElBQ0gsT0FBTyxFQUNULFFBQ0UsT0FBTyxFQUViLENBSUEsU0FBUzA2QixHQUFvQnpzRSxHQStDM0IsT0E1Q0FBLEVBQU1BLEVBQUk4cEUsT0FBTzNuRSxRQUFRLE9BQVEsS0FRUCxNQUF0QixJQUFJL0YsZ0JBQ040RCxFQUFNQSxFQUFJbUMsUUFBUSxLQUFNLE1BbUNuQm5DLEVBQUk1RCxjQUFjNHFFLGFBQzNCLENBTUEsTUFBTTBGLEdBQU0sQ0FBRUMsTUFBSyxVQUFTLEdDdFJiLFNBQVNDLEdBQWdCajBELEVBQU85TCxFQUFPZ2dFLEdBQ3BELElBQUk3NkMsRUFBTzduQixFQUFPMmlFLEVBQVFDLEVBRTFCLE1BQU1qZ0UsRUFBTTZMLEVBQU1xMEQsT0FDWkMsRUFBU3QwRCxFQUFNdE4sSUFLckIsSUFIQXNOLEVBQU10TixJQUFNd0IsRUFBUSxFQUNwQm1sQixFQUFRLEVBRURyWixFQUFNdE4sSUFBTXlCLEdBQUssQ0FFdEIsR0FEQWdnRSxFQUFTbjBELEVBQU1vL0MsSUFBSTEzQyxXQUFXMUgsRUFBTXROLEtBQ3JCLEtBQVh5aEUsSUFDRjk2QyxJQUNjLElBQVZBLEdBQWEsQ0FDZjduQixHQUFRLEVBQ1IsS0FDRixDQUtGLEdBRkE0aUUsRUFBVXAwRCxFQUFNdE4sSUFDaEJzTixFQUFNdTBELEdBQUdweUQsT0FBT3F5RCxVQUFVeDBELEdBQ1gsS0FBWG0wRCxFQUNGLEdBQUlDLElBQVlwMEQsRUFBTXROLElBQU0sRUFFMUIybUIsU0FDSyxHQUFJNjZDLEVBRVQsT0FEQWwwRCxFQUFNdE4sSUFBTTRoRSxHQUNKLENBR2QsQ0FFQSxJQUFJRyxHQUFZLEVBU2hCLE9BUElqakUsSUFDRmlqRSxFQUFXejBELEVBQU10TixLQUluQnNOLEVBQU10TixJQUFNNGhFLEVBRUxHLENBQ1QsQ0MzQ2UsU0FBU0MsR0FBc0JydEUsRUFBSzZNLEVBQU9DLEdBQ3hELElBQUltUSxFQUNBNVIsRUFBTXdCLEVBRVYsTUFBTTVNLEVBQVMsQ0FDYnllLElBQUksRUFDSnJULElBQUssRUFDTHJMLElBQUssSUFHUCxHQUE0QixLQUF4QkEsRUFBSXFnQixXQUFXaFYsR0FBdUIsQ0FFeEMsSUFEQUEsSUFDT0EsRUFBTXlCLEdBQUssQ0FFaEIsR0FEQW1RLEVBQU9qZCxFQUFJcWdCLFdBQVdoVixHQUNULEtBQVQ0UixFQUEwQixPQUFPaGQsRUFDckMsR0FBYSxLQUFUZ2QsRUFBeUIsT0FBT2hkLEVBQ3BDLEdBQWEsS0FBVGdkLEVBSUYsT0FIQWhkLEVBQU9vTCxJQUFNQSxFQUFNLEVBQ25CcEwsRUFBT0QsSUFBTTByRSxHQUFZMXJFLEVBQUlpRixNQUFNNEgsRUFBUSxFQUFHeEIsSUFDOUNwTCxFQUFPeWUsSUFBSyxFQUNMemUsRUFFSSxLQUFUZ2QsR0FBeUI1UixFQUFNLEVBQUl5QixFQUNyQ3pCLEdBQU8sRUFJVEEsR0FDRixDQUdBLE9BQU9wTCxDQUNULENBSUEsSUFBSSt4QixFQUFRLEVBQ1osS0FBTzNtQixFQUFNeUIsSUFDWG1RLEVBQU9qZCxFQUFJcWdCLFdBQVdoVixHQUVULEtBQVQ0UixNQUdBQSxFQUFPLElBQWlCLE1BQVRBLElBRW5CLEdBQWEsS0FBVEEsR0FBeUI1UixFQUFNLEVBQUl5QixFQUF2QyxDQUNFLEdBQWdDLEtBQTVCOU0sRUFBSXFnQixXQUFXaFYsRUFBTSxHQUFlLE1BQ3hDQSxHQUFPLENBRVQsS0FKQSxDQU1BLEdBQWEsS0FBVDRSLElBQ0YrVSxJQUNJQSxFQUFRLElBQU0sT0FBTy94QixFQUczQixHQUFhLEtBQVRnZCxFQUF1QixDQUN6QixHQUFjLElBQVYrVSxFQUFlLE1BQ25CQSxHQUNGLENBRUEzbUIsR0FaQSxDQWVGLE9BQUl3QixJQUFVeEIsR0FDQSxJQUFWMm1CLElBRUoveEIsRUFBT0QsSUFBTTByRSxHQUFZMXJFLEVBQUlpRixNQUFNNEgsRUFBT3hCLElBQzFDcEwsRUFBT29MLElBQU1BLEVBQ2JwTCxFQUFPeWUsSUFBSyxHQUxnQnplLENBTzlCLENDcEVlLFNBQVNxdEUsR0FBZ0J0dEUsRUFBSzZNLEVBQU9DLEVBQUt5Z0UsR0FDdkQsSUFBSXR3RCxFQUNBNVIsRUFBTXdCLEVBRVYsTUFBTThMLEVBQVEsQ0FFWitGLElBQUksRUFFSjh1RCxjQUFjLEVBRWRuaUUsSUFBSyxFQUVMckwsSUFBSyxHQUVMOHNFLE9BQVEsR0FHVixHQUFJUyxFQUdGNTBELEVBQU0zWSxJQUFNdXRFLEVBQVd2dEUsSUFDdkIyWSxFQUFNbTBELE9BQVNTLEVBQVdULFdBQ3JCLENBQ0wsR0FBSXpoRSxHQUFPeUIsRUFBTyxPQUFPNkwsRUFFekIsSUFBSW0wRCxFQUFTOXNFLEVBQUlxZ0IsV0FBV2hWLEdBQzVCLEdBQWUsS0FBWHloRSxHQUFzQyxLQUFYQSxHQUFzQyxLQUFYQSxFQUEyQixPQUFPbjBELEVBRTVGOUwsSUFDQXhCLElBR2UsS0FBWHloRSxJQUFtQkEsRUFBUyxJQUVoQ24wRCxFQUFNbTBELE9BQVNBLENBQ2pCLENBRUEsS0FBT3poRSxFQUFNeUIsR0FBSyxDQUVoQixHQURBbVEsRUFBT2pkLEVBQUlxZ0IsV0FBV2hWLEdBQ2xCNFIsSUFBU3RFLEVBQU1tMEQsT0FJakIsT0FIQW4wRCxFQUFNdE4sSUFBTUEsRUFBTSxFQUNsQnNOLEVBQU0zWSxLQUFPMHJFLEdBQVkxckUsRUFBSWlGLE1BQU00SCxFQUFPeEIsSUFDMUNzTixFQUFNK0YsSUFBSyxFQUNKL0YsRUFDRixHQUFhLEtBQVRzRSxHQUEwQyxLQUFqQnRFLEVBQU1tMEQsT0FDeEMsT0FBT24wRCxFQUNXLEtBQVRzRSxHQUF5QjVSLEVBQU0sRUFBSXlCLEdBQzVDekIsSUFHRkEsR0FDRixDQUtBLE9BRkFzTixFQUFNNjBELGNBQWUsRUFDckI3MEQsRUFBTTNZLEtBQU8wckUsR0FBWTFyRSxFQUFJaUYsTUFBTTRILEVBQU94QixJQUNuQ3NOLENBQ1QsQ0N2REEsTUFBTTgwRCxHQUFnQixDQUFDLEVBdUd2QixTQUFTQyxLQTZCUHZ3RSxLQUFLeWhCLE1BQVEsR0FBTyxDQUFDLEVBQUc2dUQsR0FDMUIsQ0FuSUFBLEdBQWNFLFlBQWMsU0FBVTV5RCxFQUFRNnlELEVBQUtoeUUsRUFBU2l5RSxFQUFLQyxHQUMvRCxNQUFNQyxFQUFRaHpELEVBQU82eUQsR0FFckIsTUFBUSxRQUFVRSxFQUFJRSxZQUFZRCxHQUFTLElBQ25DNUIsR0FBVzRCLEVBQU01a0UsU0FDakIsU0FDVixFQUVBc2tFLEdBQWM1VixXQUFhLFNBQVU5OEMsRUFBUTZ5RCxFQUFLaHlFLEVBQVNpeUUsRUFBS0MsR0FDOUQsTUFBTUMsRUFBUWh6RCxFQUFPNnlELEdBRXJCLE1BQVEsT0FBU0UsRUFBSUUsWUFBWUQsR0FBUyxVQUNsQzVCLEdBQVdweEQsRUFBTzZ5RCxHQUFLemtFLFNBQ3ZCLGlCQUNWLEVBRUFza0UsR0FBY1EsTUFBUSxTQUFVbHpELEVBQVE2eUQsRUFBS2h5RSxFQUFTaXlFLEVBQUtDLEdBQ3pELE1BQU1DLEVBQVFoekQsRUFBTzZ5RCxHQUNmTSxFQUFPSCxFQUFNRyxLQUFPeEMsR0FBWXFDLEVBQU1HLE1BQU1wRSxPQUFTLEdBQzNELElBU0lxRSxFQVRBQyxFQUFXLEdBQ1hDLEVBQVksR0FFaEIsR0FBSUgsRUFBTSxDQUNSLE1BQU1qeUUsRUFBTWl5RSxFQUFLbHpELE1BQU0sVUFDdkJvekQsRUFBV255RSxFQUFJLEdBQ2ZveUUsRUFBWXB5RSxFQUFJZ0osTUFBTSxHQUFHOEosS0FBSyxHQUNoQyxDQVNBLEdBTEVvL0QsRUFERXZ5RSxFQUFRMHlFLFdBQ0kxeUUsRUFBUTB5RSxVQUFVUCxFQUFNNWtFLFFBQVNpbEUsRUFBVUMsSUFFM0NsQyxHQUFXNEIsRUFBTTVrRSxTQUdHLElBQWhDZ2xFLEVBQVl6MUQsUUFBUSxRQUN0QixPQUFPeTFELEVBQWMsS0FNdkIsR0FBSUQsRUFBTSxDQUNSLE1BQU0xeUUsRUFBSXV5RSxFQUFNUSxVQUFVLFNBQ3BCQyxFQUFXVCxFQUFNdCtELE1BQVFzK0QsRUFBTXQrRCxNQUFNeEssUUFBVSxHQUVqRHpKLEVBQUksRUFDTmd6RSxFQUFTL3lFLEtBQUssQ0FBQyxRQUFTRyxFQUFRNnlFLFdBQWFMLEtBRTdDSSxFQUFTaHpFLEdBQUtnekUsRUFBU2h6RSxHQUFHeUosUUFDMUJ1cEUsRUFBU2h6RSxHQUFHLElBQU0sSUFBTUksRUFBUTZ5RSxXQUFhTCxHQUkvQyxNQUFNTSxFQUFXLENBQ2ZqL0QsTUFBTysrRCxHQUdULE1BQU8sYUFBYVYsRUFBSUUsWUFBWVUsTUFBYVAsa0JBQ25ELENBRUEsTUFBTyxhQUFhTCxFQUFJRSxZQUFZRCxNQUFVSSxrQkFDaEQsRUFFQVYsR0FBYzNWLE1BQVEsU0FBVS84QyxFQUFRNnlELEVBQUtoeUUsRUFBU2l5RSxFQUFLQyxHQUN6RCxNQUFNQyxFQUFRaHpELEVBQU82eUQsR0FVckIsT0FIQUcsRUFBTXQrRCxNQUFNcytELEVBQU1RLFVBQVUsUUFBUSxHQUNsQ1QsRUFBSWEsbUJBQW1CWixFQUFNOWtFLFNBQVVyTixFQUFTaXlFLEdBRTNDQyxFQUFJYyxZQUFZN3pELEVBQVE2eUQsRUFBS2h5RSxFQUN0QyxFQUVBNnhFLEdBQWNvQixVQUFZLFNBQVU5ekQsRUFBUTZ5RCxFQUFLaHlFLEdBQy9DLE9BQU9BLEVBQVFrekUsU0FBVyxXQUFhLFFBQ3pDLEVBQ0FyQixHQUFjc0IsVUFBWSxTQUFVaDBELEVBQVE2eUQsRUFBS2h5RSxHQUMvQyxPQUFPQSxFQUFRb3pFLE9BQVVwekUsRUFBUWt6RSxTQUFXLFdBQWEsU0FBWSxJQUN2RSxFQUVBckIsR0FBYzdoRSxLQUFPLFNBQVVtUCxFQUFRNnlELEdBQ3JDLE9BQU96QixHQUFXcHhELEVBQU82eUQsR0FBS3prRSxRQUNoQyxFQUVBc2tFLEdBQWN3QixXQUFhLFNBQVVsMEQsRUFBUTZ5RCxHQUMzQyxPQUFPN3lELEVBQU82eUQsR0FBS3prRSxPQUNyQixFQUNBc2tFLEdBQWN5QixZQUFjLFNBQVVuMEQsRUFBUTZ5RCxHQUM1QyxPQUFPN3lELEVBQU82eUQsR0FBS3prRSxPQUNyQixFQTRDQXVrRSxHQUFTbnpFLFVBQVV5ekUsWUFBYyxTQUFzQkQsR0FDckQsSUFBSXZ5RSxFQUFHMnJFLEVBQUdsbkUsRUFFVixJQUFLOHRFLEVBQU10K0QsTUFBUyxNQUFPLEdBSTNCLElBRkF4UCxFQUFTLEdBRUp6RSxFQUFJLEVBQUcyckUsRUFBSTRHLEVBQU10K0QsTUFBTXRULE9BQVFYLEVBQUkyckUsRUFBRzNyRSxJQUN6Q3lFLEdBQVUsSUFBTWtzRSxHQUFXNEIsRUFBTXQrRCxNQUFNalUsR0FBRyxJQUFNLEtBQU8yd0UsR0FBVzRCLEVBQU10K0QsTUFBTWpVLEdBQUcsSUFBTSxJQUd6RixPQUFPeUUsQ0FDVCxFQVdBeXRFLEdBQVNuekUsVUFBVXEwRSxZQUFjLFNBQXNCN3pELEVBQVE2eUQsRUFBS2h5RSxHQUNsRSxNQUFNbXlFLEVBQVFoekQsRUFBTzZ5RCxHQUNyQixJQUFJM3RFLEVBQVMsR0FHYixHQUFJOHRFLEVBQU1vQixPQUNSLE1BQU8sR0FVTHBCLEVBQU16bUQsUUFBNEIsSUFBbkJ5bUQsRUFBTXFCLFNBQWtCeEIsR0FBTzd5RCxFQUFPNnlELEVBQU0sR0FBR3VCLFNBQ2hFbHZFLEdBQVUsTUFJWkEsS0FBOEIsSUFBbkI4dEUsRUFBTXFCLFFBQWlCLEtBQU8sS0FBT3JCLEVBQU05dUQsSUFHdERoZixHQUFVOUMsS0FBSzZ3RSxZQUFZRCxHQUdMLElBQWxCQSxFQUFNcUIsU0FBaUJ4ekUsRUFBUWt6RSxXQUNqQzd1RSxHQUFVLE1BSVosSUFBSW92RSxHQUFTLEVBQ2IsR0FBSXRCLEVBQU16bUQsUUFDUituRCxHQUFTLEVBRWEsSUFBbEJ0QixFQUFNcUIsU0FDSnhCLEVBQU0sRUFBSTd5RCxFQUFPNWUsUUFBUSxDQUMzQixNQUFNbXpFLEVBQVl2MEQsRUFBTzZ5RCxFQUFNLElBRVIsV0FBbkIwQixFQUFVbHZFLE1BQXFCa3ZFLEVBQVVILFNBSVgsSUFBdkJHLEVBQVVGLFNBQWtCRSxFQUFVcndELE1BQVE4dUQsRUFBTTl1RCxPQUQ3RG93RCxHQUFTLEVBTWIsQ0FNSixPQUZBcHZFLEdBQVVvdkUsRUFBUyxNQUFRLElBRXBCcHZFLENBQ1QsRUFVQXl0RSxHQUFTbnpFLFVBQVVnMUUsYUFBZSxTQUFVeDBELEVBQVFuZixFQUFTaXlFLEdBQzNELElBQUk1dEUsRUFBUyxHQUNiLE1BQU0yZSxFQUFRemhCLEtBQUt5aEIsTUFFbkIsSUFBSyxJQUFJcGpCLEVBQUksRUFBR21vQyxFQUFNNW9CLEVBQU81ZSxPQUFRWCxFQUFJbW9DLEVBQUtub0MsSUFBSyxDQUNqRCxNQUFNNEUsRUFBTzJhLEVBQU92ZixHQUFHNEUsVUFFSSxJQUFoQndlLEVBQU14ZSxHQUNmSCxHQUFVMmUsRUFBTXhlLEdBQU0yYSxFQUFRdmYsRUFBR0ksRUFBU2l5RSxFQUFLMXdFLE1BRS9DOEMsR0FBVTlDLEtBQUt5eEUsWUFBWTd6RCxFQUFRdmYsRUFBR0ksRUFFMUMsQ0FFQSxPQUFPcUUsQ0FDVCxFQVlBeXRFLEdBQVNuekUsVUFBVW8wRSxtQkFBcUIsU0FBVTV6RCxFQUFRbmYsRUFBU2l5RSxHQUNqRSxJQUFJNXRFLEVBQVMsR0FFYixJQUFLLElBQUl6RSxFQUFJLEVBQUdtb0MsRUFBTTVvQixFQUFPNWUsT0FBUVgsRUFBSW1vQyxFQUFLbm9DLElBQzVDLE9BQVF1ZixFQUFPdmYsR0FBRzRFLE1BQ2hCLElBQUssT0FNTCxJQUFLLGNBQ0wsSUFBSyxhQUNISCxHQUFVOGEsRUFBT3ZmLEdBQUcyTixRQUNwQixNQU5GLElBQUssUUFDSGxKLEdBQVU5QyxLQUFLd3hFLG1CQUFtQjV6RCxFQUFPdmYsR0FBR3lOLFNBQVVyTixFQUFTaXlFLEdBQy9ELE1BS0YsSUFBSyxZQUNMLElBQUssWUFDSDV0RSxHQUFVLEtBT2hCLE9BQU9BLENBQ1QsRUFXQXl0RSxHQUFTbnpFLFVBQVVpMUUsT0FBUyxTQUFVejBELEVBQVFuZixFQUFTaXlFLEdBQ3JELElBQUk1dEUsRUFBUyxHQUNiLE1BQU0yZSxFQUFRemhCLEtBQUt5aEIsTUFFbkIsSUFBSyxJQUFJcGpCLEVBQUksRUFBR21vQyxFQUFNNW9CLEVBQU81ZSxPQUFRWCxFQUFJbW9DLEVBQUtub0MsSUFBSyxDQUNqRCxNQUFNNEUsRUFBTzJhLEVBQU92ZixHQUFHNEUsS0FFVixXQUFUQSxFQUNGSCxHQUFVOUMsS0FBS295RSxhQUFheDBELEVBQU92ZixHQUFHeU4sU0FBVXJOLEVBQVNpeUUsUUFDekIsSUFBaEJqdkQsRUFBTXhlLEdBQ3RCSCxHQUFVMmUsRUFBTXhlLEdBQU0yYSxFQUFRdmYsRUFBR0ksRUFBU2l5RSxFQUFLMXdFLE1BRS9DOEMsR0FBVTlDLEtBQUt5eEUsWUFBWTd6RCxFQUFRdmYsRUFBR0ksRUFBU2l5RSxFQUVuRCxDQUVBLE9BQU81dEUsQ0FDVCxFQUVBLFlDNVNBLFNBQVN3dkUsS0FVUHR5RSxLQUFLdXlFLFVBQVksR0FPakJ2eUUsS0FBS3d5RSxVQUFZLElBQ25CLENBTUFGLEdBQU1sMUUsVUFBVXExRSxTQUFXLFNBQVV6L0QsR0FDbkMsSUFBSyxJQUFJM1UsRUFBSSxFQUFHQSxFQUFJMkIsS0FBS3V5RSxVQUFVdnpFLE9BQVFYLElBQ3pDLEdBQUkyQixLQUFLdXlFLFVBQVVsMEUsR0FBRzJVLE9BQVNBLEVBQzdCLE9BQU8zVSxFQUdYLE9BQVEsQ0FDVixFQUlBaTBFLEdBQU1sMUUsVUFBVXMxRSxZQUFjLFdBQzVCLE1BQU1uMkUsRUFBT3lELEtBQ1AyeUUsRUFBUyxDQUFDLElBR2hCcDJFLEVBQUtnMkUsVUFBVTNuRSxTQUFRLFNBQVVpWCxHQUMxQkEsRUFBSzVoQixTQUVWNGhCLEVBQUtrekIsSUFBSW5xQyxTQUFRLFNBQVVnb0UsR0FDckJELEVBQU9wM0QsUUFBUXEzRCxHQUFXLEdBQzVCRCxFQUFPcjBFLEtBQUtzMEUsRUFFaEIsR0FDRixJQUVBcjJFLEVBQUtpMkUsVUFBWSxDQUFDLEVBRWxCRyxFQUFPL25FLFNBQVEsU0FBVWlvRSxHQUN2QnQyRSxFQUFLaTJFLFVBQVVLLEdBQVMsR0FDeEJ0MkUsRUFBS2cyRSxVQUFVM25FLFNBQVEsU0FBVWlYLEdBQzFCQSxFQUFLNWhCLFVBRU40eUUsR0FBU2h4RCxFQUFLa3pCLElBQUl4NUIsUUFBUXMzRCxHQUFTLEdBRXZDdDJFLEVBQUtpMkUsVUFBVUssR0FBT3YwRSxLQUFLdWpCLEVBQUtpeEQsSUFDbEMsR0FDRixHQUNGLEVBMkJBUixHQUFNbDFFLFVBQVVzaEUsR0FBSyxTQUFVMXJELEVBQU04L0QsRUFBSXIwRSxHQUN2QyxNQUFNdVMsRUFBUWhSLEtBQUt5eUUsU0FBU3ovRCxHQUN0QisvRCxFQUFNdDBFLEdBQVcsQ0FBQyxFQUV4QixJQUFlLElBQVh1UyxFQUFnQixNQUFNLElBQUk5UyxNQUFNLDBCQUE0QjhVLEdBRWhFaFQsS0FBS3V5RSxVQUFVdmhFLEdBQU84aEUsR0FBS0EsRUFDM0I5eUUsS0FBS3V5RSxVQUFVdmhFLEdBQU8rakMsSUFBTWcrQixFQUFJaCtCLEtBQU8sR0FDdkMvMEMsS0FBS3d5RSxVQUFZLElBQ25CLEVBMEJBRixHQUFNbDFFLFVBQVV5WixPQUFTLFNBQVVtOEQsRUFBWUMsRUFBVUgsRUFBSXIwRSxHQUMzRCxNQUFNdVMsRUFBUWhSLEtBQUt5eUUsU0FBU08sR0FDdEJELEVBQU10MEUsR0FBVyxDQUFDLEVBRXhCLElBQWUsSUFBWHVTLEVBQWdCLE1BQU0sSUFBSTlTLE1BQU0sMEJBQTRCODBFLEdBRWhFaHpFLEtBQUt1eUUsVUFBVW5sRSxPQUFPNEQsRUFBTyxFQUFHLENBQzlCZ0MsS0FBTWlnRSxFQUNOaHpFLFNBQVMsRUFDVDZ5RSxLQUNBLzlCLElBQUtnK0IsRUFBSWgrQixLQUFPLEtBR2xCLzBDLEtBQUt3eUUsVUFBWSxJQUNuQixFQTBCQUYsR0FBTWwxRSxVQUFVMFosTUFBUSxTQUFVbzhELEVBQVdELEVBQVVILEVBQUlyMEUsR0FDekQsTUFBTXVTLEVBQVFoUixLQUFLeXlFLFNBQVNTLEdBQ3RCSCxFQUFNdDBFLEdBQVcsQ0FBQyxFQUV4QixJQUFlLElBQVh1UyxFQUFnQixNQUFNLElBQUk5UyxNQUFNLDBCQUE0QmcxRSxHQUVoRWx6RSxLQUFLdXlFLFVBQVVubEUsT0FBTzRELEVBQVEsRUFBRyxFQUFHLENBQ2xDZ0MsS0FBTWlnRSxFQUNOaHpFLFNBQVMsRUFDVDZ5RSxLQUNBLzlCLElBQUtnK0IsRUFBSWgrQixLQUFPLEtBR2xCLzBDLEtBQUt3eUUsVUFBWSxJQUNuQixFQXlCQUYsR0FBTWwxRSxVQUFVa0IsS0FBTyxTQUFVMjBFLEVBQVVILEVBQUlyMEUsR0FDN0MsTUFBTXMwRSxFQUFNdDBFLEdBQVcsQ0FBQyxFQUV4QnVCLEtBQUt1eUUsVUFBVWowRSxLQUFLLENBQ2xCMFUsS0FBTWlnRSxFQUNOaHpFLFNBQVMsRUFDVDZ5RSxLQUNBLzlCLElBQUtnK0IsRUFBSWgrQixLQUFPLEtBR2xCLzBDLEtBQUt3eUUsVUFBWSxJQUNuQixFQWNBRixHQUFNbDFFLFVBQVUrMUUsT0FBUyxTQUFVcFosRUFBTXFaLEdBQ2xDenJFLE1BQU1xSyxRQUFRK25ELEtBQVNBLEVBQU8sQ0FBQ0EsSUFFcEMsTUFBTWozRCxFQUFTLEdBZWYsT0FaQWkzRCxFQUFLbnZELFNBQVEsU0FBVW9JLEdBQ3JCLE1BQU15OUQsRUFBTXp3RSxLQUFLeXlFLFNBQVN6L0QsR0FFMUIsR0FBSXk5RCxFQUFNLEVBQUcsQ0FDWCxHQUFJMkMsRUFBaUIsT0FDckIsTUFBTSxJQUFJbDFFLE1BQU0sb0NBQXNDOFUsRUFDeEQsQ0FDQWhULEtBQUt1eUUsVUFBVTlCLEdBQUt4d0UsU0FBVSxFQUM5QjZDLEVBQU94RSxLQUFLMFUsRUFDZCxHQUFHaFQsTUFFSEEsS0FBS3d5RSxVQUFZLEtBQ1YxdkUsQ0FDVCxFQVlBd3ZFLEdBQU1sMUUsVUFBVWkyRSxXQUFhLFNBQVV0WixFQUFNcVosR0FDdEN6ckUsTUFBTXFLLFFBQVErbkQsS0FBU0EsRUFBTyxDQUFDQSxJQUVwQy81RCxLQUFLdXlFLFVBQVUzbkUsU0FBUSxTQUFVaVgsR0FBUUEsRUFBSzVoQixTQUFVLENBQU0sSUFFOURELEtBQUttekUsT0FBT3BaLEVBQU1xWixFQUNwQixFQWNBZCxHQUFNbDFFLFVBQVVrMkUsUUFBVSxTQUFVdlosRUFBTXFaLEdBQ25DenJFLE1BQU1xSyxRQUFRK25ELEtBQVNBLEVBQU8sQ0FBQ0EsSUFFcEMsTUFBTWozRCxFQUFTLEdBZWYsT0FaQWkzRCxFQUFLbnZELFNBQVEsU0FBVW9JLEdBQ3JCLE1BQU15OUQsRUFBTXp3RSxLQUFLeXlFLFNBQVN6L0QsR0FFMUIsR0FBSXk5RCxFQUFNLEVBQUcsQ0FDWCxHQUFJMkMsRUFBaUIsT0FDckIsTUFBTSxJQUFJbDFFLE1BQU0sb0NBQXNDOFUsRUFDeEQsQ0FDQWhULEtBQUt1eUUsVUFBVTlCLEdBQUt4d0UsU0FBVSxFQUM5QjZDLEVBQU94RSxLQUFLMFUsRUFDZCxHQUFHaFQsTUFFSEEsS0FBS3d5RSxVQUFZLEtBQ1YxdkUsQ0FDVCxFQVdBd3ZFLEdBQU1sMUUsVUFBVW0yRSxTQUFXLFNBQVVDLEdBTW5DLE9BTHVCLE9BQW5CeHpFLEtBQUt3eUUsV0FDUHh5RSxLQUFLMHlFLGNBSUExeUUsS0FBS3d5RSxVQUFVZ0IsSUFBYyxFQUN0QyxFQUVBLFlDeFVBLFNBQVNDLEdBQU94d0UsRUFBTTZlLEVBQUttd0QsR0FNekJqeUUsS0FBS2lELEtBQVdBLEVBT2hCakQsS0FBSzhoQixJQUFXQSxFQU9oQjloQixLQUFLc1MsTUFBVyxLQU9oQnRTLEtBQUtYLElBQVcsS0FXaEJXLEtBQUtpeUUsUUFBV0EsRUFPaEJqeUUsS0FBSzYwQixNQUFXLEVBT2hCNzBCLEtBQUs4TCxTQUFXLEtBUWhCOUwsS0FBS2dNLFFBQVcsR0FPaEJoTSxLQUFLMHpFLE9BQVcsR0FXaEIxekUsS0FBSyt3RSxLQUFXLEdBT2hCL3dFLEtBQUtpOEIsS0FBVyxLQVFoQmo4QixLQUFLbXFCLE9BQVcsRUFRaEJucUIsS0FBS2d5RSxRQUFXLENBQ2xCLENBT0F5QixHQUFNcjJFLFVBQVVnMEUsVUFBWSxTQUFvQnArRCxHQUM5QyxJQUFLaFQsS0FBS3NTLE1BQVMsT0FBUSxFQUUzQixNQUFNQSxFQUFRdFMsS0FBS3NTLE1BRW5CLElBQUssSUFBSWpVLEVBQUksRUFBR21vQyxFQUFNbDBCLEVBQU10VCxPQUFRWCxFQUFJbW9DLEVBQUtub0MsSUFDM0MsR0FBSWlVLEVBQU1qVSxHQUFHLEtBQU8yVSxFQUFRLE9BQU8zVSxFQUVyQyxPQUFRLENBQ1YsRUFPQW8xRSxHQUFNcjJFLFVBQVV1MkUsU0FBVyxTQUFtQkMsR0FDeEM1ekUsS0FBS3NTLE1BQ1B0UyxLQUFLc1MsTUFBTWhVLEtBQUtzMUUsR0FFaEI1ekUsS0FBS3NTLE1BQVEsQ0FBQ3NoRSxFQUVsQixFQU9BSCxHQUFNcjJFLFVBQVV5MkUsUUFBVSxTQUFrQjdnRSxFQUFNdFQsR0FDaEQsTUFBTSt3RSxFQUFNendFLEtBQUtveEUsVUFBVXArRCxHQUNyQjRnRSxFQUFXLENBQUM1Z0UsRUFBTXRULEdBRXBCK3dFLEVBQU0sRUFDUnp3RSxLQUFLMnpFLFNBQVNDLEdBRWQ1ekUsS0FBS3NTLE1BQU1tK0QsR0FBT21ELENBRXRCLEVBT0FILEdBQU1yMkUsVUFBVTAyRSxRQUFVLFNBQWtCOWdFLEdBQzFDLE1BQU15OUQsRUFBTXp3RSxLQUFLb3hFLFVBQVVwK0QsR0FDM0IsSUFBSXRULEVBQVEsS0FJWixPQUhJK3dFLEdBQU8sSUFDVC93RSxFQUFRTSxLQUFLc1MsTUFBTW0rRCxHQUFLLElBRW5CL3dFLENBQ1QsRUFRQSt6RSxHQUFNcjJFLFVBQVUyMkUsU0FBVyxTQUFtQi9nRSxFQUFNdFQsR0FDbEQsTUFBTSt3RSxFQUFNendFLEtBQUtveEUsVUFBVXArRCxHQUV2Qnk5RCxFQUFNLEVBQ1J6d0UsS0FBSzJ6RSxTQUFTLENBQUMzZ0UsRUFBTXRULElBRXJCTSxLQUFLc1MsTUFBTW0rRCxHQUFLLEdBQUt6d0UsS0FBS3NTLE1BQU1tK0QsR0FBSyxHQUFLLElBQU0vd0UsQ0FFcEQsRUFFQSxZQ3pMQSxTQUFTczBFLEdBQVdwWixFQUFLbVYsRUFBSVcsR0FDM0Ixd0UsS0FBSzQ2RCxJQUFNQSxFQUNYNTZELEtBQUswd0UsSUFBTUEsRUFDWDF3RSxLQUFLNGQsT0FBUyxHQUNkNWQsS0FBS2kwRSxZQUFhLEVBQ2xCajBFLEtBQUsrdkUsR0FBS0EsQ0FDWixDQUdBaUUsR0FBVTUyRSxVQUFVcTJFLE1BQVEsR0FFNUIsWUNiTVMsR0FBZSxZQUNmQyxHQUFlLE1DTXJCLFNBQVNDLEdBQWF2eEUsR0FDcEIsTUFBTyxhQUFhdWIsS0FBS3ZiLEVBQzNCLENDR0EsTUFBTXd4RSxHQUFVLCtCQUlWQyxHQUFzQixnQkFFdEJDLEdBQWlCLGlCQUNqQkMsR0FBYyxDQUNsQjdYLEVBQUcsSUFDSC92RCxFQUFHLElBQ0g2bkUsR0FBSSxLQUdOLFNBQVNDLEdBQVdyN0QsRUFBT3JHLEdBQ3pCLE9BQU93aEUsR0FBWXhoRSxFQUFLL1QsY0FDMUIsQ0FFQSxTQUFTMDFFLEdBQWdCQyxHQUN2QixJQUFJQyxFQUFrQixFQUV0QixJQUFLLElBQUl4MkUsRUFBSXUyRSxFQUFhNTFFLE9BQVMsRUFBR1gsR0FBSyxFQUFHQSxJQUFLLENBQ2pELE1BQU11eUUsRUFBUWdFLEVBQWF2MkUsR0FFUixTQUFmdXlFLEVBQU0zdEUsTUFBb0I0eEUsSUFDNUJqRSxFQUFNNWtFLFFBQVU0a0UsRUFBTTVrRSxRQUFRaEgsUUFBUXV2RSxHQUFnQkcsS0FHckMsY0FBZjlELEVBQU0zdEUsTUFBdUMsU0FBZjJ0RSxFQUFNRyxNQUN0QzhELElBR2lCLGVBQWZqRSxFQUFNM3RFLE1BQXdDLFNBQWYydEUsRUFBTUcsTUFDdkM4RCxHQUVKLENBQ0YsQ0FFQSxTQUFTQyxHQUFjRixHQUNyQixJQUFJQyxFQUFrQixFQUV0QixJQUFLLElBQUl4MkUsRUFBSXUyRSxFQUFhNTFFLE9BQVMsRUFBR1gsR0FBSyxFQUFHQSxJQUFLLENBQ2pELE1BQU11eUUsRUFBUWdFLEVBQWF2MkUsR0FFUixTQUFmdXlFLEVBQU0zdEUsTUFBb0I0eEUsR0FDeEJSLEdBQVFqMkQsS0FBS3d5RCxFQUFNNWtFLFdBQ3JCNGtFLEVBQU01a0UsUUFBVTRrRSxFQUFNNWtFLFFBQ25CaEgsUUFBUSxPQUFRLEtBR2hCQSxRQUFRLFVBQVcsS0FBS0EsUUFBUSxXQUFZLFFBQzVDQSxRQUFRLGNBQWUsVUFBVUEsUUFBUSxTQUFVLEtBRW5EQSxRQUFRLDBCQUEyQixPQUVuQ0EsUUFBUSxxQkFBc0IsT0FDOUJBLFFBQVEsNkJBQThCLFFBSTFCLGNBQWY0ckUsRUFBTTN0RSxNQUF1QyxTQUFmMnRFLEVBQU1HLE1BQ3RDOEQsSUFHaUIsZUFBZmpFLEVBQU0zdEUsTUFBd0MsU0FBZjJ0RSxFQUFNRyxNQUN2QzhELEdBRUosQ0FDRixDQzdFQSxNQUFNRSxHQUFnQixPQUNoQkMsR0FBVyxRQUdqQixTQUFTQyxHQUFXcHlFLEVBQUttTyxFQUFPNGpDLEdBQzlCLE9BQU8veEMsRUFBSWlGLE1BQU0sRUFBR2tKLEdBQVM0akMsRUFBSy94QyxFQUFJaUYsTUFBTWtKLEVBQVEsRUFDdEQsQ0FFQSxTQUFTa2tFLEdBQWlCdDNELEVBQVFwQyxHQUNoQyxJQUFJOU0sRUFFSixNQUFNNjJCLEVBQVEsR0FFZCxJQUFLLElBQUlsbkMsRUFBSSxFQUFHQSxFQUFJdWYsRUFBTzVlLE9BQVFYLElBQUssQ0FDdEMsTUFBTXV5RSxFQUFRaHpELEVBQU92ZixHQUVmODJFLEVBQVl2M0QsRUFBT3ZmLEdBQUd3MkIsTUFFNUIsSUFBS25tQixFQUFJNjJCLEVBQU12bUMsT0FBUyxFQUFHMFAsR0FBSyxLQUMxQjYyQixFQUFNNzJCLEdBQUdtbUIsT0FBU3NnRCxHQURXem1FLEtBS25DLEdBRkE2MkIsRUFBTXZtQyxPQUFTMFAsRUFBSSxFQUVBLFNBQWZraUUsRUFBTTN0RSxLQUFtQixTQUU3QixJQUFJd0wsRUFBT21pRSxFQUFNNWtFLFFBQ2JrQyxFQUFNLEVBQ055QixFQUFNbEIsRUFBS3pQLE9BR2ZvMkUsRUFDQSxLQUFPbG5FLEVBQU15QixHQUFLLENBQ2hCcWxFLEdBQVNLLFVBQVlubkUsRUFDckIsTUFBTXpKLEVBQUl1d0UsR0FBUzl5RCxLQUFLelQsR0FDeEIsSUFBS2hLLEVBQUssTUFFVixJQUFJNndFLEdBQVUsRUFDVkMsR0FBVyxFQUNmcm5FLEVBQU16SixFQUFFdU0sTUFBUSxFQUNoQixNQUFNd2tFLEVBQXFCLE1BQVQvd0UsRUFBRSxHQUtwQixJQUFJZ3hFLEVBQVcsR0FFZixHQUFJaHhFLEVBQUV1TSxNQUFRLEdBQUssRUFDakJ5a0UsRUFBV2huRSxFQUFLeVUsV0FBV3plLEVBQUV1TSxNQUFRLFFBRXJDLElBQUt0QyxFQUFJclEsRUFBSSxFQUFHcVEsR0FBSyxJQUNJLGNBQW5Ca1AsRUFBT2xQLEdBQUd6TCxNQUEyQyxjQUFuQjJhLEVBQU9sUCxHQUFHekwsTUFEMUJ5TCxJQUV0QixHQUFLa1AsRUFBT2xQLEdBQUcxQyxRQUFmLENBRUF5cEUsRUFBVzczRCxFQUFPbFAsR0FBRzFDLFFBQVFrWCxXQUFXdEYsRUFBT2xQLEdBQUcxQyxRQUFRaE4sT0FBUyxHQUNuRSxLQUh3QixDQVU1QixJQUFJMDJFLEVBQVcsR0FFZixHQUFJeG5FLEVBQU15QixFQUNSK2xFLEVBQVdqbkUsRUFBS3lVLFdBQVdoVixRQUUzQixJQUFLUSxFQUFJclEsRUFBSSxFQUFHcVEsRUFBSWtQLEVBQU81ZSxTQUNGLGNBQW5CNGUsRUFBT2xQLEdBQUd6TCxNQUEyQyxjQUFuQjJhLEVBQU9sUCxHQUFHekwsTUFEZnlMLElBRWpDLEdBQUtrUCxFQUFPbFAsR0FBRzFDLFFBQWYsQ0FFQTBwRSxFQUFXOTNELEVBQU9sUCxHQUFHMUMsUUFBUWtYLFdBQVcsR0FDeEMsS0FId0IsQ0FPNUIsTUFBTXl5RCxFQUFrQnRHLEdBQWVvRyxJQUFhckcsR0FBWXZ2QixPQUFPQyxhQUFhMjFCLElBQzlFRyxFQUFrQnZHLEdBQWVxRyxJQUFhdEcsR0FBWXZ2QixPQUFPQyxhQUFhNDFCLElBRTlFRyxFQUFtQjFHLEdBQWFzRyxHQUNoQ0ssRUFBbUIzRyxHQUFhdUcsR0FxQ3RDLEdBbkNJSSxFQUNGUixHQUFVLEVBQ0RNLElBQ0hDLEdBQW9CRixJQUN4QkwsR0FBVSxJQUlWTyxFQUNGTixHQUFXLEVBQ0ZJLElBQ0hHLEdBQW9CRixJQUN4QkwsR0FBVyxJQUlFLEtBQWJHLEdBQXNDLE1BQVRqeEUsRUFBRSxJQUM3Qmd4RSxHQUFZLElBQWdCQSxHQUFZLEtBRTFDRixFQUFXRCxHQUFVLEdBSXJCQSxHQUFXQyxJQVFiRCxFQUFVSyxFQUNWSixFQUFXSyxHQUdSTixHQUFZQyxFQUFqQixDQVFBLEdBQUlBLEVBRUYsSUFBSzdtRSxFQUFJNjJCLEVBQU12bUMsT0FBUyxFQUFHMFAsR0FBSyxFQUFHQSxJQUFLLENBQ3RDLElBQUk5RixFQUFPMjhCLEVBQU03MkIsR0FDakIsR0FBSTYyQixFQUFNNzJCLEdBQUdtbUIsTUFBUXNnRCxFQUFhLE1BQ2xDLEdBQUl2c0UsRUFBS210RSxTQUFXUCxHQUFZandDLEVBQU03MkIsR0FBR21tQixRQUFVc2dELEVBQVcsQ0FHNUQsSUFBSWEsRUFDQUMsRUFISnJ0RSxFQUFPMjhCLEVBQU03MkIsR0FJVDhtRSxHQUNGUSxFQUFZeDZELEVBQU11MEQsR0FBR3R4RSxRQUFReTNFLE9BQU8sR0FDcENELEVBQWF6NkQsRUFBTXUwRCxHQUFHdHhFLFFBQVF5M0UsT0FBTyxLQUVyQ0YsRUFBWXg2RCxFQUFNdTBELEdBQUd0eEUsUUFBUXkzRSxPQUFPLEdBQ3BDRCxFQUFhejZELEVBQU11MEQsR0FBR3R4RSxRQUFReTNFLE9BQU8sSUFNdkN0RixFQUFNNWtFLFFBQVVpcEUsR0FBVXJFLEVBQU01a0UsUUFBU3ZILEVBQUV1TSxNQUFPaWxFLEdBQ2xEcjRELEVBQU9oVixFQUFLZ29FLE9BQU81a0UsUUFBVWlwRSxHQUMzQnIzRCxFQUFPaFYsRUFBS2dvRSxPQUFPNWtFLFFBQVNwRCxFQUFLc0YsSUFBSzhuRSxHQUV4QzluRSxHQUFPK25FLEVBQVdqM0UsT0FBUyxFQUN2QjRKLEVBQUtnb0UsUUFBVXZ5RSxJQUFLNlAsR0FBTzhuRSxFQUFVaDNFLE9BQVMsR0FFbER5UCxFQUFPbWlFLEVBQU01a0UsUUFDYjJELEVBQU1sQixFQUFLelAsT0FFWHVtQyxFQUFNdm1DLE9BQVMwUCxFQUNmLFNBQVMwbUUsQ0FDWCxDQUNGLENBR0VFLEVBQ0YvdkMsRUFBTWpuQyxLQUFLLENBQ1RzeUUsTUFBT3Z5RSxFQUNQNlAsSUFBS3pKLEVBQUV1TSxNQUNQK2tFLE9BQVFQLEVBQ1IzZ0QsTUFBT3NnRCxJQUVBSSxHQUFZQyxJQUNyQjVFLEVBQU01a0UsUUFBVWlwRSxHQUFVckUsRUFBTTVrRSxRQUFTdkgsRUFBRXVNLE1BdktoQyxLQXdIYixNQUpNd2tFLElBQ0Y1RSxFQUFNNWtFLFFBQVVpcEUsR0FBVXJFLEVBQU01a0UsUUFBU3ZILEVBQUV1TSxNQXJIbEMsS0F5S2YsQ0FDRixDQUNGLENDaEtBLE1BQU1tbEUsR0FBUyxDQUNiLENBQUMsWUpiWSxTQUFvQjM2RCxHQUNqQyxJQUFJM1ksRUFHSkEsRUFBTTJZLEVBQU1vL0MsSUFBSTUxRCxRQUFRa3ZFLEdBQWEsTUFHckNyeEUsRUFBTUEsRUFBSW1DLFFBQVFtdkUsR0FBUyxLQUUzQjM0RCxFQUFNby9DLElBQU0vM0QsQ0FDZCxHSUlFLENBQUMsUUNwQlksU0FBZ0IyWSxHQUM3QixJQUFJbzFELEVBRUFwMUQsRUFBTXk0RCxZQUNSckQsRUFBaUIsSUFBSXAxRCxFQUFNaTRELE1BQU0sU0FBVSxHQUFJLEdBQy9DN0MsRUFBTTVrRSxRQUFXd1AsRUFBTW8vQyxJQUN2QmdXLEVBQU12eEUsSUFBVyxDQUFDLEVBQUcsR0FDckJ1eEUsRUFBTTlrRSxTQUFXLEdBQ2pCMFAsRUFBTW9DLE9BQU90ZixLQUFLc3lFLElBRWxCcDFELEVBQU11MEQsR0FBRzVsRCxNQUFNbm5CLE1BQU13WSxFQUFNby9DLElBQUtwL0MsRUFBTXUwRCxHQUFJdjBELEVBQU1rMUQsSUFBS2wxRCxFQUFNb0MsT0FFL0QsR0RTRSxDQUFDLFNFckJZLFNBQWlCcEMsR0FDOUIsTUFBTW9DLEVBQVNwQyxFQUFNb0MsT0FHckIsSUFBSyxJQUFJdmYsRUFBSSxFQUFHMnJFLEVBQUlwc0QsRUFBTzVlLE9BQVFYLEVBQUkyckUsRUFBRzNyRSxJQUFLLENBQzdDLE1BQU0yZixFQUFNSixFQUFPdmYsR0FDRixXQUFiMmYsRUFBSS9hLE1BQ051WSxFQUFNdTBELEdBQUdweUQsT0FBTzNhLE1BQU1nYixFQUFJaFMsUUFBU3dQLEVBQU11MEQsR0FBSXYwRCxFQUFNazFELElBQUsxeUQsRUFBSWxTLFNBRWhFLENBQ0YsR0ZZRSxDQUFDLFVIUlksU0FBa0IwUCxHQUMvQixNQUFNNDZELEVBQWM1NkQsRUFBTW9DLE9BUjVCLElBQXFCL2EsRUFVbkIsR0FBSzJZLEVBQU11MEQsR0FBR3R4RSxRQUFRNDNFLFFBRXRCLElBQUssSUFBSTNuRSxFQUFJLEVBQUdzN0QsRUFBSW9NLEVBQVlwM0UsT0FBUTBQLEVBQUlzN0QsRUFBR3Q3RCxJQUFLLENBQ2xELEdBQTRCLFdBQXhCMG5FLEVBQVkxbkUsR0FBR3pMLE9BQ2R1WSxFQUFNdTBELEdBQUdzRyxRQUFRQyxRQUFRRixFQUFZMW5FLEdBQUcxQyxTQUMzQyxTQUdGLElBQUk0UixFQUFTdzRELEVBQVkxbkUsR0FBRzVDLFNBRXhCeXFFLEVBQWdCLEVBSXBCLElBQUssSUFBSWw0RSxFQUFJdWYsRUFBTzVlLE9BQVMsRUFBR1gsR0FBSyxFQUFHQSxJQUFLLENBQzNDLE1BQU1tNEUsRUFBZTU0RCxFQUFPdmYsR0FHNUIsR0FBMEIsZUFBdEJtNEUsRUFBYXZ6RSxNQWlCakIsR0FSMEIsZ0JBQXRCdXpFLEVBQWF2ekUsT0FyQ0ZKLEVBc0NFMnpFLEVBQWF4cUUsUUFyQzNCLFlBQVlvUyxLQUFLdmIsSUFxQ3NCMHpFLEVBQWdCLEdBQ3REQSxJQUVFbkMsR0FBWW9DLEVBQWF4cUUsVUFDM0J1cUUsT0FHQUEsRUFBZ0IsSUFFTSxTQUF0QkMsRUFBYXZ6RSxNQUFtQnVZLEVBQU11MEQsR0FBR3NHLFFBQVFqNEQsS0FBS280RCxFQUFheHFFLFNBQVUsQ0FDL0UsTUFBTXlDLEVBQU8rbkUsRUFBYXhxRSxRQUMxQixJQUFJeXFFLEVBQVFqN0QsRUFBTXUwRCxHQUFHc0csUUFBUWg5RCxNQUFNNUssR0FHbkMsTUFBTTRELEVBQVEsR0FDZCxJQUFJd2lCLEVBQVEyaEQsRUFBYTNoRCxNQUNyQjJ3QyxFQUFVLEVBS1ZpUixFQUFNejNFLE9BQVMsR0FDSSxJQUFuQnkzRSxFQUFNLEdBQUd6bEUsT0FDVDNTLEVBQUksR0FDbUIsaUJBQXZCdWYsRUFBT3ZmLEVBQUksR0FBRzRFLE9BQ2hCd3pFLEVBQVFBLEVBQU0zdUUsTUFBTSxJQUd0QixJQUFLLElBQUk0dUUsRUFBSyxFQUFHQSxFQUFLRCxFQUFNejNFLE9BQVEwM0UsSUFBTSxDQUN4QyxNQUFNalcsRUFBTWdXLEVBQU1DLEdBQUlqVyxJQUNoQmtXLEVBQVVuN0QsRUFBTXUwRCxHQUFHNkcsY0FBY25XLEdBQ3ZDLElBQUtqbEQsRUFBTXUwRCxHQUFHOEcsYUFBYUYsR0FBWSxTQUV2QyxJQUFJRyxFQUFVTCxFQUFNQyxHQUFJam9FLEtBV3RCcW9FLEVBTEdMLEVBQU1DLEdBQUkza0UsT0FFaUIsWUFBckIwa0UsRUFBTUMsR0FBSTNrRSxRQUF5QixZQUFZcU0sS0FBSzA0RCxHQUduRHQ3RCxFQUFNdTBELEdBQUdnSCxrQkFBa0JELEdBRjNCdDdELEVBQU11MEQsR0FBR2dILGtCQUFrQixVQUFZRCxHQUFTOXhFLFFBQVEsV0FBWSxJQUZwRXdXLEVBQU11MEQsR0FBR2dILGtCQUFrQixVQUFZRCxHQUFTOXhFLFFBQVEsYUFBYyxJQU9sRixNQUFNa0osRUFBTXVvRSxFQUFNQyxHQUFJMWxFLE1BRXRCLEdBQUk5QyxFQUFNczNELEVBQVMsQ0FDakIsTUFBTW9MLEVBQVUsSUFBSXAxRCxFQUFNaTRELE1BQU0sT0FBUSxHQUFJLEdBQzVDN0MsRUFBTTVrRSxRQUFVeUMsRUFBSzNHLE1BQU0wOUQsRUFBU3QzRCxHQUNwQzBpRSxFQUFNLzdDLE1BQVVBLEVBQ2hCeGlCLEVBQU0vVCxLQUFLc3lFLEVBQ2IsQ0FFQSxNQUFNb0csRUFBWSxJQUFJeDdELEVBQU1pNEQsTUFBTSxZQUFhLElBQUssR0FDcER1RCxFQUFRMWtFLE1BQVUsQ0FBQyxDQUFDLE9BQVFxa0UsSUFDNUJLLEVBQVFuaUQsTUFBVUEsSUFDbEJtaUQsRUFBUXRELE9BQVUsVUFDbEJzRCxFQUFRakcsS0FBVSxPQUNsQjErRCxFQUFNL1QsS0FBSzA0RSxHQUVYLE1BQU1DLEVBQVksSUFBSXo3RCxFQUFNaTRELE1BQU0sT0FBUSxHQUFJLEdBQzlDd0QsRUFBUWpyRSxRQUFVOHFFLEVBQ2xCRyxFQUFRcGlELE1BQVVBLEVBQ2xCeGlCLEVBQU0vVCxLQUFLMjRFLEdBRVgsTUFBTUMsRUFBWSxJQUFJMTdELEVBQU1pNEQsTUFBTSxhQUFjLEtBQU0sR0FDdER5RCxFQUFRcmlELFFBQVlBLEVBQ3BCcWlELEVBQVF4RCxPQUFVLFVBQ2xCd0QsRUFBUW5HLEtBQVUsT0FDbEIxK0QsRUFBTS9ULEtBQUs0NEUsR0FFWDFSLEVBQVVpUixFQUFNQyxHQUFJckIsU0FDdEIsQ0FDQSxHQUFJN1AsRUFBVS8yRCxFQUFLelAsT0FBUSxDQUN6QixNQUFNNHhFLEVBQVUsSUFBSXAxRCxFQUFNaTRELE1BQU0sT0FBUSxHQUFJLEdBQzVDN0MsRUFBTTVrRSxRQUFVeUMsRUFBSzNHLE1BQU0wOUQsR0FDM0JvTCxFQUFNLzdDLE1BQVVBLEVBQ2hCeGlCLEVBQU0vVCxLQUFLc3lFLEVBQ2IsQ0FHQXdGLEVBQVkxbkUsR0FBRzVDLFNBQVc4UixFQUFTa3dELEdBQWVsd0QsRUFBUXZmLEVBQUdnVSxFQUMvRCxPQTdGRSxJQURBaFUsSUFDT3VmLEVBQU92ZixHQUFHdzJCLFFBQVUyaEQsRUFBYTNoRCxPQUE0QixjQUFuQmpYLEVBQU92ZixHQUFHNEUsTUFDekQ1RSxHQTZGTixDQUNGLENBQ0YsR0c5R0UsQ0FBQyxlRjZEWSxTQUFrQm1kLEdBQy9CLElBQUkyN0QsRUFFSixHQUFLMzdELEVBQU11MEQsR0FBR3R4RSxRQUFRMjRFLFlBRXRCLElBQUtELEVBQVMzN0QsRUFBTW9DLE9BQU81ZSxPQUFTLEVBQUdtNEUsR0FBVSxFQUFHQSxJQUNoQixXQUE5QjM3RCxFQUFNb0MsT0FBT3U1RCxHQUFRbDBFLE9BRXJCcXhFLEdBQW9CbDJELEtBQUs1QyxFQUFNb0MsT0FBT3U1RCxHQUFRbnJFLFVBQ2hEMm9FLEdBQWVuNUQsRUFBTW9DLE9BQU91NUQsR0FBUXJyRSxVQUdsQ3VvRSxHQUFRajJELEtBQUs1QyxFQUFNb0MsT0FBT3U1RCxHQUFRbnJFLFVBQ3BDOG9FLEdBQWF0NUQsRUFBTW9DLE9BQU91NUQsR0FBUXJyRSxVQUd4QyxHRTVFRSxDQUFDLGNENEpZLFNBQXNCMFAsR0FFbkMsR0FBS0EsRUFBTXUwRCxHQUFHdHhFLFFBQVEyNEUsWUFFdEIsSUFBSyxJQUFJRCxFQUFTMzdELEVBQU1vQyxPQUFPNWUsT0FBUyxFQUFHbTRFLEdBQVUsRUFBR0EsSUFDcEIsV0FBOUIzN0QsRUFBTW9DLE9BQU91NUQsR0FBUWwwRSxNQUNwQjh4RSxHQUFjMzJELEtBQUs1QyxFQUFNb0MsT0FBT3U1RCxHQUFRbnJFLFVBSTdDa3BFLEdBQWdCMTVELEVBQU1vQyxPQUFPdTVELEdBQVFyckUsU0FBVTBQLEVBRW5ELEdDcktFLENBQUMsWUduQlksU0FBb0JBLEdBQ2pDLElBQUk2N0QsRUFBTTdtRSxFQUNWLE1BQU00bEUsRUFBYzU2RCxFQUFNb0MsT0FDcEJvc0QsRUFBSW9NLEVBQVlwM0UsT0FFdEIsSUFBSyxJQUFJMFAsRUFBSSxFQUFHQSxFQUFJczdELEVBQUd0N0QsSUFBSyxDQUMxQixHQUE0QixXQUF4QjBuRSxFQUFZMW5FLEdBQUd6TCxLQUFtQixTQUV0QyxNQUFNMmEsRUFBU3c0RCxFQUFZMW5FLEdBQUc1QyxTQUN4QjZELEVBQU1pTyxFQUFPNWUsT0FFbkIsSUFBS3E0RSxFQUFPLEVBQUdBLEVBQU8xbkUsRUFBSzBuRSxJQUNDLGlCQUF0Qno1RCxFQUFPeTVELEdBQU1wMEUsT0FDZjJhLEVBQU95NUQsR0FBTXAwRSxLQUFPLFFBSXhCLElBQUtvMEUsRUFBTzdtRSxFQUFPLEVBQUc2bUUsRUFBTzFuRSxFQUFLMG5FLElBQ04sU0FBdEJ6NUQsRUFBT3k1RCxHQUFNcDBFLE1BQ2JvMEUsRUFBTyxFQUFJMW5FLEdBQ2UsU0FBMUJpTyxFQUFPeTVELEVBQU8sR0FBR3AwRSxLQUVuQjJhLEVBQU95NUQsRUFBTyxHQUFHcnJFLFFBQVU0UixFQUFPeTVELEdBQU1yckUsUUFBVTRSLEVBQU95NUQsRUFBTyxHQUFHcnJFLFNBRS9EcXJFLElBQVM3bUUsSUFBUW9OLEVBQU9wTixHQUFRb04sRUFBT3k1RCxJQUUzQzdtRSxLQUlBNm1FLElBQVM3bUUsSUFDWG9OLEVBQU81ZSxPQUFTd1IsRUFFcEIsQ0FDRixJSFRBLFNBQVM4bUUsS0FNUHQzRSxLQUFLdTNFLE1BQVEsSUFBSSxHQUVqQixJQUFLLElBQUlsNUUsRUFBSSxFQUFHQSxFQUFJODNFLEdBQU9uM0UsT0FBUVgsSUFDakMyQixLQUFLdTNFLE1BQU1qNUUsS0FBSzYzRSxHQUFPOTNFLEdBQUcsR0FBSTgzRSxHQUFPOTNFLEdBQUcsR0FFNUMsQ0FPQWk1RSxHQUFLbDZFLFVBQVVvNkUsUUFBVSxTQUFVaDhELEdBQ2pDLE1BQU1pRyxFQUFRemhCLEtBQUt1M0UsTUFBTWhFLFNBQVMsSUFFbEMsSUFBSyxJQUFJbDFFLEVBQUksRUFBRzJyRSxFQUFJdm9ELEVBQU16aUIsT0FBUVgsRUFBSTJyRSxFQUFHM3JFLElBQ3ZDb2pCLEVBQU1wakIsR0FBR21kLEVBRWIsRUFFQTg3RCxHQUFLbDZFLFVBQVVxNkUsTUFBUSxHQUV2QixZSXhEQSxTQUFTQyxHQUFZOWMsRUFBS21WLEVBQUlXLEVBQUs5eUQsR0FDakM1ZCxLQUFLNDZELElBQU1BLEVBR1g1NkQsS0FBSyt2RSxHQUFTQSxFQUVkL3ZFLEtBQUswd0UsSUFBTUEsRUFNWDF3RSxLQUFLNGQsT0FBU0EsRUFFZDVkLEtBQUsyM0UsT0FBUyxHQUNkMzNFLEtBQUs0M0UsT0FBUyxHQUNkNTNFLEtBQUs2M0UsT0FBUyxHQUNkNzNFLEtBQUs4M0UsT0FBUyxHQVlkOTNFLEtBQUsrM0UsUUFBVSxHQU1mLzNFLEtBQUtnNEUsVUFBYSxFQUNsQmg0RSxLQUFLaTRFLEtBQWEsRUFDbEJqNEUsS0FBS2s0RSxRQUFhLEVBQ2xCbDRFLEtBQUttNEUsT0FBYSxFQUNsQm40RSxLQUFLbzRFLFVBQWMsRUFDbkJwNEUsS0FBS3E0RSxZQUFjLEVBSW5CcjRFLEtBQUs2eEIsV0FBYSxPQUVsQjd4QixLQUFLNjBCLE1BQVEsRUFJYixNQUFNc0UsRUFBSW41QixLQUFLNDZELElBRWYsSUFBSyxJQUFJbHJELEVBQVEsRUFBR3hCLEVBQU0sRUFBR29xRSxFQUFTLEVBQUczNUUsRUFBUyxFQUFHNm5DLEVBQU1yTixFQUFFbjZCLE9BQVF1NUUsR0FBZSxFQUFPcnFFLEVBQU1zNEIsRUFBS3Q0QixJQUFPLENBQzNHLE1BQU0wbUMsRUFBS3piLEVBQUVqVyxXQUFXaFYsR0FFeEIsSUFBS3FxRSxFQUFjLENBQ2pCLEdBQUk3VixHQUFROXRCLEdBQUssQ0FDZjBqQyxJQUVXLElBQVAxakMsRUFDRmoyQyxHQUFVLEVBQUlBLEVBQVMsRUFFdkJBLElBRUYsUUFDRixDQUNFNDVFLEdBQWUsQ0FFbkIsQ0FFVyxLQUFQM2pDLEdBQWUxbUMsSUFBUXM0QixFQUFNLElBQ3BCLEtBQVBvTyxHQUFlMW1DLElBQ25CbE8sS0FBSzIzRSxPQUFPcjVFLEtBQUtvUixHQUNqQjFQLEtBQUs0M0UsT0FBT3Q1RSxLQUFLNFAsR0FDakJsTyxLQUFLNjNFLE9BQU92NUUsS0FBS2c2RSxHQUNqQnQ0RSxLQUFLODNFLE9BQU94NUUsS0FBS0ssR0FDakJxQixLQUFLKzNFLFFBQVF6NUUsS0FBSyxHQUVsQmk2RSxHQUFlLEVBQ2ZELEVBQVMsRUFDVDM1RSxFQUFTLEVBQ1QrUSxFQUFReEIsRUFBTSxFQUVsQixDQUdBbE8sS0FBSzIzRSxPQUFPcjVFLEtBQUs2NkIsRUFBRW42QixRQUNuQmdCLEtBQUs0M0UsT0FBT3Q1RSxLQUFLNjZCLEVBQUVuNkIsUUFDbkJnQixLQUFLNjNFLE9BQU92NUUsS0FBSyxHQUNqQjBCLEtBQUs4M0UsT0FBT3g1RSxLQUFLLEdBQ2pCMEIsS0FBSyszRSxRQUFRejVFLEtBQUssR0FFbEIwQixLQUFLazRFLFFBQVVsNEUsS0FBSzIzRSxPQUFPMzRFLE9BQVMsQ0FDdEMsQ0FJQTA0RSxHQUFXdDZFLFVBQVVrQixLQUFPLFNBQVUyRSxFQUFNNmUsRUFBS213RCxHQUMvQyxNQUFNckIsRUFBUSxJQUFJLEdBQU0zdEUsRUFBTTZlLEVBQUttd0QsR0FRbkMsT0FQQXJCLEVBQU16bUQsT0FBUSxFQUVWOG5ELEVBQVUsR0FBR2p5RSxLQUFLNjBCLFFBQ3RCKzdDLEVBQU0vN0MsTUFBUTcwQixLQUFLNjBCLE1BQ2ZvOUMsRUFBVSxHQUFHanlFLEtBQUs2MEIsUUFFdEI3MEIsS0FBSzRkLE9BQU90ZixLQUFLc3lFLEdBQ1ZBLENBQ1QsRUFFQThHLEdBQVd0NkUsVUFBVW83RSxRQUFVLFNBQWtCUCxHQUMvQyxPQUFPajRFLEtBQUsyM0UsT0FBT00sR0FBUWo0RSxLQUFLNjNFLE9BQU9JLElBQVNqNEUsS0FBSzQzRSxPQUFPSyxFQUM5RCxFQUVBUCxHQUFXdDZFLFVBQVVxN0UsZUFBaUIsU0FBeUI3d0UsR0FDN0QsSUFBSyxJQUFJK0gsRUFBTTNQLEtBQUtrNEUsUUFBU3R3RSxFQUFPK0gsS0FDOUIzUCxLQUFLMjNFLE9BQU8vdkUsR0FBUTVILEtBQUs2M0UsT0FBT2p3RSxHQUFRNUgsS0FBSzQzRSxPQUFPaHdFLElBRGpCQSxLQUt6QyxPQUFPQSxDQUNULEVBR0E4dkUsR0FBV3Q2RSxVQUFVczdFLFdBQWEsU0FBcUJ4cUUsR0FDckQsSUFBSyxJQUFJeUIsRUFBTTNQLEtBQUs0NkQsSUFBSTU3RCxPQUFRa1AsRUFBTXlCLEVBQUt6QixJQUFPLENBRWhELElBQUt3MEQsR0FETTFpRSxLQUFLNDZELElBQUkxM0MsV0FBV2hWLElBQ1gsS0FDdEIsQ0FDQSxPQUFPQSxDQUNULEVBR0F3cEUsR0FBV3Q2RSxVQUFVdTdFLGVBQWlCLFNBQXlCenFFLEVBQUttQixHQUNsRSxHQUFJbkIsR0FBT21CLEVBQU8sT0FBT25CLEVBRXpCLEtBQU9BLEVBQU1tQixHQUNYLElBQUtxekQsR0FBUTFpRSxLQUFLNDZELElBQUkxM0MsYUFBYWhWLElBQVMsT0FBT0EsRUFBTSxFQUUzRCxPQUFPQSxDQUNULEVBR0F3cEUsR0FBV3Q2RSxVQUFVdzdFLFVBQVksU0FBb0IxcUUsRUFBSzRSLEdBQ3hELElBQUssSUFBSW5RLEVBQU0zUCxLQUFLNDZELElBQUk1N0QsT0FBUWtQLEVBQU15QixHQUNoQzNQLEtBQUs0NkQsSUFBSTEzQyxXQUFXaFYsS0FBUzRSLEVBRFE1UixLQUczQyxPQUFPQSxDQUNULEVBR0F3cEUsR0FBV3Q2RSxVQUFVeTdFLGNBQWdCLFNBQXdCM3FFLEVBQUs0UixFQUFNelEsR0FDdEUsR0FBSW5CLEdBQU9tQixFQUFPLE9BQU9uQixFQUV6QixLQUFPQSxFQUFNbUIsR0FDWCxHQUFJeVEsSUFBUzlmLEtBQUs0NkQsSUFBSTEzQyxhQUFhaFYsR0FBUSxPQUFPQSxFQUFNLEVBRTFELE9BQU9BLENBQ1QsRUFHQXdwRSxHQUFXdDZFLFVBQVUwN0UsU0FBVyxTQUFtQkMsRUFBT3RwRSxFQUFLNm9FLEVBQVFVLEdBQ3JFLEdBQUlELEdBQVN0cEUsRUFDWCxNQUFPLEdBR1QsTUFBTWk2QyxFQUFRLElBQUkvaEQsTUFBTThILEVBQU1zcEUsR0FFOUIsSUFBSyxJQUFJMTZFLEVBQUksRUFBRzQ1RSxFQUFPYyxFQUFPZCxFQUFPeG9FLEVBQUt3b0UsSUFBUTU1RSxJQUFLLENBQ3JELElBQUk0NkUsRUFBYSxFQUNqQixNQUFNQyxFQUFZbDVFLEtBQUsyM0UsT0FBT00sR0FDOUIsSUFDSXpuRSxFQURBUixFQUFRa3BFLEVBVVosSUFMRTFvRSxFQUZFeW5FLEVBQU8sRUFBSXhvRSxHQUFPdXBFLEVBRWJoNUUsS0FBSzQzRSxPQUFPSyxHQUFRLEVBRXBCajRFLEtBQUs0M0UsT0FBT0ssR0FHZGpvRSxFQUFRUSxHQUFReW9FLEVBQWFYLEdBQVEsQ0FDMUMsTUFBTTFqQyxFQUFLNTBDLEtBQUs0NkQsSUFBSTEzQyxXQUFXbFQsR0FFL0IsR0FBSTB5RCxHQUFROXRCLEdBQ0MsSUFBUEEsRUFDRnFrQyxHQUFjLEdBQUtBLEVBQWFqNUUsS0FBSyszRSxRQUFRRSxJQUFTLEVBRXREZ0IsUUFFRyxNQUFJanBFLEVBQVFrcEUsRUFBWWw1RSxLQUFLNjNFLE9BQU9JLElBSXpDLE1BRkFnQixHQUdGLENBRUFqcEUsR0FDRixDQUtFMDVDLEVBQU1yckQsR0FISjQ2RSxFQUFhWCxFQUdKLElBQUkzd0UsTUFBTXN4RSxFQUFhWCxFQUFTLEdBQUcxbUUsS0FBSyxLQUFPNVIsS0FBSzQ2RCxJQUFJOXlELE1BQU1rSSxFQUFPUSxHQUVyRXhRLEtBQUs0NkQsSUFBSTl5RCxNQUFNa0ksRUFBT1EsRUFFckMsQ0FFQSxPQUFPazVDLEVBQU05M0MsS0FBSyxHQUNwQixFQUdBOGxFLEdBQVd0NkUsVUFBVXEyRSxNQUFRLEdBRTdCLFlDL01BLFNBQVMwRixHQUFTMzlELEVBQU95OEQsR0FDdkIsTUFBTS9wRSxFQUFNc04sRUFBTW04RCxPQUFPTSxHQUFRejhELEVBQU1xOEQsT0FBT0ksR0FDeEN0b0UsRUFBTTZMLEVBQU1vOEQsT0FBT0ssR0FFekIsT0FBT3o4RCxFQUFNby9DLElBQUk5eUQsTUFBTW9HLEVBQUt5QixFQUM5QixDQUVBLFNBQVN5cEUsR0FBY3YyRSxHQUNyQixNQUFNQyxFQUFTLEdBQ1Q2TSxFQUFNOU0sRUFBSTdELE9BRWhCLElBQUlrUCxFQUFNLEVBQ04wbUMsRUFBSy94QyxFQUFJcWdCLFdBQVdoVixHQUNwQm1yRSxHQUFZLEVBQ1o3VCxFQUFVLEVBQ1Z2MEQsRUFBVSxHQUVkLEtBQU8vQyxFQUFNeUIsR0FDQSxNQUFQaWxDLElBQ0d5a0MsR0FPSHBvRSxHQUFXcE8sRUFBSXkyRSxVQUFVOVQsRUFBU3QzRCxFQUFNLEdBQ3hDczNELEVBQVV0M0QsSUFOVnBMLEVBQU94RSxLQUFLMlMsRUFBVXBPLEVBQUl5MkUsVUFBVTlULEVBQVN0M0QsSUFDN0MrQyxFQUFVLEdBQ1Z1MEQsRUFBVXQzRCxFQUFNLElBUXBCbXJFLEVBQW9CLEtBQVB6a0MsRUFDYjFtQyxJQUVBMG1DLEVBQUsveEMsRUFBSXFnQixXQUFXaFYsR0FLdEIsT0FGQXBMLEVBQU94RSxLQUFLMlMsRUFBVXBPLEVBQUl5MkUsVUFBVTlULElBRTdCMWlFLENBQ1QsQ0M5Q0EsU0FBU3kyRSxHQUFzQi85RCxFQUFPZytELEdBQ3BDLE1BQU03cEUsRUFBTTZMLEVBQU1vOEQsT0FBTzRCLEdBQ3pCLElBQUl0ckUsRUFBTXNOLEVBQU1tOEQsT0FBTzZCLEdBQWFoK0QsRUFBTXE4RCxPQUFPMkIsR0FFakQsTUFBTTdKLEVBQVNuMEQsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixLQUVwQyxHQUFlLEtBQVh5aEUsR0FDVyxLQUFYQSxHQUNXLEtBQVhBLEVBQ0YsT0FBUSxFQUdWLEdBQUl6aEUsRUFBTXlCLEVBQUssQ0FHYixJQUFLK3lELEdBRk1sbkQsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixJQUk5QixPQUFRLENBRVosQ0FFQSxPQUFPQSxDQUNULENBSUEsU0FBU3VyRSxHQUF1QmorRCxFQUFPZytELEdBQ3JDLE1BQU05cEUsRUFBUThMLEVBQU1tOEQsT0FBTzZCLEdBQWFoK0QsRUFBTXE4RCxPQUFPMkIsR0FDL0M3cEUsRUFBTTZMLEVBQU1vOEQsT0FBTzRCLEdBQ3pCLElBQUl0ckUsRUFBTXdCLEVBR1YsR0FBSXhCLEVBQU0sR0FBS3lCLEVBQU8sT0FBUSxFQUU5QixJQUFJaWxDLEVBQUtwNUIsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixLQUU5QixHQUFJMG1DLEVBQUssSUFBZUEsRUFBSyxHQUFlLE9BQVEsRUFFcEQsT0FBUyxDQUVQLEdBQUkxbUMsR0FBT3lCLEVBQU8sT0FBUSxFQUkxQixHQUZBaWxDLEVBQUtwNUIsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixPQUV0QjBtQyxHQUFNLElBQWVBLEdBQU0sSUFBL0IsQ0FTQSxHQUFXLEtBQVBBLEdBQTZCLEtBQVBBLEVBQ3hCLE1BR0YsT0FBUSxDQVBSLENBSEUsR0FBSTFtQyxFQUFNd0IsR0FBUyxHQUFNLE9BQVEsQ0FXckMsQ0FFQSxPQUFJeEIsRUFBTXlCLElBQ1JpbEMsRUFBS3A1QixFQUFNby9DLElBQUkxM0MsV0FBV2hWLElBRXJCdzBELEdBQVE5dEIsS0FFSCxFQUdMMW1DLENBQ1QsQ0N4RUEsTUNTTXdyRSxHQUFjLGtJQUVkQyxHQUFjLG1DQU1kQyxHQUFjLElBQUloZCxPQUFPLE9BQVM4YyxHQUFXLElBQU1DLEdBQTFCLHVIQUV6QkUsR0FBeUIsSUFBSWpkLE9BQU8sT0FBUzhjLEdBQVcsSUFBTUMsR0FBWSxLQ2QxRUcsR0FBaUIsQ0FDckIsQ0FBQyw2Q0FBOEMsb0NBQW9DLEdBQ25GLENBQUMsUUFBZ0IsT0FBUyxHQUMxQixDQUFDLE9BQWdCLE9BQVMsR0FDMUIsQ0FBQyxXQUFnQixLQUFTLEdBQzFCLENBQUMsZUFBZ0IsU0FBUyxHQUMxQixDQUFDLElBQUlsZCxPQUFPLFFGWGQsQ0FDRSxVQUNBLFVBQ0EsUUFDQSxPQUNBLFdBQ0EsYUFDQSxPQUNBLFVBQ0EsU0FDQSxNQUNBLFdBQ0EsS0FDQSxVQUNBLFNBQ0EsTUFDQSxNQUNBLEtBQ0EsS0FDQSxXQUNBLGFBQ0EsU0FDQSxTQUNBLE9BQ0EsUUFDQSxXQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLE9BQ0EsU0FDQSxLQUNBLE9BQ0EsU0FDQSxTQUNBLEtBQ0EsT0FDQSxPQUNBLE9BQ0EsV0FDQSxNQUNBLFdBQ0EsS0FDQSxXQUNBLFNBQ0EsSUFDQSxRQUNBLFNBQ0EsVUFDQSxVQUNBLFFBQ0EsUUFDQSxLQUNBLFFBQ0EsS0FDQSxRQUNBLFFBQ0EsS0FDQSxRQUNBLE1FbkRrQ2hyRCxLQUFLLEtBQU8sbUJBQW9CLEtBQU0sTUFBTSxHQUM5RSxDQUFDLElBQUlnckQsT0FBT2lkLEdBQXVCaE0sT0FBUyxTQUFXLE1BQU0sSUNNL0QsTUFBTSxHQUFTLENBR2IsQ0FBQyxRTDhCWSxTQUFnQnJ5RCxFQUFPZytELEVBQVdPLEVBQVNDLEdBRXhELEdBQUlSLEVBQVksRUFBSU8sRUFBVyxPQUFPLEVBRXRDLElBQUlFLEVBQVdULEVBQVksRUFFM0IsR0FBSWgrRCxFQUFNczhELE9BQU9tQyxHQUFZeitELEVBQU13OEQsVUFBYSxPQUFPLEVBR3ZELEdBQUl4OEQsRUFBTXM4RCxPQUFPbUMsR0FBWXorRCxFQUFNdzhELFdBQWEsRUFBSyxPQUFPLEVBTTVELElBQUk5cEUsRUFBTXNOLEVBQU1tOEQsT0FBT3NDLEdBQVl6K0QsRUFBTXE4RCxPQUFPb0MsR0FDaEQsR0FBSS9yRSxHQUFPc04sRUFBTW84RCxPQUFPcUMsR0FBYSxPQUFPLEVBRTVDLE1BQU1DLEVBQVUxK0QsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixLQUNyQyxHQUFnQixNQUFaZ3NFLEdBQXVDLEtBQVpBLEdBQXVDLEtBQVpBLEVBQTJCLE9BQU8sRUFFNUYsR0FBSWhzRSxHQUFPc04sRUFBTW84RCxPQUFPcUMsR0FBYSxPQUFPLEVBRTVDLE1BQU1FLEVBQVczK0QsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixLQUN0QyxHQUFpQixNQUFiaXNFLEdBQXlDLEtBQWJBLEdBQXlDLEtBQWJBLElBQTZCelgsR0FBUXlYLEdBQy9GLE9BQU8sRUFLVCxHQUFnQixLQUFaRCxHQUEyQnhYLEdBQVF5WCxHQUFhLE9BQU8sRUFFM0QsS0FBT2pzRSxFQUFNc04sRUFBTW84RCxPQUFPcUMsSUFBVyxDQUNuQyxNQUFNcmxDLEVBQUtwNUIsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixHQUVoQyxHQUFXLE1BQVAwbUMsR0FBNkIsS0FBUEEsR0FBNkIsS0FBUEEsSUFBdUI4dEIsR0FBUTl0QixHQUFPLE9BQU8sRUFFN0YxbUMsR0FDRixDQUVBLElBQUlrc0UsRUFBV2pCLEdBQVEzOUQsRUFBT2crRCxFQUFZLEdBQ3RDYSxFQUFVRCxFQUFTdjhELE1BQU0sS0FDN0IsTUFBTXk4RCxFQUFTLEdBQ2YsSUFBSyxJQUFJajhFLEVBQUksRUFBR0EsRUFBSWc4RSxFQUFRcjdFLE9BQVFYLElBQUssQ0FDdkMsTUFBTW9HLEVBQUk0MUUsRUFBUWg4RSxHQUFHc3VFLE9BQ3JCLElBQUtsb0UsRUFBRyxDQUdOLEdBQVUsSUFBTnBHLEdBQVdBLElBQU1nOEUsRUFBUXI3RSxPQUFTLEVBQ3BDLFNBRUEsT0FBTyxDQUVYLENBRUEsSUFBSyxXQUFXb2YsS0FBSzNaLEdBQU0sT0FBTyxFQUNDLEtBQS9CQSxFQUFFeWUsV0FBV3plLEVBQUV6RixPQUFTLEdBQzFCczdFLEVBQU9oOEUsS0FBeUIsS0FBcEJtRyxFQUFFeWUsV0FBVyxHQUFxQixTQUFXLFNBQzVCLEtBQXBCemUsRUFBRXllLFdBQVcsR0FDdEJvM0QsRUFBT2g4RSxLQUFLLFFBRVpnOEUsRUFBT2g4RSxLQUFLLEdBRWhCLENBR0EsR0FEQTg3RSxFQUFXakIsR0FBUTM5RCxFQUFPZytELEdBQVc3TSxRQUNOLElBQTNCeU4sRUFBUzcrRCxRQUFRLEtBQWUsT0FBTyxFQUMzQyxHQUFJQyxFQUFNczhELE9BQU8wQixHQUFhaCtELEVBQU13OEQsV0FBYSxFQUFLLE9BQU8sRUFDN0RxQyxFQUFVakIsR0FBYWdCLEdBQ25CQyxFQUFRcjdFLFFBQXlCLEtBQWZxN0UsRUFBUSxJQUFXQSxFQUFROThELFFBQzdDODhELEVBQVFyN0UsUUFBMEMsS0FBaENxN0UsRUFBUUEsRUFBUXI3RSxPQUFTLElBQVdxN0UsRUFBUXY4RCxNQUlsRSxNQUFNeThELEVBQWNGLEVBQVFyN0UsT0FDNUIsR0FBb0IsSUFBaEJ1N0UsR0FBcUJBLElBQWdCRCxFQUFPdDdFLE9BQVUsT0FBTyxFQUVqRSxHQUFJZzdFLEVBQVUsT0FBTyxFQUVyQixNQUFNUSxFQUFnQmgvRCxFQUFNcVcsV0FDNUJyVyxFQUFNcVcsV0FBYSxRQUluQixNQUFNNG9ELEVBQWtCai9ELEVBQU11MEQsR0FBRzVsRCxNQUFNb3RELE1BQU1oRSxTQUFTLGNBR2hEbUgsRUFBYSxDQUFDbEIsRUFBVyxHQURkaCtELEVBQU1sZCxLQUFLLGFBQWMsUUFBUyxHQUUxQ2UsSUFBTXE3RSxFQUVHbC9ELEVBQU1sZCxLQUFLLGFBQWMsUUFBUyxHQUMxQ2UsSUFBTSxDQUFDbTZFLEVBQVdBLEVBQVksR0FFckJoK0QsRUFBTWxkLEtBQUssVUFBVyxLQUFNLEdBQ3BDZSxJQUFNLENBQUNtNkUsRUFBV0EsRUFBWSxHQUV6QyxJQUFLLElBQUluN0UsRUFBSSxFQUFHQSxFQUFJZzhFLEVBQVFyN0UsT0FBUVgsSUFBSyxDQUN2QyxNQUFNczhFLEVBQVduL0QsRUFBTWxkLEtBQUssVUFBVyxLQUFNLEdBQ3pDZzhFLEVBQU9qOEUsS0FDVHM4RSxFQUFTcm9FLE1BQVMsQ0FBQyxDQUFDLFFBQVMsY0FBZ0Jnb0UsRUFBT2o4RSxNQUd0RCxNQUFNdThFLEVBQVdwL0QsRUFBTWxkLEtBQUssU0FBVSxHQUFJLEdBQzFDczhFLEVBQVM1dUUsUUFBV3F1RSxFQUFRaDhFLEdBQUdzdUUsT0FDL0JpTyxFQUFTOXVFLFNBQVcsR0FFcEIwUCxFQUFNbGQsS0FBSyxXQUFZLE1BQU8sRUFDaEMsQ0FLQSxJQUFJdThFLEVBSEpyL0QsRUFBTWxkLEtBQUssV0FBWSxNQUFPLEdBQzlCa2QsRUFBTWxkLEtBQUssY0FBZSxTQUFVLEdBR3BDLElBQUl3OEUsRUFBcUIsRUFFekIsSUFBS2IsRUFBV1QsRUFBWSxFQUFHUyxFQUFXRixLQUNwQ3YrRCxFQUFNczhELE9BQU9tQyxHQUFZeitELEVBQU13OEQsV0FEY2lDLElBQVksQ0FHN0QsSUFBSWMsR0FBWSxFQUNoQixJQUFLLElBQUkxOEUsRUFBSSxFQUFHMnJFLEVBQUl5USxFQUFnQno3RSxPQUFRWCxFQUFJMnJFLEVBQUczckUsSUFDakQsR0FBSW84RSxFQUFnQnA4RSxHQUFHbWQsRUFBT3krRCxFQUFVRixHQUFTLEdBQU8sQ0FDdERnQixHQUFZLEVBQ1osS0FDRixDQUdGLEdBQUlBLEVBQWEsTUFFakIsR0FEQVgsRUFBV2pCLEdBQVEzOUQsRUFBT3krRCxHQUFVdE4sUUFDL0J5TixFQUFZLE1BQ2pCLEdBQUk1K0QsRUFBTXM4RCxPQUFPbUMsR0FBWXorRCxFQUFNdzhELFdBQWEsRUFBSyxNQVFyRCxHQVBBcUMsRUFBVWpCLEdBQWFnQixHQUNuQkMsRUFBUXI3RSxRQUF5QixLQUFmcTdFLEVBQVEsSUFBV0EsRUFBUTk4RCxRQUM3Qzg4RCxFQUFRcjdFLFFBQTBDLEtBQWhDcTdFLEVBQVFBLEVBQVFyN0UsT0FBUyxJQUFXcTdFLEVBQVF2OEQsTUFJbEVnOUQsR0FBc0JQLEVBQWNGLEVBQVFyN0UsT0FDeEM4N0UsRUFyTHdCLE1BcUx3QixNQUVwRCxHQUFJYixJQUFhVCxFQUFZLEVBQUcsQ0FDWmgrRCxFQUFNbGQsS0FBSyxhQUFjLFFBQVMsR0FDMUNlLElBQU13N0UsRUFBYSxDQUFDckIsRUFBWSxFQUFHLEVBQy9DLENBRWtCaCtELEVBQU1sZCxLQUFLLFVBQVcsS0FBTSxHQUNwQ2UsSUFBTSxDQUFDNDZFLEVBQVVBLEVBQVcsR0FFdEMsSUFBSyxJQUFJNTdFLEVBQUksRUFBR0EsRUFBSWs4RSxFQUFhbDhFLElBQUssQ0FDcEMsTUFBTTI4RSxFQUFZeC9ELEVBQU1sZCxLQUFLLFVBQVcsS0FBTSxHQUMxQ2c4RSxFQUFPajhFLEtBQ1QyOEUsRUFBVTFvRSxNQUFTLENBQUMsQ0FBQyxRQUFTLGNBQWdCZ29FLEVBQU9qOEUsTUFHdkQsTUFBTXU4RSxFQUFXcC9ELEVBQU1sZCxLQUFLLFNBQVUsR0FBSSxHQUMxQ3M4RSxFQUFTNXVFLFFBQVdxdUUsRUFBUWg4RSxHQUFLZzhFLEVBQVFoOEUsR0FBR3N1RSxPQUFTLEdBQ3JEaU8sRUFBUzl1RSxTQUFXLEdBRXBCMFAsRUFBTWxkLEtBQUssV0FBWSxNQUFPLEVBQ2hDLENBQ0FrZCxFQUFNbGQsS0FBSyxXQUFZLE1BQU8sRUFDaEMsQ0FZQSxPQVZJdThFLElBQ0ZyL0QsRUFBTWxkLEtBQUssY0FBZSxTQUFVLEdBQ3BDdThFLEVBQVcsR0FBS1osR0FHbEJ6K0QsRUFBTWxkLEtBQUssY0FBZSxTQUFVLEdBQ3BDbzhFLEVBQVcsR0FBS1QsRUFFaEJ6K0QsRUFBTXFXLFdBQWEyb0QsRUFDbkJoL0QsRUFBTXk4RCxLQUFPZ0MsR0FDTixDQUNULEVLM00rQixDQUFDLFlBQWEsY0FDM0MsQ0FBQyxPQ3ZCWSxTQUFleitELEVBQU9nK0QsRUFBV08sR0FDOUMsR0FBSXYrRCxFQUFNczhELE9BQU8wQixHQUFhaCtELEVBQU13OEQsVUFBWSxFQUFLLE9BQU8sRUFFNUQsSUFBSWlDLEVBQVdULEVBQVksRUFDdkJocEUsRUFBT3lwRSxFQUVYLEtBQU9BLEVBQVdGLEdBQ2hCLEdBQUl2K0QsRUFBTWc5RCxRQUFReUIsR0FDaEJBLFFBREYsQ0FLQSxLQUFJeitELEVBQU1zOEQsT0FBT21DLEdBQVl6K0QsRUFBTXc4RCxXQUFhLEdBS2hELE1BSkVpQyxJQUNBenBFLEVBQU95cEUsQ0FKVCxDQVVGeitELEVBQU15OEQsS0FBT3puRSxFQUViLE1BQU1vZ0UsRUFBVXAxRCxFQUFNbGQsS0FBSyxhQUFjLE9BQVEsR0FJakQsT0FIQXN5RSxFQUFNNWtFLFFBQVV3UCxFQUFNczlELFNBQVNVLEVBQVdocEUsRUFBTSxFQUFJZ0wsRUFBTXc4RCxXQUFXLEdBQVMsS0FDOUVwSCxFQUFNdnhFLElBQVUsQ0FBQ202RSxFQUFXaCtELEVBQU15OEQsT0FFM0IsQ0FDVCxHREhFLENBQUMsUUV4QlksU0FBZ0J6OEQsRUFBT2crRCxFQUFXTyxFQUFTQyxHQUN4RCxJQUFJOXJFLEVBQU1zTixFQUFNbThELE9BQU82QixHQUFhaCtELEVBQU1xOEQsT0FBTzJCLEdBQzdDN3BFLEVBQU02TCxFQUFNbzhELE9BQU80QixHQUd2QixHQUFJaCtELEVBQU1zOEQsT0FBTzBCLEdBQWFoK0QsRUFBTXc4RCxXQUFhLEVBQUssT0FBTyxFQUU3RCxHQUFJOXBFLEVBQU0sRUFBSXlCLEVBQU8sT0FBTyxFQUU1QixNQUFNZ2dFLEVBQVNuMEQsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixHQUVwQyxHQUFlLE1BQVh5aEUsR0FBcUMsS0FBWEEsRUFDNUIsT0FBTyxFQUlULElBQUlzTCxFQUFNL3NFLEVBQ1ZBLEVBQU1zTixFQUFNbzlELFVBQVUxcUUsRUFBS3loRSxHQUUzQixJQUFJbnBDLEVBQU10NEIsRUFBTStzRSxFQUVoQixHQUFJejBDLEVBQU0sRUFBSyxPQUFPLEVBRXRCLE1BQU1rdEMsRUFBU2w0RCxFQUFNby9DLElBQUk5eUQsTUFBTW16RSxFQUFLL3NFLEdBQzlCMU4sRUFBU2diLEVBQU1vL0MsSUFBSTl5RCxNQUFNb0csRUFBS3lCLEdBRXBDLEdBQWUsS0FBWGdnRSxHQUNFbnZFLEVBQU8rYSxRQUFRc2tDLE9BQU9DLGFBQWE2dkIsS0FBWSxFQUNqRCxPQUFPLEVBS1gsR0FBSXFLLEVBQVUsT0FBTyxFQUdyQixJQUFJQyxFQUFXVCxFQUNYMEIsR0FBZ0IsRUFFcEIsTUFDRWpCLE1BQ0lBLEdBQVlGLE1BTWhCN3JFLEVBQU0rc0UsRUFBTXovRCxFQUFNbThELE9BQU9zQyxHQUFZeitELEVBQU1xOEQsT0FBT29DLEdBQ2xEdHFFLEVBQU02TCxFQUFNbzhELE9BQU9xQyxLQUVmL3JFLEVBQU15QixHQUFPNkwsRUFBTXM4RCxPQUFPbUMsR0FBWXorRCxFQUFNdzhELGFBT2hELEdBQUl4OEQsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixLQUFTeWhFLEtBRTlCbjBELEVBQU1zOEQsT0FBT21DLEdBQVl6K0QsRUFBTXc4RCxXQUFhLElBS2hEOXBFLEVBQU1zTixFQUFNbzlELFVBQVUxcUUsRUFBS3loRSxHQUd2QnpoRSxFQUFNK3NFLEVBQU16MEMsSUFHaEJ0NEIsRUFBTXNOLEVBQU1rOUQsV0FBV3hxRSxHQUVuQkEsRUFBTXlCLEtBQVYsQ0FFQXVyRSxHQUFnQixFQUVoQixLQUowQixDQVE1QjEwQyxFQUFNaHJCLEVBQU1zOEQsT0FBTzBCLEdBRW5CaCtELEVBQU15OEQsS0FBT2dDLEdBQVlpQixFQUFnQixFQUFJLEdBRTdDLE1BQU10SyxFQUFVcDFELEVBQU1sZCxLQUFLLFFBQVMsT0FBUSxHQU01QyxPQUxBc3lFLEVBQU1HLEtBQVV2d0UsRUFDaEJvd0UsRUFBTTVrRSxRQUFVd1AsRUFBTXM5RCxTQUFTVSxFQUFZLEVBQUdTLEVBQVV6ekMsR0FBSyxHQUM3RG9xQyxFQUFNOEMsT0FBVUEsRUFDaEI5QyxFQUFNdnhFLElBQVUsQ0FBQ202RSxFQUFXaCtELEVBQU15OEQsT0FFM0IsQ0FDVCxFRm5FK0IsQ0FBQyxZQUFhLFlBQWEsYUFBYyxTQUN0RSxDQUFDLGFHdkJZLFNBQXFCejhELEVBQU9nK0QsRUFBV08sRUFBU0MsR0FDN0QsSUFBSTlyRSxFQUFNc04sRUFBTW04RCxPQUFPNkIsR0FBYWgrRCxFQUFNcThELE9BQU8yQixHQUM3QzdwRSxFQUFNNkwsRUFBTW84RCxPQUFPNEIsR0FFdkIsTUFBTTJCLEVBQWEzL0QsRUFBTTA4RCxRQUd6QixHQUFJMThELEVBQU1zOEQsT0FBTzBCLEdBQWFoK0QsRUFBTXc4RCxXQUFhLEVBQUssT0FBTyxFQUc3RCxHQUFrQyxLQUE5Qng4RCxFQUFNby9DLElBQUkxM0MsV0FBV2hWLEdBQXdCLE9BQU8sRUFJeEQsR0FBSThyRSxFQUFVLE9BQU8sRUFFckIsTUFBTW9CLEVBQWEsR0FDYkMsRUFBYSxHQUNiQyxFQUFhLEdBQ2JDLEVBQWEsR0FFYmQsRUFBa0JqL0QsRUFBTXUwRCxHQUFHNWxELE1BQU1vdEQsTUFBTWhFLFNBQVMsY0FFaERpSCxFQUFnQmgvRCxFQUFNcVcsV0FDNUJyVyxFQUFNcVcsV0FBYSxhQUNuQixJQUNJb29ELEVBREF1QixHQUFnQixFQXFCcEIsSUFBS3ZCLEVBQVdULEVBQVdTLEVBQVdGLEVBQVNFLElBQVksQ0FTekQsTUFBTXdCLEVBQWNqZ0UsRUFBTXM4RCxPQUFPbUMsR0FBWXorRCxFQUFNdzhELFVBS25ELEdBSEE5cEUsRUFBTXNOLEVBQU1tOEQsT0FBT3NDLEdBQVl6K0QsRUFBTXE4RCxPQUFPb0MsR0FDNUN0cUUsRUFBTTZMLEVBQU1vOEQsT0FBT3FDLEdBRWYvckUsR0FBT3lCLEVBRVQsTUFHRixHQUFvQyxLQUFoQzZMLEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsT0FBMkJ1dEUsRUFBYSxDQUkvRCxJQUNJQyxFQUNBQyxFQUZBQyxFQUFVcGdFLEVBQU1zOEQsT0FBT21DLEdBQVksRUFLTCxLQUE5QnorRCxFQUFNby9DLElBQUkxM0MsV0FBV2hWLElBR3ZCQSxJQUNBMHRFLElBQ0FELEdBQVksRUFDWkQsR0FBbUIsR0FDb0IsSUFBOUJsZ0UsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixJQUM5Qnd0RSxHQUFtQixHQUVkbGdFLEVBQU11OEQsUUFBUWtDLEdBQVkyQixHQUFXLEdBQU0sR0FHOUMxdEUsSUFDQTB0RSxJQUNBRCxHQUFZLEdBS1pBLEdBQVksR0FHZEQsR0FBbUIsRUFHckIsSUFBSS84RSxFQUFTaTlFLEVBSWIsSUFIQVIsRUFBVTk4RSxLQUFLa2QsRUFBTW04RCxPQUFPc0MsSUFDNUJ6K0QsRUFBTW04RCxPQUFPc0MsR0FBWS9yRSxFQUVsQkEsRUFBTXlCLEdBQUssQ0FDaEIsTUFBTWlsQyxFQUFLcDVCLEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsR0FFaEMsSUFBSXcwRCxHQUFROXRCLEdBT1YsTUFOVyxJQUFQQSxFQUNGajJDLEdBQVUsR0FBS0EsRUFBUzZjLEVBQU11OEQsUUFBUWtDLElBQWEwQixFQUFZLEVBQUksSUFBTSxFQUV6RWg5RSxJQU1KdVAsR0FDRixDQUVBc3RFLEVBQWdCdHRFLEdBQU95QixFQUV2QjByRSxFQUFXLzhFLEtBQUtrZCxFQUFNdThELFFBQVFrQyxJQUM5QnorRCxFQUFNdThELFFBQVFrQyxHQUFZeitELEVBQU1zOEQsT0FBT21DLEdBQVksR0FBS3lCLEVBQW1CLEVBQUksR0FFL0VKLEVBQVVoOUUsS0FBS2tkLEVBQU1zOEQsT0FBT21DLElBQzVCeitELEVBQU1zOEQsT0FBT21DLEdBQVl0N0UsRUFBU2k5RSxFQUVsQ0wsRUFBVWo5RSxLQUFLa2QsRUFBTXE4RCxPQUFPb0MsSUFDNUJ6K0QsRUFBTXE4RCxPQUFPb0MsR0FBWS9yRSxFQUFNc04sRUFBTW04RCxPQUFPc0MsR0FDNUMsUUFDRixDQUdBLEdBQUl1QixFQUFpQixNQUdyQixJQUFJVCxHQUFZLEVBQ2hCLElBQUssSUFBSTE4RSxFQUFJLEVBQUcyckUsRUFBSXlRLEVBQWdCejdFLE9BQVFYLEVBQUkyckUsRUFBRzNyRSxJQUNqRCxHQUFJbzhFLEVBQWdCcDhFLEdBQUdtZCxFQUFPeStELEVBQVVGLEdBQVMsR0FBTyxDQUN0RGdCLEdBQVksRUFDWixLQUNGLENBR0YsR0FBSUEsRUFBVyxDQUtidi9ELEVBQU0wOEQsUUFBVStCLEVBRVEsSUFBcEJ6K0QsRUFBTXc4RCxZQUlSb0QsRUFBVTk4RSxLQUFLa2QsRUFBTW04RCxPQUFPc0MsSUFDNUJvQixFQUFXLzhFLEtBQUtrZCxFQUFNdThELFFBQVFrQyxJQUM5QnNCLEVBQVVqOUUsS0FBS2tkLEVBQU1xOEQsT0FBT29DLElBQzVCcUIsRUFBVWg5RSxLQUFLa2QsRUFBTXM4RCxPQUFPbUMsSUFDNUJ6K0QsRUFBTXM4RCxPQUFPbUMsSUFBYXorRCxFQUFNdzhELFdBR2xDLEtBQ0YsQ0FFQW9ELEVBQVU5OEUsS0FBS2tkLEVBQU1tOEQsT0FBT3NDLElBQzVCb0IsRUFBVy84RSxLQUFLa2QsRUFBTXU4RCxRQUFRa0MsSUFDOUJzQixFQUFVajlFLEtBQUtrZCxFQUFNcThELE9BQU9vQyxJQUM1QnFCLEVBQVVoOUUsS0FBS2tkLEVBQU1zOEQsT0FBT21DLElBSTVCeitELEVBQU1zOEQsT0FBT21DLElBQWEsQ0FDNUIsQ0FFQSxNQUFNNEIsRUFBWXJnRSxFQUFNdzhELFVBQ3hCeDhELEVBQU13OEQsVUFBWSxFQUVsQixNQUFNaEIsRUFBV3g3RCxFQUFNbGQsS0FBSyxrQkFBbUIsYUFBYyxHQUM3RDA0RSxFQUFRdEQsT0FBUyxJQUNqQixNQUFNb0ksRUFBUSxDQUFDdEMsRUFBVyxHQUMxQnhDLEVBQVEzM0UsSUFBU3k4RSxFQUVqQnRnRSxFQUFNdTBELEdBQUc1bEQsTUFBTTR4RCxTQUFTdmdFLEVBQU9nK0QsRUFBV1MsR0FFekJ6K0QsRUFBTWxkLEtBQUssbUJBQW9CLGNBQWUsR0FDdkRvMUUsT0FBUyxJQUVqQmw0RCxFQUFNMDhELFFBQVVpRCxFQUNoQjMvRCxFQUFNcVcsV0FBYTJvRCxFQUNuQnNCLEVBQU0sR0FBS3RnRSxFQUFNeThELEtBSWpCLElBQUssSUFBSTU1RSxFQUFJLEVBQUdBLEVBQUlrOUUsRUFBVXY4RSxPQUFRWCxJQUNwQ21kLEVBQU1tOEQsT0FBT3Q1RSxFQUFJbTdFLEdBQWE0QixFQUFVLzhFLEdBQ3hDbWQsRUFBTXE4RCxPQUFPeDVFLEVBQUltN0UsR0FBYStCLEVBQVVsOUUsR0FDeENtZCxFQUFNczhELE9BQU96NUUsRUFBSW03RSxHQUFhOEIsRUFBVWo5RSxHQUN4Q21kLEVBQU11OEQsUUFBUTE1RSxFQUFJbTdFLEdBQWE2QixFQUFXaDlFLEdBSTVDLE9BRkFtZCxFQUFNdzhELFVBQVk2RCxHQUVYLENBQ1QsRUhyTCtCLENBQUMsWUFBYSxZQUFhLGFBQWMsU0FDdEUsQ0FBQyxLSXhCWSxTQUFhcmdFLEVBQU9nK0QsRUFBV08sRUFBU0MsR0FDckQsTUFBTXJxRSxFQUFNNkwsRUFBTW84RCxPQUFPNEIsR0FFekIsR0FBSWgrRCxFQUFNczhELE9BQU8wQixHQUFhaCtELEVBQU13OEQsV0FBYSxFQUFLLE9BQU8sRUFFN0QsSUFBSTlwRSxFQUFNc04sRUFBTW04RCxPQUFPNkIsR0FBYWgrRCxFQUFNcThELE9BQU8yQixHQUNqRCxNQUFNN0osRUFBU24wRCxFQUFNby9DLElBQUkxM0MsV0FBV2hWLEtBR3BDLEdBQWUsS0FBWHloRSxHQUNXLEtBQVhBLEdBQ1csS0FBWEEsRUFDRixPQUFPLEVBS1QsSUFBSXFNLEVBQU0sRUFDVixLQUFPOXRFLEVBQU15QixHQUFLLENBQ2hCLE1BQU1pbEMsRUFBS3A1QixFQUFNby9DLElBQUkxM0MsV0FBV2hWLEtBQ2hDLEdBQUkwbUMsSUFBTys2QixJQUFXak4sR0FBUTl0QixHQUFPLE9BQU8sRUFDeENBLElBQU8rNkIsR0FBVXFNLEdBQ3ZCLENBRUEsR0FBSUEsRUFBTSxFQUFLLE9BQU8sRUFFdEIsR0FBSWhDLEVBQVUsT0FBTyxFQUVyQngrRCxFQUFNeThELEtBQU91QixFQUFZLEVBRXpCLE1BQU01SSxFQUFTcDFELEVBQU1sZCxLQUFLLEtBQU0sS0FBTSxHQUl0QyxPQUhBc3lFLEVBQU12eEUsSUFBUyxDQUFDbTZFLEVBQVdoK0QsRUFBTXk4RCxNQUNqQ3JILEVBQU04QyxPQUFTL3JFLE1BQU1xMEUsRUFBTSxHQUFHcHFFLEtBQUtpdUMsT0FBT0MsYUFBYTZ2QixLQUVoRCxDQUNULEVKWCtCLENBQUMsWUFBYSxZQUFhLGFBQWMsU0FDdEUsQ0FBQyxPSjREWSxTQUFlbjBELEVBQU9nK0QsRUFBV08sRUFBU0MsR0FDdkQsSUFBSXJxRSxFQUFLekIsRUFBS3dCLEVBQU9raEUsRUFDakJxSixFQUFXVCxFQUNYckIsR0FBUSxFQUdaLEdBQUkzOEQsRUFBTXM4RCxPQUFPbUMsR0FBWXorRCxFQUFNdzhELFdBQWEsRUFBSyxPQUFPLEVBUTVELEdBQUl4OEQsRUFBTTY4RCxZQUFjLEdBQ3BCNzhELEVBQU1zOEQsT0FBT21DLEdBQVl6K0QsRUFBTTY4RCxZQUFjLEdBQzdDNzhELEVBQU1zOEQsT0FBT21DLEdBQVl6K0QsRUFBTXc4RCxVQUNqQyxPQUFPLEVBR1QsSUFnQklpRSxFQUNBQyxFQUNBQyxFQWxCQUMsR0FBeUIsRUFtQjdCLEdBZklwQyxHQUErQixjQUFyQngrRCxFQUFNcVcsWUFNZHJXLEVBQU1zOEQsT0FBT21DLElBQWF6K0QsRUFBTXc4RCxZQUNsQ29FLEdBQXlCLElBUXhCRCxFQUFpQjFDLEdBQXNCaitELEVBQU95K0QsS0FBYyxHQU8vRCxHQU5BZ0MsR0FBWSxFQUNadnNFLEVBQVE4TCxFQUFNbThELE9BQU9zQyxHQUFZeitELEVBQU1xOEQsT0FBT29DLEdBQzlDaUMsRUFBY3Y5RCxPQUFPbkQsRUFBTW8vQyxJQUFJOXlELE1BQU00SCxFQUFPeXNFLEVBQWlCLElBSXpEQyxHQUEwQyxJQUFoQkYsRUFBbUIsT0FBTyxNQUNuRCxPQUFLQyxFQUFpQjVDLEdBQXFCLzlELEVBQU95K0QsS0FBYyxHQUdyRSxPQUFPLEVBRlBnQyxHQUFZLENBR2QsQ0FJQSxHQUFJRyxHQUNFNWdFLEVBQU1rOUQsV0FBV3lELElBQW1CM2dFLEVBQU1vOEQsT0FBT3FDLEdBQVcsT0FBTyxFQUl6RSxHQUFJRCxFQUFVLE9BQU8sRUFHckIsTUFBTXFDLEVBQWlCN2dFLEVBQU1vL0MsSUFBSTEzQyxXQUFXaTVELEVBQWlCLEdBR3ZERyxFQUFhOWdFLEVBQU1vQyxPQUFPNWUsT0FFNUJpOUUsR0FDRnJMLEVBQWNwMUQsRUFBTWxkLEtBQUssb0JBQXFCLEtBQU0sR0FDaEMsSUFBaEI0OUUsSUFDRnRMLEVBQU10K0QsTUFBUSxDQUFDLENBQUMsUUFBUzRwRSxNQUczQnRMLEVBQWNwMUQsRUFBTWxkLEtBQUssbUJBQW9CLEtBQU0sR0FHckQsTUFBTWkrRSxFQUFZLENBQUN0QyxFQUFVLEdBQzdCckosRUFBTXZ4RSxJQUFTazlFLEVBQ2YzTCxFQUFNOEMsT0FBUzd6QixPQUFPQyxhQUFhdThCLEdBTW5DLElBQUlHLEdBQWUsRUFDbkIsTUFBTS9CLEVBQWtCai9ELEVBQU11MEQsR0FBRzVsRCxNQUFNb3RELE1BQU1oRSxTQUFTLFFBRWhEaUgsRUFBZ0JoL0QsRUFBTXFXLFdBRzVCLElBRkFyVyxFQUFNcVcsV0FBYSxPQUVab29ELEVBQVdGLEdBQVMsQ0FDekI3ckUsRUFBTWl1RSxFQUNOeHNFLEVBQU02TCxFQUFNbzhELE9BQU9xQyxHQUVuQixNQUFNMkIsRUFBVXBnRSxFQUFNczhELE9BQU9tQyxHQUFZa0MsR0FBa0IzZ0UsRUFBTW04RCxPQUFPc0MsR0FBWXorRCxFQUFNcThELE9BQU9vQyxJQUNqRyxJQUFJdDdFLEVBQVNpOUUsRUFFYixLQUFPMXRFLEVBQU15QixHQUFLLENBQ2hCLE1BQU1pbEMsRUFBS3A1QixFQUFNby9DLElBQUkxM0MsV0FBV2hWLEdBRWhDLEdBQVcsSUFBUDBtQyxFQUNGajJDLEdBQVUsR0FBS0EsRUFBUzZjLEVBQU11OEQsUUFBUWtDLElBQWEsTUFDOUMsSUFBVyxLQUFQcmxDLEVBR1QsTUFGQWoyQyxHQUdGLENBRUF1UCxHQUNGLENBRUEsTUFBTXV1RSxFQUFldnVFLEVBQ3JCLElBQUl3dUUsRUFJRkEsRUFGRUQsR0FBZ0I5c0UsRUFFRSxFQUVBaFIsRUFBU2k5RSxFQUszQmMsRUFBb0IsSUFBS0EsRUFBb0IsR0FJakQsTUFBTXBFLEVBQVNzRCxFQUFVYyxFQUd6QjlMLEVBQWVwMUQsRUFBTWxkLEtBQUssaUJBQWtCLEtBQU0sR0FDbERzeUUsRUFBTThDLE9BQVM3ekIsT0FBT0MsYUFBYXU4QixHQUNuQyxNQUFNTSxFQUFZLENBQUMxQyxFQUFVLEdBQzdCckosRUFBTXZ4RSxJQUFTczlFLEVBQ1hWLElBQ0ZyTCxFQUFNRyxLQUFPdjFELEVBQU1vL0MsSUFBSTl5RCxNQUFNNEgsRUFBT3lzRSxFQUFpQixJQUl2RCxNQUFNUyxFQUFXcGhFLEVBQU0yOEQsTUFDakJvRCxFQUFZLy9ELEVBQU1xOEQsT0FBT29DLEdBQ3pCcUIsRUFBWTkvRCxFQUFNczhELE9BQU9tQyxHQU16QjRDLEVBQWdCcmhFLEVBQU02OEQsV0F5QzVCLEdBeENBNzhELEVBQU02OEQsV0FBYTc4RCxFQUFNdzhELFVBQ3pCeDhELEVBQU13OEQsVUFBWU0sRUFFbEI5OEQsRUFBTTI4RCxPQUFRLEVBQ2QzOEQsRUFBTXE4RCxPQUFPb0MsR0FBWXdDLEVBQWVqaEUsRUFBTW04RCxPQUFPc0MsR0FDckR6K0QsRUFBTXM4RCxPQUFPbUMsR0FBWXQ3RSxFQUVyQjg5RSxHQUFnQjlzRSxHQUFPNkwsRUFBTWc5RCxRQUFReUIsRUFBVyxHQVFsRHorRCxFQUFNeThELEtBQU83b0UsS0FBS0MsSUFBSW1NLEVBQU15OEQsS0FBTyxFQUFHOEIsR0FFdEN2K0QsRUFBTXUwRCxHQUFHNWxELE1BQU00eEQsU0FBU3ZnRSxFQUFPeStELEVBQVVGLEdBQVMsR0FJL0N2K0QsRUFBTTI4RCxRQUFTcUUsSUFDbEJyRSxHQUFRLEdBSVZxRSxFQUFnQmhoRSxFQUFNeThELEtBQU9nQyxFQUFZLEdBQUt6K0QsRUFBTWc5RCxRQUFRaDlELEVBQU15OEQsS0FBTyxHQUV6RXo4RCxFQUFNdzhELFVBQVl4OEQsRUFBTTY4RCxXQUN4Qjc4RCxFQUFNNjhELFdBQWF3RSxFQUNuQnJoRSxFQUFNcThELE9BQU9vQyxHQUFZc0IsRUFDekIvL0QsRUFBTXM4RCxPQUFPbUMsR0FBWXFCLEVBQ3pCOS9ELEVBQU0yOEQsTUFBUXlFLEVBRWRoTSxFQUFlcDFELEVBQU1sZCxLQUFLLGtCQUFtQixNQUFPLEdBQ3BEc3lFLEVBQU04QyxPQUFTN3pCLE9BQU9DLGFBQWF1OEIsR0FFbkNwQyxFQUFXeitELEVBQU15OEQsS0FDakIwRSxFQUFVLEdBQUsxQyxFQUVYQSxHQUFZRixFQUFXLE1BSzNCLEdBQUl2K0QsRUFBTXM4RCxPQUFPbUMsR0FBWXorRCxFQUFNdzhELFVBQWEsTUFHaEQsR0FBSXg4RCxFQUFNczhELE9BQU9tQyxHQUFZeitELEVBQU13OEQsV0FBYSxFQUFLLE1BR3JELElBQUkrQyxHQUFZLEVBQ2hCLElBQUssSUFBSTE4RSxFQUFJLEVBQUcyckUsRUFBSXlRLEVBQWdCejdFLE9BQVFYLEVBQUkyckUsRUFBRzNyRSxJQUNqRCxHQUFJbzhFLEVBQWdCcDhFLEdBQUdtZCxFQUFPeStELEVBQVVGLEdBQVMsR0FBTyxDQUN0RGdCLEdBQVksRUFDWixLQUNGLENBRUYsR0FBSUEsRUFBYSxNQUdqQixHQUFJa0IsRUFBVyxDQUViLEdBREFFLEVBQWlCMUMsR0FBc0JqK0QsRUFBT3krRCxHQUMxQ2tDLEVBQWlCLEVBQUssTUFDMUJ6c0UsRUFBUThMLEVBQU1tOEQsT0FBT3NDLEdBQVl6K0QsRUFBTXE4RCxPQUFPb0MsRUFDaEQsTUFFRSxHQURBa0MsRUFBaUI1QyxHQUFxQi85RCxFQUFPeStELEdBQ3pDa0MsRUFBaUIsRUFBSyxNQUc1QixHQUFJRSxJQUFtQjdnRSxFQUFNby9DLElBQUkxM0MsV0FBV2k1RCxFQUFpQixHQUFNLEtBQ3JFLENBb0JBLE9BaEJFdkwsRUFERXFMLEVBQ016Z0UsRUFBTWxkLEtBQUsscUJBQXNCLE1BQU8sR0FFeENrZCxFQUFNbGQsS0FBSyxvQkFBcUIsTUFBTyxHQUVqRHN5RSxFQUFNOEMsT0FBUzd6QixPQUFPQyxhQUFhdThCLEdBRW5DRSxFQUFVLEdBQUt0QyxFQUNmeitELEVBQU15OEQsS0FBT2dDLEVBRWJ6K0QsRUFBTXFXLFdBQWEyb0QsRUFHZnJDLEdBeFBOLFNBQThCMzhELEVBQU9pMUQsR0FDbkMsTUFBTTU3QyxFQUFRclosRUFBTXFaLE1BQVEsRUFFNUIsSUFBSyxJQUFJeDJCLEVBQUlveUUsRUFBTSxFQUFHekcsRUFBSXh1RCxFQUFNb0MsT0FBTzVlLE9BQVMsRUFBR1gsRUFBSTJyRSxFQUFHM3JFLElBQ3BEbWQsRUFBTW9DLE9BQU92ZixHQUFHdzJCLFFBQVVBLEdBQWtDLG1CQUF6QnJaLEVBQU1vQyxPQUFPdmYsR0FBRzRFLE9BQ3JEdVksRUFBTW9DLE9BQU92ZixFQUFJLEdBQUcyekUsUUFBUyxFQUM3QngyRCxFQUFNb0MsT0FBT3ZmLEdBQUcyekUsUUFBUyxFQUN6QjN6RSxHQUFLLEVBR1gsQ0ErT0l5K0UsQ0FBb0J0aEUsRUFBTzhnRSxJQUd0QixDQUNULEVJN1MrQixDQUFDLFlBQWEsWUFBYSxlQUN4RCxDQUFDLFlLNUJZLFNBQW9COWdFLEVBQU9nK0QsRUFBV3VELEVBQVUvQyxHQUM3RCxJQUFJOXJFLEVBQU1zTixFQUFNbThELE9BQU82QixHQUFhaCtELEVBQU1xOEQsT0FBTzJCLEdBQzdDN3BFLEVBQU02TCxFQUFNbzhELE9BQU80QixHQUNuQlMsRUFBV1QsRUFBWSxFQUczQixHQUFJaCtELEVBQU1zOEQsT0FBTzBCLEdBQWFoK0QsRUFBTXc4RCxXQUFhLEVBQUssT0FBTyxFQUU3RCxHQUFrQyxLQUE5Qng4RCxFQUFNby9DLElBQUkxM0MsV0FBV2hWLEdBQXdCLE9BQU8sRUFFeEQsU0FBUzh1RSxFQUFhL0MsR0FDcEIsTUFBTUYsRUFBVXYrRCxFQUFNMDhELFFBRXRCLEdBQUkrQixHQUFZRixHQUFXditELEVBQU1nOUQsUUFBUXlCLEdBRXZDLE9BQU8sS0FHVCxJQUFJZ0QsR0FBaUIsRUFTckIsR0FMSXpoRSxFQUFNczhELE9BQU9tQyxHQUFZeitELEVBQU13OEQsVUFBWSxJQUFLaUYsR0FBaUIsR0FHakV6aEUsRUFBTXM4RCxPQUFPbUMsR0FBWSxJQUFLZ0QsR0FBaUIsSUFFOUNBLEVBQWdCLENBQ25CLE1BQU14QyxFQUFrQmovRCxFQUFNdTBELEdBQUc1bEQsTUFBTW90RCxNQUFNaEUsU0FBUyxhQUNoRGlILEVBQWdCaC9ELEVBQU1xVyxXQUM1QnJXLEVBQU1xVyxXQUFhLFlBR25CLElBQUlrcEQsR0FBWSxFQUNoQixJQUFLLElBQUkxOEUsRUFBSSxFQUFHMnJFLEVBQUl5USxFQUFnQno3RSxPQUFRWCxFQUFJMnJFLEVBQUczckUsSUFDakQsR0FBSW84RSxFQUFnQnA4RSxHQUFHbWQsRUFBT3krRCxFQUFVRixHQUFTLEdBQU8sQ0FDdERnQixHQUFZLEVBQ1osS0FDRixDQUlGLEdBREF2L0QsRUFBTXFXLFdBQWEyb0QsRUFDZk8sRUFFRixPQUFPLElBRVgsQ0FFQSxNQUFNN3NFLEVBQU1zTixFQUFNbThELE9BQU9zQyxHQUFZeitELEVBQU1xOEQsT0FBT29DLEdBQzVDdHFFLEVBQU02TCxFQUFNbzhELE9BQU9xQyxHQUd6QixPQUFPeitELEVBQU1vL0MsSUFBSTl5RCxNQUFNb0csRUFBS3lCLEVBQU0sRUFDcEMsQ0FFQSxJQUFJOU0sRUFBTTJZLEVBQU1vL0MsSUFBSTl5RCxNQUFNb0csRUFBS3lCLEVBQU0sR0FFckNBLEVBQU05TSxFQUFJN0QsT0FDVixJQUFJaXhFLEdBQVksRUFFaEIsSUFBSy9oRSxFQUFNLEVBQUdBLEVBQU15QixFQUFLekIsSUFBTyxDQUM5QixNQUFNMG1DLEVBQUsveEMsRUFBSXFnQixXQUFXaFYsR0FDMUIsR0FBVyxLQUFQMG1DLEVBQ0YsT0FBTyxFQUNGLEdBQVcsS0FBUEEsRUFBcUIsQ0FDOUJxN0IsRUFBVy9oRSxFQUNYLEtBQ0YsQ0FBTyxHQUFXLEtBQVAwbUMsRUFBc0IsQ0FDL0IsTUFBTXNvQyxFQUFjRixFQUFZL0MsR0FDWixPQUFoQmlELElBQ0ZyNkUsR0FBT3E2RSxFQUNQdnRFLEVBQU05TSxFQUFJN0QsT0FDVmk3RSxJQUVKLE1BQU8sR0FBVyxLQUFQcmxDLElBQ1QxbUMsSUFDSUEsRUFBTXlCLEdBQStCLEtBQXhCOU0sRUFBSXFnQixXQUFXaFYsSUFBZSxDQUM3QyxNQUFNZ3ZFLEVBQWNGLEVBQVkvQyxHQUNaLE9BQWhCaUQsSUFDRnI2RSxHQUFPcTZFLEVBQ1B2dEUsRUFBTTlNLEVBQUk3RCxPQUNWaTdFLElBRUosQ0FFSixDQUVBLEdBQUloSyxFQUFXLEdBQXNDLEtBQWpDcHRFLEVBQUlxZ0IsV0FBVytzRCxFQUFXLEdBQXNCLE9BQU8sRUFJM0UsSUFBSy9oRSxFQUFNK2hFLEVBQVcsRUFBRy9oRSxFQUFNeUIsRUFBS3pCLElBQU8sQ0FDekMsTUFBTTBtQyxFQUFLL3hDLEVBQUlxZ0IsV0FBV2hWLEdBQzFCLEdBQVcsS0FBUDBtQyxFQUFhLENBQ2YsTUFBTXNvQyxFQUFjRixFQUFZL0MsR0FDWixPQUFoQmlELElBQ0ZyNkUsR0FBT3E2RSxFQUNQdnRFLEVBQU05TSxFQUFJN0QsT0FDVmk3RSxJQUVKLE1BQU8sSUFBSXZYLEdBQVE5dEIsR0FHakIsS0FFSixDQUlBLE1BQU11b0MsRUFBVTNoRSxFQUFNdTBELEdBQUdxTixRQUFRbE4scUJBQXFCcnRFLEVBQUtxTCxFQUFLeUIsR0FDaEUsSUFBS3d0RSxFQUFRNTdELEdBQU0sT0FBTyxFQUUxQixNQUFNbmEsRUFBT29VLEVBQU11MEQsR0FBRzZHLGNBQWN1RyxFQUFRdDZFLEtBQzVDLElBQUsyWSxFQUFNdTBELEdBQUc4RyxhQUFhenZFLEdBQVMsT0FBTyxFQUUzQzhHLEVBQU1pdkUsRUFBUWp2RSxJQUdkLE1BQU1tdkUsRUFBYW52RSxFQUNib3ZFLEVBQWdCckQsRUFJaEJ2cUUsRUFBUXhCLEVBQ2QsS0FBT0EsRUFBTXlCLEVBQUt6QixJQUFPLENBQ3ZCLE1BQU0wbUMsRUFBSy94QyxFQUFJcWdCLFdBQVdoVixHQUMxQixHQUFXLEtBQVAwbUMsRUFBYSxDQUNmLE1BQU1zb0MsRUFBY0YsRUFBWS9DLEdBQ1osT0FBaEJpRCxJQUNGcjZFLEdBQU9xNkUsRUFDUHZ0RSxFQUFNOU0sRUFBSTdELE9BQ1ZpN0UsSUFFSixNQUFPLElBQUl2WCxHQUFROXRCLEdBR2pCLEtBRUosQ0FJQSxJQVVJOXZDLEVBVkF5NEUsRUFBVy9oRSxFQUFNdTBELEdBQUdxTixRQUFRak4sZUFBZXR0RSxFQUFLcUwsRUFBS3lCLEdBQ3pELEtBQU80dEUsRUFBU2xOLGNBQWMsQ0FDNUIsTUFBTTZNLEVBQWNGLEVBQVkvQyxHQUNoQyxHQUFvQixPQUFoQmlELEVBQXNCLE1BQzFCcjZFLEdBQU9xNkUsRUFDUGh2RSxFQUFNeUIsRUFDTkEsRUFBTTlNLEVBQUk3RCxPQUNWaTdFLElBQ0FzRCxFQUFXL2hFLEVBQU11MEQsR0FBR3FOLFFBQVFqTixlQUFldHRFLEVBQUtxTCxFQUFLeUIsRUFBSzR0RSxFQUM1RCxDQWFBLElBVklydkUsRUFBTXlCLEdBQU9ELElBQVV4QixHQUFPcXZFLEVBQVNoOEQsSUFDekN6YyxFQUFReTRFLEVBQVMxNkUsSUFDakJxTCxFQUFNcXZFLEVBQVNydkUsTUFFZnBKLEVBQVEsR0FDUm9KLEVBQU1tdkUsRUFDTnBELEVBQVdxRCxHQUlOcHZFLEVBQU15QixHQUFLLENBRWhCLElBQUsreUQsR0FETTcvRCxFQUFJcWdCLFdBQVdoVixJQUNOLE1BQ3BCQSxHQUNGLENBRUEsR0FBSUEsRUFBTXlCLEdBQStCLEtBQXhCOU0sRUFBSXFnQixXQUFXaFYsSUFDMUJwSixFQU1GLElBSEFBLEVBQVEsR0FDUm9KLEVBQU1tdkUsRUFDTnBELEVBQVdxRCxFQUNKcHZFLEVBQU15QixHQUFLLENBRWhCLElBQUsreUQsR0FETTcvRCxFQUFJcWdCLFdBQVdoVixJQUNOLE1BQ3BCQSxHQUNGLENBSUosR0FBSUEsRUFBTXlCLEdBQStCLEtBQXhCOU0sRUFBSXFnQixXQUFXaFYsR0FFOUIsT0FBTyxFQUdULE1BQU1zdkUsRUFBUWxPLEdBQW1CenNFLEVBQUlpRixNQUFNLEVBQUdtb0UsSUFDOUMsUUFBS3VOLElBT0R4RCxTQUVnQyxJQUF6QngrRCxFQUFNazFELElBQUkrTSxhQUNuQmppRSxFQUFNazFELElBQUkrTSxXQUFhLENBQUMsUUFFaUIsSUFBaENqaUUsRUFBTWsxRCxJQUFJK00sV0FBV0QsS0FDOUJoaUUsRUFBTWsxRCxJQUFJK00sV0FBV0QsR0FBUyxDQUFFMTRFLFFBQU9zQyxTQUd6Q29VLEVBQU15OEQsS0FBT2dDLElBVFEsRUFXdkIsR0xwTEUsQ0FBQyxhRGJZLFNBQXFCeitELEVBQU9nK0QsRUFBV08sRUFBU0MsR0FDN0QsSUFBSTlyRSxFQUFNc04sRUFBTW04RCxPQUFPNkIsR0FBYWgrRCxFQUFNcThELE9BQU8yQixHQUM3QzdwRSxFQUFNNkwsRUFBTW84RCxPQUFPNEIsR0FHdkIsR0FBSWgrRCxFQUFNczhELE9BQU8wQixHQUFhaCtELEVBQU13OEQsV0FBYSxFQUFLLE9BQU8sRUFFN0QsSUFBS3g4RCxFQUFNdTBELEdBQUd0eEUsUUFBUW03QyxLQUFRLE9BQU8sRUFFckMsR0FBa0MsS0FBOUJwK0IsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixHQUF3QixPQUFPLEVBRXhELElBQUlrc0UsRUFBVzUrRCxFQUFNby9DLElBQUk5eUQsTUFBTW9HLEVBQUt5QixHQUVoQ3RSLEVBQUksRUFDUixLQUFPQSxFQUFJeTdFLEdBQWU5NkUsU0FDcEI4NkUsR0FBZXo3RSxHQUFHLEdBQUcrZixLQUFLZzhELEdBREUvN0UsS0FHbEMsR0FBSUEsSUFBTXk3RSxHQUFlOTZFLE9BQVUsT0FBTyxFQUUxQyxHQUFJZzdFLEVBRUYsT0FBT0YsR0FBZXo3RSxHQUFHLEdBRzNCLElBQUk0N0UsRUFBV1QsRUFBWSxFQUkzQixJQUFLTSxHQUFlejdFLEdBQUcsR0FBRytmLEtBQUtnOEQsR0FDN0IsS0FBT0gsRUFBV0YsS0FDWnYrRCxFQUFNczhELE9BQU9tQyxHQUFZeitELEVBQU13OEQsV0FEVmlDLElBT3pCLEdBSkEvckUsRUFBTXNOLEVBQU1tOEQsT0FBT3NDLEdBQVl6K0QsRUFBTXE4RCxPQUFPb0MsR0FDNUN0cUUsRUFBTTZMLEVBQU1vOEQsT0FBT3FDLEdBQ25CRyxFQUFXNStELEVBQU1vL0MsSUFBSTl5RCxNQUFNb0csRUFBS3lCLEdBRTVCbXFFLEdBQWV6N0UsR0FBRyxHQUFHK2YsS0FBS2c4RCxHQUFXLENBQ2YsSUFBcEJBLEVBQVNwN0UsUUFBZ0JpN0UsSUFDN0IsS0FDRixDQUlKeitELEVBQU15OEQsS0FBT2dDLEVBRWIsTUFBTXJKLEVBQVVwMUQsRUFBTWxkLEtBQUssYUFBYyxHQUFJLEdBSTdDLE9BSEFzeUUsRUFBTXZ4RSxJQUFVLENBQUNtNkUsRUFBV1MsR0FDNUJySixFQUFNNWtFLFFBQVV3UCxFQUFNczlELFNBQVNVLEVBQVdTLEVBQVV6K0QsRUFBTXc4RCxXQUFXLElBRTlELENBQ1QsRUNyQytCLENBQUMsWUFBYSxZQUFhLGVBQ3hELENBQUMsVU01QlksU0FBa0J4OEQsRUFBT2crRCxFQUFXTyxFQUFTQyxHQUMxRCxJQUFJOXJFLEVBQU1zTixFQUFNbThELE9BQU82QixHQUFhaCtELEVBQU1xOEQsT0FBTzJCLEdBQzdDN3BFLEVBQU02TCxFQUFNbzhELE9BQU80QixHQUd2QixHQUFJaCtELEVBQU1zOEQsT0FBTzBCLEdBQWFoK0QsRUFBTXc4RCxXQUFhLEVBQUssT0FBTyxFQUU3RCxJQUFJcGpDLEVBQU1wNUIsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixHQUUvQixHQUFXLEtBQVAwbUMsR0FBc0IxbUMsR0FBT3lCLEVBQU8sT0FBTyxFQUcvQyxJQUFJa2xCLEVBQVEsRUFFWixJQURBK2YsRUFBS3A1QixFQUFNby9DLElBQUkxM0MsYUFBYWhWLEdBQ2QsS0FBUDBtQyxHQUFzQjFtQyxFQUFNeUIsR0FBT2tsQixHQUFTLEdBQ2pEQSxJQUNBK2YsRUFBS3A1QixFQUFNby9DLElBQUkxM0MsYUFBYWhWLEdBRzlCLEdBQUkybUIsRUFBUSxHQUFNM21CLEVBQU15QixJQUFRK3lELEdBQVE5dEIsR0FBUSxPQUFPLEVBRXZELEdBQUlvbEMsRUFBVSxPQUFPLEVBSXJCcnFFLEVBQU02TCxFQUFNbTlELGVBQWVocEUsRUFBS3pCLEdBQ2hDLE1BQU0rSSxFQUFNdUUsRUFBTXE5RCxjQUFjbHBFLEVBQUssR0FBTXpCLEdBQ3ZDK0ksRUFBTS9JLEdBQU93MEQsR0FBUWxuRCxFQUFNby9DLElBQUkxM0MsV0FBV2pNLEVBQU0sTUFDbER0SCxFQUFNc0gsR0FHUnVFLEVBQU15OEQsS0FBT3VCLEVBQVksRUFFekIsTUFBTXhDLEVBQVd4N0QsRUFBTWxkLEtBQUssZUFBZ0IsSUFBTXVoRCxPQUFPaHJCLEdBQVEsR0FDakVtaUQsRUFBUXRELE9BQVMsV0FBVzVyRSxNQUFNLEVBQUcrc0IsR0FDckNtaUQsRUFBUTMzRSxJQUFTLENBQUNtNkUsRUFBV2grRCxFQUFNeThELE1BRW5DLE1BQU15RixFQUFhbGlFLEVBQU1sZCxLQUFLLFNBQVUsR0FBSSxHQVE1QyxPQVBBby9FLEVBQVExeEUsUUFBV3dQLEVBQU1vL0MsSUFBSTl5RCxNQUFNb0csRUFBS3lCLEdBQUtnOUQsT0FDN0MrUSxFQUFRcitFLElBQVcsQ0FBQ202RSxFQUFXaCtELEVBQU15OEQsTUFDckN5RixFQUFRNXhFLFNBQVcsR0FFRjBQLEVBQU1sZCxLQUFLLGdCQUFpQixJQUFNdWhELE9BQU9ockIsSUFBUyxHQUMzRDYrQyxPQUFTLFdBQVc1ckUsTUFBTSxFQUFHK3NCLElBRTlCLENBQ1QsRU5sQitCLENBQUMsWUFBYSxZQUFhLGVBQ3hELENBQUMsV08vQlksU0FBbUJyWixFQUFPZytELEVBQVdPLEdBQ2xELE1BQU1VLEVBQWtCai9ELEVBQU11MEQsR0FBRzVsRCxNQUFNb3RELE1BQU1oRSxTQUFTLGFBR3RELEdBQUkvM0QsRUFBTXM4RCxPQUFPMEIsR0FBYWgrRCxFQUFNdzhELFdBQWEsRUFBSyxPQUFPLEVBRTdELE1BQU13QyxFQUFnQmgvRCxFQUFNcVcsV0FDNUJyVyxFQUFNcVcsV0FBYSxZQUduQixJQUNJODlDLEVBREE5NkMsRUFBUSxFQUVSb2xELEVBQVdULEVBQVksRUFFM0IsS0FBT1MsRUFBV0YsSUFBWXYrRCxFQUFNZzlELFFBQVF5QixHQUFXQSxJQUFZLENBR2pFLEdBQUl6K0QsRUFBTXM4RCxPQUFPbUMsR0FBWXorRCxFQUFNdzhELFVBQVksRUFBSyxTQUtwRCxHQUFJeDhELEVBQU1zOEQsT0FBT21DLElBQWF6K0QsRUFBTXc4RCxVQUFXLENBQzdDLElBQUk5cEUsRUFBTXNOLEVBQU1tOEQsT0FBT3NDLEdBQVl6K0QsRUFBTXE4RCxPQUFPb0MsR0FDaEQsTUFBTXRxRSxFQUFNNkwsRUFBTW84RCxPQUFPcUMsR0FFekIsR0FBSS9yRSxFQUFNeUIsSUFDUmdnRSxFQUFTbjBELEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsSUFFZixLQUFYeWhFLEdBQXFDLEtBQVhBLEtBQzVCemhFLEVBQU1zTixFQUFNbzlELFVBQVUxcUUsRUFBS3loRSxHQUMzQnpoRSxFQUFNc04sRUFBTWs5RCxXQUFXeHFFLEdBRW5CQSxHQUFPeUIsSUFBSyxDQUNka2xCLEVBQW9CLEtBQVg4NkMsRUFBeUIsRUFBSSxFQUN0QyxLQUNGLENBR04sQ0FHQSxHQUFJbjBELEVBQU1zOEQsT0FBT21DLEdBQVksRUFBSyxTQUdsQyxJQUFJYyxHQUFZLEVBQ2hCLElBQUssSUFBSTE4RSxFQUFJLEVBQUcyckUsRUFBSXlRLEVBQWdCejdFLE9BQVFYLEVBQUkyckUsRUFBRzNyRSxJQUNqRCxHQUFJbzhFLEVBQWdCcDhFLEdBQUdtZCxFQUFPeStELEVBQVVGLEdBQVMsR0FBTyxDQUN0RGdCLEdBQVksRUFDWixLQUNGLENBRUYsR0FBSUEsRUFBYSxLQUNuQixDQUVBLElBQUtsbUQsRUFFSCxPQUFPLEVBR1QsTUFBTTdvQixFQUFVd1AsRUFBTXM5RCxTQUFTVSxFQUFXUyxFQUFVeitELEVBQU13OEQsV0FBVyxHQUFPckwsT0FFNUVueEQsRUFBTXk4RCxLQUFPZ0MsRUFBVyxFQUV4QixNQUFNakQsRUFBYXg3RCxFQUFNbGQsS0FBSyxlQUFnQixJQUFNdWhELE9BQU9ockIsR0FBUSxHQUNuRW1pRCxFQUFRdEQsT0FBVzd6QixPQUFPQyxhQUFhNnZCLEdBQ3ZDcUgsRUFBUTMzRSxJQUFXLENBQUNtNkUsRUFBV2grRCxFQUFNeThELE1BRXJDLE1BQU15RixFQUFhbGlFLEVBQU1sZCxLQUFLLFNBQVUsR0FBSSxHQVU1QyxPQVRBby9FLEVBQVExeEUsUUFBV0EsRUFDbkIweEUsRUFBUXIrRSxJQUFXLENBQUNtNkUsRUFBV2grRCxFQUFNeThELEtBQU8sR0FDNUN5RixFQUFRNXhFLFNBQVcsR0FFQTBQLEVBQU1sZCxLQUFLLGdCQUFpQixJQUFNdWhELE9BQU9ockIsSUFBUyxHQUM3RDYrQyxPQUFXN3pCLE9BQU9DLGFBQWE2dkIsR0FFdkNuMEQsRUFBTXFXLFdBQWEyb0QsR0FFWixDQUNULEdQL0NFLENBQUMsWVFoQ1ksU0FBb0JoL0QsRUFBT2crRCxFQUFXTyxHQUNuRCxNQUFNVSxFQUFrQmovRCxFQUFNdTBELEdBQUc1bEQsTUFBTW90RCxNQUFNaEUsU0FBUyxhQUNoRGlILEVBQWdCaC9ELEVBQU1xVyxXQUM1QixJQUFJb29ELEVBQVdULEVBQVksRUFJM0IsSUFIQWgrRCxFQUFNcVcsV0FBYSxZQUdab29ELEVBQVdGLElBQVl2K0QsRUFBTWc5RCxRQUFReUIsR0FBV0EsSUFBWSxDQUdqRSxHQUFJeitELEVBQU1zOEQsT0FBT21DLEdBQVl6K0QsRUFBTXc4RCxVQUFZLEVBQUssU0FHcEQsR0FBSXg4RCxFQUFNczhELE9BQU9tQyxHQUFZLEVBQUssU0FHbEMsSUFBSWMsR0FBWSxFQUNoQixJQUFLLElBQUkxOEUsRUFBSSxFQUFHMnJFLEVBQUl5USxFQUFnQno3RSxPQUFRWCxFQUFJMnJFLEVBQUczckUsSUFDakQsR0FBSW84RSxFQUFnQnA4RSxHQUFHbWQsRUFBT3krRCxFQUFVRixHQUFTLEdBQU8sQ0FDdERnQixHQUFZLEVBQ1osS0FDRixDQUVGLEdBQUlBLEVBQWEsS0FDbkIsQ0FFQSxNQUFNL3VFLEVBQVV3UCxFQUFNczlELFNBQVNVLEVBQVdTLEVBQVV6K0QsRUFBTXc4RCxXQUFXLEdBQU9yTCxPQUU1RW54RCxFQUFNeThELEtBQU9nQyxFQUVNeitELEVBQU1sZCxLQUFLLGlCQUFrQixJQUFLLEdBQzdDZSxJQUFXLENBQUNtNkUsRUFBV2grRCxFQUFNeThELE1BRXJDLE1BQU15RixFQUFhbGlFLEVBQU1sZCxLQUFLLFNBQVUsR0FBSSxHQVM1QyxPQVJBby9FLEVBQVExeEUsUUFBV0EsRUFDbkIweEUsRUFBUXIrRSxJQUFXLENBQUNtNkUsRUFBV2grRCxFQUFNeThELE1BQ3JDeUYsRUFBUTV4RSxTQUFXLEdBRW5CMFAsRUFBTWxkLEtBQUssa0JBQW1CLEtBQU0sR0FFcENrZCxFQUFNcVcsV0FBYTJvRCxHQUVaLENBQ1QsSVJMQSxTQUFTbUQsS0FNUDM5RSxLQUFLdTNFLE1BQVEsSUFBSSxHQUVqQixJQUFLLElBQUlsNUUsRUFBSSxFQUFHQSxFQUFJLEdBQU9XLE9BQVFYLElBQ2pDMkIsS0FBS3UzRSxNQUFNajVFLEtBQUssR0FBT0QsR0FBRyxHQUFJLEdBQU9BLEdBQUcsR0FBSSxDQUFFMDJDLEtBQU0sR0FBTzEyQyxHQUFHLElBQU0sSUFBSXlKLFNBRTVFLENBSUE2MUUsR0FBWXZnRixVQUFVMitFLFNBQVcsU0FBVXZnRSxFQUFPZytELEVBQVdPLEdBQzNELE1BQU10NEQsRUFBUXpoQixLQUFLdTNFLE1BQU1oRSxTQUFTLElBQzVCL3NDLEVBQU0va0IsRUFBTXppQixPQUNaNCtFLEVBQWFwaUUsRUFBTXUwRCxHQUFHdHhFLFFBQVFtL0UsV0FDcEMsSUFBSTNGLEVBQU91QixFQUNQcUUsR0FBZ0IsRUFFcEIsS0FBTzVGLEVBQU84QixJQUNaditELEVBQU15OEQsS0FBT0EsRUFBT3o4RCxFQUFNaTlELGVBQWVSLEtBQ3JDQSxHQUFROEIsT0FJUnYrRCxFQUFNczhELE9BQU9HLEdBQVF6OEQsRUFBTXc4RCxZQU5WLENBVXJCLEdBQUl4OEQsRUFBTXFaLE9BQVMrb0QsRUFBWSxDQUM3QnBpRSxFQUFNeThELEtBQU84QixFQUNiLEtBQ0YsQ0FRQSxNQUFNK0QsRUFBV3RpRSxFQUFNeThELEtBQ3ZCLElBQUkxMkQsR0FBSyxFQUVULElBQUssSUFBSWxqQixFQUFJLEVBQUdBLEVBQUltb0MsRUFBS25vQyxJQUV2QixHQURBa2pCLEVBQUtFLEVBQU1wakIsR0FBR21kLEVBQU95OEQsRUFBTThCLEdBQVMsR0FDaEN4NEQsRUFBSSxDQUNOLEdBQUl1OEQsR0FBWXRpRSxFQUFNeThELEtBQ3BCLE1BQU0sSUFBSS81RSxNQUFNLDBDQUVsQixLQUNGLENBSUYsSUFBS3FqQixFQUFJLE1BQU0sSUFBSXJqQixNQUFNLG1DQUl6QnNkLEVBQU0yOEQsT0FBUzBGLEVBR1hyaUUsRUFBTWc5RCxRQUFRaDlELEVBQU15OEQsS0FBTyxLQUM3QjRGLEdBQWdCLEdBR2xCNUYsRUFBT3o4RCxFQUFNeThELEtBRVRBLEVBQU84QixHQUFXditELEVBQU1nOUQsUUFBUVAsS0FDbEM0RixHQUFnQixFQUNoQjVGLElBQ0F6OEQsRUFBTXk4RCxLQUFPQSxFQUVqQixDQUNGLEVBT0EwRixHQUFZdmdGLFVBQVU0RixNQUFRLFNBQVU0M0QsRUFBS21WLEVBQUlXLEVBQUtxTixHQUNwRCxJQUFLbmpCLEVBQU8sT0FFWixNQUFNcC9DLEVBQVEsSUFBSXhiLEtBQUt5M0UsTUFBTTdjLEVBQUttVixFQUFJVyxFQUFLcU4sR0FFM0MvOUUsS0FBSys3RSxTQUFTdmdFLEVBQU9BLEVBQU15OEQsS0FBTXo4RCxFQUFNMDhELFFBQ3pDLEVBRUF5RixHQUFZdmdGLFVBQVVxNkUsTUFBUSxHQUU5QixZU2hJQSxTQUFTdUcsR0FBYXBqQixFQUFLbVYsRUFBSVcsRUFBS3FOLEdBQ2xDLzlFLEtBQUs0NkQsSUFBTUEsRUFDWDU2RCxLQUFLMHdFLElBQU1BLEVBQ1gxd0UsS0FBSyt2RSxHQUFLQSxFQUNWL3ZFLEtBQUs0ZCxPQUFTbWdFLEVBQ2QvOUUsS0FBS2krRSxZQUFjdDJFLE1BQU1vMkUsRUFBVS8rRSxRQUVuQ2dCLEtBQUtrTyxJQUFNLEVBQ1hsTyxLQUFLNnZFLE9BQVM3dkUsS0FBSzQ2RCxJQUFJNTdELE9BQ3ZCZ0IsS0FBSzYwQixNQUFRLEVBQ2I3MEIsS0FBS2srRSxRQUFVLEdBQ2ZsK0UsS0FBS20rRSxhQUFlLEVBSXBCbitFLEtBQUsrWCxNQUFRLENBQUMsRUFHZC9YLEtBQUtvK0UsV0FBYSxHQUdsQnArRSxLQUFLcStFLGlCQUFtQixHQUd4QnIrRSxLQUFLcytFLFVBQVksQ0FBQyxFQUNsQnQrRSxLQUFLdStFLGtCQUFtQixFQUl4QnYrRSxLQUFLdytFLFVBQVksQ0FDbkIsQ0FJQVIsR0FBWTVnRixVQUFVcWhGLFlBQWMsV0FDbEMsTUFBTTdOLEVBQVEsSUFBSSxHQUFNLE9BQVEsR0FBSSxHQUtwQyxPQUpBQSxFQUFNNWtFLFFBQVVoTSxLQUFLaytFLFFBQ3JCdE4sRUFBTS83QyxNQUFRNzBCLEtBQUttK0UsYUFDbkJuK0UsS0FBSzRkLE9BQU90ZixLQUFLc3lFLEdBQ2pCNXdFLEtBQUtrK0UsUUFBVSxHQUNSdE4sQ0FDVCxFQUtBb04sR0FBWTVnRixVQUFVa0IsS0FBTyxTQUFVMkUsRUFBTTZlLEVBQUttd0QsR0FDNUNqeUUsS0FBS2srRSxTQUNQbCtFLEtBQUt5K0UsY0FHUCxNQUFNN04sRUFBUSxJQUFJLEdBQU0zdEUsRUFBTTZlLEVBQUttd0QsR0FDbkMsSUFBSXlNLEVBQWEsS0FxQmpCLE9BbkJJek0sRUFBVSxJQUVaanlFLEtBQUs2MEIsUUFDTDcwQixLQUFLbytFLFdBQWFwK0UsS0FBS3ErRSxpQkFBaUJ2Z0UsT0FHMUM4eUQsRUFBTS83QyxNQUFRNzBCLEtBQUs2MEIsTUFFZm85QyxFQUFVLElBRVpqeUUsS0FBSzYwQixRQUNMNzBCLEtBQUtxK0UsaUJBQWlCLy9FLEtBQUswQixLQUFLbytFLFlBQ2hDcCtFLEtBQUtvK0UsV0FBYSxHQUNsQk0sRUFBYSxDQUFFTixXQUFZcCtFLEtBQUtvK0UsYUFHbENwK0UsS0FBS20rRSxhQUFlbitFLEtBQUs2MEIsTUFDekI3MEIsS0FBSzRkLE9BQU90ZixLQUFLc3lFLEdBQ2pCNXdFLEtBQUtpK0UsWUFBWTMvRSxLQUFLb2dGLEdBQ2Y5TixDQUNULEVBUUFvTixHQUFZNWdGLFVBQVV1aEYsV0FBYSxTQUFVanZFLEVBQU9rdkUsR0FDbEQsTUFBTWp2RSxFQUFNM1AsS0FBSzZ2RSxPQUNYRixFQUFTM3ZFLEtBQUs0NkQsSUFBSTEzQyxXQUFXeFQsR0FHN0IrbEUsRUFBVy9sRSxFQUFRLEVBQUkxUCxLQUFLNDZELElBQUkxM0MsV0FBV3hULEVBQVEsR0FBSyxHQUU5RCxJQUFJeEIsRUFBTXdCLEVBQ1YsS0FBT3hCLEVBQU15QixHQUFPM1AsS0FBSzQ2RCxJQUFJMTNDLFdBQVdoVixLQUFTeWhFLEdBQVV6aEUsSUFFM0QsTUFBTWduQixFQUFRaG5CLEVBQU13QixFQUdkZ21FLEVBQVd4bkUsRUFBTXlCLEVBQU0zUCxLQUFLNDZELElBQUkxM0MsV0FBV2hWLEdBQU8sR0FFbER5bkUsRUFBa0J0RyxHQUFlb0csSUFBYXJHLEdBQVl2dkIsT0FBT0MsYUFBYTIxQixJQUM5RUcsRUFBa0J2RyxHQUFlcUcsSUFBYXRHLEdBQVl2dkIsT0FBT0MsYUFBYTQxQixJQUU5RUcsRUFBbUIxRyxHQUFhc0csR0FDaENLLEVBQW1CM0csR0FBYXVHLEdBRWhDbUosR0FDSC9JLEtBQXNCRixHQUFtQkMsR0FBb0JGLEdBQzFEbUosR0FDSGpKLEtBQXNCRixHQUFtQkcsR0FBb0JGLEdBS2hFLE1BQU8sQ0FBRW1KLFNBSFNGLElBQW1CRCxJQUFpQkUsR0FBa0JuSixHQUdyRHFKLFVBRkRGLElBQW1CRixJQUFpQkMsR0FBa0JqSixHQUUxQzUyRSxPQUFRazJCLEVBQ3hDLEVBR0E4b0QsR0FBWTVnRixVQUFVcTJFLE1BQVEsR0FFOUIsWUNoSEEsU0FBU3dMLEdBQWtCcnFDLEdBQ3pCLE9BQVFBLEdBQ04sS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssR0FDTCxLQUFLLElBQ0wsS0FBSyxJQUNMLEtBQUssSUFDSCxPQUFPLEVBQ1QsUUFDRSxPQUFPLEVBRWIsQ0NwQ0EsTUFBTXNxQyxHQUFZLDBDQ0NsQixNQUFNQyxHQUFVLEdBRWhCLElBQUssSUFBSTlnRixFQUFJLEVBQUdBLEVBQUksSUFBS0EsSUFBTzhnRixHQUFRN2dGLEtBQUssR0N3QzdDLFNBQVM4Z0YsR0FBYTVqRSxFQUFPNGlFLEdBQzNCLElBQUl4TixFQUNKLE1BQU15TyxFQUFjLEdBQ2QxdkUsRUFBTXl1RSxFQUFXcC9FLE9BRXZCLElBQUssSUFBSVgsRUFBSSxFQUFHQSxFQUFJc1IsRUFBS3RSLElBQUssQ0FDNUIsTUFBTWloRixFQUFhbEIsRUFBVy8vRSxHQUU5QixHQUEwQixNQUF0QmloRixFQUFXM1AsT0FDYixTQUdGLElBQXdCLElBQXBCMlAsRUFBVzd2RSxJQUNiLFNBR0YsTUFBTTh2RSxFQUFXbkIsRUFBV2tCLEVBQVc3dkUsS0FFdkNtaEUsRUFBZ0JwMUQsRUFBTW9DLE9BQU8waEUsRUFBVzFPLE9BQ3hDQSxFQUFNM3RFLEtBQVUsU0FDaEIydEUsRUFBTTl1RCxJQUFVLElBQ2hCOHVELEVBQU1xQixRQUFVLEVBQ2hCckIsRUFBTThDLE9BQVUsS0FDaEI5QyxFQUFNNWtFLFFBQVUsR0FFaEI0a0UsRUFBZ0JwMUQsRUFBTW9DLE9BQU8yaEUsRUFBUzNPLE9BQ3RDQSxFQUFNM3RFLEtBQVUsVUFDaEIydEUsRUFBTTl1RCxJQUFVLElBQ2hCOHVELEVBQU1xQixTQUFXLEVBQ2pCckIsRUFBTThDLE9BQVUsS0FDaEI5QyxFQUFNNWtFLFFBQVUsR0FFOEIsU0FBMUN3UCxFQUFNb0MsT0FBTzJoRSxFQUFTM08sTUFBUSxHQUFHM3RFLE1BQ1ksTUFBN0N1WSxFQUFNb0MsT0FBTzJoRSxFQUFTM08sTUFBUSxHQUFHNWtFLFNBQ25DcXpFLEVBQVkvZ0YsS0FBS2loRixFQUFTM08sTUFBUSxFQUV0QyxDQVFBLEtBQU95TyxFQUFZcmdGLFFBQVEsQ0FDekIsTUFBTVgsRUFBSWdoRixFQUFZdmhFLE1BQ3RCLElBQUlwUCxFQUFJclEsRUFBSSxFQUVaLEtBQU9xUSxFQUFJOE0sRUFBTW9DLE9BQU81ZSxRQUFtQyxZQUF6QndjLEVBQU1vQyxPQUFPbFAsR0FBR3pMLE1BQ2hEeUwsSUFHRkEsSUFFSXJRLElBQU1xUSxJQUNSa2lFLEVBQVFwMUQsRUFBTW9DLE9BQU9sUCxHQUNyQjhNLEVBQU1vQyxPQUFPbFAsR0FBSzhNLEVBQU1vQyxPQUFPdmYsR0FDL0JtZCxFQUFNb0MsT0FBT3ZmLEdBQUt1eUUsRUFFdEIsQ0FDRixDRGxHQSxxQ0FDRy95RCxNQUFNLElBQUlqVCxTQUFRLFNBQVVncUMsR0FBTXVxQyxHQUFRdnFDLEVBQUcxeEIsV0FBVyxJQUFNLENBQUUsSUNrSG5FLFVBQ0U2NEQsU0F2SEYsU0FBaUN2Z0UsRUFBT3crRCxHQUN0QyxNQUFNdHFFLEVBQVE4TCxFQUFNdE4sSUFDZHloRSxFQUFTbjBELEVBQU1vL0MsSUFBSTEzQyxXQUFXeFQsR0FFcEMsR0FBSXNxRSxFQUFVLE9BQU8sRUFFckIsR0FBZSxNQUFYckssRUFBMEIsT0FBTyxFQUVyQyxNQUFNNlAsRUFBVWhrRSxFQUFNbWpFLFdBQVduakUsRUFBTXROLEtBQUssR0FDNUMsSUFBSXM0QixFQUFNZzVDLEVBQVF4Z0YsT0FDbEIsTUFBTTQxQyxFQUFLaUwsT0FBT0MsYUFBYTZ2QixHQUUvQixHQUFJbnBDLEVBQU0sRUFBSyxPQUFPLEVBRXRCLElBQUlvcUMsRUFFQXBxQyxFQUFNLElBQ1JvcUMsRUFBZ0JwMUQsRUFBTWxkLEtBQUssT0FBUSxHQUFJLEdBQ3ZDc3lFLEVBQU01a0UsUUFBVTRvQyxFQUNoQnBPLEtBR0YsSUFBSyxJQUFJbm9DLEVBQUksRUFBR0EsRUFBSW1vQyxFQUFLbm9DLEdBQUssRUFDNUJ1eUUsRUFBZ0JwMUQsRUFBTWxkLEtBQUssT0FBUSxHQUFJLEdBQ3ZDc3lFLEVBQU01a0UsUUFBVTRvQyxFQUFLQSxFQUVyQnA1QixFQUFNNGlFLFdBQVc5L0UsS0FBSyxDQUNwQnF4RSxTQUNBM3dFLE9BQVEsRUFDUjR4RSxNQUFPcDFELEVBQU1vQyxPQUFPNWUsT0FBUyxFQUM3QnlRLEtBQU0sRUFDTmtYLEtBQU02NEQsRUFBUVQsU0FDZGpyRCxNQUFPMHJELEVBQVFSLFlBTW5CLE9BRkF4akUsRUFBTXROLEtBQU9zeEUsRUFBUXhnRixRQUVkLENBQ1QsRUFpRkVvZ0YsWUFmRixTQUFvQzVqRSxHQUNsQyxNQUFNeWlFLEVBQWN6aUUsRUFBTXlpRSxZQUNwQnR1RSxFQUFNNkwsRUFBTXlpRSxZQUFZai9FLE9BRTlCb2dGLEdBQVk1akUsRUFBT0EsRUFBTTRpRSxZQUV6QixJQUFLLElBQUkvRyxFQUFPLEVBQUdBLEVBQU8xbkUsRUFBSzBuRSxJQUN6QjRHLEVBQVk1RyxJQUFTNEcsRUFBWTVHLEdBQU0rRyxZQUN6Q2dCLEdBQVk1akUsRUFBT3lpRSxFQUFZNUcsR0FBTStHLFdBRzNDLEdDdkVBLFNBQVMsR0FBYTVpRSxFQUFPNGlFLEdBRzNCLElBQUssSUFBSS8vRSxFQUZHKy9FLEVBQVdwL0UsT0FFSixFQUFHWCxHQUFLLEVBQUdBLElBQUssQ0FDakMsTUFBTWloRixFQUFhbEIsRUFBVy8vRSxHQUU5QixHQUEwQixLQUF0QmloRixFQUFXM1AsUUFBZ0QsS0FBdEIyUCxFQUFXM1AsT0FDbEQsU0FJRixJQUF3QixJQUFwQjJQLEVBQVc3dkUsSUFDYixTQUdGLE1BQU04dkUsRUFBV25CLEVBQVdrQixFQUFXN3ZFLEtBT2pDZ3dFLEVBQVdwaEYsRUFBSSxHQUNWKy9FLEVBQVcvL0UsRUFBSSxHQUFHb1IsTUFBUTZ2RSxFQUFXN3ZFLElBQU0sR0FFM0MydUUsRUFBVy8vRSxFQUFJLEdBQUdzeEUsU0FBVzJQLEVBQVczUCxRQUN4Q3lPLEVBQVcvL0UsRUFBSSxHQUFHdXlFLFFBQVUwTyxFQUFXMU8sTUFBUSxHQUUvQ3dOLEVBQVdrQixFQUFXN3ZFLElBQU0sR0FBR21oRSxRQUFVMk8sRUFBUzNPLE1BQVEsRUFFL0RoOEIsRUFBS2lMLE9BQU9DLGFBQWF3L0IsRUFBVzNQLFFBRXBDcUgsRUFBWXg3RCxFQUFNb0MsT0FBTzBoRSxFQUFXMU8sT0FDMUNvRyxFQUFRL3pFLEtBQVV3OEUsRUFBVyxjQUFnQixVQUM3Q3pJLEVBQVFsMUQsSUFBVTI5RCxFQUFXLFNBQVcsS0FDeEN6SSxFQUFRL0UsUUFBVSxFQUNsQitFLEVBQVF0RCxPQUFVK0wsRUFBVzdxQyxFQUFLQSxFQUFLQSxFQUN2Q29pQyxFQUFRaHJFLFFBQVUsR0FFbEIsTUFBTWtyRSxFQUFZMTdELEVBQU1vQyxPQUFPMmhFLEVBQVMzTyxPQUN4Q3NHLEVBQVFqMEUsS0FBVXc4RSxFQUFXLGVBQWlCLFdBQzlDdkksRUFBUXAxRCxJQUFVMjlELEVBQVcsU0FBVyxLQUN4Q3ZJLEVBQVFqRixTQUFXLEVBQ25CaUYsRUFBUXhELE9BQVUrTCxFQUFXN3FDLEVBQUtBLEVBQUtBLEVBQ3ZDc2lDLEVBQVFsckUsUUFBVSxHQUVkeXpFLElBQ0Zqa0UsRUFBTW9DLE9BQU93Z0UsRUFBVy8vRSxFQUFJLEdBQUd1eUUsT0FBTzVrRSxRQUFVLEdBQ2hEd1AsRUFBTW9DLE9BQU93Z0UsRUFBV2tCLEVBQVc3dkUsSUFBTSxHQUFHbWhFLE9BQU81a0UsUUFBVSxHQUM3RDNOLElBRUosQ0FDRixDQWlCQSxVQUNFMDlFLFNBbkhGLFNBQTRCdmdFLEVBQU93K0QsR0FDakMsTUFBTXRxRSxFQUFROEwsRUFBTXROLElBQ2R5aEUsRUFBU24wRCxFQUFNby9DLElBQUkxM0MsV0FBV3hULEdBRXBDLEdBQUlzcUUsRUFBVSxPQUFPLEVBRXJCLEdBQWUsS0FBWHJLLEdBQXNDLEtBQVhBLEVBQTJCLE9BQU8sRUFFakUsTUFBTTZQLEVBQVVoa0UsRUFBTW1qRSxXQUFXbmpFLEVBQU10TixJQUFnQixLQUFYeWhFLEdBRTVDLElBQUssSUFBSXR4RSxFQUFJLEVBQUdBLEVBQUltaEYsRUFBUXhnRixPQUFRWCxJQUFLLENBQ3pCbWQsRUFBTWxkLEtBQUssT0FBUSxHQUFJLEdBQy9CME4sUUFBVTZ6QyxPQUFPQyxhQUFhNnZCLEdBRXBDbjBELEVBQU00aUUsV0FBVzkvRSxLQUFLLENBR3BCcXhFLFNBSUEzd0UsT0FBUXdnRixFQUFReGdGLE9BSWhCNHhFLE1BQU9wMUQsRUFBTW9DLE9BQU81ZSxPQUFTLEVBSzdCeVEsS0FBTSxFQUtOa1gsS0FBTTY0RCxFQUFRVCxTQUNkanJELE1BQU8wckQsRUFBUVIsV0FFbkIsQ0FJQSxPQUZBeGpFLEVBQU10TixLQUFPc3hFLEVBQVF4Z0YsUUFFZCxDQUNULEVBeUVFb2dGLFlBZkYsU0FBZ0M1akUsR0FDOUIsTUFBTXlpRSxFQUFjemlFLEVBQU15aUUsWUFDcEJ0dUUsRUFBTTZMLEVBQU15aUUsWUFBWWovRSxPQUU5QixHQUFZd2MsRUFBT0EsRUFBTTRpRSxZQUV6QixJQUFLLElBQUkvRyxFQUFPLEVBQUdBLEVBQU8xbkUsRUFBSzBuRSxJQUN6QjRHLEVBQVk1RyxJQUFTNEcsRUFBWTVHLEdBQU0rRyxZQUN6QyxHQUFZNWlFLEVBQU95aUUsRUFBWTVHLEdBQU0rRyxXQUczQyxHQ2xIQSxNQUFNc0IsR0FBYyx5SUFFZEMsR0FBYyxxRENBcEIsTUFBTUMsR0FBYSx1Q0FDYkMsR0FBYSw0QkNIbkIsU0FBU0MsR0FBbUIxQixHQUMxQixNQUFNMkIsRUFBZ0IsQ0FBQyxFQUNqQnB3RSxFQUFNeXVFLEVBQVdwL0UsT0FFdkIsSUFBSzJRLEVBQUssT0FHVixJQUFJcXdFLEVBQVksRUFDWkMsR0FBZ0IsRUFDcEIsTUFBTUMsRUFBUSxHQUVkLElBQUssSUFBSUMsRUFBWSxFQUFHQSxFQUFZeHdFLEVBQUt3d0UsSUFBYSxDQUNwRCxNQUFNQyxFQUFTaEMsRUFBVytCLEdBb0IxQixHQWxCQUQsRUFBTTVoRixLQUFLLEdBTVA4L0UsRUFBVzRCLEdBQVdyUSxTQUFXeVEsRUFBT3pRLFFBQVVzUSxJQUFpQkcsRUFBT3hQLE1BQVEsSUFDcEZvUCxFQUFZRyxHQUdkRixFQUFlRyxFQUFPeFAsTUFNdEJ3UCxFQUFPcGhGLE9BQVNvaEYsRUFBT3BoRixRQUFVLEdBRTVCb2hGLEVBQU90c0QsTUFBTyxTQU9kaXNELEVBQWMxaUYsZUFBZStpRixFQUFPelEsVUFDdkNvUSxFQUFjSyxFQUFPelEsUUFBVSxFQUFFLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUd2RCxNQUFNMFEsRUFBZU4sRUFBY0ssRUFBT3pRLFNBQVN5USxFQUFPejVELEtBQU8sRUFBSSxHQUFNeTVELEVBQU9waEYsT0FBUyxHQUUzRixJQUFJc2hGLEVBQVlOLEVBQVlFLEVBQU1GLEdBQWEsRUFFM0NPLEVBQWtCRCxFQUV0QixLQUFPQSxFQUFZRCxFQUFjQyxHQUFhSixFQUFNSSxHQUFhLEVBQUcsQ0FDbEUsTUFBTUUsRUFBU3BDLEVBQVdrQyxHQUUxQixHQUFJRSxFQUFPN1EsU0FBV3lRLEVBQU96USxTQUV6QjZRLEVBQU83NUQsTUFBUTY1RCxFQUFPL3dFLElBQU0sR0FBRyxDQUNqQyxJQUFJZ3hFLEdBQWEsRUFpQmpCLElBUklELEVBQU8xc0QsT0FBU3NzRCxFQUFPejVELFFBQ3BCNjVELEVBQU94aEYsT0FBU29oRixFQUFPcGhGLFFBQVUsR0FBTSxJQUN0Q3doRixFQUFPeGhGLE9BQVMsR0FBTSxHQUFLb2hGLEVBQU9waEYsT0FBUyxHQUFNLElBQ25EeWhGLEdBQWEsS0FLZEEsRUFBWSxDQUtmLE1BQU1DLEVBQVdKLEVBQVksSUFBTWxDLEVBQVdrQyxFQUFZLEdBQUczNUQsS0FDekR1NUQsRUFBTUksRUFBWSxHQUFLLEVBQ3ZCLEVBRUpKLEVBQU1DLEdBQWFBLEVBQVlHLEVBQVlJLEVBQzNDUixFQUFNSSxHQUFhSSxFQUVuQk4sRUFBT3o1RCxNQUFRLEVBQ2Y2NUQsRUFBTy93RSxJQUFRMHdFLEVBQ2ZLLEVBQU8xc0QsT0FBUSxFQUNmeXNELEdBQW1CLEVBR25CTixHQUFnQixFQUNoQixLQUNGLENBQ0YsQ0FDRixFQUV5QixJQUFyQk0sSUFRRlIsRUFBY0ssRUFBT3pRLFNBQVN5USxFQUFPejVELEtBQU8sRUFBSSxJQUFPeTVELEVBQU9waEYsUUFBVSxHQUFLLEdBQU11aEYsRUFFdkYsQ0FDRixDQ25GQSxNQUFNLEdBQVMsQ0FDYixDQUFDLE9SYVksU0FBZS9rRSxFQUFPdytELEdBQ25DLElBQUk5ckUsRUFBTXNOLEVBQU10TixJQUVoQixLQUFPQSxFQUFNc04sRUFBTXEwRCxTQUFXb1AsR0FBaUJ6akUsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixLQUNsRUEsSUFHRixPQUFJQSxJQUFRc04sRUFBTXROLE1BRWI4ckUsSUFBVXgrRCxFQUFNMGlFLFNBQVcxaUUsRUFBTW8vQyxJQUFJOXlELE1BQU0wVCxFQUFNdE4sSUFBS0EsSUFFM0RzTixFQUFNdE4sSUFBTUEsR0FFTCxFQUNULEdRMUJFLENBQUMsVVB4QlksU0FBa0JzTixFQUFPdytELEdBQ3RDLElBQUt4K0QsRUFBTXUwRCxHQUFHdHhFLFFBQVE0M0UsUUFBUyxPQUFPLEVBQ3RDLEdBQUk3NkQsRUFBTWdqRSxVQUFZLEVBQUcsT0FBTyxFQUVoQyxNQUFNdHdFLEVBQU1zTixFQUFNdE4sSUFHbEIsR0FBSUEsRUFBTSxFQUZFc04sRUFBTXEwRCxPQUVDLE9BQU8sRUFDMUIsR0FBa0MsS0FBOUJyMEQsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixHQUFzQixPQUFPLEVBQ3RELEdBQXNDLEtBQWxDc04sRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixFQUFNLEdBQW9CLE9BQU8sRUFDMUQsR0FBc0MsS0FBbENzTixFQUFNby9DLElBQUkxM0MsV0FBV2hWLEVBQU0sR0FBb0IsT0FBTyxFQUUxRCxNQUFNbUwsRUFBUW1DLEVBQU0waUUsUUFBUTdrRSxNQUFNNmxFLElBQ2xDLElBQUs3bEUsRUFBTyxPQUFPLEVBRW5CLE1BQU13ekQsRUFBUXh6RCxFQUFNLEdBRWRyUyxFQUFPd1UsRUFBTXUwRCxHQUFHc0csUUFBUXNLLGFBQWFubEUsRUFBTW8vQyxJQUFJOXlELE1BQU1vRyxFQUFNMitELEVBQU03dEUsU0FDdkUsSUFBS2dJLEVBQU0sT0FBTyxFQUVsQixJQUFJeTVELEVBQU16NUQsRUFBS3k1RCxJQUlmLEdBQUlBLEVBQUl6aEUsUUFBVTZ0RSxFQUFNN3RFLE9BQVEsT0FBTyxFQUd2Q3loRSxFQUFNQSxFQUFJejdELFFBQVEsT0FBUSxJQUUxQixNQUFNMnhFLEVBQVVuN0QsRUFBTXUwRCxHQUFHNkcsY0FBY25XLEdBQ3ZDLElBQUtqbEQsRUFBTXUwRCxHQUFHOEcsYUFBYUYsR0FBVSxPQUFPLEVBRTVDLElBQUtxRCxFQUFRLENBQ1h4K0QsRUFBTTBpRSxRQUFVMWlFLEVBQU0waUUsUUFBUXAyRSxNQUFNLEdBQUkra0UsRUFBTTd0RSxRQUU5QyxNQUFNZzRFLEVBQVV4N0QsRUFBTWxkLEtBQUssWUFBYSxJQUFLLEdBQzdDMDRFLEVBQVExa0UsTUFBUSxDQUFDLENBQUMsT0FBUXFrRSxJQUMxQkssRUFBUXRELE9BQVMsVUFDakJzRCxFQUFRakcsS0FBTyxPQUVDdjFELEVBQU1sZCxLQUFLLE9BQVEsR0FBSSxHQUMvQjBOLFFBQVV3UCxFQUFNdTBELEdBQUdnSCxrQkFBa0J0VyxHQUU3QyxNQUFNeVcsRUFBVTE3RCxFQUFNbGQsS0FBSyxhQUFjLEtBQU0sR0FDL0M0NEUsRUFBUXhELE9BQVMsVUFDakJ3RCxFQUFRbkcsS0FBTyxNQUNqQixDQUdBLE9BREF2MUQsRUFBTXROLEtBQU91eUQsRUFBSXpoRSxPQUFTNnRFLEVBQU03dEUsUUFDekIsQ0FDVCxHT3pCRSxDQUFDLFVDMUJZLFNBQWtCd2MsRUFBT3crRCxHQUN0QyxJQUFJOXJFLEVBQU1zTixFQUFNdE4sSUFFaEIsR0FBa0MsS0FBOUJzTixFQUFNby9DLElBQUkxM0MsV0FBV2hWLEdBQXlCLE9BQU8sRUFFekQsTUFBTTB5RSxFQUFPcGxFLEVBQU0waUUsUUFBUWwvRSxPQUFTLEVBQzlCMlEsRUFBTTZMLEVBQU1xMEQsT0FNbEIsSUFBS21LLEVBQ0gsR0FBSTRHLEdBQVEsR0FBd0MsS0FBbkNwbEUsRUFBTTBpRSxRQUFRaDdELFdBQVcwOUQsR0FDeEMsR0FBSUEsR0FBUSxHQUE0QyxLQUF2Q3BsRSxFQUFNMGlFLFFBQVFoN0QsV0FBVzA5RCxFQUFPLEdBQWEsQ0FFNUQsSUFBSUMsRUFBS0QsRUFBTyxFQUNoQixLQUFPQyxHQUFNLEdBQTBDLEtBQXJDcmxFLEVBQU0waUUsUUFBUWg3RCxXQUFXMjlELEVBQUssSUFBYUEsSUFFN0RybEUsRUFBTTBpRSxRQUFVMWlFLEVBQU0waUUsUUFBUXAyRSxNQUFNLEVBQUcrNEUsR0FDdkNybEUsRUFBTWxkLEtBQUssWUFBYSxLQUFNLEVBQ2hDLE1BQ0VrZCxFQUFNMGlFLFFBQVUxaUUsRUFBTTBpRSxRQUFRcDJFLE1BQU0sR0FBSSxHQUN4QzBULEVBQU1sZCxLQUFLLFlBQWEsS0FBTSxRQUdoQ2tkLEVBQU1sZCxLQUFLLFlBQWEsS0FBTSxHQU9sQyxJQUhBNFAsSUFHT0EsRUFBTXlCLEdBQU8reUQsR0FBUWxuRCxFQUFNby9DLElBQUkxM0MsV0FBV2hWLEtBQVNBLElBRzFELE9BREFzTixFQUFNdE4sSUFBTUEsR0FDTCxDQUNULEdEVkUsQ0FBQyxTTnBCWSxTQUFpQnNOLEVBQU93K0QsR0FDckMsSUFBSTlyRSxFQUFNc04sRUFBTXROLElBQ2hCLE1BQU15QixFQUFNNkwsRUFBTXEwRCxPQUVsQixHQUFrQyxLQUE5QnIwRCxFQUFNby9DLElBQUkxM0MsV0FBV2hWLEdBQXNCLE9BQU8sRUFJdEQsR0FIQUEsSUFHSUEsR0FBT3lCLEVBQUssT0FBTyxFQUV2QixJQUFJbXhFLEVBQU10bEUsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixHQUUvQixHQUFZLEtBQVI0eUUsRUFBYyxDQU9oQixJQU5LOUcsR0FDSHgrRCxFQUFNbGQsS0FBSyxZQUFhLEtBQU0sR0FHaEM0UCxJQUVPQSxFQUFNeUIsSUFDWG14RSxFQUFNdGxFLEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsR0FDdEJ3MEQsR0FBUW9lLEtBQ2I1eUUsSUFJRixPQURBc04sRUFBTXROLElBQU1BLEdBQ0wsQ0FDVCxDQUVBLElBQUk2eUUsRUFBYXZsRSxFQUFNby9DLElBQUkxc0QsR0FFM0IsR0FBSTR5RSxHQUFPLE9BQVVBLEdBQU8sT0FBVTV5RSxFQUFNLEVBQUl5QixFQUFLLENBQ25ELE1BQU1xeEUsRUFBTXhsRSxFQUFNby9DLElBQUkxM0MsV0FBV2hWLEVBQU0sR0FFbkM4eUUsR0FBTyxPQUFVQSxHQUFPLFFBQzFCRCxHQUFjdmxFLEVBQU1vL0MsSUFBSTFzRCxFQUFNLEdBQzlCQSxJQUVKLENBRUEsTUFBTSt5RSxFQUFVLEtBQU9GLEVBRXZCLElBQUsvRyxFQUFRLENBQ1gsTUFBTXBKLEVBQVFwMUQsRUFBTWxkLEtBQUssZUFBZ0IsR0FBSSxHQUV6Q3dpRixFQUFNLEtBQXdCLElBQWpCM0IsR0FBUTJCLEdBQ3ZCbFEsRUFBTTVrRSxRQUFVKzBFLEVBRWhCblEsRUFBTTVrRSxRQUFVaTFFLEVBR2xCclEsRUFBTThDLE9BQVN1TixFQUNmclEsRUFBTUcsS0FBUyxRQUNqQixDQUdBLE9BREF2MUQsRUFBTXROLElBQU1BLEVBQU0sR0FDWCxDQUNULEdNcENFLENBQUMsWUU5QlksU0FBbUJzTixFQUFPdytELEdBQ3ZDLElBQUk5ckUsRUFBTXNOLEVBQU10TixJQUdoQixHQUFXLEtBRkFzTixFQUFNby9DLElBQUkxM0MsV0FBV2hWLEdBRU4sT0FBTyxFQUVqQyxNQUFNd0IsRUFBUXhCLEVBQ2RBLElBQ0EsTUFBTXlCLEVBQU02TCxFQUFNcTBELE9BR2xCLEtBQU8zaEUsRUFBTXlCLEdBQXFDLEtBQTlCNkwsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixJQUF3QkEsSUFFakUsTUFBTXloRSxFQUFTbjBELEVBQU1vL0MsSUFBSTl5RCxNQUFNNEgsRUFBT3hCLEdBQ2hDZ3pFLEVBQWV2UixFQUFPM3dFLE9BRTVCLEdBQUl3YyxFQUFNK2lFLG1CQUFxQi9pRSxFQUFNOGlFLFVBQVU0QyxJQUFpQixJQUFNeHhFLEVBR3BFLE9BRktzcUUsSUFBUXgrRCxFQUFNMGlFLFNBQVd2TyxHQUM5Qm4wRCxFQUFNdE4sS0FBT2d6RSxHQUNOLEVBR1QsSUFDSUMsRUFEQUMsRUFBV2x6RSxFQUlmLE1BQTRELEtBQXBEaXpFLEVBQWEzbEUsRUFBTW8vQyxJQUFJci9DLFFBQVEsSUFBSzZsRSxLQUFtQixDQUk3RCxJQUhBQSxFQUFXRCxFQUFhLEVBR2pCQyxFQUFXenhFLEdBQTBDLEtBQW5DNkwsRUFBTW8vQyxJQUFJMTNDLFdBQVdrK0QsSUFBNkJBLElBRTNFLE1BQU1DLEVBQWVELEVBQVdELEVBRWhDLEdBQUlFLElBQWlCSCxFQUFjLENBRWpDLElBQUtsSCxFQUFRLENBQ1gsTUFBTXBKLEVBQVFwMUQsRUFBTWxkLEtBQUssY0FBZSxPQUFRLEdBQ2hEc3lFLEVBQU04QyxPQUFTL0QsRUFDZmlCLEVBQU01a0UsUUFBVXdQLEVBQU1vL0MsSUFBSTl5RCxNQUFNb0csRUFBS2l6RSxHQUNsQ244RSxRQUFRLE1BQU8sS0FDZkEsUUFBUSxXQUFZLEtBQ3pCLENBRUEsT0FEQXdXLEVBQU10TixJQUFNa3pFLEdBQ0wsQ0FDVCxDQUdBNWxFLEVBQU04aUUsVUFBVStDLEdBQWdCRixDQUNsQyxDQU9BLE9BSkEzbEUsRUFBTStpRSxrQkFBbUIsRUFFcEJ2RSxJQUFReCtELEVBQU0waUUsU0FBV3ZPLEdBQzlCbjBELEVBQU10TixLQUFPZ3pFLEdBQ04sQ0FDVCxHRjFCRSxDQUFDLGdCQUFtQixHQUFnQm5GLFVBQ3BDLENBQUMsV0FBbUIsR0FBV0EsVUFDL0IsQ0FBQyxPRy9CWSxTQUFldmdFLEVBQU93K0QsR0FDbkMsSUFBSWw2RCxFQUFNMDlELEVBQU84RCxFQUFLQyxFQUNsQm42RSxFQUFPLEdBQ1B0QyxFQUFRLEdBQ1I0SyxFQUFROEwsRUFBTXROLElBQ2RzekUsR0FBaUIsRUFFckIsR0FBd0MsS0FBcENobUUsRUFBTW8vQyxJQUFJMTNDLFdBQVcxSCxFQUFNdE4sS0FBd0IsT0FBTyxFQUU5RCxNQUFNNGhFLEVBQVN0MEQsRUFBTXROLElBQ2Z5QixFQUFNNkwsRUFBTXEwRCxPQUNaNFIsRUFBYWptRSxFQUFNdE4sSUFBTSxFQUN6QitoRSxFQUFXejBELEVBQU11MEQsR0FBR3FOLFFBQVEzTixlQUFlajBELEVBQU9BLEVBQU10TixLQUFLLEdBR25FLEdBQUkraEUsRUFBVyxFQUFLLE9BQU8sRUFFM0IsSUFBSS9oRSxFQUFNK2hFLEVBQVcsRUFDckIsR0FBSS9oRSxFQUFNeUIsR0FBcUMsS0FBOUI2TCxFQUFNby9DLElBQUkxM0MsV0FBV2hWLEdBQXNCLENBVzFELElBTEFzekUsR0FBaUIsRUFJakJ0ekUsSUFDT0EsRUFBTXlCLElBQ1htUSxFQUFPdEUsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixHQUN2QncwRCxHQUFRNWlELElBQWtCLEtBQVRBLEdBRk41UixLQUlsQixHQUFJQSxHQUFPeUIsRUFBTyxPQUFPLEVBTXpCLEdBRkFELEVBQVF4QixFQUNSb3pFLEVBQU05bEUsRUFBTXUwRCxHQUFHcU4sUUFBUWxOLHFCQUFxQjEwRCxFQUFNby9DLElBQUsxc0QsRUFBS3NOLEVBQU1xMEQsUUFDOUR5UixFQUFJLy9ELEdBQUksQ0FXVixJQVZBbmEsRUFBT29VLEVBQU11MEQsR0FBRzZHLGNBQWMwSyxFQUFJeitFLEtBQzlCMlksRUFBTXUwRCxHQUFHOEcsYUFBYXp2RSxHQUN4QjhHLEVBQU1vekUsRUFBSXB6RSxJQUVWOUcsRUFBTyxHQUtUc0ksRUFBUXhCLEVBQ0RBLEVBQU15QixJQUNYbVEsRUFBT3RFLEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsR0FDdkJ3MEQsR0FBUTVpRCxJQUFrQixLQUFUQSxHQUZONVIsS0FRbEIsR0FEQW96RSxFQUFNOWxFLEVBQU11MEQsR0FBR3FOLFFBQVFqTixlQUFlMzBELEVBQU1vL0MsSUFBSzFzRCxFQUFLc04sRUFBTXEwRCxRQUN4RDNoRSxFQUFNeUIsR0FBT0QsSUFBVXhCLEdBQU9vekUsRUFBSS8vRCxHQU1wQyxJQUxBemMsRUFBUXc4RSxFQUFJeitFLElBQ1pxTCxFQUFNb3pFLEVBQUlwekUsSUFJSEEsRUFBTXlCLElBQ1htUSxFQUFPdEUsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixHQUN2QncwRCxHQUFRNWlELElBQWtCLEtBQVRBLEdBRk41UixLQUt0QixFQUVJQSxHQUFPeUIsR0FBcUMsS0FBOUI2TCxFQUFNby9DLElBQUkxM0MsV0FBV2hWLE1BRXJDc3pFLEdBQWlCLEdBRW5CdHpFLEdBQ0YsQ0FFQSxHQUFJc3pFLEVBQWdCLENBSWxCLFFBQW9DLElBQXpCaG1FLEVBQU1rMUQsSUFBSStNLFdBQThCLE9BQU8sRUFtQjFELEdBakJJdnZFLEVBQU15QixHQUFxQyxLQUE5QjZMLEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsSUFDcEN3QixFQUFReEIsRUFBTSxFQUNkQSxFQUFNc04sRUFBTXUwRCxHQUFHcU4sUUFBUTNOLGVBQWVqMEQsRUFBT3ROLEdBQ3pDQSxHQUFPLEVBQ1RzdkUsRUFBUWhpRSxFQUFNby9DLElBQUk5eUQsTUFBTTRILEVBQU94QixLQUUvQkEsRUFBTStoRSxFQUFXLEdBR25CL2hFLEVBQU0raEUsRUFBVyxFQUtkdU4sSUFBU0EsRUFBUWhpRSxFQUFNby9DLElBQUk5eUQsTUFBTTI1RSxFQUFZeFIsSUFFbERzUixFQUFNL2xFLEVBQU1rMUQsSUFBSStNLFdBQVduTyxHQUFtQmtPLEtBQ3pDK0QsRUFFSCxPQURBL2xFLEVBQU10TixJQUFNNGhFLEdBQ0wsRUFFVDFvRSxFQUFPbTZFLEVBQUluNkUsS0FDWHRDLEVBQVF5OEUsRUFBSXo4RSxLQUNkLENBTUEsSUFBS2sxRSxFQUFRLENBQ1h4K0QsRUFBTXROLElBQU11ekUsRUFDWmptRSxFQUFNcTBELE9BQVNJLEVBRWYsTUFDTTM5RCxFQUFRLENBQUMsQ0FBQyxPQUFRbEwsSUFEUm9VLEVBQU1sZCxLQUFLLFlBQWEsSUFBSyxHQUVyQ2dVLE1BQVNBLEVBQ2J4TixHQUNGd04sRUFBTWhVLEtBQUssQ0FBQyxRQUFTd0csSUFHdkIwVyxFQUFNZ2pFLFlBQ05oakUsRUFBTXUwRCxHQUFHcHlELE9BQU9vK0QsU0FBU3ZnRSxHQUN6QkEsRUFBTWdqRSxZQUVOaGpFLEVBQU1sZCxLQUFLLGFBQWMsS0FBTSxFQUNqQyxDQUlBLE9BRkFrZCxFQUFNdE4sSUFBTUEsRUFDWnNOLEVBQU1xMEQsT0FBU2xnRSxHQUNSLENBQ1QsR0h0R0UsQ0FBQyxRSWhDWSxTQUFnQjZMLEVBQU93K0QsR0FDcEMsSUFBSWw2RCxFQUFNOVQsRUFBU3d4RSxFQUFPdHZFLEVBQUtxekUsRUFBS0QsRUFBS3g4RSxFQUFPNEssRUFDNUN0SSxFQUFPLEdBQ1gsTUFBTTBvRSxFQUFTdDBELEVBQU10TixJQUNmeUIsRUFBTTZMLEVBQU1xMEQsT0FFbEIsR0FBd0MsS0FBcENyMEQsRUFBTW8vQyxJQUFJMTNDLFdBQVcxSCxFQUFNdE4sS0FBd0IsT0FBTyxFQUM5RCxHQUE0QyxLQUF4Q3NOLEVBQU1vL0MsSUFBSTEzQyxXQUFXMUgsRUFBTXROLElBQU0sR0FBc0IsT0FBTyxFQUVsRSxNQUFNdXpFLEVBQWFqbUUsRUFBTXROLElBQU0sRUFDekIraEUsRUFBV3owRCxFQUFNdTBELEdBQUdxTixRQUFRM04sZUFBZWowRCxFQUFPQSxFQUFNdE4sSUFBTSxHQUFHLEdBR3ZFLEdBQUkraEUsRUFBVyxFQUFLLE9BQU8sRUFHM0IsR0FEQS9oRSxFQUFNK2hFLEVBQVcsRUFDYi9oRSxFQUFNeUIsR0FBcUMsS0FBOUI2TCxFQUFNby9DLElBQUkxM0MsV0FBV2hWLEdBQXNCLENBUTFELElBREFBLElBQ09BLEVBQU15QixJQUNYbVEsRUFBT3RFLEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsR0FDdkJ3MEQsR0FBUTVpRCxJQUFrQixLQUFUQSxHQUZONVIsS0FJbEIsR0FBSUEsR0FBT3lCLEVBQU8sT0FBTyxFQWtCekIsSUFkQUQsRUFBUXhCLEVBQ1JvekUsRUFBTTlsRSxFQUFNdTBELEdBQUdxTixRQUFRbE4scUJBQXFCMTBELEVBQU1vL0MsSUFBSzFzRCxFQUFLc04sRUFBTXEwRCxRQUM5RHlSLEVBQUkvL0QsS0FDTm5hLEVBQU9vVSxFQUFNdTBELEdBQUc2RyxjQUFjMEssRUFBSXorRSxLQUM5QjJZLEVBQU11MEQsR0FBRzhHLGFBQWF6dkUsR0FDeEI4RyxFQUFNb3pFLEVBQUlwekUsSUFFVjlHLEVBQU8sSUFNWHNJLEVBQVF4QixFQUNEQSxFQUFNeUIsSUFDWG1RLEVBQU90RSxFQUFNby9DLElBQUkxM0MsV0FBV2hWLEdBQ3ZCdzBELEdBQVE1aUQsSUFBa0IsS0FBVEEsR0FGTjVSLEtBUWxCLEdBREFvekUsRUFBTTlsRSxFQUFNdTBELEdBQUdxTixRQUFRak4sZUFBZTMwRCxFQUFNby9DLElBQUsxc0QsRUFBS3NOLEVBQU1xMEQsUUFDeEQzaEUsRUFBTXlCLEdBQU9ELElBQVV4QixHQUFPb3pFLEVBQUkvL0QsR0FNcEMsSUFMQXpjLEVBQVF3OEUsRUFBSXorRSxJQUNacUwsRUFBTW96RSxFQUFJcHpFLElBSUhBLEVBQU15QixJQUNYbVEsRUFBT3RFLEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsR0FDdkJ3MEQsR0FBUTVpRCxJQUFrQixLQUFUQSxHQUZONVIsVUFLbEJwSixFQUFRLEdBR1YsR0FBSW9KLEdBQU95QixHQUFxQyxLQUE5QjZMLEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsR0FFckMsT0FEQXNOLEVBQU10TixJQUFNNGhFLEdBQ0wsRUFFVDVoRSxHQUNGLEtBQU8sQ0FJTCxRQUFvQyxJQUF6QnNOLEVBQU1rMUQsSUFBSStNLFdBQThCLE9BQU8sRUFtQjFELEdBakJJdnZFLEVBQU15QixHQUFxQyxLQUE5QjZMLEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsSUFDcEN3QixFQUFReEIsRUFBTSxFQUNkQSxFQUFNc04sRUFBTXUwRCxHQUFHcU4sUUFBUTNOLGVBQWVqMEQsRUFBT3ROLEdBQ3pDQSxHQUFPLEVBQ1RzdkUsRUFBUWhpRSxFQUFNby9DLElBQUk5eUQsTUFBTTRILEVBQU94QixLQUUvQkEsRUFBTStoRSxFQUFXLEdBR25CL2hFLEVBQU0raEUsRUFBVyxFQUtkdU4sSUFBU0EsRUFBUWhpRSxFQUFNby9DLElBQUk5eUQsTUFBTTI1RSxFQUFZeFIsSUFFbERzUixFQUFNL2xFLEVBQU1rMUQsSUFBSStNLFdBQVduTyxHQUFtQmtPLEtBQ3pDK0QsRUFFSCxPQURBL2xFLEVBQU10TixJQUFNNGhFLEdBQ0wsRUFFVDFvRSxFQUFPbTZFLEVBQUluNkUsS0FDWHRDLEVBQVF5OEUsRUFBSXo4RSxLQUNkLENBTUEsSUFBS2sxRSxFQUFRLENBQ1hodUUsRUFBVXdQLEVBQU1vL0MsSUFBSTl5RCxNQUFNMjVFLEVBQVl4UixHQUV0QyxNQUFNcnlELEVBQVMsR0FDZnBDLEVBQU11MEQsR0FBR3B5RCxPQUFPM2EsTUFDZGdKLEVBQ0F3UCxFQUFNdTBELEdBQ052MEQsRUFBTWsxRCxJQUNOOXlELEdBR0YsTUFBTWd6RCxFQUFRcDFELEVBQU1sZCxLQUFLLFFBQVMsTUFBTyxHQUNuQ2dVLEVBQVEsQ0FBQyxDQUFDLE1BQU9sTCxHQUFPLENBQUMsTUFBTyxLQUN0Q3dwRSxFQUFNdCtELE1BQVFBLEVBQ2RzK0QsRUFBTTlrRSxTQUFXOFIsRUFDakJnekQsRUFBTTVrRSxRQUFVQSxFQUVabEgsR0FDRndOLEVBQU1oVSxLQUFLLENBQUMsUUFBU3dHLEdBRXpCLENBSUEsT0FGQTBXLEVBQU10TixJQUFNQSxFQUNac04sRUFBTXEwRCxPQUFTbGdFLEdBQ1IsQ0FDVCxHSnBHRSxDQUFDLFdIOUJZLFNBQW1CNkwsRUFBT3crRCxHQUN2QyxJQUFJOXJFLEVBQU1zTixFQUFNdE4sSUFFaEIsR0FBa0MsS0FBOUJzTixFQUFNby9DLElBQUkxM0MsV0FBV2hWLEdBQXdCLE9BQU8sRUFFeEQsTUFBTXdCLEVBQVE4TCxFQUFNdE4sSUFDZHlCLEVBQU02TCxFQUFNcTBELE9BRWxCLE9BQVMsQ0FDUCxLQUFNM2hFLEdBQU95QixFQUFLLE9BQU8sRUFFekIsTUFBTWlsQyxFQUFLcDVCLEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsR0FFaEMsR0FBVyxLQUFQMG1DLEVBQXFCLE9BQU8sRUFDaEMsR0FBVyxLQUFQQSxFQUFxQixLQUMzQixDQUVBLE1BQU02ckIsRUFBTWpsRCxFQUFNby9DLElBQUk5eUQsTUFBTTRILEVBQVEsRUFBR3hCLEdBRXZDLEdBQUl5eEUsR0FBWXZoRSxLQUFLcWlELEdBQU0sQ0FDekIsTUFBTWtXLEVBQVVuN0QsRUFBTXUwRCxHQUFHNkcsY0FBY25XLEdBQ3ZDLElBQUtqbEQsRUFBTXUwRCxHQUFHOEcsYUFBYUYsR0FBWSxPQUFPLEVBRTlDLElBQUtxRCxFQUFRLENBQ1gsTUFBTWhELEVBQVl4N0QsRUFBTWxkLEtBQUssWUFBYSxJQUFLLEdBQy9DMDRFLEVBQVExa0UsTUFBVSxDQUFDLENBQUMsT0FBUXFrRSxJQUM1QkssRUFBUXRELE9BQVUsV0FDbEJzRCxFQUFRakcsS0FBVSxPQUVBdjFELEVBQU1sZCxLQUFLLE9BQVEsR0FBSSxHQUNqQzBOLFFBQVV3UCxFQUFNdTBELEdBQUdnSCxrQkFBa0J0VyxHQUU3QyxNQUFNeVcsRUFBWTE3RCxFQUFNbGQsS0FBSyxhQUFjLEtBQU0sR0FDakQ0NEUsRUFBUXhELE9BQVUsV0FDbEJ3RCxFQUFRbkcsS0FBVSxNQUNwQixDQUdBLE9BREF2MUQsRUFBTXROLEtBQU91eUQsRUFBSXpoRSxPQUFTLEdBQ25CLENBQ1QsQ0FFQSxHQUFJMGdGLEdBQVN0aEUsS0FBS3FpRCxHQUFNLENBQ3RCLE1BQU1rVyxFQUFVbjdELEVBQU11MEQsR0FBRzZHLGNBQWMsVUFBWW5XLEdBQ25ELElBQUtqbEQsRUFBTXUwRCxHQUFHOEcsYUFBYUYsR0FBWSxPQUFPLEVBRTlDLElBQUtxRCxFQUFRLENBQ1gsTUFBTWhELEVBQVl4N0QsRUFBTWxkLEtBQUssWUFBYSxJQUFLLEdBQy9DMDRFLEVBQVExa0UsTUFBVSxDQUFDLENBQUMsT0FBUXFrRSxJQUM1QkssRUFBUXRELE9BQVUsV0FDbEJzRCxFQUFRakcsS0FBVSxPQUVBdjFELEVBQU1sZCxLQUFLLE9BQVEsR0FBSSxHQUNqQzBOLFFBQVV3UCxFQUFNdTBELEdBQUdnSCxrQkFBa0J0VyxHQUU3QyxNQUFNeVcsRUFBWTE3RCxFQUFNbGQsS0FBSyxhQUFjLEtBQU0sR0FDakQ0NEUsRUFBUXhELE9BQVUsV0FDbEJ3RCxFQUFRbkcsS0FBVSxNQUNwQixDQUdBLE9BREF2MUQsRUFBTXROLEtBQU91eUQsRUFBSXpoRSxPQUFTLEdBQ25CLENBQ1QsQ0FFQSxPQUFPLENBQ1QsR0dqQ0UsQ0FBQyxjS3JCWSxTQUFzQndjLEVBQU93K0QsR0FDMUMsSUFBS3grRCxFQUFNdTBELEdBQUd0eEUsUUFBUW03QyxLQUFRLE9BQU8sRUFHckMsTUFBTWpxQyxFQUFNNkwsRUFBTXEwRCxPQUNaM2hFLEVBQU1zTixFQUFNdE4sSUFDbEIsR0FBa0MsS0FBOUJzTixFQUFNby9DLElBQUkxM0MsV0FBV2hWLElBQ3JCQSxFQUFNLEdBQUt5QixFQUNiLE9BQU8sRUFJVCxNQUFNaWxDLEVBQUtwNUIsRUFBTW8vQyxJQUFJMTNDLFdBQVdoVixFQUFNLEdBQ3RDLEdBQVcsS0FBUDBtQyxHQUNPLEtBQVBBLEdBQ08sS0FBUEEsSUFyQk4sU0FBbUJBLEdBRWpCLE1BQU04c0MsRUFBVSxHQUFMOXNDLEVBQ1gsT0FBUThzQyxHQUFNLElBQWlCQSxHQUFNLEdBQ3ZDLENBa0JPQyxDQUFTL3NDLEdBQ1osT0FBTyxFQUdULE1BQU12N0IsRUFBUW1DLEVBQU1vL0MsSUFBSTl5RCxNQUFNb0csR0FBS21MLE1BQU11Z0UsSUFDekMsSUFBS3ZnRSxFQUFTLE9BQU8sRUFFckIsSUFBSzJnRSxFQUFRLENBQ1gsTUFBTXBKLEVBQVFwMUQsRUFBTWxkLEtBQUssY0FBZSxHQUFJLEdBQzVDc3lFLEVBQU01a0UsUUFBVXFOLEVBQU0sR0F0Q0x4VyxFQXdDRit0RSxFQUFNNWtFLFFBdkNoQixZQUFZb1MsS0FBS3ZiLElBdUNVMlksRUFBTWdqRSxZQXJDMUMsU0FBc0IzN0UsR0FDcEIsTUFBTyxhQUFhdWIsS0FBS3ZiLEVBQzNCLENBb0NRLENBQVkrdEUsRUFBTTVrRSxVQUFVd1AsRUFBTWdqRSxXQUN4QyxDQTFDRixJQUFxQjM3RSxFQTRDbkIsT0FEQTJZLEVBQU10TixLQUFPbUwsRUFBTSxHQUFHcmEsUUFDZixDQUNULEdMVkUsQ0FBQyxTRi9CWSxTQUFpQndjLEVBQU93K0QsR0FDckMsTUFBTTlyRSxFQUFNc04sRUFBTXROLElBQ1p5QixFQUFNNkwsRUFBTXEwRCxPQUVsQixHQUFrQyxLQUE5QnIwRCxFQUFNby9DLElBQUkxM0MsV0FBV2hWLEdBQXNCLE9BQU8sRUFFdEQsR0FBSUEsRUFBTSxHQUFLeUIsRUFBSyxPQUFPLEVBSTNCLEdBQVcsS0FGQTZMLEVBQU1vL0MsSUFBSTEzQyxXQUFXaFYsRUFBTSxHQUViLENBQ3ZCLE1BQU1tTCxFQUFRbUMsRUFBTW8vQyxJQUFJOXlELE1BQU1vRyxHQUFLbUwsTUFBTXVtRSxJQUN6QyxHQUFJdm1FLEVBQU8sQ0FDVCxJQUFLMmdFLEVBQVEsQ0FDWCxNQUFNbDZELEVBQXFDLE1BQTlCekcsRUFBTSxHQUFHLEdBQUdwYSxjQUF3QmlyRSxTQUFTN3dELEVBQU0sR0FBR3ZSLE1BQU0sR0FBSSxJQUFNb2lFLFNBQVM3d0QsRUFBTSxHQUFJLElBRWhHdTNELEVBQVVwMUQsRUFBTWxkLEtBQUssZUFBZ0IsR0FBSSxHQUMvQ3N5RSxFQUFNNWtFLFFBQVVnaUUsR0FBa0JsdUQsR0FBUSxHQUFjQSxHQUFRLEdBQWMsT0FDOUU4d0QsRUFBTThDLE9BQVVyNkQsRUFBTSxHQUN0QnUzRCxFQUFNRyxLQUFVLFFBQ2xCLENBRUEsT0FEQXYxRCxFQUFNdE4sS0FBT21MLEVBQU0sR0FBR3JhLFFBQ2YsQ0FDVCxDQUNGLEtBQU8sQ0FDTCxNQUFNcWEsRUFBUW1DLEVBQU1vL0MsSUFBSTl5RCxNQUFNb0csR0FBS21MLE1BQU13bUUsSUFDekMsR0FBSXhtRSxFQUFPLENBQ1QsTUFBTXExRCxFQUFVLEdBQVdyMUQsRUFBTSxJQUNqQyxHQUFJcTFELElBQVlyMUQsRUFBTSxHQUFJLENBQ3hCLElBQUsyZ0UsRUFBUSxDQUNYLE1BQU1wSixFQUFVcDFELEVBQU1sZCxLQUFLLGVBQWdCLEdBQUksR0FDL0NzeUUsRUFBTTVrRSxRQUFVMGlFLEVBQ2hCa0MsRUFBTThDLE9BQVVyNkQsRUFBTSxHQUN0QnUzRCxFQUFNRyxLQUFVLFFBQ2xCLENBRUEsT0FEQXYxRCxFQUFNdE4sS0FBT21MLEVBQU0sR0FBR3JhLFFBQ2YsQ0FDVCxDQUNGLENBQ0YsQ0FFQSxPQUFPLENBQ1QsSUVITTRpRixHQUFVLENBQ2QsQ0FBQyxnQkRnRVksU0FBcUJwbUUsR0FDbEMsTUFBTXlpRSxFQUFjemlFLEVBQU15aUUsWUFDcEJ0dUUsRUFBTTZMLEVBQU15aUUsWUFBWWovRSxPQUU5QjhnRixHQUFrQnRrRSxFQUFNNGlFLFlBRXhCLElBQUssSUFBSS9HLEVBQU8sRUFBR0EsRUFBTzFuRSxFQUFLMG5FLElBQ3pCNEcsRUFBWTVHLElBQVM0RyxFQUFZNUcsR0FBTStHLFlBQ3pDMEIsR0FBa0I3QixFQUFZNUcsR0FBTStHLFdBRzFDLEdDMUVFLENBQUMsZ0JBQW1CLEdBQWdCZ0IsYUFDcEMsQ0FBQyxXQUFtQixHQUFXQSxhQUcvQixDQUFDLGlCTTVDWSxTQUF5QjVqRSxHQUN0QyxJQUFJNjdELEVBQU03bUUsRUFDTnFrQixFQUFRLEVBQ1osTUFBTWpYLEVBQVNwQyxFQUFNb0MsT0FDZmpPLEVBQU02TCxFQUFNb0MsT0FBTzVlLE9BRXpCLElBQUtxNEUsRUFBTzdtRSxFQUFPLEVBQUc2bUUsRUFBTzFuRSxFQUFLMG5FLElBRzVCejVELEVBQU95NUQsR0FBTXBGLFFBQVUsR0FBR3A5QyxJQUM5QmpYLEVBQU95NUQsR0FBTXhpRCxNQUFRQSxFQUNqQmpYLEVBQU95NUQsR0FBTXBGLFFBQVUsR0FBR3A5QyxJQUVKLFNBQXRCalgsRUFBT3k1RCxHQUFNcDBFLE1BQ2JvMEUsRUFBTyxFQUFJMW5FLEdBQ2UsU0FBMUJpTyxFQUFPeTVELEVBQU8sR0FBR3AwRSxLQUVuQjJhLEVBQU95NUQsRUFBTyxHQUFHcnJFLFFBQVU0UixFQUFPeTVELEdBQU1yckUsUUFBVTRSLEVBQU95NUQsRUFBTyxHQUFHcnJFLFNBRS9EcXJFLElBQVM3bUUsSUFBUW9OLEVBQU9wTixHQUFRb04sRUFBT3k1RCxJQUUzQzdtRSxLQUlBNm1FLElBQVM3bUUsSUFDWG9OLEVBQU81ZSxPQUFTd1IsRUFFcEIsSU5zQkEsU0FBU3F4RSxLQU1QN2hGLEtBQUt1M0UsTUFBUSxJQUFJLEdBRWpCLElBQUssSUFBSWw1RSxFQUFJLEVBQUdBLEVBQUksR0FBT1csT0FBUVgsSUFDakMyQixLQUFLdTNFLE1BQU1qNUUsS0FBSyxHQUFPRCxHQUFHLEdBQUksR0FBT0EsR0FBRyxJQVMxQzJCLEtBQUs4aEYsT0FBUyxJQUFJLEdBRWxCLElBQUssSUFBSXpqRixFQUFJLEVBQUdBLEVBQUl1akYsR0FBUTVpRixPQUFRWCxJQUNsQzJCLEtBQUs4aEYsT0FBT3hqRixLQUFLc2pGLEdBQVF2akYsR0FBRyxHQUFJdWpGLEdBQVF2akYsR0FBRyxHQUUvQyxDQUtBd2pGLEdBQWF6a0YsVUFBVTR5RSxVQUFZLFNBQVV4MEQsR0FDM0MsTUFBTXROLEVBQU1zTixFQUFNdE4sSUFDWnVULEVBQVF6aEIsS0FBS3UzRSxNQUFNaEUsU0FBUyxJQUM1Qi9zQyxFQUFNL2tCLEVBQU16aUIsT0FDWjQrRSxFQUFhcGlFLEVBQU11MEQsR0FBR3R4RSxRQUFRbS9FLFdBQzlCN2xFLEVBQVF5RCxFQUFNekQsTUFFcEIsUUFBMEIsSUFBZkEsRUFBTTdKLEdBRWYsWUFEQXNOLEVBQU10TixJQUFNNkosRUFBTTdKLElBSXBCLElBQUlxVCxHQUFLLEVBRVQsR0FBSS9GLEVBQU1xWixNQUFRK29ELEdBQ2hCLElBQUssSUFBSXYvRSxFQUFJLEVBQUdBLEVBQUltb0MsRUFBS25vQyxJQVN2QixHQUpBbWQsRUFBTXFaLFFBQ050VCxFQUFLRSxFQUFNcGpCLEdBQUdtZCxHQUFPLEdBQ3JCQSxFQUFNcVosUUFFRnRULEVBQUksQ0FDTixHQUFJclQsR0FBT3NOLEVBQU10TixJQUFPLE1BQU0sSUFBSWhRLE1BQU0sMENBQ3hDLEtBQ0YsT0FjRnNkLEVBQU10TixJQUFNc04sRUFBTXEwRCxPQUdmdHVELEdBQU0vRixFQUFNdE4sTUFDakI2SixFQUFNN0osR0FBT3NOLEVBQU10TixHQUNyQixFQUlBMnpFLEdBQWF6a0YsVUFBVTIrRSxTQUFXLFNBQVV2Z0UsR0FDMUMsTUFBTWlHLEVBQVF6aEIsS0FBS3UzRSxNQUFNaEUsU0FBUyxJQUM1Qi9zQyxFQUFNL2tCLEVBQU16aUIsT0FDWnlRLEVBQU0rTCxFQUFNcTBELE9BQ1orTixFQUFhcGlFLEVBQU11MEQsR0FBR3R4RSxRQUFRbS9FLFdBRXBDLEtBQU9waUUsRUFBTXROLElBQU11QixHQUFLLENBT3RCLE1BQU1tZ0UsRUFBVXAwRCxFQUFNdE4sSUFDdEIsSUFBSXFULEdBQUssRUFFVCxHQUFJL0YsRUFBTXFaLE1BQVErb0QsRUFDaEIsSUFBSyxJQUFJdi9FLEVBQUksRUFBR0EsRUFBSW1vQyxFQUFLbm9DLElBRXZCLEdBREFrakIsRUFBS0UsRUFBTXBqQixHQUFHbWQsR0FBTyxHQUNqQitGLEVBQUksQ0FDTixHQUFJcXVELEdBQVdwMEQsRUFBTXROLElBQU8sTUFBTSxJQUFJaFEsTUFBTSwwQ0FDNUMsS0FDRixDQUlKLEdBQUlxakIsR0FDRixHQUFJL0YsRUFBTXROLEtBQU91QixFQUFPLFdBSTFCK0wsRUFBTTBpRSxTQUFXMWlFLEVBQU1vL0MsSUFBSXAvQyxFQUFNdE4sTUFDbkMsQ0FFSXNOLEVBQU0waUUsU0FDUjFpRSxFQUFNaWpFLGFBRVYsRUFPQW9ELEdBQWF6a0YsVUFBVTRGLE1BQVEsU0FBVUgsRUFBS2t0RSxFQUFJVyxFQUFLcU4sR0FDckQsTUFBTXZpRSxFQUFRLElBQUl4YixLQUFLeTNFLE1BQU01MEUsRUFBS2t0RSxFQUFJVyxFQUFLcU4sR0FFM0MvOUUsS0FBSys3RSxTQUFTdmdFLEdBRWQsTUFBTWlHLEVBQVF6aEIsS0FBSzhoRixPQUFPdk8sU0FBUyxJQUM3Qi9zQyxFQUFNL2tCLEVBQU16aUIsT0FFbEIsSUFBSyxJQUFJWCxFQUFJLEVBQUdBLEVBQUltb0MsRUFBS25vQyxJQUN2Qm9qQixFQUFNcGpCLEdBQUdtZCxFQUViLEVBRUFxbUUsR0FBYXprRixVQUFVcTZFLE1BQVEsR0FFL0IsWU81TEEsU0FBUyxHQUFRdjZFLEdBV2YsT0FWZ0J5SyxNQUFNdkssVUFBVTBLLE1BQU14SyxLQUFLeUIsVUFBVyxHQUU5QzZMLFNBQVEsU0FBVWlqRSxHQUNuQkEsR0FFTC93RSxPQUFPNGlDLEtBQUttdUMsR0FBUWpqRSxTQUFRLFNBQVVoTyxHQUNwQ00sRUFBSU4sR0FBT2l4RSxFQUFPanhFLEVBQ3BCLEdBQ0YsSUFFT00sQ0FDVCxDQUVBLFNBQVMsR0FBUUEsR0FBTyxPQUFPSixPQUFPTSxVQUFVbUIsU0FBU2pCLEtBQUtKLEVBQUssQ0FJbkUsU0FBUzZrRixHQUFZN2tGLEdBQU8sTUFBdUIsc0JBQWhCLEdBQU9BLEVBQTZCLENBRXZFLFNBQVMsR0FBVTJGLEdBQU8sT0FBT0EsRUFBSW1DLFFBQVEsdUJBQXdCLE9BQVEsQ0FJN0UsTUFBTWc5RSxHQUFpQixDQUNyQkMsV0FBVyxFQUNYQyxZQUFZLEVBQ1pDLFNBQVMsR0FVWCxNQUFNQyxHQUFpQixDQUNyQixRQUFTLENBQ1AvaUUsU0FBVSxTQUFVNVEsRUFBTVAsRUFBSzNSLEdBQzdCLE1BQU04bEYsRUFBTzV6RSxFQUFLM0csTUFBTW9HLEdBUXhCLE9BTkszUixFQUFLK2xGLEdBQUduVyxPQUVYNXZFLEVBQUsrbEYsR0FBR25XLEtBQU8sSUFBSXZQLE9BQ2pCLFVBQVlyZ0UsRUFBSytsRixHQUFHQyxTQUFXaG1GLEVBQUsrbEYsR0FBR0UscUJBQXVCam1GLEVBQUsrbEYsR0FBR0csU0FBVSxNQUdoRmxtRixFQUFLK2xGLEdBQUduVyxLQUFLL3RELEtBQUtpa0UsR0FDYkEsRUFBS2hwRSxNQUFNOWMsRUFBSytsRixHQUFHblcsTUFBTSxHQUFHbnRFLE9BRTlCLENBQ1QsR0FFRixTQUFVLFFBQ1YsT0FBUSxRQUNSLEtBQU0sQ0FDSnFnQixTQUFVLFNBQVU1USxFQUFNUCxFQUFLM1IsR0FDN0IsTUFBTThsRixFQUFPNXpFLEVBQUszRyxNQUFNb0csR0FrQnhCLE9BaEJLM1IsRUFBSytsRixHQUFHSSxVQUVYbm1GLEVBQUsrbEYsR0FBR0ksUUFBVSxJQUFJOWxCLE9BQ3BCLElBQ0FyZ0UsRUFBSytsRixHQUFHQyxTQUdSLHNCQUF3QmhtRixFQUFLK2xGLEdBQUdLLFdBQWEsU0FBV3BtRixFQUFLK2xGLEdBQUdNLGdCQUFrQixJQUNsRnJtRixFQUFLK2xGLEdBQUdPLFNBQ1J0bUYsRUFBSytsRixHQUFHUSxvQkFDUnZtRixFQUFLK2xGLEdBQUdHLFNBRVIsTUFJQWxtRixFQUFLK2xGLEdBQUdJLFFBQVF0a0UsS0FBS2lrRSxHQUVuQm4wRSxHQUFPLEdBQXVCLE1BQWxCTyxFQUFLUCxFQUFNLElBQ3ZCQSxHQUFPLEdBQXVCLE1BQWxCTyxFQUFLUCxFQUFNLEdBRHFCLEVBRXpDbTBFLEVBQUtocEUsTUFBTTljLEVBQUsrbEYsR0FBR0ksU0FBUyxHQUFHMWpGLE9BRWpDLENBQ1QsR0FFRixVQUFXLENBQ1RxZ0IsU0FBVSxTQUFVNVEsRUFBTVAsRUFBSzNSLEdBQzdCLE1BQU04bEYsRUFBTzV6RSxFQUFLM0csTUFBTW9HLEdBT3hCLE9BTEszUixFQUFLK2xGLEdBQUdTLFNBQ1h4bUYsRUFBSytsRixHQUFHUyxPQUFTLElBQUlubUIsT0FDbkIsSUFBTXJnRSxFQUFLK2xGLEdBQUdVLGVBQWlCLElBQU16bUYsRUFBSytsRixHQUFHVyxnQkFBaUIsTUFHOUQxbUYsRUFBSytsRixHQUFHUyxPQUFPM2tFLEtBQUtpa0UsR0FDZkEsRUFBS2hwRSxNQUFNOWMsRUFBSytsRixHQUFHUyxRQUFRLEdBQUcvakYsT0FFaEMsQ0FDVCxJQVNFa2tGLEdBQWUsOEVBQThFcmxFLE1BQU0sS0EwQnpHLFNBQVNqQyxHQUFTcmYsR0FFaEIsTUFBTStsRixFQUFLL2xGLEVBQUsrbEYsR0M3SUgsU0FBVWEsR0FDdkIsTUFBTWIsRUFBSyxDQUFDLEVBQ1phLEVBQU9BLEdBQVEsQ0FBQyxFQUVoQmIsRUFBR2MsUUFBVSxHQUFJdlYsT0FDakJ5VSxFQUFHZSxPQUFTLEdBQUd4VixPQUNmeVUsRUFBR2dCLE1BQVEsR0FBRXpWLE9BQ2J5VSxFQUFHaUIsTUFBUSxHQUFFMVYsT0FHYnlVLEVBQUdrQixTQUFXLENBQUNsQixFQUFHZ0IsTUFBT2hCLEVBQUdpQixNQUFPakIsRUFBR2UsUUFBUXp4RSxLQUFLLEtBR25EMHdFLEVBQUdtQixRQUFVLENBQUNuQixFQUFHZ0IsTUFBT2hCLEVBQUdlLFFBQVF6eEUsS0FBSyxLQUl4QyxNQUFNOHhFLEVBQWtCLFFBd0t4QixPQW5LQXBCLEVBQUdxQixrQkFBb0IsZUFBbUNyQixFQUFHa0IsU0FBVyxJQUFNbEIsRUFBR2MsUUFBVSxJQUkzRmQsRUFBR3NCLFFBRUQseUZBR0Z0QixFQUFHQyxTQUFXLFlBQWNELEVBQUdtQixRQUFVLHVCQUV6Q25CLEVBQUdPLFNBRUQsa0ZBRUZQLEVBQUdRLG9CQUVELGNBQWtDUixFQUFHa0IsU0FBckMsUUFDU0wsRUFBSyxPQUFTLFdBQWEsTUFBUSx1QkFBeUJiLEVBQUdrQixTQUFXLEtBRXJGbEIsRUFBR0csU0FFRCxpQkFHY0gsRUFBR21CLFFBQVUsSUFBTUMsRUFIakMscUNBSW9CcEIsRUFBR21CLFFBSnZCLHdCQUtvQm5CLEVBQUdtQixRQUx2Qix3QkFNb0JuQixFQUFHbUIsUUFOdkIsd0JBT29CbkIsRUFBR21CLFFBUHZCLHlCQVFvQm5CLEVBQUdtQixRQVJ2QixxQkFXaUJuQixFQUFHcUIsa0JBWHBCLHFDQXVCaUJyQixFQUFHbUIsUUFBVSxZQUN2Qk4sRUFBSyxPQUNGLDZCQUNBLFNBR0osT0FBU2IsRUFBR21CLFFBN0JsQixXQWdDZW5CLEVBQUdtQixRQWhDbEIsY0FtQ2tCbkIsRUFBR21CLFFBbkNyQixpQkFxQ2lCbkIsRUFBR21CLFFBckNwQixrQkE0Q0ZuQixFQUFHVSxlQUVELGlFQUVGVixFQUFHdUIsT0FFRCx3QkFLRnZCLEVBQUdNLGdCQUdELE1BQ0VOLEVBQUd1QixPQUNILElBQ0F2QixFQUFHcUIsa0JBSEwsVUFNRnJCLEVBQUdLLFdBRUQsTUFDRUwsRUFBR3VCLE9BREwsT0FHVXZCLEVBQUdxQixrQkFIYixRQUtVckIsRUFBR3FCLGtCQUFvQixRQUFVckIsRUFBR3FCLGtCQUFvQixVQUFZckIsRUFBR3FCLGtCQUxqRixLQVFGckIsRUFBR3dCLFNBRUQsZUFJZ0J4QixFQUFHSyxXQUFhLFNBQVdMLEVBQUdLLFdBSjlDLEtBT0ZMLEVBQUd5QixlQUVELE1BQ0V6QixFQUFHc0IsUUFETCxhQUdnQnRCLEVBQUdLLFdBSG5CLHFCQU1GTCxFQUFHMEIscUJBRUQsWUFBYzFCLEVBQUdLLFdBQWEsb0JBRWhDTCxFQUFHVyxnQkFFRFgsRUFBR3dCLFNBQVd4QixFQUFHUSxvQkFFbkJSLEVBQUcyQixzQkFFRDNCLEVBQUd5QixlQUFpQnpCLEVBQUdRLG9CQUV6QlIsRUFBR0UscUJBRURGLEVBQUd3QixTQUFXeEIsRUFBR08sU0FBV1AsRUFBR1Esb0JBRWpDUixFQUFHNEIsMkJBRUQ1QixFQUFHeUIsZUFBaUJ6QixFQUFHTyxTQUFXUCxFQUFHUSxvQkFFdkNSLEVBQUc2QixpQ0FFRDdCLEVBQUcwQixxQkFBdUIxQixFQUFHTyxTQUFXUCxFQUFHUSxvQkFPN0NSLEVBQUc4QixvQkFFRCxzREFBd0Q5QixFQUFHa0IsU0FBVyxTQUV4RWxCLEVBQUcrQixnQkFFQyxrQkFBc0MvQixFQUFHbUIsUUFBekMsS0FDTW5CLEVBQUdVLGVBQWlCLElBQU1WLEVBQUcyQixzQkFBd0IsSUFFL0QzQixFQUFHZ0MsZUFHQyxtQ0FBMENoQyxFQUFHa0IsU0FBN0MscUJBQzBCbEIsRUFBRzRCLDJCQUE2QjVCLEVBQUdHLFNBQVcsSUFFNUVILEVBQUdpQyxxQkFHQyxtQ0FBMENqQyxFQUFHa0IsU0FBN0MscUJBQzBCbEIsRUFBRzZCLGlDQUFtQzdCLEVBQUdHLFNBQVcsSUFFM0VILENBQ1QsQ0Q3Q3VCLENBQVUvbEYsRUFBS2lvRixVQUc5QkMsRUFBT2xvRixFQUFLbW9GLFNBQVM1OEUsUUFXM0IsU0FBUzY4RSxFQUFPQyxHQUFPLE9BQU9BLEVBQUk1L0UsUUFBUSxTQUFVczlFLEVBQUd1QyxTQUFVLENBVGpFdG9GLEVBQUt1b0YsWUFFQXZvRixFQUFLd29GLG1CQUNSTixFQUFLbm1GLEtBdkNlLDJWQXlDdEJtbUYsRUFBS25tRixLQUFLZ2tGLEVBQUd1QixRQUVidkIsRUFBR3VDLFNBQVdKLEVBQUs3eUUsS0FBSyxLQUl4QjB3RSxFQUFHMEMsWUFBY3BvQixPQUFPK25CLEVBQU1yQyxFQUFHK0IsaUJBQWtCLEtBQ25EL0IsRUFBRzJDLFdBQWFyb0IsT0FBTytuQixFQUFNckMsRUFBR2dDLGdCQUFpQixLQUNqRGhDLEVBQUc0QyxpQkFBbUJ0b0IsT0FBTytuQixFQUFNckMsRUFBR2lDLHNCQUF1QixLQUM3RGpDLEVBQUc2QyxnQkFBa0J2b0IsT0FBTytuQixFQUFNckMsRUFBRzhCLHFCQUFzQixLQU0zRCxNQUFNZ0IsRUFBVSxHQUloQixTQUFTQyxFQUFhcnlFLEVBQU0wRCxHQUMxQixNQUFNLElBQUl4WSxNQUFNLCtCQUFpQzhVLEVBQU8sTUFBUTBELEVBQ2xFLENBSkFuYSxFQUFLK29GLGFBQWUsQ0FBQyxFQU1yQnhvRixPQUFPNGlDLEtBQUtuakMsRUFBS2dwRixhQUFhMzZFLFNBQVEsU0FBVW9JLEdBQzlDLE1BQU0wRCxFQUFNbmEsRUFBS2dwRixZQUFZdnlFLEdBRzdCLEdBQVksT0FBUjBELEVBQWdCLE9BRXBCLE1BQU04dUUsRUFBVyxDQUFFbm1FLFNBQVUsS0FBTXJZLEtBQU0sTUFJekMsR0FGQXpLLEVBQUsrb0YsYUFBYXR5RSxHQUFRd3lFLEVBaEttQixvQkFBaEIsR0FrS2hCOXVFLEdBaUJYLE9BbExOLFNBQW1CeFosR0FBTyxNQUF1QixvQkFBaEIsR0FBT0EsRUFBMkIsQ0FrS3pEdW9GLENBQVMvdUUsRUFBSTJJLFVBRU4waUUsR0FBV3JyRSxFQUFJMkksVUFDeEJtbUUsRUFBU25tRSxTQUFXM0ksRUFBSTJJLFNBRXhCZ21FLEVBQVlyeUUsRUFBTTBELEdBSmxCOHVFLEVBQVNubUUsU0FsRWpCLFNBQTBCaWpFLEdBQ3hCLE9BQU8sU0FBVTd6RSxFQUFNUCxHQUNyQixNQUFNbTBFLEVBQU81ekUsRUFBSzNHLE1BQU1vRyxHQUV4QixPQUFJbzBFLEVBQUdsa0UsS0FBS2lrRSxHQUNIQSxFQUFLaHBFLE1BQU1pcEUsR0FBSSxHQUFHdGpGLE9BRXBCLENBQ1QsQ0FDRixDQXlENEIwbUYsQ0FBZ0JodkUsRUFBSTJJLGVBT3RDMGlFLEdBQVdyckUsRUFBSSt4RCxXQUNqQitjLEVBQVMvYyxVQUFZL3hELEVBQUkreEQsVUFDZi94RCxFQUFJK3hELFVBR2Q0YyxFQUFZcnlFLEVBQU0wRCxHQUZsQjh1RSxFQUFTL2MsVUFoRVIsU0FBVXB2RCxFQUFPOWMsR0FDdEJBLEVBQUtrc0UsVUFBVXB2RCxFQUNqQixJQWpIRixTQUFtQm5jLEdBQU8sTUFBdUIsb0JBQWhCLEdBQU9BLEVBQTJCLENBdUwzRCxDQUFTd1osR0FLYjJ1RSxFQUFZcnlFLEVBQU0wRCxHQUpoQjB1RSxFQUFROW1GLEtBQUswVSxFQUtqQixJQU1Bb3lFLEVBQVF4NkUsU0FBUSxTQUFVKzZFLEdBQ25CcHBGLEVBQUsrb0YsYUFBYS9vRixFQUFLZ3BGLFlBQVlJLE1BTXhDcHBGLEVBQUsrb0YsYUFBYUssR0FBT3RtRSxTQUN2QjlpQixFQUFLK29GLGFBQWEvb0YsRUFBS2dwRixZQUFZSSxJQUFRdG1FLFNBQzdDOWlCLEVBQUsrb0YsYUFBYUssR0FBT2xkLFVBQ3ZCbHNFLEVBQUsrb0YsYUFBYS9vRixFQUFLZ3BGLFlBQVlJLElBQVFsZCxVQUMvQyxJQUtBbHNFLEVBQUsrb0YsYUFBYSxJQUFNLENBQUVqbUUsU0FBVSxLQUFNb3BELFVBcEduQyxTQUFVcHZELEVBQU85YyxHQUN0QkEsRUFBS2tzRSxVQUFVcHZELEVBQ2pCLEdBdUdBLE1BQU11c0UsRUFBUTlvRixPQUFPNGlDLEtBQUtuakMsRUFBSytvRixjQUM1QjVnRixRQUFPLFNBQVVzTyxHQUVoQixPQUFPQSxFQUFLaFUsT0FBUyxHQUFLekMsRUFBSytvRixhQUFhdHlFLEVBQzlDLElBQ0MzVCxJQUFJLElBQ0p1UyxLQUFLLEtBRVJyVixFQUFLK2xGLEdBQUd1RCxZQUFjanBCLE9BQU8sb0JBQTJCMGxCLEVBQUdrQixTQUFXLE1BQVFvQyxFQUFRLElBQUssS0FDM0ZycEYsRUFBSytsRixHQUFHd0QsY0FBZ0JscEIsT0FBTyxvQkFBMkIwbEIsRUFBR2tCLFNBQVcsTUFBUW9DLEVBQVEsSUFBSyxNQUM3RnJwRixFQUFLK2xGLEdBQUd5RCxnQkFBa0JucEIsT0FBTyxJQUFNcmdFLEVBQUsrbEYsR0FBR3dELGNBQWNqWSxPQUFRLEtBRXJFdHhFLEVBQUsrbEYsR0FBR2hNLFFBQVUxWixPQUNoQixJQUFNcmdFLEVBQUsrbEYsR0FBR3VELFlBQVloWSxPQUFTLE1BQVF0eEUsRUFBSytsRixHQUFHNkMsZ0JBQWdCdFgsT0FBUyxNQUM1RSxLQXhJSixTQUF5QnR4RSxHQUN2QkEsRUFBS3lwRixXQUFhLEVBQ2xCenBGLEVBQUswcEYsZUFBaUIsRUFDeEIsQ0E0SUVDLENBQWUzcEYsRUFDakIsQ0FPQSxTQUFTNHBGLEdBQU81cEYsRUFBTWdoQixHQUNwQixNQUFNN04sRUFBUW5ULEVBQUt5cEYsVUFDYnYyRSxFQUFNbFQsRUFBSzZwRixlQUNYMzNFLEVBQU9sUyxFQUFLMHBGLGVBQWVuK0UsTUFBTTRILEVBQU9ELEdBTzlDelAsS0FBSytSLE9BQVN4VixFQUFLOHBGLFdBQVdwbkYsY0FNOUJlLEtBQUtnUixNQUFRdEIsRUFBUTZOLEVBTXJCdmQsS0FBS3ExRSxVQUFZNWxFLEVBQU04TixFQU12QnZkLEtBQUswdEMsSUFBTWovQixFQU1Yek8sS0FBS3lPLEtBQU9BLEVBTVp6TyxLQUFLeWdFLElBQU1oeUQsQ0FDYixDQUVBLFNBQVM2M0UsR0FBYS9wRixFQUFNZ2hCLEdBQzFCLE1BQU1sRSxFQUFRLElBQUk4c0UsR0FBTTVwRixFQUFNZ2hCLEdBSTlCLE9BRkFoaEIsRUFBSytvRixhQUFhanNFLEVBQU10SCxRQUFRMDJELFVBQVVwdkQsRUFBTzljLEdBRTFDOGMsQ0FDVCxDQXdDQSxTQUFTa3RFLEdBQVdDLEVBQVMvbkYsR0FDM0IsS0FBTXVCLGdCQUFnQnVtRixJQUNwQixPQUFPLElBQUlBLEdBQVVDLEVBQVMvbkYsR0FqVWxDLElBQXVCdkIsRUFvVWhCdUIsSUFwVWdCdkIsRUFxVUZzcEYsRUFwVVoxcEYsT0FBTzRpQyxLQUFLeGlDLEdBQU8sQ0FBQyxHQUFHOGUsUUFBTyxTQUFVeXFFLEVBQUtyWixHQUVsRCxPQUFPcVosR0FBT3pFLEdBQWUza0YsZUFBZSt2RSxFQUM5QyxJQUFHLEtBa1VDM3VFLEVBQVUrbkYsRUFDVkEsRUFBVSxDQUFDLElBSWZ4bUYsS0FBS3drRixTQUFXLEdBQU8sQ0FBQyxFQUFHeEMsR0FBZ0J2akYsR0FHM0N1QixLQUFLZ21GLFdBQWEsRUFDbEJobUYsS0FBS29tRixnQkFBa0IsRUFDdkJwbUYsS0FBS3FtRixXQUFhLEdBQ2xCcm1GLEtBQUtpbUYsZUFBaUIsR0FFdEJqbUYsS0FBS3VsRixZQUFjLEdBQU8sQ0FBQyxFQUFHbkQsR0FBZ0JvRSxHQUM5Q3htRixLQUFLc2xGLGFBQWUsQ0FBQyxFQUVyQnRsRixLQUFLMGtGLFNBQVd4QixHQUNoQmxqRixLQUFLK2tGLG1CQUFvQixFQUV6Qi9rRixLQUFLc2lGLEdBQUssQ0FBQyxFQUVYMW1FLEdBQVE1YixLQUNWLENBU0F1bUYsR0FBVW5wRixVQUFVMnVCLElBQU0sU0FBY2hhLEVBQVFwVixHQUc5QyxPQUZBcUQsS0FBS3VsRixZQUFZeHpFLEdBQVVwVixFQUMzQmlmLEdBQVE1YixNQUNEQSxJQUNULEVBUUF1bUYsR0FBVW5wRixVQUFVc1YsSUFBTSxTQUFjalUsR0FFdEMsT0FEQXVCLEtBQUt3a0YsU0FBVyxHQUFPeGtGLEtBQUt3a0YsU0FBVS9sRixHQUMvQnVCLElBQ1QsRUFPQXVtRixHQUFVbnBGLFVBQVVnaEIsS0FBTyxTQUFlM1AsR0FLeEMsR0FIQXpPLEtBQUtpbUYsZUFBaUJ4M0UsRUFDdEJ6TyxLQUFLZ21GLFdBQWEsR0FFYnYzRSxFQUFLelAsT0FBVSxPQUFPLEVBRTNCLElBQUlpYixFQUFHeXNFLEVBQUlDLEVBQUluZ0QsRUFBS2pwQixFQUFPbEcsRUFBTWlyRSxFQUFJc0UsRUFBU0MsRUFHOUMsR0FBSTdtRixLQUFLc2lGLEdBQUd1RCxZQUFZem5FLEtBQUszUCxHQUczQixJQUZBNnpFLEVBQUt0aUYsS0FBS3NpRixHQUFHd0QsY0FDYnhELEVBQUdqTixVQUFZLEVBQ2dCLFFBQXZCcDdELEVBQUlxb0UsRUFBR3BnRSxLQUFLelQsS0FFbEIsR0FEQSszQixFQUFNeG1DLEtBQUs4bUYsYUFBYXI0RSxFQUFNd0wsRUFBRSxHQUFJcW9FLEVBQUdqTixXQUNuQzd1QyxFQUFLLENBQ1B4bUMsS0FBS3FtRixXQUFhcHNFLEVBQUUsR0FDcEJqYSxLQUFLZ21GLFVBQVkvckUsRUFBRWpKLE1BQVFpSixFQUFFLEdBQUdqYixPQUNoQ2dCLEtBQUtvbUYsZUFBaUJuc0UsRUFBRWpKLE1BQVFpSixFQUFFLEdBQUdqYixPQUFTd25DLEVBQzlDLEtBQ0YsQ0EyQ0osT0F2Q0l4bUMsS0FBS3drRixTQUFTdkMsV0FBYWppRixLQUFLc2xGLGFBQWEsV0FFL0NzQixFQUFVbjRFLEVBQUtvTyxPQUFPN2MsS0FBS3NpRixHQUFHNkMsaUJBQzFCeUIsR0FBVyxJQUVUNW1GLEtBQUtnbUYsVUFBWSxHQUFLWSxFQUFVNW1GLEtBQUtnbUYsWUFDMEQsUUFBNUZVLEVBQUtqNEUsRUFBSzRLLE1BQU1yWixLQUFLd2tGLFNBQVNyQyxRQUFVbmlGLEtBQUtzaUYsR0FBRzJDLFdBQWFqbEYsS0FBS3NpRixHQUFHNEMscUJBQ3hFM25FLEVBQVFtcEUsRUFBRzExRSxNQUFRMDFFLEVBQUcsR0FBRzFuRixRQUVyQmdCLEtBQUtnbUYsVUFBWSxHQUFLem9FLEVBQVF2ZCxLQUFLZ21GLGFBQ3JDaG1GLEtBQUtxbUYsV0FBYSxHQUNsQnJtRixLQUFLZ21GLFVBQVl6b0UsRUFDakJ2ZCxLQUFLb21GLGVBQWlCTSxFQUFHMTFFLE1BQVEwMUUsRUFBRyxHQUFHMW5GLFVBTzdDZ0IsS0FBS3drRixTQUFTdEMsWUFBY2xpRixLQUFLc2xGLGFBQWEsYUFFaER1QixFQUFTcDRFLEVBQUs4TSxRQUFRLEtBQ2xCc3JFLEdBQVUsR0FHbUMsUUFBMUNGLEVBQUtsNEUsRUFBSzRLLE1BQU1yWixLQUFLc2lGLEdBQUcwQyxnQkFDM0J6bkUsRUFBUW9wRSxFQUFHMzFFLE1BQVEyMUUsRUFBRyxHQUFHM25GLE9BQ3pCcVksRUFBT3N2RSxFQUFHMzFFLE1BQVEyMUUsRUFBRyxHQUFHM25GLFFBRXBCZ0IsS0FBS2dtRixVQUFZLEdBQUt6b0UsRUFBUXZkLEtBQUtnbUYsV0FDbEN6b0UsSUFBVXZkLEtBQUtnbUYsV0FBYTN1RSxFQUFPclgsS0FBS29tRixrQkFDM0NwbUYsS0FBS3FtRixXQUFhLFVBQ2xCcm1GLEtBQUtnbUYsVUFBWXpvRSxFQUNqQnZkLEtBQUtvbUYsZUFBaUIvdUUsS0FNdkJyWCxLQUFLZ21GLFdBQWEsQ0FDM0IsRUFTQU8sR0FBVW5wRixVQUFVazVFLFFBQVUsU0FBa0I3bkUsR0FDOUMsT0FBT3pPLEtBQUtzaUYsR0FBR2hNLFFBQVFsNEQsS0FBSzNQLEVBQzlCLEVBV0E4M0UsR0FBVW5wRixVQUFVMHBGLGFBQWUsU0FBdUJyNEUsRUFBTXNELEVBQVE3RCxHQUV0RSxPQUFLbE8sS0FBS3NsRixhQUFhdnpFLEVBQU85UyxlQUd2QmUsS0FBS3NsRixhQUFhdnpFLEVBQU85UyxlQUFlb2dCLFNBQVM1USxFQUFNUCxFQUFLbE8sTUFGMUQsQ0FHWCxFQWtCQXVtRixHQUFVbnBGLFVBQVVpYyxNQUFRLFNBQWdCNUssR0FDMUMsTUFBTTNMLEVBQVMsR0FDZixJQUFJeWEsRUFBUSxFQUdSdmQsS0FBS2dtRixXQUFhLEdBQUtobUYsS0FBS2ltRixpQkFBbUJ4M0UsSUFDakQzTCxFQUFPeEUsS0FBS2dvRixHQUFZdG1GLEtBQU11ZCxJQUM5QkEsRUFBUXZkLEtBQUtvbUYsZ0JBSWYsSUFBSS9ELEVBQU85a0UsRUFBUTlPLEVBQUszRyxNQUFNeVYsR0FBUzlPLEVBR3ZDLEtBQU96TyxLQUFLb2UsS0FBS2lrRSxJQUNmdi9FLEVBQU94RSxLQUFLZ29GLEdBQVl0bUYsS0FBTXVkLElBRTlCOGtFLEVBQU9BLEVBQUt2NkUsTUFBTTlILEtBQUtvbUYsZ0JBQ3ZCN29FLEdBQVN2ZCxLQUFLb21GLGVBR2hCLE9BQUl0akYsRUFBTzlELE9BQ0Y4RCxFQUdGLElBQ1QsRUFRQXlqRixHQUFVbnBGLFVBQVV1akYsYUFBZSxTQUF1Qmx5RSxHQUt4RCxHQUhBek8sS0FBS2ltRixlQUFpQngzRSxFQUN0QnpPLEtBQUtnbUYsV0FBYSxHQUVidjNFLEVBQUt6UCxPQUFRLE9BQU8sS0FFekIsTUFBTWliLEVBQUlqYSxLQUFLc2lGLEdBQUd5RCxnQkFBZ0I3akUsS0FBS3pULEdBQ3ZDLElBQUt3TCxFQUFHLE9BQU8sS0FFZixNQUFNdXNCLEVBQU14bUMsS0FBSzhtRixhQUFhcjRFLEVBQU13TCxFQUFFLEdBQUlBLEVBQUUsR0FBR2piLFFBQy9DLE9BQUt3bkMsR0FFTHhtQyxLQUFLcW1GLFdBQWFwc0UsRUFBRSxHQUNwQmphLEtBQUtnbUYsVUFBWS9yRSxFQUFFakosTUFBUWlKLEVBQUUsR0FBR2piLE9BQ2hDZ0IsS0FBS29tRixlQUFpQm5zRSxFQUFFakosTUFBUWlKLEVBQUUsR0FBR2piLE9BQVN3bkMsRUFFdkM4L0MsR0FBWXRtRixLQUFNLElBTlIsSUFPbkIsRUFpQkF1bUYsR0FBVW5wRixVQUFVcW5GLEtBQU8sU0FBZTFxQixFQUFNZ3RCLEdBRzlDLE9BRkFodEIsRUFBT3B5RCxNQUFNcUssUUFBUStuRCxHQUFRQSxFQUFPLENBQUNBLEdBRWhDZ3RCLEdBT0wvbUYsS0FBSzBrRixTQUFXMWtGLEtBQUswa0YsU0FBU3Y1RSxPQUFPNHVELEdBQ2xDdnpELE9BQ0E5QixRQUFPLFNBQVU0N0QsRUFBSW1RLEVBQUszeEUsR0FDekIsT0FBT3doRSxJQUFPeGhFLEVBQUkyeEUsRUFBTSxFQUMxQixJQUNDanpELFVBRUg1QixHQUFRNWIsTUFDREEsT0FkTEEsS0FBSzBrRixTQUFXM3FCLEVBQUtqeUQsUUFDckI5SCxLQUFLK2tGLG1CQUFvQixFQUN6Qm5wRSxHQUFRNWIsTUFDREEsS0FZWCxFQU9BdW1GLEdBQVVucEYsVUFBVXFyRSxVQUFZLFNBQW9CcHZELEdBSTdDQSxFQUFNdEgsU0FBVXNILEVBQU1vbkQsSUFBTSxVQUFZcG5ELEVBQU1vbkQsS0FFOUIsWUFBakJwbkQsRUFBTXRILFFBQXlCLFlBQVlxTSxLQUFLL0UsRUFBTW9uRCxPQUN4RHBuRCxFQUFNb25ELElBQU0sVUFBWXBuRCxFQUFNb25ELElBRWxDLEVBT0E4bEIsR0FBVW5wRixVQUFVMG5GLFVBQVksV0FDaEMsRUFFQSxZRTluQk1rQyxHQUFTLFdBR1QsR0FBTyxHQVVQQyxHQUFnQixRQUNoQkMsR0FBZ0IsYUFDaEJDLEdBQWtCLDRCQUdsQkMsR0FBUyxDQUNkLFNBQVksa0RBQ1osWUFBYSxpREFDYixnQkFBaUIsaUJBS1pyZ0QsR0FBUTMzQixLQUFLMjNCLE1BQ2JzZ0QsR0FBcUJ4bkMsT0FBT0MsYUFVbEMsU0FBUzMvQyxHQUFNOEMsR0FDZCxNQUFNLElBQUlrTyxXQUFXaTJFLEdBQU9ua0YsR0FDN0IsQ0E2QkEsU0FBU3FrRixHQUFVQyxFQUFRdGlGLEdBQzFCLE1BQU02bEIsRUFBUXk4RCxFQUFPMXBFLE1BQU0sS0FDM0IsSUFBSS9hLEVBQVMsR0FDVGdvQixFQUFNOXJCLE9BQVMsSUFHbEI4RCxFQUFTZ29CLEVBQU0sR0FBSyxJQUNwQnk4RCxFQUFTejhELEVBQU0sSUFJaEIsTUFDTTA4RCxFQS9CUCxTQUFhcjFFLEVBQU9sTixHQUNuQixNQUFNbkMsRUFBUyxHQUNmLElBQUk5RCxFQUFTbVQsRUFBTW5ULE9BQ25CLEtBQU9BLEtBQ044RCxFQUFPOUQsR0FBVWlHLEVBQVNrTixFQUFNblQsSUFFakMsT0FBTzhELENBQ1IsQ0F3QmlCekQsRUFGaEJrb0YsRUFBU0EsRUFBT3ZpRixRQUFRbWlGLEdBQWlCLE1BQ25CdHBFLE1BQU0sS0FDQTVZLEdBQVUyTSxLQUFLLEtBQzNDLE9BQU85TyxFQUFTMGtGLENBQ2pCLENBZUEsU0FBU0MsR0FBV2h0RSxHQUNuQixNQUFNMkssRUFBUyxHQUNmLElBQUlzaUUsRUFBVSxFQUNkLE1BQU0xb0YsRUFBU3liLEVBQU96YixPQUN0QixLQUFPMG9GLEVBQVUxb0YsR0FBUSxDQUN4QixNQUFNVSxFQUFRK2EsRUFBT3lJLFdBQVd3a0UsS0FDaEMsR0FBSWhvRixHQUFTLE9BQVVBLEdBQVMsT0FBVWdvRixFQUFVMW9GLEVBQVEsQ0FFM0QsTUFBTStWLEVBQVEwRixFQUFPeUksV0FBV3drRSxLQUNSLFFBQVgsTUFBUjN5RSxHQUNKcVEsRUFBTzltQixPQUFlLEtBQVJvQixJQUFrQixLQUFlLEtBQVJxVixHQUFpQixRQUl4RHFRLEVBQU85bUIsS0FBS29CLEdBQ1pnb0YsSUFFRixNQUNDdGlFLEVBQU85bUIsS0FBS29CLEVBRWQsQ0FDQSxPQUFPMGxCLENBQ1IsQ0FVQSxNQW1DTXVpRSxHQUFlLFNBQVNDLEVBQU9DLEdBR3BDLE9BQU9ELEVBQVEsR0FBSyxJQUFNQSxFQUFRLE1BQWdCLEdBQVJDLElBQWMsRUFDekQsRUFPTUMsR0FBUSxTQUFTQyxFQUFPQyxFQUFXQyxHQUN4QyxJQUFJN2EsRUFBSSxFQUdSLElBRkEyYSxFQUFRRSxFQUFZbGhELEdBQU1naEQsRUExS2QsS0EwSzhCQSxHQUFTLEVBQ25EQSxHQUFTaGhELEdBQU1naEQsRUFBUUMsR0FDT0QsRUFBUUcsSUFBMkI5YSxHQUFLLEdBQ3JFMmEsRUFBUWhoRCxHQUFNZ2hELEVBM0pNLElBNkpyQixPQUFPaGhELEdBQU1xbUMsRUFBSSxHQUFzQjJhLEdBQVNBLEVBaExwQyxJQWlMYixFQVNNLEdBQVMsU0FBUzUyQyxHQUV2QixNQUFNL3JCLEVBQVMsR0FDVCtpRSxFQUFjaDNDLEVBQU1ueUMsT0FDMUIsSUFBSVgsRUFBSSxFQUNKa08sRUE1TFksSUE2TFo2dEIsRUE5TGUsR0FvTWZndUQsRUFBUWozQyxFQUFNSSxZQWxNRCxLQW1NYjYyQyxFQUFRLElBQ1hBLEVBQVEsR0FHVCxJQUFLLElBQUkxNUUsRUFBSSxFQUFHQSxFQUFJMDVFLElBQVMxNUUsRUFFeEJ5aUMsRUFBTWp1QixXQUFXeFUsSUFBTSxLQUMxQnZPLEdBQU0sYUFFUGlsQixFQUFPOW1CLEtBQUs2eUMsRUFBTWp1QixXQUFXeFUsSUFNOUIsSUFBSyxJQUFJc0MsRUFBUW8zRSxFQUFRLEVBQUlBLEVBQVEsRUFBSSxFQUFHcDNFLEVBQVFtM0UsR0FBd0MsQ0FPM0YsTUFBTUUsRUFBT2hxRixFQUNiLElBQUssSUFBSWlxRixFQUFJLEVBQUdsYixFQUFJLElBQTBCQSxHQUFLLEdBQU0sQ0FFcERwOEQsR0FBU20zRSxHQUNaaG9GLEdBQU0saUJBR1AsTUFBTXluRixHQTlGcUJXLEVBOEZBcDNDLEVBQU1qdUIsV0FBV2xTLE9BN0Y3QixJQUFRdTNFLEVBQVksR0FDdkJBLEVBQVksR0FBbEIsR0FFSkEsR0FBYSxJQUFRQSxFQUFZLEdBQzdCQSxFQUFZLEdBRWhCQSxHQUFhLElBQVFBLEVBQVksSUFDN0JBLEVBQVksR0FFYixHQXNGRFgsR0FBUyxJQUNaem5GLEdBQU0saUJBRUh5bkYsRUFBUTdnRCxJQUFPaWdELEdBQVMzb0YsR0FBS2lxRixJQUNoQ25vRixHQUFNLFlBR1A5QixHQUFLdXBGLEVBQVFVLEVBQ2IsTUFBTTdqRixFQUFJMm9FLEdBQUtoekMsRUFoUEwsRUFnUG9CZ3pDLEdBQUtoekMsRUEvT3pCLE1BK084Q2d6QyxFQUFJaHpDLEVBRTVELEdBQUl3dEQsRUFBUW5qRixFQUNYLE1BR0QsTUFBTStqRixFQUFhLEdBQU8vakYsRUFDdEI2akYsRUFBSXZoRCxHQUFNaWdELEdBQVN3QixJQUN0QnJvRixHQUFNLFlBR1Btb0YsR0FBS0UsQ0FFTixDQUVBLE1BQU1udEUsRUFBTStKLEVBQU9wbUIsT0FBUyxFQUM1Qm83QixFQUFPMHRELEdBQU16cEYsRUFBSWdxRixFQUFNaHRFLEVBQWEsR0FBUmd0RSxHQUl4QnRoRCxHQUFNMW9DLEVBQUlnZCxHQUFPMnJFLEdBQVN6NkUsR0FDN0JwTSxHQUFNLFlBR1BvTSxHQUFLdzZCLEdBQU0xb0MsRUFBSWdkLEdBQ2ZoZCxHQUFLZ2QsRUFHTCtKLEVBQU9oWSxPQUFPL08sSUFBSyxFQUFHa08sRUFFdkIsQ0F0SW9CLElBQVNnOEUsRUF3STdCLE9BQU8xb0MsT0FBTzRvQyxpQkFBaUJyakUsRUFDaEMsRUFTTSxHQUFTLFNBQVMrckIsR0FDdkIsTUFBTS9yQixFQUFTLEdBTVQraUUsR0FITmgzQyxFQUFRczJDLEdBQVd0MkMsSUFHT255QyxPQUcxQixJQUFJdU4sRUEvUlksSUFnU1p3N0UsRUFBUSxFQUNSM3RELEVBbFNlLEdBcVNuQixJQUFLLE1BQU1zdUQsS0FBZ0J2M0MsRUFDdEJ1M0MsRUFBZSxLQUNsQnRqRSxFQUFPOW1CLEtBQUsrb0YsR0FBbUJxQixJQUlqQyxNQUFNQyxFQUFjdmpFLEVBQU9wbUIsT0FDM0IsSUFBSTRwRixFQUFpQkQsRUFXckIsSUFMSUEsR0FDSHZqRSxFQUFPOW1CLEtBalRTLEtBcVRWc3FGLEVBQWlCVCxHQUFhLENBSXBDLElBQUlsdUUsRUFBSStzRSxHQUNSLElBQUssTUFBTTBCLEtBQWdCdjNDLEVBQ3RCdTNDLEdBQWdCbjhFLEdBQUttOEUsRUFBZXp1RSxJQUN2Q0EsRUFBSXl1RSxHQU1OLE1BQU1HLEVBQXdCRCxFQUFpQixFQUMzQzN1RSxFQUFJMU4sRUFBSXc2QixJQUFPaWdELEdBQVNlLEdBQVNjLElBQ3BDMW9GLEdBQU0sWUFHUDRuRixJQUFVOXRFLEVBQUkxTixHQUFLczhFLEVBQ25CdDhFLEVBQUkwTixFQUVKLElBQUssTUFBTXl1RSxLQUFnQnYzQyxFQUkxQixHQUhJdTNDLEVBQWVuOEUsS0FBT3c3RSxFQUFRZixJQUNqQzdtRixHQUFNLFlBRUh1b0YsSUFBaUJuOEUsRUFBRyxDQUV2QixJQUFJdThFLEVBQUlmLEVBQ1IsSUFBSyxJQUFJM2EsRUFBSSxJQUEwQkEsR0FBSyxHQUFNLENBQ2pELE1BQU0zb0UsRUFBSTJvRSxHQUFLaHpDLEVBeFZQLEVBd1ZzQmd6QyxHQUFLaHpDLEVBdlYzQixNQXVWZ0RnekMsRUFBSWh6QyxFQUM1RCxHQUFJMHVELEVBQUlya0YsRUFDUCxNQUVELE1BQU1za0YsRUFBVUQsRUFBSXJrRixFQUNkK2pGLEVBQWEsR0FBTy9qRixFQUMxQjJnQixFQUFPOW1CLEtBQ04rb0YsR0FBbUJNLEdBQWFsakYsRUFBSXNrRixFQUFVUCxFQUFZLEtBRTNETSxFQUFJL2hELEdBQU1naUQsRUFBVVAsRUFDckIsQ0FFQXBqRSxFQUFPOW1CLEtBQUsrb0YsR0FBbUJNLEdBQWFtQixFQUFHLEtBQy9DMXVELEVBQU8wdEQsR0FBTUMsRUFBT2MsRUFBdUJELElBQW1CRCxHQUM5RFosRUFBUSxJQUNOYSxDQUNILEdBR0NiLElBQ0F4N0UsQ0FFSCxDQUNBLE9BQU82WSxFQUFPeFQsS0FBSyxHQUNwQixFQW9FQSxHQXpCaUIsQ0FNaEIsUUFBVyxRQVFYLEtBQVEsQ0FDUCxPQUFVNjFFLEdBQ1YsT0E5U2lCdUIsR0FBY25wQyxPQUFPNG9DLGlCQUFpQk8sSUFnVHhELE9BQVUsR0FDVixPQUFVLEdBQ1YsUUEvQmUsU0FBUzczQyxHQUN4QixPQUFPbTJDLEdBQVVuMkMsR0FBTyxTQUFTMTJCLEdBQ2hDLE9BQU95c0UsR0FBYzlvRSxLQUFLM0QsR0FDdkIsT0FBUyxHQUFPQSxHQUNoQkEsQ0FDSixHQUNELEVBMEJDLFVBbkRpQixTQUFTMDJCLEdBQzFCLE9BQU9tMkMsR0FBVW4yQyxHQUFPLFNBQVMxMkIsR0FDaEMsT0FBT3dzRSxHQUFjN29FLEtBQUszRCxHQUN2QixHQUFPQSxFQUFPM1MsTUFBTSxHQUFHN0ksZUFDdkJ3YixDQUNKLEdBQ0QsR0MxWE1rakIsR0FBUyxDQUNiM2UsUUNmRixDQUNFdmdCLFFBQVMsQ0FFUG03QyxNQUFNLEVBR04rM0IsVUFBVSxFQUdWRSxRQUFRLEVBR1JQLFdBQVksWUFHWitFLFNBQVMsRUFHVGUsYUFBYSxFQU9ibEIsT0FBUSxPQVFSL0UsVUFBVyxLQUdYeU0sV0FBWSxLQUdkcUwsV0FBWSxDQUNWQyxLQUFNLENBQUMsRUFDUC8rRCxNQUFPLENBQUMsRUFDUnhNLE9BQVEsQ0FBQyxJRDFCWHdyRSxLRWZGLENBQ0UxcUYsUUFBUyxDQUVQbTdDLE1BQU0sRUFHTiszQixVQUFVLEVBR1ZFLFFBQVEsRUFHUlAsV0FBWSxZQUdaK0UsU0FBUyxFQUdUZSxhQUFhLEVBT2JsQixPQUFRLE9BUVIvRSxVQUFXLEtBR1h5TSxXQUFZLElBR2RxTCxXQUFZLENBRVZDLEtBQU0sQ0FDSnpuRSxNQUFPLENBQ0wsWUFDQSxRQUNBLFNBQ0EsY0FJSjBJLE1BQU8sQ0FDTDFJLE1BQU8sQ0FDTCxjQUlKOUQsT0FBUSxDQUNOOEQsTUFBTyxDQUNMLFFBRUYybkUsT0FBUSxDQUNOLGdCQUNBLHFCRjlDTkMsV0dqQkYsQ0FDRTVxRixRQUFTLENBRVBtN0MsTUFBTSxFQUdOKzNCLFVBQVUsRUFHVkUsUUFBUSxFQUdSUCxXQUFZLFlBR1orRSxTQUFTLEVBR1RlLGFBQWEsRUFPYmxCLE9BQVEsT0FRUi9FLFVBQVcsS0FHWHlNLFdBQVksSUFHZHFMLFdBQVksQ0FFVkMsS0FBTSxDQUNKem5FLE1BQU8sQ0FDTCxZQUNBLFFBQ0EsU0FDQSxjQUlKMEksTUFBTyxDQUNMMUksTUFBTyxDQUNMLGFBQ0EsT0FDQSxRQUNBLFVBQ0EsS0FDQSxhQUNBLFdBQ0EsT0FDQSxZQUNBLGNBSUo5RCxPQUFRLENBQ044RCxNQUFPLENBQ0wsV0FDQSxZQUNBLFdBQ0EsU0FDQSxTQUNBLGNBQ0EsUUFDQSxPQUNBLFVBQ0EsUUFFRjJuRSxPQUFRLENBQ04sZ0JBQ0EsV0FDQSxzQkhyREZFLEdBQWUsb0NBQ2ZDLEdBQWUsb0NBRXJCLFNBQVMxUyxHQUFjcFcsR0FFckIsTUFBTTU5RCxFQUFNNDlELEVBQUlrTSxPQUFPMXRFLGNBRXZCLE9BQU9xcUYsR0FBYWxyRSxLQUFLdmIsSUFBTzBtRixHQUFhbnJFLEtBQUt2YixFQUNwRCxDQUVBLE1BQU0ybUYsR0FBc0IsQ0FBQyxRQUFTLFNBQVUsV0FFaEQsU0FBUzVTLEdBQWVuVyxHQUN0QixNQUFNem1CLEVBQVMsR0FBWXltQixHQUFLLEdBRWhDLEdBQUl6bUIsRUFBT2t4QixZQU9KbHhCLEVBQU8rd0IsVUFBWXllLEdBQW9CanVFLFFBQVF5K0IsRUFBTyt3QixXQUFhLEdBQ3RFLElBQ0Uvd0IsRUFBT2t4QixTQUFXLFdBQWlCbHhCLEVBQU9reEIsU0FDNUMsQ0FBRSxNQUFPdWUsR0FBVyxDQUl4QixPQUFPLEdBQWEsR0FBYXp2QyxHQUNuQyxDQUVBLFNBQVMrOEIsR0FBbUJ0VyxHQUMxQixNQUFNem1CLEVBQVMsR0FBWXltQixHQUFLLEdBRWhDLEdBQUl6bUIsRUFBT2t4QixZQU9KbHhCLEVBQU8rd0IsVUFBWXllLEdBQW9CanVFLFFBQVF5K0IsRUFBTyt3QixXQUFhLEdBQ3RFLElBQ0Uvd0IsRUFBT2t4QixTQUFXLGFBQW1CbHhCLEVBQU9reEIsU0FDOUMsQ0FBRSxNQUFPdWUsR0FBVyxDQUt4QixPQUFPLEdBQWEsR0FBYXp2QyxHQUFTLEdBQWE0dkIsYUFBZSxJQUN4RSxDQXVJQSxTQUFTOGYsR0FBWUMsRUFBWWxyRixHQUMvQixLQUFNdUIsZ0JBQWdCMHBGLElBQ3BCLE9BQU8sSUFBSUEsR0FBV0MsRUFBWWxyRixHQUcvQkEsR0FDRSxHQUFla3JGLEtBQ2xCbHJGLEVBQVVrckYsR0FBYyxDQUFDLEVBQ3pCQSxFQUFhLFdBV2pCM3BGLEtBQUsyZCxPQUFTLElBQUksR0FTbEIzZCxLQUFLbXFCLE1BQVEsSUFBSSxHQVNqQm5xQixLQUFLa3BGLEtBQU8sSUFBSSxHQXVCaEJscEYsS0FBSzRwRixTQUFXLElBQUksR0FTcEI1cEYsS0FBS3EyRSxRQUFVLElBQUksR0FpQm5CcjJFLEtBQUs2MkUsYUFBZUEsR0FRcEI3MkUsS0FBSzQyRSxjQUFnQkEsR0FPckI1MkUsS0FBSysyRSxrQkFBb0JBLEdBVXpCLzJFLEtBQUs2cEYsTUFBUSxFQVFiN3BGLEtBQUtvOUUsUUFBVSxHQUFhLENBQUMsRUFBRyxHQUVoQ3A5RSxLQUFLdkIsUUFBVSxDQUFDLEVBQ2hCdUIsS0FBSzhwRixVQUFVSCxHQUVYbHJGLEdBQVd1QixLQUFLMFMsSUFBSWpVLEVBQzFCLENBcUJBaXJGLEdBQVd0c0YsVUFBVXNWLElBQU0sU0FBVWpVLEdBRW5DLE9BREEsR0FBYXVCLEtBQUt2QixRQUFTQSxHQUNwQnVCLElBQ1QsRUFZQTBwRixHQUFXdHNGLFVBQVUwc0YsVUFBWSxTQUFVQyxHQUN6QyxNQUFNeHRGLEVBQU95RCxLQUViLEdBQUksR0FBZStwRixHQUFVLENBQzNCLE1BQU1KLEVBQWFJLEVBRW5CLEtBREFBLEVBQVVwc0QsR0FBT2dzRCxJQUNELE1BQU0sSUFBSXpyRixNQUFNLCtCQUFpQ3lyRixFQUFhLGdCQUNoRixDQUVBLElBQUtJLEVBQVcsTUFBTSxJQUFJN3JGLE1BQU0sOENBY2hDLE9BWkk2ckYsRUFBUXRyRixTQUFXbEMsRUFBS21XLElBQUlxM0UsRUFBUXRyRixTQUVwQ3NyRixFQUFRZCxZQUNWbnNGLE9BQU80aUMsS0FBS3FxRCxFQUFRZCxZQUFZcitFLFNBQVEsU0FBVW9JLEdBQzVDKzJFLEVBQVFkLFdBQVdqMkUsR0FBTXlPLE9BQzNCbGxCLEVBQUt5VyxHQUFNdWtFLE1BQU1sRSxXQUFXMFcsRUFBUWQsV0FBV2oyRSxHQUFNeU8sT0FFbkRzb0UsRUFBUWQsV0FBV2oyRSxHQUFNbzJFLFFBQzNCN3NGLEVBQUt5VyxHQUFNOHVFLE9BQU96TyxXQUFXMFcsRUFBUWQsV0FBV2oyRSxHQUFNbzJFLE9BRTFELElBRUtwcEYsSUFDVCxFQW1CQTBwRixHQUFXdHNGLFVBQVUrMUUsT0FBUyxTQUFVcFosRUFBTXFaLEdBQzVDLElBQUl0d0UsRUFBUyxHQUVSNkUsTUFBTXFLLFFBQVErbkQsS0FBU0EsRUFBTyxDQUFDQSxJQUVwQyxDQUFDLE9BQVEsUUFBUyxVQUFVbnZELFNBQVEsU0FBVWlvRSxHQUM1Qy92RSxFQUFTQSxFQUFPcUksT0FBT25MLEtBQUs2eUUsR0FBTzBFLE1BQU1wRSxPQUFPcFosR0FBTSxHQUN4RCxHQUFHLzVELE1BRUg4QyxFQUFTQSxFQUFPcUksT0FBT25MLEtBQUsyZCxPQUFPbWtFLE9BQU8zTyxPQUFPcFosR0FBTSxJQUV2RCxNQUFNaXdCLEVBQVNqd0IsRUFBS3IxRCxRQUFPLFNBQVVzTyxHQUFRLE9BQU9sUSxFQUFPeVksUUFBUXZJLEdBQVEsQ0FBRSxJQUU3RSxHQUFJZzNFLEVBQU9ockYsU0FBV28wRSxFQUNwQixNQUFNLElBQUlsMUUsTUFBTSxpREFBbUQ4ckYsR0FHckUsT0FBT2hxRixJQUNULEVBU0EwcEYsR0FBV3RzRixVQUFVazJFLFFBQVUsU0FBVXZaLEVBQU1xWixHQUM3QyxJQUFJdHdFLEVBQVMsR0FFUjZFLE1BQU1xSyxRQUFRK25ELEtBQVNBLEVBQU8sQ0FBQ0EsSUFFcEMsQ0FBQyxPQUFRLFFBQVMsVUFBVW52RCxTQUFRLFNBQVVpb0UsR0FDNUMvdkUsRUFBU0EsRUFBT3FJLE9BQU9uTCxLQUFLNnlFLEdBQU8wRSxNQUFNakUsUUFBUXZaLEdBQU0sR0FDekQsR0FBRy81RCxNQUVIOEMsRUFBU0EsRUFBT3FJLE9BQU9uTCxLQUFLMmQsT0FBT21rRSxPQUFPeE8sUUFBUXZaLEdBQU0sSUFFeEQsTUFBTWl3QixFQUFTandCLEVBQUtyMUQsUUFBTyxTQUFVc08sR0FBUSxPQUFPbFEsRUFBT3lZLFFBQVF2SSxHQUFRLENBQUUsSUFFN0UsR0FBSWczRSxFQUFPaHJGLFNBQVdvMEUsRUFDcEIsTUFBTSxJQUFJbDFFLE1BQU0sa0RBQW9EOHJGLEdBRXRFLE9BQU9ocUYsSUFDVCxFQWtCQTBwRixHQUFXdHNGLFVBQVU2c0YsSUFBTSxTQUFVOXJELEdBQ25DLE1BQU0rckQsRUFBTyxDQUFDbHFGLE1BQU1tTCxPQUFPeEQsTUFBTXZLLFVBQVUwSyxNQUFNeEssS0FBS3lCLFVBQVcsSUFFakUsT0FEQW8vQixFQUFPcE4sTUFBTW9OLEVBQVErckQsR0FDZGxxRixJQUNULEVBaUJBMHBGLEdBQVd0c0YsVUFBVTRGLE1BQVEsU0FBVTQzRCxFQUFLOFYsR0FDMUMsR0FBbUIsaUJBQVI5VixFQUNULE1BQU0sSUFBSTE4RCxNQUFNLGlDQUdsQixNQUFNc2QsRUFBUSxJQUFJeGIsS0FBS2twRixLQUFLelIsTUFBTTdjLEVBQUs1NkQsS0FBTTB3RSxHQUk3QyxPQUZBMXdFLEtBQUtrcEYsS0FBSzFSLFFBQVFoOEQsR0FFWEEsRUFBTW9DLE1BQ2YsRUFhQThyRSxHQUFXdHNGLFVBQVVpMUUsT0FBUyxTQUFVelgsRUFBSzhWLEdBRzNDLE9BRkFBLEVBQU1BLEdBQU8sQ0FBQyxFQUVQMXdFLEtBQUs0cEYsU0FBU3ZYLE9BQU9yeUUsS0FBS2dELE1BQU00M0QsRUFBSzhWLEdBQU0xd0UsS0FBS3ZCLFFBQVNpeUUsRUFDbEUsRUFXQWdaLEdBQVd0c0YsVUFBVStzRixZQUFjLFNBQVV2dkIsRUFBSzhWLEdBQ2hELE1BQU1sMUQsRUFBUSxJQUFJeGIsS0FBS2twRixLQUFLelIsTUFBTTdjLEVBQUs1NkQsS0FBTTB3RSxHQUs3QyxPQUhBbDFELEVBQU15NEQsWUFBYSxFQUNuQmowRSxLQUFLa3BGLEtBQUsxUixRQUFRaDhELEdBRVhBLEVBQU1vQyxNQUNmLEVBVUE4ckUsR0FBV3RzRixVQUFVZzFFLGFBQWUsU0FBVXhYLEVBQUs4VixHQUdqRCxPQUZBQSxFQUFNQSxHQUFPLENBQUMsRUFFUDF3RSxLQUFLNHBGLFNBQVN2WCxPQUFPcnlFLEtBQUttcUYsWUFBWXZ2QixFQUFLOFYsR0FBTTF3RSxLQUFLdkIsUUFBU2l5RSxFQUN4RSxFQUVBLFlJOWlCTSxHQUFTLElBQUk5dkQsRUFBTyxDQUN0QnZPLE1BQU8sQ0FDSHNFLElBQUssQ0FDRDNLLFFBQVMsVUFFYnV1RCxVQUFXLENBQ1B2dUQsUUFBUyxVQUNUMlQsTUFBTyxRQUNQMEQsU0FBVSxDQUFDLENBQUV2QixJQUFLLE1BQ2xCdUssTUFBSyxJQUFZLENBQUMsSUFBSyxJQUUzQnZJLFdBQVksQ0FDUjlYLFFBQVMsU0FDVDJULE1BQU8sUUFDUDBELFNBQVUsQ0FBQyxDQUFFdkIsSUFBSyxlQUNsQnVLLE1BQUssSUFBWSxDQUFDLGFBQWMsSUFFcENtdUMsZ0JBQWlCLENBQ2I3NkMsTUFBTyxRQUNQMEQsU0FBVSxDQUFDLENBQUV2QixJQUFLLE9BQ2xCdUssTUFBSyxJQUFZLENBQUMsTUFBTyxDQUFDLFFBRTlCb3VDLFFBQVMsQ0FDTG5vRCxNQUFPLENBQUV1aUIsTUFBTyxDQUFFN1YsUUFBUyxJQUMzQmhULFFBQVMsa0JBQ1QyVCxNQUFPLFFBQ1A0VyxVQUFVLEVBQ1ZsVCxTQUFVLENBQUMsQ0FBRXZCLElBQUssS0FBTXhQLE1BQU8sQ0FBRXVpQixNQUFPLElBQ3BDLENBQUUvUyxJQUFLLEtBQU14UCxNQUFPLENBQUV1aUIsTUFBTyxJQUM3QixDQUFFL1MsSUFBSyxLQUFNeFAsTUFBTyxDQUFFdWlCLE1BQU8sSUFDN0IsQ0FBRS9TLElBQUssS0FBTXhQLE1BQU8sQ0FBRXVpQixNQUFPLElBQzdCLENBQUUvUyxJQUFLLEtBQU14UCxNQUFPLENBQUV1aUIsTUFBTyxJQUM3QixDQUFFL1MsSUFBSyxLQUFNeFAsTUFBTyxDQUFFdWlCLE1BQU8sS0FDakN4SSxNQUFNcGMsR0FBZSxDQUFDLElBQU1BLEVBQUtxQyxNQUFNdWlCLE1BQU8sSUFFbEQ2bEMsV0FBWSxDQUNSMXVELFFBQVMsUUFDVDJULE1BQU8sUUFDUEcsTUFBTSxFQUNOeVcsVUFBVSxFQUNWcGpCLE1BQU8sR0FDUGIsTUFBTyxDQUFFOVIsT0FBUSxDQUFFd2UsUUFBUyxLQUM1QnFFLFNBQVUsQ0FBQyxDQUFFdkIsSUFBSyxNQUFPa0UsbUJBQW9CLE9BQVFoRCxTQUFVL1MsSUFBUSxDQUFHelAsT0FBUXlQLEVBQUs4cUMsYUFBYSxnQkFBa0IsT0FDdEgxdUIsTUFBTXBjLEdBQWUsQ0FBQyxNQUFPQSxFQUFLcUMsTUFBTTlSLE9BQVMsQ0FBRSxjQUFleVAsRUFBS3FDLE1BQU05UixRQUFXLENBQUMsRUFBRyxDQUFDLE9BQVEsS0FFekc2N0QsYUFBYyxDQUNWcndELFFBQVMsYUFDVDJULE1BQU8sUUFDUHJOLE1BQU8sQ0FBRTZsRCxNQUFPLENBQUVuNUMsUUFBUyxHQUFLbTVELE1BQU8sQ0FBRW41RCxTQUFTLElBQ2xEcUUsU0FBVSxDQUFDLENBQUV2QixJQUFLLEtBQU1rQixTQUFTWCxJQUNkLENBQUU4MUMsTUFBTzkxQyxFQUFJb3NCLGFBQWEsVUFBWXBzQixFQUFJMDRCLGFBQWEsU0FBVyxFQUNyRW85QixNQUFPOTFELEVBQUlvc0IsYUFBYSxrQkFFeENwaUIsTUFBTXBjLEdBQ0ssQ0FBQyxLQUFNLENBQUVQLE1BQTJCLEdBQXBCTyxFQUFLcUMsTUFBTTZsRCxNQUFhLEtBQU9sb0QsRUFBS3FDLE1BQU02bEQsTUFDekQsYUFBY2xvRCxFQUFLcUMsTUFBTTZsRSxNQUFRLE9BQVMsTUFBUSxJQUdsRWlTLFlBQWEsQ0FDVHArRSxRQUFTLGFBQ1QyVCxNQUFPLFFBQ1ByTixNQUFPLENBQUU2bEUsTUFBTyxDQUFFbjVELFNBQVMsSUFDM0JxRSxTQUFVLENBQUMsQ0FBRXZCLElBQUssS0FBTWtCLFNBQVVYLElBQU8sQ0FBRzgxRCxNQUFPOTFELEVBQUlvc0IsYUFBYSxrQkFDcEVwaUIsTUFBTXBjLEdBQWUsQ0FBQyxLQUFNLENBQUUsYUFBY0EsRUFBS3FDLE1BQU02bEUsTUFBUSxPQUFTLE1BQVEsSUFFcEY3YixVQUFXLENBQ1B0d0QsUUFBUyxTQUNUdXFCLFVBQVUsRUFDVmxULFNBQVUsQ0FBQyxDQUFFdkIsSUFBSyxPQUNsQnVLLE1BQUssSUFBWSxDQUFDLEtBQU0sSUFFNUI1ZCxLQUFNLENBQ0ZrUixNQUFPLFVBRVhnN0MsTUFBTyxDQUNIaDlDLFFBQVEsRUFDUnJMLE1BQU8sQ0FDSHNvRCxJQUFLLENBQUMsRUFDTjdsQixJQUFLLENBQUUvMUIsUUFBUyxNQUNoQmxhLE1BQU8sQ0FBRWthLFFBQVMsT0FFdEJXLE1BQU8sU0FDUGdvQixXQUFXLEVBQ1h0a0IsU0FBVSxDQUFDLENBQUV2QixJQUFLLFdBQVlrQixTQUFTWCxJQUNwQixDQUNIdTRDLElBQUt2NEMsRUFBSTA0QixhQUFhLE9BQ3RCajJDLE1BQU91ZCxFQUFJMDRCLGFBQWEsU0FDeEJoRyxJQUFLMXlCLEVBQUkwNEIsYUFBYSxXQUd0QzF1QixNQUFNcGMsR0FBZSxDQUFDLE1BQU9BLEVBQUtxQyxRQUV0Q3VvRCxXQUFZLENBQ1JsOUMsUUFBUSxFQUNSZ0MsTUFBTyxTQUNQMGIsWUFBWSxFQUNaaFksU0FBVSxDQUFDLENBQUV2QixJQUFLLE9BQ2xCdUssTUFBSyxJQUFZLENBQUMsUUFHMUJsWixNQUFPLENBQ0g4bkQsR0FBSSxDQUNBNTNDLFNBQVUsQ0FDTixDQUFFdkIsSUFBSyxLQUFPLENBQUVBLElBQUssTUFDckIsQ0FBRUUsTUFBTyxxQkFDVCxDQUFFQSxNQUFPLG9CQUFxQnVCLFVBQVd0SixHQUFvQixNQUFmQSxFQUFFaFgsS0FBSytQLE9BRXpEcVosTUFBSyxJQUFZLENBQUMsT0FFdEI2dUMsT0FBUSxDQUNKNzNDLFNBQVUsQ0FDTixDQUFFdkIsSUFBSyxVQUNQLENBQUVBLElBQUssSUFBS2tCLFNBQVUvUyxHQUFpQyxVQUF6QkEsRUFBSytSLE1BQU1tNUMsWUFBMEIsTUFDbkUsQ0FBRW41QyxNQUFPLGtCQUFtQnVCLFVBQVd0SixHQUFvQixVQUFmQSxFQUFFaFgsS0FBSytQLE1BQ25ELENBQUVnUCxNQUFPLGNBQWVnQixTQUFVdGpCLEdBQVMsNEJBQTRCMGUsS0FBSzFlLElBQVUsT0FFMUYyc0IsTUFBSyxJQUFZLENBQUMsV0FFdEJybEIsS0FBTSxDQUNGc0wsTUFBTyxDQUNIbEwsS0FBTSxDQUFDLEVBQ1B0QyxNQUFPLENBQUVrYSxRQUFTLE9BRXRCOUgsV0FBVyxFQUNYbU0sU0FBVSxDQUFDLENBQUV2QixJQUFLLFVBQVdrQixTQUFTWCxJQUNuQixDQUFFamIsS0FBTWliLEVBQUkwNEIsYUFBYSxRQUFTajJDLE1BQU91ZCxFQUFJMDRCLGFBQWEsYUFFN0UxdUIsTUFBTXBjLEdBQWUsQ0FBQyxJQUFLQSxFQUFLcUMsUUFFcEN3TixLQUFNLENBQ0ZBLE1BQU0sRUFDTnVELFNBQVUsQ0FBQyxDQUFFdkIsSUFBSyxTQUNsQnVLLE1BQUssSUFBWSxDQUFDLFlBVzlCLE1BQU1nK0QsR0FDRixXQUFBOXBGLENBQVl3UixFQUFRdTRFLEdBQ2hCdHFGLEtBQUsrUixPQUFTQSxFQUNkL1IsS0FBS3NxRixjQUFnQkEsRUFDckJ0cUYsS0FBS3VsQyxNQUFRLENBQUMsQ0FBRXRpQyxLQUFNOE8sRUFBT3NQLFlBQWEvTyxNQUFPLEtBQU10RyxRQUFTLEdBQUltSCxNQUFPWCxFQUFLaUIsTUFDcEYsQ0FDQSxHQUFBeVQsR0FDSSxPQUFPbG5CLEtBQUt1bEMsTUFBTXZsQyxLQUFLdWxDLE1BQU12bUMsT0FBUyxFQUMxQyxDQUNBLElBQUFWLENBQUs0WixHQUNHbFksS0FBS3VsQyxNQUFNdm1DLFFBQ1hnQixLQUFLa25CLE1BQU1sYixRQUFRMU4sS0FBSzRaLEVBQ2hDLENBR0EsT0FBQXF5RSxDQUFROTdFLEdBQ0osSUFBS0EsRUFDRCxPQUNKLElBQzhDNGxELEVBRDFDbnRDLEVBQU1sbkIsS0FBS2tuQixNQUFPN1UsRUFBUTZVLEVBQUlsYixRQUFTd0UsRUFBTzZCLEVBQU1BLEVBQU1yVCxPQUFTLEdBQ25FaVIsRUFBT2pRLEtBQUsrUixPQUFPdEQsS0FBS0EsRUFBTXlZLEVBQUkvVCxPQUNsQzNDLElBQVM2akQsRUF6QnJCLFNBQW9CMW5ELEVBQUdzQixHQUNuQixHQUFJdEIsRUFBRTZCLFFBQVVQLEVBQUVPLFFBQVVnRSxFQUFLZSxRQUFRNUcsRUFBRXdHLE1BQU9sRixFQUFFa0YsT0FDaEQsT0FBT3hHLEVBQUVnRSxTQUFTaEUsRUFBRThCLEtBQU9SLEVBQUVRLEtBQ3JDLENBc0I4Qis3RSxDQUFXaDZFLEVBQU1QLElBQ25Db0MsRUFBTUEsRUFBTXJULE9BQVMsR0FBS3ExRCxFQUUxQmhpRCxFQUFNL1QsS0FBSzJSLEVBQ25CLENBRUEsUUFBQXc2RSxDQUFTcjNFLEdBQ0wsSUFBSThULEVBQU1sbkIsS0FBS2tuQixNQUNmQSxFQUFJL1QsTUFBUUMsRUFBS1gsU0FBU3lVLEVBQUkvVCxNQUNsQyxDQUVBLFNBQUF1M0UsQ0FBVXQzRSxHQUNOLElBQUk4VCxFQUFNbG5CLEtBQUtrbkIsTUFDZkEsRUFBSS9ULE1BQVFDLEVBQUtOLGNBQWNvVSxFQUFJL1QsTUFDdkMsQ0FDQSxXQUFBdzNFLENBQVlDLEdBQ1IsSUFBSyxJQUFJdnNGLEVBQUksRUFBR0EsRUFBSXVzRixFQUFLNXJGLE9BQVFYLElBQUssQ0FDbEMsSUFBSTJmLEVBQU00c0UsRUFBS3ZzRixHQUNYNC9DLEVBQVVqK0MsS0FBS3NxRixjQUFjdHNFLEVBQUkvYSxNQUNyQyxJQUFLZzdDLEVBQ0QsTUFBTSxJQUFJLy9DLE1BQU0sZUFBaUI4ZixFQUFJL2EsS0FBTyxzQ0FDaERnN0MsRUFBUWorQyxLQUFNZ2UsRUFBSzRzRSxFQUFNdnNGLEVBQzdCLENBQ0osQ0FFQSxPQUFBdVgsQ0FBUTNTLEVBQU1xUCxFQUFPdEcsR0FDakIsSUFBSWtiLEVBQU1sbkIsS0FBS2tuQixNQUNYalgsRUFBT2hOLEVBQUtnYSxjQUFjM0ssRUFBT3RHLEVBQVNrYixFQUFNQSxFQUFJL1QsTUFBUSxJQUNoRSxPQUFLbEQsR0FFTGpRLEtBQUsxQixLQUFLMlIsR0FDSEEsR0FGSSxJQUdmLENBRUEsUUFBQTQ2RSxDQUFTNW5GLEVBQU1xUCxHQUNYdFMsS0FBS3VsQyxNQUFNam5DLEtBQUssQ0FBRTJFLEtBQU1BLEVBQU1xUCxNQUFPQSxFQUFPdEcsUUFBUyxHQUFJbUgsTUFBT1gsRUFBS2lCLE1BQ3pFLENBRUEsU0FBQXEzRSxHQUNJLElBQUkvWixFQUFPL3dFLEtBQUt1bEMsTUFBTXpuQixNQUN0QixPQUFPOWQsS0FBSzRWLFFBQVFtN0QsRUFBSzl0RSxLQUFNOHRFLEVBQUt6K0QsTUFBT3krRCxFQUFLL2tFLFFBQ3BELEVBRUosU0FBU3NHLEdBQU1sQyxFQUFNd2dFLEVBQU9oekQsRUFBUXZmLEdBQ2hDLE9BQUkrUixFQUFLNFMsU0FDRTVTLEVBQUs0UyxTQUFTNHRELEVBQU9oekQsRUFBUXZmLEdBRS9CK1IsRUFBS2tDLGlCQUFpQitzQixTQUNwQmp2QixFQUFLa0MsTUFBTXMrRCxHQUVYeGdFLEVBQUtrQyxLQUNwQixDQUdBLFNBQVN5NEUsR0FBYTM2RSxFQUFNbk4sR0FDeEIsT0FBT21OLEVBQUsyNkUsY0FBd0IsZUFBUjluRixHQUFpQyxjQUFSQSxHQUFnQyxTQUFSQSxDQUNqRixDQUNBLFNBQVMrbkYsR0FBdUJub0YsR0FDNUIsTUFBOEIsTUFBdkJBLEVBQUlBLEVBQUk3RCxPQUFTLEdBQWE2RCxFQUFJaUYsTUFBTSxFQUFHakYsRUFBSTdELE9BQVMsR0FBSzZELENBQ3hFLENBQ0EsU0FBU29vRixLQUFTLENBNkRsQixNQUFNQyxHQVNGLFdBQUEzcUYsQ0FJQXdSLEVBSUFvNUUsRUFNQXZ0RSxHQUNJNWQsS0FBSytSLE9BQVNBLEVBQ2QvUixLQUFLbXJGLFVBQVlBLEVBQ2pCbnJGLEtBQUs0ZCxPQUFTQSxFQUNkNWQsS0FBS3NxRixjQXZGYixTQUF1QnY0RSxFQUFRNkwsR0FDM0IsSUFBSTArQixFQUFXeC9DLE9BQU91VyxPQUFPLE1BQzdCLElBQUssSUFBSXBRLEtBQVEyYSxFQUFRLENBQ3JCLElBQUl4TixFQUFPd04sRUFBTzNhLEdBQ2xCLEdBQUltTixFQUFLK1osTUFBTyxDQUNaLElBQUloUSxFQUFXcEksRUFBT29JLFNBQVMvSixFQUFLK1osT0FDaEM0Z0UsR0FBYTM2RSxFQUFNbk4sR0FDbkJxNUMsRUFBU3I1QyxHQUFRLENBQUN1WSxFQUFPd0MsRUFBS0osRUFBUXZmLEtBQ2xDbWQsRUFBTXF2RSxTQUFTMXdFLEVBQVU3SCxHQUFNbEMsRUFBTTROLEVBQUtKLEVBQVF2ZixJQUNsRG1kLEVBQU0rdUUsUUFBUVMsR0FBdUJodEUsRUFBSWhTLFVBQ3pDd1AsRUFBTXN2RSxXQUFXLEdBSXJCeHVDLEVBQVNyNUMsRUFBTyxTQUFXLENBQUN1WSxFQUFPd0MsRUFBS0osRUFBUXZmLElBQU1tZCxFQUFNcXZFLFNBQVMxd0UsRUFBVTdILEdBQU1sQyxFQUFNNE4sRUFBS0osRUFBUXZmLElBQ3hHaStDLEVBQVNyNUMsRUFBTyxVQUFZdVksR0FBU0EsRUFBTXN2RSxZQUVuRCxNQUNLLEdBQUkxNkUsRUFBS0gsS0FBTSxDQUNoQixJQUFJa0ssRUFBV3BJLEVBQU9vSSxTQUFTL0osRUFBS0gsTUFDcENxc0MsRUFBU3I1QyxHQUFRLENBQUN1WSxFQUFPd0MsRUFBS0osRUFBUXZmLElBQU1tZCxFQUFNNUYsUUFBUXVFLEVBQVU3SCxHQUFNbEMsRUFBTTROLEVBQUtKLEVBQVF2ZixHQUNqRyxNQUNLLEdBQUkrUixFQUFLZ0QsS0FBTSxDQUNoQixJQUFJZ04sRUFBV3JPLEVBQU9vQixNQUFNL0MsRUFBS2dELE1BQzdCMjNFLEdBQWEzNkUsRUFBTW5OLEdBQ25CcTVDLEVBQVNyNUMsR0FBUSxDQUFDdVksRUFBT3dDLEVBQUtKLEVBQVF2ZixLQUNsQ21kLEVBQU1pdkUsU0FBU3JxRSxFQUFTL00sT0FBT2YsR0FBTWxDLEVBQU00TixFQUFLSixFQUFRdmYsS0FDeERtZCxFQUFNK3VFLFFBQVFTLEdBQXVCaHRFLEVBQUloUyxVQUN6Q3dQLEVBQU1rdkUsVUFBVXRxRSxFQUFTLEdBSTdCazhCLEVBQVNyNUMsRUFBTyxTQUFXLENBQUN1WSxFQUFPd0MsRUFBS0osRUFBUXZmLElBQU1tZCxFQUFNaXZFLFNBQVNycUUsRUFBUy9NLE9BQU9mLEdBQU1sQyxFQUFNNE4sRUFBS0osRUFBUXZmLEtBQzlHaStDLEVBQVNyNUMsRUFBTyxVQUFZdVksR0FBU0EsRUFBTWt2RSxVQUFVdHFFLEdBRTdELEtBQ0ssS0FBSWhRLEVBQUtrVCxPQVVWLE1BQU0sSUFBSW5TLFdBQVcsNkJBQStCcE8sS0FBS21ELFVBQVVrSyxJQVQvRDI2RSxHQUFhMzZFLEVBQU1uTixHQUNuQnE1QyxFQUFTcjVDLEdBQVFnb0YsSUFHakIzdUMsRUFBU3I1QyxFQUFPLFNBQVdnb0YsR0FDM0IzdUMsRUFBU3I1QyxFQUFPLFVBQVlnb0YsR0FLcEMsQ0FDSixDQUlBLE9BSEEzdUMsRUFBUzd0QyxLQUFPLENBQUMrTSxFQUFPd0MsSUFBUXhDLEVBQU0rdUUsUUFBUXZzRSxFQUFJaFMsU0FDbERzd0MsRUFBUzMrQixPQUFTLENBQUNuQyxFQUFPd0MsSUFBUXhDLEVBQU1tdkUsWUFBWTNzRSxFQUFJbFMsVUFDeER3d0MsRUFBU3MxQixVQUFZdDFCLEVBQVNzMUIsV0FBYSxDQUFDcDJELEdBQVNBLEVBQU0rdUUsUUFBUSxNQUM1RGp1QyxDQUNYLENBa0M2Qmd1QyxDQUFjdjRFLEVBQVE2TCxFQUMvQyxDQVVBLEtBQUE1YSxDQUFNeUwsRUFBTTI4RSxFQUFjLENBQUMsR0FDdkIsSUFBcUV6MEUsRUFBakU2RSxFQUFRLElBQUk2dUUsR0FBbUJycUYsS0FBSytSLE9BQVEvUixLQUFLc3FGLGVBQ3JEOXVFLEVBQU1tdkUsWUFBWTNxRixLQUFLbXJGLFVBQVVub0YsTUFBTXlMLEVBQU0yOEUsSUFDN0MsR0FDSXowRSxFQUFNNkUsRUFBTXN2RSxrQkFDUHR2RSxFQUFNK3BCLE1BQU12bUMsUUFDckIsT0FBTzJYLEdBQU8zVyxLQUFLK1IsT0FBT3NQLFlBQVlwRSxlQUMxQyxFQUVKLFNBQVNvdUUsR0FBWXp0RSxFQUFRdmYsR0FDekIsT0FBU0EsRUFBSXVmLEVBQU81ZSxXQUNNLGtCQUFsQjRlLEVBQU92ZixHQUFHNEUsS0FDVixPQUFPMmEsRUFBT3ZmLEdBQUcyekUsT0FDekIsT0FBTyxDQUNYLENBSzhCLElBQUlrWixHQUFlLEdBQVEsR0FBVyxhQUFjLENBQUV0eEMsTUFBTSxJQUFVLENBQ2hHOTFCLFdBQVksQ0FBRXFHLE1BQU8sY0FDckJvd0MsVUFBVyxDQUFFcHdDLE1BQU8sYUFDcEJteUMsVUFBVyxDQUFFbnlDLE1BQU8sYUFDcEJpZ0UsWUFBYSxDQUFFamdFLE1BQU8sY0FBZW5ILFNBQVUsQ0FBQy9QLEVBQUcySyxFQUFRdmYsS0FBTSxDQUFHODVFLE1BQU9rVCxHQUFZenRFLEVBQVF2ZixNQUMvRmcrRCxhQUFjLENBQUVseUMsTUFBTyxlQUFnQm5ILFNBQVUsQ0FBQ2hGLEVBQUtKLEVBQVF2ZixLQUFNLENBQzdEODVELE9BQVFuNkMsRUFBSTgxRCxRQUFRLFVBQVksRUFDaENxRSxNQUFPa1QsR0FBWXp0RSxFQUFRdmYsTUFFbkNvOEQsUUFBUyxDQUFFdHdDLE1BQU8sVUFBV25ILFNBQVVoRixJQUFPLENBQUc2VyxPQUFRN1csRUFBSThELElBQUloYSxNQUFNLE1BQ3ZFNHlELFdBQVksQ0FBRXZ3QyxNQUFPLGFBQWM0Z0UsY0FBYyxHQUNqRGphLE1BQU8sQ0FBRTNtRCxNQUFPLGFBQWNuSCxTQUFVaEYsSUFBTyxDQUFHeGQsT0FBUXdkLEVBQUkreUQsTUFBUSxLQUFPZ2EsY0FBYyxHQUMzRi9sRSxHQUFJLENBQUUvVSxLQUFNLG1CQUNaMHFELE1BQU8sQ0FBRTFxRCxLQUFNLFFBQVMrUyxTQUFVaEYsSUFBTyxDQUNqQzQ4QyxJQUFLNThDLEVBQUk4MUQsUUFBUSxPQUNqQmh2RSxNQUFPa1osRUFBSTgxRCxRQUFRLFVBQVksS0FDL0IvK0IsSUFBSy8yQixFQUFJbFMsU0FBUyxJQUFNa1MsRUFBSWxTLFNBQVMsR0FBR0UsU0FBVyxRQUUzRDBsRSxVQUFXLENBQUV6aEUsS0FBTSxjQUNuQmdyRCxHQUFJLENBQUU3bkQsS0FBTSxNQUNaOG5ELE9BQVEsQ0FBRTluRCxLQUFNLFVBQ2hCcE0sS0FBTSxDQUFFb00sS0FBTSxPQUFRNFAsU0FBVWhGLElBQU8sQ0FDL0I1VyxLQUFNNFcsRUFBSTgxRCxRQUFRLFFBQ2xCaHZFLE1BQU9rWixFQUFJODFELFFBQVEsVUFBWSxRQUV2Q3RELFlBQWEsQ0FBRXA5RCxLQUFNLE9BQVEyM0UsY0FBYyxLQXpCL0MsTUE0Qk1PLEdBQVksQ0FBRTNrRSxLQUFNLEdBQUltTixNQUFPLEdBQUl5M0QsU0FBUyxHQUtsRCxNQUFNQyxHQU1GLFdBQUFqckYsQ0FJQThSLEVBSUFjLEVBQU8xVSxFQUFVLENBQUMsR0FDZHVCLEtBQUtxUyxNQUFRQSxFQUNiclMsS0FBS21ULE1BQVFBLEVBQ2JuVCxLQUFLdkIsUUFBVUEsQ0FDbkIsQ0FLQSxTQUFBZ3RGLENBQVV6L0UsRUFBU3ZOLEVBQVUsQ0FBQyxHQUMxQkEsRUFBVTNCLE9BQU8rTyxPQUFPLENBQUMsRUFBRzdMLEtBQUt2QixRQUFTQSxHQUMxQyxJQUFJK2MsRUFBUSxJQUFJa3dFLEdBQXdCMXJGLEtBQUtxUyxNQUFPclMsS0FBS21ULE1BQU8xVSxHQUVoRSxPQURBK2MsRUFBTW13RSxjQUFjMy9FLEdBQ2J3UCxFQUFNSCxHQUNqQixFQUtKLE1BQU11d0UsR0FBNEIsSUFBSUosR0FBbUIsQ0FDckQsVUFBQTFuRSxDQUFXdEksRUFBT3ZMLEdBQ2R1TCxFQUFNcXdFLFVBQVUsS0FBTSxLQUFNNTdFLEdBQU0sSUFBTXVMLEVBQU1td0UsY0FBYzE3RSxJQUNoRSxFQUNBLFVBQUF5cUQsQ0FBV2wvQyxFQUFPdkwsR0FFZCxNQUFNcXVFLEVBQVlydUUsRUFBS3dJLFlBQVlZLE1BQU0sV0FDbkN5M0QsRUFBUXdOLEVBQWFBLEVBQVU5M0UsT0FBT3NCLE9BQU8sR0FBRyxHQUFLLElBQU8sTUFDbEUwVCxFQUFNc3dFLE1BQU1oYixHQUFTN2dFLEVBQUtxQyxNQUFNOVIsUUFBVSxJQUFNLE1BQ2hEZ2IsRUFBTS9NLEtBQUt3QixFQUFLd0ksYUFBYSxHQUU3QitDLEVBQU1zd0UsTUFBTSxNQUNadHdFLEVBQU1zd0UsTUFBTWhiLEdBQ1p0MUQsRUFBTXV3RSxXQUFXOTdFLEVBQ3JCLEVBQ0EsT0FBQXdxRCxDQUFRai9DLEVBQU92TCxHQUNYdUwsRUFBTXN3RSxNQUFNdHdFLEVBQU13d0UsT0FBTyxJQUFLLzdFLEVBQUtxQyxNQUFNdWlCLE9BQVMsS0FDbERyWixFQUFNNDJELGFBQWFuaUUsR0FBTSxHQUN6QnVMLEVBQU11d0UsV0FBVzk3RSxFQUNyQixFQUNBLGVBQUF1cUQsQ0FBZ0JoL0MsRUFBT3ZMLEdBQ25CdUwsRUFBTXN3RSxNQUFNNzdFLEVBQUtxQyxNQUFNb2hFLFFBQVUsT0FDakNsNEQsRUFBTXV3RSxXQUFXOTdFLEVBQ3JCLEVBQ0EsV0FBQW02RSxDQUFZNXVFLEVBQU92TCxHQUNmdUwsRUFBTXl3RSxXQUFXaDhFLEVBQU0sTUFBTSxLQUFPQSxFQUFLcUMsTUFBTTQ1RSxRQUFVLEtBQU8sS0FDcEUsRUFDQSxZQUFBN3ZCLENBQWE3Z0QsRUFBT3ZMLEdBQ2hCLElBQUlQLEVBQVFPLEVBQUtxQyxNQUFNNmxELE9BQVMsRUFDNUJnMEIsRUFBT3RzQyxPQUFPbndDLEVBQVFPLEVBQUs5QixXQUFhLEdBQUduUCxPQUMzQ2l1QixFQUFRelIsRUFBTXd3RSxPQUFPLElBQUtHLEVBQU8sR0FDckMzd0UsRUFBTXl3RSxXQUFXaDhFLEVBQU1nZCxHQUFPNXVCLElBQzFCLElBQUkrdEYsRUFBT3ZzQyxPQUFPbndDLEVBQVFyUixHQUMxQixPQUFPbWQsRUFBTXd3RSxPQUFPLElBQUtHLEVBQU9DLEVBQUtwdEYsUUFBVW90RixFQUFPLElBQUksR0FFbEUsRUFDQSxTQUFBOXZCLENBQVU5Z0QsRUFBT3ZMLEdBQ2J1TCxFQUFNbXdFLGNBQWMxN0UsRUFDeEIsRUFDQSxTQUFBc3FELENBQVUvK0MsRUFBT3ZMLEdBQ2J1TCxFQUFNNDJELGFBQWFuaUUsR0FDbkJ1TCxFQUFNdXdFLFdBQVc5N0UsRUFDckIsRUFDQSxLQUFBMHFELENBQU1uL0MsRUFBT3ZMLEdBQ1R1TCxFQUFNc3dFLE1BQU0sS0FBT3R3RSxFQUFNNndFLElBQUlwOEUsRUFBS3FDLE1BQU15aUMsS0FBTyxJQUFNLEtBQU85a0MsRUFBS3FDLE1BQU1zb0QsSUFBSTUxRCxRQUFRLFVBQVcsU0FDekZpTCxFQUFLcUMsTUFBTXhOLE1BQVEsS0FBT21MLEVBQUtxQyxNQUFNeE4sTUFBTUUsUUFBUSxLQUFNLE9BQVMsSUFBTSxJQUFNLElBQ3ZGLEVBQ0EsVUFBQTYxRCxDQUFXci9DLEVBQU92TCxFQUFNN0osRUFBUTRLLEdBQzVCLElBQUssSUFBSTNTLEVBQUkyUyxFQUFRLEVBQUczUyxFQUFJK0gsRUFBTytILFdBQVk5UCxJQUMzQyxHQUFJK0gsRUFBT2lJLE1BQU1oUSxHQUFHNEUsTUFBUWdOLEVBQUtoTixLQUU3QixZQURBdVksRUFBTXN3RSxNQUFNLE9BR3hCLEVBQ0EsSUFBQXI5RSxDQUFLK00sRUFBT3ZMLEdBQ1J1TCxFQUFNL00sS0FBS3dCLEVBQUt4QixNQUFPK00sRUFBTTh3RSxXQUNqQyxHQUNELENBQ0NyeEIsR0FBSSxDQUFFdDBDLEtBQU0sSUFBS21OLE1BQU8sSUFBS3kzRCxTQUFTLEVBQU1nQiwwQkFBMEIsR0FDdEVyeEIsT0FBUSxDQUFFdjBDLEtBQU0sS0FBTW1OLE1BQU8sS0FBTXkzRCxTQUFTLEVBQU1nQiwwQkFBMEIsR0FDNUV2bEYsS0FBTSxDQUNGMmYsS0FBSSxDQUFDbkwsRUFBT3BJLEVBQU1oTixFQUFRNEssS0FDdEJ3SyxFQUFNOHdFLFdBMkJsQixTQUFvQnRsRixFQUFNWixFQUFRNEssR0FDOUIsR0FBSWhLLEVBQUtzTCxNQUFNeE4sUUFBVSxRQUFRc1osS0FBS3BYLEVBQUtzTCxNQUFNbEwsTUFDN0MsT0FBTyxFQUNYLElBQUk0RSxFQUFVNUYsRUFBT2lJLE1BQU0yQyxHQUMzQixTQUFLaEYsRUFBUXdDLFFBQVV4QyxFQUFReUMsTUFBUXpILEVBQUtzTCxNQUFNbEwsTUFBUTRFLEVBQVFtSCxNQUFNbkgsRUFBUW1ILE1BQU1uVSxPQUFTLElBQU1nSSxLQUU5RmdLLEdBQVM1SyxFQUFPK0gsV0FBYSxJQUFNbkgsRUFBSytMLFFBQVEzTSxFQUFPaUksTUFBTTJDLEVBQVEsR0FBR21DLE9BQ25GLENBbEMrQnE1RSxDQUFXcDVFLEVBQU1oTixFQUFRNEssR0FDckN3SyxFQUFNOHdFLFdBQWEsSUFBTSxLQUVwQyxLQUFBeDRELENBQU10WSxFQUFPcEksRUFBTWhOLEVBQVE0SyxHQUN2QixJQUFJLFdBQUVzN0UsR0FBZTl3RSxFQUVyQixPQURBQSxFQUFNOHdFLGdCQUFhamdGLEVBQ1ppZ0YsRUFBYSxJQUNkLEtBQU9sNUUsRUFBS2QsTUFBTWxMLEtBQUtwQyxRQUFRLFdBQVksU0FBV29PLEVBQUtkLE1BQU14TixNQUFRLEtBQUtzTyxFQUFLZCxNQUFNeE4sTUFBTUUsUUFBUSxLQUFNLFVBQVksSUFBTSxHQUN6SSxFQUNBdW1GLFNBQVMsR0FFYnpyRSxLQUFNLENBQUU2RyxLQUFJLENBQUM4bEUsRUFBUUMsRUFBT3RtRixFQUFRNEssSUFBZ0IyN0UsR0FBYXZtRixFQUFPaUksTUFBTTJDLElBQVMsR0FDbkY4aUIsTUFBSyxDQUFDMjRELEVBQVFDLEVBQU90bUYsRUFBUTRLLElBQWdCMjdFLEdBQWF2bUYsRUFBT2lJLE1BQU0yQyxFQUFRLEdBQUksR0FDbkY0N0UsUUFBUSxLQUVoQixTQUFTRCxHQUFhMThFLEVBQU13ekIsR0FDeEIsSUFBbUJ4cEIsRUFBZjR5RSxFQUFRLE1BQVVybUQsRUFBTSxFQUM1QixHQUFJdjJCLEVBQUt6QixPQUNMLEtBQU95TCxFQUFJNHlFLEVBQU0zcUUsS0FBS2pTLEVBQUt4QixPQUN2QiszQixFQUFNcDNCLEtBQUtPLElBQUk2MkIsRUFBS3ZzQixFQUFFLEdBQUdqYixRQUNqQyxJQUFJOEQsRUFBUzBqQyxFQUFNLEdBQUsvQyxFQUFPLEVBQUksS0FBTyxJQUMxQyxJQUFLLElBQUlwbEMsRUFBSSxFQUFHQSxFQUFJbW9DLEVBQUtub0MsSUFDckJ5RSxHQUFVLElBR2QsT0FGSTBqQyxFQUFNLEdBQUsvQyxFQUFPLElBQ2xCM2dDLEdBQVUsS0FDUEEsQ0FDWCxDQWNBLE1BQU00b0YsR0FJRixXQUFBbnJGLENBSUE4UixFQUlBYyxFQUlBMVUsR0FDSXVCLEtBQUtxUyxNQUFRQSxFQUNiclMsS0FBS21ULE1BQVFBLEVBQ2JuVCxLQUFLdkIsUUFBVUEsRUFJZnVCLEtBQUs4c0YsTUFBUSxHQUliOXNGLEtBQUtxYixJQUFNLEdBSVhyYixLQUFLK3NGLE9BQVMsS0FJZC9zRixLQUFLc3NGLGdCQUFhamdGLEVBSWxCck0sS0FBS3M5RCxjQUFlLEVBSXBCdDlELEtBQUtndEYsYUFBYyxPQUNtQixJQUEzQmh0RixLQUFLdkIsUUFBUXd1RixhQUNwQmp0RixLQUFLdkIsUUFBUXd1RixZQUFhLFFBQ2UsSUFBbENqdEYsS0FBS3ZCLFFBQVF5dUYsb0JBQ3BCbHRGLEtBQUt2QixRQUFReXVGLGtCQUFvQixhQUN6QyxDQUlBLFVBQUFDLENBQVd2L0UsRUFBTyxHQUNkLEdBQUk1TixLQUFLK3NGLE9BQVEsQ0FHYixHQUZLL3NGLEtBQUtvdEYsWUFDTnB0RixLQUFLcWIsS0FBTyxNQUNaek4sRUFBTyxFQUFHLENBQ1YsSUFBSXkvRSxFQUFXcnRGLEtBQUs4c0YsTUFDaEJuZ0IsRUFBTyxPQUFPenFELEtBQUttckUsR0FDbkIxZ0IsSUFDQTBnQixFQUFXQSxFQUFTdmxGLE1BQU0sRUFBR3VsRixFQUFTcnVGLE9BQVMydEUsRUFBSyxHQUFHM3RFLFNBQzNELElBQUssSUFBSVgsRUFBSSxFQUFHQSxFQUFJdVAsRUFBTXZQLElBQ3RCMkIsS0FBS3FiLEtBQU9neUUsRUFBVyxJQUMvQixDQUNBcnRGLEtBQUsrc0YsT0FBUyxJQUNsQixDQUNKLENBSUEsT0FBQU8sQ0FBUXQ2RSxHQUNKLElBQUkrOUQsRUFBTy93RSxLQUFLbVQsTUFBTUgsR0FDdEIsSUFBSys5RCxFQUFNLENBQ1AsSUFBNEIsSUFBeEIvd0UsS0FBS3ZCLFFBQVE4dUYsT0FDYixNQUFNLElBQUlydkYsTUFBTSxlQUFlOFUsMENBQ25DKzlELEVBQU91YSxFQUNYLENBQ0EsT0FBT3ZhLENBQ1gsQ0FPQSxTQUFBOGEsQ0FBVWlCLEVBQU9VLEVBQVl2OUUsRUFBTXZDLEdBQy9CLElBQUltL0MsRUFBTTdzRCxLQUFLOHNGLE1BQ2Y5c0YsS0FBSzhyRixNQUFvQixNQUFkMEIsRUFBcUJBLEVBQWFWLEdBQzdDOXNGLEtBQUs4c0YsT0FBU0EsRUFDZHAvRSxJQUNBMU4sS0FBSzhzRixNQUFRamdDLEVBQ2I3c0QsS0FBSytyRixXQUFXOTdFLEVBQ3BCLENBSUEsT0FBQW05RSxHQUNJLE1BQU8sVUFBVWh2RSxLQUFLcGUsS0FBS3FiLElBQy9CLENBSUEsYUFBQW95RSxHQUNTenRGLEtBQUtvdEYsWUFDTnB0RixLQUFLcWIsS0FBTyxLQUNwQixDQU1BLEtBQUF5d0UsQ0FBTTkvRSxHQUNGaE0sS0FBS210RixhQUNEbnRGLEtBQUs4c0YsT0FBUzlzRixLQUFLb3RGLFlBQ25CcHRGLEtBQUtxYixLQUFPcmIsS0FBSzhzRixPQUNqQjlnRixJQUNBaE0sS0FBS3FiLEtBQU9yUCxFQUNwQixDQUlBLFVBQUErL0UsQ0FBVzk3RSxHQUNQalEsS0FBSytzRixPQUFTOThFLENBQ2xCLENBS0EsSUFBQXhCLENBQUtBLEVBQU1tK0UsR0FBUyxHQUNoQixJQUFJOVEsRUFBUXJ0RSxFQUFLb1AsTUFBTSxNQUN2QixJQUFLLElBQUl4ZixFQUFJLEVBQUdBLEVBQUl5OUUsRUFBTTk4RSxPQUFRWCxJQUM5QjJCLEtBQUs4ckYsU0FFQWMsR0FBeUIsS0FBZjlRLEVBQU16OUUsR0FBRyxJQUFhLGVBQWUrZixLQUFLcGUsS0FBS3FiLE9BQzFEcmIsS0FBS3FiLElBQU1yYixLQUFLcWIsSUFBSXZULE1BQU0sRUFBRzlILEtBQUtxYixJQUFJcmMsT0FBUyxHQUFLLE9BQ3hEZ0IsS0FBS3FiLEtBQU91eEUsRUFBUzVzRixLQUFLcXNGLElBQUl2USxFQUFNejlFLEdBQUkyQixLQUFLczlELGNBQWdCd2UsRUFBTXo5RSxHQUMvREEsR0FBS3k5RSxFQUFNOThFLE9BQVMsSUFDcEJnQixLQUFLcWIsS0FBTyxLQUV4QixDQUlBLE1BQUFnM0QsQ0FBT3BpRSxFQUFNN0osRUFBUTRLLEdBQ2pCLEdBQUloUixLQUFLcVMsTUFBTXBDLEVBQUtoTixLQUFLK1AsTUFDckJoVCxLQUFLcVMsTUFBTXBDLEVBQUtoTixLQUFLK1AsTUFBTWhULEtBQU1pUSxFQUFNN0osRUFBUTRLLE9BRTlDLENBQ0QsSUFBNEIsSUFBeEJoUixLQUFLdkIsUUFBUTh1RixPQUNiLE1BQU0sSUFBSXJ2RixNQUFNLGVBQWlCK1IsRUFBS2hOLEtBQUsrUCxLQUFPLHdDQUU1Qy9DLEVBQUtoTixLQUFLa04sU0FDWkYsRUFBS2hOLEtBQUt3VSxjQUNWelgsS0FBS295RSxhQUFhbmlFLEdBRWxCalEsS0FBSzJyRixjQUFjMTdFLEdBQ25CQSxFQUFLSSxTQUNMclEsS0FBSytyRixXQUFXOTdFLEdBRTVCLENBQ0osQ0FJQSxhQUFBMDdFLENBQWN2bEYsR0FDVkEsRUFBT3dFLFNBQVEsQ0FBQ3FGLEVBQU1nRCxFQUFHNVUsSUFBTTJCLEtBQUtxeUUsT0FBT3BpRSxFQUFNN0osRUFBUS9ILElBQzdELENBSUEsWUFBQSt6RSxDQUFhaHNFLEVBQVFzbkYsR0FBaUIsR0FDbEMxdEYsS0FBS3M5RCxhQUFlb3dCLEVBQ3BCLElBQUlyd0UsRUFBUyxHQUFJc3dFLEVBQVcsR0FDeEJDLEVBQVcsQ0FBQzM5RSxFQUFNdFIsRUFBUXFTLEtBQzFCLElBQUltQyxFQUFRbEQsRUFBT0EsRUFBS2tELE1BQVEsR0FJNUJsRCxHQUFRQSxFQUFLaE4sS0FBSytQLE9BQVNoVCxLQUFLdkIsUUFBUXl1RixvQkFDeEMvNUUsRUFBUUEsRUFBTXpPLFFBQU91VixJQUNqQixHQUFJakosRUFBUSxHQUFLNUssRUFBTytILFdBQ3BCLE9BQU8sRUFDWCxJQUFJa0osRUFBT2pSLEVBQU9pSSxNQUFNMkMsRUFBUSxHQUNoQyxPQUFPaUosRUFBRWxILFFBQVFzRSxFQUFLbEUsVUFBWWtFLEVBQUs3SSxRQUFVLEtBQUs0UCxLQUFLL0csRUFBSzVJLE1BQU0sS0FFOUUsSUFBSW8vRSxFQUFVRixFQUlkLEdBSEFBLEVBQVcsR0FHUDE5RSxHQUFRQSxFQUFLekIsUUFBVTJFLEVBQU1pUCxNQUFLaFAsSUFDbEMsSUFBSTI5RCxFQUFPL3dFLEtBQUtzdEYsUUFBUWw2RSxFQUFLblEsS0FBSytQLE1BQ2xDLE9BQU8rOUQsR0FBUUEsRUFBS3diLDJCQUE2Qm41RSxFQUFLTCxRQUFRc0ssRUFBTyxJQUNyRSxDQUNBLElBQUtwSyxFQUFHNjZFLEVBQU1oN0QsR0FBUSxlQUFlNVEsS0FBS2pTLEVBQUt4QixNQUMzQ3EvRSxJQUNBRCxHQUFXQyxHQUNYNzlFLEVBQU82aUIsRUFBTzdpQixFQUFLVSxTQUFTbWlCLEdBQVEsUUFFaEMzZixFQUFRa0ssR0FFcEIsQ0FDQSxHQUFJcE4sR0FBUUEsRUFBS3pCLFFBQVUyRSxFQUFNaVAsTUFBS2hQLElBQ2xDLElBQUkyOUQsRUFBTy93RSxLQUFLc3RGLFFBQVFsNkUsRUFBS25RLEtBQUsrUCxNQUNsQyxPQUFPKzlELEdBQVFBLEVBQUt3YiwyQkFDZnY3RSxHQUFTNUssRUFBTytILFdBQWEsSUFBTWlGLEVBQUtMLFFBQVEzTSxFQUFPaUksTUFBTTJDLEVBQVEsR0FBR21DLE9BQU8sSUFDcEYsQ0FDQSxJQUFLRixFQUFHNmYsRUFBTWk3RCxHQUFTLGdCQUFnQjdyRSxLQUFLalMsRUFBS3hCLE1BQzdDcy9FLElBQ0FKLEVBQVdJLEdBQ1g5OUUsRUFBTzZpQixFQUFPN2lCLEVBQUtVLFNBQVNtaUIsR0FBUSxRQUVoQzNmLEVBQVFrSyxHQUVwQixDQUNBLElBQUkxTyxFQUFRd0UsRUFBTW5VLE9BQVNtVSxFQUFNQSxFQUFNblUsT0FBUyxHQUFLLEtBQ2pEZ3ZGLEVBQVFyL0UsSUFBa0QsSUFBekMzTyxLQUFLc3RGLFFBQVEzK0UsRUFBTTFMLEtBQUsrUCxNQUFNNDVFLE9BQy9DcG1ELEVBQU1yekIsRUFBTW5VLFFBQVVndkYsRUFBUSxFQUFJLEdBS3RDaDZDLEVBQU8sSUFBSyxJQUFJMzFDLEVBQUksRUFBR0EsRUFBSW1vQyxFQUFLbm9DLElBQUssQ0FDakMsSUFBSStVLEVBQU9ELEVBQU05VSxHQUNqQixJQUFLMkIsS0FBS3N0RixRQUFRbDZFLEVBQUtuUSxLQUFLK1AsTUFBTXU0RSxRQUM5QixNQUNKLElBQUssSUFBSTc4RSxFQUFJLEVBQUdBLEVBQUkyTyxFQUFPcmUsT0FBUTBQLElBQUssQ0FDcEMsSUFBSTZCLEVBQVE4TSxFQUFPM08sR0FDbkIsSUFBSzFPLEtBQUtzdEYsUUFBUS84RSxFQUFNdE4sS0FBSytQLE1BQU11NEUsUUFDL0IsTUFDSixHQUFJbjRFLEVBQUtsQyxHQUFHWCxHQUFRLENBQ1psUyxFQUFJcVEsRUFDSnlFLEVBQVFBLEVBQU1yTCxNQUFNLEVBQUc0RyxHQUFHdkQsT0FBT2lJLEdBQU1qSSxPQUFPZ0ksRUFBTXJMLE1BQU00RyxFQUFHclEsSUFBSThNLE9BQU9nSSxFQUFNckwsTUFBTXpKLEVBQUksRUFBR21vQyxJQUN0RjkzQixFQUFJclEsSUFDVDhVLEVBQVFBLEVBQU1yTCxNQUFNLEVBQUd6SixHQUFHOE0sT0FBT2dJLEVBQU1yTCxNQUFNekosRUFBSSxFQUFHcVEsSUFBSXZELE9BQU9pSSxHQUFNakksT0FBT2dJLEVBQU1yTCxNQUFNNEcsRUFBRzgzQixLQUMvRixTQUFTd04sQ0FDYixDQUNKLENBQ0osQ0FFQSxJQUFJcG9CLEVBQU8sRUFDWCxLQUFPQSxFQUFPeGMsS0FBS0MsSUFBSWdPLEVBQU9yZSxPQUFRd25DLElBQVFyekIsRUFBTXlZLEdBQU0xYSxHQUFHbU0sRUFBT3VPLE9BQzlEQSxFQUVOLEtBQU9BLEVBQU92TyxFQUFPcmUsUUFDakJnQixLQUFLeU8sS0FBS3pPLEtBQUtpdUYsV0FBVzV3RSxFQUFPUyxPQUFPLEVBQU8xWCxFQUFRNEssSUFBUSxHQUtuRSxHQUhJNjhFLEdBQ0E3dEYsS0FBS3lPLEtBQUtvL0UsR0FFVjU5RSxFQUFNLENBQ04sS0FBT29OLEVBQU9yZSxPQUFTd25DLEdBQUssQ0FDeEIsSUFBSXphLEVBQU01WSxFQUFNa0ssRUFBT3JlLFFBQ3ZCcWUsRUFBTy9lLEtBQUt5dEIsR0FDWi9yQixLQUFLeU8sS0FBS3pPLEtBQUtpdUYsV0FBV2xpRSxHQUFLLEVBQU0zbEIsRUFBUTRLLElBQVEsR0FDckRoUixLQUFLczlELGNBQWUsQ0FDeEIsQ0FHSTB3QixHQUFTLzlFLEVBQUt6QixPQUNkeE8sS0FBS3lPLEtBQUt6TyxLQUFLaXVGLFdBQVd0L0UsR0FBTyxFQUFNdkksRUFBUTRLLEdBQVNmLEVBQUt4QixLQUN6RHpPLEtBQUtpdUYsV0FBV3QvRSxHQUFPLEVBQU92SSxFQUFRNEssRUFBUSxJQUFJLEdBRXREaFIsS0FBS3F5RSxPQUFPcGlFLEVBQU03SixFQUFRNEssR0FDOUJoUixLQUFLczlELGNBQWUsQ0FDeEIsRUFPS3J0RCxhQUFtQyxFQUFTQSxFQUFLekIsU0FBV3lCLEVBQUtyQixTQUFXLElBQzdFNU8sS0FBS3M5RCxjQUFlLEVBQ3hCLEVBRUpsM0QsRUFBT3dFLFFBQVFnakYsR0FDZkEsRUFBUyxLQUFNLEVBQUd4bkYsRUFBTytILFlBQ3pCbk8sS0FBS3M5RCxjQUFlLENBQ3hCLENBT0EsVUFBQTJ1QixDQUFXaDhFLEVBQU02OEUsRUFBT1UsR0FDaEJ4dEYsS0FBSytzRixRQUFVL3NGLEtBQUsrc0YsT0FBTzlwRixNQUFRZ04sRUFBS2hOLEtBQ3hDakQsS0FBS210RixXQUFXLEdBQ1hudEYsS0FBS2d0RixhQUNWaHRGLEtBQUttdEYsV0FBVyxHQUNwQixJQUFJZSxPQUFxQyxJQUFwQmorRSxFQUFLcUMsTUFBTTZsRSxNQUF1QmxvRSxFQUFLcUMsTUFBTTZsRSxNQUFRbjRFLEtBQUt2QixRQUFRd3VGLFdBQ25Ga0IsRUFBWW51RixLQUFLZ3RGLFlBQ3JCaHRGLEtBQUtndEYsWUFBY2tCLEVBQ25CaitFLEVBQUtyRixTQUFRLENBQUN5RCxFQUFPNEUsRUFBRzVVLEtBQ2hCQSxHQUFLNnZGLEdBQ0xsdUYsS0FBS210RixXQUFXLEdBQ3BCbnRGLEtBQUs2ckYsVUFBVWlCLEVBQU9VLEVBQVdudkYsR0FBSTRSLEdBQU0sSUFBTWpRLEtBQUtxeUUsT0FBT2hrRSxFQUFPNEIsRUFBTTVSLElBQUcsSUFFakYyQixLQUFLZ3RGLFlBQWNtQixDQUN2QixDQU1BLEdBQUE5QixDQUFJeHBGLEVBQUt1ckYsR0FBYyxHQU1uQixPQUxBdnJGLEVBQU1BLEVBQUltQyxRQUFRLGlCQUFpQixDQUFDaVYsRUFBRzViLElBQVcsS0FBTDRiLEdBQVk1YixFQUFJLEdBQUtBLEVBQUksRUFBSXdFLEVBQUk3RCxRQUFVNkQsRUFBSXhFLEVBQUksR0FBR2diLE1BQU0sT0FBU3hXLEVBQUl4RSxFQUFJLEdBQUdnYixNQUFNLE1BQVFZLEVBQUksS0FBT0EsSUFDbEptMEUsSUFDQXZyRixFQUFNQSxFQUFJbUMsUUFBUSxrQkFBbUIsUUFBUUEsUUFBUSx1QkFBd0IsWUFBWUEsUUFBUSxnQkFBaUIsV0FDbEhoRixLQUFLdkIsUUFBUTR2Rix3QkFDYnhyRixFQUFNQSxFQUFJbUMsUUFBUWhGLEtBQUt2QixRQUFRNHZGLHNCQUF1QixTQUNuRHhyRixDQUNYLENBSUEsS0FBQXlyRixDQUFNenJGLEdBQ0YsSUFBSXlqQixHQUE0QixHQUFyQnpqQixFQUFJMFksUUFBUSxLQUFhLE1BQTRCLEdBQXJCMVksRUFBSTBZLFFBQVEsS0FBYSxLQUFPLEtBQzNFLE9BQU8rSyxFQUFLLEdBQUt6akIsRUFBTXlqQixFQUFLLEVBQ2hDLENBSUEsTUFBQTBsRSxDQUFPbnBGLEVBQUswSixHQUNSLElBQUk4TyxFQUFNLEdBQ1YsSUFBSyxJQUFJaGQsRUFBSSxFQUFHQSxFQUFJa08sRUFBR2xPLElBQ25CZ2QsR0FBT3hZLEVBQ1gsT0FBT3dZLENBQ1gsQ0FJQSxVQUFBNHlFLENBQVc3NkUsRUFBTXVULEVBQU12Z0IsRUFBUTRLLEdBQzNCLElBQUkrL0QsRUFBTy93RSxLQUFLc3RGLFFBQVFsNkUsRUFBS25RLEtBQUsrUCxNQUM5QnRULEVBQVFpbkIsRUFBT29xRCxFQUFLcHFELEtBQU9vcUQsRUFBS2o5QyxNQUNwQyxNQUF1QixpQkFBVHAwQixFQUFvQkEsRUFBUUEsRUFBTU0sS0FBTW9ULEVBQU1oTixFQUFRNEssRUFDeEUsQ0FNQSxzQkFBQXU5RSxDQUF1QjkvRSxHQUNuQixNQUFPLENBQ0hvL0UsU0FBVXAvRSxFQUFLNEssTUFBTSxXQUFhLE1BQUNoTixJQUFZLEdBQy9Dc2hGLFVBQVdsL0UsRUFBSzRLLE1BQU0sV0FBYSxNQUFDaE4sSUFBWSxHQUV4RCxFQ2oxQkcsTUFBTW1pRixHQUFxQixJQUFJaEQsR0FDcEMsQ0FDRSxRQUFBanZCLENBQVMvZ0QsRUFBT3ZMLEVBQU03SixFQUFRNEssR0FDNUJ3SyxFQUFNc3dFLE1BQU0sTUFDWnR3RSxFQUFNNDJELGFBQWFuaUUsR0FDbkJ1TCxFQUFNdXdFLFdBQVc5N0UsRUFDbkIsRUFDQSxRQUFBdXNELENBQVNoaEQsRUFBT3ZMLEVBQU03SixFQUFRNEssR0FDNUJ3SyxFQUFNc3dFLE1BQU0sT0FDWnR3RSxFQUFNNDJELGFBQWFuaUUsR0FDbkJ1TCxFQUFNdXdFLFdBQVc5N0UsRUFDbkIsRUFDQSxRQUFBd3NELENBQVNqaEQsRUFBT3ZMLEVBQU03SixFQUFRNEssR0FDNUJ3SyxFQUFNc3dFLE1BQU0sUUFDWnR3RSxFQUFNNDJELGFBQWFuaUUsR0FDbkJ1TCxFQUFNdXdFLFdBQVc5N0UsRUFDbkIsRUFDQSxjQUFBa3NELENBQWUzZ0QsRUFBT3ZMLEVBQU03SixFQUFRNEssR0FDbEMsTUFBTXk5RSxFQUNKeCtFLEVBQUtxQyxNQUFNd3BELFNBQVdGLEdBQWVJLEtBQU8sT0FBUyxPQUN2RHhnRCxFQUFNc3dFLE1BQU0yQyxHQUNaanpFLEVBQU00MkQsYUFBYW5pRSxHQUNuQnVMLEVBQU11d0UsV0FBVzk3RSxFQUNuQixFQUNBLFNBQUFzcUQsQ0FBVS8rQyxFQUFPdkwsRUFBTTdKLEVBQVE0SyxHQUM3QixHQUFzQixJQUFsQmYsRUFBS3JCLFNBSVAsT0FGQTRNLEVBQU1zd0UsTUFBTSxVQUNadHdFLEVBQU11d0UsV0FBVzk3RSxHQUduQjI3RSxHQUEwQnY1RSxNQUFNa29ELFVBQVUvK0MsRUFBT3ZMLEVBQU03SixFQUFRNEssRUFDakUsRUFDQSxTQUFBc3JELENBQVU5Z0QsRUFBT3ZMLEVBQU03SixFQUFRNEssR0FDN0I0NkUsR0FBMEJ2NUUsTUFBTWlxRCxVQUFVOWdELEVBQU92TCxFQUFNN0osRUFBUTRLLEVBQ2pFLEVBQ0EsWUFBQXFyRCxDQUFhN2dELEVBQU92TCxFQUFNN0osRUFBUTRLLEdBQ2hDNDZFLEdBQTBCdjVFLE1BQU1ncUQsYUFBYTdnRCxFQUFPdkwsRUFBTTdKLEVBQVE0SyxFQUNwRSxFQUNBLGNBQUFvckQsQ0FBZTVnRCxFQUFPdkwsRUFBTTdKLEVBQVE0SyxHQUNsQzQ2RSxHQUEwQnY1RSxNQUFNKzNFLFlBQVk1dUUsRUFBT3ZMLEVBQU03SixFQUFRNEssRUFDbkUsRUFDQSxJQUFBdkMsQ0FBSytNLEVBQU92TCxFQUFNN0osRUFBUTRLLEdBQ3hCNDZFLEdBQTBCdjVFLE1BQU01RCxLQUFLK00sRUFBT3ZMLEVBQU03SixFQUFRNEssRUFDNUQsRUFDQSxVQUFBMHBELENBQVdsL0MsRUFBT3ZMLEVBQU03SixFQUFRNEssR0FDMUJmLEVBQUtxQyxNQUFNOG9ELEtBQ2I1L0MsRUFBTXN3RSxNQUFNNzdFLEVBQUt3SSxhQUNqQitDLEVBQU1peUUsaUJBRU43QixHQUEwQnY1RSxNQUFNcW9ELFdBQVdsL0MsRUFBT3ZMLEVBQU03SixFQUFRNEssRUFFcEUsR0FDRCwrQkFFSTQ2RSxHQUEwQno0RSxPQUFLLENBQ2xDNHdELFlBQWE2bkIsR0FBMEJ6NEUsTUFBTW5NLEtBQzdDOFksS0FBTSxDQUNKZ1UsTUFBSyxDQUFDdFksRUFBT3BJLElBQ0pBLEVBQUtkLE1BQU04b0QsSUFBeUIsR0FBSyxJQUVsRHd4QixRQUFRLEVBQ1JqbUUsS0FBSSxDQUFDbkwsRUFBT3BJLElBQ0hBLEVBQUtkLE1BQU04b0QsSUFBeUIsR0FBSyxRQU1sRHN6QixHQUFtQixLQUNuQixHQUFRQSxHQUFpQnhGLEtBQUt6UixNQUFNcjZFLFVBQVVxMkUsTUFLOUNrYixHQUFpQkQsR0FBaUIvd0UsT0FBTzQ1RCxNQUFNOUUsU0FBUyxTQUN4RG1jLEdBRUpGLEdBQWlCL3dFLE9BQU80NUQsTUFBTWhGLFVBQVVvYyxJQUFnQjdiLEdBRXBEK2IsR0FBOEIsQ0FBQyxNQUFPLE1BQU8sT0FFbkRILEdBQWlCekUsS0FBS2xhLElBQ3BCQSxFQUFHbVosS0FBSzNSLE1BQU16Z0UsTUFBTSxRQUFTLGtCQUFtQmc0RSxJQUM5QyxNQUFNQyxFQUFXRCxFQUFVbDBCLElBQUkvOEMsTUFBTSxNQUNyQyxJQUFJbXhFLEdBQWtCLEVBQ2xCQyxHQUFlLEVBOEJuQixPQTVCQUgsRUFBVWx4RSxPQUFTa3hFLEVBQVVseEUsT0FBT3ZlLEtBQUt1eEUsSUFJdkMsR0FISW9lLEdBQWtDLFdBQWZwZSxFQUFNM3RFLE9BQzNCMnRFLEVBQU01a0UsUUFBVTRrRSxFQUFNNWtFLFFBQVFsRSxNQUFNLEdBQUdvbkYsWUFFdEIsbUJBQWZ0ZSxFQUFNM3RFLEtBQTJCLENBQ25DLE1BQU91MkUsRUFBV08sR0FBV25KLEVBQU12eEUsSUFDN0IyTSxFQUFVK2lGLEVBQVN2VixHQUN6QixHQUFJcVYsR0FBNEJqb0YsU0FBU29GLEVBQVFsRSxNQUFNLEVBQUcsSUFBSyxDQUM3RG1uRixHQUFlLEVBQ2ZELEdBQWtCLEVBQ2xCLE1BQU0sTUFBRXZiLEdBQVVxYixFQUNabGUsRUFBUSxJQUFJNkMsRUFBTSxzQkFBdUIsTUFBTyxHQU90RCxPQU5BN0MsRUFBTStDLFNBQVMsQ0FDYixTQUM2QixNQUE3QjNuRSxFQUFRLEdBQUcvTSxjQUNQMjhELEdBQWVJLEtBQUt6OUQsV0FDcEJxOUQsR0FBZUcsTUFBTXg5RCxhQUVwQnF5RSxDQUNULENBQ0YsTUFBTyxHQUFJb2UsR0FBa0Msb0JBQWZwZSxFQUFNM3RFLEtBRWxDLE9BREErckYsR0FBa0IsRUFDWCxJQUFJRixFQUFVcmIsTUFBTSx1QkFBd0IsT0FBUSxHQUc3RCxPQUFPN0MsQ0FBSyxJQUdQcWUsQ0FBWSxJQUdyQmxmLEVBQUdweUQsT0FBTzQ1RCxNQUFNN1ksR0FBRyxTQUFVeXdCLElBQzNCLE1BQVFqaEYsSUFBS2toRixHQUFnQkQsRUFDdkJyc0YsRUFBUzhyRixHQUFpQk8sR0FDaEMsR0FBSXJzRixFQUFRLENBQ1YsTUFBTXVzRixFQUFZLElBQUlGLEVBQVkxYixNQUFNLGNBQWUsT0FBUSxHQUMvRDRiLEVBQVUzYixPQUFTLElBQ25CMmIsRUFBVXJqRixRQUFVbWpGLEVBQVl2MEIsSUFBSTl5RCxNQUFNc25GLEVBQWFELEVBQVlqaEYsS0FDbkVtaEYsRUFBVXhiLFFBQVF6WSxHQUF1QixRQUN6Qyt6QixFQUFZdnhFLE9BQU91eEUsRUFBWXZ4RSxPQUFPNWUsT0FBUyxHQUFLcXdGLENBQ3RELENBQ0EsT0FBT3ZzRixDQUFNLEdBQ2IsSUFHSixNQUFNd3NGLEdBbUJKLGtCQUFPQyxDQUFZQyxHQUNqQixPQUFPQSxFQUFVeHFGLFFBQVEsUUFBUyxJQUFJQSxRQUFRLFNBQVUsR0FDMUQsQ0FFQSxXQUFBekUsQ0FBWXE2RCxHQWdESixLQUFBNjBCLFVBQVksS0FDbEIsTUFBTSxjQUFFQyxFQUFhLFVBQUVDLEdBQWMzdkYsS0FFckMsSUFBa0IsSUFBZDJ2RixFQUFxQixDQUN2QixNQUNFdHdGLEtBQU0wNkUsRUFBU1AsSUFDYmtXLEVBQWMsR0FDWkwsRUFBWSxJQUFJLEdBQU0sUUFBUyxPQUFRLEdBTTdDLE9BTEFBLEVBQVVyakYsUUFBVWhNLEtBQUs0NkQsSUFDdEIvOEMsTUFBTSxNQUNOL1YsTUFBTWl5RSxFQUFTUCxHQUNmNW5FLEtBQUssTUFDUnk5RSxFQUFVMWIsU0FBUyxDQUFDdlksR0FBdUIsU0FDcEMsQ0FBQ2kwQixFQUNWLENBRUEsT0FBT0ssQ0FBYSxFQUdkLEtBQUFFLG1CQUFxQixLQUMzQjV2RixLQUFLMHZGLGNBQWdCLEdBQ3JCMXZGLEtBQUs2dkYsV0FBYSxHQUNsQjd2RixLQUFLMnZGLFdBQVksQ0FBSSxFQXJFckIzdkYsS0FBSzR2RixxQkFDTDV2RixLQUFLNDZELElBQU1BLENBQ2IsQ0FFQSxJQUFBdlEsQ0FBS3VtQixHQUNILE1BQU0sUUFBRXFCLEdBQVlyQixFQUNwQixJQUFJLEtBQUUzdEUsR0FBUzJ0RSxFQVlmLEdBWEEzdEUsRUFBT3FzRixHQUFtQkMsWUFBWXRzRixHQUV0Q2pELEtBQUswdkYsY0FBY3B4RixLQUFLc3lFLElBR3dCLElBQTlDMGUsR0FBbUJRLGFBQWF4N0MsSUFBSXJ4QyxJQUMzQixXQUFUQSxJQUVBakQsS0FBSzJ2RixXQUFZLEdBR2YzdkYsS0FBSzJ2RixXQUFhM3ZGLEtBQUs2dkYsV0FBVzd3RixRQUFVaXpFLEdBQVcsRUFBRyxDQUM1RCxNQUFNcGdELEVBQWF5OUQsR0FBbUJDLFlBQ3BDdnZGLEtBQUs2dkYsV0FBVzd2RixLQUFLNnZGLFdBQVc3d0YsT0FBUyxHQUFHaUUsT0FJdUIsSUFBbkVxc0YsR0FBbUJRLGFBQWE3eUYsSUFBSTQwQixHQUFZanJCLFNBQVMzRCxLQUV6RGpELEtBQUsydkYsV0FBWSxFQUVyQixDQVVBLEdBUkkxZCxFQUFVLEdBQ1pqeUUsS0FBSzZ2RixXQUFXdnhGLEtBQUtzeUUsR0FHbkJxQixFQUFVLEdBQ1pqeUUsS0FBSzZ2RixXQUFXL3hFLE1BR2EsSUFBM0I5ZCxLQUFLNnZGLFdBQVc3d0YsT0FBYyxDQUNoQyxNQUFNcWMsRUFBTXJiLEtBQUt5dkYsWUFFakIsT0FEQXp2RixLQUFLNHZGLHFCQUNFdjBFLENBQ1QsQ0FFQSxPQUFPLElBQ1QsRUEvRE8sR0FBQXkwRSxhQUFlLElBQUkvN0MsSUFBSSxDQUM1QixDQUFDLFdBQVksQ0FBQyxXQUNkLENBQUMsV0FBWSxDQUFDLFdBQ2QsQ0FBQyxXQUFZLENBQUMsV0FDZCxDQUFDLFlBQWEsQ0FBQyxXQUNmLENBQUMsUUFBUyxDQUFDLFdBQ1gsQ0FBQyxjQUFlLENBQUMsWUFBYSxXQUM5QixDQUFDLGVBQWdCLENBQUMsWUFBYSxXQUMvQixDQUFDLFlBQWEsQ0FBQyxZQUFhLFdBQzVCLENBQUMsaUJBQWtCLENBQUMsV0FDcEIsQ0FBQyxTQUFVLE1BaUZmLE1Bb0NhZzhDLEdBQWlCLElBQUk3RSxHQUNoQyxHQXJDdUIsQ0FDdkIsS0FBQWxvRixJQUFTa25GLEdBQ05ycUYsT0FBZW13RixJQUFNdEIsR0FFdEIsTUFBTTlTLEVBQVU4UyxHQUFpQjFyRixTQUFTa25GLEdBQ3BDN3VFLEVBQU0sR0FDTjQwRSxFQUFjLElBQUlYLEdBQW1CcEYsRUFBSyxJQUVoRCxJQUFLLElBQUk3ckYsRUFBSSxFQUFHQSxFQUFJdTlFLEVBQVE1OEUsT0FBUVgsSUFBSyxDQUN2QyxNQUFNdXlFLEVBQVFnTCxFQUFRdjlFLElBQ2hCLFFBQUU0ekUsRUFBTyxJQUFFbndELEVBQUcsS0FBRTdlLEdBQVMydEUsRUFFM0IzdEUsRUFBS2l0RixXQUFXLFlBQXNCLE9BQVJwdUUsSUFDaEM4dUQsRUFBTTN0RSxLQUFPMnRFLEVBQU0zdEUsS0FBSytCLFFBQVEsVUFBVyxhQUV6Qy9CLEVBQUtpdEYsV0FBVyxZQUFzQixPQUFScHVFLElBQ2hDOHVELEVBQU0zdEUsS0FBT0EsRUFBSytCLFFBQVEsVUFBVyxhQUVuQy9CLEVBQUtpdEYsV0FBVyxZQUFzQixPQUFScHVFLElBQ2hDOHVELEVBQU0zdEUsS0FBT0EsRUFBSytCLFFBQVEsVUFBVyxhQUUxQixTQUFUL0IsR0FBbUIydEUsRUFBTWtELFFBQVEsVUFBWWxELEVBQU01a0UsU0FDckQ0a0UsRUFBTWlELFFBQVF4WSxHQUFnQixRQUdoQyxNQUFNajJDLEVBQVM2cUUsRUFBWTVsQyxLQUFLdW1CLEdBRTVCeHJELEdBQ0YvSixFQUFJL2MsUUFBUThtQixFQUVoQixDQUVBLE9BQU8vSixDQUNULEdBT0EsQ0FDRXlJLFdBQVksQ0FBRXFHLE1BQU8sY0FDckJpZ0UsWUFBYSxDQUFFamdFLE1BQU8sa0JBQ3RCMm1ELE1BQU8sQ0FDTDNtRCxNQUFPLGFBQ1BuSCxTQUFTNHRELEdBQ3lDLFNBQXpDQSxFQUFNa0QsUUFBUTFZLElBQ2pCLENBQUUsQ0FBQ0EsS0FBd0IsR0FDM0IsQ0FBQyxHQUdUbUIsU0FBVSxDQUFFcHlDLE1BQU8sWUFDbkJxeUMsU0FBVSxDQUFFcnlDLE1BQU8sWUFDbkJzeUMsU0FBVSxDQUFFdHlDLE1BQU8sWUFDbkJteUMsVUFBVyxDQUFFbnlDLE1BQU8sYUFDcEJreUMsYUFBYyxDQUFFbHlDLE1BQU8sZ0JBQ3ZCb3dDLFVBQVcsQ0FBRXB3QyxNQUFPLGFBQ3BCZ3lDLGVBQWdCLENBQ2RoeUMsTUFBTyxpQkFDUG5ILFNBQVNoRixJQUNBLENBQ0w4OUMsT0FDRTk5QyxFQUFJODFELFFBQVEsWUFBY2xZLEdBQWVJLEtBQUt6OUQsV0FDMUNxOUQsR0FBZUksS0FDZkosR0FBZUcsU0FJM0JkLEdBQUksQ0FBRTduRCxLQUFNLE1BQ1o4bkQsT0FBUSxDQUFFOW5ELEtBQU0sVUFDaEJvOUQsWUFBYSxDQUNYeHRELFNBQVM0dEQsR0FDeUMsU0FBekNBLEVBQU1rRCxRQUFRMVksSUFDakIsQ0FBRSxDQUFDQSxLQUF3QixHQUMzQixDQUFDLEVBRVBob0QsS0FBTSxPQUNOMjNFLGNBQWMsR0FFaEIvakYsS0FBTSxDQUNKb00sS0FBTSxPQUNONFAsU0FBU2hGLEdBQ0EsT0FBUCxRQUNFNVcsS0FBTTRXLEVBQUk4MUQsUUFBUSxRQUNsQmh2RSxNQUFPa1osRUFBSTgxRCxRQUFRLFVBQVksTUFDZCxTQUFiOTFELEVBQUkreUQsTUFBbUIsQ0FDekIsQ0FBQzFWLEtBQWlCLE9DclV4QixHQUFVLElBQUksR0FtR2IsTUFBTTgwQixXQUF5Qjd3RCxHQUNwQyxXQUFBLytCLEdBQ0U4WixNQUFNLENBQ0p3a0Isa0JBQWlCLENBQUNMLEVBQWNNLEVBQVVKLElBcEdSLENBQUNsakIsSUFDdkMsTUFBTSxHQUFFb1csR0FBT3BXLEVBNkZmLE9BM0ZBb1csRUFBR2piLElBQUkvRyxhQUFZLENBQUNLLEVBQU0vQixFQUFLOUgsS0FDN0IsSUFBSzZKLEVBQUtLLFlBQ1IsT0FJRixNQUFNOC9FLEVBQTZCbGlGLEVBQU0sRUFDbkNtaUYsRUFBdUQsR0FDN0RwZ0YsRUFBS3JGLFNBQVEsQ0FBQ3lELEVBQU8xUCxFQUFRcVMsS0FDM0IsSUFBSzNDLEVBQU1HLE9BQ1QsT0FFRixJQUFJOGhGLEVBQWdCamlGLEVBQU04RSxNQUFNcEwsTUFDN0JxTCxHQUFTQSxFQUFLblEsT0FBUyxHQUFPa1EsTUFBTW5NLE9BRXZDLEdBQUlzcEYsSUFBeUQsSUFBeENBLEVBQWNoK0UsTUFBTStvRCxJQUN2QyxHQUFJZzFCLEVBQWFyeEYsT0FBUSxDQUN2QixNQUFNdXhGLEVBQVVGLEVBQWFBLEVBQWFyeEYsT0FBUyxHQUMvQ3V4RixFQUFRQyxTQUFXSixFQUE2Qnp4RixJQUNsRDR4RixFQUFRQyxPQUFTdGlGLEVBQU12UCxFQUFTMFAsRUFBTU8sU0FFMUMsTUFDRXloRixFQUFhL3hGLEtBQUssQ0FDaEJrYSxTQUFVNDNFLEVBQTZCenhGLEVBQ3ZDNnhGLE9BQVFKLEVBQTZCenhGLEVBQVMwUCxFQUFNTyxVQUcxRCxJQUdGLElBQUssTUFBTTZoRixLQUFlSixFQUFjLENBQ3RDLE1BQU1LLEVBQVc5K0QsRUFBR2piLElBQUk5RyxZQUN0QjRnRixFQUFZajRFLFNBQ1ppNEUsRUFBWUQsUUFFVCxHQUFRcHlFLEtBQUtzeUUsR0FTaEI5K0QsRUFBR2tILFFBQ0QyM0QsRUFBWWo0RSxTQUNaaTRFLEVBQVlELE9BQ1osR0FBT3I5RSxNQUFNbk0sS0FBS3FNLE9BQU8sQ0FBRWpNLEtBQU1zcEYsRUFBVSxDQUFDcjFCLEtBQWlCLEtBWC9EenBDLEVBQUd3SCxXQUNEcTNELEVBQVlqNEUsU0FDWmk0RSxFQUFZRCxPQUNaLEdBQU9yOUUsTUFBTW5NLEtBV25CLENBR0EsTUFBTTRiLEVBQVUsR0FBUXZKLE1BQU1wSixFQUFLd0ksYUFDbkMsR0FBS21LLEVBSUwsSUFBSyxNQUFNdkosS0FBU3VKLEVBQVMsQ0FDM0IsTUFBTWxULEVBQVF4QixFQUFNLEVBQUltTCxFQUFNckksTUFDeEJ2QixFQUFNQyxFQUFRMkosRUFBTTVLLEtBQUt6UCxPQUUvQixJQUFJNHlCLEVBQUdqYixJQUFJcUMsYUFBYXRKLEVBQU9ELEVBQUssR0FBTzBELE1BQU0yTSxNQUFqRCxDQUlBLEdBQUk4UixFQUFHamIsSUFBSXFDLGFBQWF0SixFQUFPRCxFQUFLLEdBQU8wRCxNQUFNbk0sTUFBTyxDQUN0RCxJQUFJMnBGLEVBQVksR0FXaEIsR0FWQS8rRCxFQUFHamIsSUFBSXJILGFBQWFJLEVBQU9ELEdBQU1RLElBQy9CLEdBQUlBLEVBQUt6QixPQUFRLENBQ2YsTUFBTW9pRixFQUFXM2dGLEVBQUtrRCxNQUFNcEwsTUFDekJxTCxHQUFTQSxFQUFLblEsT0FBUyxHQUFPa1EsTUFBTW5NLE9BRW5DNHBGLElBQStDLElBQW5DQSxFQUFTdCtFLE1BQU0rb0QsS0FDN0JzMUIsRUFBVXJ5RixLQUFLc3lGLEVBRW5CLEtBRUVELEVBQVUzeEYsT0FDWixRQUVKLENBRUE0eUIsRUFBR2tILFFBQ0RwcEIsRUFDQUQsRUFDQSxHQUFPMEQsTUFBTW5NLEtBQUtxTSxPQUFPLENBQUVqTSxLQUFNaVMsRUFBTW9uRCxJQUFLLENBQUNwRixLQUFpQixJQXRCaEUsQ0F3QkYsS0FHS3pwQyxDQUFFLEVBT0lpL0QsQ0FBeUJueUQsSUFHdEMsRSwyU0N2RkYsU0FBU295RCxLQUNQLE9BQU9wcEIsR0FBT1YsV0FDVitvQixHQUFlL3NGLE1BQU0wa0UsR0FBT1YsWUFDNUJVLEdBQU9aLFVBQ0wsR0FBTzcwRCxhQUFheTFELEdBQU9aLFdBQzNCLEdBQU96bEQsWUFBWXBFLGVBQzNCLEVBRUEsVyx5Q0FDUXlxRCxHQUFPUixRQUViLE1BQU1oakMsRUFBUXJrQyxPQUFPcWtDLEtBQU8sSUFBSTBwQixHQUM5QjFyRCxTQUFTd25CLGNBQWMsV0FDdkIsQ0FDRWxPLE1BQU80aUIsR0FBWS9xQixPQUFPLENBQ3hCc0QsSUFBS202RSxLQUNMOXlELFFBQVMsSUFDSmdyQyxHQUNILElBQUl4SCxHQUNGdC9ELFNBQVN3bkIsY0FBYyxZQUN2QnhuQixTQUFTd25CLGNBQWMsZ0JBRXpCLElBQUk0NkMsR0FBY3BpRSxTQUFTd25CLGNBQWMsa0JBQ3pDLElBQUkyN0MsR0FBcUJuakUsU0FBU3duQixjQUFjLGNBQ2hELElBQUk0VixHQUFPLENBQ1RDLE1BQU8sQ0FDTDZPLFVBQVMsTUFHYixJQUFJK2hELEdBQ0pqekIsR0FDQSxRQUdKLG1CQUFBdkwsQ0FBb0IvL0IsR0FDbEIsTUFBTXZhLEVBQU82c0IsRUFBSzFvQixNQUFNdVYsTUFBTWEsR0FDOUJzUyxFQUFLcUYsWUFBWWx5QixHQUNidWEsRUFBR3FFLFlBQ0x5eEMsR0FBT1AsU0FDTDl2RCxFQUFLVixJQUFJOUUsU0FDVDI4RSxHQUFtQi9DLFVBQVVwMEUsRUFBS1YsS0FDbENVLEVBQUtWLElBQUk5RyxZQUFZLEVBQUd3SCxFQUFLVixJQUFJL0gsU0FBVyxFQUFHLEtBR3JELElBSUo4NEQsR0FBT1QsVUFBVXR3RCxJQUVmLE1BQU1xbkIsRUFBVWtHLEVBQUsxb0IsTUFBTXdpQixRQUFRdDVCLFFBQ2hDeTVCLEdBQVdBLGFBQWtCcWpDLEtBQWtCLElBR2xEdDlCLEVBQUs2cUIsU0FBUyxDQUNadnpDLE1BQU80aUIsR0FBWS9xQixPQUFPLENBQ3hCc0QsSUFBS202RSxLQUNMOXlELFFBQVMsSUFDSkEsRUFDSCxJQUFJd2pDLEdBQ0Z0L0QsU0FBU3duQixjQUFjLFlBQ3ZCeG5CLFNBQVN3bkIsY0FBYyxvQkFJN0IsR0FFTixHLENBRUErVCxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvQ29tcG9uZW50UmVsYXkvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yL0NvbXBvbmVudFJlbGF5L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yL0NvbXBvbmVudFJlbGF5L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci9Db21wb25lbnRSZWxheS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yL0NvbXBvbmVudFJlbGF5Ly4vbGliL3NuanNUeXBlcy50cyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci9Db21wb25lbnRSZWxheS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yL0NvbXBvbmVudFJlbGF5Ly4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9yZWdleC5qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci9Db21wb25lbnRSZWxheS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvQ29tcG9uZW50UmVsYXkvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci9Db21wb25lbnRSZWxheS8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvQ29tcG9uZW50UmVsYXkvLi9saWIvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvQ29tcG9uZW50UmVsYXkvLi9saWIvbG9nZ2VyLnRzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yL0NvbXBvbmVudFJlbGF5Ly4vbGliL2NvbXBvbmVudFJlbGF5LnRzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vc3JjL2Fzc2V0cy9jaGVja19ib3hfb3V0bGluZV9ibGFuay0yNHB4LnN2ZyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL3NyYy9hc3NldHMvY2hlY2tfYm94LTI0cHguc3ZnIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvb3JkZXJlZG1hcC9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL3Byb3NlbWlycm9yLW1vZGVsL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvcHJvc2VtaXJyb3ItdHJhbnNmb3JtL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvcHJvc2VtaXJyb3Itc3RhdGUvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9wcm9zZW1pcnJvci12aWV3L2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvcm9wZS1zZXF1ZW5jZS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL3Byb3NlbWlycm9yLWhpc3RvcnkvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9wcm9zZW1pcnJvci1pbnB1dHJ1bGVzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvcHJvc2VtaXJyb3Itc2NoZW1hLWxpc3QvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9wcm9zZW1pcnJvci1zY2hlbWEtYmFzaWMvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL3NyYy9zY2hlbWEudHMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9zcmMvaW5wdXRSdWxlcy50cyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9wcm9zZW1pcnJvci1jb21tYW5kcy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vc3JjL1Rvb2xiYXJQbHVnaW4udHMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9zcmMvVG9vbHRpcFBsdWdpbi50cyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL3NyYy9FZGl0b3JFeHRlbmRlclBsdWdpbi50cyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmF0aXZlLmpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9zcmMvY2xpZW50LnRzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vc3JjL25vZGVWaWV3cy50cyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy93M2Mta2V5bmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9wcm9zZW1pcnJvci1rZXltYXAvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL3NyYy9rZXltYXBzLnRzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21kdXJsL2xpYi9kZWNvZGUubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21kdXJsL2xpYi9lbmNvZGUubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21kdXJsL2xpYi9mb3JtYXQubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21kdXJsL2xpYi9wYXJzZS5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvdWMubWljcm8vY2F0ZWdvcmllcy9QL3JlZ2V4Lm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy91Yy5taWNyby9jYXRlZ29yaWVzL1MvcmVnZXgubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL3VjLm1pY3JvL3Byb3BlcnRpZXMvQW55L3JlZ2V4Lm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy91Yy5taWNyby9jYXRlZ29yaWVzL0NjL3JlZ2V4Lm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy91Yy5taWNyby9jYXRlZ29yaWVzL0NmL3JlZ2V4Lm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy91Yy5taWNyby9jYXRlZ29yaWVzL1ovcmVnZXgubWpzIiwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2ZiNTUvZW50aXRpZXMvNjFhZmQ0NzAxZWFhNzM2OTc4YjEzYzczNTFjZDNkZTlhOTZiMDRiYy9zcmMvZ2VuZXJhdGVkL2RlY29kZS1kYXRhLWh0bWwudHMiLCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZmI1NS9lbnRpdGllcy82MWFmZDQ3MDFlYWE3MzY5NzhiMTNjNzM1MWNkM2RlOWE5NmIwNGJjL3NyYy9nZW5lcmF0ZWQvZGVjb2RlLWRhdGEteG1sLnRzIiwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2ZiNTUvZW50aXRpZXMvNjFhZmQ0NzAxZWFhNzM2OTc4YjEzYzczNTFjZDNkZTlhOTZiMDRiYy9zcmMvZGVjb2RlX2NvZGVwb2ludC50cyIsImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9mYjU1L2VudGl0aWVzLzYxYWZkNDcwMWVhYTczNjk3OGIxM2M3MzUxY2QzZGU5YTk2YjA0YmMvc3JjL2RlY29kZS50cyIsImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9mYjU1L2VudGl0aWVzLzYxYWZkNDcwMWVhYTczNjk3OGIxM2M3MzUxY2QzZGU5YTk2YjA0YmMvc3JjL2dlbmVyYXRlZC9lbmNvZGUtaHRtbC50cyIsImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9mYjU1L2VudGl0aWVzLzYxYWZkNDcwMWVhYTczNjk3OGIxM2M3MzUxY2QzZGU5YTk2YjA0YmMvc3JjL2VzY2FwZS50cyIsImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9mYjU1L2VudGl0aWVzLzYxYWZkNDcwMWVhYTczNjk3OGIxM2M3MzUxY2QzZGU5YTk2YjA0YmMvc3JjL2luZGV4LnRzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9jb21tb24vdXRpbHMubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9oZWxwZXJzL3BhcnNlX2xpbmtfbGFiZWwubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9oZWxwZXJzL3BhcnNlX2xpbmtfZGVzdGluYXRpb24ubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9oZWxwZXJzL3BhcnNlX2xpbmtfdGl0bGUubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9yZW5kZXJlci5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVyLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvdG9rZW4ubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19jb3JlL3N0YXRlX2NvcmUubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19jb3JlL25vcm1hbGl6ZS5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvbGlua2lmeS5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvcmVwbGFjZW1lbnRzLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfY29yZS9zbWFydHF1b3Rlcy5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3BhcnNlcl9jb3JlLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfY29yZS9ibG9jay5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2NvcmUvaW5saW5lLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfY29yZS90ZXh0X2pvaW4ubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19ibG9jay9zdGF0ZV9ibG9jay5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL3RhYmxlLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfYmxvY2svbGlzdC5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2NvbW1vbi9odG1sX2Jsb2Nrcy5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL2NvbW1vbi9odG1sX3JlLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfYmxvY2svaHRtbF9ibG9jay5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3BhcnNlcl9ibG9jay5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2NvZGUubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19ibG9jay9mZW5jZS5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2Jsb2NrcXVvdGUubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19ibG9jay9oci5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL3JlZmVyZW5jZS5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL2hlYWRpbmcubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19ibG9jay9saGVhZGluZy5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2Jsb2NrL3BhcmFncmFwaC5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9zdGF0ZV9pbmxpbmUubWpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9ydWxlc19pbmxpbmUvdGV4dC5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9saW5raWZ5Lm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2VzY2FwZS5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9zdHJpa2V0aHJvdWdoLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2VtcGhhc2lzLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2F1dG9saW5rLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2VudGl0eS5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9iYWxhbmNlX3BhaXJzLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcGFyc2VyX2lubGluZS5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9uZXdsaW5lLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2JhY2t0aWNrcy5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3J1bGVzX2lubGluZS9saW5rLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2ltYWdlLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2h0bWxfaW5saW5lLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1pdC9saWIvcnVsZXNfaW5saW5lL2ZyYWdtZW50c19qb2luLm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9saW5raWZ5LWl0L2luZGV4Lm1qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL25vZGVfbW9kdWxlcy9saW5raWZ5LWl0L2xpYi9yZS5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvcHVueWNvZGUuanMvcHVueWNvZGUuZXM2LmpzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLWl0L2xpYi9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3ByZXNldHMvZGVmYXVsdC5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3ByZXNldHMvemVyby5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvbWFya2Rvd24taXQvbGliL3ByZXNldHMvY29tbW9ubWFyay5tanMiLCJ3ZWJwYWNrOi8vc24tc2NyYXRjaHBhZC1lZGl0b3IvLi9ub2RlX21vZHVsZXMvcHJvc2VtaXJyb3ItbWFya2Rvd24vZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL3NyYy9tYXJrZG93bi50cyIsIndlYnBhY2s6Ly9zbi1zY3JhdGNocGFkLWVkaXRvci8uL3NyYy9JbmxpbmVMaW5rUGx1Z2luLnRzIiwid2VicGFjazovL3NuLXNjcmF0Y2hwYWQtZWRpdG9yLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiQ29tcG9uZW50UmVsYXlcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiQ29tcG9uZW50UmVsYXlcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiQ29tcG9uZW50UmVsYXlcIl0gPSBmYWN0b3J5KCk7XG59KShzZWxmLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8qKlxuICogRGVjbGFyaW5nIHR5cGVzIG5lZWRlZCBmcm9tIHNuanMuXG4gKiBUaGlzIGZpbGUgd2lsbCBiZSBkZWxldGVkIGFmdGVyIHNuanMgYmVjb21lcyBhIG1vbm9yZXBvIGFuZCBwcm92aWRlcyBzdWNoIHR5cGVzLlxuICovXG5cbi8qKlxuICogVGhlIGF2YWlsYWJsZSBhY3Rpb25zIHRoYXQgYSBjb21wb25lbnQgY2FuIHBlcmZvcm0uXG4gKi9cbmV4cG9ydCBlbnVtIENvbXBvbmVudEFjdGlvbiB7XG4gIFNldFNpemUgPSAnc2V0LXNpemUnLFxuICBTdHJlYW1JdGVtcyA9ICdzdHJlYW0taXRlbXMnLFxuICBTdHJlYW1Db250ZXh0SXRlbSA9ICdzdHJlYW0tY29udGV4dC1pdGVtJyxcbiAgU2F2ZUl0ZW1zID0gJ3NhdmUtaXRlbXMnLFxuICBTZWxlY3RJdGVtID0gJ3NlbGVjdC1pdGVtJyxcbiAgQXNzb2NpYXRlSXRlbSA9ICdhc3NvY2lhdGUtaXRlbScsXG4gIERlYXNzb2NpYXRlSXRlbSA9ICdkZWFzc29jaWF0ZS1pdGVtJyxcbiAgQ2xlYXJTZWxlY3Rpb24gPSAnY2xlYXItc2VsZWN0aW9uJyxcbiAgQ3JlYXRlSXRlbSA9ICdjcmVhdGUtaXRlbScsXG4gIENyZWF0ZUl0ZW1zID0gJ2NyZWF0ZS1pdGVtcycsXG4gIERlbGV0ZUl0ZW1zID0gJ2RlbGV0ZS1pdGVtcycsXG4gIFNldENvbXBvbmVudERhdGEgPSAnc2V0LWNvbXBvbmVudC1kYXRhJyxcbiAgSW5zdGFsbExvY2FsQ29tcG9uZW50ID0gJ2luc3RhbGwtbG9jYWwtY29tcG9uZW50JyxcbiAgVG9nZ2xlQWN0aXZhdGVDb21wb25lbnQgPSAndG9nZ2xlLWFjdGl2YXRlLWNvbXBvbmVudCcsXG4gIFJlcXVlc3RQZXJtaXNzaW9ucyA9ICdyZXF1ZXN0LXBlcm1pc3Npb25zJyxcbiAgUHJlc2VudENvbmZsaWN0UmVzb2x1dGlvbiA9ICdwcmVzZW50LWNvbmZsaWN0LXJlc29sdXRpb24nLFxuICBEdXBsaWNhdGVJdGVtID0gJ2R1cGxpY2F0ZS1pdGVtJyxcbiAgQ29tcG9uZW50UmVnaXN0ZXJlZCA9ICdjb21wb25lbnQtcmVnaXN0ZXJlZCcsXG4gIEFjdGl2YXRlVGhlbWVzID0gJ3RoZW1lcycsXG4gIFJlcGx5ID0gJ3JlcGx5JyxcbiAgU2F2ZVN1Y2Nlc3MgPSAnc2F2ZS1zdWNjZXNzJyxcbiAgU2F2ZUVycm9yID0gJ3NhdmUtZXJyb3InLFxuICBUaGVtZXNBY3RpdmF0ZWQgPSAndGhlbWVzLWFjdGl2YXRlZCcsXG4gIEtleURvd24gPSAna2V5LWRvd24nLFxuICBLZXlVcCA9ICdrZXktdXAnLFxuICBDbGljayA9ICdjbGljaydcbn1cblxuZXhwb3J0IGVudW0gRW52aXJvbm1lbnQge1xuICBXZWIgPSAxLFxuICBEZXNrdG9wID0gMixcbiAgTW9iaWxlID0gM1xufVxuXG5leHBvcnQgZW51bSBDb250ZW50VHlwZSB7XG4gIEFueSA9ICcqJyxcbiAgSXRlbSA9ICdTRnxJdGVtJyxcbiAgUm9vdEtleSA9ICdTTnxSb290S2V5fE5vU3luYycsXG4gIEl0ZW1zS2V5ID0gJ1NOfEl0ZW1zS2V5JyxcbiAgRW5jcnlwdGVkU3RvcmFnZSA9ICdTTnxFbmNyeXB0ZWRTdG9yYWdlJyxcbiAgTm90ZSA9ICdOb3RlJyxcbiAgVGFnID0gJ1RhZycsXG4gIFNtYXJ0VGFnID0gJ1NOfFNtYXJ0VGFnJyxcbiAgQ29tcG9uZW50ID0gJ1NOfENvbXBvbmVudCcsXG4gIEVkaXRvciA9ICdTTnxFZGl0b3InLFxuICBBY3Rpb25zRXh0ZW5zaW9uID0gJ0V4dGVuc2lvbicsXG4gIFVzZXJQcmVmcyA9ICdTTnxVc2VyUHJlZmVyZW5jZXMnLFxuICBIaXN0b3J5U2Vzc2lvbiA9ICdTTnxIaXN0b3J5U2Vzc2lvbicsXG4gIFRoZW1lID0gJ1NOfFRoZW1lJyxcbiAgTWZhID0gJ1NGfE1GQScsXG4gIFNlcnZlckV4dGVuc2lvbiA9ICdTRnxFeHRlbnNpb24nLFxuICBGaWxlc2FmZUNyZWRlbnRpYWxzID0gJ1NOfEZpbGVTYWZlfENyZWRlbnRpYWxzJyxcbiAgRmlsZXNhZmVGaWxlTWV0YWRhdGEgPSAnU058RmlsZVNhZmV8RmlsZU1ldGFkYXRhJyxcbiAgRmlsZXNhZmVJbnRlZ3JhdGlvbiA9ICdTTnxGaWxlU2FmZXxJbnRlZ3JhdGlvbicsXG4gIEV4dGVuc2lvblJlcG8gPSAnU058RXh0ZW5zaW9uUmVwbycsXG59XG5cbmV4cG9ydCBlbnVtIEFwcERhdGFGaWVsZCB7XG4gIFBpbm5lZCA9ICdwaW5uZWQnLFxuICBBcmNoaXZlZCA9ICdhcmNoaXZlZCcsXG4gIExvY2tlZCA9ICdsb2NrZWQnLFxuICBVc2VyTW9kaWZpZWREYXRlID0gJ2NsaWVudF91cGRhdGVkX2F0JyxcbiAgRGVmYXVsdEVkaXRvciA9ICdkZWZhdWx0RWRpdG9yJyxcbiAgTW9iaWxlUnVsZXMgPSAnbW9iaWxlUnVsZXMnLFxuICBOb3RBdmFpbGFibGVPbk1vYmlsZSA9ICdub3RBdmFpbGFibGVPbk1vYmlsZScsXG4gIE1vYmlsZUFjdGl2ZSA9ICdtb2JpbGVBY3RpdmUnLFxuICBMYXN0U2l6ZSA9ICdsYXN0U2l6ZScsXG4gIFByZWZlcnNQbGFpbkVkaXRvciA9ICdwcmVmZXJzUGxhaW5FZGl0b3InLFxuICBDb21wb25lbnRJbnN0YWxsRXJyb3IgPSAnaW5zdGFsbEVycm9yJ1xufVxuIiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gSW4gdGhlIGJyb3dzZXIgd2UgdGhlcmVmb3JlXG4vLyByZXF1aXJlIHRoZSBjcnlwdG8gQVBJIGFuZCBkbyBub3Qgc3VwcG9ydCBidWlsdC1pbiBmYWxsYmFjayB0byBsb3dlciBxdWFsaXR5IHJhbmRvbSBudW1iZXJcbi8vIGdlbmVyYXRvcnMgKGxpa2UgTWF0aC5yYW5kb20oKSkuXG52YXIgZ2V0UmFuZG9tVmFsdWVzO1xudmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uIEFsc28sXG4gICAgLy8gZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIChtc0NyeXB0bykgb24gSUUxMS5cbiAgICBnZXRSYW5kb21WYWx1ZXMgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pIHx8IHR5cGVvZiBtc0NyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0byk7XG5cbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiLCJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiLCJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxudmFyIGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyKSB7XG4gIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICB2YXIgdXVpZCA9IChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiLCJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpOyAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG5cbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDsgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG5cbiAgaWYgKGJ1Zikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBidWY7XG4gIH1cblxuICByZXR1cm4gc3RyaW5naWZ5KHJuZHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2NDsiLCJpbXBvcnQgeyBFbnZpcm9ubWVudCB9IGZyb20gJy4vc25qc1R5cGVzJ1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCdcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHsgbXNDcnlwdG86IHVua25vd247IH1cbn1cblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlVXVpZCA9ICgpIDogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHV1aWR2NCgpXG59XG5cbmV4cG9ydCBjb25zdCBpc1ZhbGlkSnNvblN0cmluZyA9IChzdHI6IHVua25vd24pIDogYm9vbGVhbiA9PiB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzdWx0ID0gSlNPTi5wYXJzZShzdHIpXG4gICAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyZXN1bHQpXG4gICAgcmV0dXJuIHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XSdcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBlbnZpcm9ubWVudFRvU3RyaW5nID0gKGVudmlyb25tZW50OiBFbnZpcm9ubWVudCkgOiBzdHJpbmcgPT4ge1xuICBjb25zdCBtYXAgPSB7XG4gICAgW0Vudmlyb25tZW50LldlYl06ICd3ZWInLFxuICAgIFtFbnZpcm9ubWVudC5EZXNrdG9wXTogJ2Rlc2t0b3AnLFxuICAgIFtFbnZpcm9ubWVudC5Nb2JpbGVdOiAnbW9iaWxlJyxcbiAgfVxuICByZXR1cm4gbWFwW2Vudmlyb25tZW50XSA/PyBtYXBbRW52aXJvbm1lbnQuV2ViXVxufVxuXG5leHBvcnQgY29uc3QgaXNOb3RVbmRlZmluZWRPck51bGwgPSAodmFsdWU6IGFueSkgOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWRcbn1cbiIsImNvbnN0IG5vb3AgPSAoKSA9PiB1bmRlZmluZWRcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9nZ2VyIHtcbiAgc3RhdGljIGVuYWJsZWQgPSBmYWxzZTtcblxuICBwcml2YXRlIHN0YXRpYyBnZXQgaXNTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuICh3aW5kb3cuY29uc29sZSB8fCBjb25zb2xlKSA/IHRydWUgOiBmYWxzZVxuICB9XG5cbiAgc3RhdGljIGdldCBpbmZvICgpIDogYW55IHtcbiAgICBpZiAoIUxvZ2dlci5pc1N1cHBvcnRlZCB8fCAhdGhpcy5lbmFibGVkKSB7XG4gICAgICByZXR1cm4gbm9vcFxuICAgIH1cbiAgICByZXR1cm4gY29uc29sZS5sb2cuYmluZChjb25zb2xlKVxuICB9XG5cbiAgc3RhdGljIGdldCBlcnJvciAoKSA6IGFueSB7XG4gICAgaWYgKCFMb2dnZXIuaXNTdXBwb3J0ZWQpIHtcbiAgICAgIHJldHVybiBub29wXG4gICAgfVxuICAgIHJldHVybiBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSlcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgQXBwRGF0YUZpZWxkLFxuICBDb21wb25lbnRBY3Rpb24sXG4gIENvbnRlbnRUeXBlLFxuICBFbnZpcm9ubWVudCxcbn0gZnJvbSAnLi9zbmpzVHlwZXMnXG5pbXBvcnQgdHlwZSB7XG4gIENvbXBvbmVudFBlcm1pc3Npb24sXG4gIEl0ZW1NZXNzYWdlUGF5bG9hZCxcbiAgTWVzc2FnZURhdGEsXG4gIFNOSXRlbSxcbiAgVXVpZFN0cmluZyxcbn0gZnJvbSAnQHN0YW5kYXJkbm90ZXMvc25qcydcbmltcG9ydCB7XG4gIGVudmlyb25tZW50VG9TdHJpbmcsXG4gIGdlbmVyYXRlVXVpZCxcbiAgaXNWYWxpZEpzb25TdHJpbmcsXG4gIGlzTm90VW5kZWZpbmVkT3JOdWxsLFxufSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IExvZ2dlciBmcm9tICcuL2xvZ2dlcidcblxuY29uc3QgREVGQVVMVF9DT0FMTEVTRURfU0FWSU5HX0RFTEFZID0gMjUwXG5cbmVudW0gTWVzc2FnZVBheWxvYWRBcGkge1xuICBDb21wb25lbnQgPSAnY29tcG9uZW50Jyxcbn1cblxudHlwZSBDb21wb25lbnQgPSB7XG4gIHV1aWQ/OiBzdHJpbmdcbiAgb3JpZ2luPzogc3RyaW5nXG4gIGRhdGE/OiBDb21wb25lbnREYXRhXG4gIHNlc3Npb25LZXk/OiBzdHJpbmdcbiAgZW52aXJvbm1lbnQ/OiBzdHJpbmdcbiAgcGxhdGZvcm0/OiBzdHJpbmdcbiAgaXNNb2JpbGU/OiBib29sZWFuXG4gIGFjY2VwdHNUaGVtZXM6IGJvb2xlYW5cbiAgYWN0aXZlVGhlbWVzOiBzdHJpbmdbXVxufVxuXG50eXBlIENvbXBvbmVudERhdGEgPSB7XG4gIFtrZXk6IHN0cmluZ106IGFueVxufVxuXG50eXBlIE1lc3NhZ2VQYXlsb2FkID0ge1xuICBhY3Rpb246IENvbXBvbmVudEFjdGlvblxuICBkYXRhOiBNZXNzYWdlRGF0YVxuICBjb21wb25lbnREYXRhPzogQ29tcG9uZW50RGF0YVxuICBtZXNzYWdlSWQ/OiBVdWlkU3RyaW5nXG4gIHNlc3Npb25LZXk/OiBVdWlkU3RyaW5nXG4gIGFwaTogTWVzc2FnZVBheWxvYWRBcGlcbiAgb3JpZ2luYWw/OiBNZXNzYWdlUGF5bG9hZFxuICBjYWxsYmFjaz86ICguLi5wYXJhbXM6IGFueSkgPT4gdm9pZFxufVxuXG50eXBlIENvbXBvbmVudFJlbGF5T3B0aW9ucyA9IHtcbiAgY29hbGxlc2VkU2F2aW5nPzogYm9vbGVhblxuICBjb2FsbGVzZWRTYXZpbmdEZWxheT86IG51bWJlclxuICAvKipcbiAgICogT3V0cHV0cyBkZWJ1Z2dpbmcgaW5mb3JtYXRpb24gdG8gY29uc29sZS5cbiAgICovXG4gIGRlYnVnPzogYm9vbGVhblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRoZSBjb21wb25lbnQgYWNjZXB0cyB0aGVtZXMuXG4gICAqL1xuICBhY2NlcHRzVGhlbWVzPzogYm9vbGVhblxufVxuXG50eXBlIENvbXBvbmVudFJlbGF5UGFyYW1zID0ge1xuICAvKipcbiAgICogUmVwcmVzZW50cyB0aGUgd2luZG93IG9iamVjdCB0aGF0IHRoZSBjb21wb25lbnQgaXMgcnVubmluZyBpbi5cbiAgICovXG4gIHRhcmdldFdpbmRvdzogV2luZG93XG4gIC8qKlxuICAgKiBBIGNvbGxlY3Rpb24gb2YgcGVybWlzc2lvbnMgdGhhdCB0aGUgY29tcG9uZW50IGNhbiByZXF1ZXN0XG4gICAqIGFjY2VzcyBvbmNlIGl0J3MgcmVhZHkuXG4gICAqL1xuICBpbml0aWFsUGVybWlzc2lvbnM/OiBDb21wb25lbnRQZXJtaXNzaW9uW11cbiAgLyoqXG4gICAqIFRoZSBvcHRpb25zIHRvIGluaXRpYWxpemVcbiAgICovXG4gIG9wdGlvbnM/OiBDb21wb25lbnRSZWxheU9wdGlvbnNcbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgdGhhdCBpcyBleGVjdXRlZCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBiZWVuIHJlZ2lzdGVyZWQuXG4gICAqL1xuICBvblJlYWR5PzogKCkgPT4gdm9pZFxuICAvKipcbiAgICogQSBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIGFmdGVyIHRoZW1lcyBoYXZlIGJlZW4gY2hhbmdlZC5cbiAgICovXG4gIG9uVGhlbWVzQ2hhbmdlPzogKCkgPT4gdm9pZFxufVxuXG50eXBlIEl0ZW1QYXlsb2FkID0ge1xuICBjb250ZW50X3R5cGU/OiBDb250ZW50VHlwZVxuICBjb250ZW50PzogYW55XG4gIFtrZXk6IHN0cmluZ106IGFueVxufVxuXG5lbnVtIEtleWJvYXJkTW9kaWZpZXIge1xuICBTaGlmdCA9ICdTaGlmdCcsXG4gIEN0cmwgPSAnQ29udHJvbCcsXG4gIE1ldGEgPSAnTWV0YScsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudFJlbGF5IHtcbiAgcHJpdmF0ZSBjb250ZW50V2luZG93OiBXaW5kb3dcbiAgcHJpdmF0ZSBpbml0aWFsUGVybWlzc2lvbnM/OiBDb21wb25lbnRQZXJtaXNzaW9uW11cbiAgcHJpdmF0ZSBvblJlYWR5Q2FsbGJhY2s/OiAoKSA9PiB2b2lkXG4gIHByaXZhdGUgY29tcG9uZW50OiBDb21wb25lbnQgPSB7IGFjdGl2ZVRoZW1lczogW10sIGFjY2VwdHNUaGVtZXM6IHRydWUgfVxuICBwcml2YXRlIHNlbnRNZXNzYWdlczogTWVzc2FnZVBheWxvYWRbXSA9IFtdXG4gIHByaXZhdGUgbWVzc2FnZVF1ZXVlOiBNZXNzYWdlUGF5bG9hZFtdID0gW11cbiAgcHJpdmF0ZSBsYXN0U3RyZWFtZWRJdGVtPzogSXRlbVBheWxvYWRcbiAgcHJpdmF0ZSBwZW5kaW5nU2F2ZUl0ZW1zPzogSXRlbVBheWxvYWRbXVxuICBwcml2YXRlIHBlbmRpbmdTYXZlVGltZW91dD86IE5vZGVKUy5UaW1lb3V0XG4gIHByaXZhdGUgcGVuZGluZ1NhdmVQYXJhbXM/OiBhbnlcbiAgcHJpdmF0ZSBjb2FsbGVzZWRTYXZpbmcgPSB0cnVlXG4gIHByaXZhdGUgY29hbGxlc2VkU2F2aW5nRGVsYXkgPSBERUZBVUxUX0NPQUxMRVNFRF9TQVZJTkdfREVMQVlcbiAgcHJpdmF0ZSBtZXNzYWdlSGFuZGxlcj86IChldmVudDogYW55KSA9PiB2b2lkXG4gIHByaXZhdGUga2V5RG93bkV2ZW50TGlzdGVuZXI/OiAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHZvaWRcbiAgcHJpdmF0ZSBrZXlVcEV2ZW50TGlzdGVuZXI/OiAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHZvaWRcbiAgcHJpdmF0ZSBjbGlja0V2ZW50TGlzdGVuZXI/OiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWRcbiAgcHJpdmF0ZSBvblRoZW1lc0NoYW5nZUNhbGxiYWNrPzogKCkgPT4gdm9pZFxuICBwcml2YXRlIGNvbmNlcm5UaW1lb3V0czogTm9kZUpTLlRpbWVvdXRbXSA9IFtdXG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBDb21wb25lbnRSZWxheVBhcmFtcykge1xuICAgIGlmICghcGFyYW1zIHx8ICFwYXJhbXMudGFyZ2V0V2luZG93KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnRlbnRXaW5kb3cgbXVzdCBiZSBhIHZhbGlkIFdpbmRvdyBvYmplY3QuJylcbiAgICB9XG4gICAgdGhpcy5jb250ZW50V2luZG93ID0gcGFyYW1zLnRhcmdldFdpbmRvd1xuICAgIHRoaXMucHJvY2Vzc1BhcmFtZXRlcnMocGFyYW1zKVxuICAgIHRoaXMucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcigpXG4gICAgdGhpcy5yZWdpc3RlcktleWJvYXJkRXZlbnRMaXN0ZW5lcnMoKVxuICAgIHRoaXMucmVnaXN0ZXJNb3VzZUV2ZW50TGlzdGVuZXJzKClcbiAgfVxuXG4gIHByaXZhdGUgcHJvY2Vzc1BhcmFtZXRlcnMocGFyYW1zOiBDb21wb25lbnRSZWxheVBhcmFtcykge1xuICAgIGNvbnN0IHsgaW5pdGlhbFBlcm1pc3Npb25zLCBvcHRpb25zLCBvblJlYWR5LCBvblRoZW1lc0NoYW5nZSB9ID0gcGFyYW1zXG5cbiAgICBpZiAoaW5pdGlhbFBlcm1pc3Npb25zICYmIGluaXRpYWxQZXJtaXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmluaXRpYWxQZXJtaXNzaW9ucyA9IGluaXRpYWxQZXJtaXNzaW9uc1xuICAgIH1cblxuICAgIGlmIChpc05vdFVuZGVmaW5lZE9yTnVsbChvcHRpb25zPy5jb2FsbGVzZWRTYXZpbmcpKSB7XG4gICAgICB0aGlzLmNvYWxsZXNlZFNhdmluZyA9IG9wdGlvbnMhLmNvYWxsZXNlZFNhdmluZyFcbiAgICB9XG4gICAgaWYgKGlzTm90VW5kZWZpbmVkT3JOdWxsKG9wdGlvbnM/LmNvYWxsZXNlZFNhdmluZ0RlbGF5KSkge1xuICAgICAgdGhpcy5jb2FsbGVzZWRTYXZpbmdEZWxheSA9IG9wdGlvbnMhLmNvYWxsZXNlZFNhdmluZ0RlbGF5IVxuICAgIH1cbiAgICBpZiAoaXNOb3RVbmRlZmluZWRPck51bGwob3B0aW9ucz8uYWNjZXB0c1RoZW1lcykpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50LmFjY2VwdHNUaGVtZXMgPSBvcHRpb25zPy5hY2NlcHRzVGhlbWVzID8/IHRydWVcbiAgICB9XG4gICAgaWYgKGlzTm90VW5kZWZpbmVkT3JOdWxsKG9uUmVhZHkpKSB7XG4gICAgICB0aGlzLm9uUmVhZHlDYWxsYmFjayA9IG9uUmVhZHlcbiAgICB9XG4gICAgaWYgKGlzTm90VW5kZWZpbmVkT3JOdWxsKG9uVGhlbWVzQ2hhbmdlKSkge1xuICAgICAgdGhpcy5vblRoZW1lc0NoYW5nZUNhbGxiYWNrID0gb25UaGVtZXNDaGFuZ2VcbiAgICB9XG5cbiAgICBMb2dnZXIuZW5hYmxlZCA9IG9wdGlvbnM/LmRlYnVnID8/IGZhbHNlXG4gIH1cblxuICBwdWJsaWMgZGVpbml0KCk6IHZvaWQge1xuICAgIHRoaXMub25SZWFkeUNhbGxiYWNrID0gdW5kZWZpbmVkXG4gICAgdGhpcy5jb21wb25lbnQgPSB7XG4gICAgICBhY2NlcHRzVGhlbWVzOiB0cnVlLFxuICAgICAgYWN0aXZlVGhlbWVzOiBbXSxcbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlUXVldWUgPSBbXVxuICAgIHRoaXMuc2VudE1lc3NhZ2VzID0gW11cbiAgICB0aGlzLmxhc3RTdHJlYW1lZEl0ZW0gPSB1bmRlZmluZWRcbiAgICB0aGlzLnBlbmRpbmdTYXZlSXRlbXMgPSB1bmRlZmluZWRcbiAgICB0aGlzLnBlbmRpbmdTYXZlVGltZW91dCA9IHVuZGVmaW5lZFxuICAgIHRoaXMucGVuZGluZ1NhdmVQYXJhbXMgPSB1bmRlZmluZWRcblxuICAgIGlmICh0aGlzLm1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICB0aGlzLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgJ21lc3NhZ2UnLFxuICAgICAgICB0aGlzLm1lc3NhZ2VIYW5kbGVyLFxuICAgICAgKVxuICAgICAgdGhpcy5jb250ZW50V2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLm1lc3NhZ2VIYW5kbGVyKVxuICAgIH1cblxuICAgIGlmICh0aGlzLmtleURvd25FdmVudExpc3RlbmVyKSB7XG4gICAgICB0aGlzLmNvbnRlbnRXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgJ2tleWRvd24nLFxuICAgICAgICB0aGlzLmtleURvd25FdmVudExpc3RlbmVyLFxuICAgICAgKVxuICAgIH1cblxuICAgIGlmICh0aGlzLmtleVVwRXZlbnRMaXN0ZW5lcikge1xuICAgICAgdGhpcy5jb250ZW50V2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5rZXlVcEV2ZW50TGlzdGVuZXIpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2xpY2tFdmVudExpc3RlbmVyKSB7XG4gICAgICB0aGlzLmNvbnRlbnRXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsaWNrRXZlbnRMaXN0ZW5lcilcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoKSB7XG4gICAgdGhpcy5tZXNzYWdlSGFuZGxlciA9IChldmVudDogTWVzc2FnZUV2ZW50KSA9PiB7XG4gICAgICBMb2dnZXIuaW5mbygnQ29tcG9uZW50cyBBUEkgTWVzc2FnZSByZWNlaXZlZDonLCBldmVudC5kYXRhKVxuXG4gICAgICAvKipcbiAgICAgICAqIFdlIGRvbid0IGhhdmUgYWNjZXNzIHRvIHdpbmRvdy5wYXJlbnQub3JpZ2luIGR1ZSB0byBjcm9zcy1kb21haW4gcmVzdHJpY3Rpb25zLlxuICAgICAgICogQ2hlY2sgcmVmZXJyZXIgaWYgYXZhaWxhYmxlLCBvdGhlcndpc2UgZGVmZXIgdG8gY2hlY2tpbmcgZm9yIGZpcnN0LXJ1biB2YWx1ZS5cbiAgICAgICAqIENyYWZ0IFVSTCBvYmplY3RzIHNvIHRoYXQgZXhhbXBsZS5jb20gPT09IGV4YW1wbGUuY29tL1xuICAgICAgICovXG4gICAgICBpZiAoZG9jdW1lbnQucmVmZXJyZXIpIHtcbiAgICAgICAgY29uc3QgcmVmZXJyZXIgPSBuZXcgVVJMKGRvY3VtZW50LnJlZmVycmVyKS5vcmlnaW5cbiAgICAgICAgY29uc3QgZXZlbnRPcmlnaW4gPSBuZXcgVVJMKGV2ZW50Lm9yaWdpbikub3JpZ2luXG5cbiAgICAgICAgaWYgKHJlZmVycmVyICE9PSBldmVudE9yaWdpbikge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE1vYmlsZSBlbnZpcm9ubWVudCBzZW5kcyBkYXRhIGFzIEpTT04gc3RyaW5nLlxuICAgICAgY29uc3QgeyBkYXRhIH0gPSBldmVudFxuICAgICAgY29uc3QgcGFyc2VkRGF0YSA9IGlzVmFsaWRKc29uU3RyaW5nKGRhdGEpID8gSlNPTi5wYXJzZShkYXRhKSA6IGRhdGFcblxuICAgICAgaWYgKCFwYXJzZWREYXRhKSB7XG4gICAgICAgIExvZ2dlci5lcnJvcignSW52YWxpZCBkYXRhIHJlY2VpdmVkLiBTa2lwcGluZy4uLicpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBDb21wb25lbnQgUmVnaXN0ZXJlZCBtZXNzYWdlIHdpbGwgYmUgdGhlIG1vc3QgcmVsaWFibGUgb25lLCBzbyB3ZSB3b24ndCBjaGFuZ2UgaXQgYWZ0ZXIgYW55IHN1YnNlcXVlbnQgZXZlbnRzLFxuICAgICAgICogaW4gY2FzZSB5b3UgcmVjZWl2ZSBhbiBldmVudCBmcm9tIGFub3RoZXIgd2luZG93LlxuICAgICAgICovXG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiB0aGlzLmNvbXBvbmVudC5vcmlnaW4gPT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHBhcnNlZERhdGEuYWN0aW9uID09PSBDb21wb25lbnRBY3Rpb24uQ29tcG9uZW50UmVnaXN0ZXJlZFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Lm9yaWdpbiA9IGV2ZW50Lm9yaWdpblxuICAgICAgfSBlbHNlIGlmIChldmVudC5vcmlnaW4gIT09IHRoaXMuY29tcG9uZW50Lm9yaWdpbikge1xuICAgICAgICAvLyBJZiBldmVudCBvcmlnaW4gZG9lc24ndCBtYXRjaCBmaXJzdC1ydW4gdmFsdWUsIHJldHVybi5cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHRoaXMuaGFuZGxlTWVzc2FnZShwYXJzZWREYXRhKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vYmlsZSAoUmVhY3QgTmF0aXZlKSB1c2VzIGBkb2N1bWVudGAsIHdlYi9kZXNrdG9wIHVzZXMgYHdpbmRvd2AuYWRkRXZlbnRMaXN0ZW5lclxuICAgICAqIGZvciBwb3N0TWVzc2FnZSBBUEkgdG8gd29yayBwcm9wZXJseS5cbiAgICAgKiBVcGRhdGUgTWF5IDIwMTk6XG4gICAgICogQXMgcGFydCBvZiB0cmFuc2l0aW9uaW5nIFJlYWN0IE5hdGl2ZSB3ZWJ2aWV3IGludG8gdGhlIGNvbW11bml0eSBwYWNrYWdlLFxuICAgICAqIHdlJ2xsIG5vdyBvbmx5IG5lZWQgdG8gdXNlIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyLlxuICAgICAqIEhvd2V2ZXIsIHdlIHdhbnQgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eSBmb3IgTW9iaWxlIDwgdjMuMC41LCBzbyB3ZSdsbCBrZWVwIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXJcbiAgICAgKiBBbHNvLCBldmVuIHdpdGggdGhlIG5ldyB2ZXJzaW9uIG9mIHJlYWN0LW5hdGl2ZS13ZWJ2aWV3LCBBbmRyb2lkIG1heSBzdGlsbCByZXF1aXJlIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKHdoaWxlIGlPUyBzdGlsbCBvbmx5IHJlcXVpcmVzIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKVxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtY29tbXVuaXR5L3JlYWN0LW5hdGl2ZS13ZWJ2aWV3L2lzc3Vlcy8zMjMjaXNzdWVjb21tZW50LTQ2Nzc2NzkzM1xuICAgICAqL1xuICAgIHRoaXMuY29udGVudFdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ21lc3NhZ2UnLFxuICAgICAgdGhpcy5tZXNzYWdlSGFuZGxlcixcbiAgICAgIGZhbHNlLFxuICAgIClcbiAgICB0aGlzLmNvbnRlbnRXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMubWVzc2FnZUhhbmRsZXIsIGZhbHNlKVxuXG4gICAgTG9nZ2VyLmluZm8oJ1dhaXRpbmcgZm9yIG1lc3NhZ2VzLi4uJylcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJLZXlib2FyZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMua2V5RG93bkV2ZW50TGlzdGVuZXIgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgIExvZ2dlci5pbmZvKGBBIGtleSBoYXMgYmVlbiBwcmVzc2VkOiAke2V2ZW50LmtleX1gKVxuXG4gICAgICBpZiAoZXZlbnQuY3RybEtleSkge1xuICAgICAgICB0aGlzLmtleURvd25FdmVudChLZXlib2FyZE1vZGlmaWVyLkN0cmwpXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgIHRoaXMua2V5RG93bkV2ZW50KEtleWJvYXJkTW9kaWZpZXIuU2hpZnQpXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQua2V5ID09PSAnTWV0YScpIHtcbiAgICAgICAgdGhpcy5rZXlEb3duRXZlbnQoS2V5Ym9hcmRNb2RpZmllci5NZXRhKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMua2V5VXBFdmVudExpc3RlbmVyID0gKGV2ZW50OiBLZXlib2FyZEV2ZW50KSA9PiB7XG4gICAgICBMb2dnZXIuaW5mbyhgQSBrZXkgaGFzIGJlZW4gcmVsZWFzZWQ6ICR7ZXZlbnQua2V5fWApXG5cbiAgICAgIC8qKlxuICAgICAgICogQ2hlY2tpbmcgdXNpbmcgZXZlbnQua2V5IGluc3RlYWQgb2YgdGhlIGNvcnJlc3BvbmRpbmcgYm9vbGVhbiBwcm9wZXJ0aWVzLlxuICAgICAgICovXG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAnQ29udHJvbCcpIHtcbiAgICAgICAgdGhpcy5rZXlVcEV2ZW50KEtleWJvYXJkTW9kaWZpZXIuQ3RybClcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnU2hpZnQnKSB7XG4gICAgICAgIHRoaXMua2V5VXBFdmVudChLZXlib2FyZE1vZGlmaWVyLlNoaWZ0KVxuICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09ICdNZXRhJykge1xuICAgICAgICB0aGlzLmtleVVwRXZlbnQoS2V5Ym9hcmRNb2RpZmllci5NZXRhKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY29udGVudFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ2tleWRvd24nLFxuICAgICAgdGhpcy5rZXlEb3duRXZlbnRMaXN0ZW5lcixcbiAgICAgIGZhbHNlLFxuICAgIClcbiAgICB0aGlzLmNvbnRlbnRXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmtleVVwRXZlbnRMaXN0ZW5lciwgZmFsc2UpXG4gIH1cblxuICBwcml2YXRlIHJlZ2lzdGVyTW91c2VFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLmNsaWNrRXZlbnRMaXN0ZW5lciA9IChfZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIExvZ2dlci5pbmZvKCdBIGNsaWNrIGhhcyBiZWVuIHBlcmZvcm1lZC4nKVxuXG4gICAgICB0aGlzLm1vdXNlQ2xpY2tFdmVudCgpXG4gICAgfVxuXG4gICAgdGhpcy5jb250ZW50V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0V2ZW50TGlzdGVuZXIsIGZhbHNlKVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVNZXNzYWdlKHBheWxvYWQ6IE1lc3NhZ2VQYXlsb2FkKSB7XG4gICAgc3dpdGNoIChwYXlsb2FkLmFjdGlvbikge1xuICAgICAgY2FzZSBDb21wb25lbnRBY3Rpb24uQ29tcG9uZW50UmVnaXN0ZXJlZDpcbiAgICAgICAgdGhpcy5jb21wb25lbnQuc2Vzc2lvbktleSA9IHBheWxvYWQuc2Vzc2lvbktleVxuICAgICAgICBpZiAocGF5bG9hZC5jb21wb25lbnREYXRhKSB7XG4gICAgICAgICAgdGhpcy5jb21wb25lbnQuZGF0YSA9IHBheWxvYWQuY29tcG9uZW50RGF0YVxuICAgICAgICB9XG4gICAgICAgIHRoaXMub25SZWFkeShwYXlsb2FkLmRhdGEpXG4gICAgICAgIExvZ2dlci5pbmZvKCdDb21wb25lbnQgc3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyZWQgd2l0aCBwYXlsb2FkOicsIHBheWxvYWQpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGNhc2UgQ29tcG9uZW50QWN0aW9uLkFjdGl2YXRlVGhlbWVzOlxuICAgICAgICB0aGlzLmFjdGl2YXRlVGhlbWVzKHBheWxvYWQuZGF0YS50aGVtZXMpXG4gICAgICAgIGJyZWFrXG5cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKCFwYXlsb2FkLm9yaWdpbmFsKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIGNhbGxiYWNrIGZyb20gcXVldWUuXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsTWVzc2FnZSA9IHRoaXMuc2VudE1lc3NhZ2VzPy5maWx0ZXIoXG4gICAgICAgICAgKG1lc3NhZ2U6IE1lc3NhZ2VQYXlsb2FkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZS5tZXNzYWdlSWQgPT09IHBheWxvYWQub3JpZ2luYWw/Lm1lc3NhZ2VJZFxuICAgICAgICAgIH0sXG4gICAgICAgIClbMF1cblxuICAgICAgICBpZiAoIW9yaWdpbmFsTWVzc2FnZSkge1xuICAgICAgICAgIC8vIENvbm5lY3Rpb24gbXVzdCBoYXZlIGJlZW4gcmVzZXQuIFdlIHNob3VsZCBhbGVydCB0aGUgdXNlciB1bmxlc3MgaXQncyBhIHJlcGx5LFxuICAgICAgICAgIC8vIGluIHdoaWNoIGNhc2Ugd2UgbWF5IGhhdmUgYmVlbiBkZWFsbG9jYXRlZCBhbmQgcmVpbml0aWFsaXplZCBhbmQgbG9zdCB0aGVcbiAgICAgICAgICAvLyBvcmlnaW5hbCBtZXNzYWdlXG4gICAgICAgICAgY29uc3QgZXh0ZW5zaW9uTmFtZSA9IHRoaXMuY29udGVudFdpbmRvdy5kb2N1bWVudC50aXRsZVxuICAgICAgICAgIGNvbnN0IGFsZXJ0TWVzc2FnZSA9IChcbiAgICAgICAgICAgIGBUaGUgZXh0ZW5zaW9uICcke2V4dGVuc2lvbk5hbWV9JyBpcyBhdHRlbXB0aW5nIHRvIGNvbW11bmljYXRlIHdpdGggU3RhbmRhcmQgTm90ZXMsIGAgK1xuICAgICAgICAgICAgJ2J1dCBhbiBlcnJvciBpcyBwcmV2ZW50aW5nIGl0IGZyb20gZG9pbmcgc28uIFBsZWFzZSByZXN0YXJ0IHRoaXMgZXh0ZW5zaW9uIGFuZCB0cnkgYWdhaW4uJ1xuICAgICAgICAgICkucmVwbGFjZSgnICAnLCAnICcpXG5cbiAgICAgICAgICBMb2dnZXIuaW5mbyhhbGVydE1lc3NhZ2UpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBvcmlnaW5hbE1lc3NhZ2U/LmNhbGxiYWNrPy4ocGF5bG9hZC5kYXRhKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25SZWFkeShkYXRhOiBNZXNzYWdlRGF0YSkge1xuICAgIHRoaXMuY29tcG9uZW50LmVudmlyb25tZW50ID0gZGF0YS5lbnZpcm9ubWVudFxuICAgIHRoaXMuY29tcG9uZW50LnBsYXRmb3JtID0gZGF0YS5wbGF0Zm9ybVxuICAgIHRoaXMuY29tcG9uZW50LnV1aWQgPSBkYXRhLnV1aWRcblxuICAgIGlmICh0aGlzLmluaXRpYWxQZXJtaXNzaW9ucyAmJiB0aGlzLmluaXRpYWxQZXJtaXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnJlcXVlc3RQZXJtaXNzaW9ucyh0aGlzLmluaXRpYWxQZXJtaXNzaW9ucylcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgdGhpcy5tZXNzYWdlUXVldWUpIHtcbiAgICAgIHRoaXMucG9zdE1lc3NhZ2UobWVzc2FnZS5hY3Rpb24sIG1lc3NhZ2UuZGF0YSwgbWVzc2FnZS5jYWxsYmFjaylcbiAgICB9XG5cbiAgICB0aGlzLm1lc3NhZ2VRdWV1ZSA9IFtdXG5cbiAgICBMb2dnZXIuaW5mbygnRGF0YSBwYXNzZWQgdG8gb25SZWFkeTonLCBkYXRhKVxuXG4gICAgdGhpcy5hY3RpdmF0ZVRoZW1lcyhkYXRhLmFjdGl2ZVRoZW1lVXJscyB8fCBbXSlcblxuICAgIC8vIEFmdGVyIGFjdGl2YXRlVGhlbWVzIGlzIGRvbmUsIHdlIHdhbnQgdG8gc2VuZCBhIG1lc3NhZ2Ugd2l0aCB0aGUgVGhlbWVzQWN0aXZhdGVkIGFjdGlvbi5cbiAgICB0aGlzLnBvc3RNZXNzYWdlKENvbXBvbmVudEFjdGlvbi5UaGVtZXNBY3RpdmF0ZWQsIHt9KVxuXG4gICAgaWYgKHRoaXMub25SZWFkeUNhbGxiYWNrKSB7XG4gICAgICB0aGlzLm9uUmVhZHlDYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGNvbXBvbmVudCBVVUlELlxuICAgKi9cbiAgcHVibGljIGdldFNlbGZDb21wb25lbnRVVUlEKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LnV1aWRcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGNvbXBvbmVudCBpcyBydW5uaW5nIGluIGEgRGVza3RvcCBhcHBsaWNhdGlvbi5cbiAgICovXG4gIHB1YmxpYyBpc1J1bm5pbmdJbkRlc2t0b3BBcHBsaWNhdGlvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5jb21wb25lbnQuZW52aXJvbm1lbnQgPT09IGVudmlyb25tZW50VG9TdHJpbmcoRW52aXJvbm1lbnQuRGVza3RvcClcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBjb21wb25lbnQgaXMgcnVubmluZyBpbiBhIE1vYmlsZSBhcHBsaWNhdGlvbi5cbiAgICovXG4gIHB1YmxpYyBpc1J1bm5pbmdJbk1vYmlsZUFwcGxpY2F0aW9uKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmNvbXBvbmVudC5lbnZpcm9ubWVudCA9PT0gZW52aXJvbm1lbnRUb1N0cmluZyhFbnZpcm9ubWVudC5Nb2JpbGUpXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGNvbXBvbmVudCdzIGRhdGEgdmFsdWUgZm9yIHRoZSBzcGVjaWZpZWQga2V5LlxuICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgZm9yIHRoZSBkYXRhIG9iamVjdC5cbiAgICogQHJldHVybnMgYHVuZGVmaW5lZGAgaWYgdGhlIHZhbHVlIGZvciB0aGUga2V5IGRvZXMgbm90IGV4aXN0LiBSZXR1cm5zIHRoZSBzdG9yZWQgdmFsdWUgb3RoZXJ3aXNlLlxuICAgKi9cbiAgcHVibGljIGdldENvbXBvbmVudERhdGFWYWx1ZUZvcktleShrZXk6IHN0cmluZyk6IGFueSB7XG4gICAgaWYgKCF0aGlzLmNvbXBvbmVudC5kYXRhKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmRhdGFba2V5XVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGNvbXBvbmVudCdzIGRhdGEgdmFsdWUgZm9yIHRoZSBzcGVjaWZpZWQga2V5LlxuICAgKiBAcGFyYW0ga2V5IFRoZSBrZXkgZm9yIHRoZSBkYXRhIG9iamVjdC5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzdG9yZSB1bmRlciB0aGUgc3BlY2lmaWVkIGtleS5cbiAgICovXG4gIHB1YmxpYyBzZXRDb21wb25lbnREYXRhVmFsdWVGb3JLZXkoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY29tcG9uZW50LmRhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGNvbXBvbmVudCBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuJylcbiAgICB9XG4gICAgaWYgKCFrZXkgfHwgKGtleSAmJiBrZXkubGVuZ3RoID09PSAwKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUga2V5IGZvciB0aGUgZGF0YSB2YWx1ZSBzaG91bGQgYmUgYSB2YWxpZCBzdHJpbmcuJylcbiAgICB9XG4gICAgdGhpcy5jb21wb25lbnQuZGF0YSA9IHtcbiAgICAgIC4uLnRoaXMuY29tcG9uZW50LmRhdGEsXG4gICAgICBba2V5XTogdmFsdWUsXG4gICAgfVxuICAgIHRoaXMucG9zdE1lc3NhZ2UoQ29tcG9uZW50QWN0aW9uLlNldENvbXBvbmVudERhdGEsIHtcbiAgICAgIGNvbXBvbmVudERhdGE6IHRoaXMuY29tcG9uZW50LmRhdGEsXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIGNvbXBvbmVudCdzIGRhdGEgb2JqZWN0LlxuICAgKi9cbiAgcHVibGljIGNsZWFyQ29tcG9uZW50RGF0YSgpOiB2b2lkIHtcbiAgICB0aGlzLmNvbXBvbmVudC5kYXRhID0ge31cbiAgICB0aGlzLnBvc3RNZXNzYWdlKENvbXBvbmVudEFjdGlvbi5TZXRDb21wb25lbnREYXRhLCB7XG4gICAgICBjb21wb25lbnREYXRhOiB0aGlzLmNvbXBvbmVudC5kYXRhLFxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIHBvc3RNZXNzYWdlKFxuICAgIGFjdGlvbjogQ29tcG9uZW50QWN0aW9uLFxuICAgIGRhdGE6IE1lc3NhZ2VEYXRhLFxuICAgIGNhbGxiYWNrPzogKC4uLnBhcmFtczogYW55KSA9PiB2b2lkLFxuICApIHtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgc2Vzc2lvbktleSBpcyBub3Qgc2V0LCB3ZSBwdXNoIHRoZSBtZXNzYWdlIHRvIHF1ZXVlXG4gICAgICogdGhhdCB3aWxsIGJlIHByb2Nlc3NlZCBsYXRlciBvbi5cbiAgICAgKi9cbiAgICBpZiAoIXRoaXMuY29tcG9uZW50LnNlc3Npb25LZXkpIHtcbiAgICAgIHRoaXMubWVzc2FnZVF1ZXVlLnB1c2goe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGRhdGEsXG4gICAgICAgIGFwaTogTWVzc2FnZVBheWxvYWRBcGkuQ29tcG9uZW50LFxuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgIGFjdGlvbixcbiAgICAgIGRhdGEsXG4gICAgICBtZXNzYWdlSWQ6IHRoaXMuZ2VuZXJhdGVVVUlEKCksXG4gICAgICBzZXNzaW9uS2V5OiB0aGlzLmNvbXBvbmVudC5zZXNzaW9uS2V5LFxuICAgICAgYXBpOiBNZXNzYWdlUGF5bG9hZEFwaS5Db21wb25lbnQsXG4gICAgfVxuXG4gICAgY29uc3Qgc2VudE1lc3NhZ2UgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKVxuICAgIHNlbnRNZXNzYWdlLmNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICB0aGlzLnNlbnRNZXNzYWdlcy5wdXNoKHNlbnRNZXNzYWdlKVxuXG4gICAgbGV0IHBvc3RNZXNzYWdlUGF5bG9hZFxuXG4gICAgLy8gTW9iaWxlIChSZWFjdCBOYXRpdmUpIHJlcXVpcmVzIGEgc3RyaW5nIGZvciB0aGUgcG9zdE1lc3NhZ2UgQVBJLlxuICAgIGlmICh0aGlzLmlzUnVubmluZ0luTW9iaWxlQXBwbGljYXRpb24oKSkge1xuICAgICAgcG9zdE1lc3NhZ2VQYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkobWVzc2FnZSlcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zdE1lc3NhZ2VQYXlsb2FkID0gbWVzc2FnZVxuICAgIH1cblxuICAgIExvZ2dlci5pbmZvKCdQb3N0aW5nIG1lc3NhZ2U6JywgcG9zdE1lc3NhZ2VQYXlsb2FkKVxuICAgIHRoaXMuY29udGVudFdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoXG4gICAgICBwb3N0TWVzc2FnZVBheWxvYWQsXG4gICAgICB0aGlzLmNvbXBvbmVudC5vcmlnaW4hLFxuICAgIClcbiAgfVxuXG4gIHByaXZhdGUgcmVxdWVzdFBlcm1pc3Npb25zKFxuICAgIHBlcm1pc3Npb25zOiBDb21wb25lbnRQZXJtaXNzaW9uW10sXG4gICAgY2FsbGJhY2s/OiAoLi4ucGFyYW1zOiBhbnkpID0+IHZvaWQsXG4gICkge1xuICAgIHRoaXMucG9zdE1lc3NhZ2UoXG4gICAgICBDb21wb25lbnRBY3Rpb24uUmVxdWVzdFBlcm1pc3Npb25zLFxuICAgICAgeyBwZXJtaXNzaW9ucyB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICB9LFxuICAgIClcbiAgfVxuXG4gIHByaXZhdGUgYWN0aXZhdGVUaGVtZXMoaW5jb21pbmdVcmxzOiBzdHJpbmdbXSA9IFtdKSB7XG4gICAgaWYgKCF0aGlzLmNvbXBvbmVudC5hY2NlcHRzVGhlbWVzKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBMb2dnZXIuaW5mbygnSW5jb21pbmcgdGhlbWVzOicsIGluY29taW5nVXJscylcblxuICAgIGNvbnN0IHsgYWN0aXZlVGhlbWVzIH0gPSB0aGlzLmNvbXBvbmVudFxuXG4gICAgaWYgKFxuICAgICAgYWN0aXZlVGhlbWVzICYmXG4gICAgICBhY3RpdmVUaGVtZXMuc29ydCgpLnRvU3RyaW5nKCkgPT0gaW5jb21pbmdVcmxzLnNvcnQoKS50b1N0cmluZygpXG4gICAgKSB7XG4gICAgICAvLyBJbmNvbWluZyB0aGVtZSBVUkxzIGFyZSBzYW1lIGFzIGFjdGl2ZSwgZG8gbm90aGluZy5cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCB0aGVtZXNUb0FjdGl2YXRlID0gaW5jb21pbmdVcmxzXG4gICAgY29uc3QgdGhlbWVzVG9EZWFjdGl2YXRlID0gW11cblxuICAgIGZvciAoY29uc3QgYWN0aXZlVXJsIG9mIGFjdGl2ZVRoZW1lcykge1xuICAgICAgaWYgKCFpbmNvbWluZ1VybHMuaW5jbHVkZXMoYWN0aXZlVXJsKSkge1xuICAgICAgICAvLyBBY3RpdmUgbm90IHByZXNlbnQgaW4gaW5jb21pbmcsIGRlYWN0aXZhdGUgaXQuXG4gICAgICAgIHRoZW1lc1RvRGVhY3RpdmF0ZS5wdXNoKGFjdGl2ZVVybClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFscmVhZHkgcHJlc2VudCBpbiBhY3RpdmUgdGhlbWVzLCByZW1vdmUgaXQgZnJvbSB0aGVtZXNUb0FjdGl2YXRlLlxuICAgICAgICB0aGVtZXNUb0FjdGl2YXRlID0gdGhlbWVzVG9BY3RpdmF0ZS5maWx0ZXIoKGNhbmRpZGF0ZSkgPT4ge1xuICAgICAgICAgIHJldHVybiBjYW5kaWRhdGUgIT09IGFjdGl2ZVVybFxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIExvZ2dlci5pbmZvKCdEZWFjdGl2YXRpbmcgdGhlbWVzOicsIHRoZW1lc1RvRGVhY3RpdmF0ZSlcbiAgICBMb2dnZXIuaW5mbygnQWN0aXZhdGluZyB0aGVtZXM6JywgdGhlbWVzVG9BY3RpdmF0ZSlcblxuICAgIGZvciAoY29uc3QgdGhlbWVVcmwgb2YgdGhlbWVzVG9EZWFjdGl2YXRlKSB7XG4gICAgICB0aGlzLmRlYWN0aXZhdGVUaGVtZSh0aGVtZVVybClcbiAgICB9XG5cbiAgICB0aGlzLmNvbXBvbmVudC5hY3RpdmVUaGVtZXMgPSBpbmNvbWluZ1VybHNcblxuICAgIGZvciAoY29uc3QgdGhlbWVVcmwgb2YgdGhlbWVzVG9BY3RpdmF0ZSkge1xuICAgICAgaWYgKCF0aGVtZVVybCkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBsaW5rID0gdGhpcy5jb250ZW50V2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKVxuICAgICAgbGluay5pZCA9IGJ0b2EodGhlbWVVcmwpXG4gICAgICBsaW5rLmhyZWYgPSB0aGVtZVVybFxuICAgICAgbGluay50eXBlID0gJ3RleHQvY3NzJ1xuICAgICAgbGluay5yZWwgPSAnc3R5bGVzaGVldCdcbiAgICAgIGxpbmsubWVkaWEgPSAnc2NyZWVuLHByaW50J1xuICAgICAgbGluay5jbGFzc05hbWUgPSAnY3VzdG9tLXRoZW1lJ1xuICAgICAgdGhpcy5jb250ZW50V2luZG93LmRvY3VtZW50XG4gICAgICAgIC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdXG4gICAgICAgIC5hcHBlbmRDaGlsZChsaW5rKVxuICAgIH1cblxuICAgIHRoaXMub25UaGVtZXNDaGFuZ2VDYWxsYmFjayAmJiB0aGlzLm9uVGhlbWVzQ2hhbmdlQ2FsbGJhY2soKVxuICB9XG5cbiAgcHJpdmF0ZSB0aGVtZUVsZW1lbnRGb3JVcmwodGhlbWVVcmw6IHN0cmluZykge1xuICAgIGNvbnN0IGVsZW1lbnRzID0gQXJyYXkuZnJvbShcbiAgICAgIHRoaXMuY29udGVudFdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjdXN0b20tdGhlbWUnKSxcbiAgICApLnNsaWNlKClcbiAgICByZXR1cm4gZWxlbWVudHMuZmluZCgoZWxlbWVudCkgPT4ge1xuICAgICAgLy8gV2UgdXNlZCB0byBzZWFyY2ggaGVyZSBieSBgaHJlZmAsIGJ1dCBvbiBkZXNrdG9wLCB3aXRoIGxvY2FsIGZpbGU6Ly8gdXJscywgdGhhdCBkaWRuJ3Qgd29yayBmb3Igc29tZSByZWFzb24uXG4gICAgICByZXR1cm4gZWxlbWVudC5pZCA9PSBidG9hKHRoZW1lVXJsKVxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIGRlYWN0aXZhdGVUaGVtZSh0aGVtZVVybDogc3RyaW5nKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMudGhlbWVFbGVtZW50Rm9yVXJsKHRoZW1lVXJsKVxuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKVxuICAgICAgZWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVVVSUQoKSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlVXVpZCgpXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCBwbGF0Zm9ybSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHJ1bm5pbmcuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHBsYXRmb3JtKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LnBsYXRmb3JtXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgY3VycmVudCBlbnZpcm9ubWVudCB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHJ1bm5pbmcuXG4gICAqL1xuICBwdWJsaWMgZ2V0IGVudmlyb25tZW50KCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50LmVudmlyb25tZW50XG4gIH1cblxuICAvKipcbiAgICogU3RyZWFtcyBhIGNvbGxlY3Rpb24gb2YgSXRlbXMsIGZpbHRlcmVkIGJ5IGNvbnRlbnQgdHlwZS5cbiAgICogTmV3IGl0ZW1zIGFyZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrIGFzIHRoZXkgY29tZS5cbiAgICogQHBhcmFtIGNvbnRlbnRUeXBlcyBBIGNvbGxlY3Rpb24gb2YgQ29udGVudCBUeXBlcy5cbiAgICogQHBhcmFtIGNhbGxiYWNrIEEgY2FsbGJhY2sgdG8gcHJvY2VzcyB0aGUgc3RyZWFtZWQgaXRlbXMuXG4gICAqL1xuICBwdWJsaWMgc3RyZWFtSXRlbXMoXG4gICAgY29udGVudFR5cGVzOiBDb250ZW50VHlwZVtdLFxuICAgIGNhbGxiYWNrOiAoZGF0YTogYW55KSA9PiB2b2lkLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKFxuICAgICAgQ29tcG9uZW50QWN0aW9uLlN0cmVhbUl0ZW1zLFxuICAgICAgeyBjb250ZW50X3R5cGVzOiBjb250ZW50VHlwZXMgfSxcbiAgICAgIChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgY2FsbGJhY2soZGF0YS5pdGVtcylcbiAgICAgIH0sXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFN0cmVhbXMgdGhlIGN1cnJlbnQgSXRlbSBpbiBjb250ZXh0LlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayB0byBwcm9jZXNzIHRoZSBzdHJlYW1lZCBpdGVtLlxuICAgKi9cbiAgcHVibGljIHN0cmVhbUNvbnRleHRJdGVtKGNhbGxiYWNrOiAoZGF0YTogYW55KSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5wb3N0TWVzc2FnZShDb21wb25lbnRBY3Rpb24uU3RyZWFtQ29udGV4dEl0ZW0sIHt9LCAoZGF0YSkgPT4ge1xuICAgICAgY29uc3QgeyBpdGVtIH0gPSBkYXRhXG4gICAgICAvKipcbiAgICAgICAqIElmIHRoaXMgaXMgYSBuZXcgY29udGV4dCBpdGVtIHRoYW4gdGhlIGNvbnRleHQgaXRlbSB0aGUgY29tcG9uZW50IHdhcyBjdXJyZW50bHkgZW50ZXJ0YWluaW5nLFxuICAgICAgICogd2Ugd2FudCB0byBpbW1lZGlhdGVseSBjb21taXQgYW55IHBlbmRpbmcgc2F2ZXMsIGJlY2F1c2UgaWYgeW91IHNlbmQgdGhlIG5ldyBjb250ZXh0IGl0ZW0gdG8gdGhlXG4gICAgICAgKiBjb21wb25lbnQgYmVmb3JlIGl0IGhhcyBjb21taXRlZCBpdHMgcHJlc2F2ZSwgaXQgd2lsbCBlbmQgdXAgZmlyc3QgcmVwbGFjaW5nIHRoZSBVSSB3aXRoIG5ldyBjb250ZXh0IGl0ZW0sXG4gICAgICAgKiBhbmQgd2hlbiB0aGUgZGVib3VuY2VyIGV4ZWN1dGVzIHRvIHJlYWQgdGhlIGNvbXBvbmVudCBVSSwgaXQgd2lsbCBiZSByZWFkaW5nIHRoZSBuZXcgVUkgZm9yIHRoZSBwcmV2aW91cyBpdGVtLlxuICAgICAgICovXG4gICAgICBjb25zdCBpc05ld0l0ZW0gPVxuICAgICAgICAhdGhpcy5sYXN0U3RyZWFtZWRJdGVtIHx8IHRoaXMubGFzdFN0cmVhbWVkSXRlbS51dWlkICE9PSBpdGVtLnV1aWRcblxuICAgICAgaWYgKGlzTmV3SXRlbSAmJiB0aGlzLnBlbmRpbmdTYXZlVGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wZW5kaW5nU2F2ZVRpbWVvdXQpXG4gICAgICAgIHRoaXMucGVyZm9ybVNhdmluZ09mSXRlbXModGhpcy5wZW5kaW5nU2F2ZVBhcmFtcylcbiAgICAgICAgdGhpcy5wZW5kaW5nU2F2ZVRpbWVvdXQgPSB1bmRlZmluZWRcbiAgICAgICAgdGhpcy5wZW5kaW5nU2F2ZVBhcmFtcyA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICB0aGlzLmxhc3RTdHJlYW1lZEl0ZW0gPSBpdGVtXG4gICAgICBjYWxsYmFjayh0aGlzLmxhc3RTdHJlYW1lZEl0ZW0pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3RzIGEgYFRhZ2AgaXRlbS5cbiAgICogQHBhcmFtIGl0ZW0gVGhlIEl0ZW0gKGBUYWdgIG9yIGBTbWFydFRhZ2ApIHRvIHNlbGVjdC5cbiAgICovXG4gIHB1YmxpYyBzZWxlY3RJdGVtKGl0ZW06IEl0ZW1QYXlsb2FkKTogdm9pZCB7XG4gICAgdGhpcy5wb3N0TWVzc2FnZShDb21wb25lbnRBY3Rpb24uU2VsZWN0SXRlbSwge1xuICAgICAgaXRlbTogdGhpcy5qc29uT2JqZWN0Rm9ySXRlbShpdGVtKSxcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBjdXJyZW50IHNlbGVjdGVkIGBUYWdgIChpZiBhbnkpLlxuICAgKi9cbiAgcHVibGljIGNsZWFyU2VsZWN0aW9uKCk6IHZvaWQge1xuICAgIHRoaXMucG9zdE1lc3NhZ2UoQ29tcG9uZW50QWN0aW9uLkNsZWFyU2VsZWN0aW9uLCB7XG4gICAgICBjb250ZW50X3R5cGU6IENvbnRlbnRUeXBlLlRhZyxcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIHN0b3JlcyBhbiBJdGVtIGluIHRoZSBpdGVtIHN0b3JlLlxuICAgKiBAcGFyYW0gaXRlbSBUaGUgSXRlbSdzIHBheWxvYWQgY29udGVudC5cbiAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBwcm9jZXNzIHRoZSBjcmVhdGVkIEl0ZW0uXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlSXRlbShpdGVtOiBJdGVtUGF5bG9hZCwgY2FsbGJhY2s6IChkYXRhOiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKFxuICAgICAgQ29tcG9uZW50QWN0aW9uLkNyZWF0ZUl0ZW0sXG4gICAgICB7IGl0ZW06IHRoaXMuanNvbk9iamVjdEZvckl0ZW0oaXRlbSkgfSxcbiAgICAgIChkYXRhOiBhbnkpID0+IHtcbiAgICAgICAgbGV0IHsgaXRlbSB9ID0gZGF0YVxuICAgICAgICAvKipcbiAgICAgICAgICogQSBwcmV2aW91cyB2ZXJzaW9uIG9mIHRoZSBTTiBhcHAgaGFkIGFuIGlzc3VlIHdoZXJlIHRoZSBpdGVtIGluIHRoZSByZXBseSB0byBDb21wb25lbnRBY3Rpb25zLkNyZWF0ZUl0ZW1zXG4gICAgICAgICAqIHdvdWxkIGJlIG5lc3RlZCBpbnNpZGUgXCJpdGVtc1wiIGFuZCBub3QgXCJpdGVtXCIuIFNvIGhhbmRsZSBib3RoIGNhc2VzIGhlcmUuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoIWl0ZW0gJiYgZGF0YS5pdGVtcyAmJiBkYXRhLml0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpdGVtID0gZGF0YS5pdGVtc1swXVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXNzb2NpYXRlSXRlbShpdGVtKVxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhpdGVtKVxuICAgICAgfSxcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgc3RvcmVzIGEgY29sbGVjdGlvbiBvZiBJdGVtcyBpbiB0aGUgaXRlbSBzdG9yZS5cbiAgICogQHBhcmFtIGl0ZW1zIFRoZSBJdGVtKHMpIHBheWxvYWQgY29sbGVjdGlvbi5cbiAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBwcm9jZXNzIHRoZSBjcmVhdGVkIEl0ZW0ocykuXG4gICAqL1xuICBwdWJsaWMgY3JlYXRlSXRlbXMoXG4gICAgaXRlbXM6IEl0ZW1QYXlsb2FkW10sXG4gICAgY2FsbGJhY2s6IChkYXRhOiBhbnkpID0+IHZvaWQsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IG1hcHBlZCA9IGl0ZW1zLm1hcCgoaXRlbSkgPT4gdGhpcy5qc29uT2JqZWN0Rm9ySXRlbShpdGVtKSlcbiAgICB0aGlzLnBvc3RNZXNzYWdlKFxuICAgICAgQ29tcG9uZW50QWN0aW9uLkNyZWF0ZUl0ZW1zLFxuICAgICAgeyBpdGVtczogbWFwcGVkIH0sXG4gICAgICAoZGF0YTogYW55KSA9PiB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGRhdGEuaXRlbXMpXG4gICAgICB9LFxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NvY2lhdGVzIGEgYFRhZ2Agd2l0aCB0aGUgY3VycmVudCBOb3RlLlxuICAgKiBAcGFyYW0gaXRlbSBUaGUgYFRhZ2AgaXRlbSB0byBhc3NvY2lhdGUuXG4gICAqL1xuICBwdWJsaWMgYXNzb2NpYXRlSXRlbShpdGVtOiBJdGVtUGF5bG9hZCk6IHZvaWQge1xuICAgIHRoaXMucG9zdE1lc3NhZ2UoQ29tcG9uZW50QWN0aW9uLkFzc29jaWF0ZUl0ZW0sIHtcbiAgICAgIGl0ZW06IHRoaXMuanNvbk9iamVjdEZvckl0ZW0oaXRlbSksXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWFzc29jaWF0ZXMgYSBgVGFnYCB3aXRoIHRoZSBjdXJyZW50IE5vdGUuXG4gICAqIEBwYXJhbSBpdGVtIFRoZSBgVGFnYCBpdGVtIHRvIGRlYXNzb2NpYXRlLlxuICAgKi9cbiAgcHVibGljIGRlYXNzb2NpYXRlSXRlbShpdGVtOiBJdGVtUGF5bG9hZCk6IHZvaWQge1xuICAgIHRoaXMucG9zdE1lc3NhZ2UoQ29tcG9uZW50QWN0aW9uLkRlYXNzb2NpYXRlSXRlbSwge1xuICAgICAgaXRlbTogdGhpcy5qc29uT2JqZWN0Rm9ySXRlbShpdGVtKSxcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYW4gSXRlbSBmcm9tIHRoZSBpdGVtIHN0b3JlLlxuICAgKiBAcGFyYW0gaXRlbSBUaGUgSXRlbSB0byBkZWxldGUuXG4gICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBvcGVyYXRpb24uXG4gICAqL1xuICBwdWJsaWMgZGVsZXRlSXRlbShcbiAgICBpdGVtOiBJdGVtUGF5bG9hZCxcbiAgICBjYWxsYmFjazogKGRhdGE6IEl0ZW1NZXNzYWdlUGF5bG9hZCkgPT4gdm9pZCxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5kZWxldGVJdGVtcyhbaXRlbV0sIGNhbGxiYWNrKVxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBjb2xsZWN0aW9uIG9mIEl0ZW1zIGZyb20gdGhlIGl0ZW0gc3RvcmUuXG4gICAqIEBwYXJhbSBpdGVtcyBUaGUgSXRlbShzKSB0byBkZWxldGUuXG4gICAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgd2l0aCB0aGUgcmVzdWx0IG9mIHRoZSBvcGVyYXRpb24uXG4gICAqL1xuICBwdWJsaWMgZGVsZXRlSXRlbXMoXG4gICAgaXRlbXM6IEl0ZW1QYXlsb2FkW10sXG4gICAgY2FsbGJhY2s6IChkYXRhOiBJdGVtTWVzc2FnZVBheWxvYWQpID0+IHZvaWQsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgIGl0ZW1zOiBpdGVtcy5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuanNvbk9iamVjdEZvckl0ZW0oaXRlbSlcbiAgICAgIH0pLFxuICAgIH1cbiAgICB0aGlzLnBvc3RNZXNzYWdlKENvbXBvbmVudEFjdGlvbi5EZWxldGVJdGVtcywgcGFyYW1zLCAoZGF0YSkgPT4ge1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZGF0YSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgY3VzdG9tIGFjdGlvbiB0byB0aGUgY29tcG9uZW50IG1hbmFnZXIuXG4gICAqIEBwYXJhbSBhY3Rpb25cbiAgICogQHBhcmFtIGRhdGFcbiAgICogQHBhcmFtIGNhbGxiYWNrIFRoZSBjYWxsYmFjayB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG9wZXJhdGlvbi5cbiAgICovXG4gIHB1YmxpYyBzZW5kQ3VzdG9tRXZlbnQoXG4gICAgYWN0aW9uOiBDb21wb25lbnRBY3Rpb24sXG4gICAgZGF0YTogYW55LFxuICAgIGNhbGxiYWNrPzogKGRhdGE6IGFueSkgPT4gdm9pZCxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5wb3N0TWVzc2FnZShhY3Rpb24sIGRhdGEsIChkYXRhOiBhbnkpID0+IHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGRhdGEpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlcyBhbiBleGlzdGluZyBJdGVtIGluIHRoZSBpdGVtIHN0b3JlLlxuICAgKiBAcGFyYW0gaXRlbSBBbiBleGlzdGluZyBJdGVtIHRvIGJlIHNhdmVkLlxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHNraXBEZWJvdW5jZXJcbiAgICovXG4gIHB1YmxpYyBzYXZlSXRlbShcbiAgICBpdGVtOiBJdGVtUGF5bG9hZCxcbiAgICBjYWxsYmFjaz86ICgpID0+IHZvaWQsXG4gICAgc2tpcERlYm91bmNlciA9IGZhbHNlLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnNhdmVJdGVtcyhbaXRlbV0sIGNhbGxiYWNrLCBza2lwRGVib3VuY2VyKVxuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgYSBjYWxsYmFjayBiZWZvcmUgc2F2aW5nIGFuIEl0ZW0uXG4gICAqIEBwYXJhbSBpdGVtIEFuIGV4aXN0aW5nIEl0ZW0gdG8gYmUgc2F2ZWQuXG4gICAqIEBwYXJhbSBwcmVzYXZlIEFsbG93cyBjbGllbnRzIHRvIHBlcmZvcm0gYW55IGFjdGlvbnMgbGFzdCBzZWNvbmQgYmVmb3JlIHRoZSBzYXZlIGFjdHVhbGx5IG9jY3VycyAobGlrZSBzZXR0aW5nIHByZXZpZXdzKS5cbiAgICogU2F2ZXMgZGVib3VuY2UgYnkgZGVmYXVsdCwgc28gaWYgYSBjbGllbnQgbmVlZHMgdG8gY29tcHV0ZSBhIHByb3BlcnR5IG9uIGFuIGl0ZW0gYmVmb3JlIHNhdmluZywgaXQncyBiZXN0IHRvXG4gICAqIGhvb2sgaW50byB0aGUgZGVib3VuY2UgY3ljbGUgc28gdGhhdCBjbGllbnRzIGRvbid0IGhhdmUgdG8gaW1wbGVtZW50IHRoZWlyIG93biBkZWJvdW5jaW5nLlxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIHB1YmxpYyBzYXZlSXRlbVdpdGhQcmVzYXZlKFxuICAgIGl0ZW06IEl0ZW1QYXlsb2FkLFxuICAgIHByZXNhdmU6IGFueSxcbiAgICBjYWxsYmFjaz86ICgpID0+IHZvaWQsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuc2F2ZUl0ZW1zV2l0aFByZXNhdmUoW2l0ZW1dLCBwcmVzYXZlLCBjYWxsYmFjaylcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW5zIGEgY2FsbGJhY2sgYmVmb3JlIHNhdmluZyBhIGNvbGxlY3Rpb24gb2YgSXRlbXMuXG4gICAqIEBwYXJhbSBpdGVtcyBBIGNvbGxlY3Rpb24gb2YgZXhpc3RpbmcgSXRlbXMgdG8gYmUgc2F2ZWQuXG4gICAqIEBwYXJhbSBwcmVzYXZlIEFsbG93cyBjbGllbnRzIHRvIHBlcmZvcm0gYW55IGFjdGlvbnMgbGFzdCBzZWNvbmQgYmVmb3JlIHRoZSBzYXZlIGFjdHVhbGx5IG9jY3VycyAobGlrZSBzZXR0aW5nIHByZXZpZXdzKS5cbiAgICogU2F2ZXMgZGVib3VuY2UgYnkgZGVmYXVsdCwgc28gaWYgYSBjbGllbnQgbmVlZHMgdG8gY29tcHV0ZSBhIHByb3BlcnR5IG9uIGFuIGl0ZW0gYmVmb3JlIHNhdmluZywgaXQncyBiZXN0IHRvXG4gICAqIGhvb2sgaW50byB0aGUgZGVib3VuY2UgY3ljbGUgc28gdGhhdCBjbGllbnRzIGRvbid0IGhhdmUgdG8gaW1wbGVtZW50IHRoZWlyIG93biBkZWJvdW5jaW5nLlxuICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICovXG4gIHB1YmxpYyBzYXZlSXRlbXNXaXRoUHJlc2F2ZShcbiAgICBpdGVtczogSXRlbVBheWxvYWRbXSxcbiAgICBwcmVzYXZlOiBhbnksXG4gICAgY2FsbGJhY2s/OiAoKSA9PiB2b2lkLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnNhdmVJdGVtcyhpdGVtcywgY2FsbGJhY2ssIGZhbHNlLCBwcmVzYXZlKVxuICB9XG5cbiAgcHJpdmF0ZSBwZXJmb3JtU2F2aW5nT2ZJdGVtcyh7XG4gICAgaXRlbXMsXG4gICAgcHJlc2F2ZSxcbiAgICBjYWxsYmFjayxcbiAgfToge1xuICAgIGl0ZW1zOiBJdGVtUGF5bG9hZFtdXG4gICAgcHJlc2F2ZTogKCkgPT4gdm9pZFxuICAgIGNhbGxiYWNrPzogKCkgPT4gdm9pZFxuICB9KSB7XG4gICAgY29uc3QgQ29uY2VybkludGVydmFsTVMgPSA1MDAwXG4gICAgY29uc3QgY29uY2VyblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuY29uY2VyblRpbWVvdXRzLmZvckVhY2goKHRpbWVvdXQpID0+IGNsZWFyVGltZW91dCh0aW1lb3V0KSlcbiAgICAgIGFsZXJ0KFxuICAgICAgICAnVGhpcyBlZGl0b3IgaXMgdW5hYmxlIHRvIGNvbW11bmljYXRlIHdpdGggU3RhbmRhcmQgTm90ZXMuICcgK1xuICAgICAgICAgICdZb3VyIGNoYW5nZXMgbWF5IG5vdCBiZSBzYXZlZC4gUGxlYXNlIGJhY2t1cCB5b3VyIGNoYW5nZXMsIHRoZW4gcmVzdGFydCB0aGUgJyArXG4gICAgICAgICAgJ2FwcGxpY2F0aW9uIGFuZCB0cnkgYWdhaW4uJyxcbiAgICAgIClcbiAgICB9LCBDb25jZXJuSW50ZXJ2YWxNUylcblxuICAgIHRoaXMuY29uY2VyblRpbWVvdXRzLnB1c2goY29uY2VyblRpbWVvdXQpXG5cbiAgICAvKipcbiAgICAgKiBQcmVzYXZlIGJsb2NrIGFsbG93cyBjbGllbnQgdG8gZ2FpbiB0aGUgYmVuZWZpdCBvZiBwZXJmb3JtaW5nIHNvbWV0aGluZyBpbiB0aGUgZGVib3VuY2UgY3ljbGUuXG4gICAgICovXG4gICAgcHJlc2F2ZSAmJiBwcmVzYXZlKClcblxuICAgIGNvbnN0IG1hcHBlZEl0ZW1zID0gW11cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgIG1hcHBlZEl0ZW1zLnB1c2godGhpcy5qc29uT2JqZWN0Rm9ySXRlbShpdGVtKSlcbiAgICB9XG5cbiAgICBjb25zdCB3cmFwcGVkQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLmNvbmNlcm5UaW1lb3V0cy5mb3JFYWNoKCh0aW1lb3V0KSA9PiBjbGVhclRpbWVvdXQodGltZW91dCkpXG4gICAgICBjYWxsYmFjaz8uKClcbiAgICB9XG5cbiAgICB0aGlzLnBvc3RNZXNzYWdlKFxuICAgICAgQ29tcG9uZW50QWN0aW9uLlNhdmVJdGVtcyxcbiAgICAgIHsgaXRlbXM6IG1hcHBlZEl0ZW1zIH0sXG4gICAgICB3cmFwcGVkQ2FsbGJhY2ssXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFNhdmVzIGEgY29sbGVjdGlvbiBvZiBleGlzdGluZyBJdGVtcy5cbiAgICogQHBhcmFtIGl0ZW1zIFRoZSBpdGVtcyB0byBiZSBzYXZlZC5cbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqIEBwYXJhbSBza2lwRGVib3VuY2VyIEFsbG93cyBzYXZlcyB0byBnbyB0aHJvdWdoIHJpZ2h0IGF3YXkgcmF0aGVyIHRoYW4gd2FpdGluZyBmb3IgdGltZW91dC5cbiAgICogVGhpcyBzaG91bGQgYmUgdXNlZCB3aGVuIHNhdmluZyBpdGVtcyB2aWEgb3RoZXIgbWVhbnMgYmVzaWRlcyBrZXlzdHJva2VzLlxuICAgKiBAcGFyYW0gcHJlc2F2ZVxuICAgKi9cbiAgcHVibGljIHNhdmVJdGVtcyhcbiAgICBpdGVtczogSXRlbVBheWxvYWRbXSxcbiAgICBjYWxsYmFjaz86ICgpID0+IHZvaWQsXG4gICAgc2tpcERlYm91bmNlciA9IGZhbHNlLFxuICAgIHByZXNhdmU/OiBhbnksXG4gICk6IHZvaWQge1xuICAgIC8qKlxuICAgICAqIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgd2hlbiB3ZSBjbGVhciBhIHBlbmRpbmcgc2F2ZSB0aW1lb3V0LFxuICAgICAqIHdlIGNhcnJ5IG92ZXIgdGhvc2UgcGVuZGluZyBpdGVtcyBpbnRvIHRoZSBuZXcgc2F2ZS5cbiAgICAgKi9cbiAgICBpZiAoIXRoaXMucGVuZGluZ1NhdmVJdGVtcykge1xuICAgICAgdGhpcy5wZW5kaW5nU2F2ZUl0ZW1zID0gW11cbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb2FsbGVzZWRTYXZpbmcgJiYgIXNraXBEZWJvdW5jZXIpIHtcbiAgICAgIGlmICh0aGlzLnBlbmRpbmdTYXZlVGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wZW5kaW5nU2F2ZVRpbWVvdXQpXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGluY29taW5nSWRzID0gaXRlbXMubWFwKChpdGVtKSA9PiBpdGVtLnV1aWQpXG4gICAgICAvKipcbiAgICAgICAqIFJlcGxhY2UgYW55IGV4aXN0aW5nIHNhdmUgaXRlbXMgd2l0aCBpbmNvbWluZyB2YWx1ZXMuXG4gICAgICAgKiBPbmx5IGtlZXAgaXRlbXMgaGVyZSB3aG8gYXJlIG5vdCBpbiBpbmNvbWluZ0lkcy5cbiAgICAgICAqL1xuICAgICAgY29uc3QgcHJlZXhpc3RpbmdJdGVtcyA9IHRoaXMucGVuZGluZ1NhdmVJdGVtcy5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICAgICAgcmV0dXJuICFpbmNvbWluZ0lkcy5pbmNsdWRlcyhpdGVtLnV1aWQpXG4gICAgICB9KVxuXG4gICAgICAvLyBBZGQgbmV3IGl0ZW1zLCBub3cgdGhhdCB3ZSd2ZSBtYWRlIHN1cmUgaXQncyBjbGVhcmVkIG9mIGluY29taW5nIGl0ZW1zLlxuICAgICAgdGhpcy5wZW5kaW5nU2F2ZUl0ZW1zID0gcHJlZXhpc3RpbmdJdGVtcy5jb25jYXQoaXRlbXMpXG5cbiAgICAgIC8vIFdlJ2xsIHBvdGVudGlhbGx5IG5lZWQgdG8gY29tbWl0IGVhcmx5IGlmIHN0cmVhbS1jb250ZXh0LWl0ZW0gbWVzc2FnZSBjb21lcyBpbi5cbiAgICAgIHRoaXMucGVuZGluZ1NhdmVQYXJhbXMgPSB7XG4gICAgICAgIGl0ZW1zOiB0aGlzLnBlbmRpbmdTYXZlSXRlbXMsXG4gICAgICAgIHByZXNhdmUsXG4gICAgICAgIGNhbGxiYWNrLFxuICAgICAgfVxuXG4gICAgICB0aGlzLnBlbmRpbmdTYXZlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnBlcmZvcm1TYXZpbmdPZkl0ZW1zKHRoaXMucGVuZGluZ1NhdmVQYXJhbXMpXG4gICAgICAgIHRoaXMucGVuZGluZ1NhdmVJdGVtcyA9IFtdXG4gICAgICAgIHRoaXMucGVuZGluZ1NhdmVUaW1lb3V0ID0gdW5kZWZpbmVkXG4gICAgICAgIHRoaXMucGVuZGluZ1NhdmVQYXJhbXMgPSBudWxsXG4gICAgICB9LCB0aGlzLmNvYWxsZXNlZFNhdmluZ0RlbGF5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBlcmZvcm1TYXZpbmdPZkl0ZW1zKHsgaXRlbXMsIHByZXNhdmUsIGNhbGxiYWNrIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYSBuZXcgY29udGFpbmVyIHNpemUgZm9yIHRoZSBjdXJyZW50IGNvbXBvbmVudC5cbiAgICogQHBhcmFtIHdpZHRoIFRoZSBuZXcgd2lkdGguXG4gICAqIEBwYXJhbSBoZWlnaHQgVGhlIG5ldyBoZWlnaHQuXG4gICAqL1xuICBwdWJsaWMgc2V0U2l6ZSh3aWR0aDogc3RyaW5nIHwgbnVtYmVyLCBoZWlnaHQ6IHN0cmluZyB8IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMucG9zdE1lc3NhZ2UoQ29tcG9uZW50QWN0aW9uLlNldFNpemUsIHtcbiAgICAgIHR5cGU6ICdjb250YWluZXInLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyB0aGUgS2V5RG93biBrZXlib2FyZCBldmVudCB0byB0aGUgU3RhbmRhcmQgTm90ZXMgcGFyZW50IGFwcGxpY2F0aW9uLlxuICAgKiBAcGFyYW0ga2V5Ym9hcmRNb2RpZmllciBUaGUga2V5Ym9hcmQgbW9kaWZpZXIgdGhhdCB3YXMgcHJlc3NlZC5cbiAgICovXG4gIHByaXZhdGUga2V5RG93bkV2ZW50KGtleWJvYXJkTW9kaWZpZXI6IEtleWJvYXJkTW9kaWZpZXIpOiB2b2lkIHtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKENvbXBvbmVudEFjdGlvbi5LZXlEb3duLCB7IGtleWJvYXJkTW9kaWZpZXIgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyB0aGUgS2V5VXAga2V5Ym9hcmQgZXZlbnQgdG8gdGhlIFN0YW5kYXJkIE5vdGVzIHBhcmVudCBhcHBsaWNhdGlvbi5cbiAgICogQHBhcmFtIGtleWJvYXJkTW9kaWZpZXIgVGhlIGtleWJvYXJkIG1vZGlmaWVyIHRoYXQgd2FzIHJlbGVhc2VkLlxuICAgKi9cbiAgcHJpdmF0ZSBrZXlVcEV2ZW50KGtleWJvYXJkTW9kaWZpZXI6IEtleWJvYXJkTW9kaWZpZXIpOiB2b2lkIHtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKENvbXBvbmVudEFjdGlvbi5LZXlVcCwgeyBrZXlib2FyZE1vZGlmaWVyIH0pXG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgdGhlIENsaWNrIG1vdXNlIGV2ZW50IHRvIHRoZSBTdGFuZGFyZCBOb3RlcyBwYXJlbnQgYXBwbGljYXRpb24uXG4gICAqL1xuICBwcml2YXRlIG1vdXNlQ2xpY2tFdmVudCgpOiB2b2lkIHtcbiAgICB0aGlzLnBvc3RNZXNzYWdlKENvbXBvbmVudEFjdGlvbi5DbGljaywge30pXG4gIH1cblxuICBwcml2YXRlIGpzb25PYmplY3RGb3JJdGVtKGl0ZW06IFNOSXRlbSB8IEl0ZW1QYXlsb2FkKSB7XG4gICAgY29uc3QgY29weSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pIGFzIGFueVxuICAgIGNvcHkuY2hpbGRyZW4gPSBudWxsXG4gICAgY29weS5wYXJlbnQgPSBudWxsXG4gICAgcmV0dXJuIGNvcHlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBJdGVtJ3MgYXBwRGF0YSB2YWx1ZSBmb3IgdGhlIHNwZWNpZmllZCBrZXkuXG4gICAqIFVzZXMgdGhlIGRlZmF1bHQgZG9tYWluIChvcmcuc3RhbmRhcmRub3Rlcy5zbikuXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB3aXRoIEl0ZW1zIHJldHVybmVkIGZyb20gc3RyZWFtQ29udGV4dEl0ZW0oKSBhbmQgc3RyZWFtSXRlbXMoKVxuICAgKiBAcGFyYW0gaXRlbSBUaGUgSXRlbSB0byBnZXQgdGhlIGFwcERhdGEgdmFsdWUgZnJvbS5cbiAgICogQHBhcmFtIGtleSBUaGUga2V5IHRvIGdldCB0aGUgdmFsdWUgZnJvbS5cbiAgICovXG4gIHB1YmxpYyBnZXRJdGVtQXBwRGF0YVZhbHVlKFxuICAgIGl0ZW06IEl0ZW1NZXNzYWdlUGF5bG9hZCB8IHVuZGVmaW5lZCxcbiAgICBrZXk6IEFwcERhdGFGaWVsZCB8IHN0cmluZyxcbiAgKTogYW55IHtcbiAgICBjb25zdCBkZWZhdWx0RG9tYWluID0gJ29yZy5zdGFuZGFyZG5vdGVzLnNuJ1xuICAgIHJldHVybiBpdGVtPy5jb250ZW50Py5hcHBEYXRhPy5bZGVmYXVsdERvbWFpbl1ba2V5XVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHN2ZyB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PHBhdGggZD1cXFwiTTE5IDV2MTRINVY1aDE0bTAtMkg1Yy0xLjEgMC0yIC45LTIgMnYxNGMwIDEuMS45IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJ6XFxcIj48L3BhdGg+PHBhdGggZD1cXFwiTTAgMGgyNHYyNEgwelxcXCIgZmlsbD1cXFwibm9uZVxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjQgMjRcXFwiPjxwYXRoIGQ9XFxcIk0wIDBoMjR2MjRIMHpcXFwiIGZpbGw9XFxcIm5vbmVcXFwiPjwvcGF0aD48cGF0aCBkPVxcXCJNMTkgM0g1Yy0xLjExIDAtMiAuOS0yIDJ2MTRjMCAxLjEuODkgMiAyIDJoMTRjMS4xMSAwIDItLjkgMi0yVjVjMC0xLjEtLjg5LTItMi0yem0tOSAxNGwtNS01IDEuNDEtMS40MUwxMCAxNC4xN2w3LjU5LTcuNTlMMTkgOGwtOSA5elxcXCI+PC9wYXRoPjwvc3ZnPlwiIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIDo6LSBQZXJzaXN0ZW50IGRhdGEgc3RydWN0dXJlIHJlcHJlc2VudGluZyBhbiBvcmRlcmVkIG1hcHBpbmcgZnJvbVxuLy8gc3RyaW5ncyB0byB2YWx1ZXMsIHdpdGggc29tZSBjb252ZW5pZW50IHVwZGF0ZSBtZXRob2RzLlxuZnVuY3Rpb24gT3JkZXJlZE1hcChjb250ZW50KSB7XG4gIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG59XG5cbk9yZGVyZWRNYXAucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogT3JkZXJlZE1hcCxcblxuICBmaW5kOiBmdW5jdGlvbihrZXkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29udGVudC5sZW5ndGg7IGkgKz0gMilcbiAgICAgIGlmICh0aGlzLmNvbnRlbnRbaV0gPT09IGtleSkgcmV0dXJuIGlcbiAgICByZXR1cm4gLTFcbiAgfSxcblxuICAvLyA6OiAoc3RyaW5nKSDihpIgP2FueVxuICAvLyBSZXRyaWV2ZSB0aGUgdmFsdWUgc3RvcmVkIHVuZGVyIGBrZXlgLCBvciByZXR1cm4gdW5kZWZpbmVkIHdoZW5cbiAgLy8gbm8gc3VjaCBrZXkgZXhpc3RzLlxuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBmb3VuZCA9IHRoaXMuZmluZChrZXkpO1xuICAgIHJldHVybiBmb3VuZCA9PSAtMSA/IHVuZGVmaW5lZCA6IHRoaXMuY29udGVudFtmb3VuZCArIDFdXG4gIH0sXG5cbiAgLy8gOjogKHN0cmluZywgYW55LCA/c3RyaW5nKSDihpIgT3JkZXJlZE1hcFxuICAvLyBDcmVhdGUgYSBuZXcgbWFwIGJ5IHJlcGxhY2luZyB0aGUgdmFsdWUgb2YgYGtleWAgd2l0aCBhIG5ld1xuICAvLyB2YWx1ZSwgb3IgYWRkaW5nIGEgYmluZGluZyB0byB0aGUgZW5kIG9mIHRoZSBtYXAuIElmIGBuZXdLZXlgIGlzXG4gIC8vIGdpdmVuLCB0aGUga2V5IG9mIHRoZSBiaW5kaW5nIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGF0IGtleS5cbiAgdXBkYXRlOiBmdW5jdGlvbihrZXksIHZhbHVlLCBuZXdLZXkpIHtcbiAgICB2YXIgc2VsZiA9IG5ld0tleSAmJiBuZXdLZXkgIT0ga2V5ID8gdGhpcy5yZW1vdmUobmV3S2V5KSA6IHRoaXM7XG4gICAgdmFyIGZvdW5kID0gc2VsZi5maW5kKGtleSksIGNvbnRlbnQgPSBzZWxmLmNvbnRlbnQuc2xpY2UoKTtcbiAgICBpZiAoZm91bmQgPT0gLTEpIHtcbiAgICAgIGNvbnRlbnQucHVzaChuZXdLZXkgfHwga2V5LCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnRbZm91bmQgKyAxXSA9IHZhbHVlO1xuICAgICAgaWYgKG5ld0tleSkgY29udGVudFtmb3VuZF0gPSBuZXdLZXk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT3JkZXJlZE1hcChjb250ZW50KVxuICB9LFxuXG4gIC8vIDo6IChzdHJpbmcpIOKGkiBPcmRlcmVkTWFwXG4gIC8vIFJldHVybiBhIG1hcCB3aXRoIHRoZSBnaXZlbiBrZXkgcmVtb3ZlZCwgaWYgaXQgZXhpc3RlZC5cbiAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgZm91bmQgPSB0aGlzLmZpbmQoa2V5KTtcbiAgICBpZiAoZm91bmQgPT0gLTEpIHJldHVybiB0aGlzXG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLmNvbnRlbnQuc2xpY2UoKTtcbiAgICBjb250ZW50LnNwbGljZShmb3VuZCwgMik7XG4gICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwKGNvbnRlbnQpXG4gIH0sXG5cbiAgLy8gOjogKHN0cmluZywgYW55KSDihpIgT3JkZXJlZE1hcFxuICAvLyBBZGQgYSBuZXcga2V5IHRvIHRoZSBzdGFydCBvZiB0aGUgbWFwLlxuICBhZGRUb1N0YXJ0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwKFtrZXksIHZhbHVlXS5jb25jYXQodGhpcy5yZW1vdmUoa2V5KS5jb250ZW50KSlcbiAgfSxcblxuICAvLyA6OiAoc3RyaW5nLCBhbnkpIOKGkiBPcmRlcmVkTWFwXG4gIC8vIEFkZCBhIG5ldyBrZXkgdG8gdGhlIGVuZCBvZiB0aGUgbWFwLlxuICBhZGRUb0VuZDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHZhciBjb250ZW50ID0gdGhpcy5yZW1vdmUoa2V5KS5jb250ZW50LnNsaWNlKCk7XG4gICAgY29udGVudC5wdXNoKGtleSwgdmFsdWUpO1xuICAgIHJldHVybiBuZXcgT3JkZXJlZE1hcChjb250ZW50KVxuICB9LFxuXG4gIC8vIDo6IChzdHJpbmcsIHN0cmluZywgYW55KSDihpIgT3JkZXJlZE1hcFxuICAvLyBBZGQgYSBrZXkgYWZ0ZXIgdGhlIGdpdmVuIGtleS4gSWYgYHBsYWNlYCBpcyBub3QgZm91bmQsIHRoZSBuZXdcbiAgLy8ga2V5IGlzIGFkZGVkIHRvIHRoZSBlbmQuXG4gIGFkZEJlZm9yZTogZnVuY3Rpb24ocGxhY2UsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgd2l0aG91dCA9IHRoaXMucmVtb3ZlKGtleSksIGNvbnRlbnQgPSB3aXRob3V0LmNvbnRlbnQuc2xpY2UoKTtcbiAgICB2YXIgZm91bmQgPSB3aXRob3V0LmZpbmQocGxhY2UpO1xuICAgIGNvbnRlbnQuc3BsaWNlKGZvdW5kID09IC0xID8gY29udGVudC5sZW5ndGggOiBmb3VuZCwgMCwga2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwKGNvbnRlbnQpXG4gIH0sXG5cbiAgLy8gOjogKChrZXk6IHN0cmluZywgdmFsdWU6IGFueSkpXG4gIC8vIENhbGwgdGhlIGdpdmVuIGZ1bmN0aW9uIGZvciBlYWNoIGtleS92YWx1ZSBwYWlyIGluIHRoZSBtYXAsIGluXG4gIC8vIG9yZGVyLlxuICBmb3JFYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbnRlbnQubGVuZ3RoOyBpICs9IDIpXG4gICAgICBmKHRoaXMuY29udGVudFtpXSwgdGhpcy5jb250ZW50W2kgKyAxXSk7XG4gIH0sXG5cbiAgLy8gOjogKHVuaW9uPE9iamVjdCwgT3JkZXJlZE1hcD4pIOKGkiBPcmRlcmVkTWFwXG4gIC8vIENyZWF0ZSBhIG5ldyBtYXAgYnkgcHJlcGVuZGluZyB0aGUga2V5cyBpbiB0aGlzIG1hcCB0aGF0IGRvbid0XG4gIC8vIGFwcGVhciBpbiBgbWFwYCBiZWZvcmUgdGhlIGtleXMgaW4gYG1hcGAuXG4gIHByZXBlbmQ6IGZ1bmN0aW9uKG1hcCkge1xuICAgIG1hcCA9IE9yZGVyZWRNYXAuZnJvbShtYXApO1xuICAgIGlmICghbWFwLnNpemUpIHJldHVybiB0aGlzXG4gICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwKG1hcC5jb250ZW50LmNvbmNhdCh0aGlzLnN1YnRyYWN0KG1hcCkuY29udGVudCkpXG4gIH0sXG5cbiAgLy8gOjogKHVuaW9uPE9iamVjdCwgT3JkZXJlZE1hcD4pIOKGkiBPcmRlcmVkTWFwXG4gIC8vIENyZWF0ZSBhIG5ldyBtYXAgYnkgYXBwZW5kaW5nIHRoZSBrZXlzIGluIHRoaXMgbWFwIHRoYXQgZG9uJ3RcbiAgLy8gYXBwZWFyIGluIGBtYXBgIGFmdGVyIHRoZSBrZXlzIGluIGBtYXBgLlxuICBhcHBlbmQ6IGZ1bmN0aW9uKG1hcCkge1xuICAgIG1hcCA9IE9yZGVyZWRNYXAuZnJvbShtYXApO1xuICAgIGlmICghbWFwLnNpemUpIHJldHVybiB0aGlzXG4gICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwKHRoaXMuc3VidHJhY3QobWFwKS5jb250ZW50LmNvbmNhdChtYXAuY29udGVudCkpXG4gIH0sXG5cbiAgLy8gOjogKHVuaW9uPE9iamVjdCwgT3JkZXJlZE1hcD4pIOKGkiBPcmRlcmVkTWFwXG4gIC8vIENyZWF0ZSBhIG1hcCBjb250YWluaW5nIGFsbCB0aGUga2V5cyBpbiB0aGlzIG1hcCB0aGF0IGRvbid0XG4gIC8vIGFwcGVhciBpbiBgbWFwYC5cbiAgc3VidHJhY3Q6IGZ1bmN0aW9uKG1hcCkge1xuICAgIHZhciByZXN1bHQgPSB0aGlzO1xuICAgIG1hcCA9IE9yZGVyZWRNYXAuZnJvbShtYXApO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFwLmNvbnRlbnQubGVuZ3RoOyBpICs9IDIpXG4gICAgICByZXN1bHQgPSByZXN1bHQucmVtb3ZlKG1hcC5jb250ZW50W2ldKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0sXG5cbiAgLy8gOjogKCkg4oaSIE9iamVjdFxuICAvLyBUdXJuIG9yZGVyZWQgbWFwIGludG8gYSBwbGFpbiBvYmplY3QuXG4gIHRvT2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsgcmVzdWx0W2tleV0gPSB2YWx1ZTsgfSk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9LFxuXG4gIC8vIDo6IG51bWJlclxuICAvLyBUaGUgYW1vdW50IG9mIGtleXMgaW4gdGhpcyBtYXAuXG4gIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnQubGVuZ3RoID4+IDFcbiAgfVxufTtcblxuLy8gOjogKD91bmlvbjxPYmplY3QsIE9yZGVyZWRNYXA+KSDihpIgT3JkZXJlZE1hcFxuLy8gUmV0dXJuIGEgbWFwIHdpdGggdGhlIGdpdmVuIGNvbnRlbnQuIElmIG51bGwsIGNyZWF0ZSBhbiBlbXB0eVxuLy8gbWFwLiBJZiBnaXZlbiBhbiBvcmRlcmVkIG1hcCwgcmV0dXJuIHRoYXQgbWFwIGl0c2VsZi4gSWYgZ2l2ZW4gYW5cbi8vIG9iamVjdCwgY3JlYXRlIGEgbWFwIGZyb20gdGhlIG9iamVjdCdzIHByb3BlcnRpZXMuXG5PcmRlcmVkTWFwLmZyb20gPSBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBPcmRlcmVkTWFwKSByZXR1cm4gdmFsdWVcbiAgdmFyIGNvbnRlbnQgPSBbXTtcbiAgaWYgKHZhbHVlKSBmb3IgKHZhciBwcm9wIGluIHZhbHVlKSBjb250ZW50LnB1c2gocHJvcCwgdmFsdWVbcHJvcF0pO1xuICByZXR1cm4gbmV3IE9yZGVyZWRNYXAoY29udGVudClcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE9yZGVyZWRNYXA7XG4iLCJpbXBvcnQgT3JkZXJlZE1hcCBmcm9tICdvcmRlcmVkbWFwJztcblxuZnVuY3Rpb24gZmluZERpZmZTdGFydChhLCBiLCBwb3MpIHtcbiAgICBmb3IgKGxldCBpID0gMDs7IGkrKykge1xuICAgICAgICBpZiAoaSA9PSBhLmNoaWxkQ291bnQgfHwgaSA9PSBiLmNoaWxkQ291bnQpXG4gICAgICAgICAgICByZXR1cm4gYS5jaGlsZENvdW50ID09IGIuY2hpbGRDb3VudCA/IG51bGwgOiBwb3M7XG4gICAgICAgIGxldCBjaGlsZEEgPSBhLmNoaWxkKGkpLCBjaGlsZEIgPSBiLmNoaWxkKGkpO1xuICAgICAgICBpZiAoY2hpbGRBID09IGNoaWxkQikge1xuICAgICAgICAgICAgcG9zICs9IGNoaWxkQS5ub2RlU2l6ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2hpbGRBLnNhbWVNYXJrdXAoY2hpbGRCKSlcbiAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgIGlmIChjaGlsZEEuaXNUZXh0ICYmIGNoaWxkQS50ZXh0ICE9IGNoaWxkQi50ZXh0KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgY2hpbGRBLnRleHRbal0gPT0gY2hpbGRCLnRleHRbal07IGorKylcbiAgICAgICAgICAgICAgICBwb3MrKztcbiAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkQS5jb250ZW50LnNpemUgfHwgY2hpbGRCLmNvbnRlbnQuc2l6ZSkge1xuICAgICAgICAgICAgbGV0IGlubmVyID0gZmluZERpZmZTdGFydChjaGlsZEEuY29udGVudCwgY2hpbGRCLmNvbnRlbnQsIHBvcyArIDEpO1xuICAgICAgICAgICAgaWYgKGlubmVyICE9IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyO1xuICAgICAgICB9XG4gICAgICAgIHBvcyArPSBjaGlsZEEubm9kZVNpemU7XG4gICAgfVxufVxuZnVuY3Rpb24gZmluZERpZmZFbmQoYSwgYiwgcG9zQSwgcG9zQikge1xuICAgIGZvciAobGV0IGlBID0gYS5jaGlsZENvdW50LCBpQiA9IGIuY2hpbGRDb3VudDs7KSB7XG4gICAgICAgIGlmIChpQSA9PSAwIHx8IGlCID09IDApXG4gICAgICAgICAgICByZXR1cm4gaUEgPT0gaUIgPyBudWxsIDogeyBhOiBwb3NBLCBiOiBwb3NCIH07XG4gICAgICAgIGxldCBjaGlsZEEgPSBhLmNoaWxkKC0taUEpLCBjaGlsZEIgPSBiLmNoaWxkKC0taUIpLCBzaXplID0gY2hpbGRBLm5vZGVTaXplO1xuICAgICAgICBpZiAoY2hpbGRBID09IGNoaWxkQikge1xuICAgICAgICAgICAgcG9zQSAtPSBzaXplO1xuICAgICAgICAgICAgcG9zQiAtPSBzaXplO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjaGlsZEEuc2FtZU1hcmt1cChjaGlsZEIpKVxuICAgICAgICAgICAgcmV0dXJuIHsgYTogcG9zQSwgYjogcG9zQiB9O1xuICAgICAgICBpZiAoY2hpbGRBLmlzVGV4dCAmJiBjaGlsZEEudGV4dCAhPSBjaGlsZEIudGV4dCkge1xuICAgICAgICAgICAgbGV0IHNhbWUgPSAwLCBtaW5TaXplID0gTWF0aC5taW4oY2hpbGRBLnRleHQubGVuZ3RoLCBjaGlsZEIudGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgd2hpbGUgKHNhbWUgPCBtaW5TaXplICYmIGNoaWxkQS50ZXh0W2NoaWxkQS50ZXh0Lmxlbmd0aCAtIHNhbWUgLSAxXSA9PSBjaGlsZEIudGV4dFtjaGlsZEIudGV4dC5sZW5ndGggLSBzYW1lIC0gMV0pIHtcbiAgICAgICAgICAgICAgICBzYW1lKys7XG4gICAgICAgICAgICAgICAgcG9zQS0tO1xuICAgICAgICAgICAgICAgIHBvc0ItLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGE6IHBvc0EsIGI6IHBvc0IgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGRBLmNvbnRlbnQuc2l6ZSB8fCBjaGlsZEIuY29udGVudC5zaXplKSB7XG4gICAgICAgICAgICBsZXQgaW5uZXIgPSBmaW5kRGlmZkVuZChjaGlsZEEuY29udGVudCwgY2hpbGRCLmNvbnRlbnQsIHBvc0EgLSAxLCBwb3NCIC0gMSk7XG4gICAgICAgICAgICBpZiAoaW5uZXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyO1xuICAgICAgICB9XG4gICAgICAgIHBvc0EgLT0gc2l6ZTtcbiAgICAgICAgcG9zQiAtPSBzaXplO1xuICAgIH1cbn1cblxuLyoqXG5BIGZyYWdtZW50IHJlcHJlc2VudHMgYSBub2RlJ3MgY29sbGVjdGlvbiBvZiBjaGlsZCBub2Rlcy5cblxuTGlrZSBub2RlcywgZnJhZ21lbnRzIGFyZSBwZXJzaXN0ZW50IGRhdGEgc3RydWN0dXJlcywgYW5kIHlvdVxuc2hvdWxkIG5vdCBtdXRhdGUgdGhlbSBvciB0aGVpciBjb250ZW50LiBSYXRoZXIsIHlvdSBjcmVhdGUgbmV3XG5pbnN0YW5jZXMgd2hlbmV2ZXIgbmVlZGVkLiBUaGUgQVBJIHRyaWVzIHRvIG1ha2UgdGhpcyBlYXN5LlxuKi9cbmNsYXNzIEZyYWdtZW50IHtcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBjaGlsZCBub2RlcyBpbiB0aGlzIGZyYWdtZW50LlxuICAgICovXG4gICAgY29udGVudCwgc2l6ZSkge1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplIHx8IDA7XG4gICAgICAgIGlmIChzaXplID09IG51bGwpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgdGhpcy5zaXplICs9IGNvbnRlbnRbaV0ubm9kZVNpemU7XG4gICAgfVxuICAgIC8qKlxuICAgIEludm9rZSBhIGNhbGxiYWNrIGZvciBhbGwgZGVzY2VuZGFudCBub2RlcyBiZXR3ZWVuIHRoZSBnaXZlbiB0d29cbiAgICBwb3NpdGlvbnMgKHJlbGF0aXZlIHRvIHN0YXJ0IG9mIHRoaXMgZnJhZ21lbnQpLiBEb2Vzbid0IGRlc2NlbmRcbiAgICBpbnRvIGEgbm9kZSB3aGVuIHRoZSBjYWxsYmFjayByZXR1cm5zIGBmYWxzZWAuXG4gICAgKi9cbiAgICBub2Rlc0JldHdlZW4oZnJvbSwgdG8sIGYsIG5vZGVTdGFydCA9IDAsIHBhcmVudCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgcG9zID0gMDsgcG9zIDwgdG87IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jb250ZW50W2ldLCBlbmQgPSBwb3MgKyBjaGlsZC5ub2RlU2l6ZTtcbiAgICAgICAgICAgIGlmIChlbmQgPiBmcm9tICYmIGYoY2hpbGQsIG5vZGVTdGFydCArIHBvcywgcGFyZW50IHx8IG51bGwsIGkpICE9PSBmYWxzZSAmJiBjaGlsZC5jb250ZW50LnNpemUpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnQgPSBwb3MgKyAxO1xuICAgICAgICAgICAgICAgIGNoaWxkLm5vZGVzQmV0d2VlbihNYXRoLm1heCgwLCBmcm9tIC0gc3RhcnQpLCBNYXRoLm1pbihjaGlsZC5jb250ZW50LnNpemUsIHRvIC0gc3RhcnQpLCBmLCBub2RlU3RhcnQgKyBzdGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3MgPSBlbmQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgQ2FsbCB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGV2ZXJ5IGRlc2NlbmRhbnQgbm9kZS4gYHBvc2Agd2lsbCBiZVxuICAgIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGUgZnJhZ21lbnQuIFRoZSBjYWxsYmFjayBtYXkgcmV0dXJuXG4gICAgYGZhbHNlYCB0byBwcmV2ZW50IHRyYXZlcnNhbCBvZiBhIGdpdmVuIG5vZGUncyBjaGlsZHJlbi5cbiAgICAqL1xuICAgIGRlc2NlbmRhbnRzKGYpIHtcbiAgICAgICAgdGhpcy5ub2Rlc0JldHdlZW4oMCwgdGhpcy5zaXplLCBmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRXh0cmFjdCB0aGUgdGV4dCBiZXR3ZWVuIGBmcm9tYCBhbmQgYHRvYC4gU2VlIHRoZSBzYW1lIG1ldGhvZCBvblxuICAgIFtgTm9kZWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlLnRleHRCZXR3ZWVuKS5cbiAgICAqL1xuICAgIHRleHRCZXR3ZWVuKGZyb20sIHRvLCBibG9ja1NlcGFyYXRvciwgbGVhZlRleHQpIHtcbiAgICAgICAgbGV0IHRleHQgPSBcIlwiLCBmaXJzdCA9IHRydWU7XG4gICAgICAgIHRoaXMubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zKSA9PiB7XG4gICAgICAgICAgICBsZXQgbm9kZVRleHQgPSBub2RlLmlzVGV4dCA/IG5vZGUudGV4dC5zbGljZShNYXRoLm1heChmcm9tLCBwb3MpIC0gcG9zLCB0byAtIHBvcylcbiAgICAgICAgICAgICAgICA6ICFub2RlLmlzTGVhZiA/IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgOiBsZWFmVGV4dCA/ICh0eXBlb2YgbGVhZlRleHQgPT09IFwiZnVuY3Rpb25cIiA/IGxlYWZUZXh0KG5vZGUpIDogbGVhZlRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5vZGUudHlwZS5zcGVjLmxlYWZUZXh0ID8gbm9kZS50eXBlLnNwZWMubGVhZlRleHQobm9kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiXCI7XG4gICAgICAgICAgICBpZiAobm9kZS5pc0Jsb2NrICYmIChub2RlLmlzTGVhZiAmJiBub2RlVGV4dCB8fCBub2RlLmlzVGV4dGJsb2NrKSAmJiBibG9ja1NlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgIGlmIChmaXJzdClcbiAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRleHQgKz0gYmxvY2tTZXBhcmF0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0ICs9IG5vZGVUZXh0O1xuICAgICAgICB9LCAwKTtcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIG5ldyBmcmFnbWVudCBjb250YWluaW5nIHRoZSBjb21iaW5lZCBjb250ZW50IG9mIHRoaXNcbiAgICBmcmFnbWVudCBhbmQgdGhlIG90aGVyLlxuICAgICovXG4gICAgYXBwZW5kKG90aGVyKSB7XG4gICAgICAgIGlmICghb3RoZXIuc2l6ZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuc2l6ZSlcbiAgICAgICAgICAgIHJldHVybiBvdGhlcjtcbiAgICAgICAgbGV0IGxhc3QgPSB0aGlzLmxhc3RDaGlsZCwgZmlyc3QgPSBvdGhlci5maXJzdENoaWxkLCBjb250ZW50ID0gdGhpcy5jb250ZW50LnNsaWNlKCksIGkgPSAwO1xuICAgICAgICBpZiAobGFzdC5pc1RleHQgJiYgbGFzdC5zYW1lTWFya3VwKGZpcnN0KSkge1xuICAgICAgICAgICAgY29udGVudFtjb250ZW50Lmxlbmd0aCAtIDFdID0gbGFzdC53aXRoVGV4dChsYXN0LnRleHQgKyBmaXJzdC50ZXh0KTtcbiAgICAgICAgICAgIGkgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoOyBpIDwgb3RoZXIuY29udGVudC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGNvbnRlbnQucHVzaChvdGhlci5jb250ZW50W2ldKTtcbiAgICAgICAgcmV0dXJuIG5ldyBGcmFnbWVudChjb250ZW50LCB0aGlzLnNpemUgKyBvdGhlci5zaXplKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3V0IG91dCB0aGUgc3ViLWZyYWdtZW50IGJldHdlZW4gdGhlIHR3byBnaXZlbiBwb3NpdGlvbnMuXG4gICAgKi9cbiAgICBjdXQoZnJvbSwgdG8gPSB0aGlzLnNpemUpIHtcbiAgICAgICAgaWYgKGZyb20gPT0gMCAmJiB0byA9PSB0aGlzLnNpemUpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdLCBzaXplID0gMDtcbiAgICAgICAgaWYgKHRvID4gZnJvbSlcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBwb3MgPSAwOyBwb3MgPCB0bzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jb250ZW50W2ldLCBlbmQgPSBwb3MgKyBjaGlsZC5ub2RlU2l6ZTtcbiAgICAgICAgICAgICAgICBpZiAoZW5kID4gZnJvbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zIDwgZnJvbSB8fCBlbmQgPiB0bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmlzVGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkLmN1dChNYXRoLm1heCgwLCBmcm9tIC0gcG9zKSwgTWF0aC5taW4oY2hpbGQudGV4dC5sZW5ndGgsIHRvIC0gcG9zKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5jdXQoTWF0aC5tYXgoMCwgZnJvbSAtIHBvcyAtIDEpLCBNYXRoLm1pbihjaGlsZC5jb250ZW50LnNpemUsIHRvIC0gcG9zIC0gMSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSArPSBjaGlsZC5ub2RlU2l6ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcG9zID0gZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEZyYWdtZW50KHJlc3VsdCwgc2l6ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY3V0QnlJbmRleChmcm9tLCB0bykge1xuICAgICAgICBpZiAoZnJvbSA9PSB0bylcbiAgICAgICAgICAgIHJldHVybiBGcmFnbWVudC5lbXB0eTtcbiAgICAgICAgaWYgKGZyb20gPT0gMCAmJiB0byA9PSB0aGlzLmNvbnRlbnQubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgRnJhZ21lbnQodGhpcy5jb250ZW50LnNsaWNlKGZyb20sIHRvKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIG5ldyBmcmFnbWVudCBpbiB3aGljaCB0aGUgbm9kZSBhdCB0aGUgZ2l2ZW4gaW5kZXggaXNcbiAgICByZXBsYWNlZCBieSB0aGUgZ2l2ZW4gbm9kZS5cbiAgICAqL1xuICAgIHJlcGxhY2VDaGlsZChpbmRleCwgbm9kZSkge1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuY29udGVudFtpbmRleF07XG4gICAgICAgIGlmIChjdXJyZW50ID09IG5vZGUpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgbGV0IGNvcHkgPSB0aGlzLmNvbnRlbnQuc2xpY2UoKTtcbiAgICAgICAgbGV0IHNpemUgPSB0aGlzLnNpemUgKyBub2RlLm5vZGVTaXplIC0gY3VycmVudC5ub2RlU2l6ZTtcbiAgICAgICAgY29weVtpbmRleF0gPSBub2RlO1xuICAgICAgICByZXR1cm4gbmV3IEZyYWdtZW50KGNvcHksIHNpemUpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBuZXcgZnJhZ21lbnQgYnkgcHJlcGVuZGluZyB0aGUgZ2l2ZW4gbm9kZSB0byB0aGlzXG4gICAgZnJhZ21lbnQuXG4gICAgKi9cbiAgICBhZGRUb1N0YXJ0KG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGcmFnbWVudChbbm9kZV0uY29uY2F0KHRoaXMuY29udGVudCksIHRoaXMuc2l6ZSArIG5vZGUubm9kZVNpemUpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBuZXcgZnJhZ21lbnQgYnkgYXBwZW5kaW5nIHRoZSBnaXZlbiBub2RlIHRvIHRoaXNcbiAgICBmcmFnbWVudC5cbiAgICAqL1xuICAgIGFkZFRvRW5kKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGcmFnbWVudCh0aGlzLmNvbnRlbnQuY29uY2F0KG5vZGUpLCB0aGlzLnNpemUgKyBub2RlLm5vZGVTaXplKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ29tcGFyZSB0aGlzIGZyYWdtZW50IHRvIGFub3RoZXIgb25lLlxuICAgICovXG4gICAgZXEob3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGVudC5sZW5ndGggIT0gb3RoZXIuY29udGVudC5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250ZW50Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRlbnRbaV0uZXEob3RoZXIuY29udGVudFtpXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIGZpcnN0IGNoaWxkIG9mIHRoZSBmcmFnbWVudCwgb3IgYG51bGxgIGlmIGl0IGlzIGVtcHR5LlxuICAgICovXG4gICAgZ2V0IGZpcnN0Q2hpbGQoKSB7IHJldHVybiB0aGlzLmNvbnRlbnQubGVuZ3RoID8gdGhpcy5jb250ZW50WzBdIDogbnVsbDsgfVxuICAgIC8qKlxuICAgIFRoZSBsYXN0IGNoaWxkIG9mIHRoZSBmcmFnbWVudCwgb3IgYG51bGxgIGlmIGl0IGlzIGVtcHR5LlxuICAgICovXG4gICAgZ2V0IGxhc3RDaGlsZCgpIHsgcmV0dXJuIHRoaXMuY29udGVudC5sZW5ndGggPyB0aGlzLmNvbnRlbnRbdGhpcy5jb250ZW50Lmxlbmd0aCAtIDFdIDogbnVsbDsgfVxuICAgIC8qKlxuICAgIFRoZSBudW1iZXIgb2YgY2hpbGQgbm9kZXMgaW4gdGhpcyBmcmFnbWVudC5cbiAgICAqL1xuICAgIGdldCBjaGlsZENvdW50KCkgeyByZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aDsgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgY2hpbGQgbm9kZSBhdCB0aGUgZ2l2ZW4gaW5kZXguIFJhaXNlIGFuIGVycm9yIHdoZW4gdGhlXG4gICAgaW5kZXggaXMgb3V0IG9mIHJhbmdlLlxuICAgICovXG4gICAgY2hpbGQoaW5kZXgpIHtcbiAgICAgICAgbGV0IGZvdW5kID0gdGhpcy5jb250ZW50W2luZGV4XTtcbiAgICAgICAgaWYgKCFmb3VuZClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggXCIgKyBpbmRleCArIFwiIG91dCBvZiByYW5nZSBmb3IgXCIgKyB0aGlzKTtcbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIGNoaWxkIG5vZGUgYXQgdGhlIGdpdmVuIGluZGV4LCBpZiBpdCBleGlzdHMuXG4gICAgKi9cbiAgICBtYXliZUNoaWxkKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRbaW5kZXhdIHx8IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgIENhbGwgYGZgIGZvciBldmVyeSBjaGlsZCBub2RlLCBwYXNzaW5nIHRoZSBub2RlLCBpdHMgb2Zmc2V0XG4gICAgaW50byB0aGlzIHBhcmVudCBub2RlLCBhbmQgaXRzIGluZGV4LlxuICAgICovXG4gICAgZm9yRWFjaChmKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBwID0gMDsgaSA8IHRoaXMuY29udGVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jb250ZW50W2ldO1xuICAgICAgICAgICAgZihjaGlsZCwgcCwgaSk7XG4gICAgICAgICAgICBwICs9IGNoaWxkLm5vZGVTaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgdGhlIGZpcnN0IHBvc2l0aW9uIGF0IHdoaWNoIHRoaXMgZnJhZ21lbnQgYW5kIGFub3RoZXJcbiAgICBmcmFnbWVudCBkaWZmZXIsIG9yIGBudWxsYCBpZiB0aGV5IGFyZSB0aGUgc2FtZS5cbiAgICAqL1xuICAgIGZpbmREaWZmU3RhcnQob3RoZXIsIHBvcyA9IDApIHtcbiAgICAgICAgcmV0dXJuIGZpbmREaWZmU3RhcnQodGhpcywgb3RoZXIsIHBvcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgdGhlIGZpcnN0IHBvc2l0aW9uLCBzZWFyY2hpbmcgZnJvbSB0aGUgZW5kLCBhdCB3aGljaCB0aGlzXG4gICAgZnJhZ21lbnQgYW5kIHRoZSBnaXZlbiBmcmFnbWVudCBkaWZmZXIsIG9yIGBudWxsYCBpZiB0aGV5IGFyZVxuICAgIHRoZSBzYW1lLiBTaW5jZSB0aGlzIHBvc2l0aW9uIHdpbGwgbm90IGJlIHRoZSBzYW1lIGluIGJvdGhcbiAgICBub2RlcywgYW4gb2JqZWN0IHdpdGggdHdvIHNlcGFyYXRlIHBvc2l0aW9ucyBpcyByZXR1cm5lZC5cbiAgICAqL1xuICAgIGZpbmREaWZmRW5kKG90aGVyLCBwb3MgPSB0aGlzLnNpemUsIG90aGVyUG9zID0gb3RoZXIuc2l6ZSkge1xuICAgICAgICByZXR1cm4gZmluZERpZmZFbmQodGhpcywgb3RoZXIsIHBvcywgb3RoZXJQb3MpO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSBpbmRleCBhbmQgaW5uZXIgb2Zmc2V0IGNvcnJlc3BvbmRpbmcgdG8gYSBnaXZlbiByZWxhdGl2ZVxuICAgIHBvc2l0aW9uIGluIHRoaXMgZnJhZ21lbnQuIFRoZSByZXN1bHQgb2JqZWN0IHdpbGwgYmUgcmV1c2VkXG4gICAgKG92ZXJ3cml0dGVuKSB0aGUgbmV4dCB0aW1lIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQuIEBpbnRlcm5hbFxuICAgICovXG4gICAgZmluZEluZGV4KHBvcywgcm91bmQgPSAtMSkge1xuICAgICAgICBpZiAocG9zID09IDApXG4gICAgICAgICAgICByZXR1cm4gcmV0SW5kZXgoMCwgcG9zKTtcbiAgICAgICAgaWYgKHBvcyA9PSB0aGlzLnNpemUpXG4gICAgICAgICAgICByZXR1cm4gcmV0SW5kZXgodGhpcy5jb250ZW50Lmxlbmd0aCwgcG9zKTtcbiAgICAgICAgaWYgKHBvcyA+IHRoaXMuc2l6ZSB8fCBwb3MgPCAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFBvc2l0aW9uICR7cG9zfSBvdXRzaWRlIG9mIGZyYWdtZW50ICgke3RoaXN9KWApO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgY3VyUG9zID0gMDs7IGkrKykge1xuICAgICAgICAgICAgbGV0IGN1ciA9IHRoaXMuY2hpbGQoaSksIGVuZCA9IGN1clBvcyArIGN1ci5ub2RlU2l6ZTtcbiAgICAgICAgICAgIGlmIChlbmQgPj0gcG9zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVuZCA9PSBwb3MgfHwgcm91bmQgPiAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0SW5kZXgoaSArIDEsIGVuZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldEluZGV4KGksIGN1clBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJQb3MgPSBlbmQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJuIGEgZGVidWdnaW5nIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGlzIGZyYWdtZW50LlxuICAgICovXG4gICAgdG9TdHJpbmcoKSB7IHJldHVybiBcIjxcIiArIHRoaXMudG9TdHJpbmdJbm5lcigpICsgXCI+XCI7IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRvU3RyaW5nSW5uZXIoKSB7IHJldHVybiB0aGlzLmNvbnRlbnQuam9pbihcIiwgXCIpOyB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgSlNPTi1zZXJpYWxpemVhYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgZnJhZ21lbnQuXG4gICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQubGVuZ3RoID8gdGhpcy5jb250ZW50Lm1hcChuID0+IG4udG9KU09OKCkpIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgRGVzZXJpYWxpemUgYSBmcmFnbWVudCBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uLlxuICAgICovXG4gICAgc3RhdGljIGZyb21KU09OKHNjaGVtYSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSlcbiAgICAgICAgICAgIHJldHVybiBGcmFnbWVudC5lbXB0eTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgRnJhZ21lbnQuZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgRnJhZ21lbnQodmFsdWUubWFwKHNjaGVtYS5ub2RlRnJvbUpTT04pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQnVpbGQgYSBmcmFnbWVudCBmcm9tIGFuIGFycmF5IG9mIG5vZGVzLiBFbnN1cmVzIHRoYXQgYWRqYWNlbnRcbiAgICB0ZXh0IG5vZGVzIHdpdGggdGhlIHNhbWUgbWFya3MgYXJlIGpvaW5lZCB0b2dldGhlci5cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tQXJyYXkoYXJyYXkpIHtcbiAgICAgICAgaWYgKCFhcnJheS5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gRnJhZ21lbnQuZW1wdHk7XG4gICAgICAgIGxldCBqb2luZWQsIHNpemUgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IGFycmF5W2ldO1xuICAgICAgICAgICAgc2l6ZSArPSBub2RlLm5vZGVTaXplO1xuICAgICAgICAgICAgaWYgKGkgJiYgbm9kZS5pc1RleHQgJiYgYXJyYXlbaSAtIDFdLnNhbWVNYXJrdXAobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWpvaW5lZClcbiAgICAgICAgICAgICAgICAgICAgam9pbmVkID0gYXJyYXkuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgICAgam9pbmVkW2pvaW5lZC5sZW5ndGggLSAxXSA9IG5vZGVcbiAgICAgICAgICAgICAgICAgICAgLndpdGhUZXh0KGpvaW5lZFtqb2luZWQubGVuZ3RoIC0gMV0udGV4dCArIG5vZGUudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChqb2luZWQpIHtcbiAgICAgICAgICAgICAgICBqb2luZWQucHVzaChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEZyYWdtZW50KGpvaW5lZCB8fCBhcnJheSwgc2l6ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIGZyYWdtZW50IGZyb20gc29tZXRoaW5nIHRoYXQgY2FuIGJlIGludGVycHJldGVkIGFzIGFcbiAgICBzZXQgb2Ygbm9kZXMuIEZvciBgbnVsbGAsIGl0IHJldHVybnMgdGhlIGVtcHR5IGZyYWdtZW50LiBGb3IgYVxuICAgIGZyYWdtZW50LCB0aGUgZnJhZ21lbnQgaXRzZWxmLiBGb3IgYSBub2RlIG9yIGFycmF5IG9mIG5vZGVzLCBhXG4gICAgZnJhZ21lbnQgY29udGFpbmluZyB0aG9zZSBub2Rlcy5cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tKG5vZGVzKSB7XG4gICAgICAgIGlmICghbm9kZXMpXG4gICAgICAgICAgICByZXR1cm4gRnJhZ21lbnQuZW1wdHk7XG4gICAgICAgIGlmIChub2RlcyBpbnN0YW5jZW9mIEZyYWdtZW50KVxuICAgICAgICAgICAgcmV0dXJuIG5vZGVzO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlcykpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mcm9tQXJyYXkobm9kZXMpO1xuICAgICAgICBpZiAobm9kZXMuYXR0cnMpXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZyYWdtZW50KFtub2Rlc10sIG5vZGVzLm5vZGVTaXplKTtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJDYW4gbm90IGNvbnZlcnQgXCIgKyBub2RlcyArIFwiIHRvIGEgRnJhZ21lbnRcIiArXG4gICAgICAgICAgICAobm9kZXMubm9kZXNCZXR3ZWVuID8gXCIgKGxvb2tzIGxpa2UgbXVsdGlwbGUgdmVyc2lvbnMgb2YgcHJvc2VtaXJyb3ItbW9kZWwgd2VyZSBsb2FkZWQpXCIgOiBcIlwiKSk7XG4gICAgfVxufVxuLyoqXG5BbiBlbXB0eSBmcmFnbWVudC4gSW50ZW5kZWQgdG8gYmUgcmV1c2VkIHdoZW5ldmVyIGEgbm9kZSBkb2Vzbid0XG5jb250YWluIGFueXRoaW5nIChyYXRoZXIgdGhhbiBhbGxvY2F0aW5nIGEgbmV3IGVtcHR5IGZyYWdtZW50IGZvclxuZWFjaCBsZWFmIG5vZGUpLlxuKi9cbkZyYWdtZW50LmVtcHR5ID0gbmV3IEZyYWdtZW50KFtdLCAwKTtcbmNvbnN0IGZvdW5kID0geyBpbmRleDogMCwgb2Zmc2V0OiAwIH07XG5mdW5jdGlvbiByZXRJbmRleChpbmRleCwgb2Zmc2V0KSB7XG4gICAgZm91bmQuaW5kZXggPSBpbmRleDtcbiAgICBmb3VuZC5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgcmV0dXJuIGZvdW5kO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlRGVlcChhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICghKGEgJiYgdHlwZW9mIGEgPT0gXCJvYmplY3RcIikgfHxcbiAgICAgICAgIShiICYmIHR5cGVvZiBiID09IFwib2JqZWN0XCIpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGFycmF5ID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShiKSAhPSBhcnJheSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChhcnJheSkge1xuICAgICAgICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmICghY29tcGFyZURlZXAoYVtpXSwgYltpXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgcCBpbiBhKVxuICAgICAgICAgICAgaWYgKCEocCBpbiBiKSB8fCAhY29tcGFyZURlZXAoYVtwXSwgYltwXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBwIGluIGIpXG4gICAgICAgICAgICBpZiAoIShwIGluIGEpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuQSBtYXJrIGlzIGEgcGllY2Ugb2YgaW5mb3JtYXRpb24gdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYSBub2RlLFxuc3VjaCBhcyBpdCBiZWluZyBlbXBoYXNpemVkLCBpbiBjb2RlIGZvbnQsIG9yIGEgbGluay4gSXQgaGFzIGFcbnR5cGUgYW5kIG9wdGlvbmFsbHkgYSBzZXQgb2YgYXR0cmlidXRlcyB0aGF0IHByb3ZpZGUgZnVydGhlclxuaW5mb3JtYXRpb24gKHN1Y2ggYXMgdGhlIHRhcmdldCBvZiB0aGUgbGluaykuIE1hcmtzIGFyZSBjcmVhdGVkXG50aHJvdWdoIGEgYFNjaGVtYWAsIHdoaWNoIGNvbnRyb2xzIHdoaWNoIHR5cGVzIGV4aXN0IGFuZCB3aGljaFxuYXR0cmlidXRlcyB0aGV5IGhhdmUuXG4qL1xuY2xhc3MgTWFyayB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgdHlwZSBvZiB0aGlzIG1hcmsuXG4gICAgKi9cbiAgICB0eXBlLCBcbiAgICAvKipcbiAgICBUaGUgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGggdGhpcyBtYXJrLlxuICAgICovXG4gICAgYXR0cnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5hdHRycyA9IGF0dHJzO1xuICAgIH1cbiAgICAvKipcbiAgICBHaXZlbiBhIHNldCBvZiBtYXJrcywgY3JlYXRlIGEgbmV3IHNldCB3aGljaCBjb250YWlucyB0aGlzIG9uZSBhc1xuICAgIHdlbGwsIGluIHRoZSByaWdodCBwb3NpdGlvbi4gSWYgdGhpcyBtYXJrIGlzIGFscmVhZHkgaW4gdGhlIHNldCxcbiAgICB0aGUgc2V0IGl0c2VsZiBpcyByZXR1cm5lZC4gSWYgYW55IG1hcmtzIHRoYXQgYXJlIHNldCB0byBiZVxuICAgIFtleGNsdXNpdmVdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5NYXJrU3BlYy5leGNsdWRlcykgd2l0aCB0aGlzIG1hcmsgYXJlIHByZXNlbnQsXG4gICAgdGhvc2UgYXJlIHJlcGxhY2VkIGJ5IHRoaXMgb25lLlxuICAgICovXG4gICAgYWRkVG9TZXQoc2V0KSB7XG4gICAgICAgIGxldCBjb3B5LCBwbGFjZWQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBvdGhlciA9IHNldFtpXTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVxKG90aGVyKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0O1xuICAgICAgICAgICAgaWYgKHRoaXMudHlwZS5leGNsdWRlcyhvdGhlci50eXBlKSkge1xuICAgICAgICAgICAgICAgIGlmICghY29weSlcbiAgICAgICAgICAgICAgICAgICAgY29weSA9IHNldC5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG90aGVyLnR5cGUuZXhjbHVkZXModGhpcy50eXBlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXBsYWNlZCAmJiBvdGhlci50eXBlLnJhbmsgPiB0aGlzLnR5cGUucmFuaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvcHkpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5ID0gc2V0LnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICAgICAgICBjb3B5LnB1c2godGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb3B5KVxuICAgICAgICAgICAgICAgICAgICBjb3B5LnB1c2gob3RoZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghY29weSlcbiAgICAgICAgICAgIGNvcHkgPSBzZXQuc2xpY2UoKTtcbiAgICAgICAgaWYgKCFwbGFjZWQpXG4gICAgICAgICAgICBjb3B5LnB1c2godGhpcyk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKipcbiAgICBSZW1vdmUgdGhpcyBtYXJrIGZyb20gdGhlIGdpdmVuIHNldCwgcmV0dXJuaW5nIGEgbmV3IHNldC4gSWYgdGhpc1xuICAgIG1hcmsgaXMgbm90IGluIHRoZSBzZXQsIHRoZSBzZXQgaXRzZWxmIGlzIHJldHVybmVkLlxuICAgICovXG4gICAgcmVtb3ZlRnJvbVNldChzZXQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBpZiAodGhpcy5lcShzZXRbaV0pKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZXQuc2xpY2UoMCwgaSkuY29uY2F0KHNldC5zbGljZShpICsgMSkpO1xuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH1cbiAgICAvKipcbiAgICBUZXN0IHdoZXRoZXIgdGhpcyBtYXJrIGlzIGluIHRoZSBnaXZlbiBzZXQgb2YgbWFya3MuXG4gICAgKi9cbiAgICBpc0luU2V0KHNldCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmICh0aGlzLmVxKHNldFtpXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGVzdCB3aGV0aGVyIHRoaXMgbWFyayBoYXMgdGhlIHNhbWUgdHlwZSBhbmQgYXR0cmlidXRlcyBhc1xuICAgIGFub3RoZXIgbWFyay5cbiAgICAqL1xuICAgIGVxKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzID09IG90aGVyIHx8XG4gICAgICAgICAgICAodGhpcy50eXBlID09IG90aGVyLnR5cGUgJiYgY29tcGFyZURlZXAodGhpcy5hdHRycywgb3RoZXIuYXR0cnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ29udmVydCB0aGlzIG1hcmsgdG8gYSBKU09OLXNlcmlhbGl6ZWFibGUgcmVwcmVzZW50YXRpb24uXG4gICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGxldCBvYmogPSB7IHR5cGU6IHRoaXMudHlwZS5uYW1lIH07XG4gICAgICAgIGZvciAobGV0IF8gaW4gdGhpcy5hdHRycykge1xuICAgICAgICAgICAgb2JqLmF0dHJzID0gdGhpcy5hdHRycztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIC8qKlxuICAgIERlc2VyaWFsaXplIGEgbWFyayBmcm9tIEpTT04uXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICghanNvbilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgTWFyay5mcm9tSlNPTlwiKTtcbiAgICAgICAgbGV0IHR5cGUgPSBzY2hlbWEubWFya3NbanNvbi50eXBlXTtcbiAgICAgICAgaWYgKCF0eXBlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFRoZXJlIGlzIG5vIG1hcmsgdHlwZSAke2pzb24udHlwZX0gaW4gdGhpcyBzY2hlbWFgKTtcbiAgICAgICAgbGV0IG1hcmsgPSB0eXBlLmNyZWF0ZShqc29uLmF0dHJzKTtcbiAgICAgICAgdHlwZS5jaGVja0F0dHJzKG1hcmsuYXR0cnMpO1xuICAgICAgICByZXR1cm4gbWFyaztcbiAgICB9XG4gICAgLyoqXG4gICAgVGVzdCB3aGV0aGVyIHR3byBzZXRzIG9mIG1hcmtzIGFyZSBpZGVudGljYWwuXG4gICAgKi9cbiAgICBzdGF0aWMgc2FtZVNldChhLCBiKSB7XG4gICAgICAgIGlmIChhID09IGIpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGEubGVuZ3RoICE9IGIubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBpZiAoIWFbaV0uZXEoYltpXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgcHJvcGVybHkgc29ydGVkIG1hcmsgc2V0IGZyb20gbnVsbCwgYSBzaW5nbGUgbWFyaywgb3IgYW5cbiAgICB1bnNvcnRlZCBhcnJheSBvZiBtYXJrcy5cbiAgICAqL1xuICAgIHN0YXRpYyBzZXRGcm9tKG1hcmtzKSB7XG4gICAgICAgIGlmICghbWFya3MgfHwgQXJyYXkuaXNBcnJheShtYXJrcykgJiYgbWFya3MubGVuZ3RoID09IDApXG4gICAgICAgICAgICByZXR1cm4gTWFyay5ub25lO1xuICAgICAgICBpZiAobWFya3MgaW5zdGFuY2VvZiBNYXJrKVxuICAgICAgICAgICAgcmV0dXJuIFttYXJrc107XG4gICAgICAgIGxldCBjb3B5ID0gbWFya3Muc2xpY2UoKTtcbiAgICAgICAgY29weS5zb3J0KChhLCBiKSA9PiBhLnR5cGUucmFuayAtIGIudHlwZS5yYW5rKTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfVxufVxuLyoqXG5UaGUgZW1wdHkgc2V0IG9mIG1hcmtzLlxuKi9cbk1hcmsubm9uZSA9IFtdO1xuXG4vKipcbkVycm9yIHR5cGUgcmFpc2VkIGJ5IFtgTm9kZS5yZXBsYWNlYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGUucmVwbGFjZSkgd2hlblxuZ2l2ZW4gYW4gaW52YWxpZCByZXBsYWNlbWVudC5cbiovXG5jbGFzcyBSZXBsYWNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG59XG4vKlxuUmVwbGFjZUVycm9yID0gZnVuY3Rpb24odGhpczogYW55LCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgbGV0IGVyciA9IEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSlcbiAgOyhlcnIgYXMgYW55KS5fX3Byb3RvX18gPSBSZXBsYWNlRXJyb3IucHJvdG90eXBlXG4gIHJldHVybiBlcnJcbn0gYXMgYW55XG5cblJlcGxhY2VFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSlcblJlcGxhY2VFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZXBsYWNlRXJyb3JcblJlcGxhY2VFcnJvci5wcm90b3R5cGUubmFtZSA9IFwiUmVwbGFjZUVycm9yXCJcbiovXG4vKipcbkEgc2xpY2UgcmVwcmVzZW50cyBhIHBpZWNlIGN1dCBvdXQgb2YgYSBsYXJnZXIgZG9jdW1lbnQuIEl0XG5zdG9yZXMgbm90IG9ubHkgYSBmcmFnbWVudCwgYnV0IGFsc28gdGhlIGRlcHRoIHVwIHRvIHdoaWNoIG5vZGVzIG9uXG5ib3RoIHNpZGUgYXJlIOKAmG9wZW7igJkgKGN1dCB0aHJvdWdoKS5cbiovXG5jbGFzcyBTbGljZSB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgc2xpY2UuIFdoZW4gc3BlY2lmeWluZyBhIG5vbi16ZXJvIG9wZW4gZGVwdGgsIHlvdSBtdXN0XG4gICAgbWFrZSBzdXJlIHRoYXQgdGhlcmUgYXJlIG5vZGVzIG9mIGF0IGxlYXN0IHRoYXQgZGVwdGggYXQgdGhlXG4gICAgYXBwcm9wcmlhdGUgc2lkZSBvZiB0aGUgZnJhZ21lbnTigJRpLmUuIGlmIHRoZSBmcmFnbWVudCBpcyBhblxuICAgIGVtcHR5IHBhcmFncmFwaCBub2RlLCBgb3BlblN0YXJ0YCBhbmQgYG9wZW5FbmRgIGNhbid0IGJlIGdyZWF0ZXJcbiAgICB0aGFuIDEuXG4gICAgXG4gICAgSXQgaXMgbm90IG5lY2Vzc2FyeSBmb3IgdGhlIGNvbnRlbnQgb2Ygb3BlbiBub2RlcyB0byBjb25mb3JtIHRvXG4gICAgdGhlIHNjaGVtYSdzIGNvbnRlbnQgY29uc3RyYWludHMsIHRob3VnaCBpdCBzaG91bGQgYmUgYSB2YWxpZFxuICAgIHN0YXJ0L2VuZC9taWRkbGUgZm9yIHN1Y2ggYSBub2RlLCBkZXBlbmRpbmcgb24gd2hpY2ggc2lkZXMgYXJlXG4gICAgb3Blbi5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBzbGljZSdzIGNvbnRlbnQuXG4gICAgKi9cbiAgICBjb250ZW50LCBcbiAgICAvKipcbiAgICBUaGUgb3BlbiBkZXB0aCBhdCB0aGUgc3RhcnQgb2YgdGhlIGZyYWdtZW50LlxuICAgICovXG4gICAgb3BlblN0YXJ0LCBcbiAgICAvKipcbiAgICBUaGUgb3BlbiBkZXB0aCBhdCB0aGUgZW5kLlxuICAgICovXG4gICAgb3BlbkVuZCkge1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICB0aGlzLm9wZW5TdGFydCA9IG9wZW5TdGFydDtcbiAgICAgICAgdGhpcy5vcGVuRW5kID0gb3BlbkVuZDtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIHNpemUgdGhpcyBzbGljZSB3b3VsZCBhZGQgd2hlbiBpbnNlcnRlZCBpbnRvIGEgZG9jdW1lbnQuXG4gICAgKi9cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudC5zaXplIC0gdGhpcy5vcGVuU3RhcnQgLSB0aGlzLm9wZW5FbmQ7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgaW5zZXJ0QXQocG9zLCBmcmFnbWVudCkge1xuICAgICAgICBsZXQgY29udGVudCA9IGluc2VydEludG8odGhpcy5jb250ZW50LCBwb3MgKyB0aGlzLm9wZW5TdGFydCwgZnJhZ21lbnQpO1xuICAgICAgICByZXR1cm4gY29udGVudCAmJiBuZXcgU2xpY2UoY29udGVudCwgdGhpcy5vcGVuU3RhcnQsIHRoaXMub3BlbkVuZCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgcmVtb3ZlQmV0d2Vlbihmcm9tLCB0bykge1xuICAgICAgICByZXR1cm4gbmV3IFNsaWNlKHJlbW92ZVJhbmdlKHRoaXMuY29udGVudCwgZnJvbSArIHRoaXMub3BlblN0YXJ0LCB0byArIHRoaXMub3BlblN0YXJ0KSwgdGhpcy5vcGVuU3RhcnQsIHRoaXMub3BlbkVuZCk7XG4gICAgfVxuICAgIC8qKlxuICAgIFRlc3RzIHdoZXRoZXIgdGhpcyBzbGljZSBpcyBlcXVhbCB0byBhbm90aGVyIHNsaWNlLlxuICAgICovXG4gICAgZXEob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudC5lcShvdGhlci5jb250ZW50KSAmJiB0aGlzLm9wZW5TdGFydCA9PSBvdGhlci5vcGVuU3RhcnQgJiYgdGhpcy5vcGVuRW5kID09IG90aGVyLm9wZW5FbmQ7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQgKyBcIihcIiArIHRoaXMub3BlblN0YXJ0ICsgXCIsXCIgKyB0aGlzLm9wZW5FbmQgKyBcIilcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgQ29udmVydCBhIHNsaWNlIHRvIGEgSlNPTi1zZXJpYWxpemFibGUgcmVwcmVzZW50YXRpb24uXG4gICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZW50LnNpemUpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IGpzb24gPSB7IGNvbnRlbnQ6IHRoaXMuY29udGVudC50b0pTT04oKSB9O1xuICAgICAgICBpZiAodGhpcy5vcGVuU3RhcnQgPiAwKVxuICAgICAgICAgICAganNvbi5vcGVuU3RhcnQgPSB0aGlzLm9wZW5TdGFydDtcbiAgICAgICAgaWYgKHRoaXMub3BlbkVuZCA+IDApXG4gICAgICAgICAgICBqc29uLm9wZW5FbmQgPSB0aGlzLm9wZW5FbmQ7XG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIH1cbiAgICAvKipcbiAgICBEZXNlcmlhbGl6ZSBhIHNsaWNlIGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24uXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICghanNvbilcbiAgICAgICAgICAgIHJldHVybiBTbGljZS5lbXB0eTtcbiAgICAgICAgbGV0IG9wZW5TdGFydCA9IGpzb24ub3BlblN0YXJ0IHx8IDAsIG9wZW5FbmQgPSBqc29uLm9wZW5FbmQgfHwgMDtcbiAgICAgICAgaWYgKHR5cGVvZiBvcGVuU3RhcnQgIT0gXCJudW1iZXJcIiB8fCB0eXBlb2Ygb3BlbkVuZCAhPSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBTbGljZS5mcm9tSlNPTlwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTbGljZShGcmFnbWVudC5mcm9tSlNPTihzY2hlbWEsIGpzb24uY29udGVudCksIG9wZW5TdGFydCwgb3BlbkVuZCk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIHNsaWNlIGZyb20gYSBmcmFnbWVudCBieSB0YWtpbmcgdGhlIG1heGltdW0gcG9zc2libGVcbiAgICBvcGVuIHZhbHVlIG9uIGJvdGggc2lkZSBvZiB0aGUgZnJhZ21lbnQuXG4gICAgKi9cbiAgICBzdGF0aWMgbWF4T3BlbihmcmFnbWVudCwgb3Blbklzb2xhdGluZyA9IHRydWUpIHtcbiAgICAgICAgbGV0IG9wZW5TdGFydCA9IDAsIG9wZW5FbmQgPSAwO1xuICAgICAgICBmb3IgKGxldCBuID0gZnJhZ21lbnQuZmlyc3RDaGlsZDsgbiAmJiAhbi5pc0xlYWYgJiYgKG9wZW5Jc29sYXRpbmcgfHwgIW4udHlwZS5zcGVjLmlzb2xhdGluZyk7IG4gPSBuLmZpcnN0Q2hpbGQpXG4gICAgICAgICAgICBvcGVuU3RhcnQrKztcbiAgICAgICAgZm9yIChsZXQgbiA9IGZyYWdtZW50Lmxhc3RDaGlsZDsgbiAmJiAhbi5pc0xlYWYgJiYgKG9wZW5Jc29sYXRpbmcgfHwgIW4udHlwZS5zcGVjLmlzb2xhdGluZyk7IG4gPSBuLmxhc3RDaGlsZClcbiAgICAgICAgICAgIG9wZW5FbmQrKztcbiAgICAgICAgcmV0dXJuIG5ldyBTbGljZShmcmFnbWVudCwgb3BlblN0YXJ0LCBvcGVuRW5kKTtcbiAgICB9XG59XG4vKipcblRoZSBlbXB0eSBzbGljZS5cbiovXG5TbGljZS5lbXB0eSA9IG5ldyBTbGljZShGcmFnbWVudC5lbXB0eSwgMCwgMCk7XG5mdW5jdGlvbiByZW1vdmVSYW5nZShjb250ZW50LCBmcm9tLCB0bykge1xuICAgIGxldCB7IGluZGV4LCBvZmZzZXQgfSA9IGNvbnRlbnQuZmluZEluZGV4KGZyb20pLCBjaGlsZCA9IGNvbnRlbnQubWF5YmVDaGlsZChpbmRleCk7XG4gICAgbGV0IHsgaW5kZXg6IGluZGV4VG8sIG9mZnNldDogb2Zmc2V0VG8gfSA9IGNvbnRlbnQuZmluZEluZGV4KHRvKTtcbiAgICBpZiAob2Zmc2V0ID09IGZyb20gfHwgY2hpbGQuaXNUZXh0KSB7XG4gICAgICAgIGlmIChvZmZzZXRUbyAhPSB0byAmJiAhY29udGVudC5jaGlsZChpbmRleFRvKS5pc1RleHQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlJlbW92aW5nIG5vbi1mbGF0IHJhbmdlXCIpO1xuICAgICAgICByZXR1cm4gY29udGVudC5jdXQoMCwgZnJvbSkuYXBwZW5kKGNvbnRlbnQuY3V0KHRvKSk7XG4gICAgfVxuICAgIGlmIChpbmRleCAhPSBpbmRleFRvKVxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlJlbW92aW5nIG5vbi1mbGF0IHJhbmdlXCIpO1xuICAgIHJldHVybiBjb250ZW50LnJlcGxhY2VDaGlsZChpbmRleCwgY2hpbGQuY29weShyZW1vdmVSYW5nZShjaGlsZC5jb250ZW50LCBmcm9tIC0gb2Zmc2V0IC0gMSwgdG8gLSBvZmZzZXQgLSAxKSkpO1xufVxuZnVuY3Rpb24gaW5zZXJ0SW50byhjb250ZW50LCBkaXN0LCBpbnNlcnQsIHBhcmVudCkge1xuICAgIGxldCB7IGluZGV4LCBvZmZzZXQgfSA9IGNvbnRlbnQuZmluZEluZGV4KGRpc3QpLCBjaGlsZCA9IGNvbnRlbnQubWF5YmVDaGlsZChpbmRleCk7XG4gICAgaWYgKG9mZnNldCA9PSBkaXN0IHx8IGNoaWxkLmlzVGV4dCkge1xuICAgICAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuY2FuUmVwbGFjZShpbmRleCwgaW5kZXgsIGluc2VydCkpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQuY3V0KDAsIGRpc3QpLmFwcGVuZChpbnNlcnQpLmFwcGVuZChjb250ZW50LmN1dChkaXN0KSk7XG4gICAgfVxuICAgIGxldCBpbm5lciA9IGluc2VydEludG8oY2hpbGQuY29udGVudCwgZGlzdCAtIG9mZnNldCAtIDEsIGluc2VydCk7XG4gICAgcmV0dXJuIGlubmVyICYmIGNvbnRlbnQucmVwbGFjZUNoaWxkKGluZGV4LCBjaGlsZC5jb3B5KGlubmVyKSk7XG59XG5mdW5jdGlvbiByZXBsYWNlKCRmcm9tLCAkdG8sIHNsaWNlKSB7XG4gICAgaWYgKHNsaWNlLm9wZW5TdGFydCA+ICRmcm9tLmRlcHRoKVxuICAgICAgICB0aHJvdyBuZXcgUmVwbGFjZUVycm9yKFwiSW5zZXJ0ZWQgY29udGVudCBkZWVwZXIgdGhhbiBpbnNlcnRpb24gcG9zaXRpb25cIik7XG4gICAgaWYgKCRmcm9tLmRlcHRoIC0gc2xpY2Uub3BlblN0YXJ0ICE9ICR0by5kZXB0aCAtIHNsaWNlLm9wZW5FbmQpXG4gICAgICAgIHRocm93IG5ldyBSZXBsYWNlRXJyb3IoXCJJbmNvbnNpc3RlbnQgb3BlbiBkZXB0aHNcIik7XG4gICAgcmV0dXJuIHJlcGxhY2VPdXRlcigkZnJvbSwgJHRvLCBzbGljZSwgMCk7XG59XG5mdW5jdGlvbiByZXBsYWNlT3V0ZXIoJGZyb20sICR0bywgc2xpY2UsIGRlcHRoKSB7XG4gICAgbGV0IGluZGV4ID0gJGZyb20uaW5kZXgoZGVwdGgpLCBub2RlID0gJGZyb20ubm9kZShkZXB0aCk7XG4gICAgaWYgKGluZGV4ID09ICR0by5pbmRleChkZXB0aCkgJiYgZGVwdGggPCAkZnJvbS5kZXB0aCAtIHNsaWNlLm9wZW5TdGFydCkge1xuICAgICAgICBsZXQgaW5uZXIgPSByZXBsYWNlT3V0ZXIoJGZyb20sICR0bywgc2xpY2UsIGRlcHRoICsgMSk7XG4gICAgICAgIHJldHVybiBub2RlLmNvcHkobm9kZS5jb250ZW50LnJlcGxhY2VDaGlsZChpbmRleCwgaW5uZXIpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIXNsaWNlLmNvbnRlbnQuc2l6ZSkge1xuICAgICAgICByZXR1cm4gY2xvc2Uobm9kZSwgcmVwbGFjZVR3b1dheSgkZnJvbSwgJHRvLCBkZXB0aCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICghc2xpY2Uub3BlblN0YXJ0ICYmICFzbGljZS5vcGVuRW5kICYmICRmcm9tLmRlcHRoID09IGRlcHRoICYmICR0by5kZXB0aCA9PSBkZXB0aCkgeyAvLyBTaW1wbGUsIGZsYXQgY2FzZVxuICAgICAgICBsZXQgcGFyZW50ID0gJGZyb20ucGFyZW50LCBjb250ZW50ID0gcGFyZW50LmNvbnRlbnQ7XG4gICAgICAgIHJldHVybiBjbG9zZShwYXJlbnQsIGNvbnRlbnQuY3V0KDAsICRmcm9tLnBhcmVudE9mZnNldCkuYXBwZW5kKHNsaWNlLmNvbnRlbnQpLmFwcGVuZChjb250ZW50LmN1dCgkdG8ucGFyZW50T2Zmc2V0KSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IHsgc3RhcnQsIGVuZCB9ID0gcHJlcGFyZVNsaWNlRm9yUmVwbGFjZShzbGljZSwgJGZyb20pO1xuICAgICAgICByZXR1cm4gY2xvc2Uobm9kZSwgcmVwbGFjZVRocmVlV2F5KCRmcm9tLCBzdGFydCwgZW5kLCAkdG8sIGRlcHRoKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tKb2luKG1haW4sIHN1Yikge1xuICAgIGlmICghc3ViLnR5cGUuY29tcGF0aWJsZUNvbnRlbnQobWFpbi50eXBlKSlcbiAgICAgICAgdGhyb3cgbmV3IFJlcGxhY2VFcnJvcihcIkNhbm5vdCBqb2luIFwiICsgc3ViLnR5cGUubmFtZSArIFwiIG9udG8gXCIgKyBtYWluLnR5cGUubmFtZSk7XG59XG5mdW5jdGlvbiBqb2luYWJsZSgkYmVmb3JlLCAkYWZ0ZXIsIGRlcHRoKSB7XG4gICAgbGV0IG5vZGUgPSAkYmVmb3JlLm5vZGUoZGVwdGgpO1xuICAgIGNoZWNrSm9pbihub2RlLCAkYWZ0ZXIubm9kZShkZXB0aCkpO1xuICAgIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gYWRkTm9kZShjaGlsZCwgdGFyZ2V0KSB7XG4gICAgbGV0IGxhc3QgPSB0YXJnZXQubGVuZ3RoIC0gMTtcbiAgICBpZiAobGFzdCA+PSAwICYmIGNoaWxkLmlzVGV4dCAmJiBjaGlsZC5zYW1lTWFya3VwKHRhcmdldFtsYXN0XSkpXG4gICAgICAgIHRhcmdldFtsYXN0XSA9IGNoaWxkLndpdGhUZXh0KHRhcmdldFtsYXN0XS50ZXh0ICsgY2hpbGQudGV4dCk7XG4gICAgZWxzZVxuICAgICAgICB0YXJnZXQucHVzaChjaGlsZCk7XG59XG5mdW5jdGlvbiBhZGRSYW5nZSgkc3RhcnQsICRlbmQsIGRlcHRoLCB0YXJnZXQpIHtcbiAgICBsZXQgbm9kZSA9ICgkZW5kIHx8ICRzdGFydCkubm9kZShkZXB0aCk7XG4gICAgbGV0IHN0YXJ0SW5kZXggPSAwLCBlbmRJbmRleCA9ICRlbmQgPyAkZW5kLmluZGV4KGRlcHRoKSA6IG5vZGUuY2hpbGRDb3VudDtcbiAgICBpZiAoJHN0YXJ0KSB7XG4gICAgICAgIHN0YXJ0SW5kZXggPSAkc3RhcnQuaW5kZXgoZGVwdGgpO1xuICAgICAgICBpZiAoJHN0YXJ0LmRlcHRoID4gZGVwdGgpIHtcbiAgICAgICAgICAgIHN0YXJ0SW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgkc3RhcnQudGV4dE9mZnNldCkge1xuICAgICAgICAgICAgYWRkTm9kZSgkc3RhcnQubm9kZUFmdGVyLCB0YXJnZXQpO1xuICAgICAgICAgICAgc3RhcnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKylcbiAgICAgICAgYWRkTm9kZShub2RlLmNoaWxkKGkpLCB0YXJnZXQpO1xuICAgIGlmICgkZW5kICYmICRlbmQuZGVwdGggPT0gZGVwdGggJiYgJGVuZC50ZXh0T2Zmc2V0KVxuICAgICAgICBhZGROb2RlKCRlbmQubm9kZUJlZm9yZSwgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIGNsb3NlKG5vZGUsIGNvbnRlbnQpIHtcbiAgICBub2RlLnR5cGUuY2hlY2tDb250ZW50KGNvbnRlbnQpO1xuICAgIHJldHVybiBub2RlLmNvcHkoY29udGVudCk7XG59XG5mdW5jdGlvbiByZXBsYWNlVGhyZWVXYXkoJGZyb20sICRzdGFydCwgJGVuZCwgJHRvLCBkZXB0aCkge1xuICAgIGxldCBvcGVuU3RhcnQgPSAkZnJvbS5kZXB0aCA+IGRlcHRoICYmIGpvaW5hYmxlKCRmcm9tLCAkc3RhcnQsIGRlcHRoICsgMSk7XG4gICAgbGV0IG9wZW5FbmQgPSAkdG8uZGVwdGggPiBkZXB0aCAmJiBqb2luYWJsZSgkZW5kLCAkdG8sIGRlcHRoICsgMSk7XG4gICAgbGV0IGNvbnRlbnQgPSBbXTtcbiAgICBhZGRSYW5nZShudWxsLCAkZnJvbSwgZGVwdGgsIGNvbnRlbnQpO1xuICAgIGlmIChvcGVuU3RhcnQgJiYgb3BlbkVuZCAmJiAkc3RhcnQuaW5kZXgoZGVwdGgpID09ICRlbmQuaW5kZXgoZGVwdGgpKSB7XG4gICAgICAgIGNoZWNrSm9pbihvcGVuU3RhcnQsIG9wZW5FbmQpO1xuICAgICAgICBhZGROb2RlKGNsb3NlKG9wZW5TdGFydCwgcmVwbGFjZVRocmVlV2F5KCRmcm9tLCAkc3RhcnQsICRlbmQsICR0bywgZGVwdGggKyAxKSksIGNvbnRlbnQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKG9wZW5TdGFydClcbiAgICAgICAgICAgIGFkZE5vZGUoY2xvc2Uob3BlblN0YXJ0LCByZXBsYWNlVHdvV2F5KCRmcm9tLCAkc3RhcnQsIGRlcHRoICsgMSkpLCBjb250ZW50KTtcbiAgICAgICAgYWRkUmFuZ2UoJHN0YXJ0LCAkZW5kLCBkZXB0aCwgY29udGVudCk7XG4gICAgICAgIGlmIChvcGVuRW5kKVxuICAgICAgICAgICAgYWRkTm9kZShjbG9zZShvcGVuRW5kLCByZXBsYWNlVHdvV2F5KCRlbmQsICR0bywgZGVwdGggKyAxKSksIGNvbnRlbnQpO1xuICAgIH1cbiAgICBhZGRSYW5nZSgkdG8sIG51bGwsIGRlcHRoLCBjb250ZW50KTtcbiAgICByZXR1cm4gbmV3IEZyYWdtZW50KGNvbnRlbnQpO1xufVxuZnVuY3Rpb24gcmVwbGFjZVR3b1dheSgkZnJvbSwgJHRvLCBkZXB0aCkge1xuICAgIGxldCBjb250ZW50ID0gW107XG4gICAgYWRkUmFuZ2UobnVsbCwgJGZyb20sIGRlcHRoLCBjb250ZW50KTtcbiAgICBpZiAoJGZyb20uZGVwdGggPiBkZXB0aCkge1xuICAgICAgICBsZXQgdHlwZSA9IGpvaW5hYmxlKCRmcm9tLCAkdG8sIGRlcHRoICsgMSk7XG4gICAgICAgIGFkZE5vZGUoY2xvc2UodHlwZSwgcmVwbGFjZVR3b1dheSgkZnJvbSwgJHRvLCBkZXB0aCArIDEpKSwgY29udGVudCk7XG4gICAgfVxuICAgIGFkZFJhbmdlKCR0bywgbnVsbCwgZGVwdGgsIGNvbnRlbnQpO1xuICAgIHJldHVybiBuZXcgRnJhZ21lbnQoY29udGVudCk7XG59XG5mdW5jdGlvbiBwcmVwYXJlU2xpY2VGb3JSZXBsYWNlKHNsaWNlLCAkYWxvbmcpIHtcbiAgICBsZXQgZXh0cmEgPSAkYWxvbmcuZGVwdGggLSBzbGljZS5vcGVuU3RhcnQsIHBhcmVudCA9ICRhbG9uZy5ub2RlKGV4dHJhKTtcbiAgICBsZXQgbm9kZSA9IHBhcmVudC5jb3B5KHNsaWNlLmNvbnRlbnQpO1xuICAgIGZvciAobGV0IGkgPSBleHRyYSAtIDE7IGkgPj0gMDsgaS0tKVxuICAgICAgICBub2RlID0gJGFsb25nLm5vZGUoaSkuY29weShGcmFnbWVudC5mcm9tKG5vZGUpKTtcbiAgICByZXR1cm4geyBzdGFydDogbm9kZS5yZXNvbHZlTm9DYWNoZShzbGljZS5vcGVuU3RhcnQgKyBleHRyYSksXG4gICAgICAgIGVuZDogbm9kZS5yZXNvbHZlTm9DYWNoZShub2RlLmNvbnRlbnQuc2l6ZSAtIHNsaWNlLm9wZW5FbmQgLSBleHRyYSkgfTtcbn1cblxuLyoqXG5Zb3UgY2FuIFtfcmVzb2x2ZV9dKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlLnJlc29sdmUpIGEgcG9zaXRpb24gdG8gZ2V0IG1vcmVcbmluZm9ybWF0aW9uIGFib3V0IGl0LiBPYmplY3RzIG9mIHRoaXMgY2xhc3MgcmVwcmVzZW50IHN1Y2ggYVxucmVzb2x2ZWQgcG9zaXRpb24sIHByb3ZpZGluZyB2YXJpb3VzIHBpZWNlcyBvZiBjb250ZXh0XG5pbmZvcm1hdGlvbiwgYW5kIHNvbWUgaGVscGVyIG1ldGhvZHMuXG5cblRocm91Z2hvdXQgdGhpcyBpbnRlcmZhY2UsIG1ldGhvZHMgdGhhdCB0YWtlIGFuIG9wdGlvbmFsIGBkZXB0aGBcbnBhcmFtZXRlciB3aWxsIGludGVycHJldCB1bmRlZmluZWQgYXMgYHRoaXMuZGVwdGhgIGFuZCBuZWdhdGl2ZVxubnVtYmVycyBhcyBgdGhpcy5kZXB0aCArIHZhbHVlYC5cbiovXG5jbGFzcyBSZXNvbHZlZFBvcyB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgcG9zaXRpb24gdGhhdCB3YXMgcmVzb2x2ZWQuXG4gICAgKi9cbiAgICBwb3MsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgcGF0aCwgXG4gICAgLyoqXG4gICAgVGhlIG9mZnNldCB0aGlzIHBvc2l0aW9uIGhhcyBpbnRvIGl0cyBwYXJlbnQgbm9kZS5cbiAgICAqL1xuICAgIHBhcmVudE9mZnNldCkge1xuICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDtcbiAgICAgICAgdGhpcy5wYXJlbnRPZmZzZXQgPSBwYXJlbnRPZmZzZXQ7XG4gICAgICAgIHRoaXMuZGVwdGggPSBwYXRoLmxlbmd0aCAvIDMgLSAxO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHJlc29sdmVEZXB0aCh2YWwpIHtcbiAgICAgICAgaWYgKHZhbCA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVwdGg7XG4gICAgICAgIGlmICh2YWwgPCAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVwdGggKyB2YWw7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBwYXJlbnQgbm9kZSB0aGF0IHRoZSBwb3NpdGlvbiBwb2ludHMgaW50by4gTm90ZSB0aGF0IGV2ZW4gaWZcbiAgICBhIHBvc2l0aW9uIHBvaW50cyBpbnRvIGEgdGV4dCBub2RlLCB0aGF0IG5vZGUgaXMgbm90IGNvbnNpZGVyZWRcbiAgICB0aGUgcGFyZW504oCUdGV4dCBub2RlcyBhcmUg4oCYZmxhdOKAmSBpbiB0aGlzIG1vZGVsLCBhbmQgaGF2ZSBubyBjb250ZW50LlxuICAgICovXG4gICAgZ2V0IHBhcmVudCgpIHsgcmV0dXJuIHRoaXMubm9kZSh0aGlzLmRlcHRoKTsgfVxuICAgIC8qKlxuICAgIFRoZSByb290IG5vZGUgaW4gd2hpY2ggdGhlIHBvc2l0aW9uIHdhcyByZXNvbHZlZC5cbiAgICAqL1xuICAgIGdldCBkb2MoKSB7IHJldHVybiB0aGlzLm5vZGUoMCk7IH1cbiAgICAvKipcbiAgICBUaGUgYW5jZXN0b3Igbm9kZSBhdCB0aGUgZ2l2ZW4gbGV2ZWwuIGBwLm5vZGUocC5kZXB0aClgIGlzIHRoZVxuICAgIHNhbWUgYXMgYHAucGFyZW50YC5cbiAgICAqL1xuICAgIG5vZGUoZGVwdGgpIHsgcmV0dXJuIHRoaXMucGF0aFt0aGlzLnJlc29sdmVEZXB0aChkZXB0aCkgKiAzXTsgfVxuICAgIC8qKlxuICAgIFRoZSBpbmRleCBpbnRvIHRoZSBhbmNlc3RvciBhdCB0aGUgZ2l2ZW4gbGV2ZWwuIElmIHRoaXMgcG9pbnRzXG4gICAgYXQgdGhlIDNyZCBub2RlIGluIHRoZSAybmQgcGFyYWdyYXBoIG9uIHRoZSB0b3AgbGV2ZWwsIGZvclxuICAgIGV4YW1wbGUsIGBwLmluZGV4KDApYCBpcyAxIGFuZCBgcC5pbmRleCgxKWAgaXMgMi5cbiAgICAqL1xuICAgIGluZGV4KGRlcHRoKSB7IHJldHVybiB0aGlzLnBhdGhbdGhpcy5yZXNvbHZlRGVwdGgoZGVwdGgpICogMyArIDFdOyB9XG4gICAgLyoqXG4gICAgVGhlIGluZGV4IHBvaW50aW5nIGFmdGVyIHRoaXMgcG9zaXRpb24gaW50byB0aGUgYW5jZXN0b3IgYXQgdGhlXG4gICAgZ2l2ZW4gbGV2ZWwuXG4gICAgKi9cbiAgICBpbmRleEFmdGVyKGRlcHRoKSB7XG4gICAgICAgIGRlcHRoID0gdGhpcy5yZXNvbHZlRGVwdGgoZGVwdGgpO1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRleChkZXB0aCkgKyAoZGVwdGggPT0gdGhpcy5kZXB0aCAmJiAhdGhpcy50ZXh0T2Zmc2V0ID8gMCA6IDEpO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgKGFic29sdXRlKSBwb3NpdGlvbiBhdCB0aGUgc3RhcnQgb2YgdGhlIG5vZGUgYXQgdGhlIGdpdmVuXG4gICAgbGV2ZWwuXG4gICAgKi9cbiAgICBzdGFydChkZXB0aCkge1xuICAgICAgICBkZXB0aCA9IHRoaXMucmVzb2x2ZURlcHRoKGRlcHRoKTtcbiAgICAgICAgcmV0dXJuIGRlcHRoID09IDAgPyAwIDogdGhpcy5wYXRoW2RlcHRoICogMyAtIDFdICsgMTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIChhYnNvbHV0ZSkgcG9zaXRpb24gYXQgdGhlIGVuZCBvZiB0aGUgbm9kZSBhdCB0aGUgZ2l2ZW5cbiAgICBsZXZlbC5cbiAgICAqL1xuICAgIGVuZChkZXB0aCkge1xuICAgICAgICBkZXB0aCA9IHRoaXMucmVzb2x2ZURlcHRoKGRlcHRoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnQoZGVwdGgpICsgdGhpcy5ub2RlKGRlcHRoKS5jb250ZW50LnNpemU7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSAoYWJzb2x1dGUpIHBvc2l0aW9uIGRpcmVjdGx5IGJlZm9yZSB0aGUgd3JhcHBpbmcgbm9kZSBhdCB0aGVcbiAgICBnaXZlbiBsZXZlbCwgb3IsIHdoZW4gYGRlcHRoYCBpcyBgdGhpcy5kZXB0aCArIDFgLCB0aGUgb3JpZ2luYWxcbiAgICBwb3NpdGlvbi5cbiAgICAqL1xuICAgIGJlZm9yZShkZXB0aCkge1xuICAgICAgICBkZXB0aCA9IHRoaXMucmVzb2x2ZURlcHRoKGRlcHRoKTtcbiAgICAgICAgaWYgKCFkZXB0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlcmUgaXMgbm8gcG9zaXRpb24gYmVmb3JlIHRoZSB0b3AtbGV2ZWwgbm9kZVwiKTtcbiAgICAgICAgcmV0dXJuIGRlcHRoID09IHRoaXMuZGVwdGggKyAxID8gdGhpcy5wb3MgOiB0aGlzLnBhdGhbZGVwdGggKiAzIC0gMV07XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSAoYWJzb2x1dGUpIHBvc2l0aW9uIGRpcmVjdGx5IGFmdGVyIHRoZSB3cmFwcGluZyBub2RlIGF0IHRoZVxuICAgIGdpdmVuIGxldmVsLCBvciB0aGUgb3JpZ2luYWwgcG9zaXRpb24gd2hlbiBgZGVwdGhgIGlzIGB0aGlzLmRlcHRoICsgMWAuXG4gICAgKi9cbiAgICBhZnRlcihkZXB0aCkge1xuICAgICAgICBkZXB0aCA9IHRoaXMucmVzb2x2ZURlcHRoKGRlcHRoKTtcbiAgICAgICAgaWYgKCFkZXB0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlcmUgaXMgbm8gcG9zaXRpb24gYWZ0ZXIgdGhlIHRvcC1sZXZlbCBub2RlXCIpO1xuICAgICAgICByZXR1cm4gZGVwdGggPT0gdGhpcy5kZXB0aCArIDEgPyB0aGlzLnBvcyA6IHRoaXMucGF0aFtkZXB0aCAqIDMgLSAxXSArIHRoaXMucGF0aFtkZXB0aCAqIDNdLm5vZGVTaXplO1xuICAgIH1cbiAgICAvKipcbiAgICBXaGVuIHRoaXMgcG9zaXRpb24gcG9pbnRzIGludG8gYSB0ZXh0IG5vZGUsIHRoaXMgcmV0dXJucyB0aGVcbiAgICBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBwb3NpdGlvbiBhbmQgdGhlIHN0YXJ0IG9mIHRoZSB0ZXh0IG5vZGUuXG4gICAgV2lsbCBiZSB6ZXJvIGZvciBwb3NpdGlvbnMgdGhhdCBwb2ludCBiZXR3ZWVuIG5vZGVzLlxuICAgICovXG4gICAgZ2V0IHRleHRPZmZzZXQoKSB7IHJldHVybiB0aGlzLnBvcyAtIHRoaXMucGF0aFt0aGlzLnBhdGgubGVuZ3RoIC0gMV07IH1cbiAgICAvKipcbiAgICBHZXQgdGhlIG5vZGUgZGlyZWN0bHkgYWZ0ZXIgdGhlIHBvc2l0aW9uLCBpZiBhbnkuIElmIHRoZSBwb3NpdGlvblxuICAgIHBvaW50cyBpbnRvIGEgdGV4dCBub2RlLCBvbmx5IHRoZSBwYXJ0IG9mIHRoYXQgbm9kZSBhZnRlciB0aGVcbiAgICBwb3NpdGlvbiBpcyByZXR1cm5lZC5cbiAgICAqL1xuICAgIGdldCBub2RlQWZ0ZXIoKSB7XG4gICAgICAgIGxldCBwYXJlbnQgPSB0aGlzLnBhcmVudCwgaW5kZXggPSB0aGlzLmluZGV4KHRoaXMuZGVwdGgpO1xuICAgICAgICBpZiAoaW5kZXggPT0gcGFyZW50LmNoaWxkQ291bnQpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IGRPZmYgPSB0aGlzLnBvcyAtIHRoaXMucGF0aFt0aGlzLnBhdGgubGVuZ3RoIC0gMV0sIGNoaWxkID0gcGFyZW50LmNoaWxkKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGRPZmYgPyBwYXJlbnQuY2hpbGQoaW5kZXgpLmN1dChkT2ZmKSA6IGNoaWxkO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIG5vZGUgZGlyZWN0bHkgYmVmb3JlIHRoZSBwb3NpdGlvbiwgaWYgYW55LiBJZiB0aGVcbiAgICBwb3NpdGlvbiBwb2ludHMgaW50byBhIHRleHQgbm9kZSwgb25seSB0aGUgcGFydCBvZiB0aGF0IG5vZGVcbiAgICBiZWZvcmUgdGhlIHBvc2l0aW9uIGlzIHJldHVybmVkLlxuICAgICovXG4gICAgZ2V0IG5vZGVCZWZvcmUoKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuaW5kZXgodGhpcy5kZXB0aCk7XG4gICAgICAgIGxldCBkT2ZmID0gdGhpcy5wb3MgLSB0aGlzLnBhdGhbdGhpcy5wYXRoLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoZE9mZilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZChpbmRleCkuY3V0KDAsIGRPZmYpO1xuICAgICAgICByZXR1cm4gaW5kZXggPT0gMCA/IG51bGwgOiB0aGlzLnBhcmVudC5jaGlsZChpbmRleCAtIDEpO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIHBvc2l0aW9uIGF0IHRoZSBnaXZlbiBpbmRleCBpbiB0aGUgcGFyZW50IG5vZGUgYXQgdGhlXG4gICAgZ2l2ZW4gZGVwdGggKHdoaWNoIGRlZmF1bHRzIHRvIGB0aGlzLmRlcHRoYCkuXG4gICAgKi9cbiAgICBwb3NBdEluZGV4KGluZGV4LCBkZXB0aCkge1xuICAgICAgICBkZXB0aCA9IHRoaXMucmVzb2x2ZURlcHRoKGRlcHRoKTtcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLnBhdGhbZGVwdGggKiAzXSwgcG9zID0gZGVwdGggPT0gMCA/IDAgOiB0aGlzLnBhdGhbZGVwdGggKiAzIC0gMV0gKyAxO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4OyBpKyspXG4gICAgICAgICAgICBwb3MgKz0gbm9kZS5jaGlsZChpKS5ub2RlU2l6ZTtcbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBtYXJrcyBhdCB0aGlzIHBvc2l0aW9uLCBmYWN0b3JpbmcgaW4gdGhlIHN1cnJvdW5kaW5nXG4gICAgbWFya3MnIFtgaW5jbHVzaXZlYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk1hcmtTcGVjLmluY2x1c2l2ZSkgcHJvcGVydHkuIElmIHRoZVxuICAgIHBvc2l0aW9uIGlzIGF0IHRoZSBzdGFydCBvZiBhIG5vbi1lbXB0eSBub2RlLCB0aGUgbWFya3Mgb2YgdGhlXG4gICAgbm9kZSBhZnRlciBpdCAoaWYgYW55KSBhcmUgcmV0dXJuZWQuXG4gICAgKi9cbiAgICBtYXJrcygpIHtcbiAgICAgICAgbGV0IHBhcmVudCA9IHRoaXMucGFyZW50LCBpbmRleCA9IHRoaXMuaW5kZXgoKTtcbiAgICAgICAgLy8gSW4gYW4gZW1wdHkgcGFyZW50LCByZXR1cm4gdGhlIGVtcHR5IGFycmF5XG4gICAgICAgIGlmIChwYXJlbnQuY29udGVudC5zaXplID09IDApXG4gICAgICAgICAgICByZXR1cm4gTWFyay5ub25lO1xuICAgICAgICAvLyBXaGVuIGluc2lkZSBhIHRleHQgbm9kZSwganVzdCByZXR1cm4gdGhlIHRleHQgbm9kZSdzIG1hcmtzXG4gICAgICAgIGlmICh0aGlzLnRleHRPZmZzZXQpXG4gICAgICAgICAgICByZXR1cm4gcGFyZW50LmNoaWxkKGluZGV4KS5tYXJrcztcbiAgICAgICAgbGV0IG1haW4gPSBwYXJlbnQubWF5YmVDaGlsZChpbmRleCAtIDEpLCBvdGhlciA9IHBhcmVudC5tYXliZUNoaWxkKGluZGV4KTtcbiAgICAgICAgLy8gSWYgdGhlIGBhZnRlcmAgZmxhZyBpcyB0cnVlIG9mIHRoZXJlIGlzIG5vIG5vZGUgYmVmb3JlLCBtYWtlXG4gICAgICAgIC8vIHRoZSBub2RlIGFmdGVyIHRoaXMgcG9zaXRpb24gdGhlIG1haW4gcmVmZXJlbmNlLlxuICAgICAgICBpZiAoIW1haW4pIHtcbiAgICAgICAgICAgIGxldCB0bXAgPSBtYWluO1xuICAgICAgICAgICAgbWFpbiA9IG90aGVyO1xuICAgICAgICAgICAgb3RoZXIgPSB0bXA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXNlIGFsbCBtYXJrcyBpbiB0aGUgbWFpbiBub2RlLCBleGNlcHQgdGhvc2UgdGhhdCBoYXZlXG4gICAgICAgIC8vIGBpbmNsdXNpdmVgIHNldCB0byBmYWxzZSBhbmQgYXJlIG5vdCBwcmVzZW50IGluIHRoZSBvdGhlciBub2RlLlxuICAgICAgICBsZXQgbWFya3MgPSBtYWluLm1hcmtzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcmtzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKG1hcmtzW2ldLnR5cGUuc3BlYy5pbmNsdXNpdmUgPT09IGZhbHNlICYmICghb3RoZXIgfHwgIW1hcmtzW2ldLmlzSW5TZXQob3RoZXIubWFya3MpKSlcbiAgICAgICAgICAgICAgICBtYXJrcyA9IG1hcmtzW2ktLV0ucmVtb3ZlRnJvbVNldChtYXJrcyk7XG4gICAgICAgIHJldHVybiBtYXJrcztcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBtYXJrcyBhZnRlciB0aGUgY3VycmVudCBwb3NpdGlvbiwgaWYgYW55LCBleGNlcHQgdGhvc2VcbiAgICB0aGF0IGFyZSBub24taW5jbHVzaXZlIGFuZCBub3QgcHJlc2VudCBhdCBwb3NpdGlvbiBgJGVuZGAuIFRoaXNcbiAgICBpcyBtb3N0bHkgdXNlZnVsIGZvciBnZXR0aW5nIHRoZSBzZXQgb2YgbWFya3MgdG8gcHJlc2VydmUgYWZ0ZXIgYVxuICAgIGRlbGV0aW9uLiBXaWxsIHJldHVybiBgbnVsbGAgaWYgdGhpcyBwb3NpdGlvbiBpcyBhdCB0aGUgZW5kIG9mXG4gICAgaXRzIHBhcmVudCBub2RlIG9yIGl0cyBwYXJlbnQgbm9kZSBpc24ndCBhIHRleHRibG9jayAoaW4gd2hpY2hcbiAgICBjYXNlIG5vIG1hcmtzIHNob3VsZCBiZSBwcmVzZXJ2ZWQpLlxuICAgICovXG4gICAgbWFya3NBY3Jvc3MoJGVuZCkge1xuICAgICAgICBsZXQgYWZ0ZXIgPSB0aGlzLnBhcmVudC5tYXliZUNoaWxkKHRoaXMuaW5kZXgoKSk7XG4gICAgICAgIGlmICghYWZ0ZXIgfHwgIWFmdGVyLmlzSW5saW5lKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGxldCBtYXJrcyA9IGFmdGVyLm1hcmtzLCBuZXh0ID0gJGVuZC5wYXJlbnQubWF5YmVDaGlsZCgkZW5kLmluZGV4KCkpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcmtzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKG1hcmtzW2ldLnR5cGUuc3BlYy5pbmNsdXNpdmUgPT09IGZhbHNlICYmICghbmV4dCB8fCAhbWFya3NbaV0uaXNJblNldChuZXh0Lm1hcmtzKSkpXG4gICAgICAgICAgICAgICAgbWFya3MgPSBtYXJrc1tpLS1dLnJlbW92ZUZyb21TZXQobWFya3MpO1xuICAgICAgICByZXR1cm4gbWFya3M7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBkZXB0aCB1cCB0byB3aGljaCB0aGlzIHBvc2l0aW9uIGFuZCB0aGUgZ2l2ZW4gKG5vbi1yZXNvbHZlZClcbiAgICBwb3NpdGlvbiBzaGFyZSB0aGUgc2FtZSBwYXJlbnQgbm9kZXMuXG4gICAgKi9cbiAgICBzaGFyZWREZXB0aChwb3MpIHtcbiAgICAgICAgZm9yIChsZXQgZGVwdGggPSB0aGlzLmRlcHRoOyBkZXB0aCA+IDA7IGRlcHRoLS0pXG4gICAgICAgICAgICBpZiAodGhpcy5zdGFydChkZXB0aCkgPD0gcG9zICYmIHRoaXMuZW5kKGRlcHRoKSA+PSBwb3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlcHRoO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJucyBhIHJhbmdlIGJhc2VkIG9uIHRoZSBwbGFjZSB3aGVyZSB0aGlzIHBvc2l0aW9uIGFuZCB0aGVcbiAgICBnaXZlbiBwb3NpdGlvbiBkaXZlcmdlIGFyb3VuZCBibG9jayBjb250ZW50LiBJZiBib3RoIHBvaW50IGludG9cbiAgICB0aGUgc2FtZSB0ZXh0YmxvY2ssIGZvciBleGFtcGxlLCBhIHJhbmdlIGFyb3VuZCB0aGF0IHRleHRibG9ja1xuICAgIHdpbGwgYmUgcmV0dXJuZWQuIElmIHRoZXkgcG9pbnQgaW50byBkaWZmZXJlbnQgYmxvY2tzLCB0aGUgcmFuZ2VcbiAgICBhcm91bmQgdGhvc2UgYmxvY2tzIGluIHRoZWlyIHNoYXJlZCBhbmNlc3RvciBpcyByZXR1cm5lZC4gWW91IGNhblxuICAgIHBhc3MgaW4gYW4gb3B0aW9uYWwgcHJlZGljYXRlIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBhIHBhcmVudFxuICAgIG5vZGUgdG8gc2VlIGlmIGEgcmFuZ2UgaW50byB0aGF0IHBhcmVudCBpcyBhY2NlcHRhYmxlLlxuICAgICovXG4gICAgYmxvY2tSYW5nZShvdGhlciA9IHRoaXMsIHByZWQpIHtcbiAgICAgICAgaWYgKG90aGVyLnBvcyA8IHRoaXMucG9zKVxuICAgICAgICAgICAgcmV0dXJuIG90aGVyLmJsb2NrUmFuZ2UodGhpcyk7XG4gICAgICAgIGZvciAobGV0IGQgPSB0aGlzLmRlcHRoIC0gKHRoaXMucGFyZW50LmlubGluZUNvbnRlbnQgfHwgdGhpcy5wb3MgPT0gb3RoZXIucG9zID8gMSA6IDApOyBkID49IDA7IGQtLSlcbiAgICAgICAgICAgIGlmIChvdGhlci5wb3MgPD0gdGhpcy5lbmQoZCkgJiYgKCFwcmVkIHx8IHByZWQodGhpcy5ub2RlKGQpKSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOb2RlUmFuZ2UodGhpcywgb3RoZXIsIGQpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgUXVlcnkgd2hldGhlciB0aGUgZ2l2ZW4gcG9zaXRpb24gc2hhcmVzIHRoZSBzYW1lIHBhcmVudCBub2RlLlxuICAgICovXG4gICAgc2FtZVBhcmVudChvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3MgLSB0aGlzLnBhcmVudE9mZnNldCA9PSBvdGhlci5wb3MgLSBvdGhlci5wYXJlbnRPZmZzZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHVybiB0aGUgZ3JlYXRlciBvZiB0aGlzIGFuZCB0aGUgZ2l2ZW4gcG9zaXRpb24uXG4gICAgKi9cbiAgICBtYXgob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG90aGVyLnBvcyA+IHRoaXMucG9zID8gb3RoZXIgOiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXR1cm4gdGhlIHNtYWxsZXIgb2YgdGhpcyBhbmQgdGhlIGdpdmVuIHBvc2l0aW9uLlxuICAgICovXG4gICAgbWluKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBvdGhlci5wb3MgPCB0aGlzLnBvcyA/IG90aGVyIDogdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMuZGVwdGg7IGkrKylcbiAgICAgICAgICAgIHN0ciArPSAoc3RyID8gXCIvXCIgOiBcIlwiKSArIHRoaXMubm9kZShpKS50eXBlLm5hbWUgKyBcIl9cIiArIHRoaXMuaW5kZXgoaSAtIDEpO1xuICAgICAgICByZXR1cm4gc3RyICsgXCI6XCIgKyB0aGlzLnBhcmVudE9mZnNldDtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgcmVzb2x2ZShkb2MsIHBvcykge1xuICAgICAgICBpZiAoIShwb3MgPj0gMCAmJiBwb3MgPD0gZG9jLmNvbnRlbnQuc2l6ZSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlBvc2l0aW9uIFwiICsgcG9zICsgXCIgb3V0IG9mIHJhbmdlXCIpO1xuICAgICAgICBsZXQgcGF0aCA9IFtdO1xuICAgICAgICBsZXQgc3RhcnQgPSAwLCBwYXJlbnRPZmZzZXQgPSBwb3M7XG4gICAgICAgIGZvciAobGV0IG5vZGUgPSBkb2M7Oykge1xuICAgICAgICAgICAgbGV0IHsgaW5kZXgsIG9mZnNldCB9ID0gbm9kZS5jb250ZW50LmZpbmRJbmRleChwYXJlbnRPZmZzZXQpO1xuICAgICAgICAgICAgbGV0IHJlbSA9IHBhcmVudE9mZnNldCAtIG9mZnNldDtcbiAgICAgICAgICAgIHBhdGgucHVzaChub2RlLCBpbmRleCwgc3RhcnQgKyBvZmZzZXQpO1xuICAgICAgICAgICAgaWYgKCFyZW0pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZChpbmRleCk7XG4gICAgICAgICAgICBpZiAobm9kZS5pc1RleHQpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBwYXJlbnRPZmZzZXQgPSByZW0gLSAxO1xuICAgICAgICAgICAgc3RhcnQgKz0gb2Zmc2V0ICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFJlc29sdmVkUG9zKHBvcywgcGF0aCwgcGFyZW50T2Zmc2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgcmVzb2x2ZUNhY2hlZChkb2MsIHBvcykge1xuICAgICAgICBsZXQgY2FjaGUgPSByZXNvbHZlQ2FjaGUuZ2V0KGRvYyk7XG4gICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYWNoZS5lbHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVsdCA9IGNhY2hlLmVsdHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGVsdC5wb3MgPT0gcG9zKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZUNhY2hlLnNldChkb2MsIGNhY2hlID0gbmV3IFJlc29sdmVDYWNoZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IGNhY2hlLmVsdHNbY2FjaGUuaV0gPSBSZXNvbHZlZFBvcy5yZXNvbHZlKGRvYywgcG9zKTtcbiAgICAgICAgY2FjaGUuaSA9IChjYWNoZS5pICsgMSkgJSByZXNvbHZlQ2FjaGVTaXplO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbmNsYXNzIFJlc29sdmVDYWNoZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZWx0cyA9IFtdO1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgIH1cbn1cbmNvbnN0IHJlc29sdmVDYWNoZVNpemUgPSAxMiwgcmVzb2x2ZUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuUmVwcmVzZW50cyBhIGZsYXQgcmFuZ2Ugb2YgY29udGVudCwgaS5lLiBvbmUgdGhhdCBzdGFydHMgYW5kXG5lbmRzIGluIHRoZSBzYW1lIG5vZGUuXG4qL1xuY2xhc3MgTm9kZVJhbmdlIHtcbiAgICAvKipcbiAgICBDb25zdHJ1Y3QgYSBub2RlIHJhbmdlLiBgJGZyb21gIGFuZCBgJHRvYCBzaG91bGQgcG9pbnQgaW50byB0aGVcbiAgICBzYW1lIG5vZGUgdW50aWwgYXQgbGVhc3QgdGhlIGdpdmVuIGBkZXB0aGAsIHNpbmNlIGEgbm9kZSByYW5nZVxuICAgIGRlbm90ZXMgYW4gYWRqYWNlbnQgc2V0IG9mIG5vZGVzIGluIGEgc2luZ2xlIHBhcmVudCBub2RlLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgQSByZXNvbHZlZCBwb3NpdGlvbiBhbG9uZyB0aGUgc3RhcnQgb2YgdGhlIGNvbnRlbnQuIE1heSBoYXZlIGFcbiAgICBgZGVwdGhgIGdyZWF0ZXIgdGhhbiB0aGlzIG9iamVjdCdzIGBkZXB0aGAgcHJvcGVydHksIHNpbmNlXG4gICAgdGhlc2UgYXJlIHRoZSBwb3NpdGlvbnMgdGhhdCB3ZXJlIHVzZWQgdG8gY29tcHV0ZSB0aGUgcmFuZ2UsXG4gICAgbm90IHJlLXJlc29sdmVkIHBvc2l0aW9ucyBkaXJlY3RseSBhdCBpdHMgYm91bmRhcmllcy5cbiAgICAqL1xuICAgICRmcm9tLCBcbiAgICAvKipcbiAgICBBIHBvc2l0aW9uIGFsb25nIHRoZSBlbmQgb2YgdGhlIGNvbnRlbnQuIFNlZVxuICAgIGNhdmVhdCBmb3IgW2AkZnJvbWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlUmFuZ2UuJGZyb20pLlxuICAgICovXG4gICAgJHRvLCBcbiAgICAvKipcbiAgICBUaGUgZGVwdGggb2YgdGhlIG5vZGUgdGhhdCB0aGlzIHJhbmdlIHBvaW50cyBpbnRvLlxuICAgICovXG4gICAgZGVwdGgpIHtcbiAgICAgICAgdGhpcy4kZnJvbSA9ICRmcm9tO1xuICAgICAgICB0aGlzLiR0byA9ICR0bztcbiAgICAgICAgdGhpcy5kZXB0aCA9IGRlcHRoO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgcG9zaXRpb24gYXQgdGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAqL1xuICAgIGdldCBzdGFydCgpIHsgcmV0dXJuIHRoaXMuJGZyb20uYmVmb3JlKHRoaXMuZGVwdGggKyAxKTsgfVxuICAgIC8qKlxuICAgIFRoZSBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAqL1xuICAgIGdldCBlbmQoKSB7IHJldHVybiB0aGlzLiR0by5hZnRlcih0aGlzLmRlcHRoICsgMSk7IH1cbiAgICAvKipcbiAgICBUaGUgcGFyZW50IG5vZGUgdGhhdCB0aGUgcmFuZ2UgcG9pbnRzIGludG8uXG4gICAgKi9cbiAgICBnZXQgcGFyZW50KCkgeyByZXR1cm4gdGhpcy4kZnJvbS5ub2RlKHRoaXMuZGVwdGgpOyB9XG4gICAgLyoqXG4gICAgVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSByYW5nZSBpbiB0aGUgcGFyZW50IG5vZGUuXG4gICAgKi9cbiAgICBnZXQgc3RhcnRJbmRleCgpIHsgcmV0dXJuIHRoaXMuJGZyb20uaW5kZXgodGhpcy5kZXB0aCk7IH1cbiAgICAvKipcbiAgICBUaGUgZW5kIGluZGV4IG9mIHRoZSByYW5nZSBpbiB0aGUgcGFyZW50IG5vZGUuXG4gICAgKi9cbiAgICBnZXQgZW5kSW5kZXgoKSB7IHJldHVybiB0aGlzLiR0by5pbmRleEFmdGVyKHRoaXMuZGVwdGgpOyB9XG59XG5cbmNvbnN0IGVtcHR5QXR0cnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqXG5UaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBub2RlIGluIHRoZSB0cmVlIHRoYXQgbWFrZXMgdXAgYVxuUHJvc2VNaXJyb3IgZG9jdW1lbnQuIFNvIGEgZG9jdW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgYE5vZGVgLCB3aXRoXG5jaGlsZHJlbiB0aGF0IGFyZSBhbHNvIGluc3RhbmNlcyBvZiBgTm9kZWAuXG5cbk5vZGVzIGFyZSBwZXJzaXN0ZW50IGRhdGEgc3RydWN0dXJlcy4gSW5zdGVhZCBvZiBjaGFuZ2luZyB0aGVtLCB5b3VcbmNyZWF0ZSBuZXcgb25lcyB3aXRoIHRoZSBjb250ZW50IHlvdSB3YW50LiBPbGQgb25lcyBrZWVwIHBvaW50aW5nXG5hdCB0aGUgb2xkIGRvY3VtZW50IHNoYXBlLiBUaGlzIGlzIG1hZGUgY2hlYXBlciBieSBzaGFyaW5nXG5zdHJ1Y3R1cmUgYmV0d2VlbiB0aGUgb2xkIGFuZCBuZXcgZGF0YSBhcyBtdWNoIGFzIHBvc3NpYmxlLCB3aGljaCBhXG50cmVlIHNoYXBlIGxpa2UgdGhpcyAod2l0aG91dCBiYWNrIHBvaW50ZXJzKSBtYWtlcyBlYXN5LlxuXG4qKkRvIG5vdCoqIGRpcmVjdGx5IG11dGF0ZSB0aGUgcHJvcGVydGllcyBvZiBhIGBOb2RlYCBvYmplY3QuIFNlZVxuW3RoZSBndWlkZV0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9ndWlkZS8jZG9jKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiovXG5jbGFzcyBOb2RlIHtcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSB0eXBlIG9mIG5vZGUgdGhhdCB0aGlzIGlzLlxuICAgICovXG4gICAgdHlwZSwgXG4gICAgLyoqXG4gICAgQW4gb2JqZWN0IG1hcHBpbmcgYXR0cmlidXRlIG5hbWVzIHRvIHZhbHVlcy4gVGhlIGtpbmQgb2ZcbiAgICBhdHRyaWJ1dGVzIGFsbG93ZWQgYW5kIHJlcXVpcmVkIGFyZVxuICAgIFtkZXRlcm1pbmVkXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZVNwZWMuYXR0cnMpIGJ5IHRoZSBub2RlIHR5cGUuXG4gICAgKi9cbiAgICBhdHRycywgXG4gICAgLy8gQSBmcmFnbWVudCBob2xkaW5nIHRoZSBub2RlJ3MgY2hpbGRyZW4uXG4gICAgY29udGVudCwgXG4gICAgLyoqXG4gICAgVGhlIG1hcmtzICh0aGluZ3MgbGlrZSB3aGV0aGVyIGl0IGlzIGVtcGhhc2l6ZWQgb3IgcGFydCBvZiBhXG4gICAgbGluaykgYXBwbGllZCB0byB0aGlzIG5vZGUuXG4gICAgKi9cbiAgICBtYXJrcyA9IE1hcmsubm9uZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmF0dHJzID0gYXR0cnM7XG4gICAgICAgIHRoaXMubWFya3MgPSBtYXJrcztcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudCB8fCBGcmFnbWVudC5lbXB0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIGFycmF5IG9mIHRoaXMgbm9kZSdzIGNoaWxkIG5vZGVzLlxuICAgICovXG4gICAgZ2V0IGNoaWxkcmVuKCkgeyByZXR1cm4gdGhpcy5jb250ZW50LmNvbnRlbnQ7IH1cbiAgICAvKipcbiAgICBUaGUgc2l6ZSBvZiB0aGlzIG5vZGUsIGFzIGRlZmluZWQgYnkgdGhlIGludGVnZXItYmFzZWQgW2luZGV4aW5nXG4gICAgc2NoZW1lXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL2d1aWRlLyNkb2MuaW5kZXhpbmcpLiBGb3IgdGV4dCBub2RlcywgdGhpcyBpcyB0aGVcbiAgICBhbW91bnQgb2YgY2hhcmFjdGVycy4gRm9yIG90aGVyIGxlYWYgbm9kZXMsIGl0IGlzIG9uZS4gRm9yXG4gICAgbm9uLWxlYWYgbm9kZXMsIGl0IGlzIHRoZSBzaXplIG9mIHRoZSBjb250ZW50IHBsdXMgdHdvICh0aGVcbiAgICBzdGFydCBhbmQgZW5kIHRva2VuKS5cbiAgICAqL1xuICAgIGdldCBub2RlU2l6ZSgpIHsgcmV0dXJuIHRoaXMuaXNMZWFmID8gMSA6IDIgKyB0aGlzLmNvbnRlbnQuc2l6ZTsgfVxuICAgIC8qKlxuICAgIFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gdGhhdCB0aGUgbm9kZSBoYXMuXG4gICAgKi9cbiAgICBnZXQgY2hpbGRDb3VudCgpIHsgcmV0dXJuIHRoaXMuY29udGVudC5jaGlsZENvdW50OyB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBjaGlsZCBub2RlIGF0IHRoZSBnaXZlbiBpbmRleC4gUmFpc2VzIGFuIGVycm9yIHdoZW4gdGhlXG4gICAgaW5kZXggaXMgb3V0IG9mIHJhbmdlLlxuICAgICovXG4gICAgY2hpbGQoaW5kZXgpIHsgcmV0dXJuIHRoaXMuY29udGVudC5jaGlsZChpbmRleCk7IH1cbiAgICAvKipcbiAgICBHZXQgdGhlIGNoaWxkIG5vZGUgYXQgdGhlIGdpdmVuIGluZGV4LCBpZiBpdCBleGlzdHMuXG4gICAgKi9cbiAgICBtYXliZUNoaWxkKGluZGV4KSB7IHJldHVybiB0aGlzLmNvbnRlbnQubWF5YmVDaGlsZChpbmRleCk7IH1cbiAgICAvKipcbiAgICBDYWxsIGBmYCBmb3IgZXZlcnkgY2hpbGQgbm9kZSwgcGFzc2luZyB0aGUgbm9kZSwgaXRzIG9mZnNldFxuICAgIGludG8gdGhpcyBwYXJlbnQgbm9kZSwgYW5kIGl0cyBpbmRleC5cbiAgICAqL1xuICAgIGZvckVhY2goZikgeyB0aGlzLmNvbnRlbnQuZm9yRWFjaChmKTsgfVxuICAgIC8qKlxuICAgIEludm9rZSBhIGNhbGxiYWNrIGZvciBhbGwgZGVzY2VuZGFudCBub2RlcyByZWN1cnNpdmVseSBiZXR3ZWVuXG4gICAgdGhlIGdpdmVuIHR3byBwb3NpdGlvbnMgdGhhdCBhcmUgcmVsYXRpdmUgdG8gc3RhcnQgb2YgdGhpc1xuICAgIG5vZGUncyBjb250ZW50LiBUaGUgY2FsbGJhY2sgaXMgaW52b2tlZCB3aXRoIHRoZSBub2RlLCBpdHNcbiAgICBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgb3JpZ2luYWwgbm9kZSAobWV0aG9kIHJlY2VpdmVyKSxcbiAgICBpdHMgcGFyZW50IG5vZGUsIGFuZCBpdHMgY2hpbGQgaW5kZXguIFdoZW4gdGhlIGNhbGxiYWNrIHJldHVybnNcbiAgICBmYWxzZSBmb3IgYSBnaXZlbiBub2RlLCB0aGF0IG5vZGUncyBjaGlsZHJlbiB3aWxsIG5vdCBiZVxuICAgIHJlY3Vyc2VkIG92ZXIuIFRoZSBsYXN0IHBhcmFtZXRlciBjYW4gYmUgdXNlZCB0byBzcGVjaWZ5IGFcbiAgICBzdGFydGluZyBwb3NpdGlvbiB0byBjb3VudCBmcm9tLlxuICAgICovXG4gICAgbm9kZXNCZXR3ZWVuKGZyb20sIHRvLCBmLCBzdGFydFBvcyA9IDApIHtcbiAgICAgICAgdGhpcy5jb250ZW50Lm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgZiwgc3RhcnRQb3MsIHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICBDYWxsIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgZXZlcnkgZGVzY2VuZGFudCBub2RlLiBEb2Vzbid0XG4gICAgZGVzY2VuZCBpbnRvIGEgbm9kZSB3aGVuIHRoZSBjYWxsYmFjayByZXR1cm5zIGBmYWxzZWAuXG4gICAgKi9cbiAgICBkZXNjZW5kYW50cyhmKSB7XG4gICAgICAgIHRoaXMubm9kZXNCZXR3ZWVuKDAsIHRoaXMuY29udGVudC5zaXplLCBmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ29uY2F0ZW5hdGVzIGFsbCB0aGUgdGV4dCBub2RlcyBmb3VuZCBpbiB0aGlzIGZyYWdtZW50IGFuZCBpdHNcbiAgICBjaGlsZHJlbi5cbiAgICAqL1xuICAgIGdldCB0ZXh0Q29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmlzTGVhZiAmJiB0aGlzLnR5cGUuc3BlYy5sZWFmVGV4dClcbiAgICAgICAgICAgID8gdGhpcy50eXBlLnNwZWMubGVhZlRleHQodGhpcylcbiAgICAgICAgICAgIDogdGhpcy50ZXh0QmV0d2VlbigwLCB0aGlzLmNvbnRlbnQuc2l6ZSwgXCJcIik7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCBhbGwgdGV4dCBiZXR3ZWVuIHBvc2l0aW9ucyBgZnJvbWAgYW5kIGB0b2AuIFdoZW5cbiAgICBgYmxvY2tTZXBhcmF0b3JgIGlzIGdpdmVuLCBpdCB3aWxsIGJlIGluc2VydGVkIHRvIHNlcGFyYXRlIHRleHRcbiAgICBmcm9tIGRpZmZlcmVudCBibG9jayBub2Rlcy4gSWYgYGxlYWZUZXh0YCBpcyBnaXZlbiwgaXQnbGwgYmVcbiAgICBpbnNlcnRlZCBmb3IgZXZlcnkgbm9uLXRleHQgbGVhZiBub2RlIGVuY291bnRlcmVkLCBvdGhlcndpc2VcbiAgICBbYGxlYWZUZXh0YF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVTcGVjXmxlYWZUZXh0KSB3aWxsIGJlIHVzZWQuXG4gICAgKi9cbiAgICB0ZXh0QmV0d2Vlbihmcm9tLCB0bywgYmxvY2tTZXBhcmF0b3IsIGxlYWZUZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQudGV4dEJldHdlZW4oZnJvbSwgdG8sIGJsb2NrU2VwYXJhdG9yLCBsZWFmVGV4dCk7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHVybnMgdGhpcyBub2RlJ3MgZmlyc3QgY2hpbGQsIG9yIGBudWxsYCBpZiB0aGVyZSBhcmUgbm9cbiAgICBjaGlsZHJlbi5cbiAgICAqL1xuICAgIGdldCBmaXJzdENoaWxkKCkgeyByZXR1cm4gdGhpcy5jb250ZW50LmZpcnN0Q2hpbGQ7IH1cbiAgICAvKipcbiAgICBSZXR1cm5zIHRoaXMgbm9kZSdzIGxhc3QgY2hpbGQsIG9yIGBudWxsYCBpZiB0aGVyZSBhcmUgbm9cbiAgICBjaGlsZHJlbi5cbiAgICAqL1xuICAgIGdldCBsYXN0Q2hpbGQoKSB7IHJldHVybiB0aGlzLmNvbnRlbnQubGFzdENoaWxkOyB9XG4gICAgLyoqXG4gICAgVGVzdCB3aGV0aGVyIHR3byBub2RlcyByZXByZXNlbnQgdGhlIHNhbWUgcGllY2Ugb2YgZG9jdW1lbnQuXG4gICAgKi9cbiAgICBlcShvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcyA9PSBvdGhlciB8fCAodGhpcy5zYW1lTWFya3VwKG90aGVyKSAmJiB0aGlzLmNvbnRlbnQuZXEob3RoZXIuY29udGVudCkpO1xuICAgIH1cbiAgICAvKipcbiAgICBDb21wYXJlIHRoZSBtYXJrdXAgKHR5cGUsIGF0dHJpYnV0ZXMsIGFuZCBtYXJrcykgb2YgdGhpcyBub2RlIHRvXG4gICAgdGhvc2Ugb2YgYW5vdGhlci4gUmV0dXJucyBgdHJ1ZWAgaWYgYm90aCBoYXZlIHRoZSBzYW1lIG1hcmt1cC5cbiAgICAqL1xuICAgIHNhbWVNYXJrdXAob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzTWFya3VwKG90aGVyLnR5cGUsIG90aGVyLmF0dHJzLCBvdGhlci5tYXJrcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIENoZWNrIHdoZXRoZXIgdGhpcyBub2RlJ3MgbWFya3VwIGNvcnJlc3BvbmQgdG8gdGhlIGdpdmVuIHR5cGUsXG4gICAgYXR0cmlidXRlcywgYW5kIG1hcmtzLlxuICAgICovXG4gICAgaGFzTWFya3VwKHR5cGUsIGF0dHJzLCBtYXJrcykge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09IHR5cGUgJiZcbiAgICAgICAgICAgIGNvbXBhcmVEZWVwKHRoaXMuYXR0cnMsIGF0dHJzIHx8IHR5cGUuZGVmYXVsdEF0dHJzIHx8IGVtcHR5QXR0cnMpICYmXG4gICAgICAgICAgICBNYXJrLnNhbWVTZXQodGhpcy5tYXJrcywgbWFya3MgfHwgTWFyay5ub25lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbmV3IG5vZGUgd2l0aCB0aGUgc2FtZSBtYXJrdXAgYXMgdGhpcyBub2RlLCBjb250YWluaW5nXG4gICAgdGhlIGdpdmVuIGNvbnRlbnQgKG9yIGVtcHR5LCBpZiBubyBjb250ZW50IGlzIGdpdmVuKS5cbiAgICAqL1xuICAgIGNvcHkoY29udGVudCA9IG51bGwpIHtcbiAgICAgICAgaWYgKGNvbnRlbnQgPT0gdGhpcy5jb250ZW50KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSh0aGlzLnR5cGUsIHRoaXMuYXR0cnMsIGNvbnRlbnQsIHRoaXMubWFya3MpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBjb3B5IG9mIHRoaXMgbm9kZSwgd2l0aCB0aGUgZ2l2ZW4gc2V0IG9mIG1hcmtzIGluc3RlYWRcbiAgICBvZiB0aGUgbm9kZSdzIG93biBtYXJrcy5cbiAgICAqL1xuICAgIG1hcmsobWFya3MpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtzID09IHRoaXMubWFya3MgPyB0aGlzIDogbmV3IE5vZGUodGhpcy50eXBlLCB0aGlzLmF0dHJzLCB0aGlzLmNvbnRlbnQsIG1hcmtzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgY29weSBvZiB0aGlzIG5vZGUgd2l0aCBvbmx5IHRoZSBjb250ZW50IGJldHdlZW4gdGhlXG4gICAgZ2l2ZW4gcG9zaXRpb25zLiBJZiBgdG9gIGlzIG5vdCBnaXZlbiwgaXQgZGVmYXVsdHMgdG8gdGhlIGVuZCBvZlxuICAgIHRoZSBub2RlLlxuICAgICovXG4gICAgY3V0KGZyb20sIHRvID0gdGhpcy5jb250ZW50LnNpemUpIHtcbiAgICAgICAgaWYgKGZyb20gPT0gMCAmJiB0byA9PSB0aGlzLmNvbnRlbnQuc2l6ZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5jb3B5KHRoaXMuY29udGVudC5jdXQoZnJvbSwgdG8pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3V0IG91dCB0aGUgcGFydCBvZiB0aGUgZG9jdW1lbnQgYmV0d2VlbiB0aGUgZ2l2ZW4gcG9zaXRpb25zLCBhbmRcbiAgICByZXR1cm4gaXQgYXMgYSBgU2xpY2VgIG9iamVjdC5cbiAgICAqL1xuICAgIHNsaWNlKGZyb20sIHRvID0gdGhpcy5jb250ZW50LnNpemUsIGluY2x1ZGVQYXJlbnRzID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKGZyb20gPT0gdG8pXG4gICAgICAgICAgICByZXR1cm4gU2xpY2UuZW1wdHk7XG4gICAgICAgIGxldCAkZnJvbSA9IHRoaXMucmVzb2x2ZShmcm9tKSwgJHRvID0gdGhpcy5yZXNvbHZlKHRvKTtcbiAgICAgICAgbGV0IGRlcHRoID0gaW5jbHVkZVBhcmVudHMgPyAwIDogJGZyb20uc2hhcmVkRGVwdGgodG8pO1xuICAgICAgICBsZXQgc3RhcnQgPSAkZnJvbS5zdGFydChkZXB0aCksIG5vZGUgPSAkZnJvbS5ub2RlKGRlcHRoKTtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBub2RlLmNvbnRlbnQuY3V0KCRmcm9tLnBvcyAtIHN0YXJ0LCAkdG8ucG9zIC0gc3RhcnQpO1xuICAgICAgICByZXR1cm4gbmV3IFNsaWNlKGNvbnRlbnQsICRmcm9tLmRlcHRoIC0gZGVwdGgsICR0by5kZXB0aCAtIGRlcHRoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmVwbGFjZSB0aGUgcGFydCBvZiB0aGUgZG9jdW1lbnQgYmV0d2VlbiB0aGUgZ2l2ZW4gcG9zaXRpb25zIHdpdGhcbiAgICB0aGUgZ2l2ZW4gc2xpY2UuIFRoZSBzbGljZSBtdXN0ICdmaXQnLCBtZWFuaW5nIGl0cyBvcGVuIHNpZGVzXG4gICAgbXVzdCBiZSBhYmxlIHRvIGNvbm5lY3QgdG8gdGhlIHN1cnJvdW5kaW5nIGNvbnRlbnQsIGFuZCBpdHNcbiAgICBjb250ZW50IG5vZGVzIG11c3QgYmUgdmFsaWQgY2hpbGRyZW4gZm9yIHRoZSBub2RlIHRoZXkgYXJlIHBsYWNlZFxuICAgIGludG8uIElmIGFueSBvZiB0aGlzIGlzIHZpb2xhdGVkLCBhbiBlcnJvciBvZiB0eXBlXG4gICAgW2BSZXBsYWNlRXJyb3JgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuUmVwbGFjZUVycm9yKSBpcyB0aHJvd24uXG4gICAgKi9cbiAgICByZXBsYWNlKGZyb20sIHRvLCBzbGljZSkge1xuICAgICAgICByZXR1cm4gcmVwbGFjZSh0aGlzLnJlc29sdmUoZnJvbSksIHRoaXMucmVzb2x2ZSh0byksIHNsaWNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRmluZCB0aGUgbm9kZSBkaXJlY3RseSBhZnRlciB0aGUgZ2l2ZW4gcG9zaXRpb24uXG4gICAgKi9cbiAgICBub2RlQXQocG9zKSB7XG4gICAgICAgIGZvciAobGV0IG5vZGUgPSB0aGlzOzspIHtcbiAgICAgICAgICAgIGxldCB7IGluZGV4LCBvZmZzZXQgfSA9IG5vZGUuY29udGVudC5maW5kSW5kZXgocG9zKTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLm1heWJlQ2hpbGQoaW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFub2RlKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA9PSBwb3MgfHwgbm9kZS5pc1RleHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICBwb3MgLT0gb2Zmc2V0ICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSAoZGlyZWN0KSBjaGlsZCBub2RlIGFmdGVyIHRoZSBnaXZlbiBvZmZzZXQsIGlmIGFueSxcbiAgICBhbmQgcmV0dXJuIGl0IGFsb25nIHdpdGggaXRzIGluZGV4IGFuZCBvZmZzZXQgcmVsYXRpdmUgdG8gdGhpc1xuICAgIG5vZGUuXG4gICAgKi9cbiAgICBjaGlsZEFmdGVyKHBvcykge1xuICAgICAgICBsZXQgeyBpbmRleCwgb2Zmc2V0IH0gPSB0aGlzLmNvbnRlbnQuZmluZEluZGV4KHBvcyk7XG4gICAgICAgIHJldHVybiB7IG5vZGU6IHRoaXMuY29udGVudC5tYXliZUNoaWxkKGluZGV4KSwgaW5kZXgsIG9mZnNldCB9O1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSAoZGlyZWN0KSBjaGlsZCBub2RlIGJlZm9yZSB0aGUgZ2l2ZW4gb2Zmc2V0LCBpZiBhbnksXG4gICAgYW5kIHJldHVybiBpdCBhbG9uZyB3aXRoIGl0cyBpbmRleCBhbmQgb2Zmc2V0IHJlbGF0aXZlIHRvIHRoaXNcbiAgICBub2RlLlxuICAgICovXG4gICAgY2hpbGRCZWZvcmUocG9zKSB7XG4gICAgICAgIGlmIChwb3MgPT0gMClcbiAgICAgICAgICAgIHJldHVybiB7IG5vZGU6IG51bGwsIGluZGV4OiAwLCBvZmZzZXQ6IDAgfTtcbiAgICAgICAgbGV0IHsgaW5kZXgsIG9mZnNldCB9ID0gdGhpcy5jb250ZW50LmZpbmRJbmRleChwb3MpO1xuICAgICAgICBpZiAob2Zmc2V0IDwgcG9zKVxuICAgICAgICAgICAgcmV0dXJuIHsgbm9kZTogdGhpcy5jb250ZW50LmNoaWxkKGluZGV4KSwgaW5kZXgsIG9mZnNldCB9O1xuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuY29udGVudC5jaGlsZChpbmRleCAtIDEpO1xuICAgICAgICByZXR1cm4geyBub2RlLCBpbmRleDogaW5kZXggLSAxLCBvZmZzZXQ6IG9mZnNldCAtIG5vZGUubm9kZVNpemUgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmVzb2x2ZSB0aGUgZ2l2ZW4gcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50LCByZXR1cm5pbmcgYW5cbiAgICBbb2JqZWN0XShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuUmVzb2x2ZWRQb3MpIHdpdGggaW5mb3JtYXRpb24gYWJvdXQgaXRzIGNvbnRleHQuXG4gICAgKi9cbiAgICByZXNvbHZlKHBvcykgeyByZXR1cm4gUmVzb2x2ZWRQb3MucmVzb2x2ZUNhY2hlZCh0aGlzLCBwb3MpOyB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICByZXNvbHZlTm9DYWNoZShwb3MpIHsgcmV0dXJuIFJlc29sdmVkUG9zLnJlc29sdmUodGhpcywgcG9zKTsgfVxuICAgIC8qKlxuICAgIFRlc3Qgd2hldGhlciBhIGdpdmVuIG1hcmsgb3IgbWFyayB0eXBlIG9jY3VycyBpbiB0aGlzIGRvY3VtZW50XG4gICAgYmV0d2VlbiB0aGUgdHdvIGdpdmVuIHBvc2l0aW9ucy5cbiAgICAqL1xuICAgIHJhbmdlSGFzTWFyayhmcm9tLCB0bywgdHlwZSkge1xuICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRvID4gZnJvbSlcbiAgICAgICAgICAgIHRoaXMubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCBub2RlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZS5pc0luU2V0KG5vZGUubWFya3MpKVxuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFmb3VuZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuICAgIC8qKlxuICAgIFRydWUgd2hlbiB0aGlzIGlzIGEgYmxvY2sgKG5vbi1pbmxpbmUgbm9kZSlcbiAgICAqL1xuICAgIGdldCBpc0Jsb2NrKCkgeyByZXR1cm4gdGhpcy50eXBlLmlzQmxvY2s7IH1cbiAgICAvKipcbiAgICBUcnVlIHdoZW4gdGhpcyBpcyBhIHRleHRibG9jayBub2RlLCBhIGJsb2NrIG5vZGUgd2l0aCBpbmxpbmVcbiAgICBjb250ZW50LlxuICAgICovXG4gICAgZ2V0IGlzVGV4dGJsb2NrKCkgeyByZXR1cm4gdGhpcy50eXBlLmlzVGV4dGJsb2NrOyB9XG4gICAgLyoqXG4gICAgVHJ1ZSB3aGVuIHRoaXMgbm9kZSBhbGxvd3MgaW5saW5lIGNvbnRlbnQuXG4gICAgKi9cbiAgICBnZXQgaW5saW5lQ29udGVudCgpIHsgcmV0dXJuIHRoaXMudHlwZS5pbmxpbmVDb250ZW50OyB9XG4gICAgLyoqXG4gICAgVHJ1ZSB3aGVuIHRoaXMgaXMgYW4gaW5saW5lIG5vZGUgKGEgdGV4dCBub2RlIG9yIGEgbm9kZSB0aGF0IGNhblxuICAgIGFwcGVhciBhbW9uZyB0ZXh0KS5cbiAgICAqL1xuICAgIGdldCBpc0lubGluZSgpIHsgcmV0dXJuIHRoaXMudHlwZS5pc0lubGluZTsgfVxuICAgIC8qKlxuICAgIFRydWUgd2hlbiB0aGlzIGlzIGEgdGV4dCBub2RlLlxuICAgICovXG4gICAgZ2V0IGlzVGV4dCgpIHsgcmV0dXJuIHRoaXMudHlwZS5pc1RleHQ7IH1cbiAgICAvKipcbiAgICBUcnVlIHdoZW4gdGhpcyBpcyBhIGxlYWYgbm9kZS5cbiAgICAqL1xuICAgIGdldCBpc0xlYWYoKSB7IHJldHVybiB0aGlzLnR5cGUuaXNMZWFmOyB9XG4gICAgLyoqXG4gICAgVHJ1ZSB3aGVuIHRoaXMgaXMgYW4gYXRvbSwgaS5lLiB3aGVuIGl0IGRvZXMgbm90IGhhdmUgZGlyZWN0bHlcbiAgICBlZGl0YWJsZSBjb250ZW50LiBUaGlzIGlzIHVzdWFsbHkgdGhlIHNhbWUgYXMgYGlzTGVhZmAsIGJ1dCBjYW5cbiAgICBiZSBjb25maWd1cmVkIHdpdGggdGhlIFtgYXRvbWAgcHJvcGVydHldKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYy5hdG9tKVxuICAgIG9uIGEgbm9kZSdzIHNwZWMgKHR5cGljYWxseSB1c2VkIHdoZW4gdGhlIG5vZGUgaXMgZGlzcGxheWVkIGFzXG4gICAgYW4gdW5lZGl0YWJsZSBbbm9kZSB2aWV3XShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdmlldy5Ob2RlVmlldykpLlxuICAgICovXG4gICAgZ2V0IGlzQXRvbSgpIHsgcmV0dXJuIHRoaXMudHlwZS5pc0F0b207IH1cbiAgICAvKipcbiAgICBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBub2RlIGZvciBkZWJ1Z2dpbmdcbiAgICBwdXJwb3Nlcy5cbiAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBpZiAodGhpcy50eXBlLnNwZWMudG9EZWJ1Z1N0cmluZylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnR5cGUuc3BlYy50b0RlYnVnU3RyaW5nKHRoaXMpO1xuICAgICAgICBsZXQgbmFtZSA9IHRoaXMudHlwZS5uYW1lO1xuICAgICAgICBpZiAodGhpcy5jb250ZW50LnNpemUpXG4gICAgICAgICAgICBuYW1lICs9IFwiKFwiICsgdGhpcy5jb250ZW50LnRvU3RyaW5nSW5uZXIoKSArIFwiKVwiO1xuICAgICAgICByZXR1cm4gd3JhcE1hcmtzKHRoaXMubWFya3MsIG5hbWUpO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIGNvbnRlbnQgbWF0Y2ggaW4gdGhpcyBub2RlIGF0IHRoZSBnaXZlbiBpbmRleC5cbiAgICAqL1xuICAgIGNvbnRlbnRNYXRjaEF0KGluZGV4KSB7XG4gICAgICAgIGxldCBtYXRjaCA9IHRoaXMudHlwZS5jb250ZW50TWF0Y2gubWF0Y2hGcmFnbWVudCh0aGlzLmNvbnRlbnQsIDAsIGluZGV4KTtcbiAgICAgICAgaWYgKCFtYXRjaClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbGxlZCBjb250ZW50TWF0Y2hBdCBvbiBhIG5vZGUgd2l0aCBpbnZhbGlkIGNvbnRlbnRcIik7XG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9XG4gICAgLyoqXG4gICAgVGVzdCB3aGV0aGVyIHJlcGxhY2luZyB0aGUgcmFuZ2UgYmV0d2VlbiBgZnJvbWAgYW5kIGB0b2AgKGJ5XG4gICAgY2hpbGQgaW5kZXgpIHdpdGggdGhlIGdpdmVuIHJlcGxhY2VtZW50IGZyYWdtZW50ICh3aGljaCBkZWZhdWx0c1xuICAgIHRvIHRoZSBlbXB0eSBmcmFnbWVudCkgd291bGQgbGVhdmUgdGhlIG5vZGUncyBjb250ZW50IHZhbGlkLiBZb3VcbiAgICBjYW4gb3B0aW9uYWxseSBwYXNzIGBzdGFydGAgYW5kIGBlbmRgIGluZGljZXMgaW50byB0aGVcbiAgICByZXBsYWNlbWVudCBmcmFnbWVudC5cbiAgICAqL1xuICAgIGNhblJlcGxhY2UoZnJvbSwgdG8sIHJlcGxhY2VtZW50ID0gRnJhZ21lbnQuZW1wdHksIHN0YXJ0ID0gMCwgZW5kID0gcmVwbGFjZW1lbnQuY2hpbGRDb3VudCkge1xuICAgICAgICBsZXQgb25lID0gdGhpcy5jb250ZW50TWF0Y2hBdChmcm9tKS5tYXRjaEZyYWdtZW50KHJlcGxhY2VtZW50LCBzdGFydCwgZW5kKTtcbiAgICAgICAgbGV0IHR3byA9IG9uZSAmJiBvbmUubWF0Y2hGcmFnbWVudCh0aGlzLmNvbnRlbnQsIHRvKTtcbiAgICAgICAgaWYgKCF0d28gfHwgIXR3by52YWxpZEVuZClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspXG4gICAgICAgICAgICBpZiAoIXRoaXMudHlwZS5hbGxvd3NNYXJrcyhyZXBsYWNlbWVudC5jaGlsZChpKS5tYXJrcykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGVzdCB3aGV0aGVyIHJlcGxhY2luZyB0aGUgcmFuZ2UgYGZyb21gIHRvIGB0b2AgKGJ5IGluZGV4KSB3aXRoXG4gICAgYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlIHdvdWxkIGxlYXZlIHRoZSBub2RlJ3MgY29udGVudCB2YWxpZC5cbiAgICAqL1xuICAgIGNhblJlcGxhY2VXaXRoKGZyb20sIHRvLCB0eXBlLCBtYXJrcykge1xuICAgICAgICBpZiAobWFya3MgJiYgIXRoaXMudHlwZS5hbGxvd3NNYXJrcyhtYXJrcykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCBzdGFydCA9IHRoaXMuY29udGVudE1hdGNoQXQoZnJvbSkubWF0Y2hUeXBlKHR5cGUpO1xuICAgICAgICBsZXQgZW5kID0gc3RhcnQgJiYgc3RhcnQubWF0Y2hGcmFnbWVudCh0aGlzLmNvbnRlbnQsIHRvKTtcbiAgICAgICAgcmV0dXJuIGVuZCA/IGVuZC52YWxpZEVuZCA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICBUZXN0IHdoZXRoZXIgdGhlIGdpdmVuIG5vZGUncyBjb250ZW50IGNvdWxkIGJlIGFwcGVuZGVkIHRvIHRoaXNcbiAgICBub2RlLiBJZiB0aGF0IG5vZGUgaXMgZW1wdHksIHRoaXMgd2lsbCBvbmx5IHJldHVybiB0cnVlIGlmIHRoZXJlXG4gICAgaXMgYXQgbGVhc3Qgb25lIG5vZGUgdHlwZSB0aGF0IGNhbiBhcHBlYXIgaW4gYm90aCBub2RlcyAodG8gYXZvaWRcbiAgICBtZXJnaW5nIGNvbXBsZXRlbHkgaW5jb21wYXRpYmxlIG5vZGVzKS5cbiAgICAqL1xuICAgIGNhbkFwcGVuZChvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIuY29udGVudC5zaXplKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FuUmVwbGFjZSh0aGlzLmNoaWxkQ291bnQsIHRoaXMuY2hpbGRDb3VudCwgb3RoZXIuY29udGVudCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnR5cGUuY29tcGF0aWJsZUNvbnRlbnQob3RoZXIudHlwZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENoZWNrIHdoZXRoZXIgdGhpcyBub2RlIGFuZCBpdHMgZGVzY2VuZGFudHMgY29uZm9ybSB0byB0aGVcbiAgICBzY2hlbWEsIGFuZCByYWlzZSBhbiBleGNlcHRpb24gd2hlbiB0aGV5IGRvIG5vdC5cbiAgICAqL1xuICAgIGNoZWNrKCkge1xuICAgICAgICB0aGlzLnR5cGUuY2hlY2tDb250ZW50KHRoaXMuY29udGVudCk7XG4gICAgICAgIHRoaXMudHlwZS5jaGVja0F0dHJzKHRoaXMuYXR0cnMpO1xuICAgICAgICBsZXQgY29weSA9IE1hcmsubm9uZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1hcmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbWFyayA9IHRoaXMubWFya3NbaV07XG4gICAgICAgICAgICBtYXJrLnR5cGUuY2hlY2tBdHRycyhtYXJrLmF0dHJzKTtcbiAgICAgICAgICAgIGNvcHkgPSBtYXJrLmFkZFRvU2V0KGNvcHkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghTWFyay5zYW1lU2V0KGNvcHksIHRoaXMubWFya3MpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYEludmFsaWQgY29sbGVjdGlvbiBvZiBtYXJrcyBmb3Igbm9kZSAke3RoaXMudHlwZS5uYW1lfTogJHt0aGlzLm1hcmtzLm1hcChtID0+IG0udHlwZS5uYW1lKX1gKTtcbiAgICAgICAgdGhpcy5jb250ZW50LmZvckVhY2gobm9kZSA9PiBub2RlLmNoZWNrKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXR1cm4gYSBKU09OLXNlcmlhbGl6ZWFibGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBub2RlLlxuICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICBsZXQgb2JqID0geyB0eXBlOiB0aGlzLnR5cGUubmFtZSB9O1xuICAgICAgICBmb3IgKGxldCBfIGluIHRoaXMuYXR0cnMpIHtcbiAgICAgICAgICAgIG9iai5hdHRycyA9IHRoaXMuYXR0cnM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb250ZW50LnNpemUpXG4gICAgICAgICAgICBvYmouY29udGVudCA9IHRoaXMuY29udGVudC50b0pTT04oKTtcbiAgICAgICAgaWYgKHRoaXMubWFya3MubGVuZ3RoKVxuICAgICAgICAgICAgb2JqLm1hcmtzID0gdGhpcy5tYXJrcy5tYXAobiA9PiBuLnRvSlNPTigpKTtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgLyoqXG4gICAgRGVzZXJpYWxpemUgYSBub2RlIGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24uXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICghanNvbilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgTm9kZS5mcm9tSlNPTlwiKTtcbiAgICAgICAgbGV0IG1hcmtzID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoanNvbi5tYXJrcykge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGpzb24ubWFya3MpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBtYXJrIGRhdGEgZm9yIE5vZGUuZnJvbUpTT05cIik7XG4gICAgICAgICAgICBtYXJrcyA9IGpzb24ubWFya3MubWFwKHNjaGVtYS5tYXJrRnJvbUpTT04pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqc29uLnR5cGUgPT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YganNvbi50ZXh0ICE9IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHRleHQgbm9kZSBpbiBKU09OXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVtYS50ZXh0KGpzb24udGV4dCwgbWFya3MpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb250ZW50ID0gRnJhZ21lbnQuZnJvbUpTT04oc2NoZW1hLCBqc29uLmNvbnRlbnQpO1xuICAgICAgICBsZXQgbm9kZSA9IHNjaGVtYS5ub2RlVHlwZShqc29uLnR5cGUpLmNyZWF0ZShqc29uLmF0dHJzLCBjb250ZW50LCBtYXJrcyk7XG4gICAgICAgIG5vZGUudHlwZS5jaGVja0F0dHJzKG5vZGUuYXR0cnMpO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG59XG5Ob2RlLnByb3RvdHlwZS50ZXh0ID0gdW5kZWZpbmVkO1xuY2xhc3MgVGV4dE5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIGF0dHJzLCBjb250ZW50LCBtYXJrcykge1xuICAgICAgICBzdXBlcih0eXBlLCBhdHRycywgbnVsbCwgbWFya3MpO1xuICAgICAgICBpZiAoIWNvbnRlbnQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkVtcHR5IHRleHQgbm9kZXMgYXJlIG5vdCBhbGxvd2VkXCIpO1xuICAgICAgICB0aGlzLnRleHQgPSBjb250ZW50O1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZS5zcGVjLnRvRGVidWdTdHJpbmcpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50eXBlLnNwZWMudG9EZWJ1Z1N0cmluZyh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHdyYXBNYXJrcyh0aGlzLm1hcmtzLCBKU09OLnN0cmluZ2lmeSh0aGlzLnRleHQpKTtcbiAgICB9XG4gICAgZ2V0IHRleHRDb250ZW50KCkgeyByZXR1cm4gdGhpcy50ZXh0OyB9XG4gICAgdGV4dEJldHdlZW4oZnJvbSwgdG8pIHsgcmV0dXJuIHRoaXMudGV4dC5zbGljZShmcm9tLCB0byk7IH1cbiAgICBnZXQgbm9kZVNpemUoKSB7IHJldHVybiB0aGlzLnRleHQubGVuZ3RoOyB9XG4gICAgbWFyayhtYXJrcykge1xuICAgICAgICByZXR1cm4gbWFya3MgPT0gdGhpcy5tYXJrcyA/IHRoaXMgOiBuZXcgVGV4dE5vZGUodGhpcy50eXBlLCB0aGlzLmF0dHJzLCB0aGlzLnRleHQsIG1hcmtzKTtcbiAgICB9XG4gICAgd2l0aFRleHQodGV4dCkge1xuICAgICAgICBpZiAodGV4dCA9PSB0aGlzLnRleHQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0Tm9kZSh0aGlzLnR5cGUsIHRoaXMuYXR0cnMsIHRleHQsIHRoaXMubWFya3MpO1xuICAgIH1cbiAgICBjdXQoZnJvbSA9IDAsIHRvID0gdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgICBpZiAoZnJvbSA9PSAwICYmIHRvID09IHRoaXMudGV4dC5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aFRleHQodGhpcy50ZXh0LnNsaWNlKGZyb20sIHRvKSk7XG4gICAgfVxuICAgIGVxKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNhbWVNYXJrdXAob3RoZXIpICYmIHRoaXMudGV4dCA9PSBvdGhlci50ZXh0O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGxldCBiYXNlID0gc3VwZXIudG9KU09OKCk7XG4gICAgICAgIGJhc2UudGV4dCA9IHRoaXMudGV4dDtcbiAgICAgICAgcmV0dXJuIGJhc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gd3JhcE1hcmtzKG1hcmtzLCBzdHIpIHtcbiAgICBmb3IgKGxldCBpID0gbWFya3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgIHN0ciA9IG1hcmtzW2ldLnR5cGUubmFtZSArIFwiKFwiICsgc3RyICsgXCIpXCI7XG4gICAgcmV0dXJuIHN0cjtcbn1cblxuLyoqXG5JbnN0YW5jZXMgb2YgdGhpcyBjbGFzcyByZXByZXNlbnQgYSBtYXRjaCBzdGF0ZSBvZiBhIG5vZGUgdHlwZSdzXG5bY29udGVudCBleHByZXNzaW9uXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZVNwZWMuY29udGVudCksIGFuZCBjYW4gYmUgdXNlZCB0b1xuZmluZCBvdXQgd2hldGhlciBmdXJ0aGVyIGNvbnRlbnQgbWF0Y2hlcyBoZXJlLCBhbmQgd2hldGhlciBhIGdpdmVuXG5wb3NpdGlvbiBpcyBhIHZhbGlkIGVuZCBvZiB0aGUgbm9kZS5cbiovXG5jbGFzcyBDb250ZW50TWF0Y2gge1xuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVHJ1ZSB3aGVuIHRoaXMgbWF0Y2ggc3RhdGUgcmVwcmVzZW50cyBhIHZhbGlkIGVuZCBvZiB0aGUgbm9kZS5cbiAgICAqL1xuICAgIHZhbGlkRW5kKSB7XG4gICAgICAgIHRoaXMudmFsaWRFbmQgPSB2YWxpZEVuZDtcbiAgICAgICAgLyoqXG4gICAgICAgIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLm5leHQgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLndyYXBDYWNoZSA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHN0YXRpYyBwYXJzZShzdHJpbmcsIG5vZGVUeXBlcykge1xuICAgICAgICBsZXQgc3RyZWFtID0gbmV3IFRva2VuU3RyZWFtKHN0cmluZywgbm9kZVR5cGVzKTtcbiAgICAgICAgaWYgKHN0cmVhbS5uZXh0ID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gQ29udGVudE1hdGNoLmVtcHR5O1xuICAgICAgICBsZXQgZXhwciA9IHBhcnNlRXhwcihzdHJlYW0pO1xuICAgICAgICBpZiAoc3RyZWFtLm5leHQpXG4gICAgICAgICAgICBzdHJlYW0uZXJyKFwiVW5leHBlY3RlZCB0cmFpbGluZyB0ZXh0XCIpO1xuICAgICAgICBsZXQgbWF0Y2ggPSBkZmEobmZhKGV4cHIpKTtcbiAgICAgICAgY2hlY2tGb3JEZWFkRW5kcyhtYXRjaCwgc3RyZWFtKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH1cbiAgICAvKipcbiAgICBNYXRjaCBhIG5vZGUgdHlwZSwgcmV0dXJuaW5nIGEgbWF0Y2ggYWZ0ZXIgdGhhdCBub2RlIGlmXG4gICAgc3VjY2Vzc2Z1bC5cbiAgICAqL1xuICAgIG1hdGNoVHlwZSh0eXBlKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uZXh0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKHRoaXMubmV4dFtpXS50eXBlID09IHR5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dFtpXS5uZXh0O1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgVHJ5IHRvIG1hdGNoIGEgZnJhZ21lbnQuIFJldHVybnMgdGhlIHJlc3VsdGluZyBtYXRjaCB3aGVuXG4gICAgc3VjY2Vzc2Z1bC5cbiAgICAqL1xuICAgIG1hdGNoRnJhZ21lbnQoZnJhZywgc3RhcnQgPSAwLCBlbmQgPSBmcmFnLmNoaWxkQ291bnQpIHtcbiAgICAgICAgbGV0IGN1ciA9IHRoaXM7XG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgY3VyICYmIGkgPCBlbmQ7IGkrKylcbiAgICAgICAgICAgIGN1ciA9IGN1ci5tYXRjaFR5cGUoZnJhZy5jaGlsZChpKS50eXBlKTtcbiAgICAgICAgcmV0dXJuIGN1cjtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBnZXQgaW5saW5lQ29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dC5sZW5ndGggIT0gMCAmJiB0aGlzLm5leHRbMF0udHlwZS5pc0lubGluZTtcbiAgICB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBmaXJzdCBtYXRjaGluZyBub2RlIHR5cGUgYXQgdGhpcyBtYXRjaCBwb3NpdGlvbiB0aGF0IGNhblxuICAgIGJlIGdlbmVyYXRlZC5cbiAgICAqL1xuICAgIGdldCBkZWZhdWx0VHlwZSgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5leHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB7IHR5cGUgfSA9IHRoaXMubmV4dFtpXTtcbiAgICAgICAgICAgIGlmICghKHR5cGUuaXNUZXh0IHx8IHR5cGUuaGFzUmVxdWlyZWRBdHRycygpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb21wYXRpYmxlKG90aGVyKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uZXh0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBvdGhlci5uZXh0Lmxlbmd0aDsgaisrKVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5leHRbaV0udHlwZSA9PSBvdGhlci5uZXh0W2pdLnR5cGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgIFRyeSB0byBtYXRjaCB0aGUgZ2l2ZW4gZnJhZ21lbnQsIGFuZCBpZiB0aGF0IGZhaWxzLCBzZWUgaWYgaXQgY2FuXG4gICAgYmUgbWFkZSB0byBtYXRjaCBieSBpbnNlcnRpbmcgbm9kZXMgaW4gZnJvbnQgb2YgaXQuIFdoZW5cbiAgICBzdWNjZXNzZnVsLCByZXR1cm4gYSBmcmFnbWVudCBvZiBpbnNlcnRlZCBub2RlcyAod2hpY2ggbWF5IGJlXG4gICAgZW1wdHkgaWYgbm90aGluZyBoYWQgdG8gYmUgaW5zZXJ0ZWQpLiBXaGVuIGB0b0VuZGAgaXMgdHJ1ZSwgb25seVxuICAgIHJldHVybiBhIGZyYWdtZW50IGlmIHRoZSByZXN1bHRpbmcgbWF0Y2ggZ29lcyB0byB0aGUgZW5kIG9mIHRoZVxuICAgIGNvbnRlbnQgZXhwcmVzc2lvbi5cbiAgICAqL1xuICAgIGZpbGxCZWZvcmUoYWZ0ZXIsIHRvRW5kID0gZmFsc2UsIHN0YXJ0SW5kZXggPSAwKSB7XG4gICAgICAgIGxldCBzZWVuID0gW3RoaXNdO1xuICAgICAgICBmdW5jdGlvbiBzZWFyY2gobWF0Y2gsIHR5cGVzKSB7XG4gICAgICAgICAgICBsZXQgZmluaXNoZWQgPSBtYXRjaC5tYXRjaEZyYWdtZW50KGFmdGVyLCBzdGFydEluZGV4KTtcbiAgICAgICAgICAgIGlmIChmaW5pc2hlZCAmJiAoIXRvRW5kIHx8IGZpbmlzaGVkLnZhbGlkRW5kKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gRnJhZ21lbnQuZnJvbSh0eXBlcy5tYXAodHAgPT4gdHAuY3JlYXRlQW5kRmlsbCgpKSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoLm5leHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgeyB0eXBlLCBuZXh0IH0gPSBtYXRjaC5uZXh0W2ldO1xuICAgICAgICAgICAgICAgIGlmICghKHR5cGUuaXNUZXh0IHx8IHR5cGUuaGFzUmVxdWlyZWRBdHRycygpKSAmJiBzZWVuLmluZGV4T2YobmV4dCkgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vlbi5wdXNoKG5leHQpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZm91bmQgPSBzZWFyY2gobmV4dCwgdHlwZXMuY29uY2F0KHR5cGUpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWFyY2godGhpcywgW10pO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIGEgc2V0IG9mIHdyYXBwaW5nIG5vZGUgdHlwZXMgdGhhdCB3b3VsZCBhbGxvdyBhIG5vZGUgb2YgdGhlXG4gICAgZ2l2ZW4gdHlwZSB0byBhcHBlYXIgYXQgdGhpcyBwb3NpdGlvbi4gVGhlIHJlc3VsdCBtYXkgYmUgZW1wdHlcbiAgICAod2hlbiBpdCBmaXRzIGRpcmVjdGx5KSBhbmQgd2lsbCBiZSBudWxsIHdoZW4gbm8gc3VjaCB3cmFwcGluZ1xuICAgIGV4aXN0cy5cbiAgICAqL1xuICAgIGZpbmRXcmFwcGluZyh0YXJnZXQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLndyYXBDYWNoZS5sZW5ndGg7IGkgKz0gMilcbiAgICAgICAgICAgIGlmICh0aGlzLndyYXBDYWNoZVtpXSA9PSB0YXJnZXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JhcENhY2hlW2kgKyAxXTtcbiAgICAgICAgbGV0IGNvbXB1dGVkID0gdGhpcy5jb21wdXRlV3JhcHBpbmcodGFyZ2V0KTtcbiAgICAgICAgdGhpcy53cmFwQ2FjaGUucHVzaCh0YXJnZXQsIGNvbXB1dGVkKTtcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVkO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbXB1dGVXcmFwcGluZyh0YXJnZXQpIHtcbiAgICAgICAgbGV0IHNlZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpLCBhY3RpdmUgPSBbeyBtYXRjaDogdGhpcywgdHlwZTogbnVsbCwgdmlhOiBudWxsIH1dO1xuICAgICAgICB3aGlsZSAoYWN0aXZlLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSBhY3RpdmUuc2hpZnQoKSwgbWF0Y2ggPSBjdXJyZW50Lm1hdGNoO1xuICAgICAgICAgICAgaWYgKG1hdGNoLm1hdGNoVHlwZSh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IG9iaiA9IGN1cnJlbnQ7IG9iai50eXBlOyBvYmogPSBvYmoudmlhKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChvYmoudHlwZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoLm5leHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgeyB0eXBlLCBuZXh0IH0gPSBtYXRjaC5uZXh0W2ldO1xuICAgICAgICAgICAgICAgIGlmICghdHlwZS5pc0xlYWYgJiYgIXR5cGUuaGFzUmVxdWlyZWRBdHRycygpICYmICEodHlwZS5uYW1lIGluIHNlZW4pICYmICghY3VycmVudC50eXBlIHx8IG5leHQudmFsaWRFbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5wdXNoKHsgbWF0Y2g6IHR5cGUuY29udGVudE1hdGNoLCB0eXBlLCB2aWE6IGN1cnJlbnQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNlZW5bdHlwZS5uYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgbnVtYmVyIG9mIG91dGdvaW5nIGVkZ2VzIHRoaXMgbm9kZSBoYXMgaW4gdGhlIGZpbml0ZVxuICAgIGF1dG9tYXRvbiB0aGF0IGRlc2NyaWJlcyB0aGUgY29udGVudCBleHByZXNzaW9uLlxuICAgICovXG4gICAgZ2V0IGVkZ2VDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dC5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgX25f4oCLdGggb3V0Z29pbmcgZWRnZSBmcm9tIHRoaXMgbm9kZSBpbiB0aGUgZmluaXRlXG4gICAgYXV0b21hdG9uIHRoYXQgZGVzY3JpYmVzIHRoZSBjb250ZW50IGV4cHJlc3Npb24uXG4gICAgKi9cbiAgICBlZGdlKG4pIHtcbiAgICAgICAgaWYgKG4gPj0gdGhpcy5uZXh0Lmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBUaGVyZSdzIG5vICR7bn10aCBlZGdlIGluIHRoaXMgY29udGVudCBtYXRjaGApO1xuICAgICAgICByZXR1cm4gdGhpcy5uZXh0W25dO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBsZXQgc2VlbiA9IFtdO1xuICAgICAgICBmdW5jdGlvbiBzY2FuKG0pIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChtKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbS5uZXh0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIGlmIChzZWVuLmluZGV4T2YobS5uZXh0W2ldLm5leHQpID09IC0xKVxuICAgICAgICAgICAgICAgICAgICBzY2FuKG0ubmV4dFtpXS5uZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBzY2FuKHRoaXMpO1xuICAgICAgICByZXR1cm4gc2Vlbi5tYXAoKG0sIGkpID0+IHtcbiAgICAgICAgICAgIGxldCBvdXQgPSBpICsgKG0udmFsaWRFbmQgPyBcIipcIiA6IFwiIFwiKSArIFwiIFwiO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtLm5leHQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgb3V0ICs9IChpID8gXCIsIFwiIDogXCJcIikgKyBtLm5leHRbaV0udHlwZS5uYW1lICsgXCItPlwiICsgc2Vlbi5pbmRleE9mKG0ubmV4dFtpXS5uZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH0pLmpvaW4oXCJcXG5cIik7XG4gICAgfVxufVxuLyoqXG5AaW50ZXJuYWxcbiovXG5Db250ZW50TWF0Y2guZW1wdHkgPSBuZXcgQ29udGVudE1hdGNoKHRydWUpO1xuY2xhc3MgVG9rZW5TdHJlYW0ge1xuICAgIGNvbnN0cnVjdG9yKHN0cmluZywgbm9kZVR5cGVzKSB7XG4gICAgICAgIHRoaXMuc3RyaW5nID0gc3RyaW5nO1xuICAgICAgICB0aGlzLm5vZGVUeXBlcyA9IG5vZGVUeXBlcztcbiAgICAgICAgdGhpcy5pbmxpbmUgPSBudWxsO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMudG9rZW5zID0gc3RyaW5nLnNwbGl0KC9cXHMqKD89XFxifFxcV3wkKS8pO1xuICAgICAgICBpZiAodGhpcy50b2tlbnNbdGhpcy50b2tlbnMubGVuZ3RoIC0gMV0gPT0gXCJcIilcbiAgICAgICAgICAgIHRoaXMudG9rZW5zLnBvcCgpO1xuICAgICAgICBpZiAodGhpcy50b2tlbnNbMF0gPT0gXCJcIilcbiAgICAgICAgICAgIHRoaXMudG9rZW5zLnNoaWZ0KCk7XG4gICAgfVxuICAgIGdldCBuZXh0KCkgeyByZXR1cm4gdGhpcy50b2tlbnNbdGhpcy5wb3NdOyB9XG4gICAgZWF0KHRvaykgeyByZXR1cm4gdGhpcy5uZXh0ID09IHRvayAmJiAodGhpcy5wb3MrKyB8fCB0cnVlKTsgfVxuICAgIGVycihzdHIpIHsgdGhyb3cgbmV3IFN5bnRheEVycm9yKHN0ciArIFwiIChpbiBjb250ZW50IGV4cHJlc3Npb24gJ1wiICsgdGhpcy5zdHJpbmcgKyBcIicpXCIpOyB9XG59XG5mdW5jdGlvbiBwYXJzZUV4cHIoc3RyZWFtKSB7XG4gICAgbGV0IGV4cHJzID0gW107XG4gICAgZG8ge1xuICAgICAgICBleHBycy5wdXNoKHBhcnNlRXhwclNlcShzdHJlYW0pKTtcbiAgICB9IHdoaWxlIChzdHJlYW0uZWF0KFwifFwiKSk7XG4gICAgcmV0dXJuIGV4cHJzLmxlbmd0aCA9PSAxID8gZXhwcnNbMF0gOiB7IHR5cGU6IFwiY2hvaWNlXCIsIGV4cHJzIH07XG59XG5mdW5jdGlvbiBwYXJzZUV4cHJTZXEoc3RyZWFtKSB7XG4gICAgbGV0IGV4cHJzID0gW107XG4gICAgZG8ge1xuICAgICAgICBleHBycy5wdXNoKHBhcnNlRXhwclN1YnNjcmlwdChzdHJlYW0pKTtcbiAgICB9IHdoaWxlIChzdHJlYW0ubmV4dCAmJiBzdHJlYW0ubmV4dCAhPSBcIilcIiAmJiBzdHJlYW0ubmV4dCAhPSBcInxcIik7XG4gICAgcmV0dXJuIGV4cHJzLmxlbmd0aCA9PSAxID8gZXhwcnNbMF0gOiB7IHR5cGU6IFwic2VxXCIsIGV4cHJzIH07XG59XG5mdW5jdGlvbiBwYXJzZUV4cHJTdWJzY3JpcHQoc3RyZWFtKSB7XG4gICAgbGV0IGV4cHIgPSBwYXJzZUV4cHJBdG9tKHN0cmVhbSk7XG4gICAgZm9yICg7Oykge1xuICAgICAgICBpZiAoc3RyZWFtLmVhdChcIitcIikpXG4gICAgICAgICAgICBleHByID0geyB0eXBlOiBcInBsdXNcIiwgZXhwciB9O1xuICAgICAgICBlbHNlIGlmIChzdHJlYW0uZWF0KFwiKlwiKSlcbiAgICAgICAgICAgIGV4cHIgPSB7IHR5cGU6IFwic3RhclwiLCBleHByIH07XG4gICAgICAgIGVsc2UgaWYgKHN0cmVhbS5lYXQoXCI/XCIpKVxuICAgICAgICAgICAgZXhwciA9IHsgdHlwZTogXCJvcHRcIiwgZXhwciB9O1xuICAgICAgICBlbHNlIGlmIChzdHJlYW0uZWF0KFwie1wiKSlcbiAgICAgICAgICAgIGV4cHIgPSBwYXJzZUV4cHJSYW5nZShzdHJlYW0sIGV4cHIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGV4cHI7XG59XG5mdW5jdGlvbiBwYXJzZU51bShzdHJlYW0pIHtcbiAgICBpZiAoL1xcRC8udGVzdChzdHJlYW0ubmV4dCkpXG4gICAgICAgIHN0cmVhbS5lcnIoXCJFeHBlY3RlZCBudW1iZXIsIGdvdCAnXCIgKyBzdHJlYW0ubmV4dCArIFwiJ1wiKTtcbiAgICBsZXQgcmVzdWx0ID0gTnVtYmVyKHN0cmVhbS5uZXh0KTtcbiAgICBzdHJlYW0ucG9zKys7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBhcnNlRXhwclJhbmdlKHN0cmVhbSwgZXhwcikge1xuICAgIGxldCBtaW4gPSBwYXJzZU51bShzdHJlYW0pLCBtYXggPSBtaW47XG4gICAgaWYgKHN0cmVhbS5lYXQoXCIsXCIpKSB7XG4gICAgICAgIGlmIChzdHJlYW0ubmV4dCAhPSBcIn1cIilcbiAgICAgICAgICAgIG1heCA9IHBhcnNlTnVtKHN0cmVhbSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG1heCA9IC0xO1xuICAgIH1cbiAgICBpZiAoIXN0cmVhbS5lYXQoXCJ9XCIpKVxuICAgICAgICBzdHJlYW0uZXJyKFwiVW5jbG9zZWQgYnJhY2VkIHJhbmdlXCIpO1xuICAgIHJldHVybiB7IHR5cGU6IFwicmFuZ2VcIiwgbWluLCBtYXgsIGV4cHIgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVOYW1lKHN0cmVhbSwgbmFtZSkge1xuICAgIGxldCB0eXBlcyA9IHN0cmVhbS5ub2RlVHlwZXMsIHR5cGUgPSB0eXBlc1tuYW1lXTtcbiAgICBpZiAodHlwZSlcbiAgICAgICAgcmV0dXJuIFt0eXBlXTtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgdHlwZU5hbWUgaW4gdHlwZXMpIHtcbiAgICAgICAgbGV0IHR5cGUgPSB0eXBlc1t0eXBlTmFtZV07XG4gICAgICAgIGlmICh0eXBlLmlzSW5Hcm91cChuYW1lKSlcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHR5cGUpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PSAwKVxuICAgICAgICBzdHJlYW0uZXJyKFwiTm8gbm9kZSB0eXBlIG9yIGdyb3VwICdcIiArIG5hbWUgKyBcIicgZm91bmRcIik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBhcnNlRXhwckF0b20oc3RyZWFtKSB7XG4gICAgaWYgKHN0cmVhbS5lYXQoXCIoXCIpKSB7XG4gICAgICAgIGxldCBleHByID0gcGFyc2VFeHByKHN0cmVhbSk7XG4gICAgICAgIGlmICghc3RyZWFtLmVhdChcIilcIikpXG4gICAgICAgICAgICBzdHJlYW0uZXJyKFwiTWlzc2luZyBjbG9zaW5nIHBhcmVuXCIpO1xuICAgICAgICByZXR1cm4gZXhwcjtcbiAgICB9XG4gICAgZWxzZSBpZiAoIS9cXFcvLnRlc3Qoc3RyZWFtLm5leHQpKSB7XG4gICAgICAgIGxldCBleHBycyA9IHJlc29sdmVOYW1lKHN0cmVhbSwgc3RyZWFtLm5leHQpLm1hcCh0eXBlID0+IHtcbiAgICAgICAgICAgIGlmIChzdHJlYW0uaW5saW5lID09IG51bGwpXG4gICAgICAgICAgICAgICAgc3RyZWFtLmlubGluZSA9IHR5cGUuaXNJbmxpbmU7XG4gICAgICAgICAgICBlbHNlIGlmIChzdHJlYW0uaW5saW5lICE9IHR5cGUuaXNJbmxpbmUpXG4gICAgICAgICAgICAgICAgc3RyZWFtLmVycihcIk1peGluZyBpbmxpbmUgYW5kIGJsb2NrIGNvbnRlbnRcIik7XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiBcIm5hbWVcIiwgdmFsdWU6IHR5cGUgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0cmVhbS5wb3MrKztcbiAgICAgICAgcmV0dXJuIGV4cHJzLmxlbmd0aCA9PSAxID8gZXhwcnNbMF0gOiB7IHR5cGU6IFwiY2hvaWNlXCIsIGV4cHJzIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdHJlYW0uZXJyKFwiVW5leHBlY3RlZCB0b2tlbiAnXCIgKyBzdHJlYW0ubmV4dCArIFwiJ1wiKTtcbiAgICB9XG59XG4vLyBDb25zdHJ1Y3QgYW4gTkZBIGZyb20gYW4gZXhwcmVzc2lvbiBhcyByZXR1cm5lZCBieSB0aGUgcGFyc2VyLiBUaGVcbi8vIE5GQSBpcyByZXByZXNlbnRlZCBhcyBhbiBhcnJheSBvZiBzdGF0ZXMsIHdoaWNoIGFyZSB0aGVtc2VsdmVzXG4vLyBhcnJheXMgb2YgZWRnZXMsIHdoaWNoIGFyZSBge3Rlcm0sIHRvfWAgb2JqZWN0cy4gVGhlIGZpcnN0IHN0YXRlIGlzXG4vLyB0aGUgZW50cnkgc3RhdGUgYW5kIHRoZSBsYXN0IG5vZGUgaXMgdGhlIHN1Y2Nlc3Mgc3RhdGUuXG4vL1xuLy8gTm90ZSB0aGF0IHVubGlrZSB0eXBpY2FsIE5GQXMsIHRoZSBlZGdlIG9yZGVyaW5nIGluIHRoaXMgb25lIGlzXG4vLyBzaWduaWZpY2FudCwgaW4gdGhhdCBpdCBpcyB1c2VkIHRvIGNvbnRydWN0IGZpbGxlciBjb250ZW50IHdoZW5cbi8vIG5lY2Vzc2FyeS5cbmZ1bmN0aW9uIG5mYShleHByKSB7XG4gICAgbGV0IG5mYSA9IFtbXV07XG4gICAgY29ubmVjdChjb21waWxlKGV4cHIsIDApLCBub2RlKCkpO1xuICAgIHJldHVybiBuZmE7XG4gICAgZnVuY3Rpb24gbm9kZSgpIHsgcmV0dXJuIG5mYS5wdXNoKFtdKSAtIDE7IH1cbiAgICBmdW5jdGlvbiBlZGdlKGZyb20sIHRvLCB0ZXJtKSB7XG4gICAgICAgIGxldCBlZGdlID0geyB0ZXJtLCB0byB9O1xuICAgICAgICBuZmFbZnJvbV0ucHVzaChlZGdlKTtcbiAgICAgICAgcmV0dXJuIGVkZ2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbm5lY3QoZWRnZXMsIHRvKSB7XG4gICAgICAgIGVkZ2VzLmZvckVhY2goZWRnZSA9PiBlZGdlLnRvID0gdG8pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21waWxlKGV4cHIsIGZyb20pIHtcbiAgICAgICAgaWYgKGV4cHIudHlwZSA9PSBcImNob2ljZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwci5leHBycy5yZWR1Y2UoKG91dCwgZXhwcikgPT4gb3V0LmNvbmNhdChjb21waWxlKGV4cHIsIGZyb20pKSwgW10pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4cHIudHlwZSA9PSBcInNlcVwiKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDs7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gY29tcGlsZShleHByLmV4cHJzW2ldLCBmcm9tKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSBleHByLmV4cHJzLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgICAgIGNvbm5lY3QobmV4dCwgZnJvbSA9IG5vZGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXhwci50eXBlID09IFwic3RhclwiKSB7XG4gICAgICAgICAgICBsZXQgbG9vcCA9IG5vZGUoKTtcbiAgICAgICAgICAgIGVkZ2UoZnJvbSwgbG9vcCk7XG4gICAgICAgICAgICBjb25uZWN0KGNvbXBpbGUoZXhwci5leHByLCBsb29wKSwgbG9vcCk7XG4gICAgICAgICAgICByZXR1cm4gW2VkZ2UobG9vcCldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4cHIudHlwZSA9PSBcInBsdXNcIikge1xuICAgICAgICAgICAgbGV0IGxvb3AgPSBub2RlKCk7XG4gICAgICAgICAgICBjb25uZWN0KGNvbXBpbGUoZXhwci5leHByLCBmcm9tKSwgbG9vcCk7XG4gICAgICAgICAgICBjb25uZWN0KGNvbXBpbGUoZXhwci5leHByLCBsb29wKSwgbG9vcCk7XG4gICAgICAgICAgICByZXR1cm4gW2VkZ2UobG9vcCldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4cHIudHlwZSA9PSBcIm9wdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW2VkZ2UoZnJvbSldLmNvbmNhdChjb21waWxlKGV4cHIuZXhwciwgZnJvbSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4cHIudHlwZSA9PSBcInJhbmdlXCIpIHtcbiAgICAgICAgICAgIGxldCBjdXIgPSBmcm9tO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHByLm1pbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSBub2RlKCk7XG4gICAgICAgICAgICAgICAgY29ubmVjdChjb21waWxlKGV4cHIuZXhwciwgY3VyKSwgbmV4dCk7XG4gICAgICAgICAgICAgICAgY3VyID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChleHByLm1heCA9PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbm5lY3QoY29tcGlsZShleHByLmV4cHIsIGN1ciksIGN1cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gZXhwci5taW47IGkgPCBleHByLm1heDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gbm9kZSgpO1xuICAgICAgICAgICAgICAgICAgICBlZGdlKGN1ciwgbmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3QoY29tcGlsZShleHByLmV4cHIsIGN1ciksIG5leHQpO1xuICAgICAgICAgICAgICAgICAgICBjdXIgPSBuZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbZWRnZShjdXIpXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleHByLnR5cGUgPT0gXCJuYW1lXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbZWRnZShmcm9tLCB1bmRlZmluZWQsIGV4cHIudmFsdWUpXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gZXhwciB0eXBlXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY21wKGEsIGIpIHsgcmV0dXJuIGIgLSBhOyB9XG4vLyBHZXQgdGhlIHNldCBvZiBub2RlcyByZWFjaGFibGUgYnkgbnVsbCBlZGdlcyBmcm9tIGBub2RlYC4gT21pdFxuLy8gbm9kZXMgd2l0aCBvbmx5IGEgc2luZ2xlIG51bGwtb3V0LWVkZ2UsIHNpbmNlIHRoZXkgbWF5IGxlYWQgdG9cbi8vIG5lZWRsZXNzIGR1cGxpY2F0ZWQgbm9kZXMuXG5mdW5jdGlvbiBudWxsRnJvbShuZmEsIG5vZGUpIHtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgc2Nhbihub2RlKTtcbiAgICByZXR1cm4gcmVzdWx0LnNvcnQoY21wKTtcbiAgICBmdW5jdGlvbiBzY2FuKG5vZGUpIHtcbiAgICAgICAgbGV0IGVkZ2VzID0gbmZhW25vZGVdO1xuICAgICAgICBpZiAoZWRnZXMubGVuZ3RoID09IDEgJiYgIWVkZ2VzWzBdLnRlcm0pXG4gICAgICAgICAgICByZXR1cm4gc2NhbihlZGdlc1swXS50byk7XG4gICAgICAgIHJlc3VsdC5wdXNoKG5vZGUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVkZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgeyB0ZXJtLCB0byB9ID0gZWRnZXNbaV07XG4gICAgICAgICAgICBpZiAoIXRlcm0gJiYgcmVzdWx0LmluZGV4T2YodG8pID09IC0xKVxuICAgICAgICAgICAgICAgIHNjYW4odG8pO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gQ29tcGlsZXMgYW4gTkZBIGFzIHByb2R1Y2VkIGJ5IGBuZmFgIGludG8gYSBERkEsIG1vZGVsZWQgYXMgYSBzZXRcbi8vIG9mIHN0YXRlIG9iamVjdHMgKGBDb250ZW50TWF0Y2hgIGluc3RhbmNlcykgd2l0aCB0cmFuc2l0aW9uc1xuLy8gYmV0d2VlbiB0aGVtLlxuZnVuY3Rpb24gZGZhKG5mYSkge1xuICAgIGxldCBsYWJlbGVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZXR1cm4gZXhwbG9yZShudWxsRnJvbShuZmEsIDApKTtcbiAgICBmdW5jdGlvbiBleHBsb3JlKHN0YXRlcykge1xuICAgICAgICBsZXQgb3V0ID0gW107XG4gICAgICAgIHN0YXRlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICAgICAgbmZhW25vZGVdLmZvckVhY2goKHsgdGVybSwgdG8gfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGVybSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGxldCBzZXQ7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdXRbaV1bMF0gPT0gdGVybSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldCA9IG91dFtpXVsxXTtcbiAgICAgICAgICAgICAgICBudWxsRnJvbShuZmEsIHRvKS5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNldClcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKFt0ZXJtLCBzZXQgPSBbXV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2V0LmluZGV4T2Yobm9kZSkgPT0gLTEpXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IHN0YXRlID0gbGFiZWxlZFtzdGF0ZXMuam9pbihcIixcIildID0gbmV3IENvbnRlbnRNYXRjaChzdGF0ZXMuaW5kZXhPZihuZmEubGVuZ3RoIC0gMSkgPiAtMSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgc3RhdGVzID0gb3V0W2ldWzFdLnNvcnQoY21wKTtcbiAgICAgICAgICAgIHN0YXRlLm5leHQucHVzaCh7IHR5cGU6IG91dFtpXVswXSwgbmV4dDogbGFiZWxlZFtzdGF0ZXMuam9pbihcIixcIildIHx8IGV4cGxvcmUoc3RhdGVzKSB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tGb3JEZWFkRW5kcyhtYXRjaCwgc3RyZWFtKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIHdvcmsgPSBbbWF0Y2hdOyBpIDwgd29yay5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgc3RhdGUgPSB3b3JrW2ldLCBkZWFkID0gIXN0YXRlLnZhbGlkRW5kLCBub2RlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN0YXRlLm5leHQubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGxldCB7IHR5cGUsIG5leHQgfSA9IHN0YXRlLm5leHRbal07XG4gICAgICAgICAgICBub2Rlcy5wdXNoKHR5cGUubmFtZSk7XG4gICAgICAgICAgICBpZiAoZGVhZCAmJiAhKHR5cGUuaXNUZXh0IHx8IHR5cGUuaGFzUmVxdWlyZWRBdHRycygpKSlcbiAgICAgICAgICAgICAgICBkZWFkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAod29yay5pbmRleE9mKG5leHQpID09IC0xKVxuICAgICAgICAgICAgICAgIHdvcmsucHVzaChuZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVhZClcbiAgICAgICAgICAgIHN0cmVhbS5lcnIoXCJPbmx5IG5vbi1nZW5lcmF0YWJsZSBub2RlcyAoXCIgKyBub2Rlcy5qb2luKFwiLCBcIikgKyBcIikgaW4gYSByZXF1aXJlZCBwb3NpdGlvbiAoc2VlIGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvZ3VpZGUvI2dlbmVyYXRhYmxlKVwiKTtcbiAgICB9XG59XG5cbi8vIEZvciBub2RlIHR5cGVzIHdoZXJlIGFsbCBhdHRycyBoYXZlIGEgZGVmYXVsdCB2YWx1ZSAob3Igd2hpY2ggZG9uJ3Rcbi8vIGhhdmUgYW55IGF0dHJpYnV0ZXMpLCBidWlsZCB1cCBhIHNpbmdsZSByZXVzYWJsZSBkZWZhdWx0IGF0dHJpYnV0ZVxuLy8gb2JqZWN0LCBhbmQgdXNlIGl0IGZvciBhbGwgbm9kZXMgdGhhdCBkb24ndCBzcGVjaWZ5IHNwZWNpZmljXG4vLyBhdHRyaWJ1dGVzLlxuZnVuY3Rpb24gZGVmYXVsdEF0dHJzKGF0dHJzKSB7XG4gICAgbGV0IGRlZmF1bHRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGxldCBhdHRyTmFtZSBpbiBhdHRycykge1xuICAgICAgICBsZXQgYXR0ciA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgaWYgKCFhdHRyLmhhc0RlZmF1bHQpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgZGVmYXVsdHNbYXR0ck5hbWVdID0gYXR0ci5kZWZhdWx0O1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdHM7XG59XG5mdW5jdGlvbiBjb21wdXRlQXR0cnMoYXR0cnMsIHZhbHVlKSB7XG4gICAgbGV0IGJ1aWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGxldCBuYW1lIGluIGF0dHJzKSB7XG4gICAgICAgIGxldCBnaXZlbiA9IHZhbHVlICYmIHZhbHVlW25hbWVdO1xuICAgICAgICBpZiAoZ2l2ZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IGF0dHIgPSBhdHRyc1tuYW1lXTtcbiAgICAgICAgICAgIGlmIChhdHRyLmhhc0RlZmF1bHQpXG4gICAgICAgICAgICAgICAgZ2l2ZW4gPSBhdHRyLmRlZmF1bHQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJObyB2YWx1ZSBzdXBwbGllZCBmb3IgYXR0cmlidXRlIFwiICsgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnVpbHRbbmFtZV0gPSBnaXZlbjtcbiAgICB9XG4gICAgcmV0dXJuIGJ1aWx0O1xufVxuZnVuY3Rpb24gY2hlY2tBdHRycyhhdHRycywgdmFsdWVzLCB0eXBlLCBuYW1lKSB7XG4gICAgZm9yIChsZXQgbmFtZSBpbiB2YWx1ZXMpXG4gICAgICAgIGlmICghKG5hbWUgaW4gYXR0cnMpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFVuc3VwcG9ydGVkIGF0dHJpYnV0ZSAke25hbWV9IGZvciAke3R5cGV9IG9mIHR5cGUgJHtuYW1lfWApO1xuICAgIGZvciAobGV0IG5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgbGV0IGF0dHIgPSBhdHRyc1tuYW1lXTtcbiAgICAgICAgaWYgKGF0dHIudmFsaWRhdGUpXG4gICAgICAgICAgICBhdHRyLnZhbGlkYXRlKHZhbHVlc1tuYW1lXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaW5pdEF0dHJzKHR5cGVOYW1lLCBhdHRycykge1xuICAgIGxldCByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGlmIChhdHRycylcbiAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBhdHRycylcbiAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IG5ldyBBdHRyaWJ1dGUodHlwZU5hbWUsIG5hbWUsIGF0dHJzW25hbWVdKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG5Ob2RlIHR5cGVzIGFyZSBvYmplY3RzIGFsbG9jYXRlZCBvbmNlIHBlciBgU2NoZW1hYCBhbmQgdXNlZCB0b1xuW3RhZ10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGUudHlwZSkgYE5vZGVgIGluc3RhbmNlcy4gVGhleSBjb250YWluIGluZm9ybWF0aW9uXG5hYm91dCB0aGUgbm9kZSB0eXBlLCBzdWNoIGFzIGl0cyBuYW1lIGFuZCB3aGF0IGtpbmQgb2Ygbm9kZSBpdFxucmVwcmVzZW50cy5cbiovXG5jbGFzcyBOb2RlVHlwZSB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgbmFtZSB0aGUgbm9kZSB0eXBlIGhhcyBpbiB0aGlzIHNjaGVtYS5cbiAgICAqL1xuICAgIG5hbWUsIFxuICAgIC8qKlxuICAgIEEgbGluayBiYWNrIHRvIHRoZSBgU2NoZW1hYCB0aGUgbm9kZSB0eXBlIGJlbG9uZ3MgdG8uXG4gICAgKi9cbiAgICBzY2hlbWEsIFxuICAgIC8qKlxuICAgIFRoZSBzcGVjIHRoYXQgdGhpcyB0eXBlIGlzIGJhc2VkIG9uXG4gICAgKi9cbiAgICBzcGVjKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICB0aGlzLnNwZWMgPSBzcGVjO1xuICAgICAgICAvKipcbiAgICAgICAgVGhlIHNldCBvZiBtYXJrcyBhbGxvd2VkIGluIHRoaXMgbm9kZS4gYG51bGxgIG1lYW5zIGFsbCBtYXJrc1xuICAgICAgICBhcmUgYWxsb3dlZC5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXJrU2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5ncm91cHMgPSBzcGVjLmdyb3VwID8gc3BlYy5ncm91cC5zcGxpdChcIiBcIikgOiBbXTtcbiAgICAgICAgdGhpcy5hdHRycyA9IGluaXRBdHRycyhuYW1lLCBzcGVjLmF0dHJzKTtcbiAgICAgICAgdGhpcy5kZWZhdWx0QXR0cnMgPSBkZWZhdWx0QXR0cnModGhpcy5hdHRycyk7XG4gICAgICAgIHRoaXMuY29udGVudE1hdGNoID0gbnVsbDtcbiAgICAgICAgdGhpcy5pbmxpbmVDb250ZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc0Jsb2NrID0gIShzcGVjLmlubGluZSB8fCBuYW1lID09IFwidGV4dFwiKTtcbiAgICAgICAgdGhpcy5pc1RleHQgPSBuYW1lID09IFwidGV4dFwiO1xuICAgIH1cbiAgICAvKipcbiAgICBUcnVlIGlmIHRoaXMgaXMgYW4gaW5saW5lIHR5cGUuXG4gICAgKi9cbiAgICBnZXQgaXNJbmxpbmUoKSB7IHJldHVybiAhdGhpcy5pc0Jsb2NrOyB9XG4gICAgLyoqXG4gICAgVHJ1ZSBpZiB0aGlzIGlzIGEgdGV4dGJsb2NrIHR5cGUsIGEgYmxvY2sgdGhhdCBjb250YWlucyBpbmxpbmVcbiAgICBjb250ZW50LlxuICAgICovXG4gICAgZ2V0IGlzVGV4dGJsb2NrKCkgeyByZXR1cm4gdGhpcy5pc0Jsb2NrICYmIHRoaXMuaW5saW5lQ29udGVudDsgfVxuICAgIC8qKlxuICAgIFRydWUgZm9yIG5vZGUgdHlwZXMgdGhhdCBhbGxvdyBubyBjb250ZW50LlxuICAgICovXG4gICAgZ2V0IGlzTGVhZigpIHsgcmV0dXJuIHRoaXMuY29udGVudE1hdGNoID09IENvbnRlbnRNYXRjaC5lbXB0eTsgfVxuICAgIC8qKlxuICAgIFRydWUgd2hlbiB0aGlzIG5vZGUgaXMgYW4gYXRvbSwgaS5lLiB3aGVuIGl0IGRvZXMgbm90IGhhdmVcbiAgICBkaXJlY3RseSBlZGl0YWJsZSBjb250ZW50LlxuICAgICovXG4gICAgZ2V0IGlzQXRvbSgpIHsgcmV0dXJuIHRoaXMuaXNMZWFmIHx8ICEhdGhpcy5zcGVjLmF0b207IH1cbiAgICAvKipcbiAgICBSZXR1cm4gdHJ1ZSB3aGVuIHRoaXMgbm9kZSB0eXBlIGlzIHBhcnQgb2YgdGhlIGdpdmVuXG4gICAgW2dyb3VwXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZVNwZWMuZ3JvdXApLlxuICAgICovXG4gICAgaXNJbkdyb3VwKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdyb3Vwcy5pbmRleE9mKGdyb3VwKSA+IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgbm9kZSB0eXBlJ3MgW3doaXRlc3BhY2VdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYy53aGl0ZXNwYWNlKSBvcHRpb24uXG4gICAgKi9cbiAgICBnZXQgd2hpdGVzcGFjZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BlYy53aGl0ZXNwYWNlIHx8ICh0aGlzLnNwZWMuY29kZSA/IFwicHJlXCIgOiBcIm5vcm1hbFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGVsbHMgeW91IHdoZXRoZXIgdGhpcyBub2RlIHR5cGUgaGFzIGFueSByZXF1aXJlZCBhdHRyaWJ1dGVzLlxuICAgICovXG4gICAgaGFzUmVxdWlyZWRBdHRycygpIHtcbiAgICAgICAgZm9yIChsZXQgbiBpbiB0aGlzLmF0dHJzKVxuICAgICAgICAgICAgaWYgKHRoaXMuYXR0cnNbbl0uaXNSZXF1aXJlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIG5vZGUgYWxsb3dzIHNvbWUgb2YgdGhlIHNhbWUgY29udGVudCBhc1xuICAgIHRoZSBnaXZlbiBub2RlIHR5cGUuXG4gICAgKi9cbiAgICBjb21wYXRpYmxlQ29udGVudChvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcyA9PSBvdGhlciB8fCB0aGlzLmNvbnRlbnRNYXRjaC5jb21wYXRpYmxlKG90aGVyLmNvbnRlbnRNYXRjaCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29tcHV0ZUF0dHJzKGF0dHJzKSB7XG4gICAgICAgIGlmICghYXR0cnMgJiYgdGhpcy5kZWZhdWx0QXR0cnMpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0QXR0cnM7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBjb21wdXRlQXR0cnModGhpcy5hdHRycywgYXR0cnMpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBgTm9kZWAgb2YgdGhpcyB0eXBlLiBUaGUgZ2l2ZW4gYXR0cmlidXRlcyBhcmVcbiAgICBjaGVja2VkIGFuZCBkZWZhdWx0ZWQgKHlvdSBjYW4gcGFzcyBgbnVsbGAgdG8gdXNlIHRoZSB0eXBlJ3NcbiAgICBkZWZhdWx0cyBlbnRpcmVseSwgaWYgbm8gcmVxdWlyZWQgYXR0cmlidXRlcyBleGlzdCkuIGBjb250ZW50YFxuICAgIG1heSBiZSBhIGBGcmFnbWVudGAsIGEgbm9kZSwgYW4gYXJyYXkgb2Ygbm9kZXMsIG9yXG4gICAgYG51bGxgLiBTaW1pbGFybHkgYG1hcmtzYCBtYXkgYmUgYG51bGxgIHRvIGRlZmF1bHQgdG8gdGhlIGVtcHR5XG4gICAgc2V0IG9mIG1hcmtzLlxuICAgICovXG4gICAgY3JlYXRlKGF0dHJzID0gbnVsbCwgY29udGVudCwgbWFya3MpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNUZXh0KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm9kZVR5cGUuY3JlYXRlIGNhbid0IGNvbnN0cnVjdCB0ZXh0IG5vZGVzXCIpO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUodGhpcywgdGhpcy5jb21wdXRlQXR0cnMoYXR0cnMpLCBGcmFnbWVudC5mcm9tKGNvbnRlbnQpLCBNYXJrLnNldEZyb20obWFya3MpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgTGlrZSBbYGNyZWF0ZWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlVHlwZS5jcmVhdGUpLCBidXQgY2hlY2sgdGhlIGdpdmVuIGNvbnRlbnRcbiAgICBhZ2FpbnN0IHRoZSBub2RlIHR5cGUncyBjb250ZW50IHJlc3RyaWN0aW9ucywgYW5kIHRocm93IGFuIGVycm9yXG4gICAgaWYgaXQgZG9lc24ndCBtYXRjaC5cbiAgICAqL1xuICAgIGNyZWF0ZUNoZWNrZWQoYXR0cnMgPSBudWxsLCBjb250ZW50LCBtYXJrcykge1xuICAgICAgICBjb250ZW50ID0gRnJhZ21lbnQuZnJvbShjb250ZW50KTtcbiAgICAgICAgdGhpcy5jaGVja0NvbnRlbnQoY29udGVudCk7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZSh0aGlzLCB0aGlzLmNvbXB1dGVBdHRycyhhdHRycyksIGNvbnRlbnQsIE1hcmsuc2V0RnJvbShtYXJrcykpO1xuICAgIH1cbiAgICAvKipcbiAgICBMaWtlIFtgY3JlYXRlYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVUeXBlLmNyZWF0ZSksIGJ1dCBzZWUgaWYgaXQgaXNcbiAgICBuZWNlc3NhcnkgdG8gYWRkIG5vZGVzIHRvIHRoZSBzdGFydCBvciBlbmQgb2YgdGhlIGdpdmVuIGZyYWdtZW50XG4gICAgdG8gbWFrZSBpdCBmaXQgdGhlIG5vZGUuIElmIG5vIGZpdHRpbmcgd3JhcHBpbmcgY2FuIGJlIGZvdW5kLFxuICAgIHJldHVybiBudWxsLiBOb3RlIHRoYXQsIGR1ZSB0byB0aGUgZmFjdCB0aGF0IHJlcXVpcmVkIG5vZGVzIGNhblxuICAgIGFsd2F5cyBiZSBjcmVhdGVkLCB0aGlzIHdpbGwgYWx3YXlzIHN1Y2NlZWQgaWYgeW91IHBhc3MgbnVsbCBvclxuICAgIGBGcmFnbWVudC5lbXB0eWAgYXMgY29udGVudC5cbiAgICAqL1xuICAgIGNyZWF0ZUFuZEZpbGwoYXR0cnMgPSBudWxsLCBjb250ZW50LCBtYXJrcykge1xuICAgICAgICBhdHRycyA9IHRoaXMuY29tcHV0ZUF0dHJzKGF0dHJzKTtcbiAgICAgICAgY29udGVudCA9IEZyYWdtZW50LmZyb20oY29udGVudCk7XG4gICAgICAgIGlmIChjb250ZW50LnNpemUpIHtcbiAgICAgICAgICAgIGxldCBiZWZvcmUgPSB0aGlzLmNvbnRlbnRNYXRjaC5maWxsQmVmb3JlKGNvbnRlbnQpO1xuICAgICAgICAgICAgaWYgKCFiZWZvcmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBjb250ZW50ID0gYmVmb3JlLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWF0Y2hlZCA9IHRoaXMuY29udGVudE1hdGNoLm1hdGNoRnJhZ21lbnQoY29udGVudCk7XG4gICAgICAgIGxldCBhZnRlciA9IG1hdGNoZWQgJiYgbWF0Y2hlZC5maWxsQmVmb3JlKEZyYWdtZW50LmVtcHR5LCB0cnVlKTtcbiAgICAgICAgaWYgKCFhZnRlcilcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGUodGhpcywgYXR0cnMsIGNvbnRlbnQuYXBwZW5kKGFmdGVyKSwgTWFyay5zZXRGcm9tKG1hcmtzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gZnJhZ21lbnQgaXMgdmFsaWQgY29udGVudCBmb3IgdGhpcyBub2RlXG4gICAgdHlwZS5cbiAgICAqL1xuICAgIHZhbGlkQ29udGVudChjb250ZW50KSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLmNvbnRlbnRNYXRjaC5tYXRjaEZyYWdtZW50KGNvbnRlbnQpO1xuICAgICAgICBpZiAoIXJlc3VsdCB8fCAhcmVzdWx0LnZhbGlkRW5kKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnQuY2hpbGRDb3VudDsgaSsrKVxuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbG93c01hcmtzKGNvbnRlbnQuY2hpbGQoaSkubWFya3MpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgIFRocm93cyBhIFJhbmdlRXJyb3IgaWYgdGhlIGdpdmVuIGZyYWdtZW50IGlzIG5vdCB2YWxpZCBjb250ZW50IGZvciB0aGlzXG4gICAgbm9kZSB0eXBlLlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY2hlY2tDb250ZW50KGNvbnRlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZhbGlkQ29udGVudChjb250ZW50KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBJbnZhbGlkIGNvbnRlbnQgZm9yIG5vZGUgJHt0aGlzLm5hbWV9OiAke2NvbnRlbnQudG9TdHJpbmcoKS5zbGljZSgwLCA1MCl9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY2hlY2tBdHRycyhhdHRycykge1xuICAgICAgICBjaGVja0F0dHJzKHRoaXMuYXR0cnMsIGF0dHJzLCBcIm5vZGVcIiwgdGhpcy5uYW1lKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ2hlY2sgd2hldGhlciB0aGUgZ2l2ZW4gbWFyayB0eXBlIGlzIGFsbG93ZWQgaW4gdGhpcyBub2RlLlxuICAgICovXG4gICAgYWxsb3dzTWFya1R5cGUobWFya1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFya1NldCA9PSBudWxsIHx8IHRoaXMubWFya1NldC5pbmRleE9mKG1hcmtUeXBlKSA+IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICBUZXN0IHdoZXRoZXIgdGhlIGdpdmVuIHNldCBvZiBtYXJrcyBhcmUgYWxsb3dlZCBpbiB0aGlzIG5vZGUuXG4gICAgKi9cbiAgICBhbGxvd3NNYXJrcyhtYXJrcykge1xuICAgICAgICBpZiAodGhpcy5tYXJrU2V0ID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXJrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmICghdGhpcy5hbGxvd3NNYXJrVHlwZShtYXJrc1tpXS50eXBlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICBSZW1vdmVzIHRoZSBtYXJrcyB0aGF0IGFyZSBub3QgYWxsb3dlZCBpbiB0aGlzIG5vZGUgZnJvbSB0aGUgZ2l2ZW4gc2V0LlxuICAgICovXG4gICAgYWxsb3dlZE1hcmtzKG1hcmtzKSB7XG4gICAgICAgIGlmICh0aGlzLm1hcmtTZXQgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBtYXJrcztcbiAgICAgICAgbGV0IGNvcHk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFya3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hbGxvd3NNYXJrVHlwZShtYXJrc1tpXS50eXBlKSkge1xuICAgICAgICAgICAgICAgIGlmICghY29weSlcbiAgICAgICAgICAgICAgICAgICAgY29weSA9IG1hcmtzLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29weSkge1xuICAgICAgICAgICAgICAgIGNvcHkucHVzaChtYXJrc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFjb3B5ID8gbWFya3MgOiBjb3B5Lmxlbmd0aCA/IGNvcHkgOiBNYXJrLm5vbmU7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhdGljIGNvbXBpbGUobm9kZXMsIHNjaGVtYSkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgbm9kZXMuZm9yRWFjaCgobmFtZSwgc3BlYykgPT4gcmVzdWx0W25hbWVdID0gbmV3IE5vZGVUeXBlKG5hbWUsIHNjaGVtYSwgc3BlYykpO1xuICAgICAgICBsZXQgdG9wVHlwZSA9IHNjaGVtYS5zcGVjLnRvcE5vZGUgfHwgXCJkb2NcIjtcbiAgICAgICAgaWYgKCFyZXN1bHRbdG9wVHlwZV0pXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlNjaGVtYSBpcyBtaXNzaW5nIGl0cyB0b3Agbm9kZSB0eXBlICgnXCIgKyB0b3BUeXBlICsgXCInKVwiKTtcbiAgICAgICAgaWYgKCFyZXN1bHQudGV4dClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiRXZlcnkgc2NoZW1hIG5lZWRzIGEgJ3RleHQnIHR5cGVcIik7XG4gICAgICAgIGZvciAobGV0IF8gaW4gcmVzdWx0LnRleHQuYXR0cnMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSB0ZXh0IG5vZGUgdHlwZSBzaG91bGQgbm90IGhhdmUgYXR0cmlidXRlc1wiKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVR5cGUodHlwZU5hbWUsIGF0dHJOYW1lLCB0eXBlKSB7XG4gICAgbGV0IHR5cGVzID0gdHlwZS5zcGxpdChcInxcIik7XG4gICAgcmV0dXJuICh2YWx1ZSkgPT4ge1xuICAgICAgICBsZXQgbmFtZSA9IHZhbHVlID09PSBudWxsID8gXCJudWxsXCIgOiB0eXBlb2YgdmFsdWU7XG4gICAgICAgIGlmICh0eXBlcy5pbmRleE9mKG5hbWUpIDwgMClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBFeHBlY3RlZCB2YWx1ZSBvZiB0eXBlICR7dHlwZXN9IGZvciBhdHRyaWJ1dGUgJHthdHRyTmFtZX0gb24gdHlwZSAke3R5cGVOYW1lfSwgZ290ICR7bmFtZX1gKTtcbiAgICB9O1xufVxuLy8gQXR0cmlidXRlIGRlc2NyaXB0b3JzXG5jbGFzcyBBdHRyaWJ1dGUge1xuICAgIGNvbnN0cnVjdG9yKHR5cGVOYW1lLCBhdHRyTmFtZSwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmhhc0RlZmF1bHQgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgXCJkZWZhdWx0XCIpO1xuICAgICAgICB0aGlzLmRlZmF1bHQgPSBvcHRpb25zLmRlZmF1bHQ7XG4gICAgICAgIHRoaXMudmFsaWRhdGUgPSB0eXBlb2Ygb3B0aW9ucy52YWxpZGF0ZSA9PSBcInN0cmluZ1wiID8gdmFsaWRhdGVUeXBlKHR5cGVOYW1lLCBhdHRyTmFtZSwgb3B0aW9ucy52YWxpZGF0ZSkgOiBvcHRpb25zLnZhbGlkYXRlO1xuICAgIH1cbiAgICBnZXQgaXNSZXF1aXJlZCgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmhhc0RlZmF1bHQ7XG4gICAgfVxufVxuLy8gTWFya3Ncbi8qKlxuTGlrZSBub2RlcywgbWFya3MgKHdoaWNoIGFyZSBhc3NvY2lhdGVkIHdpdGggbm9kZXMgdG8gc2lnbmlmeVxudGhpbmdzIGxpa2UgZW1waGFzaXMgb3IgYmVpbmcgcGFydCBvZiBhIGxpbmspIGFyZVxuW3RhZ2dlZF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk1hcmsudHlwZSkgd2l0aCB0eXBlIG9iamVjdHMsIHdoaWNoIGFyZVxuaW5zdGFudGlhdGVkIG9uY2UgcGVyIGBTY2hlbWFgLlxuKi9cbmNsYXNzIE1hcmtUeXBlIHtcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBuYW1lIG9mIHRoZSBtYXJrIHR5cGUuXG4gICAgKi9cbiAgICBuYW1lLCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHJhbmssIFxuICAgIC8qKlxuICAgIFRoZSBzY2hlbWEgdGhhdCB0aGlzIG1hcmsgdHlwZSBpbnN0YW5jZSBpcyBwYXJ0IG9mLlxuICAgICovXG4gICAgc2NoZW1hLCBcbiAgICAvKipcbiAgICBUaGUgc3BlYyBvbiB3aGljaCB0aGUgdHlwZSBpcyBiYXNlZC5cbiAgICAqL1xuICAgIHNwZWMpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5yYW5rID0gcmFuaztcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgIHRoaXMuc3BlYyA9IHNwZWM7XG4gICAgICAgIHRoaXMuYXR0cnMgPSBpbml0QXR0cnMobmFtZSwgc3BlYy5hdHRycyk7XG4gICAgICAgIHRoaXMuZXhjbHVkZWQgPSBudWxsO1xuICAgICAgICBsZXQgZGVmYXVsdHMgPSBkZWZhdWx0QXR0cnModGhpcy5hdHRycyk7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBkZWZhdWx0cyA/IG5ldyBNYXJrKHRoaXMsIGRlZmF1bHRzKSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIG1hcmsgb2YgdGhpcyB0eXBlLiBgYXR0cnNgIG1heSBiZSBgbnVsbGAgb3IgYW4gb2JqZWN0XG4gICAgY29udGFpbmluZyBvbmx5IHNvbWUgb2YgdGhlIG1hcmsncyBhdHRyaWJ1dGVzLiBUaGUgb3RoZXJzLCBpZlxuICAgIHRoZXkgaGF2ZSBkZWZhdWx0cywgd2lsbCBiZSBhZGRlZC5cbiAgICAqL1xuICAgIGNyZWF0ZShhdHRycyA9IG51bGwpIHtcbiAgICAgICAgaWYgKCFhdHRycyAmJiB0aGlzLmluc3RhbmNlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgICAgIHJldHVybiBuZXcgTWFyayh0aGlzLCBjb21wdXRlQXR0cnModGhpcy5hdHRycywgYXR0cnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgY29tcGlsZShtYXJrcywgc2NoZW1hKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpLCByYW5rID0gMDtcbiAgICAgICAgbWFya3MuZm9yRWFjaCgobmFtZSwgc3BlYykgPT4gcmVzdWx0W25hbWVdID0gbmV3IE1hcmtUeXBlKG5hbWUsIHJhbmsrKywgc2NoZW1hLCBzcGVjKSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgIFdoZW4gdGhlcmUgaXMgYSBtYXJrIG9mIHRoaXMgdHlwZSBpbiB0aGUgZ2l2ZW4gc2V0LCBhIG5ldyBzZXRcbiAgICB3aXRob3V0IGl0IGlzIHJldHVybmVkLiBPdGhlcndpc2UsIHRoZSBpbnB1dCBzZXQgaXMgcmV0dXJuZWQuXG4gICAgKi9cbiAgICByZW1vdmVGcm9tU2V0KHNldCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChzZXRbaV0udHlwZSA9PSB0aGlzKSB7XG4gICAgICAgICAgICAgICAgc2V0ID0gc2V0LnNsaWNlKDAsIGkpLmNvbmNhdChzZXQuc2xpY2UoaSArIDEpKTtcbiAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgIFRlc3RzIHdoZXRoZXIgdGhlcmUgaXMgYSBtYXJrIG9mIHRoaXMgdHlwZSBpbiB0aGUgZ2l2ZW4gc2V0LlxuICAgICovXG4gICAgaXNJblNldChzZXQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBpZiAoc2V0W2ldLnR5cGUgPT0gdGhpcylcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0W2ldO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNoZWNrQXR0cnMoYXR0cnMpIHtcbiAgICAgICAgY2hlY2tBdHRycyh0aGlzLmF0dHJzLCBhdHRycywgXCJtYXJrXCIsIHRoaXMubmFtZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIFF1ZXJpZXMgd2hldGhlciBhIGdpdmVuIG1hcmsgdHlwZSBpc1xuICAgIFtleGNsdWRlZF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk1hcmtTcGVjLmV4Y2x1ZGVzKSBieSB0aGlzIG9uZS5cbiAgICAqL1xuICAgIGV4Y2x1ZGVzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4Y2x1ZGVkLmluZGV4T2Yob3RoZXIpID4gLTE7XG4gICAgfVxufVxuLyoqXG5BIGRvY3VtZW50IHNjaGVtYS4gSG9sZHMgW25vZGVdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlVHlwZSkgYW5kIFttYXJrXG50eXBlXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTWFya1R5cGUpIG9iamVjdHMgZm9yIHRoZSBub2RlcyBhbmQgbWFya3MgdGhhdCBtYXlcbm9jY3VyIGluIGNvbmZvcm1pbmcgZG9jdW1lbnRzLCBhbmQgcHJvdmlkZXMgZnVuY3Rpb25hbGl0eSBmb3JcbmNyZWF0aW5nIGFuZCBkZXNlcmlhbGl6aW5nIHN1Y2ggZG9jdW1lbnRzLlxuXG5XaGVuIGdpdmVuLCB0aGUgdHlwZSBwYXJhbWV0ZXJzIHByb3ZpZGUgdGhlIG5hbWVzIG9mIHRoZSBub2RlcyBhbmRcbm1hcmtzIGluIHRoaXMgc2NoZW1hLlxuKi9cbmNsYXNzIFNjaGVtYSB7XG4gICAgLyoqXG4gICAgQ29uc3RydWN0IGEgc2NoZW1hIGZyb20gYSBzY2hlbWEgW3NwZWNpZmljYXRpb25dKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5TY2hlbWFTcGVjKS5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNwZWMpIHtcbiAgICAgICAgLyoqXG4gICAgICAgIFRoZSBbbGluZWJyZWFrXG4gICAgICAgIHJlcGxhY2VtZW50XShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZVNwZWMubGluZWJyZWFrUmVwbGFjZW1lbnQpIG5vZGUgZGVmaW5lZFxuICAgICAgICBpbiB0aGlzIHNjaGVtYSwgaWYgYW55LlxuICAgICAgICAqL1xuICAgICAgICB0aGlzLmxpbmVicmVha1JlcGxhY2VtZW50ID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgIEFuIG9iamVjdCBmb3Igc3RvcmluZyB3aGF0ZXZlciB2YWx1ZXMgbW9kdWxlcyBtYXkgd2FudCB0b1xuICAgICAgICBjb21wdXRlIGFuZCBjYWNoZSBwZXIgc2NoZW1hLiAoSWYgeW91IHdhbnQgdG8gc3RvcmUgc29tZXRoaW5nXG4gICAgICAgIGluIGl0LCB0cnkgdG8gdXNlIHByb3BlcnR5IG5hbWVzIHVubGlrZWx5IHRvIGNsYXNoLilcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jYWNoZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBsZXQgaW5zdGFuY2VTcGVjID0gdGhpcy5zcGVjID0ge307XG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gc3BlYylcbiAgICAgICAgICAgIGluc3RhbmNlU3BlY1twcm9wXSA9IHNwZWNbcHJvcF07XG4gICAgICAgIGluc3RhbmNlU3BlYy5ub2RlcyA9IE9yZGVyZWRNYXAuZnJvbShzcGVjLm5vZGVzKSxcbiAgICAgICAgICAgIGluc3RhbmNlU3BlYy5tYXJrcyA9IE9yZGVyZWRNYXAuZnJvbShzcGVjLm1hcmtzIHx8IHt9KSxcbiAgICAgICAgICAgIHRoaXMubm9kZXMgPSBOb2RlVHlwZS5jb21waWxlKHRoaXMuc3BlYy5ub2RlcywgdGhpcyk7XG4gICAgICAgIHRoaXMubWFya3MgPSBNYXJrVHlwZS5jb21waWxlKHRoaXMuc3BlYy5tYXJrcywgdGhpcyk7XG4gICAgICAgIGxldCBjb250ZW50RXhwckNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZm9yIChsZXQgcHJvcCBpbiB0aGlzLm5vZGVzKSB7XG4gICAgICAgICAgICBpZiAocHJvcCBpbiB0aGlzLm1hcmtzKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKHByb3AgKyBcIiBjYW4gbm90IGJlIGJvdGggYSBub2RlIGFuZCBhIG1hcmtcIik7XG4gICAgICAgICAgICBsZXQgdHlwZSA9IHRoaXMubm9kZXNbcHJvcF0sIGNvbnRlbnRFeHByID0gdHlwZS5zcGVjLmNvbnRlbnQgfHwgXCJcIiwgbWFya0V4cHIgPSB0eXBlLnNwZWMubWFya3M7XG4gICAgICAgICAgICB0eXBlLmNvbnRlbnRNYXRjaCA9IGNvbnRlbnRFeHByQ2FjaGVbY29udGVudEV4cHJdIHx8XG4gICAgICAgICAgICAgICAgKGNvbnRlbnRFeHByQ2FjaGVbY29udGVudEV4cHJdID0gQ29udGVudE1hdGNoLnBhcnNlKGNvbnRlbnRFeHByLCB0aGlzLm5vZGVzKSk7XG4gICAgICAgICAgICB0eXBlLmlubGluZUNvbnRlbnQgPSB0eXBlLmNvbnRlbnRNYXRjaC5pbmxpbmVDb250ZW50O1xuICAgICAgICAgICAgaWYgKHR5cGUuc3BlYy5saW5lYnJlYWtSZXBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmVicmVha1JlcGxhY2VtZW50KVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk11bHRpcGxlIGxpbmVicmVhayBub2RlcyBkZWZpbmVkXCIpO1xuICAgICAgICAgICAgICAgIGlmICghdHlwZS5pc0lubGluZSB8fCAhdHlwZS5pc0xlYWYpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiTGluZWJyZWFrIHJlcGxhY2VtZW50IG5vZGVzIG11c3QgYmUgaW5saW5lIGxlYWYgbm9kZXNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5saW5lYnJlYWtSZXBsYWNlbWVudCA9IHR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0eXBlLm1hcmtTZXQgPSBtYXJrRXhwciA9PSBcIl9cIiA/IG51bGwgOlxuICAgICAgICAgICAgICAgIG1hcmtFeHByID8gZ2F0aGVyTWFya3ModGhpcywgbWFya0V4cHIuc3BsaXQoXCIgXCIpKSA6XG4gICAgICAgICAgICAgICAgICAgIG1hcmtFeHByID09IFwiXCIgfHwgIXR5cGUuaW5saW5lQ29udGVudCA/IFtdIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBwcm9wIGluIHRoaXMubWFya3MpIHtcbiAgICAgICAgICAgIGxldCB0eXBlID0gdGhpcy5tYXJrc1twcm9wXSwgZXhjbCA9IHR5cGUuc3BlYy5leGNsdWRlcztcbiAgICAgICAgICAgIHR5cGUuZXhjbHVkZWQgPSBleGNsID09IG51bGwgPyBbdHlwZV0gOiBleGNsID09IFwiXCIgPyBbXSA6IGdhdGhlck1hcmtzKHRoaXMsIGV4Y2wuc3BsaXQoXCIgXCIpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vZGVGcm9tSlNPTiA9IHRoaXMubm9kZUZyb21KU09OLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMubWFya0Zyb21KU09OID0gdGhpcy5tYXJrRnJvbUpTT04uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy50b3BOb2RlVHlwZSA9IHRoaXMubm9kZXNbdGhpcy5zcGVjLnRvcE5vZGUgfHwgXCJkb2NcIl07XG4gICAgICAgIHRoaXMuY2FjaGVkLndyYXBwaW5ncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIG5vZGUgaW4gdGhpcyBzY2hlbWEuIFRoZSBgdHlwZWAgbWF5IGJlIGEgc3RyaW5nIG9yIGFcbiAgICBgTm9kZVR5cGVgIGluc3RhbmNlLiBBdHRyaWJ1dGVzIHdpbGwgYmUgZXh0ZW5kZWQgd2l0aCBkZWZhdWx0cyxcbiAgICBgY29udGVudGAgbWF5IGJlIGEgYEZyYWdtZW50YCwgYG51bGxgLCBhIGBOb2RlYCwgb3IgYW4gYXJyYXkgb2ZcbiAgICBub2Rlcy5cbiAgICAqL1xuICAgIG5vZGUodHlwZSwgYXR0cnMgPSBudWxsLCBjb250ZW50LCBtYXJrcykge1xuICAgICAgICBpZiAodHlwZW9mIHR5cGUgPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIHR5cGUgPSB0aGlzLm5vZGVUeXBlKHR5cGUpO1xuICAgICAgICBlbHNlIGlmICghKHR5cGUgaW5zdGFuY2VvZiBOb2RlVHlwZSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgbm9kZSB0eXBlOiBcIiArIHR5cGUpO1xuICAgICAgICBlbHNlIGlmICh0eXBlLnNjaGVtYSAhPSB0aGlzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJOb2RlIHR5cGUgZnJvbSBkaWZmZXJlbnQgc2NoZW1hIHVzZWQgKFwiICsgdHlwZS5uYW1lICsgXCIpXCIpO1xuICAgICAgICByZXR1cm4gdHlwZS5jcmVhdGVDaGVja2VkKGF0dHJzLCBjb250ZW50LCBtYXJrcyk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIHRleHQgbm9kZSBpbiB0aGUgc2NoZW1hLiBFbXB0eSB0ZXh0IG5vZGVzIGFyZSBub3RcbiAgICBhbGxvd2VkLlxuICAgICovXG4gICAgdGV4dCh0ZXh0LCBtYXJrcykge1xuICAgICAgICBsZXQgdHlwZSA9IHRoaXMubm9kZXMudGV4dDtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0Tm9kZSh0eXBlLCB0eXBlLmRlZmF1bHRBdHRycywgdGV4dCwgTWFyay5zZXRGcm9tKG1hcmtzKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIG1hcmsgd2l0aCB0aGUgZ2l2ZW4gdHlwZSBhbmQgYXR0cmlidXRlcy5cbiAgICAqL1xuICAgIG1hcmsodHlwZSwgYXR0cnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB0eXBlID0gdGhpcy5tYXJrc1t0eXBlXTtcbiAgICAgICAgcmV0dXJuIHR5cGUuY3JlYXRlKGF0dHJzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRGVzZXJpYWxpemUgYSBub2RlIGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24uIFRoaXMgbWV0aG9kIGlzXG4gICAgYm91bmQuXG4gICAgKi9cbiAgICBub2RlRnJvbUpTT04oanNvbikge1xuICAgICAgICByZXR1cm4gTm9kZS5mcm9tSlNPTih0aGlzLCBqc29uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRGVzZXJpYWxpemUgYSBtYXJrIGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24uIFRoaXMgbWV0aG9kIGlzXG4gICAgYm91bmQuXG4gICAgKi9cbiAgICBtYXJrRnJvbUpTT04oanNvbikge1xuICAgICAgICByZXR1cm4gTWFyay5mcm9tSlNPTih0aGlzLCBqc29uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBub2RlVHlwZShuYW1lKSB7XG4gICAgICAgIGxldCBmb3VuZCA9IHRoaXMubm9kZXNbbmFtZV07XG4gICAgICAgIGlmICghZm91bmQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVua25vd24gbm9kZSB0eXBlOiBcIiArIG5hbWUpO1xuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2F0aGVyTWFya3Moc2NoZW1hLCBtYXJrcykge1xuICAgIGxldCBmb3VuZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFya3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG5hbWUgPSBtYXJrc1tpXSwgbWFyayA9IHNjaGVtYS5tYXJrc1tuYW1lXSwgb2sgPSBtYXJrO1xuICAgICAgICBpZiAobWFyaykge1xuICAgICAgICAgICAgZm91bmQucHVzaChtYXJrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAobGV0IHByb3AgaW4gc2NoZW1hLm1hcmtzKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hcmsgPSBzY2hlbWEubWFya3NbcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT0gXCJfXCIgfHwgKG1hcmsuc3BlYy5ncm91cCAmJiBtYXJrLnNwZWMuZ3JvdXAuc3BsaXQoXCIgXCIpLmluZGV4T2YobmFtZSkgPiAtMSkpXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kLnB1c2gob2sgPSBtYXJrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9rKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVW5rbm93biBtYXJrIHR5cGU6ICdcIiArIG1hcmtzW2ldICsgXCInXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZm91bmQ7XG59XG5cbmZ1bmN0aW9uIGlzVGFnUnVsZShydWxlKSB7IHJldHVybiBydWxlLnRhZyAhPSBudWxsOyB9XG5mdW5jdGlvbiBpc1N0eWxlUnVsZShydWxlKSB7IHJldHVybiBydWxlLnN0eWxlICE9IG51bGw7IH1cbi8qKlxuQSBET00gcGFyc2VyIHJlcHJlc2VudHMgYSBzdHJhdGVneSBmb3IgcGFyc2luZyBET00gY29udGVudCBpbnRvIGFcblByb3NlTWlycm9yIGRvY3VtZW50IGNvbmZvcm1pbmcgdG8gYSBnaXZlbiBzY2hlbWEuIEl0cyBiZWhhdmlvciBpc1xuZGVmaW5lZCBieSBhbiBhcnJheSBvZiBbcnVsZXNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5QYXJzZVJ1bGUpLlxuKi9cbmNsYXNzIERPTVBhcnNlciB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgcGFyc2VyIHRoYXQgdGFyZ2V0cyB0aGUgZ2l2ZW4gc2NoZW1hLCB1c2luZyB0aGUgZ2l2ZW5cbiAgICBwYXJzaW5nIHJ1bGVzLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHNjaGVtYSBpbnRvIHdoaWNoIHRoZSBwYXJzZXIgcGFyc2VzLlxuICAgICovXG4gICAgc2NoZW1hLCBcbiAgICAvKipcbiAgICBUaGUgc2V0IG9mIFtwYXJzZSBydWxlc10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLlBhcnNlUnVsZSkgdGhhdCB0aGUgcGFyc2VyXG4gICAgdXNlcywgaW4gb3JkZXIgb2YgcHJlY2VkZW5jZS5cbiAgICAqL1xuICAgIHJ1bGVzKSB7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy50YWdzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdHlsZXMgPSBbXTtcbiAgICAgICAgbGV0IG1hdGNoZWRTdHlsZXMgPSB0aGlzLm1hdGNoZWRTdHlsZXMgPSBbXTtcbiAgICAgICAgcnVsZXMuZm9yRWFjaChydWxlID0+IHtcbiAgICAgICAgICAgIGlmIChpc1RhZ1J1bGUocnVsZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ3MucHVzaChydWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzU3R5bGVSdWxlKHJ1bGUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHByb3AgPSAvW149XSovLmV4ZWMocnVsZS5zdHlsZSlbMF07XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZWRTdHlsZXMuaW5kZXhPZihwcm9wKSA8IDApXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZWRTdHlsZXMucHVzaChwcm9wKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlcy5wdXNoKHJ1bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gT25seSBub3JtYWxpemUgbGlzdCBlbGVtZW50cyB3aGVuIGxpc3RzIGluIHRoZSBzY2hlbWEgY2FuJ3QgZGlyZWN0bHkgY29udGFpbiB0aGVtc2VsdmVzXG4gICAgICAgIHRoaXMubm9ybWFsaXplTGlzdHMgPSAhdGhpcy50YWdzLnNvbWUociA9PiB7XG4gICAgICAgICAgICBpZiAoIS9eKHVsfG9sKVxcYi8udGVzdChyLnRhZykgfHwgIXIubm9kZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IHNjaGVtYS5ub2Rlc1tyLm5vZGVdO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuY29udGVudE1hdGNoLm1hdGNoVHlwZShub2RlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgIFBhcnNlIGEgZG9jdW1lbnQgZnJvbSB0aGUgY29udGVudCBvZiBhIERPTSBub2RlLlxuICAgICovXG4gICAgcGFyc2UoZG9tLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgbGV0IGNvbnRleHQgPSBuZXcgUGFyc2VDb250ZXh0KHRoaXMsIG9wdGlvbnMsIGZhbHNlKTtcbiAgICAgICAgY29udGV4dC5hZGRBbGwoZG9tLCBNYXJrLm5vbmUsIG9wdGlvbnMuZnJvbSwgb3B0aW9ucy50byk7XG4gICAgICAgIHJldHVybiBjb250ZXh0LmZpbmlzaCgpO1xuICAgIH1cbiAgICAvKipcbiAgICBQYXJzZXMgdGhlIGNvbnRlbnQgb2YgdGhlIGdpdmVuIERPTSBub2RlLCBsaWtlXG4gICAgW2BwYXJzZWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5ET01QYXJzZXIucGFyc2UpLCBhbmQgdGFrZXMgdGhlIHNhbWUgc2V0IG9mXG4gICAgb3B0aW9ucy4gQnV0IHVubGlrZSB0aGF0IG1ldGhvZCwgd2hpY2ggcHJvZHVjZXMgYSB3aG9sZSBub2RlLFxuICAgIHRoaXMgb25lIHJldHVybnMgYSBzbGljZSB0aGF0IGlzIG9wZW4gYXQgdGhlIHNpZGVzLCBtZWFuaW5nIHRoYXRcbiAgICB0aGUgc2NoZW1hIGNvbnN0cmFpbnRzIGFyZW4ndCBhcHBsaWVkIHRvIHRoZSBzdGFydCBvZiBub2RlcyB0b1xuICAgIHRoZSBsZWZ0IG9mIHRoZSBpbnB1dCBhbmQgdGhlIGVuZCBvZiBub2RlcyBhdCB0aGUgZW5kLlxuICAgICovXG4gICAgcGFyc2VTbGljZShkb20sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBsZXQgY29udGV4dCA9IG5ldyBQYXJzZUNvbnRleHQodGhpcywgb3B0aW9ucywgdHJ1ZSk7XG4gICAgICAgIGNvbnRleHQuYWRkQWxsKGRvbSwgTWFyay5ub25lLCBvcHRpb25zLmZyb20sIG9wdGlvbnMudG8pO1xuICAgICAgICByZXR1cm4gU2xpY2UubWF4T3Blbihjb250ZXh0LmZpbmlzaCgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBtYXRjaFRhZyhkb20sIGNvbnRleHQsIGFmdGVyKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBhZnRlciA/IHRoaXMudGFncy5pbmRleE9mKGFmdGVyKSArIDEgOiAwOyBpIDwgdGhpcy50YWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcnVsZSA9IHRoaXMudGFnc1tpXTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVzKGRvbSwgcnVsZS50YWcpICYmXG4gICAgICAgICAgICAgICAgKHJ1bGUubmFtZXNwYWNlID09PSB1bmRlZmluZWQgfHwgZG9tLm5hbWVzcGFjZVVSSSA9PSBydWxlLm5hbWVzcGFjZSkgJiZcbiAgICAgICAgICAgICAgICAoIXJ1bGUuY29udGV4dCB8fCBjb250ZXh0Lm1hdGNoZXNDb250ZXh0KHJ1bGUuY29udGV4dCkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJ1bGUuZ2V0QXR0cnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHJ1bGUuZ2V0QXR0cnMoZG9tKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5hdHRycyA9IHJlc3VsdCB8fCB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBydWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgbWF0Y2hTdHlsZShwcm9wLCB2YWx1ZSwgY29udGV4dCwgYWZ0ZXIpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFmdGVyID8gdGhpcy5zdHlsZXMuaW5kZXhPZihhZnRlcikgKyAxIDogMDsgaSA8IHRoaXMuc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcnVsZSA9IHRoaXMuc3R5bGVzW2ldLCBzdHlsZSA9IHJ1bGUuc3R5bGU7XG4gICAgICAgICAgICBpZiAoc3R5bGUuaW5kZXhPZihwcm9wKSAhPSAwIHx8XG4gICAgICAgICAgICAgICAgcnVsZS5jb250ZXh0ICYmICFjb250ZXh0Lm1hdGNoZXNDb250ZXh0KHJ1bGUuY29udGV4dCkgfHxcbiAgICAgICAgICAgICAgICAvLyBUZXN0IHRoYXQgdGhlIHN0eWxlIHN0cmluZyBlaXRoZXIgcHJlY2lzZWx5IG1hdGNoZXMgdGhlIHByb3AsXG4gICAgICAgICAgICAgICAgLy8gb3IgaGFzIGFuICc9JyBzaWduIGFmdGVyIHRoZSBwcm9wLCBmb2xsb3dlZCBieSB0aGUgZ2l2ZW5cbiAgICAgICAgICAgICAgICAvLyB2YWx1ZS5cbiAgICAgICAgICAgICAgICBzdHlsZS5sZW5ndGggPiBwcm9wLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAoc3R5bGUuY2hhckNvZGVBdChwcm9wLmxlbmd0aCkgIT0gNjEgfHwgc3R5bGUuc2xpY2UocHJvcC5sZW5ndGggKyAxKSAhPSB2YWx1ZSkpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAocnVsZS5nZXRBdHRycykge1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBydWxlLmdldEF0dHJzKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgcnVsZS5hdHRycyA9IHJlc3VsdCB8fCB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHN0YXRpYyBzY2hlbWFSdWxlcyhzY2hlbWEpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgICAgICAgICAgbGV0IHByaW9yaXR5ID0gcnVsZS5wcmlvcml0eSA9PSBudWxsID8gNTAgOiBydWxlLnByaW9yaXR5LCBpID0gMDtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSByZXN1bHRbaV0sIG5leHRQcmlvcml0eSA9IG5leHQucHJpb3JpdHkgPT0gbnVsbCA/IDUwIDogbmV4dC5wcmlvcml0eTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dFByaW9yaXR5IDwgcHJpb3JpdHkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnNwbGljZShpLCAwLCBydWxlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBuYW1lIGluIHNjaGVtYS5tYXJrcykge1xuICAgICAgICAgICAgbGV0IHJ1bGVzID0gc2NoZW1hLm1hcmtzW25hbWVdLnNwZWMucGFyc2VET007XG4gICAgICAgICAgICBpZiAocnVsZXMpXG4gICAgICAgICAgICAgICAgcnVsZXMuZm9yRWFjaChydWxlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0KHJ1bGUgPSBjb3B5KHJ1bGUpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEocnVsZS5tYXJrIHx8IHJ1bGUuaWdub3JlIHx8IHJ1bGUuY2xlYXJNYXJrKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUubWFyayA9IG5hbWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBzY2hlbWEubm9kZXMpIHtcbiAgICAgICAgICAgIGxldCBydWxlcyA9IHNjaGVtYS5ub2Rlc1tuYW1lXS5zcGVjLnBhcnNlRE9NO1xuICAgICAgICAgICAgaWYgKHJ1bGVzKVxuICAgICAgICAgICAgICAgIHJ1bGVzLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydChydWxlID0gY29weShydWxlKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHJ1bGUubm9kZSB8fCBydWxlLmlnbm9yZSB8fCBydWxlLm1hcmspKVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5ub2RlID0gbmFtZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICBDb25zdHJ1Y3QgYSBET00gcGFyc2VyIHVzaW5nIHRoZSBwYXJzaW5nIHJ1bGVzIGxpc3RlZCBpbiBhXG4gICAgc2NoZW1hJ3MgW25vZGUgc3BlY3NdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYy5wYXJzZURPTSksIHJlb3JkZXJlZCBieVxuICAgIFtwcmlvcml0eV0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLlBhcnNlUnVsZS5wcmlvcml0eSkuXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbVNjaGVtYShzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYS5jYWNoZWQuZG9tUGFyc2VyIHx8XG4gICAgICAgICAgICAoc2NoZW1hLmNhY2hlZC5kb21QYXJzZXIgPSBuZXcgRE9NUGFyc2VyKHNjaGVtYSwgRE9NUGFyc2VyLnNjaGVtYVJ1bGVzKHNjaGVtYSkpKTtcbiAgICB9XG59XG5jb25zdCBibG9ja1RhZ3MgPSB7XG4gICAgYWRkcmVzczogdHJ1ZSwgYXJ0aWNsZTogdHJ1ZSwgYXNpZGU6IHRydWUsIGJsb2NrcXVvdGU6IHRydWUsIGNhbnZhczogdHJ1ZSxcbiAgICBkZDogdHJ1ZSwgZGl2OiB0cnVlLCBkbDogdHJ1ZSwgZmllbGRzZXQ6IHRydWUsIGZpZ2NhcHRpb246IHRydWUsIGZpZ3VyZTogdHJ1ZSxcbiAgICBmb290ZXI6IHRydWUsIGZvcm06IHRydWUsIGgxOiB0cnVlLCBoMjogdHJ1ZSwgaDM6IHRydWUsIGg0OiB0cnVlLCBoNTogdHJ1ZSxcbiAgICBoNjogdHJ1ZSwgaGVhZGVyOiB0cnVlLCBoZ3JvdXA6IHRydWUsIGhyOiB0cnVlLCBsaTogdHJ1ZSwgbm9zY3JpcHQ6IHRydWUsIG9sOiB0cnVlLFxuICAgIG91dHB1dDogdHJ1ZSwgcDogdHJ1ZSwgcHJlOiB0cnVlLCBzZWN0aW9uOiB0cnVlLCB0YWJsZTogdHJ1ZSwgdGZvb3Q6IHRydWUsIHVsOiB0cnVlXG59O1xuY29uc3QgaWdub3JlVGFncyA9IHtcbiAgICBoZWFkOiB0cnVlLCBub3NjcmlwdDogdHJ1ZSwgb2JqZWN0OiB0cnVlLCBzY3JpcHQ6IHRydWUsIHN0eWxlOiB0cnVlLCB0aXRsZTogdHJ1ZVxufTtcbmNvbnN0IGxpc3RUYWdzID0geyBvbDogdHJ1ZSwgdWw6IHRydWUgfTtcbi8vIFVzaW5nIGEgYml0ZmllbGQgZm9yIG5vZGUgY29udGV4dCBvcHRpb25zXG5jb25zdCBPUFRfUFJFU0VSVkVfV1MgPSAxLCBPUFRfUFJFU0VSVkVfV1NfRlVMTCA9IDIsIE9QVF9PUEVOX0xFRlQgPSA0O1xuZnVuY3Rpb24gd3NPcHRpb25zRm9yKHR5cGUsIHByZXNlcnZlV2hpdGVzcGFjZSwgYmFzZSkge1xuICAgIGlmIChwcmVzZXJ2ZVdoaXRlc3BhY2UgIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIChwcmVzZXJ2ZVdoaXRlc3BhY2UgPyBPUFRfUFJFU0VSVkVfV1MgOiAwKSB8XG4gICAgICAgICAgICAocHJlc2VydmVXaGl0ZXNwYWNlID09PSBcImZ1bGxcIiA/IE9QVF9QUkVTRVJWRV9XU19GVUxMIDogMCk7XG4gICAgcmV0dXJuIHR5cGUgJiYgdHlwZS53aGl0ZXNwYWNlID09IFwicHJlXCIgPyBPUFRfUFJFU0VSVkVfV1MgfCBPUFRfUFJFU0VSVkVfV1NfRlVMTCA6IGJhc2UgJiB+T1BUX09QRU5fTEVGVDtcbn1cbmNsYXNzIE5vZGVDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBhdHRycywgbWFya3MsIHNvbGlkLCBtYXRjaCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmF0dHJzID0gYXR0cnM7XG4gICAgICAgIHRoaXMubWFya3MgPSBtYXJrcztcbiAgICAgICAgdGhpcy5zb2xpZCA9IHNvbGlkO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSBbXTtcbiAgICAgICAgLy8gTWFya3MgYXBwbGllZCB0byB0aGUgbm9kZSdzIGNoaWxkcmVuXG4gICAgICAgIHRoaXMuYWN0aXZlTWFya3MgPSBNYXJrLm5vbmU7XG4gICAgICAgIHRoaXMubWF0Y2ggPSBtYXRjaCB8fCAob3B0aW9ucyAmIE9QVF9PUEVOX0xFRlQgPyBudWxsIDogdHlwZS5jb250ZW50TWF0Y2gpO1xuICAgIH1cbiAgICBmaW5kV3JhcHBpbmcobm9kZSkge1xuICAgICAgICBpZiAoIXRoaXMubWF0Y2gpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy50eXBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIGxldCBmaWxsID0gdGhpcy50eXBlLmNvbnRlbnRNYXRjaC5maWxsQmVmb3JlKEZyYWdtZW50LmZyb20obm9kZSkpO1xuICAgICAgICAgICAgaWYgKGZpbGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoID0gdGhpcy50eXBlLmNvbnRlbnRNYXRjaC5tYXRjaEZyYWdtZW50KGZpbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy50eXBlLmNvbnRlbnRNYXRjaCwgd3JhcDtcbiAgICAgICAgICAgICAgICBpZiAod3JhcCA9IHN0YXJ0LmZpbmRXcmFwcGluZyhub2RlLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2ggPSBzdGFydDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdyYXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2guZmluZFdyYXBwaW5nKG5vZGUudHlwZSk7XG4gICAgfVxuICAgIGZpbmlzaChvcGVuRW5kKSB7XG4gICAgICAgIGlmICghKHRoaXMub3B0aW9ucyAmIE9QVF9QUkVTRVJWRV9XUykpIHsgLy8gU3RyaXAgdHJhaWxpbmcgd2hpdGVzcGFjZVxuICAgICAgICAgICAgbGV0IGxhc3QgPSB0aGlzLmNvbnRlbnRbdGhpcy5jb250ZW50Lmxlbmd0aCAtIDFdLCBtO1xuICAgICAgICAgICAgaWYgKGxhc3QgJiYgbGFzdC5pc1RleHQgJiYgKG0gPSAvWyBcXHRcXHJcXG5cXHUwMDBjXSskLy5leGVjKGxhc3QudGV4dCkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRleHQgPSBsYXN0O1xuICAgICAgICAgICAgICAgIGlmIChsYXN0LnRleHQubGVuZ3RoID09IG1bMF0ubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQucG9wKCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRbdGhpcy5jb250ZW50Lmxlbmd0aCAtIDFdID0gdGV4dC53aXRoVGV4dCh0ZXh0LnRleHQuc2xpY2UoMCwgdGV4dC50ZXh0Lmxlbmd0aCAtIG1bMF0ubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbnRlbnQgPSBGcmFnbWVudC5mcm9tKHRoaXMuY29udGVudCk7XG4gICAgICAgIGlmICghb3BlbkVuZCAmJiB0aGlzLm1hdGNoKVxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuYXBwZW5kKHRoaXMubWF0Y2guZmlsbEJlZm9yZShGcmFnbWVudC5lbXB0eSwgdHJ1ZSkpO1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID8gdGhpcy50eXBlLmNyZWF0ZSh0aGlzLmF0dHJzLCBjb250ZW50LCB0aGlzLm1hcmtzKSA6IGNvbnRlbnQ7XG4gICAgfVxuICAgIGlubGluZUNvbnRleHQobm9kZSkge1xuICAgICAgICBpZiAodGhpcy50eXBlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5pbmxpbmVDb250ZW50O1xuICAgICAgICBpZiAodGhpcy5jb250ZW50Lmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRbMF0uaXNJbmxpbmU7XG4gICAgICAgIHJldHVybiBub2RlLnBhcmVudE5vZGUgJiYgIWJsb2NrVGFncy5oYXNPd25Qcm9wZXJ0eShub2RlLnBhcmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxufVxuY2xhc3MgUGFyc2VDb250ZXh0IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvLyBUaGUgcGFyc2VyIHdlIGFyZSB1c2luZy5cbiAgICBwYXJzZXIsIFxuICAgIC8vIFRoZSBvcHRpb25zIHBhc3NlZCB0byB0aGlzIHBhcnNlLlxuICAgIG9wdGlvbnMsIGlzT3Blbikge1xuICAgICAgICB0aGlzLnBhcnNlciA9IHBhcnNlcjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5pc09wZW4gPSBpc09wZW47XG4gICAgICAgIHRoaXMub3BlbiA9IDA7XG4gICAgICAgIHRoaXMubG9jYWxQcmVzZXJ2ZVdTID0gZmFsc2U7XG4gICAgICAgIGxldCB0b3BOb2RlID0gb3B0aW9ucy50b3BOb2RlLCB0b3BDb250ZXh0O1xuICAgICAgICBsZXQgdG9wT3B0aW9ucyA9IHdzT3B0aW9uc0ZvcihudWxsLCBvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSwgMCkgfCAoaXNPcGVuID8gT1BUX09QRU5fTEVGVCA6IDApO1xuICAgICAgICBpZiAodG9wTm9kZSlcbiAgICAgICAgICAgIHRvcENvbnRleHQgPSBuZXcgTm9kZUNvbnRleHQodG9wTm9kZS50eXBlLCB0b3BOb2RlLmF0dHJzLCBNYXJrLm5vbmUsIHRydWUsIG9wdGlvbnMudG9wTWF0Y2ggfHwgdG9wTm9kZS50eXBlLmNvbnRlbnRNYXRjaCwgdG9wT3B0aW9ucyk7XG4gICAgICAgIGVsc2UgaWYgKGlzT3BlbilcbiAgICAgICAgICAgIHRvcENvbnRleHQgPSBuZXcgTm9kZUNvbnRleHQobnVsbCwgbnVsbCwgTWFyay5ub25lLCB0cnVlLCBudWxsLCB0b3BPcHRpb25zKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdG9wQ29udGV4dCA9IG5ldyBOb2RlQ29udGV4dChwYXJzZXIuc2NoZW1hLnRvcE5vZGVUeXBlLCBudWxsLCBNYXJrLm5vbmUsIHRydWUsIG51bGwsIHRvcE9wdGlvbnMpO1xuICAgICAgICB0aGlzLm5vZGVzID0gW3RvcENvbnRleHRdO1xuICAgICAgICB0aGlzLmZpbmQgPSBvcHRpb25zLmZpbmRQb3NpdGlvbnM7XG4gICAgICAgIHRoaXMubmVlZHNCbG9jayA9IGZhbHNlO1xuICAgIH1cbiAgICBnZXQgdG9wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2Rlc1t0aGlzLm9wZW5dO1xuICAgIH1cbiAgICAvLyBBZGQgYSBET00gbm9kZSB0byB0aGUgY29udGVudC4gVGV4dCBpcyBpbnNlcnRlZCBhcyB0ZXh0IG5vZGUsXG4gICAgLy8gb3RoZXJ3aXNlLCB0aGUgbm9kZSBpcyBwYXNzZWQgdG8gYGFkZEVsZW1lbnRgIG9yLCBpZiBpdCBoYXMgYVxuICAgIC8vIGBzdHlsZWAgYXR0cmlidXRlLCBgYWRkRWxlbWVudFdpdGhTdHlsZXNgLlxuICAgIGFkZERPTShkb20sIG1hcmtzKSB7XG4gICAgICAgIGlmIChkb20ubm9kZVR5cGUgPT0gMylcbiAgICAgICAgICAgIHRoaXMuYWRkVGV4dE5vZGUoZG9tLCBtYXJrcyk7XG4gICAgICAgIGVsc2UgaWYgKGRvbS5ub2RlVHlwZSA9PSAxKVxuICAgICAgICAgICAgdGhpcy5hZGRFbGVtZW50KGRvbSwgbWFya3MpO1xuICAgIH1cbiAgICBhZGRUZXh0Tm9kZShkb20sIG1hcmtzKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGRvbS5ub2RlVmFsdWU7XG4gICAgICAgIGxldCB0b3AgPSB0aGlzLnRvcCwgcHJlc2VydmVXUyA9ICh0b3Aub3B0aW9ucyAmIE9QVF9QUkVTRVJWRV9XU19GVUxMKSA/IFwiZnVsbFwiXG4gICAgICAgICAgICA6IHRoaXMubG9jYWxQcmVzZXJ2ZVdTIHx8ICh0b3Aub3B0aW9ucyAmIE9QVF9QUkVTRVJWRV9XUykgPiAwO1xuICAgICAgICBpZiAocHJlc2VydmVXUyA9PT0gXCJmdWxsXCIgfHxcbiAgICAgICAgICAgIHRvcC5pbmxpbmVDb250ZXh0KGRvbSkgfHxcbiAgICAgICAgICAgIC9bXiBcXHRcXHJcXG5cXHUwMDBjXS8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICghcHJlc2VydmVXUykge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvWyBcXHRcXHJcXG5cXHUwMDBjXSsvZywgXCIgXCIpO1xuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgc3RhcnRzIHdpdGggd2hpdGVzcGFjZSwgYW5kIHRoZXJlIGlzIG5vIG5vZGUgYmVmb3JlIGl0LCBvclxuICAgICAgICAgICAgICAgIC8vIGEgaGFyZCBicmVhaywgb3IgYSB0ZXh0IG5vZGUgdGhhdCBlbmRzIHdpdGggd2hpdGVzcGFjZSwgc3RyaXAgdGhlXG4gICAgICAgICAgICAgICAgLy8gbGVhZGluZyBzcGFjZS5cbiAgICAgICAgICAgICAgICBpZiAoL15bIFxcdFxcclxcblxcdTAwMGNdLy50ZXN0KHZhbHVlKSAmJiB0aGlzLm9wZW4gPT0gdGhpcy5ub2Rlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBub2RlQmVmb3JlID0gdG9wLmNvbnRlbnRbdG9wLmNvbnRlbnQubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBkb21Ob2RlQmVmb3JlID0gZG9tLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFub2RlQmVmb3JlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoZG9tTm9kZUJlZm9yZSAmJiBkb21Ob2RlQmVmb3JlLm5vZGVOYW1lID09ICdCUicpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAobm9kZUJlZm9yZS5pc1RleHQgJiYgL1sgXFx0XFxyXFxuXFx1MDAwY10kLy50ZXN0KG5vZGVCZWZvcmUudGV4dCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcmVzZXJ2ZVdTICE9PSBcImZ1bGxcIikge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxyP1xcbnxcXHIvZywgXCIgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHJcXG4/L2csIFwiXFxuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlKVxuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0Tm9kZSh0aGlzLnBhcnNlci5zY2hlbWEudGV4dCh2YWx1ZSksIG1hcmtzLCAhL1xcUy8udGVzdCh2YWx1ZSkpO1xuICAgICAgICAgICAgdGhpcy5maW5kSW5UZXh0KGRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmZpbmRJbnNpZGUoZG9tKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUcnkgdG8gZmluZCBhIGhhbmRsZXIgZm9yIHRoZSBnaXZlbiB0YWcgYW5kIHVzZSB0aGF0IHRvIHBhcnNlLiBJZlxuICAgIC8vIG5vbmUgaXMgZm91bmQsIHRoZSBlbGVtZW50J3MgY29udGVudCBub2RlcyBhcmUgYWRkZWQgZGlyZWN0bHkuXG4gICAgYWRkRWxlbWVudChkb20sIG1hcmtzLCBtYXRjaEFmdGVyKSB7XG4gICAgICAgIGxldCBvdXRlcldTID0gdGhpcy5sb2NhbFByZXNlcnZlV1MsIHRvcCA9IHRoaXMudG9wO1xuICAgICAgICBpZiAoZG9tLnRhZ05hbWUgPT0gXCJQUkVcIiB8fCAvcHJlLy50ZXN0KGRvbS5zdHlsZSAmJiBkb20uc3R5bGUud2hpdGVTcGFjZSkpXG4gICAgICAgICAgICB0aGlzLmxvY2FsUHJlc2VydmVXUyA9IHRydWU7XG4gICAgICAgIGxldCBuYW1lID0gZG9tLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIHJ1bGVJRDtcbiAgICAgICAgaWYgKGxpc3RUYWdzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHRoaXMucGFyc2VyLm5vcm1hbGl6ZUxpc3RzKVxuICAgICAgICAgICAgbm9ybWFsaXplTGlzdChkb20pO1xuICAgICAgICBsZXQgcnVsZSA9ICh0aGlzLm9wdGlvbnMucnVsZUZyb21Ob2RlICYmIHRoaXMub3B0aW9ucy5ydWxlRnJvbU5vZGUoZG9tKSkgfHxcbiAgICAgICAgICAgIChydWxlSUQgPSB0aGlzLnBhcnNlci5tYXRjaFRhZyhkb20sIHRoaXMsIG1hdGNoQWZ0ZXIpKTtcbiAgICAgICAgb3V0OiBpZiAocnVsZSA/IHJ1bGUuaWdub3JlIDogaWdub3JlVGFncy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5maW5kSW5zaWRlKGRvbSk7XG4gICAgICAgICAgICB0aGlzLmlnbm9yZUZhbGxiYWNrKGRvbSwgbWFya3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFydWxlIHx8IHJ1bGUuc2tpcCB8fCBydWxlLmNsb3NlUGFyZW50KSB7XG4gICAgICAgICAgICBpZiAocnVsZSAmJiBydWxlLmNsb3NlUGFyZW50KVxuICAgICAgICAgICAgICAgIHRoaXMub3BlbiA9IE1hdGgubWF4KDAsIHRoaXMub3BlbiAtIDEpO1xuICAgICAgICAgICAgZWxzZSBpZiAocnVsZSAmJiBydWxlLnNraXAubm9kZVR5cGUpXG4gICAgICAgICAgICAgICAgZG9tID0gcnVsZS5za2lwO1xuICAgICAgICAgICAgbGV0IHN5bmMsIG9sZE5lZWRzQmxvY2sgPSB0aGlzLm5lZWRzQmxvY2s7XG4gICAgICAgICAgICBpZiAoYmxvY2tUYWdzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvcC5jb250ZW50Lmxlbmd0aCAmJiB0b3AuY29udGVudFswXS5pc0lubGluZSAmJiB0aGlzLm9wZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuLS07XG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IHRoaXMudG9wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIXRvcC50eXBlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5lZWRzQmxvY2sgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWRvbS5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sZWFmRmFsbGJhY2soZG9tLCBtYXJrcyk7XG4gICAgICAgICAgICAgICAgYnJlYWsgb3V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGlubmVyTWFya3MgPSBydWxlICYmIHJ1bGUuc2tpcCA/IG1hcmtzIDogdGhpcy5yZWFkU3R5bGVzKGRvbSwgbWFya3MpO1xuICAgICAgICAgICAgaWYgKGlubmVyTWFya3MpXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRBbGwoZG9tLCBpbm5lck1hcmtzKTtcbiAgICAgICAgICAgIGlmIChzeW5jKVxuICAgICAgICAgICAgICAgIHRoaXMuc3luYyh0b3ApO1xuICAgICAgICAgICAgdGhpcy5uZWVkc0Jsb2NrID0gb2xkTmVlZHNCbG9jaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBpbm5lck1hcmtzID0gdGhpcy5yZWFkU3R5bGVzKGRvbSwgbWFya3MpO1xuICAgICAgICAgICAgaWYgKGlubmVyTWFya3MpXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFbGVtZW50QnlSdWxlKGRvbSwgcnVsZSwgaW5uZXJNYXJrcywgcnVsZS5jb25zdW1pbmcgPT09IGZhbHNlID8gcnVsZUlEIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvY2FsUHJlc2VydmVXUyA9IG91dGVyV1M7XG4gICAgfVxuICAgIC8vIENhbGxlZCBmb3IgbGVhZiBET00gbm9kZXMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYmUgaWdub3JlZFxuICAgIGxlYWZGYWxsYmFjayhkb20sIG1hcmtzKSB7XG4gICAgICAgIGlmIChkb20ubm9kZU5hbWUgPT0gXCJCUlwiICYmIHRoaXMudG9wLnR5cGUgJiYgdGhpcy50b3AudHlwZS5pbmxpbmVDb250ZW50KVxuICAgICAgICAgICAgdGhpcy5hZGRUZXh0Tm9kZShkb20ub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlxcblwiKSwgbWFya3MpO1xuICAgIH1cbiAgICAvLyBDYWxsZWQgZm9yIGlnbm9yZWQgbm9kZXNcbiAgICBpZ25vcmVGYWxsYmFjayhkb20sIG1hcmtzKSB7XG4gICAgICAgIC8vIElnbm9yZWQgQlIgbm9kZXMgc2hvdWxkIGF0IGxlYXN0IGNyZWF0ZSBhbiBpbmxpbmUgY29udGV4dFxuICAgICAgICBpZiAoZG9tLm5vZGVOYW1lID09IFwiQlJcIiAmJiAoIXRoaXMudG9wLnR5cGUgfHwgIXRoaXMudG9wLnR5cGUuaW5saW5lQ29udGVudCkpXG4gICAgICAgICAgICB0aGlzLmZpbmRQbGFjZSh0aGlzLnBhcnNlci5zY2hlbWEudGV4dChcIi1cIiksIG1hcmtzLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gUnVuIGFueSBzdHlsZSBwYXJzZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBub2RlJ3Mgc3R5bGVzLiBFaXRoZXJcbiAgICAvLyByZXR1cm4gYW4gdXBkYXRlZCBhcnJheSBvZiBtYXJrcywgb3IgbnVsbCB0byBpbmRpY2F0ZSBzb21lIG9mIHRoZVxuICAgIC8vIHN0eWxlcyBoYWQgYSBydWxlIHdpdGggYGlnbm9yZWAgc2V0LlxuICAgIHJlYWRTdHlsZXMoZG9tLCBtYXJrcykge1xuICAgICAgICBsZXQgc3R5bGVzID0gZG9tLnN0eWxlO1xuICAgICAgICAvLyBCZWNhdXNlIG1hbnkgcHJvcGVydGllcyB3aWxsIG9ubHkgc2hvdyB1cCBpbiAnbm9ybWFsaXplZCcgZm9ybVxuICAgICAgICAvLyBpbiBgc3R5bGUuaXRlbWAgKGkuZS4gdGV4dC1kZWNvcmF0aW9uIGJlY29tZXNcbiAgICAgICAgLy8gdGV4dC1kZWNvcmF0aW9uLWxpbmUsIHRleHQtZGVjb3JhdGlvbi1jb2xvciwgZXRjKSwgd2UgZGlyZWN0bHlcbiAgICAgICAgLy8gcXVlcnkgdGhlIHN0eWxlcyBtZW50aW9uZWQgaW4gb3VyIHJ1bGVzIGluc3RlYWQgb2YgaXRlcmF0aW5nXG4gICAgICAgIC8vIG92ZXIgdGhlIGl0ZW1zLlxuICAgICAgICBpZiAoc3R5bGVzICYmIHN0eWxlcy5sZW5ndGgpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFyc2VyLm1hdGNoZWRTdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZSA9IHRoaXMucGFyc2VyLm1hdGNoZWRTdHlsZXNbaV0sIHZhbHVlID0gc3R5bGVzLmdldFByb3BlcnR5VmFsdWUobmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBhZnRlciA9IHVuZGVmaW5lZDs7KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcnVsZSA9IHRoaXMucGFyc2VyLm1hdGNoU3R5bGUobmFtZSwgdmFsdWUsIHRoaXMsIGFmdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcnVsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydWxlLmlnbm9yZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydWxlLmNsZWFyTWFyaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrcyA9IG1hcmtzLmZpbHRlcihtID0+ICFydWxlLmNsZWFyTWFyayhtKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya3MgPSBtYXJrcy5jb25jYXQodGhpcy5wYXJzZXIuc2NoZW1hLm1hcmtzW3J1bGUubWFya10uY3JlYXRlKHJ1bGUuYXR0cnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydWxlLmNvbnN1bWluZyA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgPSBydWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXJrcztcbiAgICB9XG4gICAgLy8gTG9vayB1cCBhIGhhbmRsZXIgZm9yIHRoZSBnaXZlbiBub2RlLiBJZiBub25lIGFyZSBmb3VuZCwgcmV0dXJuXG4gICAgLy8gZmFsc2UuIE90aGVyd2lzZSwgYXBwbHkgaXQsIHVzZSBpdHMgcmV0dXJuIHZhbHVlIHRvIGRyaXZlIHRoZSB3YXlcbiAgICAvLyB0aGUgbm9kZSdzIGNvbnRlbnQgaXMgd3JhcHBlZCwgYW5kIHJldHVybiB0cnVlLlxuICAgIGFkZEVsZW1lbnRCeVJ1bGUoZG9tLCBydWxlLCBtYXJrcywgY29udGludWVBZnRlcikge1xuICAgICAgICBsZXQgc3luYywgbm9kZVR5cGU7XG4gICAgICAgIGlmIChydWxlLm5vZGUpIHtcbiAgICAgICAgICAgIG5vZGVUeXBlID0gdGhpcy5wYXJzZXIuc2NoZW1hLm5vZGVzW3J1bGUubm9kZV07XG4gICAgICAgICAgICBpZiAoIW5vZGVUeXBlLmlzTGVhZikge1xuICAgICAgICAgICAgICAgIGxldCBpbm5lciA9IHRoaXMuZW50ZXIobm9kZVR5cGUsIHJ1bGUuYXR0cnMgfHwgbnVsbCwgbWFya3MsIHJ1bGUucHJlc2VydmVXaGl0ZXNwYWNlKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5uZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3luYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtzID0gaW5uZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMuaW5zZXJ0Tm9kZShub2RlVHlwZS5jcmVhdGUocnVsZS5hdHRycyksIG1hcmtzLCBkb20ubm9kZU5hbWUgPT0gXCJCUlwiKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGVhZkZhbGxiYWNrKGRvbSwgbWFya3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IG1hcmtUeXBlID0gdGhpcy5wYXJzZXIuc2NoZW1hLm1hcmtzW3J1bGUubWFya107XG4gICAgICAgICAgICBtYXJrcyA9IG1hcmtzLmNvbmNhdChtYXJrVHlwZS5jcmVhdGUocnVsZS5hdHRycykpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzdGFydEluID0gdGhpcy50b3A7XG4gICAgICAgIGlmIChub2RlVHlwZSAmJiBub2RlVHlwZS5pc0xlYWYpIHtcbiAgICAgICAgICAgIHRoaXMuZmluZEluc2lkZShkb20pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbnRpbnVlQWZ0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRWxlbWVudChkb20sIG1hcmtzLCBjb250aW51ZUFmdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChydWxlLmdldENvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZmluZEluc2lkZShkb20pO1xuICAgICAgICAgICAgcnVsZS5nZXRDb250ZW50KGRvbSwgdGhpcy5wYXJzZXIuc2NoZW1hKS5mb3JFYWNoKG5vZGUgPT4gdGhpcy5pbnNlcnROb2RlKG5vZGUsIG1hcmtzLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGNvbnRlbnRET00gPSBkb207XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJ1bGUuY29udGVudEVsZW1lbnQgPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICBjb250ZW50RE9NID0gZG9tLnF1ZXJ5U2VsZWN0b3IocnVsZS5jb250ZW50RWxlbWVudCk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgcnVsZS5jb250ZW50RWxlbWVudCA9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgY29udGVudERPTSA9IHJ1bGUuY29udGVudEVsZW1lbnQoZG9tKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHJ1bGUuY29udGVudEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgY29udGVudERPTSA9IHJ1bGUuY29udGVudEVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLmZpbmRBcm91bmQoZG9tLCBjb250ZW50RE9NLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuYWRkQWxsKGNvbnRlbnRET00sIG1hcmtzKTtcbiAgICAgICAgICAgIHRoaXMuZmluZEFyb3VuZChkb20sIGNvbnRlbnRET00sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3luYyAmJiB0aGlzLnN5bmMoc3RhcnRJbikpXG4gICAgICAgICAgICB0aGlzLm9wZW4tLTtcbiAgICB9XG4gICAgLy8gQWRkIGFsbCBjaGlsZCBub2RlcyBiZXR3ZWVuIGBzdGFydEluZGV4YCBhbmQgYGVuZEluZGV4YCAob3IgdGhlXG4gICAgLy8gd2hvbGUgbm9kZSwgaWYgbm90IGdpdmVuKS4gSWYgYHN5bmNgIGlzIHBhc3NlZCwgdXNlIGl0IHRvXG4gICAgLy8gc3luY2hyb25pemUgYWZ0ZXIgZXZlcnkgYmxvY2sgZWxlbWVudC5cbiAgICBhZGRBbGwocGFyZW50LCBtYXJrcywgc3RhcnRJbmRleCwgZW5kSW5kZXgpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gc3RhcnRJbmRleCB8fCAwO1xuICAgICAgICBmb3IgKGxldCBkb20gPSBzdGFydEluZGV4ID8gcGFyZW50LmNoaWxkTm9kZXNbc3RhcnRJbmRleF0gOiBwYXJlbnQuZmlyc3RDaGlsZCwgZW5kID0gZW5kSW5kZXggPT0gbnVsbCA/IG51bGwgOiBwYXJlbnQuY2hpbGROb2Rlc1tlbmRJbmRleF07IGRvbSAhPSBlbmQ7IGRvbSA9IGRvbS5uZXh0U2libGluZywgKytpbmRleCkge1xuICAgICAgICAgICAgdGhpcy5maW5kQXRQb2ludChwYXJlbnQsIGluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuYWRkRE9NKGRvbSwgbWFya3MpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmluZEF0UG9pbnQocGFyZW50LCBpbmRleCk7XG4gICAgfVxuICAgIC8vIFRyeSB0byBmaW5kIGEgd2F5IHRvIGZpdCB0aGUgZ2l2ZW4gbm9kZSB0eXBlIGludG8gdGhlIGN1cnJlbnRcbiAgICAvLyBjb250ZXh0LiBNYXkgYWRkIGludGVybWVkaWF0ZSB3cmFwcGVycyBhbmQvb3IgbGVhdmUgbm9uLXNvbGlkXG4gICAgLy8gbm9kZXMgdGhhdCB3ZSdyZSBpbi5cbiAgICBmaW5kUGxhY2Uobm9kZSwgbWFya3MsIGNhdXRpb3VzKSB7XG4gICAgICAgIGxldCByb3V0ZSwgc3luYztcbiAgICAgICAgZm9yIChsZXQgZGVwdGggPSB0aGlzLm9wZW4sIHBlbmFsdHkgPSAwOyBkZXB0aCA+PSAwOyBkZXB0aC0tKSB7XG4gICAgICAgICAgICBsZXQgY3ggPSB0aGlzLm5vZGVzW2RlcHRoXTtcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IGN4LmZpbmRXcmFwcGluZyhub2RlKTtcbiAgICAgICAgICAgIGlmIChmb3VuZCAmJiAoIXJvdXRlIHx8IHJvdXRlLmxlbmd0aCA+IGZvdW5kLmxlbmd0aCArIHBlbmFsdHkpKSB7XG4gICAgICAgICAgICAgICAgcm91dGUgPSBmb3VuZDtcbiAgICAgICAgICAgICAgICBzeW5jID0gY3g7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3VuZC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN4LnNvbGlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhdXRpb3VzKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBwZW5hbHR5ICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyb3V0ZSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB0aGlzLnN5bmMoc3luYyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGUubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBtYXJrcyA9IHRoaXMuZW50ZXJJbm5lcihyb3V0ZVtpXSwgbnVsbCwgbWFya3MsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIG1hcmtzO1xuICAgIH1cbiAgICAvLyBUcnkgdG8gaW5zZXJ0IHRoZSBnaXZlbiBub2RlLCBhZGp1c3RpbmcgdGhlIGNvbnRleHQgd2hlbiBuZWVkZWQuXG4gICAgaW5zZXJ0Tm9kZShub2RlLCBtYXJrcywgY2F1dGlvdXMpIHtcbiAgICAgICAgaWYgKG5vZGUuaXNJbmxpbmUgJiYgdGhpcy5uZWVkc0Jsb2NrICYmICF0aGlzLnRvcC50eXBlKSB7XG4gICAgICAgICAgICBsZXQgYmxvY2sgPSB0aGlzLnRleHRibG9ja0Zyb21Db250ZXh0KCk7XG4gICAgICAgICAgICBpZiAoYmxvY2spXG4gICAgICAgICAgICAgICAgbWFya3MgPSB0aGlzLmVudGVySW5uZXIoYmxvY2ssIG51bGwsIG1hcmtzKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaW5uZXJNYXJrcyA9IHRoaXMuZmluZFBsYWNlKG5vZGUsIG1hcmtzLCBjYXV0aW91cyk7XG4gICAgICAgIGlmIChpbm5lck1hcmtzKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlRXh0cmEoKTtcbiAgICAgICAgICAgIGxldCB0b3AgPSB0aGlzLnRvcDtcbiAgICAgICAgICAgIGlmICh0b3AubWF0Y2gpXG4gICAgICAgICAgICAgICAgdG9wLm1hdGNoID0gdG9wLm1hdGNoLm1hdGNoVHlwZShub2RlLnR5cGUpO1xuICAgICAgICAgICAgbGV0IG5vZGVNYXJrcyA9IE1hcmsubm9uZTtcbiAgICAgICAgICAgIGZvciAobGV0IG0gb2YgaW5uZXJNYXJrcy5jb25jYXQobm9kZS5tYXJrcykpXG4gICAgICAgICAgICAgICAgaWYgKHRvcC50eXBlID8gdG9wLnR5cGUuYWxsb3dzTWFya1R5cGUobS50eXBlKSA6IG1hcmtNYXlBcHBseShtLnR5cGUsIG5vZGUudHlwZSkpXG4gICAgICAgICAgICAgICAgICAgIG5vZGVNYXJrcyA9IG0uYWRkVG9TZXQobm9kZU1hcmtzKTtcbiAgICAgICAgICAgIHRvcC5jb250ZW50LnB1c2gobm9kZS5tYXJrKG5vZGVNYXJrcykpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBUcnkgdG8gc3RhcnQgYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlLCBhZGp1c3RpbmcgdGhlIGNvbnRleHQgd2hlblxuICAgIC8vIG5lY2Vzc2FyeS5cbiAgICBlbnRlcih0eXBlLCBhdHRycywgbWFya3MsIHByZXNlcnZlV1MpIHtcbiAgICAgICAgbGV0IGlubmVyTWFya3MgPSB0aGlzLmZpbmRQbGFjZSh0eXBlLmNyZWF0ZShhdHRycyksIG1hcmtzLCBmYWxzZSk7XG4gICAgICAgIGlmIChpbm5lck1hcmtzKVxuICAgICAgICAgICAgaW5uZXJNYXJrcyA9IHRoaXMuZW50ZXJJbm5lcih0eXBlLCBhdHRycywgbWFya3MsIHRydWUsIHByZXNlcnZlV1MpO1xuICAgICAgICByZXR1cm4gaW5uZXJNYXJrcztcbiAgICB9XG4gICAgLy8gT3BlbiBhIG5vZGUgb2YgdGhlIGdpdmVuIHR5cGVcbiAgICBlbnRlcklubmVyKHR5cGUsIGF0dHJzLCBtYXJrcywgc29saWQgPSBmYWxzZSwgcHJlc2VydmVXUykge1xuICAgICAgICB0aGlzLmNsb3NlRXh0cmEoKTtcbiAgICAgICAgbGV0IHRvcCA9IHRoaXMudG9wO1xuICAgICAgICB0b3AubWF0Y2ggPSB0b3AubWF0Y2ggJiYgdG9wLm1hdGNoLm1hdGNoVHlwZSh0eXBlKTtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB3c09wdGlvbnNGb3IodHlwZSwgcHJlc2VydmVXUywgdG9wLm9wdGlvbnMpO1xuICAgICAgICBpZiAoKHRvcC5vcHRpb25zICYgT1BUX09QRU5fTEVGVCkgJiYgdG9wLmNvbnRlbnQubGVuZ3RoID09IDApXG4gICAgICAgICAgICBvcHRpb25zIHw9IE9QVF9PUEVOX0xFRlQ7XG4gICAgICAgIGxldCBhcHBseU1hcmtzID0gTWFyay5ub25lO1xuICAgICAgICBtYXJrcyA9IG1hcmtzLmZpbHRlcihtID0+IHtcbiAgICAgICAgICAgIGlmICh0b3AudHlwZSA/IHRvcC50eXBlLmFsbG93c01hcmtUeXBlKG0udHlwZSkgOiBtYXJrTWF5QXBwbHkobS50eXBlLCB0eXBlKSkge1xuICAgICAgICAgICAgICAgIGFwcGx5TWFya3MgPSBtLmFkZFRvU2V0KGFwcGx5TWFya3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ub2Rlcy5wdXNoKG5ldyBOb2RlQ29udGV4dCh0eXBlLCBhdHRycywgYXBwbHlNYXJrcywgc29saWQsIG51bGwsIG9wdGlvbnMpKTtcbiAgICAgICAgdGhpcy5vcGVuKys7XG4gICAgICAgIHJldHVybiBtYXJrcztcbiAgICB9XG4gICAgLy8gTWFrZSBzdXJlIGFsbCBub2RlcyBhYm92ZSB0aGlzLm9wZW4gYXJlIGZpbmlzaGVkIGFuZCBhZGRlZCB0b1xuICAgIC8vIHRoZWlyIHBhcmVudHNcbiAgICBjbG9zZUV4dHJhKG9wZW5FbmQgPSBmYWxzZSkge1xuICAgICAgICBsZXQgaSA9IHRoaXMubm9kZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKGkgPiB0aGlzLm9wZW4pIHtcbiAgICAgICAgICAgIGZvciAoOyBpID4gdGhpcy5vcGVuOyBpLS0pXG4gICAgICAgICAgICAgICAgdGhpcy5ub2Rlc1tpIC0gMV0uY29udGVudC5wdXNoKHRoaXMubm9kZXNbaV0uZmluaXNoKG9wZW5FbmQpKTtcbiAgICAgICAgICAgIHRoaXMubm9kZXMubGVuZ3RoID0gdGhpcy5vcGVuICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaW5pc2goKSB7XG4gICAgICAgIHRoaXMub3BlbiA9IDA7XG4gICAgICAgIHRoaXMuY2xvc2VFeHRyYSh0aGlzLmlzT3Blbik7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzWzBdLmZpbmlzaCghISh0aGlzLmlzT3BlbiB8fCB0aGlzLm9wdGlvbnMudG9wT3BlbikpO1xuICAgIH1cbiAgICBzeW5jKHRvKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLm9wZW47IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ub2Rlc1tpXSA9PSB0bykge1xuICAgICAgICAgICAgICAgIHRoaXMub3BlbiA9IGk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmxvY2FsUHJlc2VydmVXUykge1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZXNbaV0ub3B0aW9ucyB8PSBPUFRfUFJFU0VSVkVfV1M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBnZXQgY3VycmVudFBvcygpIHtcbiAgICAgICAgdGhpcy5jbG9zZUV4dHJhKCk7XG4gICAgICAgIGxldCBwb3MgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5vcGVuOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSB0aGlzLm5vZGVzW2ldLmNvbnRlbnQ7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gY29udGVudC5sZW5ndGggLSAxOyBqID49IDA7IGotLSlcbiAgICAgICAgICAgICAgICBwb3MgKz0gY29udGVudFtqXS5ub2RlU2l6ZTtcbiAgICAgICAgICAgIGlmIChpKVxuICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgfVxuICAgIGZpbmRBdFBvaW50KHBhcmVudCwgb2Zmc2V0KSB7XG4gICAgICAgIGlmICh0aGlzLmZpbmQpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmluZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbmRbaV0ubm9kZSA9PSBwYXJlbnQgJiYgdGhpcy5maW5kW2ldLm9mZnNldCA9PSBvZmZzZXQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZFtpXS5wb3MgPSB0aGlzLmN1cnJlbnRQb3M7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIGZpbmRJbnNpZGUocGFyZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmZpbmQpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmluZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbmRbaV0ucG9zID09IG51bGwgJiYgcGFyZW50Lm5vZGVUeXBlID09IDEgJiYgcGFyZW50LmNvbnRhaW5zKHRoaXMuZmluZFtpXS5ub2RlKSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5kW2ldLnBvcyA9IHRoaXMuY3VycmVudFBvcztcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgZmluZEFyb3VuZChwYXJlbnQsIGNvbnRlbnQsIGJlZm9yZSkge1xuICAgICAgICBpZiAocGFyZW50ICE9IGNvbnRlbnQgJiYgdGhpcy5maW5kKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZpbmQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maW5kW2ldLnBvcyA9PSBudWxsICYmIHBhcmVudC5ub2RlVHlwZSA9PSAxICYmIHBhcmVudC5jb250YWlucyh0aGlzLmZpbmRbaV0ubm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvcyA9IGNvbnRlbnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcy5maW5kW2ldLm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zICYgKGJlZm9yZSA/IDIgOiA0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZFtpXS5wb3MgPSB0aGlzLmN1cnJlbnRQb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgIH1cbiAgICBmaW5kSW5UZXh0KHRleHROb2RlKSB7XG4gICAgICAgIGlmICh0aGlzLmZpbmQpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmluZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbmRbaV0ubm9kZSA9PSB0ZXh0Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5kW2ldLnBvcyA9IHRoaXMuY3VycmVudFBvcyAtICh0ZXh0Tm9kZS5ub2RlVmFsdWUubGVuZ3RoIC0gdGhpcy5maW5kW2ldLm9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIC8vIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gY29udGV4dCBzdHJpbmcgbWF0Y2hlcyB0aGlzIGNvbnRleHQuXG4gICAgbWF0Y2hlc0NvbnRleHQoY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dC5pbmRleE9mKFwifFwiKSA+IC0xKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuc3BsaXQoL1xccypcXHxcXHMqLykuc29tZSh0aGlzLm1hdGNoZXNDb250ZXh0LCB0aGlzKTtcbiAgICAgICAgbGV0IHBhcnRzID0gY29udGV4dC5zcGxpdChcIi9cIik7XG4gICAgICAgIGxldCBvcHRpb24gPSB0aGlzLm9wdGlvbnMuY29udGV4dDtcbiAgICAgICAgbGV0IHVzZVJvb3QgPSAhdGhpcy5pc09wZW4gJiYgKCFvcHRpb24gfHwgb3B0aW9uLnBhcmVudC50eXBlID09IHRoaXMubm9kZXNbMF0udHlwZSk7XG4gICAgICAgIGxldCBtaW5EZXB0aCA9IC0ob3B0aW9uID8gb3B0aW9uLmRlcHRoICsgMSA6IDApICsgKHVzZVJvb3QgPyAwIDogMSk7XG4gICAgICAgIGxldCBtYXRjaCA9IChpLCBkZXB0aCkgPT4ge1xuICAgICAgICAgICAgZm9yICg7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAocGFydCA9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IHBhcnRzLmxlbmd0aCAtIDEgfHwgaSA9PSAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBkZXB0aCA+PSBtaW5EZXB0aDsgZGVwdGgtLSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaChpIC0gMSwgZGVwdGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IGRlcHRoID4gMCB8fCAoZGVwdGggPT0gMCAmJiB1c2VSb290KSA/IHRoaXMubm9kZXNbZGVwdGhdLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogb3B0aW9uICYmIGRlcHRoID49IG1pbkRlcHRoID8gb3B0aW9uLm5vZGUoZGVwdGggLSBtaW5EZXB0aCkudHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0IHx8IChuZXh0Lm5hbWUgIT0gcGFydCAmJiAhbmV4dC5pc0luR3JvdXAocGFydCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBkZXB0aC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbWF0Y2gocGFydHMubGVuZ3RoIC0gMSwgdGhpcy5vcGVuKTtcbiAgICB9XG4gICAgdGV4dGJsb2NrRnJvbUNvbnRleHQoKSB7XG4gICAgICAgIGxldCAkY29udGV4dCA9IHRoaXMub3B0aW9ucy5jb250ZXh0O1xuICAgICAgICBpZiAoJGNvbnRleHQpXG4gICAgICAgICAgICBmb3IgKGxldCBkID0gJGNvbnRleHQuZGVwdGg7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRlZmx0ID0gJGNvbnRleHQubm9kZShkKS5jb250ZW50TWF0Y2hBdCgkY29udGV4dC5pbmRleEFmdGVyKGQpKS5kZWZhdWx0VHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoZGVmbHQgJiYgZGVmbHQuaXNUZXh0YmxvY2sgJiYgZGVmbHQuZGVmYXVsdEF0dHJzKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmbHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gdGhpcy5wYXJzZXIuc2NoZW1hLm5vZGVzKSB7XG4gICAgICAgICAgICBsZXQgdHlwZSA9IHRoaXMucGFyc2VyLnNjaGVtYS5ub2Rlc1tuYW1lXTtcbiAgICAgICAgICAgIGlmICh0eXBlLmlzVGV4dGJsb2NrICYmIHR5cGUuZGVmYXVsdEF0dHJzKVxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gS2x1ZGdlIHRvIHdvcmsgYXJvdW5kIGRpcmVjdGx5IG5lc3RlZCBsaXN0IG5vZGVzIHByb2R1Y2VkIGJ5IHNvbWVcbi8vIHRvb2xzIGFuZCBhbGxvd2VkIGJ5IGJyb3dzZXJzIHRvIG1lYW4gdGhhdCB0aGUgbmVzdGVkIGxpc3QgaXNcbi8vIGFjdHVhbGx5IHBhcnQgb2YgdGhlIGxpc3QgaXRlbSBhYm92ZSBpdC5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUxpc3QoZG9tKSB7XG4gICAgZm9yIChsZXQgY2hpbGQgPSBkb20uZmlyc3RDaGlsZCwgcHJldkl0ZW0gPSBudWxsOyBjaGlsZDsgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZykge1xuICAgICAgICBsZXQgbmFtZSA9IGNoaWxkLm5vZGVUeXBlID09IDEgPyBjaGlsZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbiAgICAgICAgaWYgKG5hbWUgJiYgbGlzdFRhZ3MuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgcHJldkl0ZW0pIHtcbiAgICAgICAgICAgIHByZXZJdGVtLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIGNoaWxkID0gcHJldkl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PSBcImxpXCIpIHtcbiAgICAgICAgICAgIHByZXZJdGVtID0gY2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSkge1xuICAgICAgICAgICAgcHJldkl0ZW0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gQXBwbHkgYSBDU1Mgc2VsZWN0b3IuXG5mdW5jdGlvbiBtYXRjaGVzKGRvbSwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gKGRvbS5tYXRjaGVzIHx8IGRvbS5tc01hdGNoZXNTZWxlY3RvciB8fCBkb20ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGRvbS5tb3pNYXRjaGVzU2VsZWN0b3IpLmNhbGwoZG9tLCBzZWxlY3Rvcik7XG59XG5mdW5jdGlvbiBjb3B5KG9iaikge1xuICAgIGxldCBjb3B5ID0ge307XG4gICAgZm9yIChsZXQgcHJvcCBpbiBvYmopXG4gICAgICAgIGNvcHlbcHJvcF0gPSBvYmpbcHJvcF07XG4gICAgcmV0dXJuIGNvcHk7XG59XG4vLyBVc2VkIHdoZW4gZmluZGluZyBhIG1hcmsgYXQgdGhlIHRvcCBsZXZlbCBvZiBhIGZyYWdtZW50IHBhcnNlLlxuLy8gQ2hlY2tzIHdoZXRoZXIgaXQgd291bGQgYmUgcmVhc29uYWJsZSB0byBhcHBseSBhIGdpdmVuIG1hcmsgdHlwZSB0b1xuLy8gYSBnaXZlbiBub2RlLCBieSBsb29raW5nIGF0IHRoZSB3YXkgdGhlIG1hcmsgb2NjdXJzIGluIHRoZSBzY2hlbWEuXG5mdW5jdGlvbiBtYXJrTWF5QXBwbHkobWFya1R5cGUsIG5vZGVUeXBlKSB7XG4gICAgbGV0IG5vZGVzID0gbm9kZVR5cGUuc2NoZW1hLm5vZGVzO1xuICAgIGZvciAobGV0IG5hbWUgaW4gbm9kZXMpIHtcbiAgICAgICAgbGV0IHBhcmVudCA9IG5vZGVzW25hbWVdO1xuICAgICAgICBpZiAoIXBhcmVudC5hbGxvd3NNYXJrVHlwZShtYXJrVHlwZSkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgbGV0IHNlZW4gPSBbXSwgc2NhbiA9IChtYXRjaCkgPT4ge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKG1hdGNoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Y2guZWRnZUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgeyB0eXBlLCBuZXh0IH0gPSBtYXRjaC5lZGdlKGkpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlID09IG5vZGVUeXBlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoc2Vlbi5pbmRleE9mKG5leHQpIDwgMCAmJiBzY2FuKG5leHQpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHNjYW4ocGFyZW50LmNvbnRlbnRNYXRjaCkpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbi8qKlxuQSBET00gc2VyaWFsaXplciBrbm93cyBob3cgdG8gY29udmVydCBQcm9zZU1pcnJvciBub2RlcyBhbmRcbm1hcmtzIG9mIHZhcmlvdXMgdHlwZXMgdG8gRE9NIG5vZGVzLlxuKi9cbmNsYXNzIERPTVNlcmlhbGl6ZXIge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIHNlcmlhbGl6ZXIuIGBub2Rlc2Agc2hvdWxkIG1hcCBub2RlIG5hbWVzIHRvIGZ1bmN0aW9uc1xuICAgIHRoYXQgdGFrZSBhIG5vZGUgYW5kIHJldHVybiBhIGRlc2NyaXB0aW9uIG9mIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgRE9NLiBgbWFya3NgIGRvZXMgdGhlIHNhbWUgZm9yIG1hcmsgbmFtZXMsIGJ1dCBhbHNvIGdldHMgYW5cbiAgICBhcmd1bWVudCB0aGF0IHRlbGxzIGl0IHdoZXRoZXIgdGhlIG1hcmsncyBjb250ZW50IGlzIGJsb2NrIG9yXG4gICAgaW5saW5lIGNvbnRlbnQgKGZvciB0eXBpY2FsIHVzZSwgaXQnbGwgYWx3YXlzIGJlIGlubGluZSkuIEEgbWFya1xuICAgIHNlcmlhbGl6ZXIgbWF5IGJlIGBudWxsYCB0byBpbmRpY2F0ZSB0aGF0IG1hcmtzIG9mIHRoYXQgdHlwZVxuICAgIHNob3VsZCBub3QgYmUgc2VyaWFsaXplZC5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBub2RlIHNlcmlhbGl6YXRpb24gZnVuY3Rpb25zLlxuICAgICovXG4gICAgbm9kZXMsIFxuICAgIC8qKlxuICAgIFRoZSBtYXJrIHNlcmlhbGl6YXRpb24gZnVuY3Rpb25zLlxuICAgICovXG4gICAgbWFya3MpIHtcbiAgICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuICAgICAgICB0aGlzLm1hcmtzID0gbWFya3M7XG4gICAgfVxuICAgIC8qKlxuICAgIFNlcmlhbGl6ZSB0aGUgY29udGVudCBvZiB0aGlzIGZyYWdtZW50IHRvIGEgRE9NIGZyYWdtZW50LiBXaGVuXG4gICAgbm90IGluIHRoZSBicm93c2VyLCB0aGUgYGRvY3VtZW50YCBvcHRpb24sIGNvbnRhaW5pbmcgYSBET01cbiAgICBkb2N1bWVudCwgc2hvdWxkIGJlIHBhc3NlZCBzbyB0aGF0IHRoZSBzZXJpYWxpemVyIGNhbiBjcmVhdGVcbiAgICBub2Rlcy5cbiAgICAqL1xuICAgIHNlcmlhbGl6ZUZyYWdtZW50KGZyYWdtZW50LCBvcHRpb25zID0ge30sIHRhcmdldCkge1xuICAgICAgICBpZiAoIXRhcmdldClcbiAgICAgICAgICAgIHRhcmdldCA9IGRvYyhvcHRpb25zKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIGxldCB0b3AgPSB0YXJnZXQsIGFjdGl2ZSA9IFtdO1xuICAgICAgICBmcmFnbWVudC5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICAgICAgaWYgKGFjdGl2ZS5sZW5ndGggfHwgbm9kZS5tYXJrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQga2VlcCA9IDAsIHJlbmRlcmVkID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoa2VlcCA8IGFjdGl2ZS5sZW5ndGggJiYgcmVuZGVyZWQgPCBub2RlLm1hcmtzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IG5vZGUubWFya3NbcmVuZGVyZWRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWFya3NbbmV4dC50eXBlLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlZCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0LmVxKGFjdGl2ZVtrZWVwXVswXSkgfHwgbmV4dC50eXBlLnNwZWMuc3Bhbm5pbmcgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGtlZXArKztcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2hpbGUgKGtlZXAgPCBhY3RpdmUubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICB0b3AgPSBhY3RpdmUucG9wKClbMV07XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlbmRlcmVkIDwgbm9kZS5tYXJrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFkZCA9IG5vZGUubWFya3NbcmVuZGVyZWQrK107XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrRE9NID0gdGhpcy5zZXJpYWxpemVNYXJrKGFkZCwgbm9kZS5pc0lubGluZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXJrRE9NKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmUucHVzaChbYWRkLCB0b3BdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcC5hcHBlbmRDaGlsZChtYXJrRE9NLmRvbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgPSBtYXJrRE9NLmNvbnRlbnRET00gfHwgbWFya0RPTS5kb207XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b3AuYXBwZW5kQ2hpbGQodGhpcy5zZXJpYWxpemVOb2RlSW5uZXIobm9kZSwgb3B0aW9ucykpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzZXJpYWxpemVOb2RlSW5uZXIobm9kZSwgb3B0aW9ucykge1xuICAgICAgICBsZXQgeyBkb20sIGNvbnRlbnRET00gfSA9IHJlbmRlclNwZWMoZG9jKG9wdGlvbnMpLCB0aGlzLm5vZGVzW25vZGUudHlwZS5uYW1lXShub2RlKSwgbnVsbCwgbm9kZS5hdHRycyk7XG4gICAgICAgIGlmIChjb250ZW50RE9NKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5pc0xlYWYpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJDb250ZW50IGhvbGUgbm90IGFsbG93ZWQgaW4gYSBsZWFmIG5vZGUgc3BlY1wiKTtcbiAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplRnJhZ21lbnQobm9kZS5jb250ZW50LCBvcHRpb25zLCBjb250ZW50RE9NKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9tO1xuICAgIH1cbiAgICAvKipcbiAgICBTZXJpYWxpemUgdGhpcyBub2RlIHRvIGEgRE9NIG5vZGUuIFRoaXMgY2FuIGJlIHVzZWZ1bCB3aGVuIHlvdVxuICAgIG5lZWQgdG8gc2VyaWFsaXplIGEgcGFydCBvZiBhIGRvY3VtZW50LCBhcyBvcHBvc2VkIHRvIHRoZSB3aG9sZVxuICAgIGRvY3VtZW50LiBUbyBzZXJpYWxpemUgYSB3aG9sZSBkb2N1bWVudCwgdXNlXG4gICAgW2BzZXJpYWxpemVGcmFnbWVudGBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5ET01TZXJpYWxpemVyLnNlcmlhbGl6ZUZyYWdtZW50KSBvblxuICAgIGl0cyBbY29udGVudF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGUuY29udGVudCkuXG4gICAgKi9cbiAgICBzZXJpYWxpemVOb2RlKG5vZGUsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBsZXQgZG9tID0gdGhpcy5zZXJpYWxpemVOb2RlSW5uZXIobm9kZSwgb3B0aW9ucyk7XG4gICAgICAgIGZvciAobGV0IGkgPSBub2RlLm1hcmtzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgd3JhcCA9IHRoaXMuc2VyaWFsaXplTWFyayhub2RlLm1hcmtzW2ldLCBub2RlLmlzSW5saW5lLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGlmICh3cmFwKSB7XG4gICAgICAgICAgICAgICAgKHdyYXAuY29udGVudERPTSB8fCB3cmFwLmRvbSkuYXBwZW5kQ2hpbGQoZG9tKTtcbiAgICAgICAgICAgICAgICBkb20gPSB3cmFwLmRvbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9tO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHNlcmlhbGl6ZU1hcmsobWFyaywgaW5saW5lLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgbGV0IHRvRE9NID0gdGhpcy5tYXJrc1ttYXJrLnR5cGUubmFtZV07XG4gICAgICAgIHJldHVybiB0b0RPTSAmJiByZW5kZXJTcGVjKGRvYyhvcHRpb25zKSwgdG9ET00obWFyaywgaW5saW5lKSwgbnVsbCwgbWFyay5hdHRycyk7XG4gICAgfVxuICAgIHN0YXRpYyByZW5kZXJTcGVjKGRvYywgc3RydWN0dXJlLCB4bWxOUyA9IG51bGwsIGJsb2NrQXJyYXlzSW4pIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlclNwZWMoZG9jLCBzdHJ1Y3R1cmUsIHhtbE5TLCBibG9ja0FycmF5c0luKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQnVpbGQgYSBzZXJpYWxpemVyIHVzaW5nIHRoZSBbYHRvRE9NYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVTcGVjLnRvRE9NKVxuICAgIHByb3BlcnRpZXMgaW4gYSBzY2hlbWEncyBub2RlIGFuZCBtYXJrIHNwZWNzLlxuICAgICovXG4gICAgc3RhdGljIGZyb21TY2hlbWEoc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBzY2hlbWEuY2FjaGVkLmRvbVNlcmlhbGl6ZXIgfHxcbiAgICAgICAgICAgIChzY2hlbWEuY2FjaGVkLmRvbVNlcmlhbGl6ZXIgPSBuZXcgRE9NU2VyaWFsaXplcih0aGlzLm5vZGVzRnJvbVNjaGVtYShzY2hlbWEpLCB0aGlzLm1hcmtzRnJvbVNjaGVtYShzY2hlbWEpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEdhdGhlciB0aGUgc2VyaWFsaXplcnMgaW4gYSBzY2hlbWEncyBub2RlIHNwZWNzIGludG8gYW4gb2JqZWN0LlxuICAgIFRoaXMgY2FuIGJlIHVzZWZ1bCBhcyBhIGJhc2UgdG8gYnVpbGQgYSBjdXN0b20gc2VyaWFsaXplciBmcm9tLlxuICAgICovXG4gICAgc3RhdGljIG5vZGVzRnJvbVNjaGVtYShzY2hlbWEpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGdhdGhlclRvRE9NKHNjaGVtYS5ub2Rlcyk7XG4gICAgICAgIGlmICghcmVzdWx0LnRleHQpXG4gICAgICAgICAgICByZXN1bHQudGV4dCA9IG5vZGUgPT4gbm9kZS50ZXh0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICBHYXRoZXIgdGhlIHNlcmlhbGl6ZXJzIGluIGEgc2NoZW1hJ3MgbWFyayBzcGVjcyBpbnRvIGFuIG9iamVjdC5cbiAgICAqL1xuICAgIHN0YXRpYyBtYXJrc0Zyb21TY2hlbWEoc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBnYXRoZXJUb0RPTShzY2hlbWEubWFya3MpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdhdGhlclRvRE9NKG9iaikge1xuICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGxldCBuYW1lIGluIG9iaikge1xuICAgICAgICBsZXQgdG9ET00gPSBvYmpbbmFtZV0uc3BlYy50b0RPTTtcbiAgICAgICAgaWYgKHRvRE9NKVxuICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gdG9ET007XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBkb2Mob3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLmRvY3VtZW50IHx8IHdpbmRvdy5kb2N1bWVudDtcbn1cbmNvbnN0IHN1c3BpY2lvdXNBdHRyaWJ1dGVDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBzdXNwaWNpb3VzQXR0cmlidXRlcyhhdHRycykge1xuICAgIGxldCB2YWx1ZSA9IHN1c3BpY2lvdXNBdHRyaWJ1dGVDYWNoZS5nZXQoYXR0cnMpO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBzdXNwaWNpb3VzQXR0cmlidXRlQ2FjaGUuc2V0KGF0dHJzLCB2YWx1ZSA9IHN1c3BpY2lvdXNBdHRyaWJ1dGVzSW5uZXIoYXR0cnMpKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBzdXNwaWNpb3VzQXR0cmlidXRlc0lubmVyKGF0dHJzKSB7XG4gICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgZnVuY3Rpb24gc2Nhbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVbMF0gPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nhbih2YWx1ZVtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcHJvcCBpbiB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgc2Nhbih2YWx1ZVtwcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2NhbihhdHRycyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHJlbmRlclNwZWMoZG9jLCBzdHJ1Y3R1cmUsIHhtbE5TLCBibG9ja0FycmF5c0luKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJ1Y3R1cmUgPT0gXCJzdHJpbmdcIilcbiAgICAgICAgcmV0dXJuIHsgZG9tOiBkb2MuY3JlYXRlVGV4dE5vZGUoc3RydWN0dXJlKSB9O1xuICAgIGlmIChzdHJ1Y3R1cmUubm9kZVR5cGUgIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHsgZG9tOiBzdHJ1Y3R1cmUgfTtcbiAgICBpZiAoc3RydWN0dXJlLmRvbSAmJiBzdHJ1Y3R1cmUuZG9tLm5vZGVUeXBlICE9IG51bGwpXG4gICAgICAgIHJldHVybiBzdHJ1Y3R1cmU7XG4gICAgbGV0IHRhZ05hbWUgPSBzdHJ1Y3R1cmVbMF0sIHN1c3BpY2lvdXM7XG4gICAgaWYgKHR5cGVvZiB0YWdOYW1lICE9IFwic3RyaW5nXCIpXG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBhcnJheSBwYXNzZWQgdG8gcmVuZGVyU3BlY1wiKTtcbiAgICBpZiAoYmxvY2tBcnJheXNJbiAmJiAoc3VzcGljaW91cyA9IHN1c3BpY2lvdXNBdHRyaWJ1dGVzKGJsb2NrQXJyYXlzSW4pKSAmJlxuICAgICAgICBzdXNwaWNpb3VzLmluZGV4T2Yoc3RydWN0dXJlKSA+IC0xKVxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzaW5nIGFuIGFycmF5IGZyb20gYW4gYXR0cmlidXRlIG9iamVjdCBhcyBhIERPTSBzcGVjLiBUaGlzIG1heSBiZSBhbiBhdHRlbXB0ZWQgY3Jvc3Mgc2l0ZSBzY3JpcHRpbmcgYXR0YWNrLlwiKTtcbiAgICBsZXQgc3BhY2UgPSB0YWdOYW1lLmluZGV4T2YoXCIgXCIpO1xuICAgIGlmIChzcGFjZSA+IDApIHtcbiAgICAgICAgeG1sTlMgPSB0YWdOYW1lLnNsaWNlKDAsIHNwYWNlKTtcbiAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc2xpY2Uoc3BhY2UgKyAxKTtcbiAgICB9XG4gICAgbGV0IGNvbnRlbnRET007XG4gICAgbGV0IGRvbSA9ICh4bWxOUyA/IGRvYy5jcmVhdGVFbGVtZW50TlMoeG1sTlMsIHRhZ05hbWUpIDogZG9jLmNyZWF0ZUVsZW1lbnQodGFnTmFtZSkpO1xuICAgIGxldCBhdHRycyA9IHN0cnVjdHVyZVsxXSwgc3RhcnQgPSAxO1xuICAgIGlmIChhdHRycyAmJiB0eXBlb2YgYXR0cnMgPT0gXCJvYmplY3RcIiAmJiBhdHRycy5ub2RlVHlwZSA9PSBudWxsICYmICFBcnJheS5pc0FycmF5KGF0dHJzKSkge1xuICAgICAgICBzdGFydCA9IDI7XG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gYXR0cnMpXG4gICAgICAgICAgICBpZiAoYXR0cnNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxldCBzcGFjZSA9IG5hbWUuaW5kZXhPZihcIiBcIik7XG4gICAgICAgICAgICAgICAgaWYgKHNwYWNlID4gMClcbiAgICAgICAgICAgICAgICAgICAgZG9tLnNldEF0dHJpYnV0ZU5TKG5hbWUuc2xpY2UoMCwgc3BhY2UpLCBuYW1lLnNsaWNlKHNwYWNlICsgMSksIGF0dHJzW25hbWVdKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGRvbS5zZXRBdHRyaWJ1dGUobmFtZSwgYXR0cnNbbmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdHJ1Y3R1cmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGNoaWxkID0gc3RydWN0dXJlW2ldO1xuICAgICAgICBpZiAoY2hpbGQgPT09IDApIHtcbiAgICAgICAgICAgIGlmIChpIDwgc3RydWN0dXJlLmxlbmd0aCAtIDEgfHwgaSA+IHN0YXJ0KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiQ29udGVudCBob2xlIG11c3QgYmUgdGhlIG9ubHkgY2hpbGQgb2YgaXRzIHBhcmVudCBub2RlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHsgZG9tLCBjb250ZW50RE9NOiBkb20gfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCB7IGRvbTogaW5uZXIsIGNvbnRlbnRET006IGlubmVyQ29udGVudCB9ID0gcmVuZGVyU3BlYyhkb2MsIGNoaWxkLCB4bWxOUywgYmxvY2tBcnJheXNJbik7XG4gICAgICAgICAgICBkb20uYXBwZW5kQ2hpbGQoaW5uZXIpO1xuICAgICAgICAgICAgaWYgKGlubmVyQ29udGVudCkge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50RE9NKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk11bHRpcGxlIGNvbnRlbnQgaG9sZXNcIik7XG4gICAgICAgICAgICAgICAgY29udGVudERPTSA9IGlubmVyQ29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBkb20sIGNvbnRlbnRET00gfTtcbn1cblxuZXhwb3J0IHsgQ29udGVudE1hdGNoLCBET01QYXJzZXIsIERPTVNlcmlhbGl6ZXIsIEZyYWdtZW50LCBNYXJrLCBNYXJrVHlwZSwgTm9kZSwgTm9kZVJhbmdlLCBOb2RlVHlwZSwgUmVwbGFjZUVycm9yLCBSZXNvbHZlZFBvcywgU2NoZW1hLCBTbGljZSB9O1xuIiwiaW1wb3J0IHsgUmVwbGFjZUVycm9yLCBTbGljZSwgRnJhZ21lbnQsIE1hcmtUeXBlLCBNYXJrIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xuXG4vLyBSZWNvdmVyeSB2YWx1ZXMgZW5jb2RlIGEgcmFuZ2UgaW5kZXggYW5kIGFuIG9mZnNldC4gVGhleSBhcmVcbi8vIHJlcHJlc2VudGVkIGFzIG51bWJlcnMsIGJlY2F1c2UgdG9ucyBvZiB0aGVtIHdpbGwgYmUgY3JlYXRlZCB3aGVuXG4vLyBtYXBwaW5nLCBmb3IgZXhhbXBsZSwgYSBsYXJnZSBudW1iZXIgb2YgZGVjb3JhdGlvbnMuIFRoZSBudW1iZXInc1xuLy8gbG93ZXIgMTYgYml0cyBwcm92aWRlIHRoZSBpbmRleCwgdGhlIHJlbWFpbmluZyBiaXRzIHRoZSBvZmZzZXQuXG4vL1xuLy8gTm90ZTogV2UgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYml0IHNoaWZ0IG9wZXJhdG9ycyB0byBlbi0gYW5kXG4vLyBkZWNvZGUgdGhlc2UsIHNpbmNlIHRob3NlIGNsaXAgdG8gMzIgYml0cywgd2hpY2ggd2UgbWlnaHQgaW4gcmFyZVxuLy8gY2FzZXMgd2FudCB0byBvdmVyZmxvdy4gQSA2NC1iaXQgZmxvYXQgY2FuIHJlcHJlc2VudCA0OC1iaXRcbi8vIGludGVnZXJzIHByZWNpc2VseS5cbmNvbnN0IGxvd2VyMTYgPSAweGZmZmY7XG5jb25zdCBmYWN0b3IxNiA9IE1hdGgucG93KDIsIDE2KTtcbmZ1bmN0aW9uIG1ha2VSZWNvdmVyKGluZGV4LCBvZmZzZXQpIHsgcmV0dXJuIGluZGV4ICsgb2Zmc2V0ICogZmFjdG9yMTY7IH1cbmZ1bmN0aW9uIHJlY292ZXJJbmRleCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgJiBsb3dlcjE2OyB9XG5mdW5jdGlvbiByZWNvdmVyT2Zmc2V0KHZhbHVlKSB7IHJldHVybiAodmFsdWUgLSAodmFsdWUgJiBsb3dlcjE2KSkgLyBmYWN0b3IxNjsgfVxuY29uc3QgREVMX0JFRk9SRSA9IDEsIERFTF9BRlRFUiA9IDIsIERFTF9BQ1JPU1MgPSA0LCBERUxfU0lERSA9IDg7XG4vKipcbkFuIG9iamVjdCByZXByZXNlbnRpbmcgYSBtYXBwZWQgcG9zaXRpb24gd2l0aCBleHRyYVxuaW5mb3JtYXRpb24uXG4qL1xuY2xhc3MgTWFwUmVzdWx0IHtcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBtYXBwZWQgdmVyc2lvbiBvZiB0aGUgcG9zaXRpb24uXG4gICAgKi9cbiAgICBwb3MsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZGVsSW5mbywgXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICByZWNvdmVyKSB7XG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xuICAgICAgICB0aGlzLmRlbEluZm8gPSBkZWxJbmZvO1xuICAgICAgICB0aGlzLnJlY292ZXIgPSByZWNvdmVyO1xuICAgIH1cbiAgICAvKipcbiAgICBUZWxscyB5b3Ugd2hldGhlciB0aGUgcG9zaXRpb24gd2FzIGRlbGV0ZWQsIHRoYXQgaXMsIHdoZXRoZXIgdGhlXG4gICAgc3RlcCByZW1vdmVkIHRoZSB0b2tlbiBvbiB0aGUgc2lkZSBxdWVyaWVkICh2aWEgdGhlIGBhc3NvY2ApXG4gICAgYXJndW1lbnQgZnJvbSB0aGUgZG9jdW1lbnQuXG4gICAgKi9cbiAgICBnZXQgZGVsZXRlZCgpIHsgcmV0dXJuICh0aGlzLmRlbEluZm8gJiBERUxfU0lERSkgPiAwOyB9XG4gICAgLyoqXG4gICAgVGVsbHMgeW91IHdoZXRoZXIgdGhlIHRva2VuIGJlZm9yZSB0aGUgbWFwcGVkIHBvc2l0aW9uIHdhcyBkZWxldGVkLlxuICAgICovXG4gICAgZ2V0IGRlbGV0ZWRCZWZvcmUoKSB7IHJldHVybiAodGhpcy5kZWxJbmZvICYgKERFTF9CRUZPUkUgfCBERUxfQUNST1NTKSkgPiAwOyB9XG4gICAgLyoqXG4gICAgVHJ1ZSB3aGVuIHRoZSB0b2tlbiBhZnRlciB0aGUgbWFwcGVkIHBvc2l0aW9uIHdhcyBkZWxldGVkLlxuICAgICovXG4gICAgZ2V0IGRlbGV0ZWRBZnRlcigpIHsgcmV0dXJuICh0aGlzLmRlbEluZm8gJiAoREVMX0FGVEVSIHwgREVMX0FDUk9TUykpID4gMDsgfVxuICAgIC8qKlxuICAgIFRlbGxzIHdoZXRoZXIgYW55IG9mIHRoZSBzdGVwcyBtYXBwZWQgdGhyb3VnaCBkZWxldGVzIGFjcm9zcyB0aGVcbiAgICBwb3NpdGlvbiAoaW5jbHVkaW5nIGJvdGggdGhlIHRva2VuIGJlZm9yZSBhbmQgYWZ0ZXIgdGhlXG4gICAgcG9zaXRpb24pLlxuICAgICovXG4gICAgZ2V0IGRlbGV0ZWRBY3Jvc3MoKSB7IHJldHVybiAodGhpcy5kZWxJbmZvICYgREVMX0FDUk9TUykgPiAwOyB9XG59XG4vKipcbkEgbWFwIGRlc2NyaWJpbmcgdGhlIGRlbGV0aW9ucyBhbmQgaW5zZXJ0aW9ucyBtYWRlIGJ5IGEgc3RlcCwgd2hpY2hcbmNhbiBiZSB1c2VkIHRvIGZpbmQgdGhlIGNvcnJlc3BvbmRlbmNlIGJldHdlZW4gcG9zaXRpb25zIGluIHRoZVxucHJlLXN0ZXAgdmVyc2lvbiBvZiBhIGRvY3VtZW50IGFuZCB0aGUgc2FtZSBwb3NpdGlvbiBpbiB0aGVcbnBvc3Qtc3RlcCB2ZXJzaW9uLlxuKi9cbmNsYXNzIFN0ZXBNYXAge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIHBvc2l0aW9uIG1hcC4gVGhlIG1vZGlmaWNhdGlvbnMgdG8gdGhlIGRvY3VtZW50IGFyZVxuICAgIHJlcHJlc2VudGVkIGFzIGFuIGFycmF5IG9mIG51bWJlcnMsIGluIHdoaWNoIGVhY2ggZ3JvdXAgb2YgdGhyZWVcbiAgICByZXByZXNlbnRzIGEgbW9kaWZpZWQgY2h1bmsgYXMgYFtzdGFydCwgb2xkU2l6ZSwgbmV3U2l6ZV1gLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICByYW5nZXMsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgaW52ZXJ0ZWQgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLnJhbmdlcyA9IHJhbmdlcztcbiAgICAgICAgdGhpcy5pbnZlcnRlZCA9IGludmVydGVkO1xuICAgICAgICBpZiAoIXJhbmdlcy5sZW5ndGggJiYgU3RlcE1hcC5lbXB0eSlcbiAgICAgICAgICAgIHJldHVybiBTdGVwTWFwLmVtcHR5O1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHJlY292ZXIodmFsdWUpIHtcbiAgICAgICAgbGV0IGRpZmYgPSAwLCBpbmRleCA9IHJlY292ZXJJbmRleCh2YWx1ZSk7XG4gICAgICAgIGlmICghdGhpcy5pbnZlcnRlZClcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXg7IGkrKylcbiAgICAgICAgICAgICAgICBkaWZmICs9IHRoaXMucmFuZ2VzW2kgKiAzICsgMl0gLSB0aGlzLnJhbmdlc1tpICogMyArIDFdO1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZXNbaW5kZXggKiAzXSArIGRpZmYgKyByZWNvdmVyT2Zmc2V0KHZhbHVlKTtcbiAgICB9XG4gICAgbWFwUmVzdWx0KHBvcywgYXNzb2MgPSAxKSB7IHJldHVybiB0aGlzLl9tYXAocG9zLCBhc3NvYywgZmFsc2UpOyB9XG4gICAgbWFwKHBvcywgYXNzb2MgPSAxKSB7IHJldHVybiB0aGlzLl9tYXAocG9zLCBhc3NvYywgdHJ1ZSk7IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIF9tYXAocG9zLCBhc3NvYywgc2ltcGxlKSB7XG4gICAgICAgIGxldCBkaWZmID0gMCwgb2xkSW5kZXggPSB0aGlzLmludmVydGVkID8gMiA6IDEsIG5ld0luZGV4ID0gdGhpcy5pbnZlcnRlZCA/IDEgOiAyO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucmFuZ2VzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnJhbmdlc1tpXSAtICh0aGlzLmludmVydGVkID8gZGlmZiA6IDApO1xuICAgICAgICAgICAgaWYgKHN0YXJ0ID4gcG9zKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgbGV0IG9sZFNpemUgPSB0aGlzLnJhbmdlc1tpICsgb2xkSW5kZXhdLCBuZXdTaXplID0gdGhpcy5yYW5nZXNbaSArIG5ld0luZGV4XSwgZW5kID0gc3RhcnQgKyBvbGRTaXplO1xuICAgICAgICAgICAgaWYgKHBvcyA8PSBlbmQpIHtcbiAgICAgICAgICAgICAgICBsZXQgc2lkZSA9ICFvbGRTaXplID8gYXNzb2MgOiBwb3MgPT0gc3RhcnQgPyAtMSA6IHBvcyA9PSBlbmQgPyAxIDogYXNzb2M7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHN0YXJ0ICsgZGlmZiArIChzaWRlIDwgMCA/IDAgOiBuZXdTaXplKTtcbiAgICAgICAgICAgICAgICBpZiAoc2ltcGxlKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIGxldCByZWNvdmVyID0gcG9zID09IChhc3NvYyA8IDAgPyBzdGFydCA6IGVuZCkgPyBudWxsIDogbWFrZVJlY292ZXIoaSAvIDMsIHBvcyAtIHN0YXJ0KTtcbiAgICAgICAgICAgICAgICBsZXQgZGVsID0gcG9zID09IHN0YXJ0ID8gREVMX0FGVEVSIDogcG9zID09IGVuZCA/IERFTF9CRUZPUkUgOiBERUxfQUNST1NTO1xuICAgICAgICAgICAgICAgIGlmIChhc3NvYyA8IDAgPyBwb3MgIT0gc3RhcnQgOiBwb3MgIT0gZW5kKVxuICAgICAgICAgICAgICAgICAgICBkZWwgfD0gREVMX1NJREU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBNYXBSZXN1bHQocmVzdWx0LCBkZWwsIHJlY292ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlmZiArPSBuZXdTaXplIC0gb2xkU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2ltcGxlID8gcG9zICsgZGlmZiA6IG5ldyBNYXBSZXN1bHQocG9zICsgZGlmZiwgMCwgbnVsbCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgdG91Y2hlcyhwb3MsIHJlY292ZXIpIHtcbiAgICAgICAgbGV0IGRpZmYgPSAwLCBpbmRleCA9IHJlY292ZXJJbmRleChyZWNvdmVyKTtcbiAgICAgICAgbGV0IG9sZEluZGV4ID0gdGhpcy5pbnZlcnRlZCA/IDIgOiAxLCBuZXdJbmRleCA9IHRoaXMuaW52ZXJ0ZWQgPyAxIDogMjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJhbmdlcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5yYW5nZXNbaV0gLSAodGhpcy5pbnZlcnRlZCA/IGRpZmYgOiAwKTtcbiAgICAgICAgICAgIGlmIChzdGFydCA+IHBvcylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGxldCBvbGRTaXplID0gdGhpcy5yYW5nZXNbaSArIG9sZEluZGV4XSwgZW5kID0gc3RhcnQgKyBvbGRTaXplO1xuICAgICAgICAgICAgaWYgKHBvcyA8PSBlbmQgJiYgaSA9PSBpbmRleCAqIDMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBkaWZmICs9IHRoaXMucmFuZ2VzW2kgKyBuZXdJbmRleF0gLSBvbGRTaXplO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ2FsbHMgdGhlIGdpdmVuIGZ1bmN0aW9uIG9uIGVhY2ggb2YgdGhlIGNoYW5nZWQgcmFuZ2VzIGluY2x1ZGVkIGluXG4gICAgdGhpcyBtYXAuXG4gICAgKi9cbiAgICBmb3JFYWNoKGYpIHtcbiAgICAgICAgbGV0IG9sZEluZGV4ID0gdGhpcy5pbnZlcnRlZCA/IDIgOiAxLCBuZXdJbmRleCA9IHRoaXMuaW52ZXJ0ZWQgPyAxIDogMjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGRpZmYgPSAwOyBpIDwgdGhpcy5yYW5nZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHRoaXMucmFuZ2VzW2ldLCBvbGRTdGFydCA9IHN0YXJ0IC0gKHRoaXMuaW52ZXJ0ZWQgPyBkaWZmIDogMCksIG5ld1N0YXJ0ID0gc3RhcnQgKyAodGhpcy5pbnZlcnRlZCA/IDAgOiBkaWZmKTtcbiAgICAgICAgICAgIGxldCBvbGRTaXplID0gdGhpcy5yYW5nZXNbaSArIG9sZEluZGV4XSwgbmV3U2l6ZSA9IHRoaXMucmFuZ2VzW2kgKyBuZXdJbmRleF07XG4gICAgICAgICAgICBmKG9sZFN0YXJ0LCBvbGRTdGFydCArIG9sZFNpemUsIG5ld1N0YXJ0LCBuZXdTdGFydCArIG5ld1NpemUpO1xuICAgICAgICAgICAgZGlmZiArPSBuZXdTaXplIC0gb2xkU2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYW4gaW52ZXJ0ZWQgdmVyc2lvbiBvZiB0aGlzIG1hcC4gVGhlIHJlc3VsdCBjYW4gYmUgdXNlZCB0b1xuICAgIG1hcCBwb3NpdGlvbnMgaW4gdGhlIHBvc3Qtc3RlcCBkb2N1bWVudCB0byB0aGUgcHJlLXN0ZXAgZG9jdW1lbnQuXG4gICAgKi9cbiAgICBpbnZlcnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RlcE1hcCh0aGlzLnJhbmdlcywgIXRoaXMuaW52ZXJ0ZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuaW52ZXJ0ZWQgPyBcIi1cIiA6IFwiXCIpICsgSlNPTi5zdHJpbmdpZnkodGhpcy5yYW5nZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBtYXAgdGhhdCBtb3ZlcyBhbGwgcG9zaXRpb25zIGJ5IG9mZnNldCBgbmAgKHdoaWNoIG1heSBiZVxuICAgIG5lZ2F0aXZlKS4gVGhpcyBjYW4gYmUgdXNlZnVsIHdoZW4gYXBwbHlpbmcgc3RlcHMgbWVhbnQgZm9yIGFcbiAgICBzdWItZG9jdW1lbnQgdG8gYSBsYXJnZXIgZG9jdW1lbnQsIG9yIHZpY2UtdmVyc2EuXG4gICAgKi9cbiAgICBzdGF0aWMgb2Zmc2V0KG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPT0gMCA/IFN0ZXBNYXAuZW1wdHkgOiBuZXcgU3RlcE1hcChuIDwgMCA/IFswLCAtbiwgMF0gOiBbMCwgMCwgbl0pO1xuICAgIH1cbn1cbi8qKlxuQSBTdGVwTWFwIHRoYXQgY29udGFpbnMgbm8gY2hhbmdlZCByYW5nZXMuXG4qL1xuU3RlcE1hcC5lbXB0eSA9IG5ldyBTdGVwTWFwKFtdKTtcbi8qKlxuQSBtYXBwaW5nIHJlcHJlc2VudHMgYSBwaXBlbGluZSBvZiB6ZXJvIG9yIG1vcmUgW3N0ZXBcbm1hcHNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN0cmFuc2Zvcm0uU3RlcE1hcCkuIEl0IGhhcyBzcGVjaWFsIHByb3Zpc2lvbnMgZm9yIGxvc3NsZXNzbHlcbmhhbmRsaW5nIG1hcHBpbmcgcG9zaXRpb25zIHRocm91Z2ggYSBzZXJpZXMgb2Ygc3RlcHMgaW4gd2hpY2ggc29tZVxuc3RlcHMgYXJlIGludmVydGVkIHZlcnNpb25zIG9mIGVhcmxpZXIgc3RlcHMuIChUaGlzIGNvbWVzIHVwIHdoZW5cbuKAmFtyZWJhc2luZ10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9ndWlkZS8jdHJhbnNmb3JtLnJlYmFzaW5nKeKAmSBzdGVwcyBmb3JcbmNvbGxhYm9yYXRpb24gb3IgaGlzdG9yeSBtYW5hZ2VtZW50LilcbiovXG5jbGFzcyBNYXBwaW5nIHtcbiAgICAvKipcbiAgICBDcmVhdGUgYSBuZXcgbWFwcGluZyB3aXRoIHRoZSBnaXZlbiBwb3NpdGlvbiBtYXBzLlxuICAgICovXG4gICAgY29uc3RydWN0b3IobWFwcywgXG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBtaXJyb3IsIFxuICAgIC8qKlxuICAgIFRoZSBzdGFydGluZyBwb3NpdGlvbiBpbiB0aGUgYG1hcHNgIGFycmF5LCB1c2VkIHdoZW4gYG1hcGAgb3JcbiAgICBgbWFwUmVzdWx0YCBpcyBjYWxsZWQuXG4gICAgKi9cbiAgICBmcm9tID0gMCwgXG4gICAgLyoqXG4gICAgVGhlIGVuZCBwb3NpdGlvbiBpbiB0aGUgYG1hcHNgIGFycmF5LlxuICAgICovXG4gICAgdG8gPSBtYXBzID8gbWFwcy5sZW5ndGggOiAwKSB7XG4gICAgICAgIHRoaXMubWlycm9yID0gbWlycm9yO1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLnRvID0gdG87XG4gICAgICAgIHRoaXMuX21hcHMgPSBtYXBzIHx8IFtdO1xuICAgICAgICB0aGlzLm93bkRhdGEgPSAhKG1hcHMgfHwgbWlycm9yKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIHN0ZXAgbWFwcyBpbiB0aGlzIG1hcHBpbmcuXG4gICAgKi9cbiAgICBnZXQgbWFwcygpIHsgcmV0dXJuIHRoaXMuX21hcHM7IH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBtYXBwaW5nIHRoYXQgbWFwcyBvbmx5IHRocm91Z2ggYSBwYXJ0IG9mIHRoaXMgb25lLlxuICAgICovXG4gICAgc2xpY2UoZnJvbSA9IDAsIHRvID0gdGhpcy5tYXBzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbmV3IE1hcHBpbmcodGhpcy5fbWFwcywgdGhpcy5taXJyb3IsIGZyb20sIHRvKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQWRkIGEgc3RlcCBtYXAgdG8gdGhlIGVuZCBvZiB0aGlzIG1hcHBpbmcuIElmIGBtaXJyb3JzYCBpc1xuICAgIGdpdmVuLCBpdCBzaG91bGQgYmUgdGhlIGluZGV4IG9mIHRoZSBzdGVwIG1hcCB0aGF0IGlzIHRoZSBtaXJyb3JcbiAgICBpbWFnZSBvZiB0aGlzIG9uZS5cbiAgICAqL1xuICAgIGFwcGVuZE1hcChtYXAsIG1pcnJvcnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLm93bkRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcHMgPSB0aGlzLl9tYXBzLnNsaWNlKCk7XG4gICAgICAgICAgICB0aGlzLm1pcnJvciA9IHRoaXMubWlycm9yICYmIHRoaXMubWlycm9yLnNsaWNlKCk7XG4gICAgICAgICAgICB0aGlzLm93bkRhdGEgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG8gPSB0aGlzLl9tYXBzLnB1c2gobWFwKTtcbiAgICAgICAgaWYgKG1pcnJvcnMgIT0gbnVsbClcbiAgICAgICAgICAgIHRoaXMuc2V0TWlycm9yKHRoaXMuX21hcHMubGVuZ3RoIC0gMSwgbWlycm9ycyk7XG4gICAgfVxuICAgIC8qKlxuICAgIEFkZCBhbGwgdGhlIHN0ZXAgbWFwcyBpbiBhIGdpdmVuIG1hcHBpbmcgdG8gdGhpcyBvbmUgKHByZXNlcnZpbmdcbiAgICBtaXJyb3JpbmcgaW5mb3JtYXRpb24pLlxuICAgICovXG4gICAgYXBwZW5kTWFwcGluZyhtYXBwaW5nKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBzdGFydFNpemUgPSB0aGlzLl9tYXBzLmxlbmd0aDsgaSA8IG1hcHBpbmcuX21hcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBtaXJyID0gbWFwcGluZy5nZXRNaXJyb3IoaSk7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZE1hcChtYXBwaW5nLl9tYXBzW2ldLCBtaXJyICE9IG51bGwgJiYgbWlyciA8IGkgPyBzdGFydFNpemUgKyBtaXJyIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBGaW5kcyB0aGUgb2Zmc2V0IG9mIHRoZSBzdGVwIG1hcCB0aGF0IG1pcnJvcnMgdGhlIG1hcCBhdCB0aGVcbiAgICBnaXZlbiBvZmZzZXQsIGluIHRoaXMgbWFwcGluZyAoYXMgcGVyIHRoZSBzZWNvbmQgYXJndW1lbnQgdG9cbiAgICBgYXBwZW5kTWFwYCkuXG4gICAgKi9cbiAgICBnZXRNaXJyb3Iobikge1xuICAgICAgICBpZiAodGhpcy5taXJyb3IpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWlycm9yLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1pcnJvcltpXSA9PSBuKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5taXJyb3JbaSArIChpICUgMiA/IC0xIDogMSldO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHNldE1pcnJvcihuLCBtKSB7XG4gICAgICAgIGlmICghdGhpcy5taXJyb3IpXG4gICAgICAgICAgICB0aGlzLm1pcnJvciA9IFtdO1xuICAgICAgICB0aGlzLm1pcnJvci5wdXNoKG4sIG0pO1xuICAgIH1cbiAgICAvKipcbiAgICBBcHBlbmQgdGhlIGludmVyc2Ugb2YgdGhlIGdpdmVuIG1hcHBpbmcgdG8gdGhpcyBvbmUuXG4gICAgKi9cbiAgICBhcHBlbmRNYXBwaW5nSW52ZXJ0ZWQobWFwcGluZykge1xuICAgICAgICBmb3IgKGxldCBpID0gbWFwcGluZy5tYXBzLmxlbmd0aCAtIDEsIHRvdGFsU2l6ZSA9IHRoaXMuX21hcHMubGVuZ3RoICsgbWFwcGluZy5fbWFwcy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgbWlyciA9IG1hcHBpbmcuZ2V0TWlycm9yKGkpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRNYXAobWFwcGluZy5fbWFwc1tpXS5pbnZlcnQoKSwgbWlyciAhPSBudWxsICYmIG1pcnIgPiBpID8gdG90YWxTaXplIC0gbWlyciAtIDEgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhbiBpbnZlcnRlZCB2ZXJzaW9uIG9mIHRoaXMgbWFwcGluZy5cbiAgICAqL1xuICAgIGludmVydCgpIHtcbiAgICAgICAgbGV0IGludmVyc2UgPSBuZXcgTWFwcGluZztcbiAgICAgICAgaW52ZXJzZS5hcHBlbmRNYXBwaW5nSW52ZXJ0ZWQodGhpcyk7XG4gICAgICAgIHJldHVybiBpbnZlcnNlO1xuICAgIH1cbiAgICAvKipcbiAgICBNYXAgYSBwb3NpdGlvbiB0aHJvdWdoIHRoaXMgbWFwcGluZy5cbiAgICAqL1xuICAgIG1hcChwb3MsIGFzc29jID0gMSkge1xuICAgICAgICBpZiAodGhpcy5taXJyb3IpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFwKHBvcywgYXNzb2MsIHRydWUpO1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5mcm9tOyBpIDwgdGhpcy50bzsgaSsrKVxuICAgICAgICAgICAgcG9zID0gdGhpcy5fbWFwc1tpXS5tYXAocG9zLCBhc3NvYyk7XG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgfVxuICAgIC8qKlxuICAgIE1hcCBhIHBvc2l0aW9uIHRocm91Z2ggdGhpcyBtYXBwaW5nLCByZXR1cm5pbmcgYSBtYXBwaW5nXG4gICAgcmVzdWx0LlxuICAgICovXG4gICAgbWFwUmVzdWx0KHBvcywgYXNzb2MgPSAxKSB7IHJldHVybiB0aGlzLl9tYXAocG9zLCBhc3NvYywgZmFsc2UpOyB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBfbWFwKHBvcywgYXNzb2MsIHNpbXBsZSkge1xuICAgICAgICBsZXQgZGVsSW5mbyA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmZyb207IGkgPCB0aGlzLnRvOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBtYXAgPSB0aGlzLl9tYXBzW2ldLCByZXN1bHQgPSBtYXAubWFwUmVzdWx0KHBvcywgYXNzb2MpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5yZWNvdmVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29yciA9IHRoaXMuZ2V0TWlycm9yKGkpO1xuICAgICAgICAgICAgICAgIGlmIChjb3JyICE9IG51bGwgJiYgY29yciA+IGkgJiYgY29yciA8IHRoaXMudG8pIHtcbiAgICAgICAgICAgICAgICAgICAgaSA9IGNvcnI7XG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IHRoaXMuX21hcHNbY29ycl0ucmVjb3ZlcihyZXN1bHQucmVjb3Zlcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbEluZm8gfD0gcmVzdWx0LmRlbEluZm87XG4gICAgICAgICAgICBwb3MgPSByZXN1bHQucG9zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaW1wbGUgPyBwb3MgOiBuZXcgTWFwUmVzdWx0KHBvcywgZGVsSW5mbywgbnVsbCk7XG4gICAgfVxufVxuXG5jb25zdCBzdGVwc0J5SUQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqXG5BIHN0ZXAgb2JqZWN0IHJlcHJlc2VudHMgYW4gYXRvbWljIGNoYW5nZS4gSXQgZ2VuZXJhbGx5IGFwcGxpZXNcbm9ubHkgdG8gdGhlIGRvY3VtZW50IGl0IHdhcyBjcmVhdGVkIGZvciwgc2luY2UgdGhlIHBvc2l0aW9uc1xuc3RvcmVkIGluIGl0IHdpbGwgb25seSBtYWtlIHNlbnNlIGZvciB0aGF0IGRvY3VtZW50LlxuXG5OZXcgc3RlcHMgYXJlIGRlZmluZWQgYnkgY3JlYXRpbmcgY2xhc3NlcyB0aGF0IGV4dGVuZCBgU3RlcGAsXG5vdmVycmlkaW5nIHRoZSBgYXBwbHlgLCBgaW52ZXJ0YCwgYG1hcGAsIGBnZXRNYXBgIGFuZCBgZnJvbUpTT05gXG5tZXRob2RzLCBhbmQgcmVnaXN0ZXJpbmcgeW91ciBjbGFzcyB3aXRoIGEgdW5pcXVlXG5KU09OLXNlcmlhbGl6YXRpb24gaWRlbnRpZmllciB1c2luZ1xuW2BTdGVwLmpzb25JRGBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN0cmFuc2Zvcm0uU3RlcF5qc29uSUQpLlxuKi9cbmNsYXNzIFN0ZXAge1xuICAgIC8qKlxuICAgIEdldCB0aGUgc3RlcCBtYXAgdGhhdCByZXByZXNlbnRzIHRoZSBjaGFuZ2VzIG1hZGUgYnkgdGhpcyBzdGVwLFxuICAgIGFuZCB3aGljaCBjYW4gYmUgdXNlZCB0byB0cmFuc2Zvcm0gYmV0d2VlbiBwb3NpdGlvbnMgaW4gdGhlIG9sZFxuICAgIGFuZCB0aGUgbmV3IGRvY3VtZW50LlxuICAgICovXG4gICAgZ2V0TWFwKCkgeyByZXR1cm4gU3RlcE1hcC5lbXB0eTsgfVxuICAgIC8qKlxuICAgIFRyeSB0byBtZXJnZSB0aGlzIHN0ZXAgd2l0aCBhbm90aGVyIG9uZSwgdG8gYmUgYXBwbGllZCBkaXJlY3RseVxuICAgIGFmdGVyIGl0LiBSZXR1cm5zIHRoZSBtZXJnZWQgc3RlcCB3aGVuIHBvc3NpYmxlLCBudWxsIGlmIHRoZVxuICAgIHN0ZXBzIGNhbid0IGJlIG1lcmdlZC5cbiAgICAqL1xuICAgIG1lcmdlKG90aGVyKSB7IHJldHVybiBudWxsOyB9XG4gICAgLyoqXG4gICAgRGVzZXJpYWxpemUgYSBzdGVwIGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24uIFdpbGwgY2FsbFxuICAgIHRocm91Z2ggdG8gdGhlIHN0ZXAgY2xhc3MnIG93biBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIG1ldGhvZC5cbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tSlNPTihzY2hlbWEsIGpzb24pIHtcbiAgICAgICAgaWYgKCFqc29uIHx8ICFqc29uLnN0ZXBUeXBlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBTdGVwLmZyb21KU09OXCIpO1xuICAgICAgICBsZXQgdHlwZSA9IHN0ZXBzQnlJRFtqc29uLnN0ZXBUeXBlXTtcbiAgICAgICAgaWYgKCF0eXBlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYE5vIHN0ZXAgdHlwZSAke2pzb24uc3RlcFR5cGV9IGRlZmluZWRgKTtcbiAgICAgICAgcmV0dXJuIHR5cGUuZnJvbUpTT04oc2NoZW1hLCBqc29uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVG8gYmUgYWJsZSB0byBzZXJpYWxpemUgc3RlcHMgdG8gSlNPTiwgZWFjaCBzdGVwIG5lZWRzIGEgc3RyaW5nXG4gICAgSUQgdG8gYXR0YWNoIHRvIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uLiBVc2UgdGhpcyBtZXRob2QgdG9cbiAgICByZWdpc3RlciBhbiBJRCBmb3IgeW91ciBzdGVwIGNsYXNzZXMuIFRyeSB0byBwaWNrIHNvbWV0aGluZ1xuICAgIHRoYXQncyB1bmxpa2VseSB0byBjbGFzaCB3aXRoIHN0ZXBzIGZyb20gb3RoZXIgbW9kdWxlcy5cbiAgICAqL1xuICAgIHN0YXRpYyBqc29uSUQoaWQsIHN0ZXBDbGFzcykge1xuICAgICAgICBpZiAoaWQgaW4gc3RlcHNCeUlEKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJEdXBsaWNhdGUgdXNlIG9mIHN0ZXAgSlNPTiBJRCBcIiArIGlkKTtcbiAgICAgICAgc3RlcHNCeUlEW2lkXSA9IHN0ZXBDbGFzcztcbiAgICAgICAgc3RlcENsYXNzLnByb3RvdHlwZS5qc29uSUQgPSBpZDtcbiAgICAgICAgcmV0dXJuIHN0ZXBDbGFzcztcbiAgICB9XG59XG4vKipcblRoZSByZXN1bHQgb2YgW2FwcGx5aW5nXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdHJhbnNmb3JtLlN0ZXAuYXBwbHkpIGEgc3RlcC4gQ29udGFpbnMgZWl0aGVyIGFcbm5ldyBkb2N1bWVudCBvciBhIGZhaWx1cmUgdmFsdWUuXG4qL1xuY2xhc3MgU3RlcFJlc3VsdCB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgdHJhbnNmb3JtZWQgZG9jdW1lbnQsIGlmIHN1Y2Nlc3NmdWwuXG4gICAgKi9cbiAgICBkb2MsIFxuICAgIC8qKlxuICAgIFRoZSBmYWlsdXJlIG1lc3NhZ2UsIGlmIHVuc3VjY2Vzc2Z1bC5cbiAgICAqL1xuICAgIGZhaWxlZCkge1xuICAgICAgICB0aGlzLmRvYyA9IGRvYztcbiAgICAgICAgdGhpcy5mYWlsZWQgPSBmYWlsZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIHN1Y2Nlc3NmdWwgc3RlcCByZXN1bHQuXG4gICAgKi9cbiAgICBzdGF0aWMgb2soZG9jKSB7IHJldHVybiBuZXcgU3RlcFJlc3VsdChkb2MsIG51bGwpOyB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgZmFpbGVkIHN0ZXAgcmVzdWx0LlxuICAgICovXG4gICAgc3RhdGljIGZhaWwobWVzc2FnZSkgeyByZXR1cm4gbmV3IFN0ZXBSZXN1bHQobnVsbCwgbWVzc2FnZSk7IH1cbiAgICAvKipcbiAgICBDYWxsIFtgTm9kZS5yZXBsYWNlYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGUucmVwbGFjZSkgd2l0aCB0aGUgZ2l2ZW5cbiAgICBhcmd1bWVudHMuIENyZWF0ZSBhIHN1Y2Nlc3NmdWwgcmVzdWx0IGlmIGl0IHN1Y2NlZWRzLCBhbmQgYVxuICAgIGZhaWxlZCBvbmUgaWYgaXQgdGhyb3dzIGEgYFJlcGxhY2VFcnJvcmAuXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbVJlcGxhY2UoZG9jLCBmcm9tLCB0bywgc2xpY2UpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBTdGVwUmVzdWx0Lm9rKGRvYy5yZXBsYWNlKGZyb20sIHRvLCBzbGljZSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIFJlcGxhY2VFcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mYWlsKGUubWVzc2FnZSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYXBGcmFnbWVudChmcmFnbWVudCwgZiwgcGFyZW50KSB7XG4gICAgbGV0IG1hcHBlZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnJhZ21lbnQuY2hpbGRDb3VudDsgaSsrKSB7XG4gICAgICAgIGxldCBjaGlsZCA9IGZyYWdtZW50LmNoaWxkKGkpO1xuICAgICAgICBpZiAoY2hpbGQuY29udGVudC5zaXplKVxuICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5jb3B5KG1hcEZyYWdtZW50KGNoaWxkLmNvbnRlbnQsIGYsIGNoaWxkKSk7XG4gICAgICAgIGlmIChjaGlsZC5pc0lubGluZSlcbiAgICAgICAgICAgIGNoaWxkID0gZihjaGlsZCwgcGFyZW50LCBpKTtcbiAgICAgICAgbWFwcGVkLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gRnJhZ21lbnQuZnJvbUFycmF5KG1hcHBlZCk7XG59XG4vKipcbkFkZCBhIG1hcmsgdG8gYWxsIGlubGluZSBjb250ZW50IGJldHdlZW4gdHdvIHBvc2l0aW9ucy5cbiovXG5jbGFzcyBBZGRNYXJrU3RlcCBleHRlbmRzIFN0ZXAge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIG1hcmsgc3RlcC5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBzdGFydCBvZiB0aGUgbWFya2VkIHJhbmdlLlxuICAgICovXG4gICAgZnJvbSwgXG4gICAgLyoqXG4gICAgVGhlIGVuZCBvZiB0aGUgbWFya2VkIHJhbmdlLlxuICAgICovXG4gICAgdG8sIFxuICAgIC8qKlxuICAgIFRoZSBtYXJrIHRvIGFkZC5cbiAgICAqL1xuICAgIG1hcmspIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLm1hcmsgPSBtYXJrO1xuICAgIH1cbiAgICBhcHBseShkb2MpIHtcbiAgICAgICAgbGV0IG9sZFNsaWNlID0gZG9jLnNsaWNlKHRoaXMuZnJvbSwgdGhpcy50byksICRmcm9tID0gZG9jLnJlc29sdmUodGhpcy5mcm9tKTtcbiAgICAgICAgbGV0IHBhcmVudCA9ICRmcm9tLm5vZGUoJGZyb20uc2hhcmVkRGVwdGgodGhpcy50bykpO1xuICAgICAgICBsZXQgc2xpY2UgPSBuZXcgU2xpY2UobWFwRnJhZ21lbnQob2xkU2xpY2UuY29udGVudCwgKG5vZGUsIHBhcmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFub2RlLmlzQXRvbSB8fCAhcGFyZW50LnR5cGUuYWxsb3dzTWFya1R5cGUodGhpcy5tYXJrLnR5cGUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUubWFyayh0aGlzLm1hcmsuYWRkVG9TZXQobm9kZS5tYXJrcykpO1xuICAgICAgICB9LCBwYXJlbnQpLCBvbGRTbGljZS5vcGVuU3RhcnQsIG9sZFNsaWNlLm9wZW5FbmQpO1xuICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mcm9tUmVwbGFjZShkb2MsIHRoaXMuZnJvbSwgdGhpcy50bywgc2xpY2UpO1xuICAgIH1cbiAgICBpbnZlcnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3ZlTWFya1N0ZXAodGhpcy5mcm9tLCB0aGlzLnRvLCB0aGlzLm1hcmspO1xuICAgIH1cbiAgICBtYXAobWFwcGluZykge1xuICAgICAgICBsZXQgZnJvbSA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMuZnJvbSwgMSksIHRvID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy50bywgLTEpO1xuICAgICAgICBpZiAoZnJvbS5kZWxldGVkICYmIHRvLmRlbGV0ZWQgfHwgZnJvbS5wb3MgPj0gdG8ucG9zKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuZXcgQWRkTWFya1N0ZXAoZnJvbS5wb3MsIHRvLnBvcywgdGhpcy5tYXJrKTtcbiAgICB9XG4gICAgbWVyZ2Uob3RoZXIpIHtcbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgQWRkTWFya1N0ZXAgJiZcbiAgICAgICAgICAgIG90aGVyLm1hcmsuZXEodGhpcy5tYXJrKSAmJlxuICAgICAgICAgICAgdGhpcy5mcm9tIDw9IG90aGVyLnRvICYmIHRoaXMudG8gPj0gb3RoZXIuZnJvbSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWRkTWFya1N0ZXAoTWF0aC5taW4odGhpcy5mcm9tLCBvdGhlci5mcm9tKSwgTWF0aC5tYXgodGhpcy50bywgb3RoZXIudG8pLCB0aGlzLm1hcmspO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyBzdGVwVHlwZTogXCJhZGRNYXJrXCIsIG1hcms6IHRoaXMubWFyay50b0pTT04oKSxcbiAgICAgICAgICAgIGZyb206IHRoaXMuZnJvbSwgdG86IHRoaXMudG8gfTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbi5mcm9tICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIGpzb24udG8gIT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgQWRkTWFya1N0ZXAuZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgQWRkTWFya1N0ZXAoanNvbi5mcm9tLCBqc29uLnRvLCBzY2hlbWEubWFya0Zyb21KU09OKGpzb24ubWFyaykpO1xuICAgIH1cbn1cblN0ZXAuanNvbklEKFwiYWRkTWFya1wiLCBBZGRNYXJrU3RlcCk7XG4vKipcblJlbW92ZSBhIG1hcmsgZnJvbSBhbGwgaW5saW5lIGNvbnRlbnQgYmV0d2VlbiB0d28gcG9zaXRpb25zLlxuKi9cbmNsYXNzIFJlbW92ZU1hcmtTdGVwIGV4dGVuZHMgU3RlcCB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbWFyay1yZW1vdmluZyBzdGVwLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHN0YXJ0IG9mIHRoZSB1bm1hcmtlZCByYW5nZS5cbiAgICAqL1xuICAgIGZyb20sIFxuICAgIC8qKlxuICAgIFRoZSBlbmQgb2YgdGhlIHVubWFya2VkIHJhbmdlLlxuICAgICovXG4gICAgdG8sIFxuICAgIC8qKlxuICAgIFRoZSBtYXJrIHRvIHJlbW92ZS5cbiAgICAqL1xuICAgIG1hcmspIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLm1hcmsgPSBtYXJrO1xuICAgIH1cbiAgICBhcHBseShkb2MpIHtcbiAgICAgICAgbGV0IG9sZFNsaWNlID0gZG9jLnNsaWNlKHRoaXMuZnJvbSwgdGhpcy50byk7XG4gICAgICAgIGxldCBzbGljZSA9IG5ldyBTbGljZShtYXBGcmFnbWVudChvbGRTbGljZS5jb250ZW50LCBub2RlID0+IHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLm1hcmsodGhpcy5tYXJrLnJlbW92ZUZyb21TZXQobm9kZS5tYXJrcykpO1xuICAgICAgICB9LCBkb2MpLCBvbGRTbGljZS5vcGVuU3RhcnQsIG9sZFNsaWNlLm9wZW5FbmQpO1xuICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mcm9tUmVwbGFjZShkb2MsIHRoaXMuZnJvbSwgdGhpcy50bywgc2xpY2UpO1xuICAgIH1cbiAgICBpbnZlcnQoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQWRkTWFya1N0ZXAodGhpcy5mcm9tLCB0aGlzLnRvLCB0aGlzLm1hcmspO1xuICAgIH1cbiAgICBtYXAobWFwcGluZykge1xuICAgICAgICBsZXQgZnJvbSA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMuZnJvbSwgMSksIHRvID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy50bywgLTEpO1xuICAgICAgICBpZiAoZnJvbS5kZWxldGVkICYmIHRvLmRlbGV0ZWQgfHwgZnJvbS5wb3MgPj0gdG8ucG9zKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3ZlTWFya1N0ZXAoZnJvbS5wb3MsIHRvLnBvcywgdGhpcy5tYXJrKTtcbiAgICB9XG4gICAgbWVyZ2Uob3RoZXIpIHtcbiAgICAgICAgaWYgKG90aGVyIGluc3RhbmNlb2YgUmVtb3ZlTWFya1N0ZXAgJiZcbiAgICAgICAgICAgIG90aGVyLm1hcmsuZXEodGhpcy5tYXJrKSAmJlxuICAgICAgICAgICAgdGhpcy5mcm9tIDw9IG90aGVyLnRvICYmIHRoaXMudG8gPj0gb3RoZXIuZnJvbSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVtb3ZlTWFya1N0ZXAoTWF0aC5taW4odGhpcy5mcm9tLCBvdGhlci5mcm9tKSwgTWF0aC5tYXgodGhpcy50bywgb3RoZXIudG8pLCB0aGlzLm1hcmspO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyBzdGVwVHlwZTogXCJyZW1vdmVNYXJrXCIsIG1hcms6IHRoaXMubWFyay50b0pTT04oKSxcbiAgICAgICAgICAgIGZyb206IHRoaXMuZnJvbSwgdG86IHRoaXMudG8gfTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbi5mcm9tICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIGpzb24udG8gIT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgUmVtb3ZlTWFya1N0ZXAuZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3ZlTWFya1N0ZXAoanNvbi5mcm9tLCBqc29uLnRvLCBzY2hlbWEubWFya0Zyb21KU09OKGpzb24ubWFyaykpO1xuICAgIH1cbn1cblN0ZXAuanNvbklEKFwicmVtb3ZlTWFya1wiLCBSZW1vdmVNYXJrU3RlcCk7XG4vKipcbkFkZCBhIG1hcmsgdG8gYSBzcGVjaWZpYyBub2RlLlxuKi9cbmNsYXNzIEFkZE5vZGVNYXJrU3RlcCBleHRlbmRzIFN0ZXAge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIG5vZGUgbWFyayBzdGVwLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHBvc2l0aW9uIG9mIHRoZSB0YXJnZXQgbm9kZS5cbiAgICAqL1xuICAgIHBvcywgXG4gICAgLyoqXG4gICAgVGhlIG1hcmsgdG8gYWRkLlxuICAgICovXG4gICAgbWFyaykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICAgICAgdGhpcy5tYXJrID0gbWFyaztcbiAgICB9XG4gICAgYXBwbHkoZG9jKSB7XG4gICAgICAgIGxldCBub2RlID0gZG9jLm5vZGVBdCh0aGlzLnBvcyk7XG4gICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgIHJldHVybiBTdGVwUmVzdWx0LmZhaWwoXCJObyBub2RlIGF0IG1hcmsgc3RlcCdzIHBvc2l0aW9uXCIpO1xuICAgICAgICBsZXQgdXBkYXRlZCA9IG5vZGUudHlwZS5jcmVhdGUobm9kZS5hdHRycywgbnVsbCwgdGhpcy5tYXJrLmFkZFRvU2V0KG5vZGUubWFya3MpKTtcbiAgICAgICAgcmV0dXJuIFN0ZXBSZXN1bHQuZnJvbVJlcGxhY2UoZG9jLCB0aGlzLnBvcywgdGhpcy5wb3MgKyAxLCBuZXcgU2xpY2UoRnJhZ21lbnQuZnJvbSh1cGRhdGVkKSwgMCwgbm9kZS5pc0xlYWYgPyAwIDogMSkpO1xuICAgIH1cbiAgICBpbnZlcnQoZG9jKSB7XG4gICAgICAgIGxldCBub2RlID0gZG9jLm5vZGVBdCh0aGlzLnBvcyk7XG4gICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICBsZXQgbmV3U2V0ID0gdGhpcy5tYXJrLmFkZFRvU2V0KG5vZGUubWFya3MpO1xuICAgICAgICAgICAgaWYgKG5ld1NldC5sZW5ndGggPT0gbm9kZS5tYXJrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUubWFya3MubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9kZS5tYXJrc1tpXS5pc0luU2V0KG5ld1NldCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFkZE5vZGVNYXJrU3RlcCh0aGlzLnBvcywgbm9kZS5tYXJrc1tpXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBZGROb2RlTWFya1N0ZXAodGhpcy5wb3MsIHRoaXMubWFyayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBSZW1vdmVOb2RlTWFya1N0ZXAodGhpcy5wb3MsIHRoaXMubWFyayk7XG4gICAgfVxuICAgIG1hcChtYXBwaW5nKSB7XG4gICAgICAgIGxldCBwb3MgPSBtYXBwaW5nLm1hcFJlc3VsdCh0aGlzLnBvcywgMSk7XG4gICAgICAgIHJldHVybiBwb3MuZGVsZXRlZEFmdGVyID8gbnVsbCA6IG5ldyBBZGROb2RlTWFya1N0ZXAocG9zLnBvcywgdGhpcy5tYXJrKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyBzdGVwVHlwZTogXCJhZGROb2RlTWFya1wiLCBwb3M6IHRoaXMucG9zLCBtYXJrOiB0aGlzLm1hcmsudG9KU09OKCkgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbi5wb3MgIT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgQWRkTm9kZU1hcmtTdGVwLmZyb21KU09OXCIpO1xuICAgICAgICByZXR1cm4gbmV3IEFkZE5vZGVNYXJrU3RlcChqc29uLnBvcywgc2NoZW1hLm1hcmtGcm9tSlNPTihqc29uLm1hcmspKTtcbiAgICB9XG59XG5TdGVwLmpzb25JRChcImFkZE5vZGVNYXJrXCIsIEFkZE5vZGVNYXJrU3RlcCk7XG4vKipcblJlbW92ZSBhIG1hcmsgZnJvbSBhIHNwZWNpZmljIG5vZGUuXG4qL1xuY2xhc3MgUmVtb3ZlTm9kZU1hcmtTdGVwIGV4dGVuZHMgU3RlcCB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbWFyay1yZW1vdmluZyBzdGVwLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHBvc2l0aW9uIG9mIHRoZSB0YXJnZXQgbm9kZS5cbiAgICAqL1xuICAgIHBvcywgXG4gICAgLyoqXG4gICAgVGhlIG1hcmsgdG8gcmVtb3ZlLlxuICAgICovXG4gICAgbWFyaykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICAgICAgdGhpcy5tYXJrID0gbWFyaztcbiAgICB9XG4gICAgYXBwbHkoZG9jKSB7XG4gICAgICAgIGxldCBub2RlID0gZG9jLm5vZGVBdCh0aGlzLnBvcyk7XG4gICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgIHJldHVybiBTdGVwUmVzdWx0LmZhaWwoXCJObyBub2RlIGF0IG1hcmsgc3RlcCdzIHBvc2l0aW9uXCIpO1xuICAgICAgICBsZXQgdXBkYXRlZCA9IG5vZGUudHlwZS5jcmVhdGUobm9kZS5hdHRycywgbnVsbCwgdGhpcy5tYXJrLnJlbW92ZUZyb21TZXQobm9kZS5tYXJrcykpO1xuICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mcm9tUmVwbGFjZShkb2MsIHRoaXMucG9zLCB0aGlzLnBvcyArIDEsIG5ldyBTbGljZShGcmFnbWVudC5mcm9tKHVwZGF0ZWQpLCAwLCBub2RlLmlzTGVhZiA/IDAgOiAxKSk7XG4gICAgfVxuICAgIGludmVydChkb2MpIHtcbiAgICAgICAgbGV0IG5vZGUgPSBkb2Mubm9kZUF0KHRoaXMucG9zKTtcbiAgICAgICAgaWYgKCFub2RlIHx8ICF0aGlzLm1hcmsuaXNJblNldChub2RlLm1hcmtzKSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IEFkZE5vZGVNYXJrU3RlcCh0aGlzLnBvcywgdGhpcy5tYXJrKTtcbiAgICB9XG4gICAgbWFwKG1hcHBpbmcpIHtcbiAgICAgICAgbGV0IHBvcyA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMucG9zLCAxKTtcbiAgICAgICAgcmV0dXJuIHBvcy5kZWxldGVkQWZ0ZXIgPyBudWxsIDogbmV3IFJlbW92ZU5vZGVNYXJrU3RlcChwb3MucG9zLCB0aGlzLm1hcmspO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7IHN0ZXBUeXBlOiBcInJlbW92ZU5vZGVNYXJrXCIsIHBvczogdGhpcy5wb3MsIG1hcms6IHRoaXMubWFyay50b0pTT04oKSB9O1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tSlNPTihzY2hlbWEsIGpzb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBqc29uLnBvcyAhPSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBSZW1vdmVOb2RlTWFya1N0ZXAuZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgUmVtb3ZlTm9kZU1hcmtTdGVwKGpzb24ucG9zLCBzY2hlbWEubWFya0Zyb21KU09OKGpzb24ubWFyaykpO1xuICAgIH1cbn1cblN0ZXAuanNvbklEKFwicmVtb3ZlTm9kZU1hcmtcIiwgUmVtb3ZlTm9kZU1hcmtTdGVwKTtcblxuLyoqXG5SZXBsYWNlIGEgcGFydCBvZiB0aGUgZG9jdW1lbnQgd2l0aCBhIHNsaWNlIG9mIG5ldyBjb250ZW50LlxuKi9cbmNsYXNzIFJlcGxhY2VTdGVwIGV4dGVuZHMgU3RlcCB7XG4gICAgLyoqXG4gICAgVGhlIGdpdmVuIGBzbGljZWAgc2hvdWxkIGZpdCB0aGUgJ2dhcCcgYmV0d2VlbiBgZnJvbWAgYW5kXG4gICAgYHRvYOKAlHRoZSBkZXB0aHMgbXVzdCBsaW5lIHVwLCBhbmQgdGhlIHN1cnJvdW5kaW5nIG5vZGVzIG11c3QgYmVcbiAgICBhYmxlIHRvIGJlIGpvaW5lZCB3aXRoIHRoZSBvcGVuIHNpZGVzIG9mIHRoZSBzbGljZS4gV2hlblxuICAgIGBzdHJ1Y3R1cmVgIGlzIHRydWUsIHRoZSBzdGVwIHdpbGwgZmFpbCBpZiB0aGUgY29udGVudCBiZXR3ZWVuXG4gICAgZnJvbSBhbmQgdG8gaXMgbm90IGp1c3QgYSBzZXF1ZW5jZSBvZiBjbG9zaW5nIGFuZCB0aGVuIG9wZW5pbmdcbiAgICB0b2tlbnMgKHRoaXMgaXMgdG8gZ3VhcmQgYWdhaW5zdCByZWJhc2VkIHJlcGxhY2Ugc3RlcHNcbiAgICBvdmVyd3JpdGluZyBzb21ldGhpbmcgdGhleSB3ZXJlbid0IHN1cHBvc2VkIHRvKS5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVwbGFjZWQgcmFuZ2UuXG4gICAgKi9cbiAgICBmcm9tLCBcbiAgICAvKipcbiAgICBUaGUgZW5kIHBvc2l0aW9uIG9mIHRoZSByZXBsYWNlZCByYW5nZS5cbiAgICAqL1xuICAgIHRvLCBcbiAgICAvKipcbiAgICBUaGUgc2xpY2UgdG8gaW5zZXJ0LlxuICAgICovXG4gICAgc2xpY2UsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RydWN0dXJlID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLnNsaWNlID0gc2xpY2U7XG4gICAgICAgIHRoaXMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuICAgIH1cbiAgICBhcHBseShkb2MpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RydWN0dXJlICYmIGNvbnRlbnRCZXR3ZWVuKGRvYywgdGhpcy5mcm9tLCB0aGlzLnRvKSlcbiAgICAgICAgICAgIHJldHVybiBTdGVwUmVzdWx0LmZhaWwoXCJTdHJ1Y3R1cmUgcmVwbGFjZSB3b3VsZCBvdmVyd3JpdGUgY29udGVudFwiKTtcbiAgICAgICAgcmV0dXJuIFN0ZXBSZXN1bHQuZnJvbVJlcGxhY2UoZG9jLCB0aGlzLmZyb20sIHRoaXMudG8sIHRoaXMuc2xpY2UpO1xuICAgIH1cbiAgICBnZXRNYXAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RlcE1hcChbdGhpcy5mcm9tLCB0aGlzLnRvIC0gdGhpcy5mcm9tLCB0aGlzLnNsaWNlLnNpemVdKTtcbiAgICB9XG4gICAgaW52ZXJ0KGRvYykge1xuICAgICAgICByZXR1cm4gbmV3IFJlcGxhY2VTdGVwKHRoaXMuZnJvbSwgdGhpcy5mcm9tICsgdGhpcy5zbGljZS5zaXplLCBkb2Muc2xpY2UodGhpcy5mcm9tLCB0aGlzLnRvKSk7XG4gICAgfVxuICAgIG1hcChtYXBwaW5nKSB7XG4gICAgICAgIGxldCBmcm9tID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy5mcm9tLCAxKSwgdG8gPSBtYXBwaW5nLm1hcFJlc3VsdCh0aGlzLnRvLCAtMSk7XG4gICAgICAgIGlmIChmcm9tLmRlbGV0ZWRBY3Jvc3MgJiYgdG8uZGVsZXRlZEFjcm9zcylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gbmV3IFJlcGxhY2VTdGVwKGZyb20ucG9zLCBNYXRoLm1heChmcm9tLnBvcywgdG8ucG9zKSwgdGhpcy5zbGljZSwgdGhpcy5zdHJ1Y3R1cmUpO1xuICAgIH1cbiAgICBtZXJnZShvdGhlcikge1xuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFJlcGxhY2VTdGVwKSB8fCBvdGhlci5zdHJ1Y3R1cmUgfHwgdGhpcy5zdHJ1Y3R1cmUpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuZnJvbSArIHRoaXMuc2xpY2Uuc2l6ZSA9PSBvdGhlci5mcm9tICYmICF0aGlzLnNsaWNlLm9wZW5FbmQgJiYgIW90aGVyLnNsaWNlLm9wZW5TdGFydCkge1xuICAgICAgICAgICAgbGV0IHNsaWNlID0gdGhpcy5zbGljZS5zaXplICsgb3RoZXIuc2xpY2Uuc2l6ZSA9PSAwID8gU2xpY2UuZW1wdHlcbiAgICAgICAgICAgICAgICA6IG5ldyBTbGljZSh0aGlzLnNsaWNlLmNvbnRlbnQuYXBwZW5kKG90aGVyLnNsaWNlLmNvbnRlbnQpLCB0aGlzLnNsaWNlLm9wZW5TdGFydCwgb3RoZXIuc2xpY2Uub3BlbkVuZCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlcGxhY2VTdGVwKHRoaXMuZnJvbSwgdGhpcy50byArIChvdGhlci50byAtIG90aGVyLmZyb20pLCBzbGljZSwgdGhpcy5zdHJ1Y3R1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG90aGVyLnRvID09IHRoaXMuZnJvbSAmJiAhdGhpcy5zbGljZS5vcGVuU3RhcnQgJiYgIW90aGVyLnNsaWNlLm9wZW5FbmQpIHtcbiAgICAgICAgICAgIGxldCBzbGljZSA9IHRoaXMuc2xpY2Uuc2l6ZSArIG90aGVyLnNsaWNlLnNpemUgPT0gMCA/IFNsaWNlLmVtcHR5XG4gICAgICAgICAgICAgICAgOiBuZXcgU2xpY2Uob3RoZXIuc2xpY2UuY29udGVudC5hcHBlbmQodGhpcy5zbGljZS5jb250ZW50KSwgb3RoZXIuc2xpY2Uub3BlblN0YXJ0LCB0aGlzLnNsaWNlLm9wZW5FbmQpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZXBsYWNlU3RlcChvdGhlci5mcm9tLCB0aGlzLnRvLCBzbGljZSwgdGhpcy5zdHJ1Y3R1cmUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICBsZXQganNvbiA9IHsgc3RlcFR5cGU6IFwicmVwbGFjZVwiLCBmcm9tOiB0aGlzLmZyb20sIHRvOiB0aGlzLnRvIH07XG4gICAgICAgIGlmICh0aGlzLnNsaWNlLnNpemUpXG4gICAgICAgICAgICBqc29uLnNsaWNlID0gdGhpcy5zbGljZS50b0pTT04oKTtcbiAgICAgICAgaWYgKHRoaXMuc3RydWN0dXJlKVxuICAgICAgICAgICAganNvbi5zdHJ1Y3R1cmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbi5mcm9tICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIGpzb24udG8gIT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgUmVwbGFjZVN0ZXAuZnJvbUpTT05cIik7XG4gICAgICAgIHJldHVybiBuZXcgUmVwbGFjZVN0ZXAoanNvbi5mcm9tLCBqc29uLnRvLCBTbGljZS5mcm9tSlNPTihzY2hlbWEsIGpzb24uc2xpY2UpLCAhIWpzb24uc3RydWN0dXJlKTtcbiAgICB9XG59XG5TdGVwLmpzb25JRChcInJlcGxhY2VcIiwgUmVwbGFjZVN0ZXApO1xuLyoqXG5SZXBsYWNlIGEgcGFydCBvZiB0aGUgZG9jdW1lbnQgd2l0aCBhIHNsaWNlIG9mIGNvbnRlbnQsIGJ1dFxucHJlc2VydmUgYSByYW5nZSBvZiB0aGUgcmVwbGFjZWQgY29udGVudCBieSBtb3ZpbmcgaXQgaW50byB0aGVcbnNsaWNlLlxuKi9cbmNsYXNzIFJlcGxhY2VBcm91bmRTdGVwIGV4dGVuZHMgU3RlcCB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgcmVwbGFjZS1hcm91bmQgc3RlcCB3aXRoIHRoZSBnaXZlbiByYW5nZSBhbmQgZ2FwLlxuICAgIGBpbnNlcnRgIHNob3VsZCBiZSB0aGUgcG9pbnQgaW4gdGhlIHNsaWNlIGludG8gd2hpY2ggdGhlIGNvbnRlbnRcbiAgICBvZiB0aGUgZ2FwIHNob3VsZCBiZSBtb3ZlZC4gYHN0cnVjdHVyZWAgaGFzIHRoZSBzYW1lIG1lYW5pbmcgYXNcbiAgICBpdCBoYXMgaW4gdGhlIFtgUmVwbGFjZVN0ZXBgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdHJhbnNmb3JtLlJlcGxhY2VTdGVwKSBjbGFzcy5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVwbGFjZWQgcmFuZ2UuXG4gICAgKi9cbiAgICBmcm9tLCBcbiAgICAvKipcbiAgICBUaGUgZW5kIHBvc2l0aW9uIG9mIHRoZSByZXBsYWNlZCByYW5nZS5cbiAgICAqL1xuICAgIHRvLCBcbiAgICAvKipcbiAgICBUaGUgc3RhcnQgb2YgcHJlc2VydmVkIHJhbmdlLlxuICAgICovXG4gICAgZ2FwRnJvbSwgXG4gICAgLyoqXG4gICAgVGhlIGVuZCBvZiBwcmVzZXJ2ZWQgcmFuZ2UuXG4gICAgKi9cbiAgICBnYXBUbywgXG4gICAgLyoqXG4gICAgVGhlIHNsaWNlIHRvIGluc2VydC5cbiAgICAqL1xuICAgIHNsaWNlLCBcbiAgICAvKipcbiAgICBUaGUgcG9zaXRpb24gaW4gdGhlIHNsaWNlIHdoZXJlIHRoZSBwcmVzZXJ2ZWQgcmFuZ2Ugc2hvdWxkIGJlXG4gICAgaW5zZXJ0ZWQuXG4gICAgKi9cbiAgICBpbnNlcnQsIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RydWN0dXJlID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLmdhcEZyb20gPSBnYXBGcm9tO1xuICAgICAgICB0aGlzLmdhcFRvID0gZ2FwVG87XG4gICAgICAgIHRoaXMuc2xpY2UgPSBzbGljZTtcbiAgICAgICAgdGhpcy5pbnNlcnQgPSBpbnNlcnQ7XG4gICAgICAgIHRoaXMuc3RydWN0dXJlID0gc3RydWN0dXJlO1xuICAgIH1cbiAgICBhcHBseShkb2MpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RydWN0dXJlICYmIChjb250ZW50QmV0d2Vlbihkb2MsIHRoaXMuZnJvbSwgdGhpcy5nYXBGcm9tKSB8fFxuICAgICAgICAgICAgY29udGVudEJldHdlZW4oZG9jLCB0aGlzLmdhcFRvLCB0aGlzLnRvKSkpXG4gICAgICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mYWlsKFwiU3RydWN0dXJlIGdhcC1yZXBsYWNlIHdvdWxkIG92ZXJ3cml0ZSBjb250ZW50XCIpO1xuICAgICAgICBsZXQgZ2FwID0gZG9jLnNsaWNlKHRoaXMuZ2FwRnJvbSwgdGhpcy5nYXBUbyk7XG4gICAgICAgIGlmIChnYXAub3BlblN0YXJ0IHx8IGdhcC5vcGVuRW5kKVxuICAgICAgICAgICAgcmV0dXJuIFN0ZXBSZXN1bHQuZmFpbChcIkdhcCBpcyBub3QgYSBmbGF0IHJhbmdlXCIpO1xuICAgICAgICBsZXQgaW5zZXJ0ZWQgPSB0aGlzLnNsaWNlLmluc2VydEF0KHRoaXMuaW5zZXJ0LCBnYXAuY29udGVudCk7XG4gICAgICAgIGlmICghaW5zZXJ0ZWQpXG4gICAgICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mYWlsKFwiQ29udGVudCBkb2VzIG5vdCBmaXQgaW4gZ2FwXCIpO1xuICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5mcm9tUmVwbGFjZShkb2MsIHRoaXMuZnJvbSwgdGhpcy50bywgaW5zZXJ0ZWQpO1xuICAgIH1cbiAgICBnZXRNYXAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RlcE1hcChbdGhpcy5mcm9tLCB0aGlzLmdhcEZyb20gLSB0aGlzLmZyb20sIHRoaXMuaW5zZXJ0LFxuICAgICAgICAgICAgdGhpcy5nYXBUbywgdGhpcy50byAtIHRoaXMuZ2FwVG8sIHRoaXMuc2xpY2Uuc2l6ZSAtIHRoaXMuaW5zZXJ0XSk7XG4gICAgfVxuICAgIGludmVydChkb2MpIHtcbiAgICAgICAgbGV0IGdhcCA9IHRoaXMuZ2FwVG8gLSB0aGlzLmdhcEZyb207XG4gICAgICAgIHJldHVybiBuZXcgUmVwbGFjZUFyb3VuZFN0ZXAodGhpcy5mcm9tLCB0aGlzLmZyb20gKyB0aGlzLnNsaWNlLnNpemUgKyBnYXAsIHRoaXMuZnJvbSArIHRoaXMuaW5zZXJ0LCB0aGlzLmZyb20gKyB0aGlzLmluc2VydCArIGdhcCwgZG9jLnNsaWNlKHRoaXMuZnJvbSwgdGhpcy50bykucmVtb3ZlQmV0d2Vlbih0aGlzLmdhcEZyb20gLSB0aGlzLmZyb20sIHRoaXMuZ2FwVG8gLSB0aGlzLmZyb20pLCB0aGlzLmdhcEZyb20gLSB0aGlzLmZyb20sIHRoaXMuc3RydWN0dXJlKTtcbiAgICB9XG4gICAgbWFwKG1hcHBpbmcpIHtcbiAgICAgICAgbGV0IGZyb20gPSBtYXBwaW5nLm1hcFJlc3VsdCh0aGlzLmZyb20sIDEpLCB0byA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMudG8sIC0xKTtcbiAgICAgICAgbGV0IGdhcEZyb20gPSB0aGlzLmZyb20gPT0gdGhpcy5nYXBGcm9tID8gZnJvbS5wb3MgOiBtYXBwaW5nLm1hcCh0aGlzLmdhcEZyb20sIC0xKTtcbiAgICAgICAgbGV0IGdhcFRvID0gdGhpcy50byA9PSB0aGlzLmdhcFRvID8gdG8ucG9zIDogbWFwcGluZy5tYXAodGhpcy5nYXBUbywgMSk7XG4gICAgICAgIGlmICgoZnJvbS5kZWxldGVkQWNyb3NzICYmIHRvLmRlbGV0ZWRBY3Jvc3MpIHx8IGdhcEZyb20gPCBmcm9tLnBvcyB8fCBnYXBUbyA+IHRvLnBvcylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gbmV3IFJlcGxhY2VBcm91bmRTdGVwKGZyb20ucG9zLCB0by5wb3MsIGdhcEZyb20sIGdhcFRvLCB0aGlzLnNsaWNlLCB0aGlzLmluc2VydCwgdGhpcy5zdHJ1Y3R1cmUpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGxldCBqc29uID0geyBzdGVwVHlwZTogXCJyZXBsYWNlQXJvdW5kXCIsIGZyb206IHRoaXMuZnJvbSwgdG86IHRoaXMudG8sXG4gICAgICAgICAgICBnYXBGcm9tOiB0aGlzLmdhcEZyb20sIGdhcFRvOiB0aGlzLmdhcFRvLCBpbnNlcnQ6IHRoaXMuaW5zZXJ0IH07XG4gICAgICAgIGlmICh0aGlzLnNsaWNlLnNpemUpXG4gICAgICAgICAgICBqc29uLnNsaWNlID0gdGhpcy5zbGljZS50b0pTT04oKTtcbiAgICAgICAgaWYgKHRoaXMuc3RydWN0dXJlKVxuICAgICAgICAgICAganNvbi5zdHJ1Y3R1cmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oc2NoZW1hLCBqc29uKSB7XG4gICAgICAgIGlmICh0eXBlb2YganNvbi5mcm9tICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIGpzb24udG8gIT0gXCJudW1iZXJcIiB8fFxuICAgICAgICAgICAgdHlwZW9mIGpzb24uZ2FwRnJvbSAhPSBcIm51bWJlclwiIHx8IHR5cGVvZiBqc29uLmdhcFRvICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIGpzb24uaW5zZXJ0ICE9IFwibnVtYmVyXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIFJlcGxhY2VBcm91bmRTdGVwLmZyb21KU09OXCIpO1xuICAgICAgICByZXR1cm4gbmV3IFJlcGxhY2VBcm91bmRTdGVwKGpzb24uZnJvbSwganNvbi50bywganNvbi5nYXBGcm9tLCBqc29uLmdhcFRvLCBTbGljZS5mcm9tSlNPTihzY2hlbWEsIGpzb24uc2xpY2UpLCBqc29uLmluc2VydCwgISFqc29uLnN0cnVjdHVyZSk7XG4gICAgfVxufVxuU3RlcC5qc29uSUQoXCJyZXBsYWNlQXJvdW5kXCIsIFJlcGxhY2VBcm91bmRTdGVwKTtcbmZ1bmN0aW9uIGNvbnRlbnRCZXR3ZWVuKGRvYywgZnJvbSwgdG8pIHtcbiAgICBsZXQgJGZyb20gPSBkb2MucmVzb2x2ZShmcm9tKSwgZGlzdCA9IHRvIC0gZnJvbSwgZGVwdGggPSAkZnJvbS5kZXB0aDtcbiAgICB3aGlsZSAoZGlzdCA+IDAgJiYgZGVwdGggPiAwICYmICRmcm9tLmluZGV4QWZ0ZXIoZGVwdGgpID09ICRmcm9tLm5vZGUoZGVwdGgpLmNoaWxkQ291bnQpIHtcbiAgICAgICAgZGVwdGgtLTtcbiAgICAgICAgZGlzdC0tO1xuICAgIH1cbiAgICBpZiAoZGlzdCA+IDApIHtcbiAgICAgICAgbGV0IG5leHQgPSAkZnJvbS5ub2RlKGRlcHRoKS5tYXliZUNoaWxkKCRmcm9tLmluZGV4QWZ0ZXIoZGVwdGgpKTtcbiAgICAgICAgd2hpbGUgKGRpc3QgPiAwKSB7XG4gICAgICAgICAgICBpZiAoIW5leHQgfHwgbmV4dC5pc0xlYWYpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBuZXh0ID0gbmV4dC5maXJzdENoaWxkO1xuICAgICAgICAgICAgZGlzdC0tO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWRkTWFyayh0ciwgZnJvbSwgdG8sIG1hcmspIHtcbiAgICBsZXQgcmVtb3ZlZCA9IFtdLCBhZGRlZCA9IFtdO1xuICAgIGxldCByZW1vdmluZywgYWRkaW5nO1xuICAgIHRyLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MsIHBhcmVudCkgPT4ge1xuICAgICAgICBpZiAoIW5vZGUuaXNJbmxpbmUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCBtYXJrcyA9IG5vZGUubWFya3M7XG4gICAgICAgIGlmICghbWFyay5pc0luU2V0KG1hcmtzKSAmJiBwYXJlbnQudHlwZS5hbGxvd3NNYXJrVHlwZShtYXJrLnR5cGUpKSB7XG4gICAgICAgICAgICBsZXQgc3RhcnQgPSBNYXRoLm1heChwb3MsIGZyb20pLCBlbmQgPSBNYXRoLm1pbihwb3MgKyBub2RlLm5vZGVTaXplLCB0byk7XG4gICAgICAgICAgICBsZXQgbmV3U2V0ID0gbWFyay5hZGRUb1NldChtYXJrcyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtYXJrc1tpXS5pc0luU2V0KG5ld1NldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW92aW5nICYmIHJlbW92aW5nLnRvID09IHN0YXJ0ICYmIHJlbW92aW5nLm1hcmsuZXEobWFya3NbaV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZpbmcudG8gPSBlbmQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQucHVzaChyZW1vdmluZyA9IG5ldyBSZW1vdmVNYXJrU3RlcChzdGFydCwgZW5kLCBtYXJrc1tpXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGRpbmcgJiYgYWRkaW5nLnRvID09IHN0YXJ0KVxuICAgICAgICAgICAgICAgIGFkZGluZy50byA9IGVuZDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBhZGRlZC5wdXNoKGFkZGluZyA9IG5ldyBBZGRNYXJrU3RlcChzdGFydCwgZW5kLCBtYXJrKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZW1vdmVkLmZvckVhY2gocyA9PiB0ci5zdGVwKHMpKTtcbiAgICBhZGRlZC5mb3JFYWNoKHMgPT4gdHIuc3RlcChzKSk7XG59XG5mdW5jdGlvbiByZW1vdmVNYXJrKHRyLCBmcm9tLCB0bywgbWFyaykge1xuICAgIGxldCBtYXRjaGVkID0gW10sIHN0ZXAgPSAwO1xuICAgIHRyLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcbiAgICAgICAgaWYgKCFub2RlLmlzSW5saW5lKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzdGVwKys7XG4gICAgICAgIGxldCB0b1JlbW92ZSA9IG51bGw7XG4gICAgICAgIGlmIChtYXJrIGluc3RhbmNlb2YgTWFya1R5cGUpIHtcbiAgICAgICAgICAgIGxldCBzZXQgPSBub2RlLm1hcmtzLCBmb3VuZDtcbiAgICAgICAgICAgIHdoaWxlIChmb3VuZCA9IG1hcmsuaXNJblNldChzZXQpKSB7XG4gICAgICAgICAgICAgICAgKHRvUmVtb3ZlIHx8ICh0b1JlbW92ZSA9IFtdKSkucHVzaChmb3VuZCk7XG4gICAgICAgICAgICAgICAgc2V0ID0gZm91bmQucmVtb3ZlRnJvbVNldChzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1hcmspIHtcbiAgICAgICAgICAgIGlmIChtYXJrLmlzSW5TZXQobm9kZS5tYXJrcykpXG4gICAgICAgICAgICAgICAgdG9SZW1vdmUgPSBbbWFya107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0b1JlbW92ZSA9IG5vZGUubWFya3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvUmVtb3ZlICYmIHRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IGVuZCA9IE1hdGgubWluKHBvcyArIG5vZGUubm9kZVNpemUsIHRvKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9SZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgc3R5bGUgPSB0b1JlbW92ZVtpXSwgZm91bmQ7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXRjaGVkLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtID0gbWF0Y2hlZFtqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG0uc3RlcCA9PSBzdGVwIC0gMSAmJiBzdHlsZS5lcShtYXRjaGVkW2pdLnN0eWxlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kLnRvID0gZW5kO1xuICAgICAgICAgICAgICAgICAgICBmb3VuZC5zdGVwID0gc3RlcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZWQucHVzaCh7IHN0eWxlLCBmcm9tOiBNYXRoLm1heChwb3MsIGZyb20pLCB0bzogZW5kLCBzdGVwIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIG1hdGNoZWQuZm9yRWFjaChtID0+IHRyLnN0ZXAobmV3IFJlbW92ZU1hcmtTdGVwKG0uZnJvbSwgbS50bywgbS5zdHlsZSkpKTtcbn1cbmZ1bmN0aW9uIGNsZWFySW5jb21wYXRpYmxlKHRyLCBwb3MsIHBhcmVudFR5cGUsIG1hdGNoID0gcGFyZW50VHlwZS5jb250ZW50TWF0Y2gsIGNsZWFyTmV3bGluZXMgPSB0cnVlKSB7XG4gICAgbGV0IG5vZGUgPSB0ci5kb2Mubm9kZUF0KHBvcyk7XG4gICAgbGV0IHJlcGxTdGVwcyA9IFtdLCBjdXIgPSBwb3MgKyAxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZENvdW50OyBpKyspIHtcbiAgICAgICAgbGV0IGNoaWxkID0gbm9kZS5jaGlsZChpKSwgZW5kID0gY3VyICsgY2hpbGQubm9kZVNpemU7XG4gICAgICAgIGxldCBhbGxvd2VkID0gbWF0Y2gubWF0Y2hUeXBlKGNoaWxkLnR5cGUpO1xuICAgICAgICBpZiAoIWFsbG93ZWQpIHtcbiAgICAgICAgICAgIHJlcGxTdGVwcy5wdXNoKG5ldyBSZXBsYWNlU3RlcChjdXIsIGVuZCwgU2xpY2UuZW1wdHkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1hdGNoID0gYWxsb3dlZDtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hpbGQubWFya3MubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJlbnRUeXBlLmFsbG93c01hcmtUeXBlKGNoaWxkLm1hcmtzW2pdLnR5cGUpKVxuICAgICAgICAgICAgICAgICAgICB0ci5zdGVwKG5ldyBSZW1vdmVNYXJrU3RlcChjdXIsIGVuZCwgY2hpbGQubWFya3Nbal0pKTtcbiAgICAgICAgICAgIGlmIChjbGVhck5ld2xpbmVzICYmIGNoaWxkLmlzVGV4dCAmJiBwYXJlbnRUeXBlLndoaXRlc3BhY2UgIT0gXCJwcmVcIikge1xuICAgICAgICAgICAgICAgIGxldCBtLCBuZXdsaW5lID0gL1xccj9cXG58XFxyL2csIHNsaWNlO1xuICAgICAgICAgICAgICAgIHdoaWxlIChtID0gbmV3bGluZS5leGVjKGNoaWxkLnRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2xpY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGljZSA9IG5ldyBTbGljZShGcmFnbWVudC5mcm9tKHBhcmVudFR5cGUuc2NoZW1hLnRleHQoXCIgXCIsIHBhcmVudFR5cGUuYWxsb3dlZE1hcmtzKGNoaWxkLm1hcmtzKSkpLCAwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgcmVwbFN0ZXBzLnB1c2gobmV3IFJlcGxhY2VTdGVwKGN1ciArIG0uaW5kZXgsIGN1ciArIG0uaW5kZXggKyBtWzBdLmxlbmd0aCwgc2xpY2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY3VyID0gZW5kO1xuICAgIH1cbiAgICBpZiAoIW1hdGNoLnZhbGlkRW5kKSB7XG4gICAgICAgIGxldCBmaWxsID0gbWF0Y2guZmlsbEJlZm9yZShGcmFnbWVudC5lbXB0eSwgdHJ1ZSk7XG4gICAgICAgIHRyLnJlcGxhY2UoY3VyLCBjdXIsIG5ldyBTbGljZShmaWxsLCAwLCAwKSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSByZXBsU3RlcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgIHRyLnN0ZXAocmVwbFN0ZXBzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2FuQ3V0KG5vZGUsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKHN0YXJ0ID09IDAgfHwgbm9kZS5jYW5SZXBsYWNlKHN0YXJ0LCBub2RlLmNoaWxkQ291bnQpKSAmJlxuICAgICAgICAoZW5kID09IG5vZGUuY2hpbGRDb3VudCB8fCBub2RlLmNhblJlcGxhY2UoMCwgZW5kKSk7XG59XG4vKipcblRyeSB0byBmaW5kIGEgdGFyZ2V0IGRlcHRoIHRvIHdoaWNoIHRoZSBjb250ZW50IGluIHRoZSBnaXZlbiByYW5nZVxuY2FuIGJlIGxpZnRlZC4gV2lsbCBub3QgZ28gYWNyb3NzXG5baXNvbGF0aW5nXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuTm9kZVNwZWMuaXNvbGF0aW5nKSBwYXJlbnQgbm9kZXMuXG4qL1xuZnVuY3Rpb24gbGlmdFRhcmdldChyYW5nZSkge1xuICAgIGxldCBwYXJlbnQgPSByYW5nZS5wYXJlbnQ7XG4gICAgbGV0IGNvbnRlbnQgPSBwYXJlbnQuY29udGVudC5jdXRCeUluZGV4KHJhbmdlLnN0YXJ0SW5kZXgsIHJhbmdlLmVuZEluZGV4KTtcbiAgICBmb3IgKGxldCBkZXB0aCA9IHJhbmdlLmRlcHRoOzsgLS1kZXB0aCkge1xuICAgICAgICBsZXQgbm9kZSA9IHJhbmdlLiRmcm9tLm5vZGUoZGVwdGgpO1xuICAgICAgICBsZXQgaW5kZXggPSByYW5nZS4kZnJvbS5pbmRleChkZXB0aCksIGVuZEluZGV4ID0gcmFuZ2UuJHRvLmluZGV4QWZ0ZXIoZGVwdGgpO1xuICAgICAgICBpZiAoZGVwdGggPCByYW5nZS5kZXB0aCAmJiBub2RlLmNhblJlcGxhY2UoaW5kZXgsIGVuZEluZGV4LCBjb250ZW50KSlcbiAgICAgICAgICAgIHJldHVybiBkZXB0aDtcbiAgICAgICAgaWYgKGRlcHRoID09IDAgfHwgbm9kZS50eXBlLnNwZWMuaXNvbGF0aW5nIHx8ICFjYW5DdXQobm9kZSwgaW5kZXgsIGVuZEluZGV4KSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGxpZnQodHIsIHJhbmdlLCB0YXJnZXQpIHtcbiAgICBsZXQgeyAkZnJvbSwgJHRvLCBkZXB0aCB9ID0gcmFuZ2U7XG4gICAgbGV0IGdhcFN0YXJ0ID0gJGZyb20uYmVmb3JlKGRlcHRoICsgMSksIGdhcEVuZCA9ICR0by5hZnRlcihkZXB0aCArIDEpO1xuICAgIGxldCBzdGFydCA9IGdhcFN0YXJ0LCBlbmQgPSBnYXBFbmQ7XG4gICAgbGV0IGJlZm9yZSA9IEZyYWdtZW50LmVtcHR5LCBvcGVuU3RhcnQgPSAwO1xuICAgIGZvciAobGV0IGQgPSBkZXB0aCwgc3BsaXR0aW5nID0gZmFsc2U7IGQgPiB0YXJnZXQ7IGQtLSlcbiAgICAgICAgaWYgKHNwbGl0dGluZyB8fCAkZnJvbS5pbmRleChkKSA+IDApIHtcbiAgICAgICAgICAgIHNwbGl0dGluZyA9IHRydWU7XG4gICAgICAgICAgICBiZWZvcmUgPSBGcmFnbWVudC5mcm9tKCRmcm9tLm5vZGUoZCkuY29weShiZWZvcmUpKTtcbiAgICAgICAgICAgIG9wZW5TdGFydCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnQtLTtcbiAgICAgICAgfVxuICAgIGxldCBhZnRlciA9IEZyYWdtZW50LmVtcHR5LCBvcGVuRW5kID0gMDtcbiAgICBmb3IgKGxldCBkID0gZGVwdGgsIHNwbGl0dGluZyA9IGZhbHNlOyBkID4gdGFyZ2V0OyBkLS0pXG4gICAgICAgIGlmIChzcGxpdHRpbmcgfHwgJHRvLmFmdGVyKGQgKyAxKSA8ICR0by5lbmQoZCkpIHtcbiAgICAgICAgICAgIHNwbGl0dGluZyA9IHRydWU7XG4gICAgICAgICAgICBhZnRlciA9IEZyYWdtZW50LmZyb20oJHRvLm5vZGUoZCkuY29weShhZnRlcikpO1xuICAgICAgICAgICAgb3BlbkVuZCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZW5kKys7XG4gICAgICAgIH1cbiAgICB0ci5zdGVwKG5ldyBSZXBsYWNlQXJvdW5kU3RlcChzdGFydCwgZW5kLCBnYXBTdGFydCwgZ2FwRW5kLCBuZXcgU2xpY2UoYmVmb3JlLmFwcGVuZChhZnRlciksIG9wZW5TdGFydCwgb3BlbkVuZCksIGJlZm9yZS5zaXplIC0gb3BlblN0YXJ0LCB0cnVlKSk7XG59XG4vKipcblRyeSB0byBmaW5kIGEgdmFsaWQgd2F5IHRvIHdyYXAgdGhlIGNvbnRlbnQgaW4gdGhlIGdpdmVuIHJhbmdlIGluIGFcbm5vZGUgb2YgdGhlIGdpdmVuIHR5cGUuIE1heSBpbnRyb2R1Y2UgZXh0cmEgbm9kZXMgYXJvdW5kIGFuZCBpbnNpZGVcbnRoZSB3cmFwcGVyIG5vZGUsIGlmIG5lY2Vzc2FyeS4gUmV0dXJucyBudWxsIGlmIG5vIHZhbGlkIHdyYXBwaW5nXG5jb3VsZCBiZSBmb3VuZC4gV2hlbiBgaW5uZXJSYW5nZWAgaXMgZ2l2ZW4sIHRoYXQgcmFuZ2UncyBjb250ZW50IGlzXG51c2VkIGFzIHRoZSBjb250ZW50IHRvIGZpdCBpbnRvIHRoZSB3cmFwcGluZywgaW5zdGVhZCBvZiB0aGVcbmNvbnRlbnQgb2YgYHJhbmdlYC5cbiovXG5mdW5jdGlvbiBmaW5kV3JhcHBpbmcocmFuZ2UsIG5vZGVUeXBlLCBhdHRycyA9IG51bGwsIGlubmVyUmFuZ2UgPSByYW5nZSkge1xuICAgIGxldCBhcm91bmQgPSBmaW5kV3JhcHBpbmdPdXRzaWRlKHJhbmdlLCBub2RlVHlwZSk7XG4gICAgbGV0IGlubmVyID0gYXJvdW5kICYmIGZpbmRXcmFwcGluZ0luc2lkZShpbm5lclJhbmdlLCBub2RlVHlwZSk7XG4gICAgaWYgKCFpbm5lcilcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIGFyb3VuZC5tYXAod2l0aEF0dHJzKVxuICAgICAgICAuY29uY2F0KHsgdHlwZTogbm9kZVR5cGUsIGF0dHJzIH0pLmNvbmNhdChpbm5lci5tYXAod2l0aEF0dHJzKSk7XG59XG5mdW5jdGlvbiB3aXRoQXR0cnModHlwZSkgeyByZXR1cm4geyB0eXBlLCBhdHRyczogbnVsbCB9OyB9XG5mdW5jdGlvbiBmaW5kV3JhcHBpbmdPdXRzaWRlKHJhbmdlLCB0eXBlKSB7XG4gICAgbGV0IHsgcGFyZW50LCBzdGFydEluZGV4LCBlbmRJbmRleCB9ID0gcmFuZ2U7XG4gICAgbGV0IGFyb3VuZCA9IHBhcmVudC5jb250ZW50TWF0Y2hBdChzdGFydEluZGV4KS5maW5kV3JhcHBpbmcodHlwZSk7XG4gICAgaWYgKCFhcm91bmQpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBvdXRlciA9IGFyb3VuZC5sZW5ndGggPyBhcm91bmRbMF0gOiB0eXBlO1xuICAgIHJldHVybiBwYXJlbnQuY2FuUmVwbGFjZVdpdGgoc3RhcnRJbmRleCwgZW5kSW5kZXgsIG91dGVyKSA/IGFyb3VuZCA6IG51bGw7XG59XG5mdW5jdGlvbiBmaW5kV3JhcHBpbmdJbnNpZGUocmFuZ2UsIHR5cGUpIHtcbiAgICBsZXQgeyBwYXJlbnQsIHN0YXJ0SW5kZXgsIGVuZEluZGV4IH0gPSByYW5nZTtcbiAgICBsZXQgaW5uZXIgPSBwYXJlbnQuY2hpbGQoc3RhcnRJbmRleCk7XG4gICAgbGV0IGluc2lkZSA9IHR5cGUuY29udGVudE1hdGNoLmZpbmRXcmFwcGluZyhpbm5lci50eXBlKTtcbiAgICBpZiAoIWluc2lkZSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IGxhc3RUeXBlID0gaW5zaWRlLmxlbmd0aCA/IGluc2lkZVtpbnNpZGUubGVuZ3RoIC0gMV0gOiB0eXBlO1xuICAgIGxldCBpbm5lck1hdGNoID0gbGFzdFR5cGUuY29udGVudE1hdGNoO1xuICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpbm5lck1hdGNoICYmIGkgPCBlbmRJbmRleDsgaSsrKVxuICAgICAgICBpbm5lck1hdGNoID0gaW5uZXJNYXRjaC5tYXRjaFR5cGUocGFyZW50LmNoaWxkKGkpLnR5cGUpO1xuICAgIGlmICghaW5uZXJNYXRjaCB8fCAhaW5uZXJNYXRjaC52YWxpZEVuZClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIGluc2lkZTtcbn1cbmZ1bmN0aW9uIHdyYXAodHIsIHJhbmdlLCB3cmFwcGVycykge1xuICAgIGxldCBjb250ZW50ID0gRnJhZ21lbnQuZW1wdHk7XG4gICAgZm9yIChsZXQgaSA9IHdyYXBwZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmIChjb250ZW50LnNpemUpIHtcbiAgICAgICAgICAgIGxldCBtYXRjaCA9IHdyYXBwZXJzW2ldLnR5cGUuY29udGVudE1hdGNoLm1hdGNoRnJhZ21lbnQoY29udGVudCk7XG4gICAgICAgICAgICBpZiAoIW1hdGNoIHx8ICFtYXRjaC52YWxpZEVuZClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIldyYXBwZXIgdHlwZSBnaXZlbiB0byBUcmFuc2Zvcm0ud3JhcCBkb2VzIG5vdCBmb3JtIHZhbGlkIGNvbnRlbnQgb2YgaXRzIHBhcmVudCB3cmFwcGVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRlbnQgPSBGcmFnbWVudC5mcm9tKHdyYXBwZXJzW2ldLnR5cGUuY3JlYXRlKHdyYXBwZXJzW2ldLmF0dHJzLCBjb250ZW50KSk7XG4gICAgfVxuICAgIGxldCBzdGFydCA9IHJhbmdlLnN0YXJ0LCBlbmQgPSByYW5nZS5lbmQ7XG4gICAgdHIuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoc3RhcnQsIGVuZCwgc3RhcnQsIGVuZCwgbmV3IFNsaWNlKGNvbnRlbnQsIDAsIDApLCB3cmFwcGVycy5sZW5ndGgsIHRydWUpKTtcbn1cbmZ1bmN0aW9uIHNldEJsb2NrVHlwZSh0ciwgZnJvbSwgdG8sIHR5cGUsIGF0dHJzKSB7XG4gICAgaWYgKCF0eXBlLmlzVGV4dGJsb2NrKVxuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlR5cGUgZ2l2ZW4gdG8gc2V0QmxvY2tUeXBlIHNob3VsZCBiZSBhIHRleHRibG9ja1wiKTtcbiAgICBsZXQgbWFwRnJvbSA9IHRyLnN0ZXBzLmxlbmd0aDtcbiAgICB0ci5kb2Mubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zKSA9PiB7XG4gICAgICAgIGxldCBhdHRyc0hlcmUgPSB0eXBlb2YgYXR0cnMgPT0gXCJmdW5jdGlvblwiID8gYXR0cnMobm9kZSkgOiBhdHRycztcbiAgICAgICAgaWYgKG5vZGUuaXNUZXh0YmxvY2sgJiYgIW5vZGUuaGFzTWFya3VwKHR5cGUsIGF0dHJzSGVyZSkgJiZcbiAgICAgICAgICAgIGNhbkNoYW5nZVR5cGUodHIuZG9jLCB0ci5tYXBwaW5nLnNsaWNlKG1hcEZyb20pLm1hcChwb3MpLCB0eXBlKSkge1xuICAgICAgICAgICAgbGV0IGNvbnZlcnROZXdsaW5lcyA9IG51bGw7XG4gICAgICAgICAgICBpZiAodHlwZS5zY2hlbWEubGluZWJyZWFrUmVwbGFjZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJlID0gdHlwZS53aGl0ZXNwYWNlID09IFwicHJlXCIsIHN1cHBvcnRMaW5lYnJlYWsgPSAhIXR5cGUuY29udGVudE1hdGNoLm1hdGNoVHlwZSh0eXBlLnNjaGVtYS5saW5lYnJlYWtSZXBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgaWYgKHByZSAmJiAhc3VwcG9ydExpbmVicmVhaylcbiAgICAgICAgICAgICAgICAgICAgY29udmVydE5ld2xpbmVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXByZSAmJiBzdXBwb3J0TGluZWJyZWFrKVxuICAgICAgICAgICAgICAgICAgICBjb252ZXJ0TmV3bGluZXMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRW5zdXJlIGFsbCBtYXJrdXAgdGhhdCBpc24ndCBhbGxvd2VkIGluIHRoZSBuZXcgbm9kZSB0eXBlIGlzIGNsZWFyZWRcbiAgICAgICAgICAgIGlmIChjb252ZXJ0TmV3bGluZXMgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHJlcGxhY2VMaW5lYnJlYWtzKHRyLCBub2RlLCBwb3MsIG1hcEZyb20pO1xuICAgICAgICAgICAgY2xlYXJJbmNvbXBhdGlibGUodHIsIHRyLm1hcHBpbmcuc2xpY2UobWFwRnJvbSkubWFwKHBvcywgMSksIHR5cGUsIHVuZGVmaW5lZCwgY29udmVydE5ld2xpbmVzID09PSBudWxsKTtcbiAgICAgICAgICAgIGxldCBtYXBwaW5nID0gdHIubWFwcGluZy5zbGljZShtYXBGcm9tKTtcbiAgICAgICAgICAgIGxldCBzdGFydE0gPSBtYXBwaW5nLm1hcChwb3MsIDEpLCBlbmRNID0gbWFwcGluZy5tYXAocG9zICsgbm9kZS5ub2RlU2l6ZSwgMSk7XG4gICAgICAgICAgICB0ci5zdGVwKG5ldyBSZXBsYWNlQXJvdW5kU3RlcChzdGFydE0sIGVuZE0sIHN0YXJ0TSArIDEsIGVuZE0gLSAxLCBuZXcgU2xpY2UoRnJhZ21lbnQuZnJvbSh0eXBlLmNyZWF0ZShhdHRyc0hlcmUsIG51bGwsIG5vZGUubWFya3MpKSwgMCwgMCksIDEsIHRydWUpKTtcbiAgICAgICAgICAgIGlmIChjb252ZXJ0TmV3bGluZXMgPT09IHRydWUpXG4gICAgICAgICAgICAgICAgcmVwbGFjZU5ld2xpbmVzKHRyLCBub2RlLCBwb3MsIG1hcEZyb20pO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiByZXBsYWNlTmV3bGluZXModHIsIG5vZGUsIHBvcywgbWFwRnJvbSkge1xuICAgIG5vZGUuZm9yRWFjaCgoY2hpbGQsIG9mZnNldCkgPT4ge1xuICAgICAgICBpZiAoY2hpbGQuaXNUZXh0KSB7XG4gICAgICAgICAgICBsZXQgbSwgbmV3bGluZSA9IC9cXHI/XFxufFxcci9nO1xuICAgICAgICAgICAgd2hpbGUgKG0gPSBuZXdsaW5lLmV4ZWMoY2hpbGQudGV4dCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnQgPSB0ci5tYXBwaW5nLnNsaWNlKG1hcEZyb20pLm1hcChwb3MgKyAxICsgb2Zmc2V0ICsgbS5pbmRleCk7XG4gICAgICAgICAgICAgICAgdHIucmVwbGFjZVdpdGgoc3RhcnQsIHN0YXJ0ICsgMSwgbm9kZS50eXBlLnNjaGVtYS5saW5lYnJlYWtSZXBsYWNlbWVudC5jcmVhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHJlcGxhY2VMaW5lYnJlYWtzKHRyLCBub2RlLCBwb3MsIG1hcEZyb20pIHtcbiAgICBub2RlLmZvckVhY2goKGNoaWxkLCBvZmZzZXQpID0+IHtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT0gY2hpbGQudHlwZS5zY2hlbWEubGluZWJyZWFrUmVwbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIGxldCBzdGFydCA9IHRyLm1hcHBpbmcuc2xpY2UobWFwRnJvbSkubWFwKHBvcyArIDEgKyBvZmZzZXQpO1xuICAgICAgICAgICAgdHIucmVwbGFjZVdpdGgoc3RhcnQsIHN0YXJ0ICsgMSwgbm9kZS50eXBlLnNjaGVtYS50ZXh0KFwiXFxuXCIpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gY2FuQ2hhbmdlVHlwZShkb2MsIHBvcywgdHlwZSkge1xuICAgIGxldCAkcG9zID0gZG9jLnJlc29sdmUocG9zKSwgaW5kZXggPSAkcG9zLmluZGV4KCk7XG4gICAgcmV0dXJuICRwb3MucGFyZW50LmNhblJlcGxhY2VXaXRoKGluZGV4LCBpbmRleCArIDEsIHR5cGUpO1xufVxuLyoqXG5DaGFuZ2UgdGhlIHR5cGUsIGF0dHJpYnV0ZXMsIGFuZC9vciBtYXJrcyBvZiB0aGUgbm9kZSBhdCBgcG9zYC5cbldoZW4gYHR5cGVgIGlzbid0IGdpdmVuLCB0aGUgZXhpc3Rpbmcgbm9kZSB0eXBlIGlzIHByZXNlcnZlZCxcbiovXG5mdW5jdGlvbiBzZXROb2RlTWFya3VwKHRyLCBwb3MsIHR5cGUsIGF0dHJzLCBtYXJrcykge1xuICAgIGxldCBub2RlID0gdHIuZG9jLm5vZGVBdChwb3MpO1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJObyBub2RlIGF0IGdpdmVuIHBvc2l0aW9uXCIpO1xuICAgIGlmICghdHlwZSlcbiAgICAgICAgdHlwZSA9IG5vZGUudHlwZTtcbiAgICBsZXQgbmV3Tm9kZSA9IHR5cGUuY3JlYXRlKGF0dHJzLCBudWxsLCBtYXJrcyB8fCBub2RlLm1hcmtzKTtcbiAgICBpZiAobm9kZS5pc0xlYWYpXG4gICAgICAgIHJldHVybiB0ci5yZXBsYWNlV2l0aChwb3MsIHBvcyArIG5vZGUubm9kZVNpemUsIG5ld05vZGUpO1xuICAgIGlmICghdHlwZS52YWxpZENvbnRlbnQobm9kZS5jb250ZW50KSlcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGNvbnRlbnQgZm9yIG5vZGUgdHlwZSBcIiArIHR5cGUubmFtZSk7XG4gICAgdHIuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAocG9zLCBwb3MgKyBub2RlLm5vZGVTaXplLCBwb3MgKyAxLCBwb3MgKyBub2RlLm5vZGVTaXplIC0gMSwgbmV3IFNsaWNlKEZyYWdtZW50LmZyb20obmV3Tm9kZSksIDAsIDApLCAxLCB0cnVlKSk7XG59XG4vKipcbkNoZWNrIHdoZXRoZXIgc3BsaXR0aW5nIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBpcyBhbGxvd2VkLlxuKi9cbmZ1bmN0aW9uIGNhblNwbGl0KGRvYywgcG9zLCBkZXB0aCA9IDEsIHR5cGVzQWZ0ZXIpIHtcbiAgICBsZXQgJHBvcyA9IGRvYy5yZXNvbHZlKHBvcyksIGJhc2UgPSAkcG9zLmRlcHRoIC0gZGVwdGg7XG4gICAgbGV0IGlubmVyVHlwZSA9ICh0eXBlc0FmdGVyICYmIHR5cGVzQWZ0ZXJbdHlwZXNBZnRlci5sZW5ndGggLSAxXSkgfHwgJHBvcy5wYXJlbnQ7XG4gICAgaWYgKGJhc2UgPCAwIHx8ICRwb3MucGFyZW50LnR5cGUuc3BlYy5pc29sYXRpbmcgfHxcbiAgICAgICAgISRwb3MucGFyZW50LmNhblJlcGxhY2UoJHBvcy5pbmRleCgpLCAkcG9zLnBhcmVudC5jaGlsZENvdW50KSB8fFxuICAgICAgICAhaW5uZXJUeXBlLnR5cGUudmFsaWRDb250ZW50KCRwb3MucGFyZW50LmNvbnRlbnQuY3V0QnlJbmRleCgkcG9zLmluZGV4KCksICRwb3MucGFyZW50LmNoaWxkQ291bnQpKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IGQgPSAkcG9zLmRlcHRoIC0gMSwgaSA9IGRlcHRoIC0gMjsgZCA+IGJhc2U7IGQtLSwgaS0tKSB7XG4gICAgICAgIGxldCBub2RlID0gJHBvcy5ub2RlKGQpLCBpbmRleCA9ICRwb3MuaW5kZXgoZCk7XG4gICAgICAgIGlmIChub2RlLnR5cGUuc3BlYy5pc29sYXRpbmcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCByZXN0ID0gbm9kZS5jb250ZW50LmN1dEJ5SW5kZXgoaW5kZXgsIG5vZGUuY2hpbGRDb3VudCk7XG4gICAgICAgIGxldCBvdmVycmlkZUNoaWxkID0gdHlwZXNBZnRlciAmJiB0eXBlc0FmdGVyW2kgKyAxXTtcbiAgICAgICAgaWYgKG92ZXJyaWRlQ2hpbGQpXG4gICAgICAgICAgICByZXN0ID0gcmVzdC5yZXBsYWNlQ2hpbGQoMCwgb3ZlcnJpZGVDaGlsZC50eXBlLmNyZWF0ZShvdmVycmlkZUNoaWxkLmF0dHJzKSk7XG4gICAgICAgIGxldCBhZnRlciA9ICh0eXBlc0FmdGVyICYmIHR5cGVzQWZ0ZXJbaV0pIHx8IG5vZGU7XG4gICAgICAgIGlmICghbm9kZS5jYW5SZXBsYWNlKGluZGV4ICsgMSwgbm9kZS5jaGlsZENvdW50KSB8fCAhYWZ0ZXIudHlwZS52YWxpZENvbnRlbnQocmVzdCkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBpbmRleCA9ICRwb3MuaW5kZXhBZnRlcihiYXNlKTtcbiAgICBsZXQgYmFzZVR5cGUgPSB0eXBlc0FmdGVyICYmIHR5cGVzQWZ0ZXJbMF07XG4gICAgcmV0dXJuICRwb3Mubm9kZShiYXNlKS5jYW5SZXBsYWNlV2l0aChpbmRleCwgaW5kZXgsIGJhc2VUeXBlID8gYmFzZVR5cGUudHlwZSA6ICRwb3Mubm9kZShiYXNlICsgMSkudHlwZSk7XG59XG5mdW5jdGlvbiBzcGxpdCh0ciwgcG9zLCBkZXB0aCA9IDEsIHR5cGVzQWZ0ZXIpIHtcbiAgICBsZXQgJHBvcyA9IHRyLmRvYy5yZXNvbHZlKHBvcyksIGJlZm9yZSA9IEZyYWdtZW50LmVtcHR5LCBhZnRlciA9IEZyYWdtZW50LmVtcHR5O1xuICAgIGZvciAobGV0IGQgPSAkcG9zLmRlcHRoLCBlID0gJHBvcy5kZXB0aCAtIGRlcHRoLCBpID0gZGVwdGggLSAxOyBkID4gZTsgZC0tLCBpLS0pIHtcbiAgICAgICAgYmVmb3JlID0gRnJhZ21lbnQuZnJvbSgkcG9zLm5vZGUoZCkuY29weShiZWZvcmUpKTtcbiAgICAgICAgbGV0IHR5cGVBZnRlciA9IHR5cGVzQWZ0ZXIgJiYgdHlwZXNBZnRlcltpXTtcbiAgICAgICAgYWZ0ZXIgPSBGcmFnbWVudC5mcm9tKHR5cGVBZnRlciA/IHR5cGVBZnRlci50eXBlLmNyZWF0ZSh0eXBlQWZ0ZXIuYXR0cnMsIGFmdGVyKSA6ICRwb3Mubm9kZShkKS5jb3B5KGFmdGVyKSk7XG4gICAgfVxuICAgIHRyLnN0ZXAobmV3IFJlcGxhY2VTdGVwKHBvcywgcG9zLCBuZXcgU2xpY2UoYmVmb3JlLmFwcGVuZChhZnRlciksIGRlcHRoLCBkZXB0aCksIHRydWUpKTtcbn1cbi8qKlxuVGVzdCB3aGV0aGVyIHRoZSBibG9ja3MgYmVmb3JlIGFuZCBhZnRlciBhIGdpdmVuIHBvc2l0aW9uIGNhbiBiZVxuam9pbmVkLlxuKi9cbmZ1bmN0aW9uIGNhbkpvaW4oZG9jLCBwb3MpIHtcbiAgICBsZXQgJHBvcyA9IGRvYy5yZXNvbHZlKHBvcyksIGluZGV4ID0gJHBvcy5pbmRleCgpO1xuICAgIHJldHVybiBqb2luYWJsZSgkcG9zLm5vZGVCZWZvcmUsICRwb3Mubm9kZUFmdGVyKSAmJlxuICAgICAgICAkcG9zLnBhcmVudC5jYW5SZXBsYWNlKGluZGV4LCBpbmRleCArIDEpO1xufVxuZnVuY3Rpb24gY2FuQXBwZW5kV2l0aFN1YnN0aXR1dGVkTGluZWJyZWFrcyhhLCBiKSB7XG4gICAgaWYgKCFiLmNvbnRlbnQuc2l6ZSlcbiAgICAgICAgYS50eXBlLmNvbXBhdGlibGVDb250ZW50KGIudHlwZSk7XG4gICAgbGV0IG1hdGNoID0gYS5jb250ZW50TWF0Y2hBdChhLmNoaWxkQ291bnQpO1xuICAgIGxldCB7IGxpbmVicmVha1JlcGxhY2VtZW50IH0gPSBhLnR5cGUuc2NoZW1hO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYi5jaGlsZENvdW50OyBpKyspIHtcbiAgICAgICAgbGV0IGNoaWxkID0gYi5jaGlsZChpKTtcbiAgICAgICAgbGV0IHR5cGUgPSBjaGlsZC50eXBlID09IGxpbmVicmVha1JlcGxhY2VtZW50ID8gYS50eXBlLnNjaGVtYS5ub2Rlcy50ZXh0IDogY2hpbGQudHlwZTtcbiAgICAgICAgbWF0Y2ggPSBtYXRjaC5tYXRjaFR5cGUodHlwZSk7XG4gICAgICAgIGlmICghbWF0Y2gpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghYS50eXBlLmFsbG93c01hcmtzKGNoaWxkLm1hcmtzKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoLnZhbGlkRW5kO1xufVxuZnVuY3Rpb24gam9pbmFibGUoYSwgYikge1xuICAgIHJldHVybiAhIShhICYmIGIgJiYgIWEuaXNMZWFmICYmIGNhbkFwcGVuZFdpdGhTdWJzdGl0dXRlZExpbmVicmVha3MoYSwgYikpO1xufVxuLyoqXG5GaW5kIGFuIGFuY2VzdG9yIG9mIHRoZSBnaXZlbiBwb3NpdGlvbiB0aGF0IGNhbiBiZSBqb2luZWQgdG8gdGhlXG5ibG9jayBiZWZvcmUgKG9yIGFmdGVyIGlmIGBkaXJgIGlzIHBvc2l0aXZlKS4gUmV0dXJucyB0aGUgam9pbmFibGVcbnBvaW50LCBpZiBhbnkuXG4qL1xuZnVuY3Rpb24gam9pblBvaW50KGRvYywgcG9zLCBkaXIgPSAtMSkge1xuICAgIGxldCAkcG9zID0gZG9jLnJlc29sdmUocG9zKTtcbiAgICBmb3IgKGxldCBkID0gJHBvcy5kZXB0aDs7IGQtLSkge1xuICAgICAgICBsZXQgYmVmb3JlLCBhZnRlciwgaW5kZXggPSAkcG9zLmluZGV4KGQpO1xuICAgICAgICBpZiAoZCA9PSAkcG9zLmRlcHRoKSB7XG4gICAgICAgICAgICBiZWZvcmUgPSAkcG9zLm5vZGVCZWZvcmU7XG4gICAgICAgICAgICBhZnRlciA9ICRwb3Mubm9kZUFmdGVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpciA+IDApIHtcbiAgICAgICAgICAgIGJlZm9yZSA9ICRwb3Mubm9kZShkICsgMSk7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgYWZ0ZXIgPSAkcG9zLm5vZGUoZCkubWF5YmVDaGlsZChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBiZWZvcmUgPSAkcG9zLm5vZGUoZCkubWF5YmVDaGlsZChpbmRleCAtIDEpO1xuICAgICAgICAgICAgYWZ0ZXIgPSAkcG9zLm5vZGUoZCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiZWZvcmUgJiYgIWJlZm9yZS5pc1RleHRibG9jayAmJiBqb2luYWJsZShiZWZvcmUsIGFmdGVyKSAmJlxuICAgICAgICAgICAgJHBvcy5ub2RlKGQpLmNhblJlcGxhY2UoaW5kZXgsIGluZGV4ICsgMSkpXG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICBpZiAoZCA9PSAwKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIHBvcyA9IGRpciA8IDAgPyAkcG9zLmJlZm9yZShkKSA6ICRwb3MuYWZ0ZXIoZCk7XG4gICAgfVxufVxuZnVuY3Rpb24gam9pbih0ciwgcG9zLCBkZXB0aCkge1xuICAgIGxldCBjb252ZXJ0TmV3bGluZXMgPSBudWxsO1xuICAgIGxldCB7IGxpbmVicmVha1JlcGxhY2VtZW50IH0gPSB0ci5kb2MudHlwZS5zY2hlbWE7XG4gICAgbGV0ICRiZWZvcmUgPSB0ci5kb2MucmVzb2x2ZShwb3MgLSBkZXB0aCksIGJlZm9yZVR5cGUgPSAkYmVmb3JlLm5vZGUoKS50eXBlO1xuICAgIGlmIChsaW5lYnJlYWtSZXBsYWNlbWVudCAmJiBiZWZvcmVUeXBlLmlubGluZUNvbnRlbnQpIHtcbiAgICAgICAgbGV0IHByZSA9IGJlZm9yZVR5cGUud2hpdGVzcGFjZSA9PSBcInByZVwiO1xuICAgICAgICBsZXQgc3VwcG9ydExpbmVicmVhayA9ICEhYmVmb3JlVHlwZS5jb250ZW50TWF0Y2gubWF0Y2hUeXBlKGxpbmVicmVha1JlcGxhY2VtZW50KTtcbiAgICAgICAgaWYgKHByZSAmJiAhc3VwcG9ydExpbmVicmVhaylcbiAgICAgICAgICAgIGNvbnZlcnROZXdsaW5lcyA9IGZhbHNlO1xuICAgICAgICBlbHNlIGlmICghcHJlICYmIHN1cHBvcnRMaW5lYnJlYWspXG4gICAgICAgICAgICBjb252ZXJ0TmV3bGluZXMgPSB0cnVlO1xuICAgIH1cbiAgICBsZXQgbWFwRnJvbSA9IHRyLnN0ZXBzLmxlbmd0aDtcbiAgICBpZiAoY29udmVydE5ld2xpbmVzID09PSBmYWxzZSkge1xuICAgICAgICBsZXQgJGFmdGVyID0gdHIuZG9jLnJlc29sdmUocG9zICsgZGVwdGgpO1xuICAgICAgICByZXBsYWNlTGluZWJyZWFrcyh0ciwgJGFmdGVyLm5vZGUoKSwgJGFmdGVyLmJlZm9yZSgpLCBtYXBGcm9tKTtcbiAgICB9XG4gICAgaWYgKGJlZm9yZVR5cGUuaW5saW5lQ29udGVudClcbiAgICAgICAgY2xlYXJJbmNvbXBhdGlibGUodHIsIHBvcyArIGRlcHRoIC0gMSwgYmVmb3JlVHlwZSwgJGJlZm9yZS5ub2RlKCkuY29udGVudE1hdGNoQXQoJGJlZm9yZS5pbmRleCgpKSwgY29udmVydE5ld2xpbmVzID09IG51bGwpO1xuICAgIGxldCBtYXBwaW5nID0gdHIubWFwcGluZy5zbGljZShtYXBGcm9tKSwgc3RhcnQgPSBtYXBwaW5nLm1hcChwb3MgLSBkZXB0aCk7XG4gICAgdHIuc3RlcChuZXcgUmVwbGFjZVN0ZXAoc3RhcnQsIG1hcHBpbmcubWFwKHBvcyArIGRlcHRoLCAtMSksIFNsaWNlLmVtcHR5LCB0cnVlKSk7XG4gICAgaWYgKGNvbnZlcnROZXdsaW5lcyA9PT0gdHJ1ZSkge1xuICAgICAgICBsZXQgJGZ1bGwgPSB0ci5kb2MucmVzb2x2ZShzdGFydCk7XG4gICAgICAgIHJlcGxhY2VOZXdsaW5lcyh0ciwgJGZ1bGwubm9kZSgpLCAkZnVsbC5iZWZvcmUoKSwgdHIuc3RlcHMubGVuZ3RoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyO1xufVxuLyoqXG5UcnkgdG8gZmluZCBhIHBvaW50IHdoZXJlIGEgbm9kZSBvZiB0aGUgZ2l2ZW4gdHlwZSBjYW4gYmUgaW5zZXJ0ZWRcbm5lYXIgYHBvc2AsIGJ5IHNlYXJjaGluZyB1cCB0aGUgbm9kZSBoaWVyYXJjaHkgd2hlbiBgcG9zYCBpdHNlbGZcbmlzbid0IGEgdmFsaWQgcGxhY2UgYnV0IGlzIGF0IHRoZSBzdGFydCBvciBlbmQgb2YgYSBub2RlLiBSZXR1cm5cbm51bGwgaWYgbm8gcG9zaXRpb24gd2FzIGZvdW5kLlxuKi9cbmZ1bmN0aW9uIGluc2VydFBvaW50KGRvYywgcG9zLCBub2RlVHlwZSkge1xuICAgIGxldCAkcG9zID0gZG9jLnJlc29sdmUocG9zKTtcbiAgICBpZiAoJHBvcy5wYXJlbnQuY2FuUmVwbGFjZVdpdGgoJHBvcy5pbmRleCgpLCAkcG9zLmluZGV4KCksIG5vZGVUeXBlKSlcbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICBpZiAoJHBvcy5wYXJlbnRPZmZzZXQgPT0gMClcbiAgICAgICAgZm9yIChsZXQgZCA9ICRwb3MuZGVwdGggLSAxOyBkID49IDA7IGQtLSkge1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gJHBvcy5pbmRleChkKTtcbiAgICAgICAgICAgIGlmICgkcG9zLm5vZGUoZCkuY2FuUmVwbGFjZVdpdGgoaW5kZXgsIGluZGV4LCBub2RlVHlwZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuICRwb3MuYmVmb3JlKGQgKyAxKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICBpZiAoJHBvcy5wYXJlbnRPZmZzZXQgPT0gJHBvcy5wYXJlbnQuY29udGVudC5zaXplKVxuICAgICAgICBmb3IgKGxldCBkID0gJHBvcy5kZXB0aCAtIDE7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSAkcG9zLmluZGV4QWZ0ZXIoZCk7XG4gICAgICAgICAgICBpZiAoJHBvcy5ub2RlKGQpLmNhblJlcGxhY2VXaXRoKGluZGV4LCBpbmRleCwgbm9kZVR5cGUpKVxuICAgICAgICAgICAgICAgIHJldHVybiAkcG9zLmFmdGVyKGQgKyAxKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA8ICRwb3Mubm9kZShkKS5jaGlsZENvdW50KVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbkZpbmRzIGEgcG9zaXRpb24gYXQgb3IgYXJvdW5kIHRoZSBnaXZlbiBwb3NpdGlvbiB3aGVyZSB0aGUgZ2l2ZW5cbnNsaWNlIGNhbiBiZSBpbnNlcnRlZC4gV2lsbCBsb29rIGF0IHBhcmVudCBub2RlcycgbmVhcmVzdCBib3VuZGFyeVxuYW5kIHRyeSB0aGVyZSwgZXZlbiBpZiB0aGUgb3JpZ2luYWwgcG9zaXRpb24gd2Fzbid0IGRpcmVjdGx5IGF0IHRoZVxuc3RhcnQgb3IgZW5kIG9mIHRoYXQgbm9kZS4gUmV0dXJucyBudWxsIHdoZW4gbm8gcG9zaXRpb24gd2FzIGZvdW5kLlxuKi9cbmZ1bmN0aW9uIGRyb3BQb2ludChkb2MsIHBvcywgc2xpY2UpIHtcbiAgICBsZXQgJHBvcyA9IGRvYy5yZXNvbHZlKHBvcyk7XG4gICAgaWYgKCFzbGljZS5jb250ZW50LnNpemUpXG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgbGV0IGNvbnRlbnQgPSBzbGljZS5jb250ZW50O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpY2Uub3BlblN0YXJ0OyBpKyspXG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LmZpcnN0Q2hpbGQuY29udGVudDtcbiAgICBmb3IgKGxldCBwYXNzID0gMTsgcGFzcyA8PSAoc2xpY2Uub3BlblN0YXJ0ID09IDAgJiYgc2xpY2Uuc2l6ZSA/IDIgOiAxKTsgcGFzcysrKSB7XG4gICAgICAgIGZvciAobGV0IGQgPSAkcG9zLmRlcHRoOyBkID49IDA7IGQtLSkge1xuICAgICAgICAgICAgbGV0IGJpYXMgPSBkID09ICRwb3MuZGVwdGggPyAwIDogJHBvcy5wb3MgPD0gKCRwb3Muc3RhcnQoZCArIDEpICsgJHBvcy5lbmQoZCArIDEpKSAvIDIgPyAtMSA6IDE7XG4gICAgICAgICAgICBsZXQgaW5zZXJ0UG9zID0gJHBvcy5pbmRleChkKSArIChiaWFzID4gMCA/IDEgOiAwKTtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSAkcG9zLm5vZGUoZCksIGZpdHMgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChwYXNzID09IDEpIHtcbiAgICAgICAgICAgICAgICBmaXRzID0gcGFyZW50LmNhblJlcGxhY2UoaW5zZXJ0UG9zLCBpbnNlcnRQb3MsIGNvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwaW5nID0gcGFyZW50LmNvbnRlbnRNYXRjaEF0KGluc2VydFBvcykuZmluZFdyYXBwaW5nKGNvbnRlbnQuZmlyc3RDaGlsZC50eXBlKTtcbiAgICAgICAgICAgICAgICBmaXRzID0gd3JhcHBpbmcgJiYgcGFyZW50LmNhblJlcGxhY2VXaXRoKGluc2VydFBvcywgaW5zZXJ0UG9zLCB3cmFwcGluZ1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZml0cylcbiAgICAgICAgICAgICAgICByZXR1cm4gYmlhcyA9PSAwID8gJHBvcy5wb3MgOiBiaWFzIDwgMCA/ICRwb3MuYmVmb3JlKGQgKyAxKSA6ICRwb3MuYWZ0ZXIoZCArIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG4vKipcbuKAmEZpdOKAmSBhIHNsaWNlIGludG8gYSBnaXZlbiBwb3NpdGlvbiBpbiB0aGUgZG9jdW1lbnQsIHByb2R1Y2luZyBhXG5bc3RlcF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3RyYW5zZm9ybS5TdGVwKSB0aGF0IGluc2VydHMgaXQuIFdpbGwgcmV0dXJuIG51bGwgaWZcbnRoZXJlJ3Mgbm8gbWVhbmluZ2Z1bCB3YXkgdG8gaW5zZXJ0IHRoZSBzbGljZSBoZXJlLCBvciBpbnNlcnRpbmcgaXRcbndvdWxkIGJlIGEgbm8tb3AgKGFuIGVtcHR5IHNsaWNlIG92ZXIgYW4gZW1wdHkgcmFuZ2UpLlxuKi9cbmZ1bmN0aW9uIHJlcGxhY2VTdGVwKGRvYywgZnJvbSwgdG8gPSBmcm9tLCBzbGljZSA9IFNsaWNlLmVtcHR5KSB7XG4gICAgaWYgKGZyb20gPT0gdG8gJiYgIXNsaWNlLnNpemUpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCAkZnJvbSA9IGRvYy5yZXNvbHZlKGZyb20pLCAkdG8gPSBkb2MucmVzb2x2ZSh0byk7XG4gICAgLy8gT3B0aW1pemF0aW9uIC0tIGF2b2lkIHdvcmsgaWYgaXQncyBvYnZpb3VzIHRoYXQgaXQncyBub3QgbmVlZGVkLlxuICAgIGlmIChmaXRzVHJpdmlhbGx5KCRmcm9tLCAkdG8sIHNsaWNlKSlcbiAgICAgICAgcmV0dXJuIG5ldyBSZXBsYWNlU3RlcChmcm9tLCB0bywgc2xpY2UpO1xuICAgIHJldHVybiBuZXcgRml0dGVyKCRmcm9tLCAkdG8sIHNsaWNlKS5maXQoKTtcbn1cbmZ1bmN0aW9uIGZpdHNUcml2aWFsbHkoJGZyb20sICR0bywgc2xpY2UpIHtcbiAgICByZXR1cm4gIXNsaWNlLm9wZW5TdGFydCAmJiAhc2xpY2Uub3BlbkVuZCAmJiAkZnJvbS5zdGFydCgpID09ICR0by5zdGFydCgpICYmXG4gICAgICAgICRmcm9tLnBhcmVudC5jYW5SZXBsYWNlKCRmcm9tLmluZGV4KCksICR0by5pbmRleCgpLCBzbGljZS5jb250ZW50KTtcbn1cbi8vIEFsZ29yaXRobSBmb3IgJ3BsYWNpbmcnIHRoZSBlbGVtZW50cyBvZiBhIHNsaWNlIGludG8gYSBnYXA6XG4vL1xuLy8gV2UgY29uc2lkZXIgdGhlIGNvbnRlbnQgb2YgZWFjaCBub2RlIHRoYXQgaXMgb3BlbiB0byB0aGUgbGVmdCB0byBiZVxuLy8gaW5kZXBlbmRlbnRseSBwbGFjZWFibGUuIEkuZS4gaW4gPHAoXCJmb29cIiksIHAoXCJiYXJcIik+LCB3aGVuIHRoZVxuLy8gcGFyYWdyYXBoIG9uIHRoZSBsZWZ0IGlzIG9wZW4sIFwiZm9vXCIgY2FuIGJlIHBsYWNlZCAoc29tZXdoZXJlIG9uXG4vLyB0aGUgbGVmdCBzaWRlIG9mIHRoZSByZXBsYWNlbWVudCBnYXApIGluZGVwZW5kZW50bHkgZnJvbSBwKFwiYmFyXCIpLlxuLy9cbi8vIFRoaXMgY2xhc3MgdHJhY2tzIHRoZSBzdGF0ZSBvZiB0aGUgcGxhY2VtZW50IHByb2dyZXNzIGluIHRoZVxuLy8gZm9sbG93aW5nIHByb3BlcnRpZXM6XG4vL1xuLy8gIC0gYGZyb250aWVyYCBob2xkcyBhIHN0YWNrIG9mIGB7dHlwZSwgbWF0Y2h9YCBvYmplY3RzIHRoYXRcbi8vICAgIHJlcHJlc2VudCB0aGUgb3BlbiBzaWRlIG9mIHRoZSByZXBsYWNlbWVudC4gSXQgc3RhcnRzIGF0XG4vLyAgICBgJGZyb21gLCB0aGVuIG1vdmVzIGZvcndhcmQgYXMgY29udGVudCBpcyBwbGFjZWQsIGFuZCBpcyBmaW5hbGx5XG4vLyAgICByZWNvbmNpbGVkIHdpdGggYCR0b2AuXG4vL1xuLy8gIC0gYHVucGxhY2VkYCBpcyBhIHNsaWNlIHRoYXQgcmVwcmVzZW50cyB0aGUgY29udGVudCB0aGF0IGhhc24ndFxuLy8gICAgYmVlbiBwbGFjZWQgeWV0LlxuLy9cbi8vICAtIGBwbGFjZWRgIGlzIGEgZnJhZ21lbnQgb2YgcGxhY2VkIGNvbnRlbnQuIEl0cyBvcGVuLXN0YXJ0IHZhbHVlXG4vLyAgICBpcyBpbXBsaWNpdCBpbiBgJGZyb21gLCBhbmQgaXRzIG9wZW4tZW5kIHZhbHVlIGluIGBmcm9udGllcmAuXG5jbGFzcyBGaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKCRmcm9tLCAkdG8sIHVucGxhY2VkKSB7XG4gICAgICAgIHRoaXMuJGZyb20gPSAkZnJvbTtcbiAgICAgICAgdGhpcy4kdG8gPSAkdG87XG4gICAgICAgIHRoaXMudW5wbGFjZWQgPSB1bnBsYWNlZDtcbiAgICAgICAgdGhpcy5mcm9udGllciA9IFtdO1xuICAgICAgICB0aGlzLnBsYWNlZCA9IEZyYWdtZW50LmVtcHR5O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSAkZnJvbS5kZXB0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9ICRmcm9tLm5vZGUoaSk7XG4gICAgICAgICAgICB0aGlzLmZyb250aWVyLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IG5vZGUudHlwZSxcbiAgICAgICAgICAgICAgICBtYXRjaDogbm9kZS5jb250ZW50TWF0Y2hBdCgkZnJvbS5pbmRleEFmdGVyKGkpKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9ICRmcm9tLmRlcHRoOyBpID4gMDsgaS0tKVxuICAgICAgICAgICAgdGhpcy5wbGFjZWQgPSBGcmFnbWVudC5mcm9tKCRmcm9tLm5vZGUoaSkuY29weSh0aGlzLnBsYWNlZCkpO1xuICAgIH1cbiAgICBnZXQgZGVwdGgoKSB7IHJldHVybiB0aGlzLmZyb250aWVyLmxlbmd0aCAtIDE7IH1cbiAgICBmaXQoKSB7XG4gICAgICAgIC8vIEFzIGxvbmcgYXMgdGhlcmUncyB1bnBsYWNlZCBjb250ZW50LCB0cnkgdG8gcGxhY2Ugc29tZSBvZiBpdC5cbiAgICAgICAgLy8gSWYgdGhhdCBmYWlscywgZWl0aGVyIGluY3JlYXNlIHRoZSBvcGVuIHNjb3JlIG9mIHRoZSB1bnBsYWNlZFxuICAgICAgICAvLyBzbGljZSwgb3IgZHJvcCBub2RlcyBmcm9tIGl0LCBhbmQgdGhlbiB0cnkgYWdhaW4uXG4gICAgICAgIHdoaWxlICh0aGlzLnVucGxhY2VkLnNpemUpIHtcbiAgICAgICAgICAgIGxldCBmaXQgPSB0aGlzLmZpbmRGaXR0YWJsZSgpO1xuICAgICAgICAgICAgaWYgKGZpdClcbiAgICAgICAgICAgICAgICB0aGlzLnBsYWNlTm9kZXMoZml0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5Nb3JlKCkgfHwgdGhpcy5kcm9wTm9kZSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdoZW4gdGhlcmUncyBpbmxpbmUgY29udGVudCBkaXJlY3RseSBhZnRlciB0aGUgZnJvbnRpZXIgX2FuZF9cbiAgICAgICAgLy8gZGlyZWN0bHkgYWZ0ZXIgYHRoaXMuJHRvYCwgd2UgbXVzdCBnZW5lcmF0ZSBhIGBSZXBsYWNlQXJvdW5kYFxuICAgICAgICAvLyBzdGVwIHRoYXQgcHVsbHMgdGhhdCBjb250ZW50IGludG8gdGhlIG5vZGUgYWZ0ZXIgdGhlIGZyb250aWVyLlxuICAgICAgICAvLyBUaGF0IG1lYW5zIHRoZSBmaXR0aW5nIG11c3QgYmUgZG9uZSB0byB0aGUgZW5kIG9mIHRoZSB0ZXh0YmxvY2tcbiAgICAgICAgLy8gbm9kZSBhZnRlciBgdGhpcy4kdG9gLCBub3QgYHRoaXMuJHRvYCBpdHNlbGYuXG4gICAgICAgIGxldCBtb3ZlSW5saW5lID0gdGhpcy5tdXN0TW92ZUlubGluZSgpLCBwbGFjZWRTaXplID0gdGhpcy5wbGFjZWQuc2l6ZSAtIHRoaXMuZGVwdGggLSB0aGlzLiRmcm9tLmRlcHRoO1xuICAgICAgICBsZXQgJGZyb20gPSB0aGlzLiRmcm9tLCAkdG8gPSB0aGlzLmNsb3NlKG1vdmVJbmxpbmUgPCAwID8gdGhpcy4kdG8gOiAkZnJvbS5kb2MucmVzb2x2ZShtb3ZlSW5saW5lKSk7XG4gICAgICAgIGlmICghJHRvKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIC8vIElmIGNsb3NpbmcgdG8gYCR0b2Agc3VjY2VlZGVkLCBjcmVhdGUgYSBzdGVwXG4gICAgICAgIGxldCBjb250ZW50ID0gdGhpcy5wbGFjZWQsIG9wZW5TdGFydCA9ICRmcm9tLmRlcHRoLCBvcGVuRW5kID0gJHRvLmRlcHRoO1xuICAgICAgICB3aGlsZSAob3BlblN0YXJ0ICYmIG9wZW5FbmQgJiYgY29udGVudC5jaGlsZENvdW50ID09IDEpIHsgLy8gTm9ybWFsaXplIGJ5IGRyb3BwaW5nIG9wZW4gcGFyZW50IG5vZGVzXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5maXJzdENoaWxkLmNvbnRlbnQ7XG4gICAgICAgICAgICBvcGVuU3RhcnQtLTtcbiAgICAgICAgICAgIG9wZW5FbmQtLTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2xpY2UgPSBuZXcgU2xpY2UoY29udGVudCwgb3BlblN0YXJ0LCBvcGVuRW5kKTtcbiAgICAgICAgaWYgKG1vdmVJbmxpbmUgPiAtMSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoJGZyb20ucG9zLCBtb3ZlSW5saW5lLCB0aGlzLiR0by5wb3MsIHRoaXMuJHRvLmVuZCgpLCBzbGljZSwgcGxhY2VkU2l6ZSk7XG4gICAgICAgIGlmIChzbGljZS5zaXplIHx8ICRmcm9tLnBvcyAhPSB0aGlzLiR0by5wb3MpIC8vIERvbid0IGdlbmVyYXRlIG5vLW9wIHN0ZXBzXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlcGxhY2VTdGVwKCRmcm9tLnBvcywgJHRvLnBvcywgc2xpY2UpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gRmluZCBhIHBvc2l0aW9uIG9uIHRoZSBzdGFydCBzcGluZSBvZiBgdGhpcy51bnBsYWNlZGAgdGhhdCBoYXNcbiAgICAvLyBjb250ZW50IHRoYXQgY2FuIGJlIG1vdmVkIHNvbWV3aGVyZSBvbiB0aGUgZnJvbnRpZXIuIFJldHVybnMgdHdvXG4gICAgLy8gZGVwdGhzLCBvbmUgZm9yIHRoZSBzbGljZSBhbmQgb25lIGZvciB0aGUgZnJvbnRpZXIuXG4gICAgZmluZEZpdHRhYmxlKCkge1xuICAgICAgICBsZXQgc3RhcnREZXB0aCA9IHRoaXMudW5wbGFjZWQub3BlblN0YXJ0O1xuICAgICAgICBmb3IgKGxldCBjdXIgPSB0aGlzLnVucGxhY2VkLmNvbnRlbnQsIGQgPSAwLCBvcGVuRW5kID0gdGhpcy51bnBsYWNlZC5vcGVuRW5kOyBkIDwgc3RhcnREZXB0aDsgZCsrKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IGN1ci5maXJzdENoaWxkO1xuICAgICAgICAgICAgaWYgKGN1ci5jaGlsZENvdW50ID4gMSlcbiAgICAgICAgICAgICAgICBvcGVuRW5kID0gMDtcbiAgICAgICAgICAgIGlmIChub2RlLnR5cGUuc3BlYy5pc29sYXRpbmcgJiYgb3BlbkVuZCA8PSBkKSB7XG4gICAgICAgICAgICAgICAgc3RhcnREZXB0aCA9IGQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXIgPSBub2RlLmNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT25seSB0cnkgd3JhcHBpbmcgbm9kZXMgKHBhc3MgMikgYWZ0ZXIgZmluZGluZyBhIHBsYWNlIHdpdGhvdXRcbiAgICAgICAgLy8gd3JhcHBpbmcgZmFpbGVkLlxuICAgICAgICBmb3IgKGxldCBwYXNzID0gMTsgcGFzcyA8PSAyOyBwYXNzKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHNsaWNlRGVwdGggPSBwYXNzID09IDEgPyBzdGFydERlcHRoIDogdGhpcy51bnBsYWNlZC5vcGVuU3RhcnQ7IHNsaWNlRGVwdGggPj0gMDsgc2xpY2VEZXB0aC0tKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZyYWdtZW50LCBwYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChzbGljZURlcHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IGNvbnRlbnRBdCh0aGlzLnVucGxhY2VkLmNvbnRlbnQsIHNsaWNlRGVwdGggLSAxKS5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHBhcmVudC5jb250ZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLnVucGxhY2VkLmNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZnJvbnRpZXJEZXB0aCA9IHRoaXMuZGVwdGg7IGZyb250aWVyRGVwdGggPj0gMDsgZnJvbnRpZXJEZXB0aC0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB7IHR5cGUsIG1hdGNoIH0gPSB0aGlzLmZyb250aWVyW2Zyb250aWVyRGVwdGhdLCB3cmFwLCBpbmplY3QgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiBwYXNzIDEsIGlmIHRoZSBuZXh0IG5vZGUgbWF0Y2hlcywgb3IgdGhlcmUgaXMgbm8gbmV4dFxuICAgICAgICAgICAgICAgICAgICAvLyBub2RlIGJ1dCB0aGUgcGFyZW50cyBsb29rIGNvbXBhdGlibGUsIHdlJ3ZlIGZvdW5kIGFcbiAgICAgICAgICAgICAgICAgICAgLy8gcGxhY2UuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXNzID09IDEgJiYgKGZpcnN0ID8gbWF0Y2gubWF0Y2hUeXBlKGZpcnN0LnR5cGUpIHx8IChpbmplY3QgPSBtYXRjaC5maWxsQmVmb3JlKEZyYWdtZW50LmZyb20oZmlyc3QpLCBmYWxzZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHBhcmVudCAmJiB0eXBlLmNvbXBhdGlibGVDb250ZW50KHBhcmVudC50eXBlKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBzbGljZURlcHRoLCBmcm9udGllckRlcHRoLCBwYXJlbnQsIGluamVjdCB9O1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiBwYXNzIDIsIGxvb2sgZm9yIGEgc2V0IG9mIHdyYXBwaW5nIG5vZGVzIHRoYXQgbWFrZVxuICAgICAgICAgICAgICAgICAgICAvLyBgZmlyc3RgIGZpdCBoZXJlLlxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwYXNzID09IDIgJiYgZmlyc3QgJiYgKHdyYXAgPSBtYXRjaC5maW5kV3JhcHBpbmcoZmlyc3QudHlwZSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgc2xpY2VEZXB0aCwgZnJvbnRpZXJEZXB0aCwgcGFyZW50LCB3cmFwIH07XG4gICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGNvbnRpbnVlIGxvb2tpbmcgZnVydGhlciB1cCBpZiB0aGUgcGFyZW50IG5vZGVcbiAgICAgICAgICAgICAgICAgICAgLy8gd291bGQgZml0IGhlcmUuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgJiYgbWF0Y2gubWF0Y2hUeXBlKHBhcmVudC50eXBlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBvcGVuTW9yZSgpIHtcbiAgICAgICAgbGV0IHsgY29udGVudCwgb3BlblN0YXJ0LCBvcGVuRW5kIH0gPSB0aGlzLnVucGxhY2VkO1xuICAgICAgICBsZXQgaW5uZXIgPSBjb250ZW50QXQoY29udGVudCwgb3BlblN0YXJ0KTtcbiAgICAgICAgaWYgKCFpbm5lci5jaGlsZENvdW50IHx8IGlubmVyLmZpcnN0Q2hpbGQuaXNMZWFmKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLnVucGxhY2VkID0gbmV3IFNsaWNlKGNvbnRlbnQsIG9wZW5TdGFydCArIDEsIE1hdGgubWF4KG9wZW5FbmQsIGlubmVyLnNpemUgKyBvcGVuU3RhcnQgPj0gY29udGVudC5zaXplIC0gb3BlbkVuZCA/IG9wZW5TdGFydCArIDEgOiAwKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBkcm9wTm9kZSgpIHtcbiAgICAgICAgbGV0IHsgY29udGVudCwgb3BlblN0YXJ0LCBvcGVuRW5kIH0gPSB0aGlzLnVucGxhY2VkO1xuICAgICAgICBsZXQgaW5uZXIgPSBjb250ZW50QXQoY29udGVudCwgb3BlblN0YXJ0KTtcbiAgICAgICAgaWYgKGlubmVyLmNoaWxkQ291bnQgPD0gMSAmJiBvcGVuU3RhcnQgPiAwKSB7XG4gICAgICAgICAgICBsZXQgb3BlbkF0RW5kID0gY29udGVudC5zaXplIC0gb3BlblN0YXJ0IDw9IG9wZW5TdGFydCArIGlubmVyLnNpemU7XG4gICAgICAgICAgICB0aGlzLnVucGxhY2VkID0gbmV3IFNsaWNlKGRyb3BGcm9tRnJhZ21lbnQoY29udGVudCwgb3BlblN0YXJ0IC0gMSwgMSksIG9wZW5TdGFydCAtIDEsIG9wZW5BdEVuZCA/IG9wZW5TdGFydCAtIDEgOiBvcGVuRW5kKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudW5wbGFjZWQgPSBuZXcgU2xpY2UoZHJvcEZyb21GcmFnbWVudChjb250ZW50LCBvcGVuU3RhcnQsIDEpLCBvcGVuU3RhcnQsIG9wZW5FbmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIE1vdmUgY29udGVudCBmcm9tIHRoZSB1bnBsYWNlZCBzbGljZSBhdCBgc2xpY2VEZXB0aGAgdG8gdGhlXG4gICAgLy8gZnJvbnRpZXIgbm9kZSBhdCBgZnJvbnRpZXJEZXB0aGAuIENsb3NlIHRoYXQgZnJvbnRpZXIgbm9kZSB3aGVuXG4gICAgLy8gYXBwbGljYWJsZS5cbiAgICBwbGFjZU5vZGVzKHsgc2xpY2VEZXB0aCwgZnJvbnRpZXJEZXB0aCwgcGFyZW50LCBpbmplY3QsIHdyYXAgfSkge1xuICAgICAgICB3aGlsZSAodGhpcy5kZXB0aCA+IGZyb250aWVyRGVwdGgpXG4gICAgICAgICAgICB0aGlzLmNsb3NlRnJvbnRpZXJOb2RlKCk7XG4gICAgICAgIGlmICh3cmFwKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3cmFwLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHRoaXMub3BlbkZyb250aWVyTm9kZSh3cmFwW2ldKTtcbiAgICAgICAgbGV0IHNsaWNlID0gdGhpcy51bnBsYWNlZCwgZnJhZ21lbnQgPSBwYXJlbnQgPyBwYXJlbnQuY29udGVudCA6IHNsaWNlLmNvbnRlbnQ7XG4gICAgICAgIGxldCBvcGVuU3RhcnQgPSBzbGljZS5vcGVuU3RhcnQgLSBzbGljZURlcHRoO1xuICAgICAgICBsZXQgdGFrZW4gPSAwLCBhZGQgPSBbXTtcbiAgICAgICAgbGV0IHsgbWF0Y2gsIHR5cGUgfSA9IHRoaXMuZnJvbnRpZXJbZnJvbnRpZXJEZXB0aF07XG4gICAgICAgIGlmIChpbmplY3QpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5qZWN0LmNoaWxkQ291bnQ7IGkrKylcbiAgICAgICAgICAgICAgICBhZGQucHVzaChpbmplY3QuY2hpbGQoaSkpO1xuICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaC5tYXRjaEZyYWdtZW50KGluamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29tcHV0ZXMgdGhlIGFtb3VudCBvZiAoZW5kKSBvcGVuIG5vZGVzIGF0IHRoZSBlbmQgb2YgdGhlXG4gICAgICAgIC8vIGZyYWdtZW50LiBXaGVuIDAsIHRoZSBwYXJlbnQgaXMgb3BlbiwgYnV0IG5vIG1vcmUuIFdoZW5cbiAgICAgICAgLy8gbmVnYXRpdmUsIG5vdGhpbmcgaXMgb3Blbi5cbiAgICAgICAgbGV0IG9wZW5FbmRDb3VudCA9IChmcmFnbWVudC5zaXplICsgc2xpY2VEZXB0aCkgLSAoc2xpY2UuY29udGVudC5zaXplIC0gc2xpY2Uub3BlbkVuZCk7XG4gICAgICAgIC8vIFNjYW4gb3ZlciB0aGUgZnJhZ21lbnQsIGZpdHRpbmcgYXMgbWFueSBjaGlsZCBub2RlcyBhc1xuICAgICAgICAvLyBwb3NzaWJsZS5cbiAgICAgICAgd2hpbGUgKHRha2VuIDwgZnJhZ21lbnQuY2hpbGRDb3VudCkge1xuICAgICAgICAgICAgbGV0IG5leHQgPSBmcmFnbWVudC5jaGlsZCh0YWtlbiksIG1hdGNoZXMgPSBtYXRjaC5tYXRjaFR5cGUobmV4dC50eXBlKTtcbiAgICAgICAgICAgIGlmICghbWF0Y2hlcylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIHRha2VuKys7XG4gICAgICAgICAgICBpZiAodGFrZW4gPiAxIHx8IG9wZW5TdGFydCA9PSAwIHx8IG5leHQuY29udGVudC5zaXplKSB7IC8vIERyb3AgZW1wdHkgb3BlbiBub2Rlc1xuICAgICAgICAgICAgICAgIG1hdGNoID0gbWF0Y2hlcztcbiAgICAgICAgICAgICAgICBhZGQucHVzaChjbG9zZU5vZGVTdGFydChuZXh0Lm1hcmsodHlwZS5hbGxvd2VkTWFya3MobmV4dC5tYXJrcykpLCB0YWtlbiA9PSAxID8gb3BlblN0YXJ0IDogMCwgdGFrZW4gPT0gZnJhZ21lbnQuY2hpbGRDb3VudCA/IG9wZW5FbmRDb3VudCA6IC0xKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRvRW5kID0gdGFrZW4gPT0gZnJhZ21lbnQuY2hpbGRDb3VudDtcbiAgICAgICAgaWYgKCF0b0VuZClcbiAgICAgICAgICAgIG9wZW5FbmRDb3VudCA9IC0xO1xuICAgICAgICB0aGlzLnBsYWNlZCA9IGFkZFRvRnJhZ21lbnQodGhpcy5wbGFjZWQsIGZyb250aWVyRGVwdGgsIEZyYWdtZW50LmZyb20oYWRkKSk7XG4gICAgICAgIHRoaXMuZnJvbnRpZXJbZnJvbnRpZXJEZXB0aF0ubWF0Y2ggPSBtYXRjaDtcbiAgICAgICAgLy8gSWYgdGhlIHBhcmVudCB0eXBlcyBtYXRjaCwgYW5kIHRoZSBlbnRpcmUgbm9kZSB3YXMgbW92ZWQsIGFuZFxuICAgICAgICAvLyBpdCdzIG5vdCBvcGVuLCBjbG9zZSB0aGlzIGZyb250aWVyIG5vZGUgcmlnaHQgYXdheS5cbiAgICAgICAgaWYgKHRvRW5kICYmIG9wZW5FbmRDb3VudCA8IDAgJiYgcGFyZW50ICYmIHBhcmVudC50eXBlID09IHRoaXMuZnJvbnRpZXJbdGhpcy5kZXB0aF0udHlwZSAmJiB0aGlzLmZyb250aWVyLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICB0aGlzLmNsb3NlRnJvbnRpZXJOb2RlKCk7XG4gICAgICAgIC8vIEFkZCBuZXcgZnJvbnRpZXIgbm9kZXMgZm9yIGFueSBvcGVuIG5vZGVzIGF0IHRoZSBlbmQuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBjdXIgPSBmcmFnbWVudDsgaSA8IG9wZW5FbmRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IGN1ci5sYXN0Q2hpbGQ7XG4gICAgICAgICAgICB0aGlzLmZyb250aWVyLnB1c2goeyB0eXBlOiBub2RlLnR5cGUsIG1hdGNoOiBub2RlLmNvbnRlbnRNYXRjaEF0KG5vZGUuY2hpbGRDb3VudCkgfSk7XG4gICAgICAgICAgICBjdXIgPSBub2RlLmNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIGB0aGlzLnVucGxhY2VkYC4gRHJvcCB0aGUgZW50aXJlIG5vZGUgZnJvbSB3aGljaCB3ZVxuICAgICAgICAvLyBwbGFjZWQgaXQgd2UgZ290IHRvIGl0cyBlbmQsIG90aGVyd2lzZSBqdXN0IGRyb3AgdGhlIHBsYWNlZFxuICAgICAgICAvLyBub2Rlcy5cbiAgICAgICAgdGhpcy51bnBsYWNlZCA9ICF0b0VuZCA/IG5ldyBTbGljZShkcm9wRnJvbUZyYWdtZW50KHNsaWNlLmNvbnRlbnQsIHNsaWNlRGVwdGgsIHRha2VuKSwgc2xpY2Uub3BlblN0YXJ0LCBzbGljZS5vcGVuRW5kKVxuICAgICAgICAgICAgOiBzbGljZURlcHRoID09IDAgPyBTbGljZS5lbXB0eVxuICAgICAgICAgICAgICAgIDogbmV3IFNsaWNlKGRyb3BGcm9tRnJhZ21lbnQoc2xpY2UuY29udGVudCwgc2xpY2VEZXB0aCAtIDEsIDEpLCBzbGljZURlcHRoIC0gMSwgb3BlbkVuZENvdW50IDwgMCA/IHNsaWNlLm9wZW5FbmQgOiBzbGljZURlcHRoIC0gMSk7XG4gICAgfVxuICAgIG11c3RNb3ZlSW5saW5lKCkge1xuICAgICAgICBpZiAoIXRoaXMuJHRvLnBhcmVudC5pc1RleHRibG9jaylcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgbGV0IHRvcCA9IHRoaXMuZnJvbnRpZXJbdGhpcy5kZXB0aF0sIGxldmVsO1xuICAgICAgICBpZiAoIXRvcC50eXBlLmlzVGV4dGJsb2NrIHx8ICFjb250ZW50QWZ0ZXJGaXRzKHRoaXMuJHRvLCB0aGlzLiR0by5kZXB0aCwgdG9wLnR5cGUsIHRvcC5tYXRjaCwgZmFsc2UpIHx8XG4gICAgICAgICAgICAodGhpcy4kdG8uZGVwdGggPT0gdGhpcy5kZXB0aCAmJiAobGV2ZWwgPSB0aGlzLmZpbmRDbG9zZUxldmVsKHRoaXMuJHRvKSkgJiYgbGV2ZWwuZGVwdGggPT0gdGhpcy5kZXB0aCkpXG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIGxldCB7IGRlcHRoIH0gPSB0aGlzLiR0bywgYWZ0ZXIgPSB0aGlzLiR0by5hZnRlcihkZXB0aCk7XG4gICAgICAgIHdoaWxlIChkZXB0aCA+IDEgJiYgYWZ0ZXIgPT0gdGhpcy4kdG8uZW5kKC0tZGVwdGgpKVxuICAgICAgICAgICAgKythZnRlcjtcbiAgICAgICAgcmV0dXJuIGFmdGVyO1xuICAgIH1cbiAgICBmaW5kQ2xvc2VMZXZlbCgkdG8pIHtcbiAgICAgICAgc2NhbjogZm9yIChsZXQgaSA9IE1hdGgubWluKHRoaXMuZGVwdGgsICR0by5kZXB0aCk7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgeyBtYXRjaCwgdHlwZSB9ID0gdGhpcy5mcm9udGllcltpXTtcbiAgICAgICAgICAgIGxldCBkcm9wSW5uZXIgPSBpIDwgJHRvLmRlcHRoICYmICR0by5lbmQoaSArIDEpID09ICR0by5wb3MgKyAoJHRvLmRlcHRoIC0gKGkgKyAxKSk7XG4gICAgICAgICAgICBsZXQgZml0ID0gY29udGVudEFmdGVyRml0cygkdG8sIGksIHR5cGUsIG1hdGNoLCBkcm9wSW5uZXIpO1xuICAgICAgICAgICAgaWYgKCFmaXQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBmb3IgKGxldCBkID0gaSAtIDE7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgICAgICAgICAgbGV0IHsgbWF0Y2gsIHR5cGUgfSA9IHRoaXMuZnJvbnRpZXJbZF07XG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoZXMgPSBjb250ZW50QWZ0ZXJGaXRzKCR0bywgZCwgdHlwZSwgbWF0Y2gsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmICghbWF0Y2hlcyB8fCBtYXRjaGVzLmNoaWxkQ291bnQpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHNjYW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBkZXB0aDogaSwgZml0LCBtb3ZlOiBkcm9wSW5uZXIgPyAkdG8uZG9jLnJlc29sdmUoJHRvLmFmdGVyKGkgKyAxKSkgOiAkdG8gfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbG9zZSgkdG8pIHtcbiAgICAgICAgbGV0IGNsb3NlID0gdGhpcy5maW5kQ2xvc2VMZXZlbCgkdG8pO1xuICAgICAgICBpZiAoIWNsb3NlKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHdoaWxlICh0aGlzLmRlcHRoID4gY2xvc2UuZGVwdGgpXG4gICAgICAgICAgICB0aGlzLmNsb3NlRnJvbnRpZXJOb2RlKCk7XG4gICAgICAgIGlmIChjbG9zZS5maXQuY2hpbGRDb3VudClcbiAgICAgICAgICAgIHRoaXMucGxhY2VkID0gYWRkVG9GcmFnbWVudCh0aGlzLnBsYWNlZCwgY2xvc2UuZGVwdGgsIGNsb3NlLmZpdCk7XG4gICAgICAgICR0byA9IGNsb3NlLm1vdmU7XG4gICAgICAgIGZvciAobGV0IGQgPSBjbG9zZS5kZXB0aCArIDE7IGQgPD0gJHRvLmRlcHRoOyBkKyspIHtcbiAgICAgICAgICAgIGxldCBub2RlID0gJHRvLm5vZGUoZCksIGFkZCA9IG5vZGUudHlwZS5jb250ZW50TWF0Y2guZmlsbEJlZm9yZShub2RlLmNvbnRlbnQsIHRydWUsICR0by5pbmRleChkKSk7XG4gICAgICAgICAgICB0aGlzLm9wZW5Gcm9udGllck5vZGUobm9kZS50eXBlLCBub2RlLmF0dHJzLCBhZGQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkdG87XG4gICAgfVxuICAgIG9wZW5Gcm9udGllck5vZGUodHlwZSwgYXR0cnMgPSBudWxsLCBjb250ZW50KSB7XG4gICAgICAgIGxldCB0b3AgPSB0aGlzLmZyb250aWVyW3RoaXMuZGVwdGhdO1xuICAgICAgICB0b3AubWF0Y2ggPSB0b3AubWF0Y2gubWF0Y2hUeXBlKHR5cGUpO1xuICAgICAgICB0aGlzLnBsYWNlZCA9IGFkZFRvRnJhZ21lbnQodGhpcy5wbGFjZWQsIHRoaXMuZGVwdGgsIEZyYWdtZW50LmZyb20odHlwZS5jcmVhdGUoYXR0cnMsIGNvbnRlbnQpKSk7XG4gICAgICAgIHRoaXMuZnJvbnRpZXIucHVzaCh7IHR5cGUsIG1hdGNoOiB0eXBlLmNvbnRlbnRNYXRjaCB9KTtcbiAgICB9XG4gICAgY2xvc2VGcm9udGllck5vZGUoKSB7XG4gICAgICAgIGxldCBvcGVuID0gdGhpcy5mcm9udGllci5wb3AoKTtcbiAgICAgICAgbGV0IGFkZCA9IG9wZW4ubWF0Y2guZmlsbEJlZm9yZShGcmFnbWVudC5lbXB0eSwgdHJ1ZSk7XG4gICAgICAgIGlmIChhZGQuY2hpbGRDb3VudClcbiAgICAgICAgICAgIHRoaXMucGxhY2VkID0gYWRkVG9GcmFnbWVudCh0aGlzLnBsYWNlZCwgdGhpcy5mcm9udGllci5sZW5ndGgsIGFkZCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZHJvcEZyb21GcmFnbWVudChmcmFnbWVudCwgZGVwdGgsIGNvdW50KSB7XG4gICAgaWYgKGRlcHRoID09IDApXG4gICAgICAgIHJldHVybiBmcmFnbWVudC5jdXRCeUluZGV4KGNvdW50LCBmcmFnbWVudC5jaGlsZENvdW50KTtcbiAgICByZXR1cm4gZnJhZ21lbnQucmVwbGFjZUNoaWxkKDAsIGZyYWdtZW50LmZpcnN0Q2hpbGQuY29weShkcm9wRnJvbUZyYWdtZW50KGZyYWdtZW50LmZpcnN0Q2hpbGQuY29udGVudCwgZGVwdGggLSAxLCBjb3VudCkpKTtcbn1cbmZ1bmN0aW9uIGFkZFRvRnJhZ21lbnQoZnJhZ21lbnQsIGRlcHRoLCBjb250ZW50KSB7XG4gICAgaWYgKGRlcHRoID09IDApXG4gICAgICAgIHJldHVybiBmcmFnbWVudC5hcHBlbmQoY29udGVudCk7XG4gICAgcmV0dXJuIGZyYWdtZW50LnJlcGxhY2VDaGlsZChmcmFnbWVudC5jaGlsZENvdW50IC0gMSwgZnJhZ21lbnQubGFzdENoaWxkLmNvcHkoYWRkVG9GcmFnbWVudChmcmFnbWVudC5sYXN0Q2hpbGQuY29udGVudCwgZGVwdGggLSAxLCBjb250ZW50KSkpO1xufVxuZnVuY3Rpb24gY29udGVudEF0KGZyYWdtZW50LCBkZXB0aCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwdGg7IGkrKylcbiAgICAgICAgZnJhZ21lbnQgPSBmcmFnbWVudC5maXJzdENoaWxkLmNvbnRlbnQ7XG4gICAgcmV0dXJuIGZyYWdtZW50O1xufVxuZnVuY3Rpb24gY2xvc2VOb2RlU3RhcnQobm9kZSwgb3BlblN0YXJ0LCBvcGVuRW5kKSB7XG4gICAgaWYgKG9wZW5TdGFydCA8PSAwKVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICBsZXQgZnJhZyA9IG5vZGUuY29udGVudDtcbiAgICBpZiAob3BlblN0YXJ0ID4gMSlcbiAgICAgICAgZnJhZyA9IGZyYWcucmVwbGFjZUNoaWxkKDAsIGNsb3NlTm9kZVN0YXJ0KGZyYWcuZmlyc3RDaGlsZCwgb3BlblN0YXJ0IC0gMSwgZnJhZy5jaGlsZENvdW50ID09IDEgPyBvcGVuRW5kIC0gMSA6IDApKTtcbiAgICBpZiAob3BlblN0YXJ0ID4gMCkge1xuICAgICAgICBmcmFnID0gbm9kZS50eXBlLmNvbnRlbnRNYXRjaC5maWxsQmVmb3JlKGZyYWcpLmFwcGVuZChmcmFnKTtcbiAgICAgICAgaWYgKG9wZW5FbmQgPD0gMClcbiAgICAgICAgICAgIGZyYWcgPSBmcmFnLmFwcGVuZChub2RlLnR5cGUuY29udGVudE1hdGNoLm1hdGNoRnJhZ21lbnQoZnJhZykuZmlsbEJlZm9yZShGcmFnbWVudC5lbXB0eSwgdHJ1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZS5jb3B5KGZyYWcpO1xufVxuZnVuY3Rpb24gY29udGVudEFmdGVyRml0cygkdG8sIGRlcHRoLCB0eXBlLCBtYXRjaCwgb3Blbikge1xuICAgIGxldCBub2RlID0gJHRvLm5vZGUoZGVwdGgpLCBpbmRleCA9IG9wZW4gPyAkdG8uaW5kZXhBZnRlcihkZXB0aCkgOiAkdG8uaW5kZXgoZGVwdGgpO1xuICAgIGlmIChpbmRleCA9PSBub2RlLmNoaWxkQ291bnQgJiYgIXR5cGUuY29tcGF0aWJsZUNvbnRlbnQobm9kZS50eXBlKSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IGZpdCA9IG1hdGNoLmZpbGxCZWZvcmUobm9kZS5jb250ZW50LCB0cnVlLCBpbmRleCk7XG4gICAgcmV0dXJuIGZpdCAmJiAhaW52YWxpZE1hcmtzKHR5cGUsIG5vZGUuY29udGVudCwgaW5kZXgpID8gZml0IDogbnVsbDtcbn1cbmZ1bmN0aW9uIGludmFsaWRNYXJrcyh0eXBlLCBmcmFnbWVudCwgc3RhcnQpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBmcmFnbWVudC5jaGlsZENvdW50OyBpKyspXG4gICAgICAgIGlmICghdHlwZS5hbGxvd3NNYXJrcyhmcmFnbWVudC5jaGlsZChpKS5tYXJrcykpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBkZWZpbmVzQ29udGVudCh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUuc3BlYy5kZWZpbmluZyB8fCB0eXBlLnNwZWMuZGVmaW5pbmdGb3JDb250ZW50O1xufVxuZnVuY3Rpb24gcmVwbGFjZVJhbmdlKHRyLCBmcm9tLCB0bywgc2xpY2UpIHtcbiAgICBpZiAoIXNsaWNlLnNpemUpXG4gICAgICAgIHJldHVybiB0ci5kZWxldGVSYW5nZShmcm9tLCB0byk7XG4gICAgbGV0ICRmcm9tID0gdHIuZG9jLnJlc29sdmUoZnJvbSksICR0byA9IHRyLmRvYy5yZXNvbHZlKHRvKTtcbiAgICBpZiAoZml0c1RyaXZpYWxseSgkZnJvbSwgJHRvLCBzbGljZSkpXG4gICAgICAgIHJldHVybiB0ci5zdGVwKG5ldyBSZXBsYWNlU3RlcChmcm9tLCB0bywgc2xpY2UpKTtcbiAgICBsZXQgdGFyZ2V0RGVwdGhzID0gY292ZXJlZERlcHRocygkZnJvbSwgdHIuZG9jLnJlc29sdmUodG8pKTtcbiAgICAvLyBDYW4ndCByZXBsYWNlIHRoZSB3aG9sZSBkb2N1bWVudCwgc28gcmVtb3ZlIDAgaWYgaXQncyBwcmVzZW50XG4gICAgaWYgKHRhcmdldERlcHRoc1t0YXJnZXREZXB0aHMubGVuZ3RoIC0gMV0gPT0gMClcbiAgICAgICAgdGFyZ2V0RGVwdGhzLnBvcCgpO1xuICAgIC8vIE5lZ2F0aXZlIG51bWJlcnMgcmVwcmVzZW50IG5vdCBleHBhbnNpb24gb3ZlciB0aGUgd2hvbGUgbm9kZSBhdFxuICAgIC8vIHRoYXQgZGVwdGgsIGJ1dCByZXBsYWNpbmcgZnJvbSAkZnJvbS5iZWZvcmUoLUQpIHRvICR0by5wb3MuXG4gICAgbGV0IHByZWZlcnJlZFRhcmdldCA9IC0oJGZyb20uZGVwdGggKyAxKTtcbiAgICB0YXJnZXREZXB0aHMudW5zaGlmdChwcmVmZXJyZWRUYXJnZXQpO1xuICAgIC8vIFRoaXMgbG9vcCBwaWNrcyBhIHByZWZlcnJlZCB0YXJnZXQgZGVwdGgsIGlmIG9uZSBvZiB0aGUgY292ZXJpbmdcbiAgICAvLyBkZXB0aHMgaXMgbm90IG91dHNpZGUgb2YgYSBkZWZpbmluZyBub2RlLCBhbmQgYWRkcyBuZWdhdGl2ZVxuICAgIC8vIGRlcHRocyBmb3IgYW55IGRlcHRoIHRoYXQgaGFzICRmcm9tIGF0IGl0cyBzdGFydCBhbmQgZG9lcyBub3RcbiAgICAvLyBjcm9zcyBhIGRlZmluaW5nIG5vZGUuXG4gICAgZm9yIChsZXQgZCA9ICRmcm9tLmRlcHRoLCBwb3MgPSAkZnJvbS5wb3MgLSAxOyBkID4gMDsgZC0tLCBwb3MtLSkge1xuICAgICAgICBsZXQgc3BlYyA9ICRmcm9tLm5vZGUoZCkudHlwZS5zcGVjO1xuICAgICAgICBpZiAoc3BlYy5kZWZpbmluZyB8fCBzcGVjLmRlZmluaW5nQXNDb250ZXh0IHx8IHNwZWMuaXNvbGF0aW5nKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmICh0YXJnZXREZXB0aHMuaW5kZXhPZihkKSA+IC0xKVxuICAgICAgICAgICAgcHJlZmVycmVkVGFyZ2V0ID0gZDtcbiAgICAgICAgZWxzZSBpZiAoJGZyb20uYmVmb3JlKGQpID09IHBvcylcbiAgICAgICAgICAgIHRhcmdldERlcHRocy5zcGxpY2UoMSwgMCwgLWQpO1xuICAgIH1cbiAgICAvLyBUcnkgdG8gZml0IGVhY2ggcG9zc2libGUgZGVwdGggb2YgdGhlIHNsaWNlIGludG8gZWFjaCBwb3NzaWJsZVxuICAgIC8vIHRhcmdldCBkZXB0aCwgc3RhcnRpbmcgd2l0aCB0aGUgcHJlZmVycmVkIGRlcHRocy5cbiAgICBsZXQgcHJlZmVycmVkVGFyZ2V0SW5kZXggPSB0YXJnZXREZXB0aHMuaW5kZXhPZihwcmVmZXJyZWRUYXJnZXQpO1xuICAgIGxldCBsZWZ0Tm9kZXMgPSBbXSwgcHJlZmVycmVkRGVwdGggPSBzbGljZS5vcGVuU3RhcnQ7XG4gICAgZm9yIChsZXQgY29udGVudCA9IHNsaWNlLmNvbnRlbnQsIGkgPSAwOzsgaSsrKSB7XG4gICAgICAgIGxldCBub2RlID0gY29udGVudC5maXJzdENoaWxkO1xuICAgICAgICBsZWZ0Tm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgaWYgKGkgPT0gc2xpY2Uub3BlblN0YXJ0KVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNvbnRlbnQgPSBub2RlLmNvbnRlbnQ7XG4gICAgfVxuICAgIC8vIEJhY2sgdXAgcHJlZmVycmVkRGVwdGggdG8gY292ZXIgZGVmaW5pbmcgdGV4dGJsb2NrcyBkaXJlY3RseVxuICAgIC8vIGFib3ZlIGl0LCBwb3NzaWJseSBza2lwcGluZyBhIG5vbi1kZWZpbmluZyB0ZXh0YmxvY2suXG4gICAgZm9yIChsZXQgZCA9IHByZWZlcnJlZERlcHRoIC0gMTsgZCA+PSAwOyBkLS0pIHtcbiAgICAgICAgbGV0IGxlZnROb2RlID0gbGVmdE5vZGVzW2RdLCBkZWYgPSBkZWZpbmVzQ29udGVudChsZWZ0Tm9kZS50eXBlKTtcbiAgICAgICAgaWYgKGRlZiAmJiAhbGVmdE5vZGUuc2FtZU1hcmt1cCgkZnJvbS5ub2RlKE1hdGguYWJzKHByZWZlcnJlZFRhcmdldCkgLSAxKSkpXG4gICAgICAgICAgICBwcmVmZXJyZWREZXB0aCA9IGQ7XG4gICAgICAgIGVsc2UgaWYgKGRlZiB8fCAhbGVmdE5vZGUudHlwZS5pc1RleHRibG9jaylcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBmb3IgKGxldCBqID0gc2xpY2Uub3BlblN0YXJ0OyBqID49IDA7IGotLSkge1xuICAgICAgICBsZXQgb3BlbkRlcHRoID0gKGogKyBwcmVmZXJyZWREZXB0aCArIDEpICUgKHNsaWNlLm9wZW5TdGFydCArIDEpO1xuICAgICAgICBsZXQgaW5zZXJ0ID0gbGVmdE5vZGVzW29wZW5EZXB0aF07XG4gICAgICAgIGlmICghaW5zZXJ0KVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0RGVwdGhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBMb29wIG92ZXIgcG9zc2libGUgZXhwYW5zaW9uIGxldmVscywgc3RhcnRpbmcgd2l0aCB0aGVcbiAgICAgICAgICAgIC8vIHByZWZlcnJlZCBvbmVcbiAgICAgICAgICAgIGxldCB0YXJnZXREZXB0aCA9IHRhcmdldERlcHRoc1soaSArIHByZWZlcnJlZFRhcmdldEluZGV4KSAlIHRhcmdldERlcHRocy5sZW5ndGhdLCBleHBhbmQgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRhcmdldERlcHRoIDwgMCkge1xuICAgICAgICAgICAgICAgIGV4cGFuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRhcmdldERlcHRoID0gLXRhcmdldERlcHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHBhcmVudCA9ICRmcm9tLm5vZGUodGFyZ2V0RGVwdGggLSAxKSwgaW5kZXggPSAkZnJvbS5pbmRleCh0YXJnZXREZXB0aCAtIDEpO1xuICAgICAgICAgICAgaWYgKHBhcmVudC5jYW5SZXBsYWNlV2l0aChpbmRleCwgaW5kZXgsIGluc2VydC50eXBlLCBpbnNlcnQubWFya3MpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0ci5yZXBsYWNlKCRmcm9tLmJlZm9yZSh0YXJnZXREZXB0aCksIGV4cGFuZCA/ICR0by5hZnRlcih0YXJnZXREZXB0aCkgOiB0bywgbmV3IFNsaWNlKGNsb3NlRnJhZ21lbnQoc2xpY2UuY29udGVudCwgMCwgc2xpY2Uub3BlblN0YXJ0LCBvcGVuRGVwdGgpLCBvcGVuRGVwdGgsIHNsaWNlLm9wZW5FbmQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgc3RhcnRTdGVwcyA9IHRyLnN0ZXBzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gdGFyZ2V0RGVwdGhzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRyLnJlcGxhY2UoZnJvbSwgdG8sIHNsaWNlKTtcbiAgICAgICAgaWYgKHRyLnN0ZXBzLmxlbmd0aCA+IHN0YXJ0U3RlcHMpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgbGV0IGRlcHRoID0gdGFyZ2V0RGVwdGhzW2ldO1xuICAgICAgICBpZiAoZGVwdGggPCAwKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGZyb20gPSAkZnJvbS5iZWZvcmUoZGVwdGgpO1xuICAgICAgICB0byA9ICR0by5hZnRlcihkZXB0aCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xvc2VGcmFnbWVudChmcmFnbWVudCwgZGVwdGgsIG9sZE9wZW4sIG5ld09wZW4sIHBhcmVudCkge1xuICAgIGlmIChkZXB0aCA8IG9sZE9wZW4pIHtcbiAgICAgICAgbGV0IGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgZnJhZ21lbnQgPSBmcmFnbWVudC5yZXBsYWNlQ2hpbGQoMCwgZmlyc3QuY29weShjbG9zZUZyYWdtZW50KGZpcnN0LmNvbnRlbnQsIGRlcHRoICsgMSwgb2xkT3BlbiwgbmV3T3BlbiwgZmlyc3QpKSk7XG4gICAgfVxuICAgIGlmIChkZXB0aCA+IG5ld09wZW4pIHtcbiAgICAgICAgbGV0IG1hdGNoID0gcGFyZW50LmNvbnRlbnRNYXRjaEF0KDApO1xuICAgICAgICBsZXQgc3RhcnQgPSBtYXRjaC5maWxsQmVmb3JlKGZyYWdtZW50KS5hcHBlbmQoZnJhZ21lbnQpO1xuICAgICAgICBmcmFnbWVudCA9IHN0YXJ0LmFwcGVuZChtYXRjaC5tYXRjaEZyYWdtZW50KHN0YXJ0KS5maWxsQmVmb3JlKEZyYWdtZW50LmVtcHR5LCB0cnVlKSk7XG4gICAgfVxuICAgIHJldHVybiBmcmFnbWVudDtcbn1cbmZ1bmN0aW9uIHJlcGxhY2VSYW5nZVdpdGgodHIsIGZyb20sIHRvLCBub2RlKSB7XG4gICAgaWYgKCFub2RlLmlzSW5saW5lICYmIGZyb20gPT0gdG8gJiYgdHIuZG9jLnJlc29sdmUoZnJvbSkucGFyZW50LmNvbnRlbnQuc2l6ZSkge1xuICAgICAgICBsZXQgcG9pbnQgPSBpbnNlcnRQb2ludCh0ci5kb2MsIGZyb20sIG5vZGUudHlwZSk7XG4gICAgICAgIGlmIChwb2ludCAhPSBudWxsKVxuICAgICAgICAgICAgZnJvbSA9IHRvID0gcG9pbnQ7XG4gICAgfVxuICAgIHRyLnJlcGxhY2VSYW5nZShmcm9tLCB0bywgbmV3IFNsaWNlKEZyYWdtZW50LmZyb20obm9kZSksIDAsIDApKTtcbn1cbmZ1bmN0aW9uIGRlbGV0ZVJhbmdlKHRyLCBmcm9tLCB0bykge1xuICAgIGxldCAkZnJvbSA9IHRyLmRvYy5yZXNvbHZlKGZyb20pLCAkdG8gPSB0ci5kb2MucmVzb2x2ZSh0byk7XG4gICAgbGV0IGNvdmVyZWQgPSBjb3ZlcmVkRGVwdGhzKCRmcm9tLCAkdG8pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY292ZXJlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZGVwdGggPSBjb3ZlcmVkW2ldLCBsYXN0ID0gaSA9PSBjb3ZlcmVkLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmICgobGFzdCAmJiBkZXB0aCA9PSAwKSB8fCAkZnJvbS5ub2RlKGRlcHRoKS50eXBlLmNvbnRlbnRNYXRjaC52YWxpZEVuZClcbiAgICAgICAgICAgIHJldHVybiB0ci5kZWxldGUoJGZyb20uc3RhcnQoZGVwdGgpLCAkdG8uZW5kKGRlcHRoKSk7XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgKGxhc3QgfHwgJGZyb20ubm9kZShkZXB0aCAtIDEpLmNhblJlcGxhY2UoJGZyb20uaW5kZXgoZGVwdGggLSAxKSwgJHRvLmluZGV4QWZ0ZXIoZGVwdGggLSAxKSkpKVxuICAgICAgICAgICAgcmV0dXJuIHRyLmRlbGV0ZSgkZnJvbS5iZWZvcmUoZGVwdGgpLCAkdG8uYWZ0ZXIoZGVwdGgpKTtcbiAgICB9XG4gICAgZm9yIChsZXQgZCA9IDE7IGQgPD0gJGZyb20uZGVwdGggJiYgZCA8PSAkdG8uZGVwdGg7IGQrKykge1xuICAgICAgICBpZiAoZnJvbSAtICRmcm9tLnN0YXJ0KGQpID09ICRmcm9tLmRlcHRoIC0gZCAmJiB0byA+ICRmcm9tLmVuZChkKSAmJiAkdG8uZW5kKGQpIC0gdG8gIT0gJHRvLmRlcHRoIC0gZCAmJlxuICAgICAgICAgICAgJGZyb20uc3RhcnQoZCAtIDEpID09ICR0by5zdGFydChkIC0gMSkgJiYgJGZyb20ubm9kZShkIC0gMSkuY2FuUmVwbGFjZSgkZnJvbS5pbmRleChkIC0gMSksICR0by5pbmRleChkIC0gMSkpKVxuICAgICAgICAgICAgcmV0dXJuIHRyLmRlbGV0ZSgkZnJvbS5iZWZvcmUoZCksIHRvKTtcbiAgICB9XG4gICAgdHIuZGVsZXRlKGZyb20sIHRvKTtcbn1cbi8vIFJldHVybnMgYW4gYXJyYXkgb2YgYWxsIGRlcHRocyBmb3Igd2hpY2ggJGZyb20gLSAkdG8gc3BhbnMgdGhlXG4vLyB3aG9sZSBjb250ZW50IG9mIHRoZSBub2RlcyBhdCB0aGF0IGRlcHRoLlxuZnVuY3Rpb24gY292ZXJlZERlcHRocygkZnJvbSwgJHRvKSB7XG4gICAgbGV0IHJlc3VsdCA9IFtdLCBtaW5EZXB0aCA9IE1hdGgubWluKCRmcm9tLmRlcHRoLCAkdG8uZGVwdGgpO1xuICAgIGZvciAobGV0IGQgPSBtaW5EZXB0aDsgZCA+PSAwOyBkLS0pIHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gJGZyb20uc3RhcnQoZCk7XG4gICAgICAgIGlmIChzdGFydCA8ICRmcm9tLnBvcyAtICgkZnJvbS5kZXB0aCAtIGQpIHx8XG4gICAgICAgICAgICAkdG8uZW5kKGQpID4gJHRvLnBvcyArICgkdG8uZGVwdGggLSBkKSB8fFxuICAgICAgICAgICAgJGZyb20ubm9kZShkKS50eXBlLnNwZWMuaXNvbGF0aW5nIHx8XG4gICAgICAgICAgICAkdG8ubm9kZShkKS50eXBlLnNwZWMuaXNvbGF0aW5nKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmIChzdGFydCA9PSAkdG8uc3RhcnQoZCkgfHxcbiAgICAgICAgICAgIChkID09ICRmcm9tLmRlcHRoICYmIGQgPT0gJHRvLmRlcHRoICYmICRmcm9tLnBhcmVudC5pbmxpbmVDb250ZW50ICYmICR0by5wYXJlbnQuaW5saW5lQ29udGVudCAmJlxuICAgICAgICAgICAgICAgIGQgJiYgJHRvLnN0YXJ0KGQgLSAxKSA9PSBzdGFydCAtIDEpKVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goZCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuVXBkYXRlIGFuIGF0dHJpYnV0ZSBpbiBhIHNwZWNpZmljIG5vZGUuXG4qL1xuY2xhc3MgQXR0clN0ZXAgZXh0ZW5kcyBTdGVwIHtcbiAgICAvKipcbiAgICBDb25zdHJ1Y3QgYW4gYXR0cmlidXRlIHN0ZXAuXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBUaGUgcG9zaXRpb24gb2YgdGhlIHRhcmdldCBub2RlLlxuICAgICovXG4gICAgcG9zLCBcbiAgICAvKipcbiAgICBUaGUgYXR0cmlidXRlIHRvIHNldC5cbiAgICAqL1xuICAgIGF0dHIsIFxuICAgIC8vIFRoZSBhdHRyaWJ1dGUncyBuZXcgdmFsdWUuXG4gICAgdmFsdWUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3MgPSBwb3M7XG4gICAgICAgIHRoaXMuYXR0ciA9IGF0dHI7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgYXBwbHkoZG9jKSB7XG4gICAgICAgIGxldCBub2RlID0gZG9jLm5vZGVBdCh0aGlzLnBvcyk7XG4gICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgIHJldHVybiBTdGVwUmVzdWx0LmZhaWwoXCJObyBub2RlIGF0IGF0dHJpYnV0ZSBzdGVwJ3MgcG9zaXRpb25cIik7XG4gICAgICAgIGxldCBhdHRycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gbm9kZS5hdHRycylcbiAgICAgICAgICAgIGF0dHJzW25hbWVdID0gbm9kZS5hdHRyc1tuYW1lXTtcbiAgICAgICAgYXR0cnNbdGhpcy5hdHRyXSA9IHRoaXMudmFsdWU7XG4gICAgICAgIGxldCB1cGRhdGVkID0gbm9kZS50eXBlLmNyZWF0ZShhdHRycywgbnVsbCwgbm9kZS5tYXJrcyk7XG4gICAgICAgIHJldHVybiBTdGVwUmVzdWx0LmZyb21SZXBsYWNlKGRvYywgdGhpcy5wb3MsIHRoaXMucG9zICsgMSwgbmV3IFNsaWNlKEZyYWdtZW50LmZyb20odXBkYXRlZCksIDAsIG5vZGUuaXNMZWFmID8gMCA6IDEpKTtcbiAgICB9XG4gICAgZ2V0TWFwKCkge1xuICAgICAgICByZXR1cm4gU3RlcE1hcC5lbXB0eTtcbiAgICB9XG4gICAgaW52ZXJ0KGRvYykge1xuICAgICAgICByZXR1cm4gbmV3IEF0dHJTdGVwKHRoaXMucG9zLCB0aGlzLmF0dHIsIGRvYy5ub2RlQXQodGhpcy5wb3MpLmF0dHJzW3RoaXMuYXR0cl0pO1xuICAgIH1cbiAgICBtYXAobWFwcGluZykge1xuICAgICAgICBsZXQgcG9zID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy5wb3MsIDEpO1xuICAgICAgICByZXR1cm4gcG9zLmRlbGV0ZWRBZnRlciA/IG51bGwgOiBuZXcgQXR0clN0ZXAocG9zLnBvcywgdGhpcy5hdHRyLCB0aGlzLnZhbHVlKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyBzdGVwVHlwZTogXCJhdHRyXCIsIHBvczogdGhpcy5wb3MsIGF0dHI6IHRoaXMuYXR0ciwgdmFsdWU6IHRoaXMudmFsdWUgfTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21KU09OKHNjaGVtYSwganNvbikge1xuICAgICAgICBpZiAodHlwZW9mIGpzb24ucG9zICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIGpzb24uYXR0ciAhPSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBBdHRyU3RlcC5mcm9tSlNPTlwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBdHRyU3RlcChqc29uLnBvcywganNvbi5hdHRyLCBqc29uLnZhbHVlKTtcbiAgICB9XG59XG5TdGVwLmpzb25JRChcImF0dHJcIiwgQXR0clN0ZXApO1xuLyoqXG5VcGRhdGUgYW4gYXR0cmlidXRlIGluIHRoZSBkb2Mgbm9kZS5cbiovXG5jbGFzcyBEb2NBdHRyU3RlcCBleHRlbmRzIFN0ZXAge1xuICAgIC8qKlxuICAgIENvbnN0cnVjdCBhbiBhdHRyaWJ1dGUgc3RlcC5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBhdHRyaWJ1dGUgdG8gc2V0LlxuICAgICovXG4gICAgYXR0ciwgXG4gICAgLy8gVGhlIGF0dHJpYnV0ZSdzIG5ldyB2YWx1ZS5cbiAgICB2YWx1ZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmF0dHIgPSBhdHRyO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGFwcGx5KGRvYykge1xuICAgICAgICBsZXQgYXR0cnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBmb3IgKGxldCBuYW1lIGluIGRvYy5hdHRycylcbiAgICAgICAgICAgIGF0dHJzW25hbWVdID0gZG9jLmF0dHJzW25hbWVdO1xuICAgICAgICBhdHRyc1t0aGlzLmF0dHJdID0gdGhpcy52YWx1ZTtcbiAgICAgICAgbGV0IHVwZGF0ZWQgPSBkb2MudHlwZS5jcmVhdGUoYXR0cnMsIGRvYy5jb250ZW50LCBkb2MubWFya3MpO1xuICAgICAgICByZXR1cm4gU3RlcFJlc3VsdC5vayh1cGRhdGVkKTtcbiAgICB9XG4gICAgZ2V0TWFwKCkge1xuICAgICAgICByZXR1cm4gU3RlcE1hcC5lbXB0eTtcbiAgICB9XG4gICAgaW52ZXJ0KGRvYykge1xuICAgICAgICByZXR1cm4gbmV3IERvY0F0dHJTdGVwKHRoaXMuYXR0ciwgZG9jLmF0dHJzW3RoaXMuYXR0cl0pO1xuICAgIH1cbiAgICBtYXAobWFwcGluZykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyBzdGVwVHlwZTogXCJkb2NBdHRyXCIsIGF0dHI6IHRoaXMuYXR0ciwgdmFsdWU6IHRoaXMudmFsdWUgfTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21KU09OKHNjaGVtYSwganNvbikge1xuICAgICAgICBpZiAodHlwZW9mIGpzb24uYXR0ciAhPSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBEb2NBdHRyU3RlcC5mcm9tSlNPTlwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEb2NBdHRyU3RlcChqc29uLmF0dHIsIGpzb24udmFsdWUpO1xuICAgIH1cbn1cblN0ZXAuanNvbklEKFwiZG9jQXR0clwiLCBEb2NBdHRyU3RlcCk7XG5cbi8qKlxuQGludGVybmFsXG4qL1xubGV0IFRyYW5zZm9ybUVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG59O1xuVHJhbnNmb3JtRXJyb3IgPSBmdW5jdGlvbiBUcmFuc2Zvcm1FcnJvcihtZXNzYWdlKSB7XG4gICAgbGV0IGVyciA9IEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gICAgZXJyLl9fcHJvdG9fXyA9IFRyYW5zZm9ybUVycm9yLnByb3RvdHlwZTtcbiAgICByZXR1cm4gZXJyO1xufTtcblRyYW5zZm9ybUVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcblRyYW5zZm9ybUVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRyYW5zZm9ybUVycm9yO1xuVHJhbnNmb3JtRXJyb3IucHJvdG90eXBlLm5hbWUgPSBcIlRyYW5zZm9ybUVycm9yXCI7XG4vKipcbkFic3RyYWN0aW9uIHRvIGJ1aWxkIHVwIGFuZCB0cmFjayBhbiBhcnJheSBvZlxuW3N0ZXBzXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdHJhbnNmb3JtLlN0ZXApIHJlcHJlc2VudGluZyBhIGRvY3VtZW50IHRyYW5zZm9ybWF0aW9uLlxuXG5Nb3N0IHRyYW5zZm9ybWluZyBtZXRob2RzIHJldHVybiB0aGUgYFRyYW5zZm9ybWAgb2JqZWN0IGl0c2VsZiwgc29cbnRoYXQgdGhleSBjYW4gYmUgY2hhaW5lZC5cbiovXG5jbGFzcyBUcmFuc2Zvcm0ge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIHRyYW5zZm9ybSB0aGF0IHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiBkb2N1bWVudC5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBjdXJyZW50IGRvY3VtZW50ICh0aGUgcmVzdWx0IG9mIGFwcGx5aW5nIHRoZSBzdGVwcyBpbiB0aGVcbiAgICB0cmFuc2Zvcm0pLlxuICAgICovXG4gICAgZG9jKSB7XG4gICAgICAgIHRoaXMuZG9jID0gZG9jO1xuICAgICAgICAvKipcbiAgICAgICAgVGhlIHN0ZXBzIGluIHRoaXMgdHJhbnNmb3JtLlxuICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0ZXBzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICBUaGUgZG9jdW1lbnRzIGJlZm9yZSBlYWNoIG9mIHRoZSBzdGVwcy5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kb2NzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICBBIG1hcHBpbmcgd2l0aCB0aGUgbWFwcyBmb3IgZWFjaCBvZiB0aGUgc3RlcHMgaW4gdGhpcyB0cmFuc2Zvcm0uXG4gICAgICAgICovXG4gICAgICAgIHRoaXMubWFwcGluZyA9IG5ldyBNYXBwaW5nO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgc3RhcnRpbmcgZG9jdW1lbnQuXG4gICAgKi9cbiAgICBnZXQgYmVmb3JlKCkgeyByZXR1cm4gdGhpcy5kb2NzLmxlbmd0aCA/IHRoaXMuZG9jc1swXSA6IHRoaXMuZG9jOyB9XG4gICAgLyoqXG4gICAgQXBwbHkgYSBuZXcgc3RlcCBpbiB0aGlzIHRyYW5zZm9ybSwgc2F2aW5nIHRoZSByZXN1bHQuIFRocm93cyBhblxuICAgIGVycm9yIHdoZW4gdGhlIHN0ZXAgZmFpbHMuXG4gICAgKi9cbiAgICBzdGVwKHN0ZXApIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMubWF5YmVTdGVwKHN0ZXApO1xuICAgICAgICBpZiAocmVzdWx0LmZhaWxlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBUcmFuc2Zvcm1FcnJvcihyZXN1bHQuZmFpbGVkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIFRyeSB0byBhcHBseSBhIHN0ZXAgaW4gdGhpcyB0cmFuc2Zvcm1hdGlvbiwgaWdub3JpbmcgaXQgaWYgaXRcbiAgICBmYWlscy4gUmV0dXJucyB0aGUgc3RlcCByZXN1bHQuXG4gICAgKi9cbiAgICBtYXliZVN0ZXAoc3RlcCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0gc3RlcC5hcHBseSh0aGlzLmRvYyk7XG4gICAgICAgIGlmICghcmVzdWx0LmZhaWxlZClcbiAgICAgICAgICAgIHRoaXMuYWRkU3RlcChzdGVwLCByZXN1bHQuZG9jKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgVHJ1ZSB3aGVuIHRoZSBkb2N1bWVudCBoYXMgYmVlbiBjaGFuZ2VkICh3aGVuIHRoZXJlIGFyZSBhbnlcbiAgICBzdGVwcykuXG4gICAgKi9cbiAgICBnZXQgZG9jQ2hhbmdlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcHMubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBhZGRTdGVwKHN0ZXAsIGRvYykge1xuICAgICAgICB0aGlzLmRvY3MucHVzaCh0aGlzLmRvYyk7XG4gICAgICAgIHRoaXMuc3RlcHMucHVzaChzdGVwKTtcbiAgICAgICAgdGhpcy5tYXBwaW5nLmFwcGVuZE1hcChzdGVwLmdldE1hcCgpKTtcbiAgICAgICAgdGhpcy5kb2MgPSBkb2M7XG4gICAgfVxuICAgIC8qKlxuICAgIFJlcGxhY2UgdGhlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGJldHdlZW4gYGZyb21gIGFuZCBgdG9gIHdpdGggdGhlXG4gICAgZ2l2ZW4gYHNsaWNlYC5cbiAgICAqL1xuICAgIHJlcGxhY2UoZnJvbSwgdG8gPSBmcm9tLCBzbGljZSA9IFNsaWNlLmVtcHR5KSB7XG4gICAgICAgIGxldCBzdGVwID0gcmVwbGFjZVN0ZXAodGhpcy5kb2MsIGZyb20sIHRvLCBzbGljZSk7XG4gICAgICAgIGlmIChzdGVwKVxuICAgICAgICAgICAgdGhpcy5zdGVwKHN0ZXApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgUmVwbGFjZSB0aGUgZ2l2ZW4gcmFuZ2Ugd2l0aCB0aGUgZ2l2ZW4gY29udGVudCwgd2hpY2ggbWF5IGJlIGFcbiAgICBmcmFnbWVudCwgbm9kZSwgb3IgYXJyYXkgb2Ygbm9kZXMuXG4gICAgKi9cbiAgICByZXBsYWNlV2l0aChmcm9tLCB0bywgY29udGVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKGZyb20sIHRvLCBuZXcgU2xpY2UoRnJhZ21lbnQuZnJvbShjb250ZW50KSwgMCwgMCkpO1xuICAgIH1cbiAgICAvKipcbiAgICBEZWxldGUgdGhlIGNvbnRlbnQgYmV0d2VlbiB0aGUgZ2l2ZW4gcG9zaXRpb25zLlxuICAgICovXG4gICAgZGVsZXRlKGZyb20sIHRvKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoZnJvbSwgdG8sIFNsaWNlLmVtcHR5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgSW5zZXJ0IHRoZSBnaXZlbiBjb250ZW50IGF0IHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAgICAqL1xuICAgIGluc2VydChwb3MsIGNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZVdpdGgocG9zLCBwb3MsIGNvbnRlbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXBsYWNlIGEgcmFuZ2Ugb2YgdGhlIGRvY3VtZW50IHdpdGggYSBnaXZlbiBzbGljZSwgdXNpbmdcbiAgICBgZnJvbWAsIGB0b2AsIGFuZCB0aGUgc2xpY2Unc1xuICAgIFtgb3BlblN0YXJ0YF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLlNsaWNlLm9wZW5TdGFydCkgcHJvcGVydHkgYXMgaGludHMsIHJhdGhlclxuICAgIHRoYW4gZml4ZWQgc3RhcnQgYW5kIGVuZCBwb2ludHMuIFRoaXMgbWV0aG9kIG1heSBncm93IHRoZVxuICAgIHJlcGxhY2VkIGFyZWEgb3IgY2xvc2Ugb3BlbiBub2RlcyBpbiB0aGUgc2xpY2UgaW4gb3JkZXIgdG8gZ2V0IGFcbiAgICBmaXQgdGhhdCBpcyBtb3JlIGluIGxpbmUgd2l0aCBXWVNJV1lHIGV4cGVjdGF0aW9ucywgYnkgZHJvcHBpbmdcbiAgICBmdWxseSBjb3ZlcmVkIHBhcmVudCBub2RlcyBvZiB0aGUgcmVwbGFjZWQgcmVnaW9uIHdoZW4gdGhleSBhcmVcbiAgICBtYXJrZWQgW25vbi1kZWZpbmluZyBhc1xuICAgIGNvbnRleHRdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYy5kZWZpbmluZ0FzQ29udGV4dCksIG9yIGluY2x1ZGluZyBhblxuICAgIG9wZW4gcGFyZW50IG5vZGUgZnJvbSB0aGUgc2xpY2UgdGhhdCBfaXNfIG1hcmtlZCBhcyBbZGVmaW5pbmdcbiAgICBpdHMgY29udGVudF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVTcGVjLmRlZmluaW5nRm9yQ29udGVudCkuXG4gICAgXG4gICAgVGhpcyBpcyB0aGUgbWV0aG9kLCBmb3IgZXhhbXBsZSwgdG8gaGFuZGxlIHBhc3RlLiBUaGUgc2ltaWxhclxuICAgIFtgcmVwbGFjZWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN0cmFuc2Zvcm0uVHJhbnNmb3JtLnJlcGxhY2UpIG1ldGhvZCBpcyBhIG1vcmVcbiAgICBwcmltaXRpdmUgdG9vbCB3aGljaCB3aWxsIF9ub3RfIG1vdmUgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgaXRzIGdpdmVuXG4gICAgcmFuZ2UsIGFuZCBpcyB1c2VmdWwgaW4gc2l0dWF0aW9ucyB3aGVyZSB5b3UgbmVlZCBtb3JlIHByZWNpc2VcbiAgICBjb250cm9sIG92ZXIgd2hhdCBoYXBwZW5zLlxuICAgICovXG4gICAgcmVwbGFjZVJhbmdlKGZyb20sIHRvLCBzbGljZSkge1xuICAgICAgICByZXBsYWNlUmFuZ2UodGhpcywgZnJvbSwgdG8sIHNsaWNlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIFJlcGxhY2UgdGhlIGdpdmVuIHJhbmdlIHdpdGggYSBub2RlLCBidXQgdXNlIGBmcm9tYCBhbmQgYHRvYCBhc1xuICAgIGhpbnRzLCByYXRoZXIgdGhhbiBwcmVjaXNlIHBvc2l0aW9ucy4gV2hlbiBmcm9tIGFuZCB0byBhcmUgdGhlIHNhbWVcbiAgICBhbmQgYXJlIGF0IHRoZSBzdGFydCBvciBlbmQgb2YgYSBwYXJlbnQgbm9kZSBpbiB3aGljaCB0aGUgZ2l2ZW5cbiAgICBub2RlIGRvZXNuJ3QgZml0LCB0aGlzIG1ldGhvZCBtYXkgX21vdmVfIHRoZW0gb3V0IHRvd2FyZHMgYSBwYXJlbnRcbiAgICB0aGF0IGRvZXMgYWxsb3cgdGhlIGdpdmVuIG5vZGUgdG8gYmUgcGxhY2VkLiBXaGVuIHRoZSBnaXZlbiByYW5nZVxuICAgIGNvbXBsZXRlbHkgY292ZXJzIGEgcGFyZW50IG5vZGUsIHRoaXMgbWV0aG9kIG1heSBjb21wbGV0ZWx5IHJlcGxhY2VcbiAgICB0aGF0IHBhcmVudCBub2RlLlxuICAgICovXG4gICAgcmVwbGFjZVJhbmdlV2l0aChmcm9tLCB0bywgbm9kZSkge1xuICAgICAgICByZXBsYWNlUmFuZ2VXaXRoKHRoaXMsIGZyb20sIHRvLCBub2RlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIERlbGV0ZSB0aGUgZ2l2ZW4gcmFuZ2UsIGV4cGFuZGluZyBpdCB0byBjb3ZlciBmdWxseSBjb3ZlcmVkXG4gICAgcGFyZW50IG5vZGVzIHVudGlsIGEgdmFsaWQgcmVwbGFjZSBpcyBmb3VuZC5cbiAgICAqL1xuICAgIGRlbGV0ZVJhbmdlKGZyb20sIHRvKSB7XG4gICAgICAgIGRlbGV0ZVJhbmdlKHRoaXMsIGZyb20sIHRvKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIFNwbGl0IHRoZSBjb250ZW50IGluIHRoZSBnaXZlbiByYW5nZSBvZmYgZnJvbSBpdHMgcGFyZW50LCBpZiB0aGVyZVxuICAgIGlzIHNpYmxpbmcgY29udGVudCBiZWZvcmUgb3IgYWZ0ZXIgaXQsIGFuZCBtb3ZlIGl0IHVwIHRoZSB0cmVlIHRvXG4gICAgdGhlIGRlcHRoIHNwZWNpZmllZCBieSBgdGFyZ2V0YC4gWW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gICAgW2BsaWZ0VGFyZ2V0YF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3RyYW5zZm9ybS5saWZ0VGFyZ2V0KSB0byBjb21wdXRlIGB0YXJnZXRgLCB0byBtYWtlXG4gICAgc3VyZSB0aGUgbGlmdCBpcyB2YWxpZC5cbiAgICAqL1xuICAgIGxpZnQocmFuZ2UsIHRhcmdldCkge1xuICAgICAgICBsaWZ0KHRoaXMsIHJhbmdlLCB0YXJnZXQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgSm9pbiB0aGUgYmxvY2tzIGFyb3VuZCB0aGUgZ2l2ZW4gcG9zaXRpb24uIElmIGRlcHRoIGlzIDIsIHRoZWlyXG4gICAgbGFzdCBhbmQgZmlyc3Qgc2libGluZ3MgYXJlIGFsc28gam9pbmVkLCBhbmQgc28gb24uXG4gICAgKi9cbiAgICBqb2luKHBvcywgZGVwdGggPSAxKSB7XG4gICAgICAgIGpvaW4odGhpcywgcG9zLCBkZXB0aCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBXcmFwIHRoZSBnaXZlbiBbcmFuZ2VdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlUmFuZ2UpIGluIHRoZSBnaXZlbiBzZXQgb2Ygd3JhcHBlcnMuXG4gICAgVGhlIHdyYXBwZXJzIGFyZSBhc3N1bWVkIHRvIGJlIHZhbGlkIGluIHRoaXMgcG9zaXRpb24sIGFuZCBzaG91bGRcbiAgICBwcm9iYWJseSBiZSBjb21wdXRlZCB3aXRoIFtgZmluZFdyYXBwaW5nYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3RyYW5zZm9ybS5maW5kV3JhcHBpbmcpLlxuICAgICovXG4gICAgd3JhcChyYW5nZSwgd3JhcHBlcnMpIHtcbiAgICAgICAgd3JhcCh0aGlzLCByYW5nZSwgd3JhcHBlcnMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgU2V0IHRoZSB0eXBlIG9mIGFsbCB0ZXh0YmxvY2tzIChwYXJ0bHkpIGJldHdlZW4gYGZyb21gIGFuZCBgdG9gIHRvXG4gICAgdGhlIGdpdmVuIG5vZGUgdHlwZSB3aXRoIHRoZSBnaXZlbiBhdHRyaWJ1dGVzLlxuICAgICovXG4gICAgc2V0QmxvY2tUeXBlKGZyb20sIHRvID0gZnJvbSwgdHlwZSwgYXR0cnMgPSBudWxsKSB7XG4gICAgICAgIHNldEJsb2NrVHlwZSh0aGlzLCBmcm9tLCB0bywgdHlwZSwgYXR0cnMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgQ2hhbmdlIHRoZSB0eXBlLCBhdHRyaWJ1dGVzLCBhbmQvb3IgbWFya3Mgb2YgdGhlIG5vZGUgYXQgYHBvc2AuXG4gICAgV2hlbiBgdHlwZWAgaXNuJ3QgZ2l2ZW4sIHRoZSBleGlzdGluZyBub2RlIHR5cGUgaXMgcHJlc2VydmVkLFxuICAgICovXG4gICAgc2V0Tm9kZU1hcmt1cChwb3MsIHR5cGUsIGF0dHJzID0gbnVsbCwgbWFya3MpIHtcbiAgICAgICAgc2V0Tm9kZU1hcmt1cCh0aGlzLCBwb3MsIHR5cGUsIGF0dHJzLCBtYXJrcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBTZXQgYSBzaW5nbGUgYXR0cmlidXRlIG9uIGEgZ2l2ZW4gbm9kZSB0byBhIG5ldyB2YWx1ZS5cbiAgICBUaGUgYHBvc2AgYWRkcmVzc2VzIHRoZSBkb2N1bWVudCBjb250ZW50LiBVc2UgYHNldERvY0F0dHJpYnV0ZWBcbiAgICB0byBzZXQgYXR0cmlidXRlcyBvbiB0aGUgZG9jdW1lbnQgaXRzZWxmLlxuICAgICovXG4gICAgc2V0Tm9kZUF0dHJpYnV0ZShwb3MsIGF0dHIsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc3RlcChuZXcgQXR0clN0ZXAocG9zLCBhdHRyLCB2YWx1ZSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgU2V0IGEgc2luZ2xlIGF0dHJpYnV0ZSBvbiB0aGUgZG9jdW1lbnQgdG8gYSBuZXcgdmFsdWUuXG4gICAgKi9cbiAgICBzZXREb2NBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5zdGVwKG5ldyBEb2NBdHRyU3RlcChhdHRyLCB2YWx1ZSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgQWRkIGEgbWFyayB0byB0aGUgbm9kZSBhdCBwb3NpdGlvbiBgcG9zYC5cbiAgICAqL1xuICAgIGFkZE5vZGVNYXJrKHBvcywgbWFyaykge1xuICAgICAgICB0aGlzLnN0ZXAobmV3IEFkZE5vZGVNYXJrU3RlcChwb3MsIG1hcmspKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIFJlbW92ZSBhIG1hcmsgKG9yIGFsbCBtYXJrcyBvZiB0aGUgZ2l2ZW4gdHlwZSkgZnJvbSB0aGUgbm9kZSBhdFxuICAgIHBvc2l0aW9uIGBwb3NgLlxuICAgICovXG4gICAgcmVtb3ZlTm9kZU1hcmsocG9zLCBtYXJrKSB7XG4gICAgICAgIGxldCBub2RlID0gdGhpcy5kb2Mubm9kZUF0KHBvcyk7XG4gICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiTm8gbm9kZSBhdCBwb3NpdGlvbiBcIiArIHBvcyk7XG4gICAgICAgIGlmIChtYXJrIGluc3RhbmNlb2YgTWFyaykge1xuICAgICAgICAgICAgaWYgKG1hcmsuaXNJblNldChub2RlLm1hcmtzKSlcbiAgICAgICAgICAgICAgICB0aGlzLnN0ZXAobmV3IFJlbW92ZU5vZGVNYXJrU3RlcChwb3MsIG1hcmspKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBzZXQgPSBub2RlLm1hcmtzLCBmb3VuZCwgc3RlcHMgPSBbXTtcbiAgICAgICAgICAgIHdoaWxlIChmb3VuZCA9IG1hcmsuaXNJblNldChzZXQpKSB7XG4gICAgICAgICAgICAgICAgc3RlcHMucHVzaChuZXcgUmVtb3ZlTm9kZU1hcmtTdGVwKHBvcywgZm91bmQpKTtcbiAgICAgICAgICAgICAgICBzZXQgPSBmb3VuZC5yZW1vdmVGcm9tU2V0KHNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gc3RlcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgICAgICAgICAgdGhpcy5zdGVwKHN0ZXBzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgU3BsaXQgdGhlIG5vZGUgYXQgdGhlIGdpdmVuIHBvc2l0aW9uLCBhbmQgb3B0aW9uYWxseSwgaWYgYGRlcHRoYCBpc1xuICAgIGdyZWF0ZXIgdGhhbiBvbmUsIGFueSBudW1iZXIgb2Ygbm9kZXMgYWJvdmUgdGhhdC4gQnkgZGVmYXVsdCwgdGhlXG4gICAgcGFydHMgc3BsaXQgb2ZmIHdpbGwgaW5oZXJpdCB0aGUgbm9kZSB0eXBlIG9mIHRoZSBvcmlnaW5hbCBub2RlLlxuICAgIFRoaXMgY2FuIGJlIGNoYW5nZWQgYnkgcGFzc2luZyBhbiBhcnJheSBvZiB0eXBlcyBhbmQgYXR0cmlidXRlcyB0b1xuICAgIHVzZSBhZnRlciB0aGUgc3BsaXQgKHdpdGggdGhlIG91dGVybW9zdCBub2RlcyBjb21pbmcgZmlyc3QpLlxuICAgICovXG4gICAgc3BsaXQocG9zLCBkZXB0aCA9IDEsIHR5cGVzQWZ0ZXIpIHtcbiAgICAgICAgc3BsaXQodGhpcywgcG9zLCBkZXB0aCwgdHlwZXNBZnRlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBBZGQgdGhlIGdpdmVuIG1hcmsgdG8gdGhlIGlubGluZSBjb250ZW50IGJldHdlZW4gYGZyb21gIGFuZCBgdG9gLlxuICAgICovXG4gICAgYWRkTWFyayhmcm9tLCB0bywgbWFyaykge1xuICAgICAgICBhZGRNYXJrKHRoaXMsIGZyb20sIHRvLCBtYXJrKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIFJlbW92ZSBtYXJrcyBmcm9tIGlubGluZSBub2RlcyBiZXR3ZWVuIGBmcm9tYCBhbmQgYHRvYC4gV2hlblxuICAgIGBtYXJrYCBpcyBhIHNpbmdsZSBtYXJrLCByZW1vdmUgcHJlY2lzZWx5IHRoYXQgbWFyay4gV2hlbiBpdCBpc1xuICAgIGEgbWFyayB0eXBlLCByZW1vdmUgYWxsIG1hcmtzIG9mIHRoYXQgdHlwZS4gV2hlbiBpdCBpcyBudWxsLFxuICAgIHJlbW92ZSBhbGwgbWFya3Mgb2YgYW55IHR5cGUuXG4gICAgKi9cbiAgICByZW1vdmVNYXJrKGZyb20sIHRvLCBtYXJrKSB7XG4gICAgICAgIHJlbW92ZU1hcmsodGhpcywgZnJvbSwgdG8sIG1hcmspO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgUmVtb3ZlcyBhbGwgbWFya3MgYW5kIG5vZGVzIGZyb20gdGhlIGNvbnRlbnQgb2YgdGhlIG5vZGUgYXRcbiAgICBgcG9zYCB0aGF0IGRvbid0IG1hdGNoIHRoZSBnaXZlbiBuZXcgcGFyZW50IG5vZGUgdHlwZS4gQWNjZXB0c1xuICAgIGFuIG9wdGlvbmFsIHN0YXJ0aW5nIFtjb250ZW50IG1hdGNoXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jbW9kZWwuQ29udGVudE1hdGNoKSBhc1xuICAgIHRoaXJkIGFyZ3VtZW50LlxuICAgICovXG4gICAgY2xlYXJJbmNvbXBhdGlibGUocG9zLCBwYXJlbnRUeXBlLCBtYXRjaCkge1xuICAgICAgICBjbGVhckluY29tcGF0aWJsZSh0aGlzLCBwb3MsIHBhcmVudFR5cGUsIG1hdGNoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5leHBvcnQgeyBBZGRNYXJrU3RlcCwgQWRkTm9kZU1hcmtTdGVwLCBBdHRyU3RlcCwgRG9jQXR0clN0ZXAsIE1hcFJlc3VsdCwgTWFwcGluZywgUmVtb3ZlTWFya1N0ZXAsIFJlbW92ZU5vZGVNYXJrU3RlcCwgUmVwbGFjZUFyb3VuZFN0ZXAsIFJlcGxhY2VTdGVwLCBTdGVwLCBTdGVwTWFwLCBTdGVwUmVzdWx0LCBUcmFuc2Zvcm0sIFRyYW5zZm9ybUVycm9yLCBjYW5Kb2luLCBjYW5TcGxpdCwgZHJvcFBvaW50LCBmaW5kV3JhcHBpbmcsIGluc2VydFBvaW50LCBqb2luUG9pbnQsIGxpZnRUYXJnZXQsIHJlcGxhY2VTdGVwIH07XG4iLCJpbXBvcnQgeyBTbGljZSwgRnJhZ21lbnQsIE1hcmssIE5vZGUgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgeyBSZXBsYWNlU3RlcCwgUmVwbGFjZUFyb3VuZFN0ZXAsIFRyYW5zZm9ybSB9IGZyb20gJ3Byb3NlbWlycm9yLXRyYW5zZm9ybSc7XG5cbmNvbnN0IGNsYXNzZXNCeUlkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKlxuU3VwZXJjbGFzcyBmb3IgZWRpdG9yIHNlbGVjdGlvbnMuIEV2ZXJ5IHNlbGVjdGlvbiB0eXBlIHNob3VsZFxuZXh0ZW5kIHRoaXMuIFNob3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5LlxuKi9cbmNsYXNzIFNlbGVjdGlvbiB7XG4gICAgLyoqXG4gICAgSW5pdGlhbGl6ZSBhIHNlbGVjdGlvbiB3aXRoIHRoZSBoZWFkIGFuZCBhbmNob3IgYW5kIHJhbmdlcy4gSWYgbm9cbiAgICByYW5nZXMgYXJlIGdpdmVuLCBjb25zdHJ1Y3RzIGEgc2luZ2xlIHJhbmdlIGFjcm9zcyBgJGFuY2hvcmAgYW5kXG4gICAgYCRoZWFkYC5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSByZXNvbHZlZCBhbmNob3Igb2YgdGhlIHNlbGVjdGlvbiAodGhlIHNpZGUgdGhhdCBzdGF5cyBpblxuICAgIHBsYWNlIHdoZW4gdGhlIHNlbGVjdGlvbiBpcyBtb2RpZmllZCkuXG4gICAgKi9cbiAgICAkYW5jaG9yLCBcbiAgICAvKipcbiAgICBUaGUgcmVzb2x2ZWQgaGVhZCBvZiB0aGUgc2VsZWN0aW9uICh0aGUgc2lkZSB0aGF0IG1vdmVzIHdoZW5cbiAgICB0aGUgc2VsZWN0aW9uIGlzIG1vZGlmaWVkKS5cbiAgICAqL1xuICAgICRoZWFkLCByYW5nZXMpIHtcbiAgICAgICAgdGhpcy4kYW5jaG9yID0gJGFuY2hvcjtcbiAgICAgICAgdGhpcy4kaGVhZCA9ICRoZWFkO1xuICAgICAgICB0aGlzLnJhbmdlcyA9IHJhbmdlcyB8fCBbbmV3IFNlbGVjdGlvblJhbmdlKCRhbmNob3IubWluKCRoZWFkKSwgJGFuY2hvci5tYXgoJGhlYWQpKV07XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSBzZWxlY3Rpb24ncyBhbmNob3IsIGFzIGFuIHVucmVzb2x2ZWQgcG9zaXRpb24uXG4gICAgKi9cbiAgICBnZXQgYW5jaG9yKCkgeyByZXR1cm4gdGhpcy4kYW5jaG9yLnBvczsgfVxuICAgIC8qKlxuICAgIFRoZSBzZWxlY3Rpb24ncyBoZWFkLlxuICAgICovXG4gICAgZ2V0IGhlYWQoKSB7IHJldHVybiB0aGlzLiRoZWFkLnBvczsgfVxuICAgIC8qKlxuICAgIFRoZSBsb3dlciBib3VuZCBvZiB0aGUgc2VsZWN0aW9uJ3MgbWFpbiByYW5nZS5cbiAgICAqL1xuICAgIGdldCBmcm9tKCkgeyByZXR1cm4gdGhpcy4kZnJvbS5wb3M7IH1cbiAgICAvKipcbiAgICBUaGUgdXBwZXIgYm91bmQgb2YgdGhlIHNlbGVjdGlvbidzIG1haW4gcmFuZ2UuXG4gICAgKi9cbiAgICBnZXQgdG8oKSB7IHJldHVybiB0aGlzLiR0by5wb3M7IH1cbiAgICAvKipcbiAgICBUaGUgcmVzb2x2ZWQgbG93ZXIgIGJvdW5kIG9mIHRoZSBzZWxlY3Rpb24ncyBtYWluIHJhbmdlLlxuICAgICovXG4gICAgZ2V0ICRmcm9tKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZXNbMF0uJGZyb207XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSByZXNvbHZlZCB1cHBlciBib3VuZCBvZiB0aGUgc2VsZWN0aW9uJ3MgbWFpbiByYW5nZS5cbiAgICAqL1xuICAgIGdldCAkdG8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlc1swXS4kdG87XG4gICAgfVxuICAgIC8qKlxuICAgIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gY29udGFpbnMgYW55IGNvbnRlbnQuXG4gICAgKi9cbiAgICBnZXQgZW1wdHkoKSB7XG4gICAgICAgIGxldCByYW5nZXMgPSB0aGlzLnJhbmdlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBpZiAocmFuZ2VzW2ldLiRmcm9tLnBvcyAhPSByYW5nZXNbaV0uJHRvLnBvcylcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIGNvbnRlbnQgb2YgdGhpcyBzZWxlY3Rpb24gYXMgYSBzbGljZS5cbiAgICAqL1xuICAgIGNvbnRlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRmcm9tLmRvYy5zbGljZSh0aGlzLmZyb20sIHRoaXMudG8sIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXBsYWNlIHRoZSBzZWxlY3Rpb24gd2l0aCBhIHNsaWNlIG9yLCBpZiBubyBzbGljZSBpcyBnaXZlbixcbiAgICBkZWxldGUgdGhlIHNlbGVjdGlvbi4gV2lsbCBhcHBlbmQgdG8gdGhlIGdpdmVuIHRyYW5zYWN0aW9uLlxuICAgICovXG4gICAgcmVwbGFjZSh0ciwgY29udGVudCA9IFNsaWNlLmVtcHR5KSB7XG4gICAgICAgIC8vIFB1dCB0aGUgbmV3IHNlbGVjdGlvbiBhdCB0aGUgcG9zaXRpb24gYWZ0ZXIgdGhlIGluc2VydGVkXG4gICAgICAgIC8vIGNvbnRlbnQuIFdoZW4gdGhhdCBlbmRlZCBpbiBhbiBpbmxpbmUgbm9kZSwgc2VhcmNoIGJhY2t3YXJkcyxcbiAgICAgICAgLy8gdG8gZ2V0IHRoZSBwb3NpdGlvbiBhZnRlciB0aGF0IG5vZGUuIElmIG5vdCwgc2VhcmNoIGZvcndhcmQuXG4gICAgICAgIGxldCBsYXN0Tm9kZSA9IGNvbnRlbnQuY29udGVudC5sYXN0Q2hpbGQsIGxhc3RQYXJlbnQgPSBudWxsO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnQub3BlbkVuZDsgaSsrKSB7XG4gICAgICAgICAgICBsYXN0UGFyZW50ID0gbGFzdE5vZGU7XG4gICAgICAgICAgICBsYXN0Tm9kZSA9IGxhc3ROb2RlLmxhc3RDaGlsZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWFwRnJvbSA9IHRyLnN0ZXBzLmxlbmd0aCwgcmFuZ2VzID0gdGhpcy5yYW5nZXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgeyAkZnJvbSwgJHRvIH0gPSByYW5nZXNbaV0sIG1hcHBpbmcgPSB0ci5tYXBwaW5nLnNsaWNlKG1hcEZyb20pO1xuICAgICAgICAgICAgdHIucmVwbGFjZVJhbmdlKG1hcHBpbmcubWFwKCRmcm9tLnBvcyksIG1hcHBpbmcubWFwKCR0by5wb3MpLCBpID8gU2xpY2UuZW1wdHkgOiBjb250ZW50KTtcbiAgICAgICAgICAgIGlmIChpID09IDApXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uVG9JbnNlcnRpb25FbmQodHIsIG1hcEZyb20sIChsYXN0Tm9kZSA/IGxhc3ROb2RlLmlzSW5saW5lIDogbGFzdFBhcmVudCAmJiBsYXN0UGFyZW50LmlzVGV4dGJsb2NrKSA/IC0xIDogMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgUmVwbGFjZSB0aGUgc2VsZWN0aW9uIHdpdGggdGhlIGdpdmVuIG5vZGUsIGFwcGVuZGluZyB0aGUgY2hhbmdlc1xuICAgIHRvIHRoZSBnaXZlbiB0cmFuc2FjdGlvbi5cbiAgICAqL1xuICAgIHJlcGxhY2VXaXRoKHRyLCBub2RlKSB7XG4gICAgICAgIGxldCBtYXBGcm9tID0gdHIuc3RlcHMubGVuZ3RoLCByYW5nZXMgPSB0aGlzLnJhbmdlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHJhbmdlc1tpXSwgbWFwcGluZyA9IHRyLm1hcHBpbmcuc2xpY2UobWFwRnJvbSk7XG4gICAgICAgICAgICBsZXQgZnJvbSA9IG1hcHBpbmcubWFwKCRmcm9tLnBvcyksIHRvID0gbWFwcGluZy5tYXAoJHRvLnBvcyk7XG4gICAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgICAgIHRyLmRlbGV0ZVJhbmdlKGZyb20sIHRvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyLnJlcGxhY2VSYW5nZVdpdGgoZnJvbSwgdG8sIG5vZGUpO1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvblRvSW5zZXJ0aW9uRW5kKHRyLCBtYXBGcm9tLCBub2RlLmlzSW5saW5lID8gLTEgOiAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIGEgdmFsaWQgY3Vyc29yIG9yIGxlYWYgbm9kZSBzZWxlY3Rpb24gc3RhcnRpbmcgYXQgdGhlIGdpdmVuXG4gICAgcG9zaXRpb24gYW5kIHNlYXJjaGluZyBiYWNrIGlmIGBkaXJgIGlzIG5lZ2F0aXZlLCBhbmQgZm9yd2FyZCBpZlxuICAgIHBvc2l0aXZlLiBXaGVuIGB0ZXh0T25seWAgaXMgdHJ1ZSwgb25seSBjb25zaWRlciBjdXJzb3JcbiAgICBzZWxlY3Rpb25zLiBXaWxsIHJldHVybiBudWxsIHdoZW4gbm8gdmFsaWQgc2VsZWN0aW9uIHBvc2l0aW9uIGlzXG4gICAgZm91bmQuXG4gICAgKi9cbiAgICBzdGF0aWMgZmluZEZyb20oJHBvcywgZGlyLCB0ZXh0T25seSA9IGZhbHNlKSB7XG4gICAgICAgIGxldCBpbm5lciA9ICRwb3MucGFyZW50LmlubGluZUNvbnRlbnQgPyBuZXcgVGV4dFNlbGVjdGlvbigkcG9zKVxuICAgICAgICAgICAgOiBmaW5kU2VsZWN0aW9uSW4oJHBvcy5ub2RlKDApLCAkcG9zLnBhcmVudCwgJHBvcy5wb3MsICRwb3MuaW5kZXgoKSwgZGlyLCB0ZXh0T25seSk7XG4gICAgICAgIGlmIChpbm5lcilcbiAgICAgICAgICAgIHJldHVybiBpbm5lcjtcbiAgICAgICAgZm9yIChsZXQgZGVwdGggPSAkcG9zLmRlcHRoIC0gMTsgZGVwdGggPj0gMDsgZGVwdGgtLSkge1xuICAgICAgICAgICAgbGV0IGZvdW5kID0gZGlyIDwgMFxuICAgICAgICAgICAgICAgID8gZmluZFNlbGVjdGlvbkluKCRwb3Mubm9kZSgwKSwgJHBvcy5ub2RlKGRlcHRoKSwgJHBvcy5iZWZvcmUoZGVwdGggKyAxKSwgJHBvcy5pbmRleChkZXB0aCksIGRpciwgdGV4dE9ubHkpXG4gICAgICAgICAgICAgICAgOiBmaW5kU2VsZWN0aW9uSW4oJHBvcy5ub2RlKDApLCAkcG9zLm5vZGUoZGVwdGgpLCAkcG9zLmFmdGVyKGRlcHRoICsgMSksICRwb3MuaW5kZXgoZGVwdGgpICsgMSwgZGlyLCB0ZXh0T25seSk7XG4gICAgICAgICAgICBpZiAoZm91bmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIGEgdmFsaWQgY3Vyc29yIG9yIGxlYWYgbm9kZSBzZWxlY3Rpb24gbmVhciB0aGUgZ2l2ZW5cbiAgICBwb3NpdGlvbi4gU2VhcmNoZXMgZm9yd2FyZCBmaXJzdCBieSBkZWZhdWx0LCBidXQgaWYgYGJpYXNgIGlzXG4gICAgbmVnYXRpdmUsIGl0IHdpbGwgc2VhcmNoIGJhY2t3YXJkcyBmaXJzdC5cbiAgICAqL1xuICAgIHN0YXRpYyBuZWFyKCRwb3MsIGJpYXMgPSAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmRGcm9tKCRwb3MsIGJpYXMpIHx8IHRoaXMuZmluZEZyb20oJHBvcywgLWJpYXMpIHx8IG5ldyBBbGxTZWxlY3Rpb24oJHBvcy5ub2RlKDApKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRmluZCB0aGUgY3Vyc29yIG9yIGxlYWYgbm9kZSBzZWxlY3Rpb24gY2xvc2VzdCB0byB0aGUgc3RhcnQgb2ZcbiAgICB0aGUgZ2l2ZW4gZG9jdW1lbnQuIFdpbGwgcmV0dXJuIGFuXG4gICAgW2BBbGxTZWxlY3Rpb25gXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc3RhdGUuQWxsU2VsZWN0aW9uKSBpZiBubyB2YWxpZCBwb3NpdGlvblxuICAgIGV4aXN0cy5cbiAgICAqL1xuICAgIHN0YXRpYyBhdFN0YXJ0KGRvYykge1xuICAgICAgICByZXR1cm4gZmluZFNlbGVjdGlvbkluKGRvYywgZG9jLCAwLCAwLCAxKSB8fCBuZXcgQWxsU2VsZWN0aW9uKGRvYyk7XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgdGhlIGN1cnNvciBvciBsZWFmIG5vZGUgc2VsZWN0aW9uIGNsb3Nlc3QgdG8gdGhlIGVuZCBvZiB0aGVcbiAgICBnaXZlbiBkb2N1bWVudC5cbiAgICAqL1xuICAgIHN0YXRpYyBhdEVuZChkb2MpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRTZWxlY3Rpb25Jbihkb2MsIGRvYywgZG9jLmNvbnRlbnQuc2l6ZSwgZG9jLmNoaWxkQ291bnQsIC0xKSB8fCBuZXcgQWxsU2VsZWN0aW9uKGRvYyk7XG4gICAgfVxuICAgIC8qKlxuICAgIERlc2VyaWFsaXplIHRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIGEgc2VsZWN0aW9uLiBNdXN0IGJlXG4gICAgaW1wbGVtZW50ZWQgZm9yIGN1c3RvbSBjbGFzc2VzIChhcyBhIHN0YXRpYyBjbGFzcyBtZXRob2QpLlxuICAgICovXG4gICAgc3RhdGljIGZyb21KU09OKGRvYywganNvbikge1xuICAgICAgICBpZiAoIWpzb24gfHwgIWpzb24udHlwZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgU2VsZWN0aW9uLmZyb21KU09OXCIpO1xuICAgICAgICBsZXQgY2xzID0gY2xhc3Nlc0J5SWRbanNvbi50eXBlXTtcbiAgICAgICAgaWYgKCFjbHMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgTm8gc2VsZWN0aW9uIHR5cGUgJHtqc29uLnR5cGV9IGRlZmluZWRgKTtcbiAgICAgICAgcmV0dXJuIGNscy5mcm9tSlNPTihkb2MsIGpzb24pO1xuICAgIH1cbiAgICAvKipcbiAgICBUbyBiZSBhYmxlIHRvIGRlc2VyaWFsaXplIHNlbGVjdGlvbnMgZnJvbSBKU09OLCBjdXN0b20gc2VsZWN0aW9uXG4gICAgY2xhc3NlcyBtdXN0IHJlZ2lzdGVyIHRoZW1zZWx2ZXMgd2l0aCBhbiBJRCBzdHJpbmcsIHNvIHRoYXQgdGhleVxuICAgIGNhbiBiZSBkaXNhbWJpZ3VhdGVkLiBUcnkgdG8gcGljayBzb21ldGhpbmcgdGhhdCdzIHVubGlrZWx5IHRvXG4gICAgY2xhc2ggd2l0aCBjbGFzc2VzIGZyb20gb3RoZXIgbW9kdWxlcy5cbiAgICAqL1xuICAgIHN0YXRpYyBqc29uSUQoaWQsIHNlbGVjdGlvbkNsYXNzKSB7XG4gICAgICAgIGlmIChpZCBpbiBjbGFzc2VzQnlJZClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiRHVwbGljYXRlIHVzZSBvZiBzZWxlY3Rpb24gSlNPTiBJRCBcIiArIGlkKTtcbiAgICAgICAgY2xhc3Nlc0J5SWRbaWRdID0gc2VsZWN0aW9uQ2xhc3M7XG4gICAgICAgIHNlbGVjdGlvbkNsYXNzLnByb3RvdHlwZS5qc29uSUQgPSBpZDtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGlvbkNsYXNzO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgYSBbYm9va21hcmtdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5TZWxlY3Rpb25Cb29rbWFyaykgZm9yIHRoaXMgc2VsZWN0aW9uLFxuICAgIHdoaWNoIGlzIGEgdmFsdWUgdGhhdCBjYW4gYmUgbWFwcGVkIHdpdGhvdXQgaGF2aW5nIGFjY2VzcyB0byBhXG4gICAgY3VycmVudCBkb2N1bWVudCwgYW5kIGxhdGVyIHJlc29sdmVkIHRvIGEgcmVhbCBzZWxlY3Rpb24gZm9yIGFcbiAgICBnaXZlbiBkb2N1bWVudCBhZ2Fpbi4gKFRoaXMgaXMgdXNlZCBtb3N0bHkgYnkgdGhlIGhpc3RvcnkgdG9cbiAgICB0cmFjayBhbmQgcmVzdG9yZSBvbGQgc2VsZWN0aW9ucy4pIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mXG4gICAgdGhpcyBtZXRob2QganVzdCBjb252ZXJ0cyB0aGUgc2VsZWN0aW9uIHRvIGEgdGV4dCBzZWxlY3Rpb24gYW5kXG4gICAgcmV0dXJucyB0aGUgYm9va21hcmsgZm9yIHRoYXQuXG4gICAgKi9cbiAgICBnZXRCb29rbWFyaygpIHtcbiAgICAgICAgcmV0dXJuIFRleHRTZWxlY3Rpb24uYmV0d2Vlbih0aGlzLiRhbmNob3IsIHRoaXMuJGhlYWQpLmdldEJvb2ttYXJrKCk7XG4gICAgfVxufVxuU2VsZWN0aW9uLnByb3RvdHlwZS52aXNpYmxlID0gdHJ1ZTtcbi8qKlxuUmVwcmVzZW50cyBhIHNlbGVjdGVkIHJhbmdlIGluIGEgZG9jdW1lbnQuXG4qL1xuY2xhc3MgU2VsZWN0aW9uUmFuZ2Uge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIHJhbmdlLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIGxvd2VyIGJvdW5kIG9mIHRoZSByYW5nZS5cbiAgICAqL1xuICAgICRmcm9tLCBcbiAgICAvKipcbiAgICBUaGUgdXBwZXIgYm91bmQgb2YgdGhlIHJhbmdlLlxuICAgICovXG4gICAgJHRvKSB7XG4gICAgICAgIHRoaXMuJGZyb20gPSAkZnJvbTtcbiAgICAgICAgdGhpcy4kdG8gPSAkdG87XG4gICAgfVxufVxubGV0IHdhcm5lZEFib3V0VGV4dFNlbGVjdGlvbiA9IGZhbHNlO1xuZnVuY3Rpb24gY2hlY2tUZXh0U2VsZWN0aW9uKCRwb3MpIHtcbiAgICBpZiAoIXdhcm5lZEFib3V0VGV4dFNlbGVjdGlvbiAmJiAhJHBvcy5wYXJlbnQuaW5saW5lQ29udGVudCkge1xuICAgICAgICB3YXJuZWRBYm91dFRleHRTZWxlY3Rpb24gPSB0cnVlO1xuICAgICAgICBjb25zb2xlW1wid2FyblwiXShcIlRleHRTZWxlY3Rpb24gZW5kcG9pbnQgbm90IHBvaW50aW5nIGludG8gYSBub2RlIHdpdGggaW5saW5lIGNvbnRlbnQgKFwiICsgJHBvcy5wYXJlbnQudHlwZS5uYW1lICsgXCIpXCIpO1xuICAgIH1cbn1cbi8qKlxuQSB0ZXh0IHNlbGVjdGlvbiByZXByZXNlbnRzIGEgY2xhc3NpY2FsIGVkaXRvciBzZWxlY3Rpb24sIHdpdGggYVxuaGVhZCAodGhlIG1vdmluZyBzaWRlKSBhbmQgYW5jaG9yIChpbW1vYmlsZSBzaWRlKSwgYm90aCBvZiB3aGljaFxucG9pbnQgaW50byB0ZXh0YmxvY2sgbm9kZXMuIEl0IGNhbiBiZSBlbXB0eSAoYSByZWd1bGFyIGN1cnNvclxucG9zaXRpb24pLlxuKi9cbmNsYXNzIFRleHRTZWxlY3Rpb24gZXh0ZW5kcyBTZWxlY3Rpb24ge1xuICAgIC8qKlxuICAgIENvbnN0cnVjdCBhIHRleHQgc2VsZWN0aW9uIGJldHdlZW4gdGhlIGdpdmVuIHBvaW50cy5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCRhbmNob3IsICRoZWFkID0gJGFuY2hvcikge1xuICAgICAgICBjaGVja1RleHRTZWxlY3Rpb24oJGFuY2hvcik7XG4gICAgICAgIGNoZWNrVGV4dFNlbGVjdGlvbigkaGVhZCk7XG4gICAgICAgIHN1cGVyKCRhbmNob3IsICRoZWFkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJucyBhIHJlc29sdmVkIHBvc2l0aW9uIGlmIHRoaXMgaXMgYSBjdXJzb3Igc2VsZWN0aW9uIChhblxuICAgIGVtcHR5IHRleHQgc2VsZWN0aW9uKSwgYW5kIG51bGwgb3RoZXJ3aXNlLlxuICAgICovXG4gICAgZ2V0ICRjdXJzb3IoKSB7IHJldHVybiB0aGlzLiRhbmNob3IucG9zID09IHRoaXMuJGhlYWQucG9zID8gdGhpcy4kaGVhZCA6IG51bGw7IH1cbiAgICBtYXAoZG9jLCBtYXBwaW5nKSB7XG4gICAgICAgIGxldCAkaGVhZCA9IGRvYy5yZXNvbHZlKG1hcHBpbmcubWFwKHRoaXMuaGVhZCkpO1xuICAgICAgICBpZiAoISRoZWFkLnBhcmVudC5pbmxpbmVDb250ZW50KVxuICAgICAgICAgICAgcmV0dXJuIFNlbGVjdGlvbi5uZWFyKCRoZWFkKTtcbiAgICAgICAgbGV0ICRhbmNob3IgPSBkb2MucmVzb2x2ZShtYXBwaW5nLm1hcCh0aGlzLmFuY2hvcikpO1xuICAgICAgICByZXR1cm4gbmV3IFRleHRTZWxlY3Rpb24oJGFuY2hvci5wYXJlbnQuaW5saW5lQ29udGVudCA/ICRhbmNob3IgOiAkaGVhZCwgJGhlYWQpO1xuICAgIH1cbiAgICByZXBsYWNlKHRyLCBjb250ZW50ID0gU2xpY2UuZW1wdHkpIHtcbiAgICAgICAgc3VwZXIucmVwbGFjZSh0ciwgY29udGVudCk7XG4gICAgICAgIGlmIChjb250ZW50ID09IFNsaWNlLmVtcHR5KSB7XG4gICAgICAgICAgICBsZXQgbWFya3MgPSB0aGlzLiRmcm9tLm1hcmtzQWNyb3NzKHRoaXMuJHRvKTtcbiAgICAgICAgICAgIGlmIChtYXJrcylcbiAgICAgICAgICAgICAgICB0ci5lbnN1cmVNYXJrcyhtYXJrcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXEob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbiAmJiBvdGhlci5hbmNob3IgPT0gdGhpcy5hbmNob3IgJiYgb3RoZXIuaGVhZCA9PSB0aGlzLmhlYWQ7XG4gICAgfVxuICAgIGdldEJvb2ttYXJrKCkge1xuICAgICAgICByZXR1cm4gbmV3IFRleHRCb29rbWFyayh0aGlzLmFuY2hvciwgdGhpcy5oZWFkKTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiBcInRleHRcIiwgYW5jaG9yOiB0aGlzLmFuY2hvciwgaGVhZDogdGhpcy5oZWFkIH07XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgc3RhdGljIGZyb21KU09OKGRvYywganNvbikge1xuICAgICAgICBpZiAodHlwZW9mIGpzb24uYW5jaG9yICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIGpzb24uaGVhZCAhPSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBUZXh0U2VsZWN0aW9uLmZyb21KU09OXCIpO1xuICAgICAgICByZXR1cm4gbmV3IFRleHRTZWxlY3Rpb24oZG9jLnJlc29sdmUoanNvbi5hbmNob3IpLCBkb2MucmVzb2x2ZShqc29uLmhlYWQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgdGV4dCBzZWxlY3Rpb24gZnJvbSBub24tcmVzb2x2ZWQgcG9zaXRpb25zLlxuICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShkb2MsIGFuY2hvciwgaGVhZCA9IGFuY2hvcikge1xuICAgICAgICBsZXQgJGFuY2hvciA9IGRvYy5yZXNvbHZlKGFuY2hvcik7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcygkYW5jaG9yLCBoZWFkID09IGFuY2hvciA/ICRhbmNob3IgOiBkb2MucmVzb2x2ZShoZWFkKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIFJldHVybiBhIHRleHQgc2VsZWN0aW9uIHRoYXQgc3BhbnMgdGhlIGdpdmVuIHBvc2l0aW9ucyBvciwgaWZcbiAgICB0aGV5IGFyZW4ndCB0ZXh0IHBvc2l0aW9ucywgZmluZCBhIHRleHQgc2VsZWN0aW9uIG5lYXIgdGhlbS5cbiAgICBgYmlhc2AgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBtZXRob2Qgc2VhcmNoZXMgZm9yd2FyZCAoZGVmYXVsdClcbiAgICBvciBiYWNrd2FyZHMgKG5lZ2F0aXZlIG51bWJlcikgZmlyc3QuIFdpbGwgZmFsbCBiYWNrIHRvIGNhbGxpbmdcbiAgICBbYFNlbGVjdGlvbi5uZWFyYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLlNlbGVjdGlvbl5uZWFyKSB3aGVuIHRoZSBkb2N1bWVudFxuICAgIGRvZXNuJ3QgY29udGFpbiBhIHZhbGlkIHRleHQgcG9zaXRpb24uXG4gICAgKi9cbiAgICBzdGF0aWMgYmV0d2VlbigkYW5jaG9yLCAkaGVhZCwgYmlhcykge1xuICAgICAgICBsZXQgZFBvcyA9ICRhbmNob3IucG9zIC0gJGhlYWQucG9zO1xuICAgICAgICBpZiAoIWJpYXMgfHwgZFBvcylcbiAgICAgICAgICAgIGJpYXMgPSBkUG9zID49IDAgPyAxIDogLTE7XG4gICAgICAgIGlmICghJGhlYWQucGFyZW50LmlubGluZUNvbnRlbnQpIHtcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IFNlbGVjdGlvbi5maW5kRnJvbSgkaGVhZCwgYmlhcywgdHJ1ZSkgfHwgU2VsZWN0aW9uLmZpbmRGcm9tKCRoZWFkLCAtYmlhcywgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoZm91bmQpXG4gICAgICAgICAgICAgICAgJGhlYWQgPSBmb3VuZC4kaGVhZDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gU2VsZWN0aW9uLm5lYXIoJGhlYWQsIGJpYXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghJGFuY2hvci5wYXJlbnQuaW5saW5lQ29udGVudCkge1xuICAgICAgICAgICAgaWYgKGRQb3MgPT0gMCkge1xuICAgICAgICAgICAgICAgICRhbmNob3IgPSAkaGVhZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICRhbmNob3IgPSAoU2VsZWN0aW9uLmZpbmRGcm9tKCRhbmNob3IsIC1iaWFzLCB0cnVlKSB8fCBTZWxlY3Rpb24uZmluZEZyb20oJGFuY2hvciwgYmlhcywgdHJ1ZSkpLiRhbmNob3I7XG4gICAgICAgICAgICAgICAgaWYgKCgkYW5jaG9yLnBvcyA8ICRoZWFkLnBvcykgIT0gKGRQb3MgPCAwKSlcbiAgICAgICAgICAgICAgICAgICAgJGFuY2hvciA9ICRoZWFkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVGV4dFNlbGVjdGlvbigkYW5jaG9yLCAkaGVhZCk7XG4gICAgfVxufVxuU2VsZWN0aW9uLmpzb25JRChcInRleHRcIiwgVGV4dFNlbGVjdGlvbik7XG5jbGFzcyBUZXh0Qm9va21hcmsge1xuICAgIGNvbnN0cnVjdG9yKGFuY2hvciwgaGVhZCkge1xuICAgICAgICB0aGlzLmFuY2hvciA9IGFuY2hvcjtcbiAgICAgICAgdGhpcy5oZWFkID0gaGVhZDtcbiAgICB9XG4gICAgbWFwKG1hcHBpbmcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0Qm9va21hcmsobWFwcGluZy5tYXAodGhpcy5hbmNob3IpLCBtYXBwaW5nLm1hcCh0aGlzLmhlYWQpKTtcbiAgICB9XG4gICAgcmVzb2x2ZShkb2MpIHtcbiAgICAgICAgcmV0dXJuIFRleHRTZWxlY3Rpb24uYmV0d2Vlbihkb2MucmVzb2x2ZSh0aGlzLmFuY2hvciksIGRvYy5yZXNvbHZlKHRoaXMuaGVhZCkpO1xuICAgIH1cbn1cbi8qKlxuQSBub2RlIHNlbGVjdGlvbiBpcyBhIHNlbGVjdGlvbiB0aGF0IHBvaW50cyBhdCBhIHNpbmdsZSBub2RlLiBBbGxcbm5vZGVzIG1hcmtlZCBbc2VsZWN0YWJsZV0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVTcGVjLnNlbGVjdGFibGUpIGNhbiBiZSB0aGVcbnRhcmdldCBvZiBhIG5vZGUgc2VsZWN0aW9uLiBJbiBzdWNoIGEgc2VsZWN0aW9uLCBgZnJvbWAgYW5kIGB0b2BcbnBvaW50IGRpcmVjdGx5IGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIHNlbGVjdGVkIG5vZGUsIGBhbmNob3JgIGVxdWFsc1xuYGZyb21gLCBhbmQgYGhlYWRgIGVxdWFscyBgdG9gLi5cbiovXG5jbGFzcyBOb2RlU2VsZWN0aW9uIGV4dGVuZHMgU2VsZWN0aW9uIHtcbiAgICAvKipcbiAgICBDcmVhdGUgYSBub2RlIHNlbGVjdGlvbi4gRG9lcyBub3QgdmVyaWZ5IHRoZSB2YWxpZGl0eSBvZiBpdHNcbiAgICBhcmd1bWVudC5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCRwb3MpIHtcbiAgICAgICAgbGV0IG5vZGUgPSAkcG9zLm5vZGVBZnRlcjtcbiAgICAgICAgbGV0ICRlbmQgPSAkcG9zLm5vZGUoMCkucmVzb2x2ZSgkcG9zLnBvcyArIG5vZGUubm9kZVNpemUpO1xuICAgICAgICBzdXBlcigkcG9zLCAkZW5kKTtcbiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICB9XG4gICAgbWFwKGRvYywgbWFwcGluZykge1xuICAgICAgICBsZXQgeyBkZWxldGVkLCBwb3MgfSA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMuYW5jaG9yKTtcbiAgICAgICAgbGV0ICRwb3MgPSBkb2MucmVzb2x2ZShwb3MpO1xuICAgICAgICBpZiAoZGVsZXRlZClcbiAgICAgICAgICAgIHJldHVybiBTZWxlY3Rpb24ubmVhcigkcG9zKTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlU2VsZWN0aW9uKCRwb3MpO1xuICAgIH1cbiAgICBjb250ZW50KCkge1xuICAgICAgICByZXR1cm4gbmV3IFNsaWNlKEZyYWdtZW50LmZyb20odGhpcy5ub2RlKSwgMCwgMCk7XG4gICAgfVxuICAgIGVxKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24gJiYgb3RoZXIuYW5jaG9yID09IHRoaXMuYW5jaG9yO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IFwibm9kZVwiLCBhbmNob3I6IHRoaXMuYW5jaG9yIH07XG4gICAgfVxuICAgIGdldEJvb2ttYXJrKCkgeyByZXR1cm4gbmV3IE5vZGVCb29rbWFyayh0aGlzLmFuY2hvcik7IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIHN0YXRpYyBmcm9tSlNPTihkb2MsIGpzb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBqc29uLmFuY2hvciAhPSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBOb2RlU2VsZWN0aW9uLmZyb21KU09OXCIpO1xuICAgICAgICByZXR1cm4gbmV3IE5vZGVTZWxlY3Rpb24oZG9jLnJlc29sdmUoanNvbi5hbmNob3IpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbm9kZSBzZWxlY3Rpb24gZnJvbSBub24tcmVzb2x2ZWQgcG9zaXRpb25zLlxuICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShkb2MsIGZyb20pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlU2VsZWN0aW9uKGRvYy5yZXNvbHZlKGZyb20pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBnaXZlbiBub2RlIG1heSBiZSBzZWxlY3RlZCBhcyBhIG5vZGVcbiAgICBzZWxlY3Rpb24uXG4gICAgKi9cbiAgICBzdGF0aWMgaXNTZWxlY3RhYmxlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuICFub2RlLmlzVGV4dCAmJiBub2RlLnR5cGUuc3BlYy5zZWxlY3RhYmxlICE9PSBmYWxzZTtcbiAgICB9XG59XG5Ob2RlU2VsZWN0aW9uLnByb3RvdHlwZS52aXNpYmxlID0gZmFsc2U7XG5TZWxlY3Rpb24uanNvbklEKFwibm9kZVwiLCBOb2RlU2VsZWN0aW9uKTtcbmNsYXNzIE5vZGVCb29rbWFyayB7XG4gICAgY29uc3RydWN0b3IoYW5jaG9yKSB7XG4gICAgICAgIHRoaXMuYW5jaG9yID0gYW5jaG9yO1xuICAgIH1cbiAgICBtYXAobWFwcGluZykge1xuICAgICAgICBsZXQgeyBkZWxldGVkLCBwb3MgfSA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMuYW5jaG9yKTtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZWQgPyBuZXcgVGV4dEJvb2ttYXJrKHBvcywgcG9zKSA6IG5ldyBOb2RlQm9va21hcmsocG9zKTtcbiAgICB9XG4gICAgcmVzb2x2ZShkb2MpIHtcbiAgICAgICAgbGV0ICRwb3MgPSBkb2MucmVzb2x2ZSh0aGlzLmFuY2hvciksIG5vZGUgPSAkcG9zLm5vZGVBZnRlcjtcbiAgICAgICAgaWYgKG5vZGUgJiYgTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUobm9kZSkpXG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vZGVTZWxlY3Rpb24oJHBvcyk7XG4gICAgICAgIHJldHVybiBTZWxlY3Rpb24ubmVhcigkcG9zKTtcbiAgICB9XG59XG4vKipcbkEgc2VsZWN0aW9uIHR5cGUgdGhhdCByZXByZXNlbnRzIHNlbGVjdGluZyB0aGUgd2hvbGUgZG9jdW1lbnRcbih3aGljaCBjYW4gbm90IG5lY2Vzc2FyaWx5IGJlIGV4cHJlc3NlZCB3aXRoIGEgdGV4dCBzZWxlY3Rpb24sIHdoZW5cbnRoZXJlIGFyZSBmb3IgZXhhbXBsZSBsZWFmIGJsb2NrIG5vZGVzIGF0IHRoZSBzdGFydCBvciBlbmQgb2YgdGhlXG5kb2N1bWVudCkuXG4qL1xuY2xhc3MgQWxsU2VsZWN0aW9uIGV4dGVuZHMgU2VsZWN0aW9uIHtcbiAgICAvKipcbiAgICBDcmVhdGUgYW4gYWxsLXNlbGVjdGlvbiBvdmVyIHRoZSBnaXZlbiBkb2N1bWVudC5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRvYykge1xuICAgICAgICBzdXBlcihkb2MucmVzb2x2ZSgwKSwgZG9jLnJlc29sdmUoZG9jLmNvbnRlbnQuc2l6ZSkpO1xuICAgIH1cbiAgICByZXBsYWNlKHRyLCBjb250ZW50ID0gU2xpY2UuZW1wdHkpIHtcbiAgICAgICAgaWYgKGNvbnRlbnQgPT0gU2xpY2UuZW1wdHkpIHtcbiAgICAgICAgICAgIHRyLmRlbGV0ZSgwLCB0ci5kb2MuY29udGVudC5zaXplKTtcbiAgICAgICAgICAgIGxldCBzZWwgPSBTZWxlY3Rpb24uYXRTdGFydCh0ci5kb2MpO1xuICAgICAgICAgICAgaWYgKCFzZWwuZXEodHIuc2VsZWN0aW9uKSlcbiAgICAgICAgICAgICAgICB0ci5zZXRTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLnJlcGxhY2UodHIsIGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSlNPTigpIHsgcmV0dXJuIHsgdHlwZTogXCJhbGxcIiB9OyB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzdGF0aWMgZnJvbUpTT04oZG9jKSB7IHJldHVybiBuZXcgQWxsU2VsZWN0aW9uKGRvYyk7IH1cbiAgICBtYXAoZG9jKSB7IHJldHVybiBuZXcgQWxsU2VsZWN0aW9uKGRvYyk7IH1cbiAgICBlcShvdGhlcikgeyByZXR1cm4gb3RoZXIgaW5zdGFuY2VvZiBBbGxTZWxlY3Rpb247IH1cbiAgICBnZXRCb29rbWFyaygpIHsgcmV0dXJuIEFsbEJvb2ttYXJrOyB9XG59XG5TZWxlY3Rpb24uanNvbklEKFwiYWxsXCIsIEFsbFNlbGVjdGlvbik7XG5jb25zdCBBbGxCb29rbWFyayA9IHtcbiAgICBtYXAoKSB7IHJldHVybiB0aGlzOyB9LFxuICAgIHJlc29sdmUoZG9jKSB7IHJldHVybiBuZXcgQWxsU2VsZWN0aW9uKGRvYyk7IH1cbn07XG4vLyBGSVhNRSB3ZSdsbCBuZWVkIHNvbWUgYXdhcmVuZXNzIG9mIHRleHQgZGlyZWN0aW9uIHdoZW4gc2Nhbm5pbmcgZm9yIHNlbGVjdGlvbnNcbi8vIFRyeSB0byBmaW5kIGEgc2VsZWN0aW9uIGluc2lkZSB0aGUgZ2l2ZW4gbm9kZS4gYHBvc2AgcG9pbnRzIGF0IHRoZVxuLy8gcG9zaXRpb24gd2hlcmUgdGhlIHNlYXJjaCBzdGFydHMuIFdoZW4gYHRleHRgIGlzIHRydWUsIG9ubHkgcmV0dXJuXG4vLyB0ZXh0IHNlbGVjdGlvbnMuXG5mdW5jdGlvbiBmaW5kU2VsZWN0aW9uSW4oZG9jLCBub2RlLCBwb3MsIGluZGV4LCBkaXIsIHRleHQgPSBmYWxzZSkge1xuICAgIGlmIChub2RlLmlubGluZUNvbnRlbnQpXG4gICAgICAgIHJldHVybiBUZXh0U2VsZWN0aW9uLmNyZWF0ZShkb2MsIHBvcyk7XG4gICAgZm9yIChsZXQgaSA9IGluZGV4IC0gKGRpciA+IDAgPyAwIDogMSk7IGRpciA+IDAgPyBpIDwgbm9kZS5jaGlsZENvdW50IDogaSA+PSAwOyBpICs9IGRpcikge1xuICAgICAgICBsZXQgY2hpbGQgPSBub2RlLmNoaWxkKGkpO1xuICAgICAgICBpZiAoIWNoaWxkLmlzQXRvbSkge1xuICAgICAgICAgICAgbGV0IGlubmVyID0gZmluZFNlbGVjdGlvbkluKGRvYywgY2hpbGQsIHBvcyArIGRpciwgZGlyIDwgMCA/IGNoaWxkLmNoaWxkQ291bnQgOiAwLCBkaXIsIHRleHQpO1xuICAgICAgICAgICAgaWYgKGlubmVyKVxuICAgICAgICAgICAgICAgIHJldHVybiBpbm5lcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGV4dCAmJiBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShjaGlsZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOb2RlU2VsZWN0aW9uLmNyZWF0ZShkb2MsIHBvcyAtIChkaXIgPCAwID8gY2hpbGQubm9kZVNpemUgOiAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9zICs9IGNoaWxkLm5vZGVTaXplICogZGlyO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHNlbGVjdGlvblRvSW5zZXJ0aW9uRW5kKHRyLCBzdGFydExlbiwgYmlhcykge1xuICAgIGxldCBsYXN0ID0gdHIuc3RlcHMubGVuZ3RoIC0gMTtcbiAgICBpZiAobGFzdCA8IHN0YXJ0TGVuKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IHN0ZXAgPSB0ci5zdGVwc1tsYXN0XTtcbiAgICBpZiAoIShzdGVwIGluc3RhbmNlb2YgUmVwbGFjZVN0ZXAgfHwgc3RlcCBpbnN0YW5jZW9mIFJlcGxhY2VBcm91bmRTdGVwKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCBtYXAgPSB0ci5tYXBwaW5nLm1hcHNbbGFzdF0sIGVuZDtcbiAgICBtYXAuZm9yRWFjaCgoX2Zyb20sIF90bywgX25ld0Zyb20sIG5ld1RvKSA9PiB7IGlmIChlbmQgPT0gbnVsbClcbiAgICAgICAgZW5kID0gbmV3VG87IH0pO1xuICAgIHRyLnNldFNlbGVjdGlvbihTZWxlY3Rpb24ubmVhcih0ci5kb2MucmVzb2x2ZShlbmQpLCBiaWFzKSk7XG59XG5cbmNvbnN0IFVQREFURURfU0VMID0gMSwgVVBEQVRFRF9NQVJLUyA9IDIsIFVQREFURURfU0NST0xMID0gNDtcbi8qKlxuQW4gZWRpdG9yIHN0YXRlIHRyYW5zYWN0aW9uLCB3aGljaCBjYW4gYmUgYXBwbGllZCB0byBhIHN0YXRlIHRvXG5jcmVhdGUgYW4gdXBkYXRlZCBzdGF0ZS4gVXNlXG5bYEVkaXRvclN0YXRlLnRyYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlLnRyKSB0byBjcmVhdGUgYW4gaW5zdGFuY2UuXG5cblRyYW5zYWN0aW9ucyB0cmFjayBjaGFuZ2VzIHRvIHRoZSBkb2N1bWVudCAodGhleSBhcmUgYSBzdWJjbGFzcyBvZlxuW2BUcmFuc2Zvcm1gXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdHJhbnNmb3JtLlRyYW5zZm9ybSkpLCBidXQgYWxzbyBvdGhlciBzdGF0ZSBjaGFuZ2VzLFxubGlrZSBzZWxlY3Rpb24gdXBkYXRlcyBhbmQgYWRqdXN0bWVudHMgb2YgdGhlIHNldCBvZiBbc3RvcmVkXG5tYXJrc10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlLnN0b3JlZE1hcmtzKS4gSW4gYWRkaXRpb24sIHlvdSBjYW4gc3RvcmVcbm1ldGFkYXRhIHByb3BlcnRpZXMgaW4gYSB0cmFuc2FjdGlvbiwgd2hpY2ggYXJlIGV4dHJhIHBpZWNlcyBvZlxuaW5mb3JtYXRpb24gdGhhdCBjbGllbnQgY29kZSBvciBwbHVnaW5zIGNhbiB1c2UgdG8gZGVzY3JpYmUgd2hhdCBhXG50cmFuc2FjdGlvbiByZXByZXNlbnRzLCBzbyB0aGF0IHRoZXkgY2FuIHVwZGF0ZSB0aGVpciBbb3duXG5zdGF0ZV0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLlN0YXRlRmllbGQpIGFjY29yZGluZ2x5LlxuXG5UaGUgW2VkaXRvciB2aWV3XShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3KSB1c2VzIGEgZmV3IG1ldGFkYXRhXG5wcm9wZXJ0aWVzOiBpdCB3aWxsIGF0dGFjaCBhIHByb3BlcnR5IGBcInBvaW50ZXJcImAgd2l0aCB0aGUgdmFsdWVcbmB0cnVlYCB0byBzZWxlY3Rpb24gdHJhbnNhY3Rpb25zIGRpcmVjdGx5IGNhdXNlZCBieSBtb3VzZSBvciB0b3VjaFxuaW5wdXQsIGEgYFwiY29tcG9zaXRpb25cImAgcHJvcGVydHkgaG9sZGluZyBhbiBJRCBpZGVudGlmeWluZyB0aGVcbmNvbXBvc2l0aW9uIHRoYXQgY2F1c2VkIGl0IHRvIHRyYW5zYWN0aW9ucyBjYXVzZWQgYnkgY29tcG9zZWQgRE9NXG5pbnB1dCwgYW5kIGEgYFwidWlFdmVudFwiYCBwcm9wZXJ0eSBvZiB0aGF0IG1heSBiZSBgXCJwYXN0ZVwiYCxcbmBcImN1dFwiYCwgb3IgYFwiZHJvcFwiYC5cbiovXG5jbGFzcyBUcmFuc2FjdGlvbiBleHRlbmRzIFRyYW5zZm9ybSB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzdGF0ZSkge1xuICAgICAgICBzdXBlcihzdGF0ZS5kb2MpO1xuICAgICAgICAvLyBUaGUgc3RlcCBjb3VudCBmb3Igd2hpY2ggdGhlIGN1cnJlbnQgc2VsZWN0aW9uIGlzIHZhbGlkLlxuICAgICAgICB0aGlzLmN1clNlbGVjdGlvbkZvciA9IDA7XG4gICAgICAgIC8vIEJpdGZpZWxkIHRvIHRyYWNrIHdoaWNoIGFzcGVjdHMgb2YgdGhlIHN0YXRlIHdlcmUgdXBkYXRlZCBieVxuICAgICAgICAvLyB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICAgICB0aGlzLnVwZGF0ZWQgPSAwO1xuICAgICAgICAvLyBPYmplY3QgdXNlZCB0byBzdG9yZSBtZXRhZGF0YSBwcm9wZXJ0aWVzIGZvciB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICAgIHRoaXMubWV0YSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMudGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMuY3VyU2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgICAgICB0aGlzLnN0b3JlZE1hcmtzID0gc3RhdGUuc3RvcmVkTWFya3M7XG4gICAgfVxuICAgIC8qKlxuICAgIFRoZSB0cmFuc2FjdGlvbidzIGN1cnJlbnQgc2VsZWN0aW9uLiBUaGlzIGRlZmF1bHRzIHRvIHRoZSBlZGl0b3JcbiAgICBzZWxlY3Rpb24gW21hcHBlZF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLlNlbGVjdGlvbi5tYXApIHRocm91Z2ggdGhlIHN0ZXBzIGluIHRoZVxuICAgIHRyYW5zYWN0aW9uLCBidXQgY2FuIGJlIG92ZXJ3cml0dGVuIHdpdGhcbiAgICBbYHNldFNlbGVjdGlvbmBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvbi5zZXRTZWxlY3Rpb24pLlxuICAgICovXG4gICAgZ2V0IHNlbGVjdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VyU2VsZWN0aW9uRm9yIDwgdGhpcy5zdGVwcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuY3VyU2VsZWN0aW9uID0gdGhpcy5jdXJTZWxlY3Rpb24ubWFwKHRoaXMuZG9jLCB0aGlzLm1hcHBpbmcuc2xpY2UodGhpcy5jdXJTZWxlY3Rpb25Gb3IpKTtcbiAgICAgICAgICAgIHRoaXMuY3VyU2VsZWN0aW9uRm9yID0gdGhpcy5zdGVwcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY3VyU2VsZWN0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICBVcGRhdGUgdGhlIHRyYW5zYWN0aW9uJ3MgY3VycmVudCBzZWxlY3Rpb24uIFdpbGwgZGV0ZXJtaW5lIHRoZVxuICAgIHNlbGVjdGlvbiB0aGF0IHRoZSBlZGl0b3IgZ2V0cyB3aGVuIHRoZSB0cmFuc2FjdGlvbiBpcyBhcHBsaWVkLlxuICAgICovXG4gICAgc2V0U2VsZWN0aW9uKHNlbGVjdGlvbikge1xuICAgICAgICBpZiAoc2VsZWN0aW9uLiRmcm9tLmRvYyAhPSB0aGlzLmRvYylcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiU2VsZWN0aW9uIHBhc3NlZCB0byBzZXRTZWxlY3Rpb24gbXVzdCBwb2ludCBhdCB0aGUgY3VycmVudCBkb2N1bWVudFwiKTtcbiAgICAgICAgdGhpcy5jdXJTZWxlY3Rpb24gPSBzZWxlY3Rpb247XG4gICAgICAgIHRoaXMuY3VyU2VsZWN0aW9uRm9yID0gdGhpcy5zdGVwcy5sZW5ndGg7XG4gICAgICAgIHRoaXMudXBkYXRlZCA9ICh0aGlzLnVwZGF0ZWQgfCBVUERBVEVEX1NFTCkgJiB+VVBEQVRFRF9NQVJLUztcbiAgICAgICAgdGhpcy5zdG9yZWRNYXJrcyA9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBXaGV0aGVyIHRoZSBzZWxlY3Rpb24gd2FzIGV4cGxpY2l0bHkgdXBkYXRlZCBieSB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICovXG4gICAgZ2V0IHNlbGVjdGlvblNldCgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnVwZGF0ZWQgJiBVUERBVEVEX1NFTCkgPiAwO1xuICAgIH1cbiAgICAvKipcbiAgICBTZXQgdGhlIGN1cnJlbnQgc3RvcmVkIG1hcmtzLlxuICAgICovXG4gICAgc2V0U3RvcmVkTWFya3MobWFya3MpIHtcbiAgICAgICAgdGhpcy5zdG9yZWRNYXJrcyA9IG1hcmtzO1xuICAgICAgICB0aGlzLnVwZGF0ZWQgfD0gVVBEQVRFRF9NQVJLUztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIE1ha2Ugc3VyZSB0aGUgY3VycmVudCBzdG9yZWQgbWFya3Mgb3IsIGlmIHRoYXQgaXMgbnVsbCwgdGhlIG1hcmtzXG4gICAgYXQgdGhlIHNlbGVjdGlvbiwgbWF0Y2ggdGhlIGdpdmVuIHNldCBvZiBtYXJrcy4gRG9lcyBub3RoaW5nIGlmXG4gICAgdGhpcyBpcyBhbHJlYWR5IHRoZSBjYXNlLlxuICAgICovXG4gICAgZW5zdXJlTWFya3MobWFya3MpIHtcbiAgICAgICAgaWYgKCFNYXJrLnNhbWVTZXQodGhpcy5zdG9yZWRNYXJrcyB8fCB0aGlzLnNlbGVjdGlvbi4kZnJvbS5tYXJrcygpLCBtYXJrcykpXG4gICAgICAgICAgICB0aGlzLnNldFN0b3JlZE1hcmtzKG1hcmtzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIEFkZCBhIG1hcmsgdG8gdGhlIHNldCBvZiBzdG9yZWQgbWFya3MuXG4gICAgKi9cbiAgICBhZGRTdG9yZWRNYXJrKG1hcmspIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5zdXJlTWFya3MobWFyay5hZGRUb1NldCh0aGlzLnN0b3JlZE1hcmtzIHx8IHRoaXMuc2VsZWN0aW9uLiRoZWFkLm1hcmtzKCkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmVtb3ZlIGEgbWFyayBvciBtYXJrIHR5cGUgZnJvbSB0aGUgc2V0IG9mIHN0b3JlZCBtYXJrcy5cbiAgICAqL1xuICAgIHJlbW92ZVN0b3JlZE1hcmsobWFyaykge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnN1cmVNYXJrcyhtYXJrLnJlbW92ZUZyb21TZXQodGhpcy5zdG9yZWRNYXJrcyB8fCB0aGlzLnNlbGVjdGlvbi4kaGVhZC5tYXJrcygpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIFdoZXRoZXIgdGhlIHN0b3JlZCBtYXJrcyB3ZXJlIGV4cGxpY2l0bHkgc2V0IGZvciB0aGlzIHRyYW5zYWN0aW9uLlxuICAgICovXG4gICAgZ2V0IHN0b3JlZE1hcmtzU2V0KCkge1xuICAgICAgICByZXR1cm4gKHRoaXMudXBkYXRlZCAmIFVQREFURURfTUFSS1MpID4gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBhZGRTdGVwKHN0ZXAsIGRvYykge1xuICAgICAgICBzdXBlci5hZGRTdGVwKHN0ZXAsIGRvYyk7XG4gICAgICAgIHRoaXMudXBkYXRlZCA9IHRoaXMudXBkYXRlZCAmIH5VUERBVEVEX01BUktTO1xuICAgICAgICB0aGlzLnN0b3JlZE1hcmtzID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgVXBkYXRlIHRoZSB0aW1lc3RhbXAgZm9yIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAqL1xuICAgIHNldFRpbWUodGltZSkge1xuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgUmVwbGFjZSB0aGUgY3VycmVudCBzZWxlY3Rpb24gd2l0aCB0aGUgZ2l2ZW4gc2xpY2UuXG4gICAgKi9cbiAgICByZXBsYWNlU2VsZWN0aW9uKHNsaWNlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uLnJlcGxhY2UodGhpcywgc2xpY2UpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgUmVwbGFjZSB0aGUgc2VsZWN0aW9uIHdpdGggdGhlIGdpdmVuIG5vZGUuIFdoZW4gYGluaGVyaXRNYXJrc2AgaXNcbiAgICB0cnVlIGFuZCB0aGUgY29udGVudCBpcyBpbmxpbmUsIGl0IGluaGVyaXRzIHRoZSBtYXJrcyBmcm9tIHRoZVxuICAgIHBsYWNlIHdoZXJlIGl0IGlzIGluc2VydGVkLlxuICAgICovXG4gICAgcmVwbGFjZVNlbGVjdGlvbldpdGgobm9kZSwgaW5oZXJpdE1hcmtzID0gdHJ1ZSkge1xuICAgICAgICBsZXQgc2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb247XG4gICAgICAgIGlmIChpbmhlcml0TWFya3MpXG4gICAgICAgICAgICBub2RlID0gbm9kZS5tYXJrKHRoaXMuc3RvcmVkTWFya3MgfHwgKHNlbGVjdGlvbi5lbXB0eSA/IHNlbGVjdGlvbi4kZnJvbS5tYXJrcygpIDogKHNlbGVjdGlvbi4kZnJvbS5tYXJrc0Fjcm9zcyhzZWxlY3Rpb24uJHRvKSB8fCBNYXJrLm5vbmUpKSk7XG4gICAgICAgIHNlbGVjdGlvbi5yZXBsYWNlV2l0aCh0aGlzLCBub2RlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgIERlbGV0ZSB0aGUgc2VsZWN0aW9uLlxuICAgICovXG4gICAgZGVsZXRlU2VsZWN0aW9uKCkge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbi5yZXBsYWNlKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgUmVwbGFjZSB0aGUgZ2l2ZW4gcmFuZ2UsIG9yIHRoZSBzZWxlY3Rpb24gaWYgbm8gcmFuZ2UgaXMgZ2l2ZW4sXG4gICAgd2l0aCBhIHRleHQgbm9kZSBjb250YWluaW5nIHRoZSBnaXZlbiBzdHJpbmcuXG4gICAgKi9cbiAgICBpbnNlcnRUZXh0KHRleHQsIGZyb20sIHRvKSB7XG4gICAgICAgIGxldCBzY2hlbWEgPSB0aGlzLmRvYy50eXBlLnNjaGVtYTtcbiAgICAgICAgaWYgKGZyb20gPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCF0ZXh0KVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlbGV0ZVNlbGVjdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZVNlbGVjdGlvbldpdGgoc2NoZW1hLnRleHQodGV4dCksIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRvID09IG51bGwpXG4gICAgICAgICAgICAgICAgdG8gPSBmcm9tO1xuICAgICAgICAgICAgdG8gPSB0byA9PSBudWxsID8gZnJvbSA6IHRvO1xuICAgICAgICAgICAgaWYgKCF0ZXh0KVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlbGV0ZVJhbmdlKGZyb20sIHRvKTtcbiAgICAgICAgICAgIGxldCBtYXJrcyA9IHRoaXMuc3RvcmVkTWFya3M7XG4gICAgICAgICAgICBpZiAoIW1hcmtzKSB7XG4gICAgICAgICAgICAgICAgbGV0ICRmcm9tID0gdGhpcy5kb2MucmVzb2x2ZShmcm9tKTtcbiAgICAgICAgICAgICAgICBtYXJrcyA9IHRvID09IGZyb20gPyAkZnJvbS5tYXJrcygpIDogJGZyb20ubWFya3NBY3Jvc3ModGhpcy5kb2MucmVzb2x2ZSh0bykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXBsYWNlUmFuZ2VXaXRoKGZyb20sIHRvLCBzY2hlbWEudGV4dCh0ZXh0LCBtYXJrcykpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbi5lbXB0eSlcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvbihTZWxlY3Rpb24ubmVhcih0aGlzLnNlbGVjdGlvbi4kdG8pKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIFN0b3JlIGEgbWV0YWRhdGEgcHJvcGVydHkgaW4gdGhpcyB0cmFuc2FjdGlvbiwga2V5ZWQgZWl0aGVyIGJ5XG4gICAgbmFtZSBvciBieSBwbHVnaW4uXG4gICAgKi9cbiAgICBzZXRNZXRhKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5tZXRhW3R5cGVvZiBrZXkgPT0gXCJzdHJpbmdcIiA/IGtleSA6IGtleS5rZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBSZXRyaWV2ZSBhIG1ldGFkYXRhIHByb3BlcnR5IGZvciBhIGdpdmVuIG5hbWUgb3IgcGx1Z2luLlxuICAgICovXG4gICAgZ2V0TWV0YShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0YVt0eXBlb2Yga2V5ID09IFwic3RyaW5nXCIgPyBrZXkgOiBrZXkua2V5XTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJucyB0cnVlIGlmIHRoaXMgdHJhbnNhY3Rpb24gZG9lc24ndCBjb250YWluIGFueSBtZXRhZGF0YSxcbiAgICBhbmQgY2FuIHRodXMgc2FmZWx5IGJlIGV4dGVuZGVkLlxuICAgICovXG4gICAgZ2V0IGlzR2VuZXJpYygpIHtcbiAgICAgICAgZm9yIChsZXQgXyBpbiB0aGlzLm1ldGEpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcbiAgICBJbmRpY2F0ZSB0aGF0IHRoZSBlZGl0b3Igc2hvdWxkIHNjcm9sbCB0aGUgc2VsZWN0aW9uIGludG8gdmlld1xuICAgIHdoZW4gdXBkYXRlZCB0byB0aGUgc3RhdGUgcHJvZHVjZWQgYnkgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICAqL1xuICAgIHNjcm9sbEludG9WaWV3KCkge1xuICAgICAgICB0aGlzLnVwZGF0ZWQgfD0gVVBEQVRFRF9TQ1JPTEw7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICBUcnVlIHdoZW4gdGhpcyB0cmFuc2FjdGlvbiBoYXMgaGFkIGBzY3JvbGxJbnRvVmlld2AgY2FsbGVkIG9uIGl0LlxuICAgICovXG4gICAgZ2V0IHNjcm9sbGVkSW50b1ZpZXcoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy51cGRhdGVkICYgVVBEQVRFRF9TQ1JPTEwpID4gMDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJpbmQoZiwgc2VsZikge1xuICAgIHJldHVybiAhc2VsZiB8fCAhZiA/IGYgOiBmLmJpbmQoc2VsZik7XG59XG5jbGFzcyBGaWVsZERlc2Mge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGRlc2MsIHNlbGYpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5pbml0ID0gYmluZChkZXNjLmluaXQsIHNlbGYpO1xuICAgICAgICB0aGlzLmFwcGx5ID0gYmluZChkZXNjLmFwcGx5LCBzZWxmKTtcbiAgICB9XG59XG5jb25zdCBiYXNlRmllbGRzID0gW1xuICAgIG5ldyBGaWVsZERlc2MoXCJkb2NcIiwge1xuICAgICAgICBpbml0KGNvbmZpZykgeyByZXR1cm4gY29uZmlnLmRvYyB8fCBjb25maWcuc2NoZW1hLnRvcE5vZGVUeXBlLmNyZWF0ZUFuZEZpbGwoKTsgfSxcbiAgICAgICAgYXBwbHkodHIpIHsgcmV0dXJuIHRyLmRvYzsgfVxuICAgIH0pLFxuICAgIG5ldyBGaWVsZERlc2MoXCJzZWxlY3Rpb25cIiwge1xuICAgICAgICBpbml0KGNvbmZpZywgaW5zdGFuY2UpIHsgcmV0dXJuIGNvbmZpZy5zZWxlY3Rpb24gfHwgU2VsZWN0aW9uLmF0U3RhcnQoaW5zdGFuY2UuZG9jKTsgfSxcbiAgICAgICAgYXBwbHkodHIpIHsgcmV0dXJuIHRyLnNlbGVjdGlvbjsgfVxuICAgIH0pLFxuICAgIG5ldyBGaWVsZERlc2MoXCJzdG9yZWRNYXJrc1wiLCB7XG4gICAgICAgIGluaXQoY29uZmlnKSB7IHJldHVybiBjb25maWcuc3RvcmVkTWFya3MgfHwgbnVsbDsgfSxcbiAgICAgICAgYXBwbHkodHIsIF9tYXJrcywgX29sZCwgc3RhdGUpIHsgcmV0dXJuIHN0YXRlLnNlbGVjdGlvbi4kY3Vyc29yID8gdHIuc3RvcmVkTWFya3MgOiBudWxsOyB9XG4gICAgfSksXG4gICAgbmV3IEZpZWxkRGVzYyhcInNjcm9sbFRvU2VsZWN0aW9uXCIsIHtcbiAgICAgICAgaW5pdCgpIHsgcmV0dXJuIDA7IH0sXG4gICAgICAgIGFwcGx5KHRyLCBwcmV2KSB7IHJldHVybiB0ci5zY3JvbGxlZEludG9WaWV3ID8gcHJldiArIDEgOiBwcmV2OyB9XG4gICAgfSlcbl07XG4vLyBPYmplY3Qgd3JhcHBpbmcgdGhlIHBhcnQgb2YgYSBzdGF0ZSBvYmplY3QgdGhhdCBzdGF5cyB0aGUgc2FtZVxuLy8gYWNyb3NzIHRyYW5zYWN0aW9ucy4gU3RvcmVkIGluIHRoZSBzdGF0ZSdzIGBjb25maWdgIHByb3BlcnR5LlxuY2xhc3MgQ29uZmlndXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hLCBwbHVnaW5zKSB7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICB0aGlzLnBsdWdpbnMgPSBbXTtcbiAgICAgICAgdGhpcy5wbHVnaW5zQnlLZXkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLmZpZWxkcyA9IGJhc2VGaWVsZHMuc2xpY2UoKTtcbiAgICAgICAgaWYgKHBsdWdpbnMpXG4gICAgICAgICAgICBwbHVnaW5zLmZvckVhY2gocGx1Z2luID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW5zQnlLZXlbcGx1Z2luLmtleV0pXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiQWRkaW5nIGRpZmZlcmVudCBpbnN0YW5jZXMgb2YgYSBrZXllZCBwbHVnaW4gKFwiICsgcGx1Z2luLmtleSArIFwiKVwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luc0J5S2V5W3BsdWdpbi5rZXldID0gcGx1Z2luO1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uc3BlYy5zdGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWVsZHMucHVzaChuZXcgRmllbGREZXNjKHBsdWdpbi5rZXksIHBsdWdpbi5zcGVjLnN0YXRlLCBwbHVnaW4pKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cbi8qKlxuVGhlIHN0YXRlIG9mIGEgUHJvc2VNaXJyb3IgZWRpdG9yIGlzIHJlcHJlc2VudGVkIGJ5IGFuIG9iamVjdCBvZlxudGhpcyB0eXBlLiBBIHN0YXRlIGlzIGEgcGVyc2lzdGVudCBkYXRhIHN0cnVjdHVyZeKAlGl0IGlzbid0XG51cGRhdGVkLCBidXQgcmF0aGVyIGEgbmV3IHN0YXRlIHZhbHVlIGlzIGNvbXB1dGVkIGZyb20gYW4gb2xkIG9uZVxudXNpbmcgdGhlIFtgYXBwbHlgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUuYXBwbHkpIG1ldGhvZC5cblxuQSBzdGF0ZSBob2xkcyBhIG51bWJlciBvZiBidWlsdC1pbiBmaWVsZHMsIGFuZCBwbHVnaW5zIGNhblxuW2RlZmluZV0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLlBsdWdpblNwZWMuc3RhdGUpIGFkZGl0aW9uYWwgZmllbGRzLlxuKi9cbmNsYXNzIEVkaXRvclN0YXRlIHtcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIH1cbiAgICAvKipcbiAgICBUaGUgc2NoZW1hIG9mIHRoZSBzdGF0ZSdzIGRvY3VtZW50LlxuICAgICovXG4gICAgZ2V0IHNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnNjaGVtYTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIHBsdWdpbnMgdGhhdCBhcmUgYWN0aXZlIGluIHRoaXMgc3RhdGUuXG4gICAgKi9cbiAgICBnZXQgcGx1Z2lucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnLnBsdWdpbnM7XG4gICAgfVxuICAgIC8qKlxuICAgIEFwcGx5IHRoZSBnaXZlbiB0cmFuc2FjdGlvbiB0byBwcm9kdWNlIGEgbmV3IHN0YXRlLlxuICAgICovXG4gICAgYXBwbHkodHIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlUcmFuc2FjdGlvbih0cikuc3RhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZmlsdGVyVHJhbnNhY3Rpb24odHIsIGlnbm9yZSA9IC0xKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb25maWcucGx1Z2lucy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChpICE9IGlnbm9yZSkge1xuICAgICAgICAgICAgICAgIGxldCBwbHVnaW4gPSB0aGlzLmNvbmZpZy5wbHVnaW5zW2ldO1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uc3BlYy5maWx0ZXJUcmFuc2FjdGlvbiAmJiAhcGx1Z2luLnNwZWMuZmlsdGVyVHJhbnNhY3Rpb24uY2FsbChwbHVnaW4sIHRyLCB0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgVmVyYm9zZSB2YXJpYW50IG9mIFtgYXBwbHlgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc3RhdGUuRWRpdG9yU3RhdGUuYXBwbHkpIHRoYXRcbiAgICByZXR1cm5zIHRoZSBwcmVjaXNlIHRyYW5zYWN0aW9ucyB0aGF0IHdlcmUgYXBwbGllZCAod2hpY2ggbWlnaHRcbiAgICBiZSBpbmZsdWVuY2VkIGJ5IHRoZSBbdHJhbnNhY3Rpb25cbiAgICBob29rc10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLlBsdWdpblNwZWMuZmlsdGVyVHJhbnNhY3Rpb24pIG9mXG4gICAgcGx1Z2lucykgYWxvbmcgd2l0aCB0aGUgbmV3IHN0YXRlLlxuICAgICovXG4gICAgYXBwbHlUcmFuc2FjdGlvbihyb290VHIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZpbHRlclRyYW5zYWN0aW9uKHJvb3RUcikpXG4gICAgICAgICAgICByZXR1cm4geyBzdGF0ZTogdGhpcywgdHJhbnNhY3Rpb25zOiBbXSB9O1xuICAgICAgICBsZXQgdHJzID0gW3Jvb3RUcl0sIG5ld1N0YXRlID0gdGhpcy5hcHBseUlubmVyKHJvb3RUciksIHNlZW4gPSBudWxsO1xuICAgICAgICAvLyBUaGlzIGxvb3AgcmVwZWF0ZWRseSBnaXZlcyBwbHVnaW5zIGEgY2hhbmNlIHRvIHJlc3BvbmQgdG9cbiAgICAgICAgLy8gdHJhbnNhY3Rpb25zIGFzIG5ldyB0cmFuc2FjdGlvbnMgYXJlIGFkZGVkLCBtYWtpbmcgc3VyZSB0byBvbmx5XG4gICAgICAgIC8vIHBhc3MgdGhlIHRyYW5zYWN0aW9ucyB0aGUgcGx1Z2luIGRpZCBub3Qgc2VlIGJlZm9yZS5cbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgbGV0IGhhdmVOZXcgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb25maWcucGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBwbHVnaW4gPSB0aGlzLmNvbmZpZy5wbHVnaW5zW2ldO1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW4uc3BlYy5hcHBlbmRUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IHNlZW4gPyBzZWVuW2ldLm4gOiAwLCBvbGRTdGF0ZSA9IHNlZW4gPyBzZWVuW2ldLnN0YXRlIDogdGhpcztcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyID0gbiA8IHRycy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbi5zcGVjLmFwcGVuZFRyYW5zYWN0aW9uLmNhbGwocGx1Z2luLCBuID8gdHJzLnNsaWNlKG4pIDogdHJzLCBvbGRTdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHIgJiYgbmV3U3RhdGUuZmlsdGVyVHJhbnNhY3Rpb24odHIsIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ci5zZXRNZXRhKFwiYXBwZW5kZWRUcmFuc2FjdGlvblwiLCByb290VHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VlbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb25maWcucGx1Z2lucy5sZW5ndGg7IGorKylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vlbi5wdXNoKGogPCBpID8geyBzdGF0ZTogbmV3U3RhdGUsIG46IHRycy5sZW5ndGggfSA6IHsgc3RhdGU6IHRoaXMsIG46IDAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnMucHVzaCh0cik7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IG5ld1N0YXRlLmFwcGx5SW5uZXIodHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZU5ldyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlZW4pXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWVuW2ldID0geyBzdGF0ZTogbmV3U3RhdGUsIG46IHRycy5sZW5ndGggfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWhhdmVOZXcpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdGU6IG5ld1N0YXRlLCB0cmFuc2FjdGlvbnM6IHRycyB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgYXBwbHlJbm5lcih0cikge1xuICAgICAgICBpZiAoIXRyLmJlZm9yZS5lcSh0aGlzLmRvYykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkFwcGx5aW5nIGEgbWlzbWF0Y2hlZCB0cmFuc2FjdGlvblwiKTtcbiAgICAgICAgbGV0IG5ld0luc3RhbmNlID0gbmV3IEVkaXRvclN0YXRlKHRoaXMuY29uZmlnKSwgZmllbGRzID0gdGhpcy5jb25maWcuZmllbGRzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGZpZWxkID0gZmllbGRzW2ldO1xuICAgICAgICAgICAgbmV3SW5zdGFuY2VbZmllbGQubmFtZV0gPSBmaWVsZC5hcHBseSh0ciwgdGhpc1tmaWVsZC5uYW1lXSwgdGhpcywgbmV3SW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdJbnN0YW5jZTtcbiAgICB9XG4gICAgLyoqXG4gICAgU3RhcnQgYSBbdHJhbnNhY3Rpb25dKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvbikgZnJvbSB0aGlzIHN0YXRlLlxuICAgICovXG4gICAgZ2V0IHRyKCkgeyByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKHRoaXMpOyB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgbmV3IHN0YXRlLlxuICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShjb25maWcpIHtcbiAgICAgICAgbGV0ICRjb25maWcgPSBuZXcgQ29uZmlndXJhdGlvbihjb25maWcuZG9jID8gY29uZmlnLmRvYy50eXBlLnNjaGVtYSA6IGNvbmZpZy5zY2hlbWEsIGNvbmZpZy5wbHVnaW5zKTtcbiAgICAgICAgbGV0IGluc3RhbmNlID0gbmV3IEVkaXRvclN0YXRlKCRjb25maWcpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8ICRjb25maWcuZmllbGRzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaW5zdGFuY2VbJGNvbmZpZy5maWVsZHNbaV0ubmFtZV0gPSAkY29uZmlnLmZpZWxkc1tpXS5pbml0KGNvbmZpZywgaW5zdGFuY2UpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZSBhIG5ldyBzdGF0ZSBiYXNlZCBvbiB0aGlzIG9uZSwgYnV0IHdpdGggYW4gYWRqdXN0ZWQgc2V0XG4gICAgb2YgYWN0aXZlIHBsdWdpbnMuIFN0YXRlIGZpZWxkcyB0aGF0IGV4aXN0IGluIGJvdGggc2V0cyBvZlxuICAgIHBsdWdpbnMgYXJlIGtlcHQgdW5jaGFuZ2VkLiBUaG9zZSB0aGF0IG5vIGxvbmdlciBleGlzdCBhcmVcbiAgICBkcm9wcGVkLCBhbmQgdGhvc2UgdGhhdCBhcmUgbmV3IGFyZSBpbml0aWFsaXplZCB1c2luZyB0aGVpclxuICAgIFtgaW5pdGBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5TdGF0ZUZpZWxkLmluaXQpIG1ldGhvZCwgcGFzc2luZyBpbiB0aGUgbmV3XG4gICAgY29uZmlndXJhdGlvbiBvYmplY3QuLlxuICAgICovXG4gICAgcmVjb25maWd1cmUoY29uZmlnKSB7XG4gICAgICAgIGxldCAkY29uZmlnID0gbmV3IENvbmZpZ3VyYXRpb24odGhpcy5zY2hlbWEsIGNvbmZpZy5wbHVnaW5zKTtcbiAgICAgICAgbGV0IGZpZWxkcyA9ICRjb25maWcuZmllbGRzLCBpbnN0YW5jZSA9IG5ldyBFZGl0b3JTdGF0ZSgkY29uZmlnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBuYW1lID0gZmllbGRzW2ldLm5hbWU7XG4gICAgICAgICAgICBpbnN0YW5jZVtuYW1lXSA9IHRoaXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyB0aGlzW25hbWVdIDogZmllbGRzW2ldLmluaXQoY29uZmlnLCBpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cbiAgICAvKipcbiAgICBTZXJpYWxpemUgdGhpcyBzdGF0ZSB0byBKU09OLiBJZiB5b3Ugd2FudCB0byBzZXJpYWxpemUgdGhlIHN0YXRlXG4gICAgb2YgcGx1Z2lucywgcGFzcyBhbiBvYmplY3QgbWFwcGluZyBwcm9wZXJ0eSBuYW1lcyB0byB1c2UgaW4gdGhlXG4gICAgcmVzdWx0aW5nIEpTT04gb2JqZWN0IHRvIHBsdWdpbiBvYmplY3RzLiBUaGUgYXJndW1lbnQgbWF5IGFsc28gYmVcbiAgICBhIHN0cmluZyBvciBudW1iZXIsIGluIHdoaWNoIGNhc2UgaXQgaXMgaWdub3JlZCwgdG8gc3VwcG9ydCB0aGVcbiAgICB3YXkgYEpTT04uc3RyaW5naWZ5YCBjYWxscyBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gICAgKi9cbiAgICB0b0pTT04ocGx1Z2luRmllbGRzKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7IGRvYzogdGhpcy5kb2MudG9KU09OKCksIHNlbGVjdGlvbjogdGhpcy5zZWxlY3Rpb24udG9KU09OKCkgfTtcbiAgICAgICAgaWYgKHRoaXMuc3RvcmVkTWFya3MpXG4gICAgICAgICAgICByZXN1bHQuc3RvcmVkTWFya3MgPSB0aGlzLnN0b3JlZE1hcmtzLm1hcChtID0+IG0udG9KU09OKCkpO1xuICAgICAgICBpZiAocGx1Z2luRmllbGRzICYmIHR5cGVvZiBwbHVnaW5GaWVsZHMgPT0gJ29iamVjdCcpXG4gICAgICAgICAgICBmb3IgKGxldCBwcm9wIGluIHBsdWdpbkZpZWxkcykge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wID09IFwiZG9jXCIgfHwgcHJvcCA9PSBcInNlbGVjdGlvblwiKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSBKU09OIGZpZWxkcyBgZG9jYCBhbmQgYHNlbGVjdGlvbmAgYXJlIHJlc2VydmVkXCIpO1xuICAgICAgICAgICAgICAgIGxldCBwbHVnaW4gPSBwbHVnaW5GaWVsZHNbcHJvcF0sIHN0YXRlID0gcGx1Z2luLnNwZWMuc3RhdGU7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlICYmIHN0YXRlLnRvSlNPTilcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Byb3BdID0gc3RhdGUudG9KU09OLmNhbGwocGx1Z2luLCB0aGlzW3BsdWdpbi5rZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgRGVzZXJpYWxpemUgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIGEgc3RhdGUuIGBjb25maWdgIHNob3VsZFxuICAgIGhhdmUgYXQgbGVhc3QgYSBgc2NoZW1hYCBmaWVsZCwgYW5kIHNob3VsZCBjb250YWluIGFycmF5IG9mXG4gICAgcGx1Z2lucyB0byBpbml0aWFsaXplIHRoZSBzdGF0ZSB3aXRoLiBgcGx1Z2luRmllbGRzYCBjYW4gYmUgdXNlZFxuICAgIHRvIGRlc2VyaWFsaXplIHRoZSBzdGF0ZSBvZiBwbHVnaW5zLCBieSBhc3NvY2lhdGluZyBwbHVnaW5cbiAgICBpbnN0YW5jZXMgd2l0aCB0aGUgcHJvcGVydHkgbmFtZXMgdGhleSB1c2UgaW4gdGhlIEpTT04gb2JqZWN0LlxuICAgICovXG4gICAgc3RhdGljIGZyb21KU09OKGNvbmZpZywganNvbiwgcGx1Z2luRmllbGRzKSB7XG4gICAgICAgIGlmICghanNvbilcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgRWRpdG9yU3RhdGUuZnJvbUpTT05cIik7XG4gICAgICAgIGlmICghY29uZmlnLnNjaGVtYSlcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiUmVxdWlyZWQgY29uZmlnIGZpZWxkICdzY2hlbWEnIG1pc3NpbmdcIik7XG4gICAgICAgIGxldCAkY29uZmlnID0gbmV3IENvbmZpZ3VyYXRpb24oY29uZmlnLnNjaGVtYSwgY29uZmlnLnBsdWdpbnMpO1xuICAgICAgICBsZXQgaW5zdGFuY2UgPSBuZXcgRWRpdG9yU3RhdGUoJGNvbmZpZyk7XG4gICAgICAgICRjb25maWcuZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xuICAgICAgICAgICAgaWYgKGZpZWxkLm5hbWUgPT0gXCJkb2NcIikge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLmRvYyA9IE5vZGUuZnJvbUpTT04oY29uZmlnLnNjaGVtYSwganNvbi5kb2MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGQubmFtZSA9PSBcInNlbGVjdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2Uuc2VsZWN0aW9uID0gU2VsZWN0aW9uLmZyb21KU09OKGluc3RhbmNlLmRvYywganNvbi5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGQubmFtZSA9PSBcInN0b3JlZE1hcmtzXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoanNvbi5zdG9yZWRNYXJrcylcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Uuc3RvcmVkTWFya3MgPSBqc29uLnN0b3JlZE1hcmtzLm1hcChjb25maWcuc2NoZW1hLm1hcmtGcm9tSlNPTik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocGx1Z2luRmllbGRzKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBwcm9wIGluIHBsdWdpbkZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBsdWdpbiA9IHBsdWdpbkZpZWxkc1twcm9wXSwgc3RhdGUgPSBwbHVnaW4uc3BlYy5zdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbHVnaW4ua2V5ID09IGZpZWxkLm5hbWUgJiYgc3RhdGUgJiYgc3RhdGUuZnJvbUpTT04gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoanNvbiwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZVtmaWVsZC5uYW1lXSA9IHN0YXRlLmZyb21KU09OLmNhbGwocGx1Z2luLCBjb25maWcsIGpzb25bcHJvcF0sIGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbnN0YW5jZVtmaWVsZC5uYW1lXSA9IGZpZWxkLmluaXQoY29uZmlnLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBiaW5kUHJvcHMob2JqLCBzZWxmLCB0YXJnZXQpIHtcbiAgICBmb3IgKGxldCBwcm9wIGluIG9iaikge1xuICAgICAgICBsZXQgdmFsID0gb2JqW3Byb3BdO1xuICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgRnVuY3Rpb24pXG4gICAgICAgICAgICB2YWwgPSB2YWwuYmluZChzZWxmKTtcbiAgICAgICAgZWxzZSBpZiAocHJvcCA9PSBcImhhbmRsZURPTUV2ZW50c1wiKVxuICAgICAgICAgICAgdmFsID0gYmluZFByb3BzKHZhbCwgc2VsZiwge30pO1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG4vKipcblBsdWdpbnMgYnVuZGxlIGZ1bmN0aW9uYWxpdHkgdGhhdCBjYW4gYmUgYWRkZWQgdG8gYW4gZWRpdG9yLlxuVGhleSBhcmUgcGFydCBvZiB0aGUgW2VkaXRvciBzdGF0ZV0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlKSBhbmRcbm1heSBpbmZsdWVuY2UgdGhhdCBzdGF0ZSBhbmQgdGhlIHZpZXcgdGhhdCBjb250YWlucyBpdC5cbiovXG5jbGFzcyBQbHVnaW4ge1xuICAgIC8qKlxuICAgIENyZWF0ZSBhIHBsdWdpbi5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIFRoZSBwbHVnaW4ncyBbc3BlYyBvYmplY3RdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5QbHVnaW5TcGVjKS5cbiAgICAqL1xuICAgIHNwZWMpIHtcbiAgICAgICAgdGhpcy5zcGVjID0gc3BlYztcbiAgICAgICAgLyoqXG4gICAgICAgIFRoZSBbcHJvcHNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkVkaXRvclByb3BzKSBleHBvcnRlZCBieSB0aGlzIHBsdWdpbi5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wcm9wcyA9IHt9O1xuICAgICAgICBpZiAoc3BlYy5wcm9wcylcbiAgICAgICAgICAgIGJpbmRQcm9wcyhzcGVjLnByb3BzLCB0aGlzLCB0aGlzLnByb3BzKTtcbiAgICAgICAgdGhpcy5rZXkgPSBzcGVjLmtleSA/IHNwZWMua2V5LmtleSA6IGNyZWF0ZUtleShcInBsdWdpblwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRXh0cmFjdCB0aGUgcGx1Z2luJ3Mgc3RhdGUgZmllbGQgZnJvbSBhbiBlZGl0b3Igc3RhdGUuXG4gICAgKi9cbiAgICBnZXRTdGF0ZShzdGF0ZSkgeyByZXR1cm4gc3RhdGVbdGhpcy5rZXldOyB9XG59XG5jb25zdCBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGNyZWF0ZUtleShuYW1lKSB7XG4gICAgaWYgKG5hbWUgaW4ga2V5cylcbiAgICAgICAgcmV0dXJuIG5hbWUgKyBcIiRcIiArICsra2V5c1tuYW1lXTtcbiAgICBrZXlzW25hbWVdID0gMDtcbiAgICByZXR1cm4gbmFtZSArIFwiJFwiO1xufVxuLyoqXG5BIGtleSBpcyB1c2VkIHRvIFt0YWddKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5QbHVnaW5TcGVjLmtleSkgcGx1Z2lucyBpbiBhIHdheVxudGhhdCBtYWtlcyBpdCBwb3NzaWJsZSB0byBmaW5kIHRoZW0sIGdpdmVuIGFuIGVkaXRvciBzdGF0ZS5cbkFzc2lnbmluZyBhIGtleSBkb2VzIG1lYW4gb25seSBvbmUgcGx1Z2luIG9mIHRoYXQgdHlwZSBjYW4gYmVcbmFjdGl2ZSBpbiBhIHN0YXRlLlxuKi9cbmNsYXNzIFBsdWdpbktleSB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgcGx1Z2luIGtleS5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUgPSBcImtleVwiKSB7IHRoaXMua2V5ID0gY3JlYXRlS2V5KG5hbWUpOyB9XG4gICAgLyoqXG4gICAgR2V0IHRoZSBhY3RpdmUgcGx1Z2luIHdpdGggdGhpcyBrZXksIGlmIGFueSwgZnJvbSBhbiBlZGl0b3JcbiAgICBzdGF0ZS5cbiAgICAqL1xuICAgIGdldChzdGF0ZSkgeyByZXR1cm4gc3RhdGUuY29uZmlnLnBsdWdpbnNCeUtleVt0aGlzLmtleV07IH1cbiAgICAvKipcbiAgICBHZXQgdGhlIHBsdWdpbidzIHN0YXRlIGZyb20gYW4gZWRpdG9yIHN0YXRlLlxuICAgICovXG4gICAgZ2V0U3RhdGUoc3RhdGUpIHsgcmV0dXJuIHN0YXRlW3RoaXMua2V5XTsgfVxufVxuXG5leHBvcnQgeyBBbGxTZWxlY3Rpb24sIEVkaXRvclN0YXRlLCBOb2RlU2VsZWN0aW9uLCBQbHVnaW4sIFBsdWdpbktleSwgU2VsZWN0aW9uLCBTZWxlY3Rpb25SYW5nZSwgVGV4dFNlbGVjdGlvbiwgVHJhbnNhY3Rpb24gfTtcbiIsImltcG9ydCB7IFRleHRTZWxlY3Rpb24sIE5vZGVTZWxlY3Rpb24sIEFsbFNlbGVjdGlvbiwgU2VsZWN0aW9uIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuaW1wb3J0IHsgRE9NU2VyaWFsaXplciwgRnJhZ21lbnQsIE1hcmssIFNsaWNlLCBET01QYXJzZXIgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgeyBkcm9wUG9pbnQgfSBmcm9tICdwcm9zZW1pcnJvci10cmFuc2Zvcm0nO1xuXG5jb25zdCBkb21JbmRleCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOzsgaW5kZXgrKykge1xuICAgICAgICBub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG59O1xuY29uc3QgcGFyZW50Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgbGV0IHBhcmVudCA9IG5vZGUuYXNzaWduZWRTbG90IHx8IG5vZGUucGFyZW50Tm9kZTtcbiAgICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSA9PSAxMSA/IHBhcmVudC5ob3N0IDogcGFyZW50O1xufTtcbmxldCByZXVzZWRSYW5nZSA9IG51bGw7XG4vLyBOb3RlIHRoYXQgdGhpcyB3aWxsIGFsd2F5cyByZXR1cm4gdGhlIHNhbWUgcmFuZ2UsIGJlY2F1c2UgRE9NIHJhbmdlXG4vLyBvYmplY3RzIGFyZSBldmVyeSBleHBlbnNpdmUsIGFuZCBrZWVwIHNsb3dpbmcgZG93biBzdWJzZXF1ZW50IERPTVxuLy8gdXBkYXRlcywgZm9yIHNvbWUgcmVhc29uLlxuY29uc3QgdGV4dFJhbmdlID0gZnVuY3Rpb24gKG5vZGUsIGZyb20sIHRvKSB7XG4gICAgbGV0IHJhbmdlID0gcmV1c2VkUmFuZ2UgfHwgKHJldXNlZFJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKSk7XG4gICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIHRvID09IG51bGwgPyBub2RlLm5vZGVWYWx1ZS5sZW5ndGggOiB0byk7XG4gICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgZnJvbSB8fCAwKTtcbiAgICByZXR1cm4gcmFuZ2U7XG59O1xuY29uc3QgY2xlYXJSZXVzZWRSYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXVzZWRSYW5nZSA9IG51bGw7XG59O1xuLy8gU2NhbnMgZm9yd2FyZCBhbmQgYmFja3dhcmQgdGhyb3VnaCBET00gcG9zaXRpb25zIGVxdWl2YWxlbnQgdG8gdGhlXG4vLyBnaXZlbiBvbmUgdG8gc2VlIGlmIHRoZSB0d28gYXJlIGluIHRoZSBzYW1lIHBsYWNlIChpLmUuIGFmdGVyIGFcbi8vIHRleHQgbm9kZSB2cyBhdCB0aGUgZW5kIG9mIHRoYXQgdGV4dCBub2RlKVxuY29uc3QgaXNFcXVpdmFsZW50UG9zaXRpb24gPSBmdW5jdGlvbiAobm9kZSwgb2ZmLCB0YXJnZXROb2RlLCB0YXJnZXRPZmYpIHtcbiAgICByZXR1cm4gdGFyZ2V0Tm9kZSAmJiAoc2NhbkZvcihub2RlLCBvZmYsIHRhcmdldE5vZGUsIHRhcmdldE9mZiwgLTEpIHx8XG4gICAgICAgIHNjYW5Gb3Iobm9kZSwgb2ZmLCB0YXJnZXROb2RlLCB0YXJnZXRPZmYsIDEpKTtcbn07XG5jb25zdCBhdG9tRWxlbWVudHMgPSAvXihpbWd8YnJ8aW5wdXR8dGV4dGFyZWF8aHIpJC9pO1xuZnVuY3Rpb24gc2NhbkZvcihub2RlLCBvZmYsIHRhcmdldE5vZGUsIHRhcmdldE9mZiwgZGlyKSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgICBpZiAobm9kZSA9PSB0YXJnZXROb2RlICYmIG9mZiA9PSB0YXJnZXRPZmYpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKG9mZiA9PSAoZGlyIDwgMCA/IDAgOiBub2RlU2l6ZShub2RlKSkpIHtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICBpZiAoIXBhcmVudCB8fCBwYXJlbnQubm9kZVR5cGUgIT0gMSB8fCBoYXNCbG9ja0Rlc2Mobm9kZSkgfHwgYXRvbUVsZW1lbnRzLnRlc3Qobm9kZS5ub2RlTmFtZSkgfHxcbiAgICAgICAgICAgICAgICBub2RlLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgb2ZmID0gZG9tSW5kZXgobm9kZSkgKyAoZGlyIDwgMCA/IDAgOiAxKTtcbiAgICAgICAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZE5vZGVzW29mZiArIChkaXIgPCAwID8gLTEgOiAwKV07XG4gICAgICAgICAgICBpZiAobm9kZS5jb250ZW50RWRpdGFibGUgPT0gXCJmYWxzZVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIG9mZiA9IGRpciA8IDAgPyBub2RlU2l6ZShub2RlKSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBub2RlU2l6ZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT0gMyA/IG5vZGUubm9kZVZhbHVlLmxlbmd0aCA6IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7XG59XG5mdW5jdGlvbiB0ZXh0Tm9kZUJlZm9yZSQxKG5vZGUsIG9mZnNldCkge1xuICAgIGZvciAoOzspIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMyAmJiBvZmZzZXQpXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSAmJiBvZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5jb250ZW50RWRpdGFibGUgPT0gXCJmYWxzZVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXQgLSAxXTtcbiAgICAgICAgICAgIG9mZnNldCA9IG5vZGVTaXplKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAmJiAhaGFzQmxvY2tEZXNjKG5vZGUpKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBkb21JbmRleChub2RlKTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRleHROb2RlQWZ0ZXIkMShub2RlLCBvZmZzZXQpIHtcbiAgICBmb3IgKDs7KSB7XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDMgJiYgb2Zmc2V0IDwgbm9kZS5ub2RlVmFsdWUubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEgJiYgb2Zmc2V0IDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKG5vZGUuY29udGVudEVkaXRhYmxlID09IFwiZmFsc2VcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0XTtcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlICYmICFoYXNCbG9ja0Rlc2Mobm9kZSkpIHtcbiAgICAgICAgICAgIG9mZnNldCA9IGRvbUluZGV4KG5vZGUpICsgMTtcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGlzT25FZGdlKG5vZGUsIG9mZnNldCwgcGFyZW50KSB7XG4gICAgZm9yIChsZXQgYXRTdGFydCA9IG9mZnNldCA9PSAwLCBhdEVuZCA9IG9mZnNldCA9PSBub2RlU2l6ZShub2RlKTsgYXRTdGFydCB8fCBhdEVuZDspIHtcbiAgICAgICAgaWYgKG5vZGUgPT0gcGFyZW50KVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGxldCBpbmRleCA9IGRvbUluZGV4KG5vZGUpO1xuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICBpZiAoIW5vZGUpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGF0U3RhcnQgPSBhdFN0YXJ0ICYmIGluZGV4ID09IDA7XG4gICAgICAgIGF0RW5kID0gYXRFbmQgJiYgaW5kZXggPT0gbm9kZVNpemUobm9kZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFzQmxvY2tEZXNjKGRvbSkge1xuICAgIGxldCBkZXNjO1xuICAgIGZvciAobGV0IGN1ciA9IGRvbTsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSlcbiAgICAgICAgaWYgKGRlc2MgPSBjdXIucG1WaWV3RGVzYylcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIHJldHVybiBkZXNjICYmIGRlc2Mubm9kZSAmJiBkZXNjLm5vZGUuaXNCbG9jayAmJiAoZGVzYy5kb20gPT0gZG9tIHx8IGRlc2MuY29udGVudERPTSA9PSBkb20pO1xufVxuLy8gV29yayBhcm91bmQgQ2hyb21lIGlzc3VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0NzUyM1xuLy8gKGlzQ29sbGFwc2VkIGluYXBwcm9wcmlhdGVseSByZXR1cm5zIHRydWUgaW4gc2hhZG93IGRvbSlcbmNvbnN0IHNlbGVjdGlvbkNvbGxhcHNlZCA9IGZ1bmN0aW9uIChkb21TZWwpIHtcbiAgICByZXR1cm4gZG9tU2VsLmZvY3VzTm9kZSAmJiBpc0VxdWl2YWxlbnRQb3NpdGlvbihkb21TZWwuZm9jdXNOb2RlLCBkb21TZWwuZm9jdXNPZmZzZXQsIGRvbVNlbC5hbmNob3JOb2RlLCBkb21TZWwuYW5jaG9yT2Zmc2V0KTtcbn07XG5mdW5jdGlvbiBrZXlFdmVudChrZXlDb2RlLCBrZXkpIHtcbiAgICBsZXQgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGV2ZW50LmluaXRFdmVudChcImtleWRvd25cIiwgdHJ1ZSwgdHJ1ZSk7XG4gICAgZXZlbnQua2V5Q29kZSA9IGtleUNvZGU7XG4gICAgZXZlbnQua2V5ID0gZXZlbnQuY29kZSA9IGtleTtcbiAgICByZXR1cm4gZXZlbnQ7XG59XG5mdW5jdGlvbiBkZWVwQWN0aXZlRWxlbWVudChkb2MpIHtcbiAgICBsZXQgZWx0ID0gZG9jLmFjdGl2ZUVsZW1lbnQ7XG4gICAgd2hpbGUgKGVsdCAmJiBlbHQuc2hhZG93Um9vdClcbiAgICAgICAgZWx0ID0gZWx0LnNoYWRvd1Jvb3QuYWN0aXZlRWxlbWVudDtcbiAgICByZXR1cm4gZWx0O1xufVxuZnVuY3Rpb24gY2FyZXRGcm9tUG9pbnQoZG9jLCB4LCB5KSB7XG4gICAgaWYgKGRvYy5jYXJldFBvc2l0aW9uRnJvbVBvaW50KSB7XG4gICAgICAgIHRyeSB7IC8vIEZpcmVmb3ggdGhyb3dzIGZvciB0aGlzIGNhbGwgaW4gaGFyZC10by1wcmVkaWN0IGNpcmN1bXN0YW5jZXMgKCM5OTQpXG4gICAgICAgICAgICBsZXQgcG9zID0gZG9jLmNhcmV0UG9zaXRpb25Gcm9tUG9pbnQoeCwgeSk7XG4gICAgICAgICAgICAvLyBDbGlwIHRoZSBvZmZzZXQsIGJlY2F1c2UgQ2hyb21lIHdpbGwgcmV0dXJuIGEgdGV4dCBvZmZzZXRcbiAgICAgICAgICAgIC8vIGludG8gPGlucHV0PiBub2Rlcywgd2hpY2ggY2FuJ3QgYmUgdHJlYXRlZCBhcyBhIHJlZ3VsYXIgRE9NXG4gICAgICAgICAgICAvLyBvZmZzZXRcbiAgICAgICAgICAgIGlmIChwb3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbm9kZTogcG9zLm9mZnNldE5vZGUsIG9mZnNldDogTWF0aC5taW4obm9kZVNpemUocG9zLm9mZnNldE5vZGUpLCBwb3Mub2Zmc2V0KSB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfKSB7IH1cbiAgICB9XG4gICAgaWYgKGRvYy5jYXJldFJhbmdlRnJvbVBvaW50KSB7XG4gICAgICAgIGxldCByYW5nZSA9IGRvYy5jYXJldFJhbmdlRnJvbVBvaW50KHgsIHkpO1xuICAgICAgICBpZiAocmFuZ2UpXG4gICAgICAgICAgICByZXR1cm4geyBub2RlOiByYW5nZS5zdGFydENvbnRhaW5lciwgb2Zmc2V0OiBNYXRoLm1pbihub2RlU2l6ZShyYW5nZS5zdGFydENvbnRhaW5lciksIHJhbmdlLnN0YXJ0T2Zmc2V0KSB9O1xuICAgIH1cbn1cblxuY29uc3QgbmF2ID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiID8gbmF2aWdhdG9yIDogbnVsbDtcbmNvbnN0IGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPSBcInVuZGVmaW5lZFwiID8gZG9jdW1lbnQgOiBudWxsO1xuY29uc3QgYWdlbnQgPSAobmF2ICYmIG5hdi51c2VyQWdlbnQpIHx8IFwiXCI7XG5jb25zdCBpZV9lZGdlID0gL0VkZ2VcXC8oXFxkKykvLmV4ZWMoYWdlbnQpO1xuY29uc3QgaWVfdXB0bzEwID0gL01TSUUgXFxkLy5leGVjKGFnZW50KTtcbmNvbnN0IGllXzExdXAgPSAvVHJpZGVudFxcLyg/Ols3LTldfFxcZHsyLH0pXFwuLipydjooXFxkKykvLmV4ZWMoYWdlbnQpO1xuY29uc3QgaWUgPSAhIShpZV91cHRvMTAgfHwgaWVfMTF1cCB8fCBpZV9lZGdlKTtcbmNvbnN0IGllX3ZlcnNpb24gPSBpZV91cHRvMTAgPyBkb2N1bWVudC5kb2N1bWVudE1vZGUgOiBpZV8xMXVwID8gK2llXzExdXBbMV0gOiBpZV9lZGdlID8gK2llX2VkZ2VbMV0gOiAwO1xuY29uc3QgZ2Vja28gPSAhaWUgJiYgL2dlY2tvXFwvKFxcZCspL2kudGVzdChhZ2VudCk7XG5nZWNrbyAmJiArKC9GaXJlZm94XFwvKFxcZCspLy5leGVjKGFnZW50KSB8fCBbMCwgMF0pWzFdO1xuY29uc3QgX2Nocm9tZSA9ICFpZSAmJiAvQ2hyb21lXFwvKFxcZCspLy5leGVjKGFnZW50KTtcbmNvbnN0IGNocm9tZSA9ICEhX2Nocm9tZTtcbmNvbnN0IGNocm9tZV92ZXJzaW9uID0gX2Nocm9tZSA/ICtfY2hyb21lWzFdIDogMDtcbmNvbnN0IHNhZmFyaSA9ICFpZSAmJiAhIW5hdiAmJiAvQXBwbGUgQ29tcHV0ZXIvLnRlc3QobmF2LnZlbmRvcik7XG4vLyBJcyB0cnVlIGZvciBib3RoIGlPUyBhbmQgaVBhZE9TIGZvciBjb252ZW5pZW5jZVxuY29uc3QgaW9zID0gc2FmYXJpICYmICgvTW9iaWxlXFwvXFx3Ky8udGVzdChhZ2VudCkgfHwgISFuYXYgJiYgbmF2Lm1heFRvdWNoUG9pbnRzID4gMik7XG5jb25zdCBtYWMgPSBpb3MgfHwgKG5hdiA/IC9NYWMvLnRlc3QobmF2LnBsYXRmb3JtKSA6IGZhbHNlKTtcbmNvbnN0IHdpbmRvd3MgPSBuYXYgPyAvV2luLy50ZXN0KG5hdi5wbGF0Zm9ybSkgOiBmYWxzZTtcbmNvbnN0IGFuZHJvaWQgPSAvQW5kcm9pZCBcXGQvLnRlc3QoYWdlbnQpO1xuY29uc3Qgd2Via2l0ID0gISFkb2MgJiYgXCJ3ZWJraXRGb250U21vb3RoaW5nXCIgaW4gZG9jLmRvY3VtZW50RWxlbWVudC5zdHlsZTtcbmNvbnN0IHdlYmtpdF92ZXJzaW9uID0gd2Via2l0ID8gKygvXFxiQXBwbGVXZWJLaXRcXC8oXFxkKykvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgWzAsIDBdKVsxXSA6IDA7XG5cbmZ1bmN0aW9uIHdpbmRvd1JlY3QoZG9jKSB7XG4gICAgbGV0IHZwID0gZG9jLmRlZmF1bHRWaWV3ICYmIGRvYy5kZWZhdWx0Vmlldy52aXN1YWxWaWV3cG9ydDtcbiAgICBpZiAodnApXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiAwLCByaWdodDogdnAud2lkdGgsXG4gICAgICAgICAgICB0b3A6IDAsIGJvdHRvbTogdnAuaGVpZ2h0XG4gICAgICAgIH07XG4gICAgcmV0dXJuIHsgbGVmdDogMCwgcmlnaHQ6IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgIHRvcDogMCwgYm90dG9tOiBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCB9O1xufVxuZnVuY3Rpb24gZ2V0U2lkZSh2YWx1ZSwgc2lkZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIiA/IHZhbHVlIDogdmFsdWVbc2lkZV07XG59XG5mdW5jdGlvbiBjbGllbnRSZWN0KG5vZGUpIHtcbiAgICBsZXQgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgLy8gQWRqdXN0IGZvciBlbGVtZW50cyB3aXRoIHN0eWxlIFwidHJhbnNmb3JtOiBzY2FsZSgpXCJcbiAgICBsZXQgc2NhbGVYID0gKHJlY3Qud2lkdGggLyBub2RlLm9mZnNldFdpZHRoKSB8fCAxO1xuICAgIGxldCBzY2FsZVkgPSAocmVjdC5oZWlnaHQgLyBub2RlLm9mZnNldEhlaWdodCkgfHwgMTtcbiAgICAvLyBNYWtlIHN1cmUgc2Nyb2xsYmFyIHdpZHRoIGlzbid0IGluY2x1ZGVkIGluIHRoZSByZWN0YW5nbGVcbiAgICByZXR1cm4geyBsZWZ0OiByZWN0LmxlZnQsIHJpZ2h0OiByZWN0LmxlZnQgKyBub2RlLmNsaWVudFdpZHRoICogc2NhbGVYLFxuICAgICAgICB0b3A6IHJlY3QudG9wLCBib3R0b206IHJlY3QudG9wICsgbm9kZS5jbGllbnRIZWlnaHQgKiBzY2FsZVkgfTtcbn1cbmZ1bmN0aW9uIHNjcm9sbFJlY3RJbnRvVmlldyh2aWV3LCByZWN0LCBzdGFydERPTSkge1xuICAgIGxldCBzY3JvbGxUaHJlc2hvbGQgPSB2aWV3LnNvbWVQcm9wKFwic2Nyb2xsVGhyZXNob2xkXCIpIHx8IDAsIHNjcm9sbE1hcmdpbiA9IHZpZXcuc29tZVByb3AoXCJzY3JvbGxNYXJnaW5cIikgfHwgNTtcbiAgICBsZXQgZG9jID0gdmlldy5kb20ub3duZXJEb2N1bWVudDtcbiAgICBmb3IgKGxldCBwYXJlbnQgPSBzdGFydERPTSB8fCB2aWV3LmRvbTs7KSB7XG4gICAgICAgIGlmICghcGFyZW50KVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmIChwYXJlbnQubm9kZVR5cGUgIT0gMSkge1xuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50Tm9kZShwYXJlbnQpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGVsdCA9IHBhcmVudDtcbiAgICAgICAgbGV0IGF0VG9wID0gZWx0ID09IGRvYy5ib2R5O1xuICAgICAgICBsZXQgYm91bmRpbmcgPSBhdFRvcCA/IHdpbmRvd1JlY3QoZG9jKSA6IGNsaWVudFJlY3QoZWx0KTtcbiAgICAgICAgbGV0IG1vdmVYID0gMCwgbW92ZVkgPSAwO1xuICAgICAgICBpZiAocmVjdC50b3AgPCBib3VuZGluZy50b3AgKyBnZXRTaWRlKHNjcm9sbFRocmVzaG9sZCwgXCJ0b3BcIikpXG4gICAgICAgICAgICBtb3ZlWSA9IC0oYm91bmRpbmcudG9wIC0gcmVjdC50b3AgKyBnZXRTaWRlKHNjcm9sbE1hcmdpbiwgXCJ0b3BcIikpO1xuICAgICAgICBlbHNlIGlmIChyZWN0LmJvdHRvbSA+IGJvdW5kaW5nLmJvdHRvbSAtIGdldFNpZGUoc2Nyb2xsVGhyZXNob2xkLCBcImJvdHRvbVwiKSlcbiAgICAgICAgICAgIG1vdmVZID0gcmVjdC5ib3R0b20gLSByZWN0LnRvcCA+IGJvdW5kaW5nLmJvdHRvbSAtIGJvdW5kaW5nLnRvcFxuICAgICAgICAgICAgICAgID8gcmVjdC50b3AgKyBnZXRTaWRlKHNjcm9sbE1hcmdpbiwgXCJ0b3BcIikgLSBib3VuZGluZy50b3BcbiAgICAgICAgICAgICAgICA6IHJlY3QuYm90dG9tIC0gYm91bmRpbmcuYm90dG9tICsgZ2V0U2lkZShzY3JvbGxNYXJnaW4sIFwiYm90dG9tXCIpO1xuICAgICAgICBpZiAocmVjdC5sZWZ0IDwgYm91bmRpbmcubGVmdCArIGdldFNpZGUoc2Nyb2xsVGhyZXNob2xkLCBcImxlZnRcIikpXG4gICAgICAgICAgICBtb3ZlWCA9IC0oYm91bmRpbmcubGVmdCAtIHJlY3QubGVmdCArIGdldFNpZGUoc2Nyb2xsTWFyZ2luLCBcImxlZnRcIikpO1xuICAgICAgICBlbHNlIGlmIChyZWN0LnJpZ2h0ID4gYm91bmRpbmcucmlnaHQgLSBnZXRTaWRlKHNjcm9sbFRocmVzaG9sZCwgXCJyaWdodFwiKSlcbiAgICAgICAgICAgIG1vdmVYID0gcmVjdC5yaWdodCAtIGJvdW5kaW5nLnJpZ2h0ICsgZ2V0U2lkZShzY3JvbGxNYXJnaW4sIFwicmlnaHRcIik7XG4gICAgICAgIGlmIChtb3ZlWCB8fCBtb3ZlWSkge1xuICAgICAgICAgICAgaWYgKGF0VG9wKSB7XG4gICAgICAgICAgICAgICAgZG9jLmRlZmF1bHRWaWV3LnNjcm9sbEJ5KG1vdmVYLCBtb3ZlWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhcnRYID0gZWx0LnNjcm9sbExlZnQsIHN0YXJ0WSA9IGVsdC5zY3JvbGxUb3A7XG4gICAgICAgICAgICAgICAgaWYgKG1vdmVZKVxuICAgICAgICAgICAgICAgICAgICBlbHQuc2Nyb2xsVG9wICs9IG1vdmVZO1xuICAgICAgICAgICAgICAgIGlmIChtb3ZlWClcbiAgICAgICAgICAgICAgICAgICAgZWx0LnNjcm9sbExlZnQgKz0gbW92ZVg7XG4gICAgICAgICAgICAgICAgbGV0IGRYID0gZWx0LnNjcm9sbExlZnQgLSBzdGFydFgsIGRZID0gZWx0LnNjcm9sbFRvcCAtIHN0YXJ0WTtcbiAgICAgICAgICAgICAgICByZWN0ID0geyBsZWZ0OiByZWN0LmxlZnQgLSBkWCwgdG9wOiByZWN0LnRvcCAtIGRZLCByaWdodDogcmVjdC5yaWdodCAtIGRYLCBib3R0b206IHJlY3QuYm90dG9tIC0gZFkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgcG9zID0gYXRUb3AgPyBcImZpeGVkXCIgOiBnZXRDb21wdXRlZFN0eWxlKHBhcmVudCkucG9zaXRpb247XG4gICAgICAgIGlmICgvXihmaXhlZHxzdGlja3kpJC8udGVzdChwb3MpKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIHBhcmVudCA9IHBvcyA9PSBcImFic29sdXRlXCIgPyBwYXJlbnQub2Zmc2V0UGFyZW50IDogcGFyZW50Tm9kZShwYXJlbnQpO1xuICAgIH1cbn1cbi8vIFN0b3JlIHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGVkaXRvcidzIHBhcmVudCBub2RlcywgYWxvbmcgd2l0aFxuLy8gdGhlIHRvcCBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IG5lYXIgdGhlIHRvcCBvZiB0aGUgZWRpdG9yLCB3aGljaFxuLy8gd2lsbCBiZSB1c2VkIHRvIG1ha2Ugc3VyZSB0aGUgdmlzaWJsZSB2aWV3cG9ydCByZW1haW5zIHN0YWJsZSBldmVuXG4vLyB3aGVuIHRoZSBzaXplIG9mIHRoZSBjb250ZW50IGFib3ZlIGNoYW5nZXMuXG5mdW5jdGlvbiBzdG9yZVNjcm9sbFBvcyh2aWV3KSB7XG4gICAgbGV0IHJlY3QgPSB2aWV3LmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgc3RhcnRZID0gTWF0aC5tYXgoMCwgcmVjdC50b3ApO1xuICAgIGxldCByZWZET00sIHJlZlRvcDtcbiAgICBmb3IgKGxldCB4ID0gKHJlY3QubGVmdCArIHJlY3QucmlnaHQpIC8gMiwgeSA9IHN0YXJ0WSArIDE7IHkgPCBNYXRoLm1pbihpbm5lckhlaWdodCwgcmVjdC5ib3R0b20pOyB5ICs9IDUpIHtcbiAgICAgICAgbGV0IGRvbSA9IHZpZXcucm9vdC5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICAgICAgICBpZiAoIWRvbSB8fCBkb20gPT0gdmlldy5kb20gfHwgIXZpZXcuZG9tLmNvbnRhaW5zKGRvbSkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgbGV0IGxvY2FsUmVjdCA9IGRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKGxvY2FsUmVjdC50b3AgPj0gc3RhcnRZIC0gMjApIHtcbiAgICAgICAgICAgIHJlZkRPTSA9IGRvbTtcbiAgICAgICAgICAgIHJlZlRvcCA9IGxvY2FsUmVjdC50b3A7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyByZWZET006IHJlZkRPTSwgcmVmVG9wOiByZWZUb3AsIHN0YWNrOiBzY3JvbGxTdGFjayh2aWV3LmRvbSkgfTtcbn1cbmZ1bmN0aW9uIHNjcm9sbFN0YWNrKGRvbSkge1xuICAgIGxldCBzdGFjayA9IFtdLCBkb2MgPSBkb20ub3duZXJEb2N1bWVudDtcbiAgICBmb3IgKGxldCBjdXIgPSBkb207IGN1cjsgY3VyID0gcGFyZW50Tm9kZShjdXIpKSB7XG4gICAgICAgIHN0YWNrLnB1c2goeyBkb206IGN1ciwgdG9wOiBjdXIuc2Nyb2xsVG9wLCBsZWZ0OiBjdXIuc2Nyb2xsTGVmdCB9KTtcbiAgICAgICAgaWYgKGRvbSA9PSBkb2MpXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHN0YWNrO1xufVxuLy8gUmVzZXQgdGhlIHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgZWRpdG9yJ3MgcGFyZW50IG5vZGVzIHRvIHRoYXQgd2hhdFxuLy8gaXQgd2FzIGJlZm9yZSwgd2hlbiBzdG9yZVNjcm9sbFBvcyB3YXMgY2FsbGVkLlxuZnVuY3Rpb24gcmVzZXRTY3JvbGxQb3MoeyByZWZET00sIHJlZlRvcCwgc3RhY2sgfSkge1xuICAgIGxldCBuZXdSZWZUb3AgPSByZWZET00gPyByZWZET00uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIDogMDtcbiAgICByZXN0b3JlU2Nyb2xsU3RhY2soc3RhY2ssIG5ld1JlZlRvcCA9PSAwID8gMCA6IG5ld1JlZlRvcCAtIHJlZlRvcCk7XG59XG5mdW5jdGlvbiByZXN0b3JlU2Nyb2xsU3RhY2soc3RhY2ssIGRUb3ApIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCB7IGRvbSwgdG9wLCBsZWZ0IH0gPSBzdGFja1tpXTtcbiAgICAgICAgaWYgKGRvbS5zY3JvbGxUb3AgIT0gdG9wICsgZFRvcClcbiAgICAgICAgICAgIGRvbS5zY3JvbGxUb3AgPSB0b3AgKyBkVG9wO1xuICAgICAgICBpZiAoZG9tLnNjcm9sbExlZnQgIT0gbGVmdClcbiAgICAgICAgICAgIGRvbS5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICB9XG59XG5sZXQgcHJldmVudFNjcm9sbFN1cHBvcnRlZCA9IG51bGw7XG4vLyBGZWF0dXJlLWRldGVjdHMgc3VwcG9ydCBmb3IgLmZvY3VzKHtwcmV2ZW50U2Nyb2xsOiB0cnVlfSksIGFuZCB1c2VzXG4vLyBhIGZhbGxiYWNrIGtsdWRnZSB3aGVuIG5vdCBzdXBwb3J0ZWQuXG5mdW5jdGlvbiBmb2N1c1ByZXZlbnRTY3JvbGwoZG9tKSB7XG4gICAgaWYgKGRvbS5zZXRBY3RpdmUpXG4gICAgICAgIHJldHVybiBkb20uc2V0QWN0aXZlKCk7IC8vIGluIElFXG4gICAgaWYgKHByZXZlbnRTY3JvbGxTdXBwb3J0ZWQpXG4gICAgICAgIHJldHVybiBkb20uZm9jdXMocHJldmVudFNjcm9sbFN1cHBvcnRlZCk7XG4gICAgbGV0IHN0b3JlZCA9IHNjcm9sbFN0YWNrKGRvbSk7XG4gICAgZG9tLmZvY3VzKHByZXZlbnRTY3JvbGxTdXBwb3J0ZWQgPT0gbnVsbCA/IHtcbiAgICAgICAgZ2V0IHByZXZlbnRTY3JvbGwoKSB7XG4gICAgICAgICAgICBwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkID0geyBwcmV2ZW50U2Nyb2xsOiB0cnVlIH07XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0gOiB1bmRlZmluZWQpO1xuICAgIGlmICghcHJldmVudFNjcm9sbFN1cHBvcnRlZCkge1xuICAgICAgICBwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgICAgIHJlc3RvcmVTY3JvbGxTdGFjayhzdG9yZWQsIDApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZpbmRPZmZzZXRJbk5vZGUobm9kZSwgY29vcmRzKSB7XG4gICAgbGV0IGNsb3Nlc3QsIGR4Q2xvc2VzdCA9IDJlOCwgY29vcmRzQ2xvc2VzdCwgb2Zmc2V0ID0gMDtcbiAgICBsZXQgcm93Qm90ID0gY29vcmRzLnRvcCwgcm93VG9wID0gY29vcmRzLnRvcDtcbiAgICBsZXQgZmlyc3RCZWxvdywgY29vcmRzQmVsb3c7XG4gICAgZm9yIChsZXQgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQsIGNoaWxkSW5kZXggPSAwOyBjaGlsZDsgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZywgY2hpbGRJbmRleCsrKSB7XG4gICAgICAgIGxldCByZWN0cztcbiAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09IDEpXG4gICAgICAgICAgICByZWN0cyA9IGNoaWxkLmdldENsaWVudFJlY3RzKCk7XG4gICAgICAgIGVsc2UgaWYgKGNoaWxkLm5vZGVUeXBlID09IDMpXG4gICAgICAgICAgICByZWN0cyA9IHRleHRSYW5nZShjaGlsZCkuZ2V0Q2xpZW50UmVjdHMoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByZWN0ID0gcmVjdHNbaV07XG4gICAgICAgICAgICBpZiAocmVjdC50b3AgPD0gcm93Qm90ICYmIHJlY3QuYm90dG9tID49IHJvd1RvcCkge1xuICAgICAgICAgICAgICAgIHJvd0JvdCA9IE1hdGgubWF4KHJlY3QuYm90dG9tLCByb3dCb3QpO1xuICAgICAgICAgICAgICAgIHJvd1RvcCA9IE1hdGgubWluKHJlY3QudG9wLCByb3dUb3ApO1xuICAgICAgICAgICAgICAgIGxldCBkeCA9IHJlY3QubGVmdCA+IGNvb3Jkcy5sZWZ0ID8gcmVjdC5sZWZ0IC0gY29vcmRzLmxlZnRcbiAgICAgICAgICAgICAgICAgICAgOiByZWN0LnJpZ2h0IDwgY29vcmRzLmxlZnQgPyBjb29yZHMubGVmdCAtIHJlY3QucmlnaHQgOiAwO1xuICAgICAgICAgICAgICAgIGlmIChkeCA8IGR4Q2xvc2VzdCkge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZXN0ID0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgICAgIGR4Q2xvc2VzdCA9IGR4O1xuICAgICAgICAgICAgICAgICAgICBjb29yZHNDbG9zZXN0ID0gZHggJiYgY2xvc2VzdC5ub2RlVHlwZSA9PSAzID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogcmVjdC5yaWdodCA8IGNvb3Jkcy5sZWZ0ID8gcmVjdC5yaWdodCA6IHJlY3QubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogY29vcmRzLnRvcFxuICAgICAgICAgICAgICAgICAgICB9IDogY29vcmRzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT0gMSAmJiBkeClcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IGNoaWxkSW5kZXggKyAoY29vcmRzLmxlZnQgPj0gKHJlY3QubGVmdCArIHJlY3QucmlnaHQpIC8gMiA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVjdC50b3AgPiBjb29yZHMudG9wICYmICFmaXJzdEJlbG93ICYmIHJlY3QubGVmdCA8PSBjb29yZHMubGVmdCAmJiByZWN0LnJpZ2h0ID49IGNvb3Jkcy5sZWZ0KSB7XG4gICAgICAgICAgICAgICAgZmlyc3RCZWxvdyA9IGNoaWxkO1xuICAgICAgICAgICAgICAgIGNvb3Jkc0JlbG93ID0geyBsZWZ0OiBNYXRoLm1heChyZWN0LmxlZnQsIE1hdGgubWluKHJlY3QucmlnaHQsIGNvb3Jkcy5sZWZ0KSksIHRvcDogcmVjdC50b3AgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2xvc2VzdCAmJiAoY29vcmRzLmxlZnQgPj0gcmVjdC5yaWdodCAmJiBjb29yZHMudG9wID49IHJlY3QudG9wIHx8XG4gICAgICAgICAgICAgICAgY29vcmRzLmxlZnQgPj0gcmVjdC5sZWZ0ICYmIGNvb3Jkcy50b3AgPj0gcmVjdC5ib3R0b20pKVxuICAgICAgICAgICAgICAgIG9mZnNldCA9IGNoaWxkSW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghY2xvc2VzdCAmJiBmaXJzdEJlbG93KSB7XG4gICAgICAgIGNsb3Nlc3QgPSBmaXJzdEJlbG93O1xuICAgICAgICBjb29yZHNDbG9zZXN0ID0gY29vcmRzQmVsb3c7XG4gICAgICAgIGR4Q2xvc2VzdCA9IDA7XG4gICAgfVxuICAgIGlmIChjbG9zZXN0ICYmIGNsb3Nlc3Qubm9kZVR5cGUgPT0gMylcbiAgICAgICAgcmV0dXJuIGZpbmRPZmZzZXRJblRleHQoY2xvc2VzdCwgY29vcmRzQ2xvc2VzdCk7XG4gICAgaWYgKCFjbG9zZXN0IHx8IChkeENsb3Nlc3QgJiYgY2xvc2VzdC5ub2RlVHlwZSA9PSAxKSlcbiAgICAgICAgcmV0dXJuIHsgbm9kZSwgb2Zmc2V0IH07XG4gICAgcmV0dXJuIGZpbmRPZmZzZXRJbk5vZGUoY2xvc2VzdCwgY29vcmRzQ2xvc2VzdCk7XG59XG5mdW5jdGlvbiBmaW5kT2Zmc2V0SW5UZXh0KG5vZGUsIGNvb3Jkcykge1xuICAgIGxldCBsZW4gPSBub2RlLm5vZGVWYWx1ZS5sZW5ndGg7XG4gICAgbGV0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHJhbmdlLnNldEVuZChub2RlLCBpICsgMSk7XG4gICAgICAgIHJhbmdlLnNldFN0YXJ0KG5vZGUsIGkpO1xuICAgICAgICBsZXQgcmVjdCA9IHNpbmdsZVJlY3QocmFuZ2UsIDEpO1xuICAgICAgICBpZiAocmVjdC50b3AgPT0gcmVjdC5ib3R0b20pXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKGluUmVjdChjb29yZHMsIHJlY3QpKVxuICAgICAgICAgICAgcmV0dXJuIHsgbm9kZSwgb2Zmc2V0OiBpICsgKGNvb3Jkcy5sZWZ0ID49IChyZWN0LmxlZnQgKyByZWN0LnJpZ2h0KSAvIDIgPyAxIDogMCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgbm9kZSwgb2Zmc2V0OiAwIH07XG59XG5mdW5jdGlvbiBpblJlY3QoY29vcmRzLCByZWN0KSB7XG4gICAgcmV0dXJuIGNvb3Jkcy5sZWZ0ID49IHJlY3QubGVmdCAtIDEgJiYgY29vcmRzLmxlZnQgPD0gcmVjdC5yaWdodCArIDEgJiZcbiAgICAgICAgY29vcmRzLnRvcCA+PSByZWN0LnRvcCAtIDEgJiYgY29vcmRzLnRvcCA8PSByZWN0LmJvdHRvbSArIDE7XG59XG5mdW5jdGlvbiB0YXJnZXRLbHVkZ2UoZG9tLCBjb29yZHMpIHtcbiAgICBsZXQgcGFyZW50ID0gZG9tLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCAmJiAvXmxpJC9pLnRlc3QocGFyZW50Lm5vZGVOYW1lKSAmJiBjb29yZHMubGVmdCA8IGRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KVxuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgIHJldHVybiBkb207XG59XG5mdW5jdGlvbiBwb3NGcm9tRWxlbWVudCh2aWV3LCBlbHQsIGNvb3Jkcykge1xuICAgIGxldCB7IG5vZGUsIG9mZnNldCB9ID0gZmluZE9mZnNldEluTm9kZShlbHQsIGNvb3JkcyksIGJpYXMgPSAtMTtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxICYmICFub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgbGV0IHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBiaWFzID0gcmVjdC5sZWZ0ICE9IHJlY3QucmlnaHQgJiYgY29vcmRzLmxlZnQgPiAocmVjdC5sZWZ0ICsgcmVjdC5yaWdodCkgLyAyID8gMSA6IC0xO1xuICAgIH1cbiAgICByZXR1cm4gdmlldy5kb2NWaWV3LnBvc0Zyb21ET00obm9kZSwgb2Zmc2V0LCBiaWFzKTtcbn1cbmZ1bmN0aW9uIHBvc0Zyb21DYXJldCh2aWV3LCBub2RlLCBvZmZzZXQsIGNvb3Jkcykge1xuICAgIC8vIEJyb3dzZXIgKGluIGNhcmV0UG9zaXRpb24vUmFuZ2VGcm9tUG9pbnQpIHdpbGwgYWdyZXNzaXZlbHlcbiAgICAvLyBub3JtYWxpemUgdG93YXJkcyBuZWFyYnkgaW5saW5lIG5vZGVzLiBTaW5jZSB3ZSBhcmUgaW50ZXJlc3RlZCBpblxuICAgIC8vIHBvc2l0aW9ucyBiZXR3ZWVuIGJsb2NrIG5vZGVzIHRvbywgd2UgZmlyc3Qgd2FsayB1cCB0aGUgaGllcmFyY2h5XG4gICAgLy8gb2Ygbm9kZXMgdG8gc2VlIGlmIHRoZXJlIGFyZSBibG9jayBub2RlcyB0aGF0IHRoZSBjb29yZGluYXRlc1xuICAgIC8vIGZhbGwgb3V0c2lkZSBvZi4gSWYgc28sIHdlIHRha2UgdGhlIHBvc2l0aW9uIGJlZm9yZS9hZnRlciB0aGF0XG4gICAgLy8gYmxvY2suIElmIG5vdCwgd2UgY2FsbCBgcG9zRnJvbURPTWAgb24gdGhlIHJhdyBub2RlL29mZnNldC5cbiAgICBsZXQgb3V0c2lkZUJsb2NrID0gLTE7XG4gICAgZm9yIChsZXQgY3VyID0gbm9kZSwgc2F3QmxvY2sgPSBmYWxzZTs7KSB7XG4gICAgICAgIGlmIChjdXIgPT0gdmlldy5kb20pXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgbGV0IGRlc2MgPSB2aWV3LmRvY1ZpZXcubmVhcmVzdERlc2MoY3VyLCB0cnVlKSwgcmVjdDtcbiAgICAgICAgaWYgKCFkZXNjKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmIChkZXNjLmRvbS5ub2RlVHlwZSA9PSAxICYmIChkZXNjLm5vZGUuaXNCbG9jayAmJiBkZXNjLnBhcmVudCB8fCAhZGVzYy5jb250ZW50RE9NKSAmJlxuICAgICAgICAgICAgLy8gSWdub3JlIGVsZW1lbnRzIHdpdGggemVyby1zaXplIGJvdW5kaW5nIHJlY3RhbmdsZXNcbiAgICAgICAgICAgICgocmVjdCA9IGRlc2MuZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKS53aWR0aCB8fCByZWN0LmhlaWdodCkpIHtcbiAgICAgICAgICAgIGlmIChkZXNjLm5vZGUuaXNCbG9jayAmJiBkZXNjLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgYXBwbHkgdGhlIGhvcml6b250YWwgdGVzdCB0byB0aGUgaW5uZXJtb3N0IGJsb2NrLiBWZXJ0aWNhbCBmb3IgYW55IHBhcmVudC5cbiAgICAgICAgICAgICAgICBpZiAoIXNhd0Jsb2NrICYmIHJlY3QubGVmdCA+IGNvb3Jkcy5sZWZ0IHx8IHJlY3QudG9wID4gY29vcmRzLnRvcClcbiAgICAgICAgICAgICAgICAgICAgb3V0c2lkZUJsb2NrID0gZGVzYy5wb3NCZWZvcmU7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXNhd0Jsb2NrICYmIHJlY3QucmlnaHQgPCBjb29yZHMubGVmdCB8fCByZWN0LmJvdHRvbSA8IGNvb3Jkcy50b3ApXG4gICAgICAgICAgICAgICAgICAgIG91dHNpZGVCbG9jayA9IGRlc2MucG9zQWZ0ZXI7XG4gICAgICAgICAgICAgICAgc2F3QmxvY2sgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkZXNjLmNvbnRlbnRET00gJiYgb3V0c2lkZUJsb2NrIDwgMCAmJiAhZGVzYy5ub2RlLmlzVGV4dCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIGFyZSBpbnNpZGUgYSBsZWFmLCByZXR1cm4gdGhlIHNpZGUgb2YgdGhlIGxlYWYgY2xvc2VyIHRvIHRoZSBjb29yZHNcbiAgICAgICAgICAgICAgICBsZXQgYmVmb3JlID0gZGVzYy5ub2RlLmlzQmxvY2sgPyBjb29yZHMudG9wIDwgKHJlY3QudG9wICsgcmVjdC5ib3R0b20pIC8gMlxuICAgICAgICAgICAgICAgICAgICA6IGNvb3Jkcy5sZWZ0IDwgKHJlY3QubGVmdCArIHJlY3QucmlnaHQpIC8gMjtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmVmb3JlID8gZGVzYy5wb3NCZWZvcmUgOiBkZXNjLnBvc0FmdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN1ciA9IGRlc2MuZG9tLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHJldHVybiBvdXRzaWRlQmxvY2sgPiAtMSA/IG91dHNpZGVCbG9jayA6IHZpZXcuZG9jVmlldy5wb3NGcm9tRE9NKG5vZGUsIG9mZnNldCwgLTEpO1xufVxuZnVuY3Rpb24gZWxlbWVudEZyb21Qb2ludChlbGVtZW50LCBjb29yZHMsIGJveCkge1xuICAgIGxldCBsZW4gPSBlbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgIGlmIChsZW4gJiYgYm94LnRvcCA8IGJveC5ib3R0b20pIHtcbiAgICAgICAgZm9yIChsZXQgc3RhcnRJID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obGVuIC0gMSwgTWF0aC5mbG9vcihsZW4gKiAoY29vcmRzLnRvcCAtIGJveC50b3ApIC8gKGJveC5ib3R0b20gLSBib3gudG9wKSkgLSAyKSksIGkgPSBzdGFydEk7Oykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gZWxlbWVudC5jaGlsZE5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVjdHMgPSBjaGlsZC5nZXRDbGllbnRSZWN0cygpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcmVjdHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY3QgPSByZWN0c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluUmVjdChjb29yZHMsIHJlY3QpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRGcm9tUG9pbnQoY2hpbGQsIGNvb3JkcywgcmVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChpID0gKGkgKyAxKSAlIGxlbikgPT0gc3RhcnRJKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50O1xufVxuLy8gR2l2ZW4gYW4geCx5IHBvc2l0aW9uIG9uIHRoZSBlZGl0b3IsIGdldCB0aGUgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50LlxuZnVuY3Rpb24gcG9zQXRDb29yZHModmlldywgY29vcmRzKSB7XG4gICAgbGV0IGRvYyA9IHZpZXcuZG9tLm93bmVyRG9jdW1lbnQsIG5vZGUsIG9mZnNldCA9IDA7XG4gICAgbGV0IGNhcmV0ID0gY2FyZXRGcm9tUG9pbnQoZG9jLCBjb29yZHMubGVmdCwgY29vcmRzLnRvcCk7XG4gICAgaWYgKGNhcmV0KVxuICAgICAgICAoeyBub2RlLCBvZmZzZXQgfSA9IGNhcmV0KTtcbiAgICBsZXQgZWx0ID0gKHZpZXcucm9vdC5lbGVtZW50RnJvbVBvaW50ID8gdmlldy5yb290IDogZG9jKVxuICAgICAgICAuZWxlbWVudEZyb21Qb2ludChjb29yZHMubGVmdCwgY29vcmRzLnRvcCk7XG4gICAgbGV0IHBvcztcbiAgICBpZiAoIWVsdCB8fCAhdmlldy5kb20uY29udGFpbnMoZWx0Lm5vZGVUeXBlICE9IDEgPyBlbHQucGFyZW50Tm9kZSA6IGVsdCkpIHtcbiAgICAgICAgbGV0IGJveCA9IHZpZXcuZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAoIWluUmVjdChjb29yZHMsIGJveCkpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgZWx0ID0gZWxlbWVudEZyb21Qb2ludCh2aWV3LmRvbSwgY29vcmRzLCBib3gpO1xuICAgICAgICBpZiAoIWVsdClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBTYWZhcmkncyBjYXJldFJhbmdlRnJvbVBvaW50IHJldHVybnMgbm9uc2Vuc2Ugd2hlbiBvbiBhIGRyYWdnYWJsZSBlbGVtZW50XG4gICAgaWYgKHNhZmFyaSkge1xuICAgICAgICBmb3IgKGxldCBwID0gZWx0OyBub2RlICYmIHA7IHAgPSBwYXJlbnROb2RlKHApKVxuICAgICAgICAgICAgaWYgKHAuZHJhZ2dhYmxlKVxuICAgICAgICAgICAgICAgIG5vZGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsdCA9IHRhcmdldEtsdWRnZShlbHQsIGNvb3Jkcyk7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgICAgaWYgKGdlY2tvICYmIG5vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgLy8gRmlyZWZveCB3aWxsIHNvbWV0aW1lcyByZXR1cm4gb2Zmc2V0cyBpbnRvIDxpbnB1dD4gbm9kZXMsIHdoaWNoXG4gICAgICAgICAgICAvLyBoYXZlIG5vIGFjdHVhbCBjaGlsZHJlbiwgZnJvbSBjYXJldFBvc2l0aW9uRnJvbVBvaW50ICgjOTUzKVxuICAgICAgICAgICAgb2Zmc2V0ID0gTWF0aC5taW4ob2Zmc2V0LCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIC8vIEl0J2xsIGFsc28gbW92ZSB0aGUgcmV0dXJuZWQgcG9zaXRpb24gYmVmb3JlIGltYWdlIG5vZGVzLFxuICAgICAgICAgICAgLy8gZXZlbiBpZiB0aG9zZSBhcmUgYmVoaW5kIGl0LlxuICAgICAgICAgICAgaWYgKG9mZnNldCA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdLCBib3g7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQubm9kZU5hbWUgPT0gXCJJTUdcIiAmJiAoYm94ID0gbmV4dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkucmlnaHQgPD0gY29vcmRzLmxlZnQgJiZcbiAgICAgICAgICAgICAgICAgICAgYm94LmJvdHRvbSA+IGNvb3Jkcy50b3ApXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBwcmV2O1xuICAgICAgICAvLyBXaGVuIGNsaWNraW5nIGFib3ZlIHRoZSByaWdodCBzaWRlIG9mIGFuIHVuZWRpdGFibGUgbm9kZSwgQ2hyb21lIHdpbGwgcmVwb3J0IGEgY3Vyc29yIHBvc2l0aW9uIGFmdGVyIHRoYXQgbm9kZS5cbiAgICAgICAgaWYgKHdlYmtpdCAmJiBvZmZzZXQgJiYgbm9kZS5ub2RlVHlwZSA9PSAxICYmIChwcmV2ID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldCAtIDFdKS5ub2RlVHlwZSA9PSAxICYmXG4gICAgICAgICAgICBwcmV2LmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIgJiYgcHJldi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPj0gY29vcmRzLnRvcClcbiAgICAgICAgICAgIG9mZnNldC0tO1xuICAgICAgICAvLyBTdXNwaWNpb3VzbHkgc3BlY2lmaWMga2x1ZGdlIHRvIHdvcmsgYXJvdW5kIGNhcmV0KkZyb21Qb2ludFxuICAgICAgICAvLyBuZXZlciByZXR1cm5pbmcgYSBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudFxuICAgICAgICBpZiAobm9kZSA9PSB2aWV3LmRvbSAmJiBvZmZzZXQgPT0gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCAtIDEgJiYgbm9kZS5sYXN0Q2hpbGQubm9kZVR5cGUgPT0gMSAmJlxuICAgICAgICAgICAgY29vcmRzLnRvcCA+IG5vZGUubGFzdENoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSlcbiAgICAgICAgICAgIHBvcyA9IHZpZXcuc3RhdGUuZG9jLmNvbnRlbnQuc2l6ZTtcbiAgICAgICAgLy8gSWdub3JlIHBvc2l0aW9ucyBkaXJlY3RseSBhZnRlciBhIEJSLCBzaW5jZSBjYXJldCpGcm9tUG9pbnRcbiAgICAgICAgLy8gJ3JvdW5kIHVwJyBwb3NpdGlvbnMgdGhhdCB3b3VsZCBiZSBtb3JlIGFjY3VyYXRlbHkgcGxhY2VkXG4gICAgICAgIC8vIGJlZm9yZSB0aGUgQlIgbm9kZS5cbiAgICAgICAgZWxzZSBpZiAob2Zmc2V0ID09IDAgfHwgbm9kZS5ub2RlVHlwZSAhPSAxIHx8IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXQgLSAxXS5ub2RlTmFtZSAhPSBcIkJSXCIpXG4gICAgICAgICAgICBwb3MgPSBwb3NGcm9tQ2FyZXQodmlldywgbm9kZSwgb2Zmc2V0LCBjb29yZHMpO1xuICAgIH1cbiAgICBpZiAocG9zID09IG51bGwpXG4gICAgICAgIHBvcyA9IHBvc0Zyb21FbGVtZW50KHZpZXcsIGVsdCwgY29vcmRzKTtcbiAgICBsZXQgZGVzYyA9IHZpZXcuZG9jVmlldy5uZWFyZXN0RGVzYyhlbHQsIHRydWUpO1xuICAgIHJldHVybiB7IHBvcywgaW5zaWRlOiBkZXNjID8gZGVzYy5wb3NBdFN0YXJ0IC0gZGVzYy5ib3JkZXIgOiAtMSB9O1xufVxuZnVuY3Rpb24gbm9uWmVybyhyZWN0KSB7XG4gICAgcmV0dXJuIHJlY3QudG9wIDwgcmVjdC5ib3R0b20gfHwgcmVjdC5sZWZ0IDwgcmVjdC5yaWdodDtcbn1cbmZ1bmN0aW9uIHNpbmdsZVJlY3QodGFyZ2V0LCBiaWFzKSB7XG4gICAgbGV0IHJlY3RzID0gdGFyZ2V0LmdldENsaWVudFJlY3RzKCk7XG4gICAgaWYgKHJlY3RzLmxlbmd0aCkge1xuICAgICAgICBsZXQgZmlyc3QgPSByZWN0c1tiaWFzIDwgMCA/IDAgOiByZWN0cy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKG5vblplcm8oZmlyc3QpKVxuICAgICAgICAgICAgcmV0dXJuIGZpcnN0O1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbChyZWN0cywgbm9uWmVybykgfHwgdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xufVxuY29uc3QgQklESSA9IC9bXFx1MDU5MC1cXHUwNWY0XFx1MDYwMC1cXHUwNmZmXFx1MDcwMC1cXHUwOGFjXS87XG4vLyBHaXZlbiBhIHBvc2l0aW9uIGluIHRoZSBkb2N1bWVudCBtb2RlbCwgZ2V0IGEgYm91bmRpbmcgYm94IG9mIHRoZVxuLy8gY2hhcmFjdGVyIGF0IHRoYXQgcG9zaXRpb24sIHJlbGF0aXZlIHRvIHRoZSB3aW5kb3cuXG5mdW5jdGlvbiBjb29yZHNBdFBvcyh2aWV3LCBwb3MsIHNpZGUpIHtcbiAgICBsZXQgeyBub2RlLCBvZmZzZXQsIGF0b20gfSA9IHZpZXcuZG9jVmlldy5kb21Gcm9tUG9zKHBvcywgc2lkZSA8IDAgPyAtMSA6IDEpO1xuICAgIGxldCBzdXBwb3J0RW1wdHlSYW5nZSA9IHdlYmtpdCB8fCBnZWNrbztcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzKSB7XG4gICAgICAgIC8vIFRoZXNlIGJyb3dzZXJzIHN1cHBvcnQgcXVlcnlpbmcgZW1wdHkgdGV4dCByYW5nZXMuIFByZWZlciB0aGF0IGluXG4gICAgICAgIC8vIGJpZGkgY29udGV4dCBvciB3aGVuIGF0IHRoZSBlbmQgb2YgYSBub2RlLlxuICAgICAgICBpZiAoc3VwcG9ydEVtcHR5UmFuZ2UgJiYgKEJJREkudGVzdChub2RlLm5vZGVWYWx1ZSkgfHwgKHNpZGUgPCAwID8gIW9mZnNldCA6IG9mZnNldCA9PSBub2RlLm5vZGVWYWx1ZS5sZW5ndGgpKSkge1xuICAgICAgICAgICAgbGV0IHJlY3QgPSBzaW5nbGVSZWN0KHRleHRSYW5nZShub2RlLCBvZmZzZXQsIG9mZnNldCksIHNpZGUpO1xuICAgICAgICAgICAgLy8gRmlyZWZveCByZXR1cm5zIGJhZCByZXN1bHRzICh0aGUgcG9zaXRpb24gYmVmb3JlIHRoZSBzcGFjZSlcbiAgICAgICAgICAgIC8vIHdoZW4gcXVlcnlpbmcgYSBwb3NpdGlvbiBkaXJlY3RseSBhZnRlciBsaW5lLWJyb2tlblxuICAgICAgICAgICAgLy8gd2hpdGVzcGFjZS4gRGV0ZWN0IHRoaXMgc2l0dWF0aW9uIGFuZCBhbmQga2x1ZGdlIGFyb3VuZCBpdFxuICAgICAgICAgICAgaWYgKGdlY2tvICYmIG9mZnNldCAmJiAvXFxzLy50ZXN0KG5vZGUubm9kZVZhbHVlW29mZnNldCAtIDFdKSAmJiBvZmZzZXQgPCBub2RlLm5vZGVWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVjdEJlZm9yZSA9IHNpbmdsZVJlY3QodGV4dFJhbmdlKG5vZGUsIG9mZnNldCAtIDEsIG9mZnNldCAtIDEpLCAtMSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlY3RCZWZvcmUudG9wID09IHJlY3QudG9wKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZWN0QWZ0ZXIgPSBzaW5nbGVSZWN0KHRleHRSYW5nZShub2RlLCBvZmZzZXQsIG9mZnNldCArIDEpLCAtMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWN0QWZ0ZXIudG9wICE9IHJlY3QudG9wKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZsYXR0ZW5WKHJlY3RBZnRlciwgcmVjdEFmdGVyLmxlZnQgPCByZWN0QmVmb3JlLmxlZnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZWN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGZyb20gPSBvZmZzZXQsIHRvID0gb2Zmc2V0LCB0YWtlU2lkZSA9IHNpZGUgPCAwID8gMSA6IC0xO1xuICAgICAgICAgICAgaWYgKHNpZGUgPCAwICYmICFvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB0bysrO1xuICAgICAgICAgICAgICAgIHRha2VTaWRlID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzaWRlID49IDAgJiYgb2Zmc2V0ID09IG5vZGUubm9kZVZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZyb20tLTtcbiAgICAgICAgICAgICAgICB0YWtlU2lkZSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzaWRlIDwgMCkge1xuICAgICAgICAgICAgICAgIGZyb20tLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmxhdHRlblYoc2luZ2xlUmVjdCh0ZXh0UmFuZ2Uobm9kZSwgZnJvbSwgdG8pLCB0YWtlU2lkZSksIHRha2VTaWRlIDwgMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0ICRkb20gPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKHBvcyAtIChhdG9tIHx8IDApKTtcbiAgICAvLyBSZXR1cm4gYSBob3Jpem9udGFsIGxpbmUgaW4gYmxvY2sgY29udGV4dFxuICAgIGlmICghJGRvbS5wYXJlbnQuaW5saW5lQ29udGVudCkge1xuICAgICAgICBpZiAoYXRvbSA9PSBudWxsICYmIG9mZnNldCAmJiAoc2lkZSA8IDAgfHwgb2Zmc2V0ID09IG5vZGVTaXplKG5vZGUpKSkge1xuICAgICAgICAgICAgbGV0IGJlZm9yZSA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXQgLSAxXTtcbiAgICAgICAgICAgIGlmIChiZWZvcmUubm9kZVR5cGUgPT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmxhdHRlbkgoYmVmb3JlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF0b20gPT0gbnVsbCAmJiBvZmZzZXQgPCBub2RlU2l6ZShub2RlKSkge1xuICAgICAgICAgICAgbGV0IGFmdGVyID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldF07XG4gICAgICAgICAgICBpZiAoYWZ0ZXIubm9kZVR5cGUgPT0gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmxhdHRlbkgoYWZ0ZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbGF0dGVuSChub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBzaWRlID49IDApO1xuICAgIH1cbiAgICAvLyBJbmxpbmUsIG5vdCBpbiB0ZXh0IG5vZGUgKHRoaXMgaXMgbm90IEJpZGktc2FmZSlcbiAgICBpZiAoYXRvbSA9PSBudWxsICYmIG9mZnNldCAmJiAoc2lkZSA8IDAgfHwgb2Zmc2V0ID09IG5vZGVTaXplKG5vZGUpKSkge1xuICAgICAgICBsZXQgYmVmb3JlID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldCAtIDFdO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gYmVmb3JlLm5vZGVUeXBlID09IDMgPyB0ZXh0UmFuZ2UoYmVmb3JlLCBub2RlU2l6ZShiZWZvcmUpIC0gKHN1cHBvcnRFbXB0eVJhbmdlID8gMCA6IDEpKVxuICAgICAgICAgICAgLy8gQlIgbm9kZXMgdGVuZCB0byBvbmx5IHJldHVybiB0aGUgcmVjdGFuZ2xlIGJlZm9yZSB0aGVtLlxuICAgICAgICAgICAgLy8gT25seSB1c2UgdGhlbSBpZiB0aGV5IGFyZSB0aGUgbGFzdCBlbGVtZW50IGluIHRoZWlyIHBhcmVudFxuICAgICAgICAgICAgOiBiZWZvcmUubm9kZVR5cGUgPT0gMSAmJiAoYmVmb3JlLm5vZGVOYW1lICE9IFwiQlJcIiB8fCAhYmVmb3JlLm5leHRTaWJsaW5nKSA/IGJlZm9yZSA6IG51bGw7XG4gICAgICAgIGlmICh0YXJnZXQpXG4gICAgICAgICAgICByZXR1cm4gZmxhdHRlblYoc2luZ2xlUmVjdCh0YXJnZXQsIDEpLCBmYWxzZSk7XG4gICAgfVxuICAgIGlmIChhdG9tID09IG51bGwgJiYgb2Zmc2V0IDwgbm9kZVNpemUobm9kZSkpIHtcbiAgICAgICAgbGV0IGFmdGVyID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldF07XG4gICAgICAgIHdoaWxlIChhZnRlci5wbVZpZXdEZXNjICYmIGFmdGVyLnBtVmlld0Rlc2MuaWdub3JlRm9yQ29vcmRzKVxuICAgICAgICAgICAgYWZ0ZXIgPSBhZnRlci5uZXh0U2libGluZztcbiAgICAgICAgbGV0IHRhcmdldCA9ICFhZnRlciA/IG51bGwgOiBhZnRlci5ub2RlVHlwZSA9PSAzID8gdGV4dFJhbmdlKGFmdGVyLCAwLCAoc3VwcG9ydEVtcHR5UmFuZ2UgPyAwIDogMSkpXG4gICAgICAgICAgICA6IGFmdGVyLm5vZGVUeXBlID09IDEgPyBhZnRlciA6IG51bGw7XG4gICAgICAgIGlmICh0YXJnZXQpXG4gICAgICAgICAgICByZXR1cm4gZmxhdHRlblYoc2luZ2xlUmVjdCh0YXJnZXQsIC0xKSwgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIEFsbCBlbHNlIGZhaWxlZCwganVzdCB0cnkgdG8gZ2V0IGEgcmVjdGFuZ2xlIGZvciB0aGUgdGFyZ2V0IG5vZGVcbiAgICByZXR1cm4gZmxhdHRlblYoc2luZ2xlUmVjdChub2RlLm5vZGVUeXBlID09IDMgPyB0ZXh0UmFuZ2Uobm9kZSkgOiBub2RlLCAtc2lkZSksIHNpZGUgPj0gMCk7XG59XG5mdW5jdGlvbiBmbGF0dGVuVihyZWN0LCBsZWZ0KSB7XG4gICAgaWYgKHJlY3Qud2lkdGggPT0gMClcbiAgICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgbGV0IHggPSBsZWZ0ID8gcmVjdC5sZWZ0IDogcmVjdC5yaWdodDtcbiAgICByZXR1cm4geyB0b3A6IHJlY3QudG9wLCBib3R0b206IHJlY3QuYm90dG9tLCBsZWZ0OiB4LCByaWdodDogeCB9O1xufVxuZnVuY3Rpb24gZmxhdHRlbkgocmVjdCwgdG9wKSB7XG4gICAgaWYgKHJlY3QuaGVpZ2h0ID09IDApXG4gICAgICAgIHJldHVybiByZWN0O1xuICAgIGxldCB5ID0gdG9wID8gcmVjdC50b3AgOiByZWN0LmJvdHRvbTtcbiAgICByZXR1cm4geyB0b3A6IHksIGJvdHRvbTogeSwgbGVmdDogcmVjdC5sZWZ0LCByaWdodDogcmVjdC5yaWdodCB9O1xufVxuZnVuY3Rpb24gd2l0aEZsdXNoZWRTdGF0ZSh2aWV3LCBzdGF0ZSwgZikge1xuICAgIGxldCB2aWV3U3RhdGUgPSB2aWV3LnN0YXRlLCBhY3RpdmUgPSB2aWV3LnJvb3QuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAodmlld1N0YXRlICE9IHN0YXRlKVxuICAgICAgICB2aWV3LnVwZGF0ZVN0YXRlKHN0YXRlKTtcbiAgICBpZiAoYWN0aXZlICE9IHZpZXcuZG9tKVxuICAgICAgICB2aWV3LmZvY3VzKCk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGYoKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGlmICh2aWV3U3RhdGUgIT0gc3RhdGUpXG4gICAgICAgICAgICB2aWV3LnVwZGF0ZVN0YXRlKHZpZXdTdGF0ZSk7XG4gICAgICAgIGlmIChhY3RpdmUgIT0gdmlldy5kb20gJiYgYWN0aXZlKVxuICAgICAgICAgICAgYWN0aXZlLmZvY3VzKCk7XG4gICAgfVxufVxuLy8gV2hldGhlciB2ZXJ0aWNhbCBwb3NpdGlvbiBtb3Rpb24gaW4gYSBnaXZlbiBkaXJlY3Rpb25cbi8vIGZyb20gYSBwb3NpdGlvbiB3b3VsZCBsZWF2ZSBhIHRleHQgYmxvY2suXG5mdW5jdGlvbiBlbmRPZlRleHRibG9ja1ZlcnRpY2FsKHZpZXcsIHN0YXRlLCBkaXIpIHtcbiAgICBsZXQgc2VsID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgIGxldCAkcG9zID0gZGlyID09IFwidXBcIiA/IHNlbC4kZnJvbSA6IHNlbC4kdG87XG4gICAgcmV0dXJuIHdpdGhGbHVzaGVkU3RhdGUodmlldywgc3RhdGUsICgpID0+IHtcbiAgICAgICAgbGV0IHsgbm9kZTogZG9tIH0gPSB2aWV3LmRvY1ZpZXcuZG9tRnJvbVBvcygkcG9zLnBvcywgZGlyID09IFwidXBcIiA/IC0xIDogMSk7XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGxldCBuZWFyZXN0ID0gdmlldy5kb2NWaWV3Lm5lYXJlc3REZXNjKGRvbSwgdHJ1ZSk7XG4gICAgICAgICAgICBpZiAoIW5lYXJlc3QpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBpZiAobmVhcmVzdC5ub2RlLmlzQmxvY2spIHtcbiAgICAgICAgICAgICAgICBkb20gPSBuZWFyZXN0LmNvbnRlbnRET00gfHwgbmVhcmVzdC5kb207XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb20gPSBuZWFyZXN0LmRvbS5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjb29yZHMgPSBjb29yZHNBdFBvcyh2aWV3LCAkcG9zLnBvcywgMSk7XG4gICAgICAgIGZvciAobGV0IGNoaWxkID0gZG9tLmZpcnN0Q2hpbGQ7IGNoaWxkOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBsZXQgYm94ZXM7XG4gICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT0gMSlcbiAgICAgICAgICAgICAgICBib3hlcyA9IGNoaWxkLmdldENsaWVudFJlY3RzKCk7XG4gICAgICAgICAgICBlbHNlIGlmIChjaGlsZC5ub2RlVHlwZSA9PSAzKVxuICAgICAgICAgICAgICAgIGJveGVzID0gdGV4dFJhbmdlKGNoaWxkLCAwLCBjaGlsZC5ub2RlVmFsdWUubGVuZ3RoKS5nZXRDbGllbnRSZWN0cygpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBib3ggPSBib3hlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoYm94LmJvdHRvbSA+IGJveC50b3AgKyAxICYmXG4gICAgICAgICAgICAgICAgICAgIChkaXIgPT0gXCJ1cFwiID8gY29vcmRzLnRvcCAtIGJveC50b3AgPiAoYm94LmJvdHRvbSAtIGNvb3Jkcy50b3ApICogMlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBib3guYm90dG9tIC0gY29vcmRzLmJvdHRvbSA+IChjb29yZHMuYm90dG9tIC0gYm94LnRvcCkgKiAyKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xufVxuY29uc3QgbWF5YmVSVEwgPSAvW1xcdTA1OTAtXFx1MDhhY10vO1xuZnVuY3Rpb24gZW5kT2ZUZXh0YmxvY2tIb3Jpem9udGFsKHZpZXcsIHN0YXRlLCBkaXIpIHtcbiAgICBsZXQgeyAkaGVhZCB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgIGlmICghJGhlYWQucGFyZW50LmlzVGV4dGJsb2NrKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IG9mZnNldCA9ICRoZWFkLnBhcmVudE9mZnNldCwgYXRTdGFydCA9ICFvZmZzZXQsIGF0RW5kID0gb2Zmc2V0ID09ICRoZWFkLnBhcmVudC5jb250ZW50LnNpemU7XG4gICAgbGV0IHNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uKCk7XG4gICAgaWYgKCFzZWwpXG4gICAgICAgIHJldHVybiAkaGVhZC5wb3MgPT0gJGhlYWQuc3RhcnQoKSB8fCAkaGVhZC5wb3MgPT0gJGhlYWQuZW5kKCk7XG4gICAgLy8gSWYgdGhlIHRleHRibG9jayBpcyBhbGwgTFRSLCBvciB0aGUgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnRcbiAgICAvLyBTZWxlY3Rpb24ubW9kaWZ5IChFZGdlKSwgZmFsbCBiYWNrIHRvIGEgcHJpbWl0aXZlIGFwcHJvYWNoXG4gICAgaWYgKCFtYXliZVJUTC50ZXN0KCRoZWFkLnBhcmVudC50ZXh0Q29udGVudCkgfHwgIXNlbC5tb2RpZnkpXG4gICAgICAgIHJldHVybiBkaXIgPT0gXCJsZWZ0XCIgfHwgZGlyID09IFwiYmFja3dhcmRcIiA/IGF0U3RhcnQgOiBhdEVuZDtcbiAgICByZXR1cm4gd2l0aEZsdXNoZWRTdGF0ZSh2aWV3LCBzdGF0ZSwgKCkgPT4ge1xuICAgICAgICAvLyBUaGlzIGlzIGEgaHVnZSBoYWNrLCBidXQgYXBwZWFycyB0byBiZSB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gY3VycmVudGx5IGRvOiB1c2UgYFNlbGVjdGlvbi5tb2RpZnlgIHRvIG1vdmUgdGhlIHNlbGVjdGlvbiBieVxuICAgICAgICAvLyBvbmUgY2hhcmFjdGVyLCBhbmQgc2VlIGlmIHRoYXQgbW92ZXMgdGhlIGN1cnNvciBvdXQgb2YgdGhlXG4gICAgICAgIC8vIHRleHRibG9jayAob3IgZG9lc24ndCBtb3ZlIGl0IGF0IGFsbCwgd2hlbiBhdCB0aGUgc3RhcnQvZW5kIG9mXG4gICAgICAgIC8vIHRoZSBkb2N1bWVudCkuXG4gICAgICAgIGxldCB7IGZvY3VzTm9kZTogb2xkTm9kZSwgZm9jdXNPZmZzZXQ6IG9sZE9mZiwgYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0IH0gPSB2aWV3LmRvbVNlbGVjdGlvblJhbmdlKCk7XG4gICAgICAgIGxldCBvbGRCaWRpTGV2ZWwgPSBzZWwuY2FyZXRCaWRpTGV2ZWwgLy8gT25seSBmb3IgRmlyZWZveFxuICAgICAgICA7XG4gICAgICAgIHNlbC5tb2RpZnkoXCJtb3ZlXCIsIGRpciwgXCJjaGFyYWN0ZXJcIik7XG4gICAgICAgIGxldCBwYXJlbnRET00gPSAkaGVhZC5kZXB0aCA/IHZpZXcuZG9jVmlldy5kb21BZnRlclBvcygkaGVhZC5iZWZvcmUoKSkgOiB2aWV3LmRvbTtcbiAgICAgICAgbGV0IHsgZm9jdXNOb2RlOiBuZXdOb2RlLCBmb2N1c09mZnNldDogbmV3T2ZmIH0gPSB2aWV3LmRvbVNlbGVjdGlvblJhbmdlKCk7XG4gICAgICAgIGxldCByZXN1bHQgPSBuZXdOb2RlICYmICFwYXJlbnRET00uY29udGFpbnMobmV3Tm9kZS5ub2RlVHlwZSA9PSAxID8gbmV3Tm9kZSA6IG5ld05vZGUucGFyZW50Tm9kZSkgfHxcbiAgICAgICAgICAgIChvbGROb2RlID09IG5ld05vZGUgJiYgb2xkT2ZmID09IG5ld09mZik7XG4gICAgICAgIC8vIFJlc3RvcmUgdGhlIHByZXZpb3VzIHNlbGVjdGlvblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2VsLmNvbGxhcHNlKGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCk7XG4gICAgICAgICAgICBpZiAob2xkTm9kZSAmJiAob2xkTm9kZSAhPSBhbmNob3JOb2RlIHx8IG9sZE9mZiAhPSBhbmNob3JPZmZzZXQpICYmIHNlbC5leHRlbmQpXG4gICAgICAgICAgICAgICAgc2VsLmV4dGVuZChvbGROb2RlLCBvbGRPZmYpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChfKSB7IH1cbiAgICAgICAgaWYgKG9sZEJpZGlMZXZlbCAhPSBudWxsKVxuICAgICAgICAgICAgc2VsLmNhcmV0QmlkaUxldmVsID0gb2xkQmlkaUxldmVsO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xufVxubGV0IGNhY2hlZFN0YXRlID0gbnVsbDtcbmxldCBjYWNoZWREaXIgPSBudWxsO1xubGV0IGNhY2hlZFJlc3VsdCA9IGZhbHNlO1xuZnVuY3Rpb24gZW5kT2ZUZXh0YmxvY2sodmlldywgc3RhdGUsIGRpcikge1xuICAgIGlmIChjYWNoZWRTdGF0ZSA9PSBzdGF0ZSAmJiBjYWNoZWREaXIgPT0gZGlyKVxuICAgICAgICByZXR1cm4gY2FjaGVkUmVzdWx0O1xuICAgIGNhY2hlZFN0YXRlID0gc3RhdGU7XG4gICAgY2FjaGVkRGlyID0gZGlyO1xuICAgIHJldHVybiBjYWNoZWRSZXN1bHQgPSBkaXIgPT0gXCJ1cFwiIHx8IGRpciA9PSBcImRvd25cIlxuICAgICAgICA/IGVuZE9mVGV4dGJsb2NrVmVydGljYWwodmlldywgc3RhdGUsIGRpcilcbiAgICAgICAgOiBlbmRPZlRleHRibG9ja0hvcml6b250YWwodmlldywgc3RhdGUsIGRpcik7XG59XG5cbi8vIFZpZXcgZGVzY3JpcHRpb25zIGFyZSBkYXRhIHN0cnVjdHVyZXMgdGhhdCBkZXNjcmliZSB0aGUgRE9NIHRoYXQgaXNcbi8vIHVzZWQgdG8gcmVwcmVzZW50IHRoZSBlZGl0b3IncyBjb250ZW50LiBUaGV5IGFyZSB1c2VkIGZvcjpcbi8vXG4vLyAtIEluY3JlbWVudGFsIHJlZHJhd2luZyB3aGVuIHRoZSBkb2N1bWVudCBjaGFuZ2VzXG4vL1xuLy8gLSBGaWd1cmluZyBvdXQgd2hhdCBwYXJ0IG9mIHRoZSBkb2N1bWVudCBhIGdpdmVuIERPTSBwb3NpdGlvblxuLy8gICBjb3JyZXNwb25kcyB0b1xuLy9cbi8vIC0gV2lyaW5nIGluIGN1c3RvbSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIGVkaXRpbmcgaW50ZXJmYWNlIGZvciBhXG4vLyAgIGdpdmVuIG5vZGVcbi8vXG4vLyBUaGV5IGZvcm0gYSBkb3VibHktbGlua2VkIG11dGFibGUgdHJlZSwgc3RhcnRpbmcgYXQgYHZpZXcuZG9jVmlld2AuXG5jb25zdCBOT1RfRElSVFkgPSAwLCBDSElMRF9ESVJUWSA9IDEsIENPTlRFTlRfRElSVFkgPSAyLCBOT0RFX0RJUlRZID0gMztcbi8vIFN1cGVyY2xhc3MgZm9yIHRoZSB2YXJpb3VzIGtpbmRzIG9mIGRlc2NyaXB0aW9ucy4gRGVmaW5lcyB0aGVpclxuLy8gYmFzaWMgc3RydWN0dXJlIGFuZCBzaGFyZWQgbWV0aG9kcy5cbmNsYXNzIFZpZXdEZXNjIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIGNoaWxkcmVuLCBkb20sIFxuICAgIC8vIFRoaXMgaXMgdGhlIG5vZGUgdGhhdCBob2xkcyB0aGUgY2hpbGQgdmlld3MuIEl0IG1heSBiZSBudWxsIGZvclxuICAgIC8vIGRlc2NzIHRoYXQgZG9uJ3QgaGF2ZSBjaGlsZHJlbi5cbiAgICBjb250ZW50RE9NKSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIHRoaXMuZG9tID0gZG9tO1xuICAgICAgICB0aGlzLmNvbnRlbnRET00gPSBjb250ZW50RE9NO1xuICAgICAgICB0aGlzLmRpcnR5ID0gTk9UX0RJUlRZO1xuICAgICAgICAvLyBBbiBleHBhbmRvIHByb3BlcnR5IG9uIHRoZSBET00gbm9kZSBwcm92aWRlcyBhIGxpbmsgYmFjayB0byBpdHNcbiAgICAgICAgLy8gZGVzY3JpcHRpb24uXG4gICAgICAgIGRvbS5wbVZpZXdEZXNjID0gdGhpcztcbiAgICB9XG4gICAgLy8gVXNlZCB0byBjaGVjayB3aGV0aGVyIGEgZ2l2ZW4gZGVzY3JpcHRpb24gY29ycmVzcG9uZHMgdG8gYVxuICAgIC8vIHdpZGdldC9tYXJrL25vZGUuXG4gICAgbWF0Y2hlc1dpZGdldCh3aWRnZXQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgbWF0Y2hlc01hcmsobWFyaykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBtYXRjaGVzTm9kZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBtYXRjaGVzSGFjayhub2RlTmFtZSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAvLyBXaGVuIHBhcnNpbmcgaW4tZWRpdG9yIGNvbnRlbnQgKGluIGRvbWNoYW5nZS5qcyksIHdlIGFsbG93XG4gICAgLy8gZGVzY3JpcHRpb25zIHRvIGRldGVybWluZSB0aGUgcGFyc2UgcnVsZXMgdGhhdCBzaG91bGQgYmUgdXNlZCB0b1xuICAgIC8vIHBhcnNlIHRoZW0uXG4gICAgcGFyc2VSdWxlKCkgeyByZXR1cm4gbnVsbDsgfVxuICAgIC8vIFVzZWQgYnkgdGhlIGVkaXRvcidzIGV2ZW50IGhhbmRsZXIgdG8gaWdub3JlIGV2ZW50cyB0aGF0IGNvbWVcbiAgICAvLyBmcm9tIGNlcnRhaW4gZGVzY3MuXG4gICAgc3RvcEV2ZW50KGV2ZW50KSB7IHJldHVybiBmYWxzZTsgfVxuICAgIC8vIFRoZSBzaXplIG9mIHRoZSBjb250ZW50IHJlcHJlc2VudGVkIGJ5IHRoaXMgZGVzYy5cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgbGV0IHNpemUgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBzaXplICs9IHRoaXMuY2hpbGRyZW5baV0uc2l6ZTtcbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICAgIC8vIEZvciBibG9jayBub2RlcywgdGhpcyByZXByZXNlbnRzIHRoZSBzcGFjZSB0YWtlbiB1cCBieSB0aGVpclxuICAgIC8vIHN0YXJ0L2VuZCB0b2tlbnMuXG4gICAgZ2V0IGJvcmRlcigpIHsgcmV0dXJuIDA7IH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHRoaXMuZG9tLnBtVmlld0Rlc2MgPT0gdGhpcylcbiAgICAgICAgICAgIHRoaXMuZG9tLnBtVmlld0Rlc2MgPSB1bmRlZmluZWQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baV0uZGVzdHJveSgpO1xuICAgIH1cbiAgICBwb3NCZWZvcmVDaGlsZChjaGlsZCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgcG9zID0gdGhpcy5wb3NBdFN0YXJ0OzsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY3VyID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGlmIChjdXIgPT0gY2hpbGQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICAgIHBvcyArPSBjdXIuc2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgcG9zQmVmb3JlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQucG9zQmVmb3JlQ2hpbGQodGhpcyk7XG4gICAgfVxuICAgIGdldCBwb3NBdFN0YXJ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5wb3NCZWZvcmVDaGlsZCh0aGlzKSArIHRoaXMuYm9yZGVyIDogMDtcbiAgICB9XG4gICAgZ2V0IHBvc0FmdGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NCZWZvcmUgKyB0aGlzLnNpemU7XG4gICAgfVxuICAgIGdldCBwb3NBdEVuZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zQXRTdGFydCArIHRoaXMuc2l6ZSAtIDIgKiB0aGlzLmJvcmRlcjtcbiAgICB9XG4gICAgbG9jYWxQb3NGcm9tRE9NKGRvbSwgb2Zmc2V0LCBiaWFzKSB7XG4gICAgICAgIC8vIElmIHRoZSBET00gcG9zaXRpb24gaXMgaW4gdGhlIGNvbnRlbnQsIHVzZSB0aGUgY2hpbGQgZGVzYyBhZnRlclxuICAgICAgICAvLyBpdCB0byBmaWd1cmUgb3V0IGEgcG9zaXRpb24uXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRET00gJiYgdGhpcy5jb250ZW50RE9NLmNvbnRhaW5zKGRvbS5ub2RlVHlwZSA9PSAxID8gZG9tIDogZG9tLnBhcmVudE5vZGUpKSB7XG4gICAgICAgICAgICBpZiAoYmlhcyA8IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgZG9tQmVmb3JlLCBkZXNjO1xuICAgICAgICAgICAgICAgIGlmIChkb20gPT0gdGhpcy5jb250ZW50RE9NKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbUJlZm9yZSA9IGRvbS5jaGlsZE5vZGVzW29mZnNldCAtIDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGRvbS5wYXJlbnROb2RlICE9IHRoaXMuY29udGVudERPTSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbSA9IGRvbS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICBkb21CZWZvcmUgPSBkb20ucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3aGlsZSAoZG9tQmVmb3JlICYmICEoKGRlc2MgPSBkb21CZWZvcmUucG1WaWV3RGVzYykgJiYgZGVzYy5wYXJlbnQgPT0gdGhpcykpXG4gICAgICAgICAgICAgICAgICAgIGRvbUJlZm9yZSA9IGRvbUJlZm9yZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbUJlZm9yZSA/IHRoaXMucG9zQmVmb3JlQ2hpbGQoZGVzYykgKyBkZXNjLnNpemUgOiB0aGlzLnBvc0F0U3RhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgZG9tQWZ0ZXIsIGRlc2M7XG4gICAgICAgICAgICAgICAgaWYgKGRvbSA9PSB0aGlzLmNvbnRlbnRET00pIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tQWZ0ZXIgPSBkb20uY2hpbGROb2Rlc1tvZmZzZXRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGRvbS5wYXJlbnROb2RlICE9IHRoaXMuY29udGVudERPTSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbSA9IGRvbS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICBkb21BZnRlciA9IGRvbS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2hpbGUgKGRvbUFmdGVyICYmICEoKGRlc2MgPSBkb21BZnRlci5wbVZpZXdEZXNjKSAmJiBkZXNjLnBhcmVudCA9PSB0aGlzKSlcbiAgICAgICAgICAgICAgICAgICAgZG9tQWZ0ZXIgPSBkb21BZnRlci5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9tQWZ0ZXIgPyB0aGlzLnBvc0JlZm9yZUNoaWxkKGRlc2MpIDogdGhpcy5wb3NBdEVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UsIHVzZSB2YXJpb3VzIGhldXJpc3RpY3MsIGZhbGxpbmcgYmFjayBvbiB0aGUgYmlhc1xuICAgICAgICAvLyBwYXJhbWV0ZXIsIHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHJldHVybiB0aGUgcG9zaXRpb24gYXQgdGhlXG4gICAgICAgIC8vIHN0YXJ0IG9yIGF0IHRoZSBlbmQgb2YgdGhpcyB2aWV3IGRlc2MuXG4gICAgICAgIGxldCBhdEVuZDtcbiAgICAgICAgaWYgKGRvbSA9PSB0aGlzLmRvbSAmJiB0aGlzLmNvbnRlbnRET00pIHtcbiAgICAgICAgICAgIGF0RW5kID0gb2Zmc2V0ID4gZG9tSW5kZXgodGhpcy5jb250ZW50RE9NKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmNvbnRlbnRET00gJiYgdGhpcy5jb250ZW50RE9NICE9IHRoaXMuZG9tICYmIHRoaXMuZG9tLmNvbnRhaW5zKHRoaXMuY29udGVudERPTSkpIHtcbiAgICAgICAgICAgIGF0RW5kID0gZG9tLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRoaXMuY29udGVudERPTSkgJiAyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZG9tLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPT0gMClcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBzZWFyY2ggPSBkb207OyBzZWFyY2ggPSBzZWFyY2gucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VhcmNoID09IHRoaXMuZG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdEVuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlYXJjaC5wcmV2aW91c1NpYmxpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXRFbmQgPT0gbnVsbCAmJiBvZmZzZXQgPT0gZG9tLmNoaWxkTm9kZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGZvciAobGV0IHNlYXJjaCA9IGRvbTs7IHNlYXJjaCA9IHNlYXJjaC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWFyY2ggPT0gdGhpcy5kb20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0RW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWFyY2gubmV4dFNpYmxpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChhdEVuZCA9PSBudWxsID8gYmlhcyA+IDAgOiBhdEVuZCkgPyB0aGlzLnBvc0F0RW5kIDogdGhpcy5wb3NBdFN0YXJ0O1xuICAgIH1cbiAgICBuZWFyZXN0RGVzYyhkb20sIG9ubHlOb2RlcyA9IGZhbHNlKSB7XG4gICAgICAgIGZvciAobGV0IGZpcnN0ID0gdHJ1ZSwgY3VyID0gZG9tOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBsZXQgZGVzYyA9IHRoaXMuZ2V0RGVzYyhjdXIpLCBub2RlRE9NO1xuICAgICAgICAgICAgaWYgKGRlc2MgJiYgKCFvbmx5Tm9kZXMgfHwgZGVzYy5ub2RlKSkge1xuICAgICAgICAgICAgICAgIC8vIElmIGRvbSBpcyBvdXRzaWRlIG9mIHRoaXMgZGVzYydzIG5vZGVET00sIGRvbid0IGNvdW50IGl0LlxuICAgICAgICAgICAgICAgIGlmIChmaXJzdCAmJiAobm9kZURPTSA9IGRlc2Mubm9kZURPTSkgJiZcbiAgICAgICAgICAgICAgICAgICAgIShub2RlRE9NLm5vZGVUeXBlID09IDEgPyBub2RlRE9NLmNvbnRhaW5zKGRvbS5ub2RlVHlwZSA9PSAxID8gZG9tIDogZG9tLnBhcmVudE5vZGUpIDogbm9kZURPTSA9PSBkb20pKVxuICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlc2M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0RGVzYyhkb20pIHtcbiAgICAgICAgbGV0IGRlc2MgPSBkb20ucG1WaWV3RGVzYztcbiAgICAgICAgZm9yIChsZXQgY3VyID0gZGVzYzsgY3VyOyBjdXIgPSBjdXIucGFyZW50KVxuICAgICAgICAgICAgaWYgKGN1ciA9PSB0aGlzKVxuICAgICAgICAgICAgICAgIHJldHVybiBkZXNjO1xuICAgIH1cbiAgICBwb3NGcm9tRE9NKGRvbSwgb2Zmc2V0LCBiaWFzKSB7XG4gICAgICAgIGZvciAobGV0IHNjYW4gPSBkb207IHNjYW47IHNjYW4gPSBzY2FuLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIGxldCBkZXNjID0gdGhpcy5nZXREZXNjKHNjYW4pO1xuICAgICAgICAgICAgaWYgKGRlc2MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc2MubG9jYWxQb3NGcm9tRE9NKGRvbSwgb2Zmc2V0LCBiaWFzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIC8vIEZpbmQgdGhlIGRlc2MgZm9yIHRoZSBub2RlIGFmdGVyIHRoZSBnaXZlbiBwb3MsIGlmIGFueS4gKFdoZW4gYVxuICAgIC8vIHBhcmVudCBub2RlIG92ZXJyb2RlIHJlbmRlcmluZywgdGhlcmUgbWlnaHQgbm90IGJlIG9uZS4pXG4gICAgZGVzY0F0KHBvcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgb2Zmc2V0ID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV0sIGVuZCA9IG9mZnNldCArIGNoaWxkLnNpemU7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID09IHBvcyAmJiBlbmQgIT0gb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKCFjaGlsZC5ib3JkZXIgJiYgY2hpbGQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbm5lciA9IGNoaWxkLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlubmVyLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGlubmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwb3MgPCBlbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkLmRlc2NBdChwb3MgLSBvZmZzZXQgLSBjaGlsZC5ib3JkZXIpO1xuICAgICAgICAgICAgb2Zmc2V0ID0gZW5kO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRvbUZyb21Qb3MocG9zLCBzaWRlKSB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZW50RE9NKVxuICAgICAgICAgICAgcmV0dXJuIHsgbm9kZTogdGhpcy5kb20sIG9mZnNldDogMCwgYXRvbTogcG9zICsgMSB9O1xuICAgICAgICAvLyBGaXJzdCBmaW5kIHRoZSBwb3NpdGlvbiBpbiB0aGUgY2hpbGQgYXJyYXlcbiAgICAgICAgbGV0IGkgPSAwLCBvZmZzZXQgPSAwO1xuICAgICAgICBmb3IgKGxldCBjdXJQb3MgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgZW5kID0gY3VyUG9zICsgY2hpbGQuc2l6ZTtcbiAgICAgICAgICAgIGlmIChlbmQgPiBwb3MgfHwgY2hpbGQgaW5zdGFuY2VvZiBUcmFpbGluZ0hhY2tWaWV3RGVzYykge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IHBvcyAtIGN1clBvcztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1clBvcyA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGlzIHBvaW50cyBpbnRvIHRoZSBtaWRkbGUgb2YgYSBjaGlsZCwgY2FsbCB0aHJvdWdoXG4gICAgICAgIGlmIChvZmZzZXQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbltpXS5kb21Gcm9tUG9zKG9mZnNldCAtIHRoaXMuY2hpbGRyZW5baV0uYm9yZGVyLCBzaWRlKTtcbiAgICAgICAgLy8gR28gYmFjayBpZiB0aGVyZSB3ZXJlIGFueSB6ZXJvLWxlbmd0aCB3aWRnZXRzIHdpdGggc2lkZSA+PSAwIGJlZm9yZSB0aGlzIHBvaW50XG4gICAgICAgIGZvciAobGV0IHByZXY7IGkgJiYgIShwcmV2ID0gdGhpcy5jaGlsZHJlbltpIC0gMV0pLnNpemUgJiYgcHJldiBpbnN0YW5jZW9mIFdpZGdldFZpZXdEZXNjICYmIHByZXYuc2lkZSA+PSAwOyBpLS0pIHsgfVxuICAgICAgICAvLyBTY2FuIHRvd2FyZHMgdGhlIGZpcnN0IHVzZWFibGUgbm9kZVxuICAgICAgICBpZiAoc2lkZSA8PSAwKSB7XG4gICAgICAgICAgICBsZXQgcHJldiwgZW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgZm9yICg7OyBpLS0sIGVudGVyID0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwcmV2ID0gaSA/IHRoaXMuY2hpbGRyZW5baSAtIDFdIDogbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoIXByZXYgfHwgcHJldi5kb20ucGFyZW50Tm9kZSA9PSB0aGlzLmNvbnRlbnRET00pXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXYgJiYgc2lkZSAmJiBlbnRlciAmJiAhcHJldi5ib3JkZXIgJiYgIXByZXYuZG9tQXRvbSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldi5kb21Gcm9tUG9zKHByZXYuc2l6ZSwgc2lkZSk7XG4gICAgICAgICAgICByZXR1cm4geyBub2RlOiB0aGlzLmNvbnRlbnRET00sIG9mZnNldDogcHJldiA/IGRvbUluZGV4KHByZXYuZG9tKSArIDEgOiAwIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgbmV4dCwgZW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgZm9yICg7OyBpKyssIGVudGVyID0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBuZXh0ID0gaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoID8gdGhpcy5jaGlsZHJlbltpXSA6IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0IHx8IG5leHQuZG9tLnBhcmVudE5vZGUgPT0gdGhpcy5jb250ZW50RE9NKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0ICYmIGVudGVyICYmICFuZXh0LmJvcmRlciAmJiAhbmV4dC5kb21BdG9tKVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0LmRvbUZyb21Qb3MoMCwgc2lkZSk7XG4gICAgICAgICAgICByZXR1cm4geyBub2RlOiB0aGlzLmNvbnRlbnRET00sIG9mZnNldDogbmV4dCA/IGRvbUluZGV4KG5leHQuZG9tKSA6IHRoaXMuY29udGVudERPTS5jaGlsZE5vZGVzLmxlbmd0aCB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFVzZWQgdG8gZmluZCBhIERPTSByYW5nZSBpbiBhIHNpbmdsZSBwYXJlbnQgZm9yIGEgZ2l2ZW4gY2hhbmdlZFxuICAgIC8vIHJhbmdlLlxuICAgIHBhcnNlUmFuZ2UoZnJvbSwgdG8sIGJhc2UgPSAwKSB7XG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHsgbm9kZTogdGhpcy5jb250ZW50RE9NLCBmcm9tLCB0bywgZnJvbU9mZnNldDogMCwgdG9PZmZzZXQ6IHRoaXMuY29udGVudERPTS5jaGlsZE5vZGVzLmxlbmd0aCB9O1xuICAgICAgICBsZXQgZnJvbU9mZnNldCA9IC0xLCB0b09mZnNldCA9IC0xO1xuICAgICAgICBmb3IgKGxldCBvZmZzZXQgPSBiYXNlLCBpID0gMDs7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgZW5kID0gb2Zmc2V0ICsgY2hpbGQuc2l6ZTtcbiAgICAgICAgICAgIGlmIChmcm9tT2Zmc2V0ID09IC0xICYmIGZyb20gPD0gZW5kKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkQmFzZSA9IG9mZnNldCArIGNoaWxkLmJvcmRlcjtcbiAgICAgICAgICAgICAgICAvLyBGSVhNRSBtYXliZSBkZXNjZW5kIG1hcmsgdmlld3MgdG8gcGFyc2UgYSBuYXJyb3dlciByYW5nZT9cbiAgICAgICAgICAgICAgICBpZiAoZnJvbSA+PSBjaGlsZEJhc2UgJiYgdG8gPD0gZW5kIC0gY2hpbGQuYm9yZGVyICYmIGNoaWxkLm5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuY29udGVudERPTSAmJiB0aGlzLmNvbnRlbnRET00uY29udGFpbnMoY2hpbGQuY29udGVudERPTSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZC5wYXJzZVJhbmdlKGZyb20sIHRvLCBjaGlsZEJhc2UpO1xuICAgICAgICAgICAgICAgIGZyb20gPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IGk7IGogPiAwOyBqLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHByZXYgPSB0aGlzLmNoaWxkcmVuW2ogLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXYuc2l6ZSAmJiBwcmV2LmRvbS5wYXJlbnROb2RlID09IHRoaXMuY29udGVudERPTSAmJiAhcHJldi5lbXB0eUNoaWxkQXQoMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb21PZmZzZXQgPSBkb21JbmRleChwcmV2LmRvbSkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnJvbSAtPSBwcmV2LnNpemU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmcm9tT2Zmc2V0ID09IC0xKVxuICAgICAgICAgICAgICAgICAgICBmcm9tT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmcm9tT2Zmc2V0ID4gLTEgJiYgKGVuZCA+IHRvIHx8IGkgPT0gdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxKSkge1xuICAgICAgICAgICAgICAgIHRvID0gZW5kO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQgPSB0aGlzLmNoaWxkcmVuW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dC5zaXplICYmIG5leHQuZG9tLnBhcmVudE5vZGUgPT0gdGhpcy5jb250ZW50RE9NICYmICFuZXh0LmVtcHR5Q2hpbGRBdCgtMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvT2Zmc2V0ID0gZG9tSW5kZXgobmV4dC5kb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdG8gKz0gbmV4dC5zaXplO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodG9PZmZzZXQgPT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIHRvT2Zmc2V0ID0gdGhpcy5jb250ZW50RE9NLmNoaWxkTm9kZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0ID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IG5vZGU6IHRoaXMuY29udGVudERPTSwgZnJvbSwgdG8sIGZyb21PZmZzZXQsIHRvT2Zmc2V0IH07XG4gICAgfVxuICAgIGVtcHR5Q2hpbGRBdChzaWRlKSB7XG4gICAgICAgIGlmICh0aGlzLmJvcmRlciB8fCAhdGhpcy5jb250ZW50RE9NIHx8ICF0aGlzLmNoaWxkcmVuLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltzaWRlIDwgMCA/IDAgOiB0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gY2hpbGQuc2l6ZSA9PSAwIHx8IGNoaWxkLmVtcHR5Q2hpbGRBdChzaWRlKTtcbiAgICB9XG4gICAgZG9tQWZ0ZXJQb3MocG9zKSB7XG4gICAgICAgIGxldCB7IG5vZGUsIG9mZnNldCB9ID0gdGhpcy5kb21Gcm9tUG9zKHBvcywgMCk7XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9IDEgfHwgb2Zmc2V0ID09IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk5vIG5vZGUgYWZ0ZXIgcG9zIFwiICsgcG9zKTtcbiAgICAgICAgcmV0dXJuIG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdO1xuICAgIH1cbiAgICAvLyBWaWV3IGRlc2NzIGFyZSByZXNwb25zaWJsZSBmb3Igc2V0dGluZyBhbnkgc2VsZWN0aW9uIHRoYXQgZmFsbHNcbiAgICAvLyBlbnRpcmVseSBpbnNpZGUgb2YgdGhlbSwgc28gdGhhdCBjdXN0b20gaW1wbGVtZW50YXRpb25zIGNhbiBkb1xuICAgIC8vIGN1c3RvbSB0aGluZ3Mgd2l0aCB0aGUgc2VsZWN0aW9uLiBOb3RlIHRoYXQgdGhpcyBmYWxscyBhcGFydCB3aGVuXG4gICAgLy8gYSBzZWxlY3Rpb24gc3RhcnRzIGluIHN1Y2ggYSBub2RlIGFuZCBlbmRzIGluIGFub3RoZXIsIGluIHdoaWNoXG4gICAgLy8gY2FzZSB3ZSBqdXN0IHVzZSB3aGF0ZXZlciBkb21Gcm9tUG9zIHByb2R1Y2VzIGFzIGEgYmVzdCBlZmZvcnQuXG4gICAgc2V0U2VsZWN0aW9uKGFuY2hvciwgaGVhZCwgdmlldywgZm9yY2UgPSBmYWxzZSkge1xuICAgICAgICAvLyBJZiB0aGUgc2VsZWN0aW9uIGZhbGxzIGVudGlyZWx5IGluIGEgY2hpbGQsIGdpdmUgaXQgdG8gdGhhdCBjaGlsZFxuICAgICAgICBsZXQgZnJvbSA9IE1hdGgubWluKGFuY2hvciwgaGVhZCksIHRvID0gTWF0aC5tYXgoYW5jaG9yLCBoZWFkKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIG9mZnNldCA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldLCBlbmQgPSBvZmZzZXQgKyBjaGlsZC5zaXplO1xuICAgICAgICAgICAgaWYgKGZyb20gPiBvZmZzZXQgJiYgdG8gPCBlbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkLnNldFNlbGVjdGlvbihhbmNob3IgLSBvZmZzZXQgLSBjaGlsZC5ib3JkZXIsIGhlYWQgLSBvZmZzZXQgLSBjaGlsZC5ib3JkZXIsIHZpZXcsIGZvcmNlKTtcbiAgICAgICAgICAgIG9mZnNldCA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYW5jaG9yRE9NID0gdGhpcy5kb21Gcm9tUG9zKGFuY2hvciwgYW5jaG9yID8gLTEgOiAxKTtcbiAgICAgICAgbGV0IGhlYWRET00gPSBoZWFkID09IGFuY2hvciA/IGFuY2hvckRPTSA6IHRoaXMuZG9tRnJvbVBvcyhoZWFkLCBoZWFkID8gLTEgOiAxKTtcbiAgICAgICAgbGV0IGRvbVNlbCA9IHZpZXcucm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgbGV0IHNlbFJhbmdlID0gdmlldy5kb21TZWxlY3Rpb25SYW5nZSgpO1xuICAgICAgICBsZXQgYnJLbHVkZ2UgPSBmYWxzZTtcbiAgICAgICAgLy8gT24gRmlyZWZveCwgdXNpbmcgU2VsZWN0aW9uLmNvbGxhcHNlIHRvIHB1dCB0aGUgY3Vyc29yIGFmdGVyIGFcbiAgICAgICAgLy8gQlIgbm9kZSBmb3Igc29tZSByZWFzb24gZG9lc24ndCBhbHdheXMgd29yayAoIzEwNzMpLiBPbiBTYWZhcmksXG4gICAgICAgIC8vIHRoZSBjdXJzb3Igc29tZXRpbWVzIGluZXhwbGljYWJsZSB2aXN1YWxseSBsYWdzIGJlaGluZCBpdHNcbiAgICAgICAgLy8gcmVwb3J0ZWQgcG9zaXRpb24gaW4gc3VjaCBzaXR1YXRpb25zICgjMTA5MikuXG4gICAgICAgIGlmICgoZ2Vja28gfHwgc2FmYXJpKSAmJiBhbmNob3IgPT0gaGVhZCkge1xuICAgICAgICAgICAgbGV0IHsgbm9kZSwgb2Zmc2V0IH0gPSBhbmNob3JET007XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzKSB7XG4gICAgICAgICAgICAgICAgYnJLbHVkZ2UgPSAhIShvZmZzZXQgJiYgbm9kZS5ub2RlVmFsdWVbb2Zmc2V0IC0gMV0gPT0gXCJcXG5cIik7XG4gICAgICAgICAgICAgICAgLy8gSXNzdWUgIzExMjhcbiAgICAgICAgICAgICAgICBpZiAoYnJLbHVkZ2UgJiYgb2Zmc2V0ID09IG5vZGUubm9kZVZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBzY2FuID0gbm9kZSwgYWZ0ZXI7IHNjYW47IHNjYW4gPSBzY2FuLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZnRlciA9IHNjYW4ubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZ0ZXIubm9kZU5hbWUgPT0gXCJCUlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JET00gPSBoZWFkRE9NID0geyBub2RlOiBhZnRlci5wYXJlbnROb2RlLCBvZmZzZXQ6IGRvbUluZGV4KGFmdGVyKSArIDEgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkZXNjID0gc2Nhbi5wbVZpZXdEZXNjO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlc2MgJiYgZGVzYy5ub2RlICYmIGRlc2Mubm9kZS5pc0Jsb2NrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHByZXYgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0IC0gMV07XG4gICAgICAgICAgICAgICAgYnJLbHVkZ2UgPSBwcmV2ICYmIChwcmV2Lm5vZGVOYW1lID09IFwiQlJcIiB8fCBwcmV2LmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEZpcmVmb3ggY2FuIGFjdCBzdHJhbmdlbHkgd2hlbiB0aGUgc2VsZWN0aW9uIGlzIGluIGZyb250IG9mIGFuXG4gICAgICAgIC8vIHVuZWRpdGFibGUgbm9kZS4gU2VlICMxMTYzIGFuZCBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNzA5NTM2XG4gICAgICAgIGlmIChnZWNrbyAmJiBzZWxSYW5nZS5mb2N1c05vZGUgJiYgc2VsUmFuZ2UuZm9jdXNOb2RlICE9IGhlYWRET00ubm9kZSAmJiBzZWxSYW5nZS5mb2N1c05vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgbGV0IGFmdGVyID0gc2VsUmFuZ2UuZm9jdXNOb2RlLmNoaWxkTm9kZXNbc2VsUmFuZ2UuZm9jdXNPZmZzZXRdO1xuICAgICAgICAgICAgaWYgKGFmdGVyICYmIGFmdGVyLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpXG4gICAgICAgICAgICAgICAgZm9yY2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGZvcmNlIHx8IGJyS2x1ZGdlICYmIHNhZmFyaSkgJiZcbiAgICAgICAgICAgIGlzRXF1aXZhbGVudFBvc2l0aW9uKGFuY2hvckRPTS5ub2RlLCBhbmNob3JET00ub2Zmc2V0LCBzZWxSYW5nZS5hbmNob3JOb2RlLCBzZWxSYW5nZS5hbmNob3JPZmZzZXQpICYmXG4gICAgICAgICAgICBpc0VxdWl2YWxlbnRQb3NpdGlvbihoZWFkRE9NLm5vZGUsIGhlYWRET00ub2Zmc2V0LCBzZWxSYW5nZS5mb2N1c05vZGUsIHNlbFJhbmdlLmZvY3VzT2Zmc2V0KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gU2VsZWN0aW9uLmV4dGVuZCBjYW4gYmUgdXNlZCB0byBjcmVhdGUgYW4gJ2ludmVydGVkJyBzZWxlY3Rpb25cbiAgICAgICAgLy8gKG9uZSB3aGVyZSB0aGUgZm9jdXMgaXMgYmVmb3JlIHRoZSBhbmNob3IpLCBidXQgbm90IGFsbFxuICAgICAgICAvLyBicm93c2VycyBzdXBwb3J0IGl0IHlldC5cbiAgICAgICAgbGV0IGRvbVNlbEV4dGVuZGVkID0gZmFsc2U7XG4gICAgICAgIGlmICgoZG9tU2VsLmV4dGVuZCB8fCBhbmNob3IgPT0gaGVhZCkgJiYgIWJyS2x1ZGdlKSB7XG4gICAgICAgICAgICBkb21TZWwuY29sbGFwc2UoYW5jaG9yRE9NLm5vZGUsIGFuY2hvckRPTS5vZmZzZXQpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yICE9IGhlYWQpXG4gICAgICAgICAgICAgICAgICAgIGRvbVNlbC5leHRlbmQoaGVhZERPTS5ub2RlLCBoZWFkRE9NLm9mZnNldCk7XG4gICAgICAgICAgICAgICAgZG9tU2VsRXh0ZW5kZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBzb21lIGNhc2VzIHdpdGggQ2hyb21lIHRoZSBzZWxlY3Rpb24gaXMgZW1wdHkgYWZ0ZXIgY2FsbGluZ1xuICAgICAgICAgICAgICAgIC8vIGNvbGxhcHNlLCBldmVuIHdoZW4gaXQgc2hvdWxkIGJlIHZhbGlkLiBUaGlzIGFwcGVhcnMgdG8gYmUgYSBidWcsIGJ1dFxuICAgICAgICAgICAgICAgIC8vIGl0IGlzIGRpZmZpY3VsdCB0byBpc29sYXRlLiBJZiB0aGlzIGhhcHBlbnMgZmFsbGJhY2sgdG8gdGhlIG9sZCBwYXRoXG4gICAgICAgICAgICAgICAgLy8gd2l0aG91dCB1c2luZyBleHRlbmQuXG4gICAgICAgICAgICAgICAgLy8gU2ltaWxhcmx5LCB0aGlzIGNvdWxkIGNyYXNoIG9uIFNhZmFyaSBpZiB0aGUgZWRpdG9yIGlzIGhpZGRlbiwgYW5kXG4gICAgICAgICAgICAgICAgLy8gdGhlcmUgd2FzIG5vIHNlbGVjdGlvbi5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRvbVNlbEV4dGVuZGVkKSB7XG4gICAgICAgICAgICBpZiAoYW5jaG9yID4gaGVhZCkge1xuICAgICAgICAgICAgICAgIGxldCB0bXAgPSBhbmNob3JET007XG4gICAgICAgICAgICAgICAgYW5jaG9yRE9NID0gaGVhZERPTTtcbiAgICAgICAgICAgICAgICBoZWFkRE9NID0gdG1wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgICAgIHJhbmdlLnNldEVuZChoZWFkRE9NLm5vZGUsIGhlYWRET00ub2Zmc2V0KTtcbiAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KGFuY2hvckRPTS5ub2RlLCBhbmNob3JET00ub2Zmc2V0KTtcbiAgICAgICAgICAgIGRvbVNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICAgICAgICAgIGRvbVNlbC5hZGRSYW5nZShyYW5nZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWdub3JlTXV0YXRpb24obXV0YXRpb24pIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmNvbnRlbnRET00gJiYgbXV0YXRpb24udHlwZSAhPSBcInNlbGVjdGlvblwiO1xuICAgIH1cbiAgICBnZXQgY29udGVudExvc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRET00gJiYgdGhpcy5jb250ZW50RE9NICE9IHRoaXMuZG9tICYmICF0aGlzLmRvbS5jb250YWlucyh0aGlzLmNvbnRlbnRET00pO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgYSBzdWJ0cmVlIG9mIHRoZSBlbGVtZW50IHRyZWUgdGhhdCBoYXMgYmVlbiB0b3VjaGVkXG4gICAgLy8gYnkgYSBET00gY2hhbmdlLCBzbyB0aGF0IHRoZSBuZXh0IHVwZGF0ZSB3aWxsIHJlZHJhdyBpdC5cbiAgICBtYXJrRGlydHkoZnJvbSwgdG8pIHtcbiAgICAgICAgZm9yIChsZXQgb2Zmc2V0ID0gMCwgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldLCBlbmQgPSBvZmZzZXQgKyBjaGlsZC5zaXplO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA9PSBlbmQgPyBmcm9tIDw9IGVuZCAmJiB0byA+PSBvZmZzZXQgOiBmcm9tIDwgZW5kICYmIHRvID4gb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0SW5zaWRlID0gb2Zmc2V0ICsgY2hpbGQuYm9yZGVyLCBlbmRJbnNpZGUgPSBlbmQgLSBjaGlsZC5ib3JkZXI7XG4gICAgICAgICAgICAgICAgaWYgKGZyb20gPj0gc3RhcnRJbnNpZGUgJiYgdG8gPD0gZW5kSW5zaWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmcm9tID09IG9mZnNldCB8fCB0byA9PSBlbmQgPyBDT05URU5UX0RJUlRZIDogQ0hJTERfRElSVFk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcm9tID09IHN0YXJ0SW5zaWRlICYmIHRvID09IGVuZEluc2lkZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKGNoaWxkLmNvbnRlbnRMb3N0IHx8IGNoaWxkLmRvbS5wYXJlbnROb2RlICE9IHRoaXMuY29udGVudERPTSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5kaXJ0eSA9IE5PREVfRElSVFk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLm1hcmtEaXJ0eShmcm9tIC0gc3RhcnRJbnNpZGUsIHRvIC0gc3RhcnRJbnNpZGUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC5kaXJ0eSA9IGNoaWxkLmRvbSA9PSBjaGlsZC5jb250ZW50RE9NICYmIGNoaWxkLmRvbS5wYXJlbnROb2RlID09IHRoaXMuY29udGVudERPTSAmJiAhY2hpbGQuY2hpbGRyZW4ubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICA/IENPTlRFTlRfRElSVFkgOiBOT0RFX0RJUlRZO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldCA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpcnR5ID0gQ09OVEVOVF9ESVJUWTtcbiAgICB9XG4gICAgbWFya1BhcmVudHNEaXJ0eSgpIHtcbiAgICAgICAgbGV0IGxldmVsID0gMTtcbiAgICAgICAgZm9yIChsZXQgbm9kZSA9IHRoaXMucGFyZW50OyBub2RlOyBub2RlID0gbm9kZS5wYXJlbnQsIGxldmVsKyspIHtcbiAgICAgICAgICAgIGxldCBkaXJ0eSA9IGxldmVsID09IDEgPyBDT05URU5UX0RJUlRZIDogQ0hJTERfRElSVFk7XG4gICAgICAgICAgICBpZiAobm9kZS5kaXJ0eSA8IGRpcnR5KVxuICAgICAgICAgICAgICAgIG5vZGUuZGlydHkgPSBkaXJ0eTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZG9tQXRvbSgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgZ2V0IGlnbm9yZUZvckNvb3JkcygpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgaXNUZXh0KHRleHQpIHsgcmV0dXJuIGZhbHNlOyB9XG59XG4vLyBBIHdpZGdldCBkZXNjIHJlcHJlc2VudHMgYSB3aWRnZXQgZGVjb3JhdGlvbiwgd2hpY2ggaXMgYSBET00gbm9kZVxuLy8gZHJhd24gYmV0d2VlbiB0aGUgZG9jdW1lbnQgbm9kZXMuXG5jbGFzcyBXaWRnZXRWaWV3RGVzYyBleHRlbmRzIFZpZXdEZXNjIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIHdpZGdldCwgdmlldywgcG9zKSB7XG4gICAgICAgIGxldCBzZWxmLCBkb20gPSB3aWRnZXQudHlwZS50b0RPTTtcbiAgICAgICAgaWYgKHR5cGVvZiBkb20gPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgZG9tID0gZG9tKHZpZXcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYucGFyZW50KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5wYXJlbnQucG9zQmVmb3JlQ2hpbGQoc2VsZik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF3aWRnZXQudHlwZS5zcGVjLnJhdykge1xuICAgICAgICAgICAgaWYgKGRvbS5ub2RlVHlwZSAhPSAxKSB7XG4gICAgICAgICAgICAgICAgbGV0IHdyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgICAgICAgICAgICB3cmFwLmFwcGVuZENoaWxkKGRvbSk7XG4gICAgICAgICAgICAgICAgZG9tID0gd3JhcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbS5jb250ZW50RWRpdGFibGUgPSBcImZhbHNlXCI7XG4gICAgICAgICAgICBkb20uY2xhc3NMaXN0LmFkZChcIlByb3NlTWlycm9yLXdpZGdldFwiKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihwYXJlbnQsIFtdLCBkb20sIG51bGwpO1xuICAgICAgICB0aGlzLndpZGdldCA9IHdpZGdldDtcbiAgICAgICAgdGhpcy53aWRnZXQgPSB3aWRnZXQ7XG4gICAgICAgIHNlbGYgPSB0aGlzO1xuICAgIH1cbiAgICBtYXRjaGVzV2lkZ2V0KHdpZGdldCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJ0eSA9PSBOT1RfRElSVFkgJiYgd2lkZ2V0LnR5cGUuZXEodGhpcy53aWRnZXQudHlwZSk7XG4gICAgfVxuICAgIHBhcnNlUnVsZSgpIHsgcmV0dXJuIHsgaWdub3JlOiB0cnVlIH07IH1cbiAgICBzdG9wRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgbGV0IHN0b3AgPSB0aGlzLndpZGdldC5zcGVjLnN0b3BFdmVudDtcbiAgICAgICAgcmV0dXJuIHN0b3AgPyBzdG9wKGV2ZW50KSA6IGZhbHNlO1xuICAgIH1cbiAgICBpZ25vcmVNdXRhdGlvbihtdXRhdGlvbikge1xuICAgICAgICByZXR1cm4gbXV0YXRpb24udHlwZSAhPSBcInNlbGVjdGlvblwiIHx8IHRoaXMud2lkZ2V0LnNwZWMuaWdub3JlU2VsZWN0aW9uO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLndpZGdldC50eXBlLmRlc3Ryb3kodGhpcy5kb20pO1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgfVxuICAgIGdldCBkb21BdG9tKCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIGdldCBzaWRlKCkgeyByZXR1cm4gdGhpcy53aWRnZXQudHlwZS5zaWRlOyB9XG59XG5jbGFzcyBDb21wb3NpdGlvblZpZXdEZXNjIGV4dGVuZHMgVmlld0Rlc2Mge1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudCwgZG9tLCB0ZXh0RE9NLCB0ZXh0KSB7XG4gICAgICAgIHN1cGVyKHBhcmVudCwgW10sIGRvbSwgbnVsbCk7XG4gICAgICAgIHRoaXMudGV4dERPTSA9IHRleHRET007XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgfVxuICAgIGdldCBzaXplKCkgeyByZXR1cm4gdGhpcy50ZXh0Lmxlbmd0aDsgfVxuICAgIGxvY2FsUG9zRnJvbURPTShkb20sIG9mZnNldCkge1xuICAgICAgICBpZiAoZG9tICE9IHRoaXMudGV4dERPTSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvc0F0U3RhcnQgKyAob2Zmc2V0ID8gdGhpcy5zaXplIDogMCk7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc0F0U3RhcnQgKyBvZmZzZXQ7XG4gICAgfVxuICAgIGRvbUZyb21Qb3MocG9zKSB7XG4gICAgICAgIHJldHVybiB7IG5vZGU6IHRoaXMudGV4dERPTSwgb2Zmc2V0OiBwb3MgfTtcbiAgICB9XG4gICAgaWdub3JlTXV0YXRpb24obXV0KSB7XG4gICAgICAgIHJldHVybiBtdXQudHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnICYmIG11dC50YXJnZXQubm9kZVZhbHVlID09IG11dC5vbGRWYWx1ZTtcbiAgICB9XG59XG4vLyBBIG1hcmsgZGVzYyByZXByZXNlbnRzIGEgbWFyay4gTWF5IGhhdmUgbXVsdGlwbGUgY2hpbGRyZW4sXG4vLyBkZXBlbmRpbmcgb24gaG93IHRoZSBtYXJrIGlzIHNwbGl0LiBOb3RlIHRoYXQgbWFya3MgYXJlIGRyYXduIHVzaW5nXG4vLyBhIGZpeGVkIG5lc3Rpbmcgb3JkZXIsIGZvciBzaW1wbGljaXR5IGFuZCBwcmVkaWN0YWJpbGl0eSwgc28gaW5cbi8vIHNvbWUgY2FzZXMgdGhleSB3aWxsIGJlIHNwbGl0IG1vcmUgb2Z0ZW4gdGhhbiB3b3VsZCBhcHBlYXJcbi8vIG5lY2Vzc2FyeS5cbmNsYXNzIE1hcmtWaWV3RGVzYyBleHRlbmRzIFZpZXdEZXNjIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIG1hcmssIGRvbSwgY29udGVudERPTSwgc3BlYykge1xuICAgICAgICBzdXBlcihwYXJlbnQsIFtdLCBkb20sIGNvbnRlbnRET00pO1xuICAgICAgICB0aGlzLm1hcmsgPSBtYXJrO1xuICAgICAgICB0aGlzLnNwZWMgPSBzcGVjO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlKHBhcmVudCwgbWFyaywgaW5saW5lLCB2aWV3KSB7XG4gICAgICAgIGxldCBjdXN0b20gPSB2aWV3Lm5vZGVWaWV3c1ttYXJrLnR5cGUubmFtZV07XG4gICAgICAgIGxldCBzcGVjID0gY3VzdG9tICYmIGN1c3RvbShtYXJrLCB2aWV3LCBpbmxpbmUpO1xuICAgICAgICBpZiAoIXNwZWMgfHwgIXNwZWMuZG9tKVxuICAgICAgICAgICAgc3BlYyA9IERPTVNlcmlhbGl6ZXIucmVuZGVyU3BlYyhkb2N1bWVudCwgbWFyay50eXBlLnNwZWMudG9ET00obWFyaywgaW5saW5lKSwgbnVsbCwgbWFyay5hdHRycyk7XG4gICAgICAgIHJldHVybiBuZXcgTWFya1ZpZXdEZXNjKHBhcmVudCwgbWFyaywgc3BlYy5kb20sIHNwZWMuY29udGVudERPTSB8fCBzcGVjLmRvbSwgc3BlYyk7XG4gICAgfVxuICAgIHBhcnNlUnVsZSgpIHtcbiAgICAgICAgaWYgKCh0aGlzLmRpcnR5ICYgTk9ERV9ESVJUWSkgfHwgdGhpcy5tYXJrLnR5cGUuc3BlYy5yZXBhcnNlSW5WaWV3KVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiB7IG1hcms6IHRoaXMubWFyay50eXBlLm5hbWUsIGF0dHJzOiB0aGlzLm1hcmsuYXR0cnMsIGNvbnRlbnRFbGVtZW50OiB0aGlzLmNvbnRlbnRET00gfTtcbiAgICB9XG4gICAgbWF0Y2hlc01hcmsobWFyaykgeyByZXR1cm4gdGhpcy5kaXJ0eSAhPSBOT0RFX0RJUlRZICYmIHRoaXMubWFyay5lcShtYXJrKTsgfVxuICAgIG1hcmtEaXJ0eShmcm9tLCB0bykge1xuICAgICAgICBzdXBlci5tYXJrRGlydHkoZnJvbSwgdG8pO1xuICAgICAgICAvLyBNb3ZlIGRpcnR5IGluZm8gdG8gbmVhcmVzdCBub2RlIHZpZXdcbiAgICAgICAgaWYgKHRoaXMuZGlydHkgIT0gTk9UX0RJUlRZKSB7XG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgICAgICAgICB3aGlsZSAoIXBhcmVudC5ub2RlKVxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICAgICAgICBpZiAocGFyZW50LmRpcnR5IDwgdGhpcy5kaXJ0eSlcbiAgICAgICAgICAgICAgICBwYXJlbnQuZGlydHkgPSB0aGlzLmRpcnR5O1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IE5PVF9ESVJUWTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzbGljZShmcm9tLCB0bywgdmlldykge1xuICAgICAgICBsZXQgY29weSA9IE1hcmtWaWV3RGVzYy5jcmVhdGUodGhpcy5wYXJlbnQsIHRoaXMubWFyaywgdHJ1ZSwgdmlldyk7XG4gICAgICAgIGxldCBub2RlcyA9IHRoaXMuY2hpbGRyZW4sIHNpemUgPSB0aGlzLnNpemU7XG4gICAgICAgIGlmICh0byA8IHNpemUpXG4gICAgICAgICAgICBub2RlcyA9IHJlcGxhY2VOb2Rlcyhub2RlcywgdG8sIHNpemUsIHZpZXcpO1xuICAgICAgICBpZiAoZnJvbSA+IDApXG4gICAgICAgICAgICBub2RlcyA9IHJlcGxhY2VOb2Rlcyhub2RlcywgMCwgZnJvbSwgdmlldyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBub2Rlc1tpXS5wYXJlbnQgPSBjb3B5O1xuICAgICAgICBjb3B5LmNoaWxkcmVuID0gbm9kZXM7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICBpZ25vcmVNdXRhdGlvbihtdXRhdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGVjLmlnbm9yZU11dGF0aW9uID8gdGhpcy5zcGVjLmlnbm9yZU11dGF0aW9uKG11dGF0aW9uKSA6IHN1cGVyLmlnbm9yZU11dGF0aW9uKG11dGF0aW9uKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3BlYy5kZXN0cm95KVxuICAgICAgICAgICAgdGhpcy5zcGVjLmRlc3Ryb3koKTtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbn1cbi8vIE5vZGUgdmlldyBkZXNjcyBhcmUgdGhlIG1haW4sIG1vc3QgY29tbW9uIHR5cGUgb2YgdmlldyBkZXNjLCBhbmRcbi8vIGNvcnJlc3BvbmQgdG8gYW4gYWN0dWFsIG5vZGUgaW4gdGhlIGRvY3VtZW50LiBVbmxpa2UgbWFyayBkZXNjcyxcbi8vIHRoZXkgcG9wdWxhdGUgdGhlaXIgY2hpbGQgYXJyYXkgdGhlbXNlbHZlcy5cbmNsYXNzIE5vZGVWaWV3RGVzYyBleHRlbmRzIFZpZXdEZXNjIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIGNvbnRlbnRET00sIG5vZGVET00sIHZpZXcsIHBvcykge1xuICAgICAgICBzdXBlcihwYXJlbnQsIFtdLCBkb20sIGNvbnRlbnRET00pO1xuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLm91dGVyRGVjbyA9IG91dGVyRGVjbztcbiAgICAgICAgdGhpcy5pbm5lckRlY28gPSBpbm5lckRlY287XG4gICAgICAgIHRoaXMubm9kZURPTSA9IG5vZGVET007XG4gICAgfVxuICAgIC8vIEJ5IGRlZmF1bHQsIGEgbm9kZSBpcyByZW5kZXJlZCB1c2luZyB0aGUgYHRvRE9NYCBtZXRob2QgZnJvbSB0aGVcbiAgICAvLyBub2RlIHR5cGUgc3BlYy4gQnV0IGNsaWVudCBjb2RlIGNhbiB1c2UgdGhlIGBub2RlVmlld3NgIHNwZWMgdG9cbiAgICAvLyBzdXBwbHkgYSBjdXN0b20gbm9kZSB2aWV3LCB3aGljaCBjYW4gaW5mbHVlbmNlIHZhcmlvdXMgYXNwZWN0cyBvZlxuICAgIC8vIHRoZSB3YXkgdGhlIG5vZGUgd29ya3MuXG4gICAgLy9cbiAgICAvLyAoVXNpbmcgc3ViY2xhc3NpbmcgZm9yIHRoaXMgd2FzIGludGVudGlvbmFsbHkgZGVjaWRlZCBhZ2FpbnN0LFxuICAgIC8vIHNpbmNlIGl0J2QgcmVxdWlyZSBleHBvc2luZyBhIHdob2xlIHNsZXcgb2YgZmluaWNreVxuICAgIC8vIGltcGxlbWVudGF0aW9uIGRldGFpbHMgdG8gdGhlIHVzZXIgY29kZSB0aGF0IHRoZXkgcHJvYmFibHkgd2lsbFxuICAgIC8vIG5ldmVyIG5lZWQuKVxuICAgIHN0YXRpYyBjcmVhdGUocGFyZW50LCBub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldywgcG9zKSB7XG4gICAgICAgIGxldCBjdXN0b20gPSB2aWV3Lm5vZGVWaWV3c1tub2RlLnR5cGUubmFtZV0sIGRlc2NPYmo7XG4gICAgICAgIGxldCBzcGVjID0gY3VzdG9tICYmIGN1c3RvbShub2RlLCB2aWV3LCAoKSA9PiB7XG4gICAgICAgICAgICAvLyAoVGhpcyBpcyBhIGZ1bmN0aW9uIHRoYXQgYWxsb3dzIHRoZSBjdXN0b20gdmlldyB0byBmaW5kIGl0c1xuICAgICAgICAgICAgLy8gb3duIHBvc2l0aW9uKVxuICAgICAgICAgICAgaWYgKCFkZXNjT2JqKVxuICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XG4gICAgICAgICAgICBpZiAoZGVzY09iai5wYXJlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NPYmoucGFyZW50LnBvc0JlZm9yZUNoaWxkKGRlc2NPYmopO1xuICAgICAgICB9LCBvdXRlckRlY28sIGlubmVyRGVjbyk7XG4gICAgICAgIGxldCBkb20gPSBzcGVjICYmIHNwZWMuZG9tLCBjb250ZW50RE9NID0gc3BlYyAmJiBzcGVjLmNvbnRlbnRET007XG4gICAgICAgIGlmIChub2RlLmlzVGV4dCkge1xuICAgICAgICAgICAgaWYgKCFkb20pXG4gICAgICAgICAgICAgICAgZG9tID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobm9kZS50ZXh0KTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGRvbS5ub2RlVHlwZSAhPSAzKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGV4dCBtdXN0IGJlIHJlbmRlcmVkIGFzIGEgRE9NIHRleHQgbm9kZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghZG9tKSB7XG4gICAgICAgICAgICBsZXQgc3BlYyA9IERPTVNlcmlhbGl6ZXIucmVuZGVyU3BlYyhkb2N1bWVudCwgbm9kZS50eXBlLnNwZWMudG9ET00obm9kZSksIG51bGwsIG5vZGUuYXR0cnMpO1xuICAgICAgICAgICAgKHsgZG9tLCBjb250ZW50RE9NIH0gPSBzcGVjKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbnRlbnRET00gJiYgIW5vZGUuaXNUZXh0ICYmIGRvbS5ub2RlTmFtZSAhPSBcIkJSXCIpIHsgLy8gQ2hyb21lIGdldHMgY29uZnVzZWQgYnkgPGJyIGNvbnRlbnRlZGl0YWJsZT1mYWxzZT5cbiAgICAgICAgICAgIGlmICghZG9tLmhhc0F0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiKSlcbiAgICAgICAgICAgICAgICBkb20uY29udGVudEVkaXRhYmxlID0gXCJmYWxzZVwiO1xuICAgICAgICAgICAgaWYgKG5vZGUudHlwZS5zcGVjLmRyYWdnYWJsZSlcbiAgICAgICAgICAgICAgICBkb20uZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbm9kZURPTSA9IGRvbTtcbiAgICAgICAgZG9tID0gYXBwbHlPdXRlckRlY28oZG9tLCBvdXRlckRlY28sIG5vZGUpO1xuICAgICAgICBpZiAoc3BlYylcbiAgICAgICAgICAgIHJldHVybiBkZXNjT2JqID0gbmV3IEN1c3RvbU5vZGVWaWV3RGVzYyhwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIGNvbnRlbnRET00gfHwgbnVsbCwgbm9kZURPTSwgc3BlYywgdmlldywgcG9zICsgMSk7XG4gICAgICAgIGVsc2UgaWYgKG5vZGUuaXNUZXh0KVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0Vmlld0Rlc2MocGFyZW50LCBub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgZG9tLCBub2RlRE9NLCB2aWV3KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb2RlVmlld0Rlc2MocGFyZW50LCBub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgZG9tLCBjb250ZW50RE9NIHx8IG51bGwsIG5vZGVET00sIHZpZXcsIHBvcyArIDEpO1xuICAgIH1cbiAgICBwYXJzZVJ1bGUoKSB7XG4gICAgICAgIC8vIEV4cGVyaW1lbnRhbCBrbHVkZ2UgdG8gYWxsb3cgb3B0LWluIHJlLXBhcnNpbmcgb2Ygbm9kZXNcbiAgICAgICAgaWYgKHRoaXMubm9kZS50eXBlLnNwZWMucmVwYXJzZUluVmlldylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAvLyBGSVhNRSB0aGUgYXNzdW1wdGlvbiB0aGF0IHRoaXMgY2FuIGFsd2F5cyByZXR1cm4gdGhlIGN1cnJlbnRcbiAgICAgICAgLy8gYXR0cnMgbWVhbnMgdGhhdCBpZiB0aGUgdXNlciBzb21laG93IG1hbmFnZXMgdG8gY2hhbmdlIHRoZVxuICAgICAgICAvLyBhdHRycyBpbiB0aGUgZG9tLCB0aGF0IHdvbid0IGJlIHBpY2tlZCB1cC4gTm90IGVudGlyZWx5IHN1cmVcbiAgICAgICAgLy8gd2hldGhlciB0aGlzIGlzIGEgcHJvYmxlbVxuICAgICAgICBsZXQgcnVsZSA9IHsgbm9kZTogdGhpcy5ub2RlLnR5cGUubmFtZSwgYXR0cnM6IHRoaXMubm9kZS5hdHRycyB9O1xuICAgICAgICBpZiAodGhpcy5ub2RlLnR5cGUud2hpdGVzcGFjZSA9PSBcInByZVwiKVxuICAgICAgICAgICAgcnVsZS5wcmVzZXJ2ZVdoaXRlc3BhY2UgPSBcImZ1bGxcIjtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRlbnRET00pIHtcbiAgICAgICAgICAgIHJ1bGUuZ2V0Q29udGVudCA9ICgpID0+IHRoaXMubm9kZS5jb250ZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLmNvbnRlbnRMb3N0KSB7XG4gICAgICAgICAgICBydWxlLmNvbnRlbnRFbGVtZW50ID0gdGhpcy5jb250ZW50RE9NO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQ2hyb21lIGxpa2VzIHRvIHJhbmRvbWx5IHJlY3JlYXRlIHBhcmVudCBub2RlcyB3aGVuXG4gICAgICAgICAgICAvLyBiYWNrc3BhY2luZyB0aGluZ3MuIFdoZW4gdGhhdCBoYXBwZW5zLCB0aGlzIHRyaWVzIHRvIGZpbmQgdGhlXG4gICAgICAgICAgICAvLyBuZXcgcGFyZW50LlxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvbS5jb250YWlucyhjaGlsZC5kb20ucGFyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5jb250ZW50RWxlbWVudCA9IGNoaWxkLmRvbS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJ1bGUuY29udGVudEVsZW1lbnQpXG4gICAgICAgICAgICAgICAgcnVsZS5nZXRDb250ZW50ID0gKCkgPT4gRnJhZ21lbnQuZW1wdHk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfVxuICAgIG1hdGNoZXNOb2RlKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpcnR5ID09IE5PVF9ESVJUWSAmJiBub2RlLmVxKHRoaXMubm9kZSkgJiZcbiAgICAgICAgICAgIHNhbWVPdXRlckRlY28ob3V0ZXJEZWNvLCB0aGlzLm91dGVyRGVjbykgJiYgaW5uZXJEZWNvLmVxKHRoaXMuaW5uZXJEZWNvKTtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7IHJldHVybiB0aGlzLm5vZGUubm9kZVNpemU7IH1cbiAgICBnZXQgYm9yZGVyKCkgeyByZXR1cm4gdGhpcy5ub2RlLmlzTGVhZiA/IDAgOiAxOyB9XG4gICAgLy8gU3luY3MgYHRoaXMuY2hpbGRyZW5gIHRvIG1hdGNoIGB0aGlzLm5vZGUuY29udGVudGAgYW5kIHRoZSBsb2NhbFxuICAgIC8vIGRlY29yYXRpb25zLCBwb3NzaWJseSBpbnRyb2R1Y2luZyBuZXN0aW5nIGZvciBtYXJrcy4gVGhlbiwgaW4gYVxuICAgIC8vIHNlcGFyYXRlIHN0ZXAsIHN5bmNzIHRoZSBET00gaW5zaWRlIGB0aGlzLmNvbnRlbnRET01gIHRvXG4gICAgLy8gYHRoaXMuY2hpbGRyZW5gLlxuICAgIHVwZGF0ZUNoaWxkcmVuKHZpZXcsIHBvcykge1xuICAgICAgICBsZXQgaW5saW5lID0gdGhpcy5ub2RlLmlubGluZUNvbnRlbnQsIG9mZiA9IHBvcztcbiAgICAgICAgbGV0IGNvbXBvc2l0aW9uID0gdmlldy5jb21wb3NpbmcgPyB0aGlzLmxvY2FsQ29tcG9zaXRpb25JbmZvKHZpZXcsIHBvcykgOiBudWxsO1xuICAgICAgICBsZXQgbG9jYWxDb21wb3NpdGlvbiA9IGNvbXBvc2l0aW9uICYmIGNvbXBvc2l0aW9uLnBvcyA+IC0xID8gY29tcG9zaXRpb24gOiBudWxsO1xuICAgICAgICBsZXQgY29tcG9zaXRpb25JbkNoaWxkID0gY29tcG9zaXRpb24gJiYgY29tcG9zaXRpb24ucG9zIDwgMDtcbiAgICAgICAgbGV0IHVwZGF0ZXIgPSBuZXcgVmlld1RyZWVVcGRhdGVyKHRoaXMsIGxvY2FsQ29tcG9zaXRpb24gJiYgbG9jYWxDb21wb3NpdGlvbi5ub2RlLCB2aWV3KTtcbiAgICAgICAgaXRlckRlY28odGhpcy5ub2RlLCB0aGlzLmlubmVyRGVjbywgKHdpZGdldCwgaSwgaW5zaWRlTm9kZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHdpZGdldC5zcGVjLm1hcmtzKVxuICAgICAgICAgICAgICAgIHVwZGF0ZXIuc3luY1RvTWFya3Mod2lkZ2V0LnNwZWMubWFya3MsIGlubGluZSwgdmlldyk7XG4gICAgICAgICAgICBlbHNlIGlmICh3aWRnZXQudHlwZS5zaWRlID49IDAgJiYgIWluc2lkZU5vZGUpXG4gICAgICAgICAgICAgICAgdXBkYXRlci5zeW5jVG9NYXJrcyhpID09IHRoaXMubm9kZS5jaGlsZENvdW50ID8gTWFyay5ub25lIDogdGhpcy5ub2RlLmNoaWxkKGkpLm1hcmtzLCBpbmxpbmUsIHZpZXcpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIG5leHQgbm9kZSBpcyBhIGRlc2MgbWF0Y2hpbmcgdGhpcyB3aWRnZXQsIHJldXNlIGl0LFxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGluc2VydCB0aGUgd2lkZ2V0IGFzIGEgbmV3IHZpZXcgZGVzYy5cbiAgICAgICAgICAgIHVwZGF0ZXIucGxhY2VXaWRnZXQod2lkZ2V0LCB2aWV3LCBvZmYpO1xuICAgICAgICB9LCAoY2hpbGQsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBpKSA9PiB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHdyYXBwaW5nIG1hcmsgZGVzY3MgbWF0Y2ggdGhlIG5vZGUncyBtYXJrcy5cbiAgICAgICAgICAgIHVwZGF0ZXIuc3luY1RvTWFya3MoY2hpbGQubWFya3MsIGlubGluZSwgdmlldyk7XG4gICAgICAgICAgICAvLyBUcnkgc2V2ZXJhbCBzdHJhdGVnaWVzIGZvciBkcmF3aW5nIHRoaXMgbm9kZVxuICAgICAgICAgICAgbGV0IGNvbXBJbmRleDtcbiAgICAgICAgICAgIGlmICh1cGRhdGVyLmZpbmROb2RlTWF0Y2goY2hpbGQsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBpKSkgO1xuICAgICAgICAgICAgZWxzZSBpZiAoY29tcG9zaXRpb25JbkNoaWxkICYmIHZpZXcuc3RhdGUuc2VsZWN0aW9uLmZyb20gPiBvZmYgJiZcbiAgICAgICAgICAgICAgICB2aWV3LnN0YXRlLnNlbGVjdGlvbi50byA8IG9mZiArIGNoaWxkLm5vZGVTaXplICYmXG4gICAgICAgICAgICAgICAgKGNvbXBJbmRleCA9IHVwZGF0ZXIuZmluZEluZGV4V2l0aENoaWxkKGNvbXBvc2l0aW9uLm5vZGUpKSA+IC0xICYmXG4gICAgICAgICAgICAgICAgdXBkYXRlci51cGRhdGVOb2RlQXQoY2hpbGQsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBjb21wSW5kZXgsIHZpZXcpKSA7XG4gICAgICAgICAgICBlbHNlIGlmICh1cGRhdGVyLnVwZGF0ZU5leHROb2RlKGNoaWxkLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldywgaSwgb2ZmKSkgO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIGl0IGFzIGEgbmV3IHZpZXdcbiAgICAgICAgICAgICAgICB1cGRhdGVyLmFkZE5vZGUoY2hpbGQsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3LCBvZmYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2ZmICs9IGNoaWxkLm5vZGVTaXplO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gRHJvcCBhbGwgcmVtYWluaW5nIGRlc2NzIGFmdGVyIHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAgICB1cGRhdGVyLnN5bmNUb01hcmtzKFtdLCBpbmxpbmUsIHZpZXcpO1xuICAgICAgICBpZiAodGhpcy5ub2RlLmlzVGV4dGJsb2NrKVxuICAgICAgICAgICAgdXBkYXRlci5hZGRUZXh0YmxvY2tIYWNrcygpO1xuICAgICAgICB1cGRhdGVyLmRlc3Ryb3lSZXN0KCk7XG4gICAgICAgIC8vIFN5bmMgdGhlIERPTSBpZiBhbnl0aGluZyBjaGFuZ2VkXG4gICAgICAgIGlmICh1cGRhdGVyLmNoYW5nZWQgfHwgdGhpcy5kaXJ0eSA9PSBDT05URU5UX0RJUlRZKSB7XG4gICAgICAgICAgICAvLyBNYXkgaGF2ZSB0byBwcm90ZWN0IGZvY3VzZWQgRE9NIGZyb20gYmVpbmcgY2hhbmdlZCBpZiBhIGNvbXBvc2l0aW9uIGlzIGFjdGl2ZVxuICAgICAgICAgICAgaWYgKGxvY2FsQ29tcG9zaXRpb24pXG4gICAgICAgICAgICAgICAgdGhpcy5wcm90ZWN0TG9jYWxDb21wb3NpdGlvbih2aWV3LCBsb2NhbENvbXBvc2l0aW9uKTtcbiAgICAgICAgICAgIHJlbmRlckRlc2NzKHRoaXMuY29udGVudERPTSwgdGhpcy5jaGlsZHJlbiwgdmlldyk7XG4gICAgICAgICAgICBpZiAoaW9zKVxuICAgICAgICAgICAgICAgIGlvc0hhY2tzKHRoaXMuZG9tKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsb2NhbENvbXBvc2l0aW9uSW5mbyh2aWV3LCBwb3MpIHtcbiAgICAgICAgLy8gT25seSBkbyBzb21ldGhpbmcgaWYgYm90aCB0aGUgc2VsZWN0aW9uIGFuZCBhIGZvY3VzZWQgdGV4dCBub2RlXG4gICAgICAgIC8vIGFyZSBpbnNpZGUgb2YgdGhpcyBub2RlXG4gICAgICAgIGxldCB7IGZyb20sIHRvIH0gPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICAgICAgaWYgKCEodmlldy5zdGF0ZS5zZWxlY3Rpb24gaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uKSB8fCBmcm9tIDwgcG9zIHx8IHRvID4gcG9zICsgdGhpcy5ub2RlLmNvbnRlbnQuc2l6ZSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgdGV4dE5vZGUgPSB2aWV3LmlucHV0LmNvbXBvc2l0aW9uTm9kZTtcbiAgICAgICAgaWYgKCF0ZXh0Tm9kZSB8fCAhdGhpcy5kb20uY29udGFpbnModGV4dE5vZGUucGFyZW50Tm9kZSkpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMubm9kZS5pbmxpbmVDb250ZW50KSB7XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSB0ZXh0IGluIHRoZSBmb2N1c2VkIG5vZGUgaW4gdGhlIG5vZGUsIHN0b3AgaWYgaXQncyBub3RcbiAgICAgICAgICAgIC8vIHRoZXJlIChtYXkgaGF2ZSBiZWVuIG1vZGlmaWVkIHRocm91Z2ggb3RoZXIgbWVhbnMsIGluIHdoaWNoXG4gICAgICAgICAgICAvLyBjYXNlIGl0IHNob3VsZCBvdmVyd3JpdHRlbilcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gdGV4dE5vZGUubm9kZVZhbHVlO1xuICAgICAgICAgICAgbGV0IHRleHRQb3MgPSBmaW5kVGV4dEluRnJhZ21lbnQodGhpcy5ub2RlLmNvbnRlbnQsIHRleHQsIGZyb20gLSBwb3MsIHRvIC0gcG9zKTtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0UG9zIDwgMCA/IG51bGwgOiB7IG5vZGU6IHRleHROb2RlLCBwb3M6IHRleHRQb3MsIHRleHQgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IG5vZGU6IHRleHROb2RlLCBwb3M6IC0xLCB0ZXh0OiBcIlwiIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvdGVjdExvY2FsQ29tcG9zaXRpb24odmlldywgeyBub2RlLCBwb3MsIHRleHQgfSkge1xuICAgICAgICAvLyBUaGUgbm9kZSBpcyBhbHJlYWR5IHBhcnQgb2YgYSBsb2NhbCB2aWV3IGRlc2MsIGxlYXZlIGl0IHRoZXJlXG4gICAgICAgIGlmICh0aGlzLmdldERlc2Mobm9kZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIENyZWF0ZSBhIGNvbXBvc2l0aW9uIHZpZXcgZm9yIHRoZSBvcnBoYW5lZCBub2Rlc1xuICAgICAgICBsZXQgdG9wTm9kZSA9IG5vZGU7XG4gICAgICAgIGZvciAoOzsgdG9wTm9kZSA9IHRvcE5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgaWYgKHRvcE5vZGUucGFyZW50Tm9kZSA9PSB0aGlzLmNvbnRlbnRET00pXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB3aGlsZSAodG9wTm9kZS5wcmV2aW91c1NpYmxpbmcpXG4gICAgICAgICAgICAgICAgdG9wTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRvcE5vZGUucHJldmlvdXNTaWJsaW5nKTtcbiAgICAgICAgICAgIHdoaWxlICh0b3BOb2RlLm5leHRTaWJsaW5nKVxuICAgICAgICAgICAgICAgIHRvcE5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0b3BOb2RlLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgIGlmICh0b3BOb2RlLnBtVmlld0Rlc2MpXG4gICAgICAgICAgICAgICAgdG9wTm9kZS5wbVZpZXdEZXNjID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkZXNjID0gbmV3IENvbXBvc2l0aW9uVmlld0Rlc2ModGhpcywgdG9wTm9kZSwgbm9kZSwgdGV4dCk7XG4gICAgICAgIHZpZXcuaW5wdXQuY29tcG9zaXRpb25Ob2Rlcy5wdXNoKGRlc2MpO1xuICAgICAgICAvLyBQYXRjaCB1cCB0aGlzLmNoaWxkcmVuIHRvIGNvbnRhaW4gdGhlIGNvbXBvc2l0aW9uIHZpZXdcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IHJlcGxhY2VOb2Rlcyh0aGlzLmNoaWxkcmVuLCBwb3MsIHBvcyArIHRleHQubGVuZ3RoLCB2aWV3LCBkZXNjKTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyBkZXNjIG11c3QgYmUgdXBkYXRlZCB0byBtYXRjaCB0aGUgZ2l2ZW4gbm9kZSBkZWNvcmF0aW9uLFxuICAgIC8vIGRvIHNvIGFuZCByZXR1cm4gdHJ1ZS5cbiAgICB1cGRhdGUobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlydHkgPT0gTk9ERV9ESVJUWSB8fFxuICAgICAgICAgICAgIW5vZGUuc2FtZU1hcmt1cCh0aGlzLm5vZGUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLnVwZGF0ZUlubmVyKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHVwZGF0ZUlubmVyKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3KSB7XG4gICAgICAgIHRoaXMudXBkYXRlT3V0ZXJEZWNvKG91dGVyRGVjbyk7XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgIHRoaXMuaW5uZXJEZWNvID0gaW5uZXJEZWNvO1xuICAgICAgICBpZiAodGhpcy5jb250ZW50RE9NKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbih2aWV3LCB0aGlzLnBvc0F0U3RhcnQpO1xuICAgICAgICB0aGlzLmRpcnR5ID0gTk9UX0RJUlRZO1xuICAgIH1cbiAgICB1cGRhdGVPdXRlckRlY28ob3V0ZXJEZWNvKSB7XG4gICAgICAgIGlmIChzYW1lT3V0ZXJEZWNvKG91dGVyRGVjbywgdGhpcy5vdXRlckRlY28pKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgbmVlZHNXcmFwID0gdGhpcy5ub2RlRE9NLm5vZGVUeXBlICE9IDE7XG4gICAgICAgIGxldCBvbGRET00gPSB0aGlzLmRvbTtcbiAgICAgICAgdGhpcy5kb20gPSBwYXRjaE91dGVyRGVjbyh0aGlzLmRvbSwgdGhpcy5ub2RlRE9NLCBjb21wdXRlT3V0ZXJEZWNvKHRoaXMub3V0ZXJEZWNvLCB0aGlzLm5vZGUsIG5lZWRzV3JhcCksIGNvbXB1dGVPdXRlckRlY28ob3V0ZXJEZWNvLCB0aGlzLm5vZGUsIG5lZWRzV3JhcCkpO1xuICAgICAgICBpZiAodGhpcy5kb20gIT0gb2xkRE9NKSB7XG4gICAgICAgICAgICBvbGRET00ucG1WaWV3RGVzYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuZG9tLnBtVmlld0Rlc2MgPSB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3V0ZXJEZWNvID0gb3V0ZXJEZWNvO1xuICAgIH1cbiAgICAvLyBNYXJrIHRoaXMgbm9kZSBhcyBiZWluZyB0aGUgc2VsZWN0ZWQgbm9kZS5cbiAgICBzZWxlY3ROb2RlKCkge1xuICAgICAgICBpZiAodGhpcy5ub2RlRE9NLm5vZGVUeXBlID09IDEpXG4gICAgICAgICAgICB0aGlzLm5vZGVET00uY2xhc3NMaXN0LmFkZChcIlByb3NlTWlycm9yLXNlbGVjdGVkbm9kZVwiKTtcbiAgICAgICAgaWYgKHRoaXMuY29udGVudERPTSB8fCAhdGhpcy5ub2RlLnR5cGUuc3BlYy5kcmFnZ2FibGUpXG4gICAgICAgICAgICB0aGlzLmRvbS5kcmFnZ2FibGUgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBSZW1vdmUgc2VsZWN0ZWQgbm9kZSBtYXJraW5nIGZyb20gdGhpcyBub2RlLlxuICAgIGRlc2VsZWN0Tm9kZSgpIHtcbiAgICAgICAgaWYgKHRoaXMubm9kZURPTS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVET00uY2xhc3NMaXN0LnJlbW92ZShcIlByb3NlTWlycm9yLXNlbGVjdGVkbm9kZVwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnRET00gfHwgIXRoaXMubm9kZS50eXBlLnNwZWMuZHJhZ2dhYmxlKVxuICAgICAgICAgICAgICAgIHRoaXMuZG9tLnJlbW92ZUF0dHJpYnV0ZShcImRyYWdnYWJsZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZG9tQXRvbSgpIHsgcmV0dXJuIHRoaXMubm9kZS5pc0F0b207IH1cbn1cbi8vIENyZWF0ZSBhIHZpZXcgZGVzYyBmb3IgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBub2RlLCB0byBiZSBleHBvcnRlZFxuLy8gYW5kIHVzZWQgYnkgdGhlIHZpZXcgY2xhc3MuXG5mdW5jdGlvbiBkb2NWaWV3RGVzYyhkb2MsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIHZpZXcpIHtcbiAgICBhcHBseU91dGVyRGVjbyhkb20sIG91dGVyRGVjbywgZG9jKTtcbiAgICBsZXQgZG9jVmlldyA9IG5ldyBOb2RlVmlld0Rlc2ModW5kZWZpbmVkLCBkb2MsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIGRvbSwgZG9tLCB2aWV3LCAwKTtcbiAgICBpZiAoZG9jVmlldy5jb250ZW50RE9NKVxuICAgICAgICBkb2NWaWV3LnVwZGF0ZUNoaWxkcmVuKHZpZXcsIDApO1xuICAgIHJldHVybiBkb2NWaWV3O1xufVxuY2xhc3MgVGV4dFZpZXdEZXNjIGV4dGVuZHMgTm9kZVZpZXdEZXNjIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIG5vZGVET00sIHZpZXcpIHtcbiAgICAgICAgc3VwZXIocGFyZW50LCBub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgZG9tLCBudWxsLCBub2RlRE9NLCB2aWV3LCAwKTtcbiAgICB9XG4gICAgcGFyc2VSdWxlKCkge1xuICAgICAgICBsZXQgc2tpcCA9IHRoaXMubm9kZURPTS5wYXJlbnROb2RlO1xuICAgICAgICB3aGlsZSAoc2tpcCAmJiBza2lwICE9IHRoaXMuZG9tICYmICFza2lwLnBtSXNEZWNvKVxuICAgICAgICAgICAgc2tpcCA9IHNraXAucGFyZW50Tm9kZTtcbiAgICAgICAgcmV0dXJuIHsgc2tpcDogKHNraXAgfHwgdHJ1ZSkgfTtcbiAgICB9XG4gICAgdXBkYXRlKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3KSB7XG4gICAgICAgIGlmICh0aGlzLmRpcnR5ID09IE5PREVfRElSVFkgfHwgKHRoaXMuZGlydHkgIT0gTk9UX0RJUlRZICYmICF0aGlzLmluUGFyZW50KCkpIHx8XG4gICAgICAgICAgICAhbm9kZS5zYW1lTWFya3VwKHRoaXMubm9kZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMudXBkYXRlT3V0ZXJEZWNvKG91dGVyRGVjbyk7XG4gICAgICAgIGlmICgodGhpcy5kaXJ0eSAhPSBOT1RfRElSVFkgfHwgbm9kZS50ZXh0ICE9IHRoaXMubm9kZS50ZXh0KSAmJiBub2RlLnRleHQgIT0gdGhpcy5ub2RlRE9NLm5vZGVWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5ub2RlRE9NLm5vZGVWYWx1ZSA9IG5vZGUudGV4dDtcbiAgICAgICAgICAgIGlmICh2aWV3LnRyYWNrV3JpdGVzID09IHRoaXMubm9kZURPTSlcbiAgICAgICAgICAgICAgICB2aWV3LnRyYWNrV3JpdGVzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgICAgICB0aGlzLmRpcnR5ID0gTk9UX0RJUlRZO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaW5QYXJlbnQoKSB7XG4gICAgICAgIGxldCBwYXJlbnRET00gPSB0aGlzLnBhcmVudC5jb250ZW50RE9NO1xuICAgICAgICBmb3IgKGxldCBuID0gdGhpcy5ub2RlRE9NOyBuOyBuID0gbi5wYXJlbnROb2RlKVxuICAgICAgICAgICAgaWYgKG4gPT0gcGFyZW50RE9NKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGRvbUZyb21Qb3MocG9zKSB7XG4gICAgICAgIHJldHVybiB7IG5vZGU6IHRoaXMubm9kZURPTSwgb2Zmc2V0OiBwb3MgfTtcbiAgICB9XG4gICAgbG9jYWxQb3NGcm9tRE9NKGRvbSwgb2Zmc2V0LCBiaWFzKSB7XG4gICAgICAgIGlmIChkb20gPT0gdGhpcy5ub2RlRE9NKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zQXRTdGFydCArIE1hdGgubWluKG9mZnNldCwgdGhpcy5ub2RlLnRleHQubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmxvY2FsUG9zRnJvbURPTShkb20sIG9mZnNldCwgYmlhcyk7XG4gICAgfVxuICAgIGlnbm9yZU11dGF0aW9uKG11dGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBtdXRhdGlvbi50eXBlICE9IFwiY2hhcmFjdGVyRGF0YVwiICYmIG11dGF0aW9uLnR5cGUgIT0gXCJzZWxlY3Rpb25cIjtcbiAgICB9XG4gICAgc2xpY2UoZnJvbSwgdG8sIHZpZXcpIHtcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLm5vZGUuY3V0KGZyb20sIHRvKSwgZG9tID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobm9kZS50ZXh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0Vmlld0Rlc2ModGhpcy5wYXJlbnQsIG5vZGUsIHRoaXMub3V0ZXJEZWNvLCB0aGlzLmlubmVyRGVjbywgZG9tLCBkb20sIHZpZXcpO1xuICAgIH1cbiAgICBtYXJrRGlydHkoZnJvbSwgdG8pIHtcbiAgICAgICAgc3VwZXIubWFya0RpcnR5KGZyb20sIHRvKTtcbiAgICAgICAgaWYgKHRoaXMuZG9tICE9IHRoaXMubm9kZURPTSAmJiAoZnJvbSA9PSAwIHx8IHRvID09IHRoaXMubm9kZURPTS5ub2RlVmFsdWUubGVuZ3RoKSlcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSBOT0RFX0RJUlRZO1xuICAgIH1cbiAgICBnZXQgZG9tQXRvbSgpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgaXNUZXh0KHRleHQpIHsgcmV0dXJuIHRoaXMubm9kZS50ZXh0ID09IHRleHQ7IH1cbn1cbi8vIEEgZHVtbXkgZGVzYyB1c2VkIHRvIHRhZyB0cmFpbGluZyBCUiBvciBJTUcgbm9kZXMgY3JlYXRlZCB0byB3b3JrXG4vLyBhcm91bmQgY29udGVudEVkaXRhYmxlIHRlcnJpYmxlbmVzcy5cbmNsYXNzIFRyYWlsaW5nSGFja1ZpZXdEZXNjIGV4dGVuZHMgVmlld0Rlc2Mge1xuICAgIHBhcnNlUnVsZSgpIHsgcmV0dXJuIHsgaWdub3JlOiB0cnVlIH07IH1cbiAgICBtYXRjaGVzSGFjayhub2RlTmFtZSkgeyByZXR1cm4gdGhpcy5kaXJ0eSA9PSBOT1RfRElSVFkgJiYgdGhpcy5kb20ubm9kZU5hbWUgPT0gbm9kZU5hbWU7IH1cbiAgICBnZXQgZG9tQXRvbSgpIHsgcmV0dXJuIHRydWU7IH1cbiAgICBnZXQgaWdub3JlRm9yQ29vcmRzKCkgeyByZXR1cm4gdGhpcy5kb20ubm9kZU5hbWUgPT0gXCJJTUdcIjsgfVxufVxuLy8gQSBzZXBhcmF0ZSBzdWJjbGFzcyBpcyB1c2VkIGZvciBjdXN0b21pemVkIG5vZGUgdmlld3MsIHNvIHRoYXQgdGhlXG4vLyBleHRyYSBjaGVja3Mgb25seSBoYXZlIHRvIGJlIG1hZGUgZm9yIG5vZGVzIHRoYXQgYXJlIGFjdHVhbGx5XG4vLyBjdXN0b21pemVkLlxuY2xhc3MgQ3VzdG9tTm9kZVZpZXdEZXNjIGV4dGVuZHMgTm9kZVZpZXdEZXNjIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIGNvbnRlbnRET00sIG5vZGVET00sIHNwZWMsIHZpZXcsIHBvcykge1xuICAgICAgICBzdXBlcihwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIGNvbnRlbnRET00sIG5vZGVET00sIHZpZXcsIHBvcyk7XG4gICAgICAgIHRoaXMuc3BlYyA9IHNwZWM7XG4gICAgfVxuICAgIC8vIEEgY3VzdG9tIGB1cGRhdGVgIG1ldGhvZCBnZXRzIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSB1cGRhdGUgZ29lc1xuICAgIC8vIHRocm91Z2guIElmIGl0IGRvZXMsIGFuZCB0aGVyZSdzIGEgYGNvbnRlbnRET01gIG5vZGUsIG91ciBsb2dpY1xuICAgIC8vIHVwZGF0ZXMgdGhlIGNoaWxkcmVuLlxuICAgIHVwZGF0ZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldykge1xuICAgICAgICBpZiAodGhpcy5kaXJ0eSA9PSBOT0RFX0RJUlRZKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5zcGVjLnVwZGF0ZSAmJiAodGhpcy5ub2RlLnR5cGUgPT0gbm9kZS50eXBlIHx8IHRoaXMuc3BlYy5tdWx0aVR5cGUpKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5zcGVjLnVwZGF0ZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbyk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSW5uZXIobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5jb250ZW50RE9NICYmICFub2RlLmlzTGVhZikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLnVwZGF0ZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VsZWN0Tm9kZSgpIHtcbiAgICAgICAgdGhpcy5zcGVjLnNlbGVjdE5vZGUgPyB0aGlzLnNwZWMuc2VsZWN0Tm9kZSgpIDogc3VwZXIuc2VsZWN0Tm9kZSgpO1xuICAgIH1cbiAgICBkZXNlbGVjdE5vZGUoKSB7XG4gICAgICAgIHRoaXMuc3BlYy5kZXNlbGVjdE5vZGUgPyB0aGlzLnNwZWMuZGVzZWxlY3ROb2RlKCkgOiBzdXBlci5kZXNlbGVjdE5vZGUoKTtcbiAgICB9XG4gICAgc2V0U2VsZWN0aW9uKGFuY2hvciwgaGVhZCwgdmlldywgZm9yY2UpIHtcbiAgICAgICAgdGhpcy5zcGVjLnNldFNlbGVjdGlvbiA/IHRoaXMuc3BlYy5zZXRTZWxlY3Rpb24oYW5jaG9yLCBoZWFkLCB2aWV3LnJvb3QpXG4gICAgICAgICAgICA6IHN1cGVyLnNldFNlbGVjdGlvbihhbmNob3IsIGhlYWQsIHZpZXcsIGZvcmNlKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3BlYy5kZXN0cm95KVxuICAgICAgICAgICAgdGhpcy5zcGVjLmRlc3Ryb3koKTtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgICBzdG9wRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BlYy5zdG9wRXZlbnQgPyB0aGlzLnNwZWMuc3RvcEV2ZW50KGV2ZW50KSA6IGZhbHNlO1xuICAgIH1cbiAgICBpZ25vcmVNdXRhdGlvbihtdXRhdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5zcGVjLmlnbm9yZU11dGF0aW9uID8gdGhpcy5zcGVjLmlnbm9yZU11dGF0aW9uKG11dGF0aW9uKSA6IHN1cGVyLmlnbm9yZU11dGF0aW9uKG11dGF0aW9uKTtcbiAgICB9XG59XG4vLyBTeW5jIHRoZSBjb250ZW50IG9mIHRoZSBnaXZlbiBET00gbm9kZSB3aXRoIHRoZSBub2RlcyBhc3NvY2lhdGVkXG4vLyB3aXRoIHRoZSBnaXZlbiBhcnJheSBvZiB2aWV3IGRlc2NzLCByZWN1cnNpbmcgaW50byBtYXJrIGRlc2NzXG4vLyBiZWNhdXNlIHRoaXMgc2hvdWxkIHN5bmMgdGhlIHN1YnRyZWUgZm9yIGEgd2hvbGUgbm9kZSBhdCBhIHRpbWUuXG5mdW5jdGlvbiByZW5kZXJEZXNjcyhwYXJlbnRET00sIGRlc2NzLCB2aWV3KSB7XG4gICAgbGV0IGRvbSA9IHBhcmVudERPTS5maXJzdENoaWxkLCB3cml0dGVuID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXNjcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZGVzYyA9IGRlc2NzW2ldLCBjaGlsZERPTSA9IGRlc2MuZG9tO1xuICAgICAgICBpZiAoY2hpbGRET00ucGFyZW50Tm9kZSA9PSBwYXJlbnRET00pIHtcbiAgICAgICAgICAgIHdoaWxlIChjaGlsZERPTSAhPSBkb20pIHtcbiAgICAgICAgICAgICAgICBkb20gPSBybShkb20pO1xuICAgICAgICAgICAgICAgIHdyaXR0ZW4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9tID0gZG9tLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd3JpdHRlbiA9IHRydWU7XG4gICAgICAgICAgICBwYXJlbnRET00uaW5zZXJ0QmVmb3JlKGNoaWxkRE9NLCBkb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXNjIGluc3RhbmNlb2YgTWFya1ZpZXdEZXNjKSB7XG4gICAgICAgICAgICBsZXQgcG9zID0gZG9tID8gZG9tLnByZXZpb3VzU2libGluZyA6IHBhcmVudERPTS5sYXN0Q2hpbGQ7XG4gICAgICAgICAgICByZW5kZXJEZXNjcyhkZXNjLmNvbnRlbnRET00sIGRlc2MuY2hpbGRyZW4sIHZpZXcpO1xuICAgICAgICAgICAgZG9tID0gcG9zID8gcG9zLm5leHRTaWJsaW5nIDogcGFyZW50RE9NLmZpcnN0Q2hpbGQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKGRvbSkge1xuICAgICAgICBkb20gPSBybShkb20pO1xuICAgICAgICB3cml0dGVuID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHdyaXR0ZW4gJiYgdmlldy50cmFja1dyaXRlcyA9PSBwYXJlbnRET00pXG4gICAgICAgIHZpZXcudHJhY2tXcml0ZXMgPSBudWxsO1xufVxuY29uc3QgT3V0ZXJEZWNvTGV2ZWwgPSBmdW5jdGlvbiAobm9kZU5hbWUpIHtcbiAgICBpZiAobm9kZU5hbWUpXG4gICAgICAgIHRoaXMubm9kZU5hbWUgPSBub2RlTmFtZTtcbn07XG5PdXRlckRlY29MZXZlbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuY29uc3Qgbm9EZWNvID0gW25ldyBPdXRlckRlY29MZXZlbF07XG5mdW5jdGlvbiBjb21wdXRlT3V0ZXJEZWNvKG91dGVyRGVjbywgbm9kZSwgbmVlZHNXcmFwKSB7XG4gICAgaWYgKG91dGVyRGVjby5sZW5ndGggPT0gMClcbiAgICAgICAgcmV0dXJuIG5vRGVjbztcbiAgICBsZXQgdG9wID0gbmVlZHNXcmFwID8gbm9EZWNvWzBdIDogbmV3IE91dGVyRGVjb0xldmVsLCByZXN1bHQgPSBbdG9wXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dGVyRGVjby5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgYXR0cnMgPSBvdXRlckRlY29baV0udHlwZS5hdHRycztcbiAgICAgICAgaWYgKCFhdHRycylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoYXR0cnMubm9kZU5hbWUpXG4gICAgICAgICAgICByZXN1bHQucHVzaCh0b3AgPSBuZXcgT3V0ZXJEZWNvTGV2ZWwoYXR0cnMubm9kZU5hbWUpKTtcbiAgICAgICAgZm9yIChsZXQgbmFtZSBpbiBhdHRycykge1xuICAgICAgICAgICAgbGV0IHZhbCA9IGF0dHJzW25hbWVdO1xuICAgICAgICAgICAgaWYgKHZhbCA9PSBudWxsKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKG5lZWRzV3JhcCAmJiByZXN1bHQubGVuZ3RoID09IDEpXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godG9wID0gbmV3IE91dGVyRGVjb0xldmVsKG5vZGUuaXNJbmxpbmUgPyBcInNwYW5cIiA6IFwiZGl2XCIpKTtcbiAgICAgICAgICAgIGlmIChuYW1lID09IFwiY2xhc3NcIilcbiAgICAgICAgICAgICAgICB0b3AuY2xhc3MgPSAodG9wLmNsYXNzID8gdG9wLmNsYXNzICsgXCIgXCIgOiBcIlwiKSArIHZhbDtcbiAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT0gXCJzdHlsZVwiKVxuICAgICAgICAgICAgICAgIHRvcC5zdHlsZSA9ICh0b3Auc3R5bGUgPyB0b3Auc3R5bGUgKyBcIjtcIiA6IFwiXCIpICsgdmFsO1xuICAgICAgICAgICAgZWxzZSBpZiAobmFtZSAhPSBcIm5vZGVOYW1lXCIpXG4gICAgICAgICAgICAgICAgdG9wW25hbWVdID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwYXRjaE91dGVyRGVjbyhvdXRlckRPTSwgbm9kZURPTSwgcHJldkNvbXB1dGVkLCBjdXJDb21wdXRlZCkge1xuICAgIC8vIFNob3J0Y3V0IGZvciB0cml2aWFsIGNhc2VcbiAgICBpZiAocHJldkNvbXB1dGVkID09IG5vRGVjbyAmJiBjdXJDb21wdXRlZCA9PSBub0RlY28pXG4gICAgICAgIHJldHVybiBub2RlRE9NO1xuICAgIGxldCBjdXJET00gPSBub2RlRE9NO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VyQ29tcHV0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGRlY28gPSBjdXJDb21wdXRlZFtpXSwgcHJldiA9IHByZXZDb21wdXRlZFtpXTtcbiAgICAgICAgaWYgKGkpIHtcbiAgICAgICAgICAgIGxldCBwYXJlbnQ7XG4gICAgICAgICAgICBpZiAocHJldiAmJiBwcmV2Lm5vZGVOYW1lID09IGRlY28ubm9kZU5hbWUgJiYgY3VyRE9NICE9IG91dGVyRE9NICYmXG4gICAgICAgICAgICAgICAgKHBhcmVudCA9IGN1ckRPTS5wYXJlbnROb2RlKSAmJiBwYXJlbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PSBkZWNvLm5vZGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgY3VyRE9NID0gcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChkZWNvLm5vZGVOYW1lKTtcbiAgICAgICAgICAgICAgICBwYXJlbnQucG1Jc0RlY28gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjdXJET00pO1xuICAgICAgICAgICAgICAgIHByZXYgPSBub0RlY29bMF07XG4gICAgICAgICAgICAgICAgY3VyRE9NID0gcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBhdGNoQXR0cmlidXRlcyhjdXJET00sIHByZXYgfHwgbm9EZWNvWzBdLCBkZWNvKTtcbiAgICB9XG4gICAgcmV0dXJuIGN1ckRPTTtcbn1cbmZ1bmN0aW9uIHBhdGNoQXR0cmlidXRlcyhkb20sIHByZXYsIGN1cikge1xuICAgIGZvciAobGV0IG5hbWUgaW4gcHJldilcbiAgICAgICAgaWYgKG5hbWUgIT0gXCJjbGFzc1wiICYmIG5hbWUgIT0gXCJzdHlsZVwiICYmIG5hbWUgIT0gXCJub2RlTmFtZVwiICYmICEobmFtZSBpbiBjdXIpKVxuICAgICAgICAgICAgZG9tLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICBmb3IgKGxldCBuYW1lIGluIGN1cilcbiAgICAgICAgaWYgKG5hbWUgIT0gXCJjbGFzc1wiICYmIG5hbWUgIT0gXCJzdHlsZVwiICYmIG5hbWUgIT0gXCJub2RlTmFtZVwiICYmIGN1cltuYW1lXSAhPSBwcmV2W25hbWVdKVxuICAgICAgICAgICAgZG9tLnNldEF0dHJpYnV0ZShuYW1lLCBjdXJbbmFtZV0pO1xuICAgIGlmIChwcmV2LmNsYXNzICE9IGN1ci5jbGFzcykge1xuICAgICAgICBsZXQgcHJldkxpc3QgPSBwcmV2LmNsYXNzID8gcHJldi5jbGFzcy5zcGxpdChcIiBcIikuZmlsdGVyKEJvb2xlYW4pIDogW107XG4gICAgICAgIGxldCBjdXJMaXN0ID0gY3VyLmNsYXNzID8gY3VyLmNsYXNzLnNwbGl0KFwiIFwiKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2TGlzdC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChjdXJMaXN0LmluZGV4T2YocHJldkxpc3RbaV0pID09IC0xKVxuICAgICAgICAgICAgICAgIGRvbS5jbGFzc0xpc3QucmVtb3ZlKHByZXZMaXN0W2ldKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJMaXN0Lmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKHByZXZMaXN0LmluZGV4T2YoY3VyTGlzdFtpXSkgPT0gLTEpXG4gICAgICAgICAgICAgICAgZG9tLmNsYXNzTGlzdC5hZGQoY3VyTGlzdFtpXSk7XG4gICAgICAgIGlmIChkb20uY2xhc3NMaXN0Lmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgZG9tLnJlbW92ZUF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICAgIH1cbiAgICBpZiAocHJldi5zdHlsZSAhPSBjdXIuc3R5bGUpIHtcbiAgICAgICAgaWYgKHByZXYuc3R5bGUpIHtcbiAgICAgICAgICAgIGxldCBwcm9wID0gL1xccyooW1xcd1xcLVxceGExLVxcdWZmZmZdKylcXHMqOig/OlwiKD86XFxcXC58W15cIl0pKlwifCcoPzpcXFxcLnxbXiddKSonfFxcKC4qP1xcKXxbXjtdKSovZywgbTtcbiAgICAgICAgICAgIHdoaWxlIChtID0gcHJvcC5leGVjKHByZXYuc3R5bGUpKVxuICAgICAgICAgICAgICAgIGRvbS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShtWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VyLnN0eWxlKVxuICAgICAgICAgICAgZG9tLnN0eWxlLmNzc1RleHQgKz0gY3VyLnN0eWxlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFwcGx5T3V0ZXJEZWNvKGRvbSwgZGVjbywgbm9kZSkge1xuICAgIHJldHVybiBwYXRjaE91dGVyRGVjbyhkb20sIGRvbSwgbm9EZWNvLCBjb21wdXRlT3V0ZXJEZWNvKGRlY28sIG5vZGUsIGRvbS5ub2RlVHlwZSAhPSAxKSk7XG59XG5mdW5jdGlvbiBzYW1lT3V0ZXJEZWNvKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspXG4gICAgICAgIGlmICghYVtpXS50eXBlLmVxKGJbaV0udHlwZSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyBSZW1vdmUgYSBET00gbm9kZSBhbmQgcmV0dXJuIGl0cyBuZXh0IHNpYmxpbmcuXG5mdW5jdGlvbiBybShkb20pIHtcbiAgICBsZXQgbmV4dCA9IGRvbS5uZXh0U2libGluZztcbiAgICBkb20ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkb20pO1xuICAgIHJldHVybiBuZXh0O1xufVxuLy8gSGVscGVyIGNsYXNzIGZvciBpbmNyZW1lbnRhbGx5IHVwZGF0aW5nIGEgdHJlZSBvZiBtYXJrIGRlc2NzIGFuZFxuLy8gdGhlIHdpZGdldCBhbmQgbm9kZSBkZXNjcyBpbnNpZGUgb2YgdGhlbS5cbmNsYXNzIFZpZXdUcmVlVXBkYXRlciB7XG4gICAgY29uc3RydWN0b3IodG9wLCBsb2NrLCB2aWV3KSB7XG4gICAgICAgIHRoaXMubG9jayA9IGxvY2s7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIC8vIEluZGV4IGludG8gYHRoaXMudG9wYCdzIGNoaWxkIGFycmF5LCByZXByZXNlbnRzIHRoZSBjdXJyZW50XG4gICAgICAgIC8vIHVwZGF0ZSBwb3NpdGlvbi5cbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIC8vIFdoZW4gZW50ZXJpbmcgYSBtYXJrLCB0aGUgY3VycmVudCB0b3AgYW5kIGluZGV4IGFyZSBwdXNoZWRcbiAgICAgICAgLy8gb250byB0aGlzLlxuICAgICAgICB0aGlzLnN0YWNrID0gW107XG4gICAgICAgIC8vIFRyYWNrcyB3aGV0aGVyIGFueXRoaW5nIHdhcyBjaGFuZ2VkXG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRvcCA9IHRvcDtcbiAgICAgICAgdGhpcy5wcmVNYXRjaCA9IHByZU1hdGNoKHRvcC5ub2RlLmNvbnRlbnQsIHRvcCk7XG4gICAgfVxuICAgIC8vIERlc3Ryb3kgYW5kIHJlbW92ZSB0aGUgY2hpbGRyZW4gYmV0d2VlbiB0aGUgZ2l2ZW4gaW5kaWNlcyBpblxuICAgIC8vIGB0aGlzLnRvcGAuXG4gICAgZGVzdHJveUJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgICAgICBpZiAoc3RhcnQgPT0gZW5kKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKylcbiAgICAgICAgICAgIHRoaXMudG9wLmNoaWxkcmVuW2ldLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy50b3AuY2hpbGRyZW4uc3BsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCk7XG4gICAgICAgIHRoaXMuY2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICAgIC8vIERlc3Ryb3kgYWxsIHJlbWFpbmluZyBjaGlsZHJlbiBpbiBgdGhpcy50b3BgLlxuICAgIGRlc3Ryb3lSZXN0KCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3lCZXR3ZWVuKHRoaXMuaW5kZXgsIHRoaXMudG9wLmNoaWxkcmVuLmxlbmd0aCk7XG4gICAgfVxuICAgIC8vIFN5bmMgdGhlIGN1cnJlbnQgc3RhY2sgb2YgbWFyayBkZXNjcyB3aXRoIHRoZSBnaXZlbiBhcnJheSBvZlxuICAgIC8vIG1hcmtzLCByZXVzaW5nIGV4aXN0aW5nIG1hcmsgZGVzY3Mgd2hlbiBwb3NzaWJsZS5cbiAgICBzeW5jVG9NYXJrcyhtYXJrcywgaW5saW5lLCB2aWV3KSB7XG4gICAgICAgIGxldCBrZWVwID0gMCwgZGVwdGggPSB0aGlzLnN0YWNrLmxlbmd0aCA+PiAxO1xuICAgICAgICBsZXQgbWF4S2VlcCA9IE1hdGgubWluKGRlcHRoLCBtYXJrcy5sZW5ndGgpO1xuICAgICAgICB3aGlsZSAoa2VlcCA8IG1heEtlZXAgJiZcbiAgICAgICAgICAgIChrZWVwID09IGRlcHRoIC0gMSA/IHRoaXMudG9wIDogdGhpcy5zdGFja1soa2VlcCArIDEpIDw8IDFdKVxuICAgICAgICAgICAgICAgIC5tYXRjaGVzTWFyayhtYXJrc1trZWVwXSkgJiYgbWFya3Nba2VlcF0udHlwZS5zcGVjLnNwYW5uaW5nICE9PSBmYWxzZSlcbiAgICAgICAgICAgIGtlZXArKztcbiAgICAgICAgd2hpbGUgKGtlZXAgPCBkZXB0aCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0cm95UmVzdCgpO1xuICAgICAgICAgICAgdGhpcy50b3AuZGlydHkgPSBOT1RfRElSVFk7XG4gICAgICAgICAgICB0aGlzLmluZGV4ID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMudG9wID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgICAgICAgIGRlcHRoLS07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGRlcHRoIDwgbWFya3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2godGhpcy50b3AsIHRoaXMuaW5kZXggKyAxKTtcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IC0xO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuaW5kZXg7IGkgPCBNYXRoLm1pbih0aGlzLmluZGV4ICsgMywgdGhpcy50b3AuY2hpbGRyZW4ubGVuZ3RoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSB0aGlzLnRvcC5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dC5tYXRjaGVzTWFyayhtYXJrc1tkZXB0aF0pICYmICF0aGlzLmlzTG9ja2VkKG5leHQuZG9tKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmb3VuZCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kID4gdGhpcy5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3lCZXR3ZWVuKHRoaXMuaW5kZXgsIGZvdW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy50b3AgPSB0aGlzLnRvcC5jaGlsZHJlblt0aGlzLmluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBtYXJrRGVzYyA9IE1hcmtWaWV3RGVzYy5jcmVhdGUodGhpcy50b3AsIG1hcmtzW2RlcHRoXSwgaW5saW5lLCB2aWV3KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvcC5jaGlsZHJlbi5zcGxpY2UodGhpcy5pbmRleCwgMCwgbWFya0Rlc2MpO1xuICAgICAgICAgICAgICAgIHRoaXMudG9wID0gbWFya0Rlc2M7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICAgICAgZGVwdGgrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUcnkgdG8gZmluZCBhIG5vZGUgZGVzYyBtYXRjaGluZyB0aGUgZ2l2ZW4gZGF0YS4gU2tpcCBvdmVyIGl0IGFuZFxuICAgIC8vIHJldHVybiB0cnVlIHdoZW4gc3VjY2Vzc2Z1bC5cbiAgICBmaW5kTm9kZU1hdGNoKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBpbmRleCkge1xuICAgICAgICBsZXQgZm91bmQgPSAtMSwgdGFyZ2V0RGVzYztcbiAgICAgICAgaWYgKGluZGV4ID49IHRoaXMucHJlTWF0Y2guaW5kZXggJiZcbiAgICAgICAgICAgICh0YXJnZXREZXNjID0gdGhpcy5wcmVNYXRjaC5tYXRjaGVzW2luZGV4IC0gdGhpcy5wcmVNYXRjaC5pbmRleF0pLnBhcmVudCA9PSB0aGlzLnRvcCAmJlxuICAgICAgICAgICAgdGFyZ2V0RGVzYy5tYXRjaGVzTm9kZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbykpIHtcbiAgICAgICAgICAgIGZvdW5kID0gdGhpcy50b3AuY2hpbGRyZW4uaW5kZXhPZih0YXJnZXREZXNjLCB0aGlzLmluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmluZGV4LCBlID0gTWF0aC5taW4odGhpcy50b3AuY2hpbGRyZW4ubGVuZ3RoLCBpICsgNSk7IGkgPCBlOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLnRvcC5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQubWF0Y2hlc05vZGUobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28pICYmICF0aGlzLnByZU1hdGNoLm1hdGNoZWQuaGFzKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZm91bmQgPCAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB0aGlzLmRlc3Ryb3lCZXR3ZWVuKHRoaXMuaW5kZXgsIGZvdW5kKTtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdXBkYXRlTm9kZUF0KG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBpbmRleCwgdmlldykge1xuICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLnRvcC5jaGlsZHJlbltpbmRleF07XG4gICAgICAgIGlmIChjaGlsZC5kaXJ0eSA9PSBOT0RFX0RJUlRZICYmIGNoaWxkLmRvbSA9PSBjaGlsZC5jb250ZW50RE9NKVxuICAgICAgICAgICAgY2hpbGQuZGlydHkgPSBDT05URU5UX0RJUlRZO1xuICAgICAgICBpZiAoIWNoaWxkLnVwZGF0ZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVzdHJveUJldHdlZW4odGhpcy5pbmRleCwgaW5kZXgpO1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmaW5kSW5kZXhXaXRoQ2hpbGQoZG9tTm9kZSkge1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gZG9tTm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgaWYgKCFwYXJlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgaWYgKHBhcmVudCA9PSB0aGlzLnRvcC5jb250ZW50RE9NKSB7XG4gICAgICAgICAgICAgICAgbGV0IGRlc2MgPSBkb21Ob2RlLnBtVmlld0Rlc2M7XG4gICAgICAgICAgICAgICAgaWYgKGRlc2MpXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmluZGV4OyBpIDwgdGhpcy50b3AuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRvcC5jaGlsZHJlbltpXSA9PSBkZXNjKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9tTm9kZSA9IHBhcmVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUcnkgdG8gdXBkYXRlIHRoZSBuZXh0IG5vZGUsIGlmIGFueSwgdG8gdGhlIGdpdmVuIGRhdGEuIENoZWNrc1xuICAgIC8vIHByZS1tYXRjaGVzIHRvIGF2b2lkIG92ZXJ3cml0aW5nIG5vZGVzIHRoYXQgY291bGQgc3RpbGwgYmUgdXNlZC5cbiAgICB1cGRhdGVOZXh0Tm9kZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldywgaW5kZXgsIHBvcykge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5pbmRleDsgaSA8IHRoaXMudG9wLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IHRoaXMudG9wLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgaWYgKG5leHQgaW5zdGFuY2VvZiBOb2RlVmlld0Rlc2MpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJlTWF0Y2ggPSB0aGlzLnByZU1hdGNoLm1hdGNoZWQuZ2V0KG5leHQpO1xuICAgICAgICAgICAgICAgIGlmIChwcmVNYXRjaCAhPSBudWxsICYmIHByZU1hdGNoICE9IGluZGV4KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgbGV0IG5leHRET00gPSBuZXh0LmRvbSwgdXBkYXRlZDtcbiAgICAgICAgICAgICAgICAvLyBDYW4ndCB1cGRhdGUgaWYgbmV4dERPTSBpcyBvciBjb250YWlucyB0aGlzLmxvY2ssIGV4Y2VwdCBpZlxuICAgICAgICAgICAgICAgIC8vIGl0J3MgYSB0ZXh0IG5vZGUgd2hvc2UgY29udGVudCBhbHJlYWR5IG1hdGNoZXMgdGhlIG5ldyB0ZXh0XG4gICAgICAgICAgICAgICAgLy8gYW5kIHdob3NlIGRlY29yYXRpb25zIG1hdGNoIHRoZSBuZXcgb25lcy5cbiAgICAgICAgICAgICAgICBsZXQgbG9ja2VkID0gdGhpcy5pc0xvY2tlZChuZXh0RE9NKSAmJlxuICAgICAgICAgICAgICAgICAgICAhKG5vZGUuaXNUZXh0ICYmIG5leHQubm9kZSAmJiBuZXh0Lm5vZGUuaXNUZXh0ICYmIG5leHQubm9kZURPTS5ub2RlVmFsdWUgPT0gbm9kZS50ZXh0ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0LmRpcnR5ICE9IE5PREVfRElSVFkgJiYgc2FtZU91dGVyRGVjbyhvdXRlckRlY28sIG5leHQub3V0ZXJEZWNvKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFsb2NrZWQgJiYgbmV4dC51cGRhdGUobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzdHJveUJldHdlZW4odGhpcy5pbmRleCwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0LmRvbSAhPSBuZXh0RE9NKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWxvY2tlZCAmJiAodXBkYXRlZCA9IHRoaXMucmVjcmVhdGVXcmFwcGVyKG5leHQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3LCBwb3MpKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc3Ryb3lCZXR3ZWVuKHRoaXMuaW5kZXgsIGkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvcC5jaGlsZHJlblt0aGlzLmluZGV4XSA9IHVwZGF0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVkLmNvbnRlbnRET00pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWQuZGlydHkgPSBDT05URU5UX0RJUlRZO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZC51cGRhdGVDaGlsZHJlbih2aWV3LCBwb3MgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWQuZGlydHkgPSBOT1RfRElSVFk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBXaGVuIGEgbm9kZSB3aXRoIGNvbnRlbnQgaXMgcmVwbGFjZWQgYnkgYSBkaWZmZXJlbnQgbm9kZSB3aXRoXG4gICAgLy8gaWRlbnRpY2FsIGNvbnRlbnQsIG1vdmUgb3ZlciBpdHMgY2hpbGRyZW4uXG4gICAgcmVjcmVhdGVXcmFwcGVyKG5leHQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3LCBwb3MpIHtcbiAgICAgICAgaWYgKG5leHQuZGlydHkgfHwgbm9kZS5pc0F0b20gfHwgIW5leHQuY2hpbGRyZW4ubGVuZ3RoIHx8XG4gICAgICAgICAgICAhbmV4dC5ub2RlLmNvbnRlbnQuZXEobm9kZS5jb250ZW50KSB8fFxuICAgICAgICAgICAgIXNhbWVPdXRlckRlY28ob3V0ZXJEZWNvLCBuZXh0Lm91dGVyRGVjbykgfHwgIWlubmVyRGVjby5lcShuZXh0LmlubmVyRGVjbykpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgbGV0IHdyYXBwZXIgPSBOb2RlVmlld0Rlc2MuY3JlYXRlKHRoaXMudG9wLCBub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldywgcG9zKTtcbiAgICAgICAgaWYgKHdyYXBwZXIuY29udGVudERPTSkge1xuICAgICAgICAgICAgd3JhcHBlci5jaGlsZHJlbiA9IG5leHQuY2hpbGRyZW47XG4gICAgICAgICAgICBuZXh0LmNoaWxkcmVuID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBjaCBvZiB3cmFwcGVyLmNoaWxkcmVuKVxuICAgICAgICAgICAgICAgIGNoLnBhcmVudCA9IHdyYXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dC5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cbiAgICAvLyBJbnNlcnQgdGhlIG5vZGUgYXMgYSBuZXdseSBjcmVhdGVkIG5vZGUgZGVzYy5cbiAgICBhZGROb2RlKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3LCBwb3MpIHtcbiAgICAgICAgbGV0IGRlc2MgPSBOb2RlVmlld0Rlc2MuY3JlYXRlKHRoaXMudG9wLCBub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldywgcG9zKTtcbiAgICAgICAgaWYgKGRlc2MuY29udGVudERPTSlcbiAgICAgICAgICAgIGRlc2MudXBkYXRlQ2hpbGRyZW4odmlldywgcG9zICsgMSk7XG4gICAgICAgIHRoaXMudG9wLmNoaWxkcmVuLnNwbGljZSh0aGlzLmluZGV4KyssIDAsIGRlc2MpO1xuICAgICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgICBwbGFjZVdpZGdldCh3aWRnZXQsIHZpZXcsIHBvcykge1xuICAgICAgICBsZXQgbmV4dCA9IHRoaXMuaW5kZXggPCB0aGlzLnRvcC5jaGlsZHJlbi5sZW5ndGggPyB0aGlzLnRvcC5jaGlsZHJlblt0aGlzLmluZGV4XSA6IG51bGw7XG4gICAgICAgIGlmIChuZXh0ICYmIG5leHQubWF0Y2hlc1dpZGdldCh3aWRnZXQpICYmXG4gICAgICAgICAgICAod2lkZ2V0ID09IG5leHQud2lkZ2V0IHx8ICFuZXh0LndpZGdldC50eXBlLnRvRE9NLnBhcmVudE5vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgZGVzYyA9IG5ldyBXaWRnZXRWaWV3RGVzYyh0aGlzLnRvcCwgd2lkZ2V0LCB2aWV3LCBwb3MpO1xuICAgICAgICAgICAgdGhpcy50b3AuY2hpbGRyZW4uc3BsaWNlKHRoaXMuaW5kZXgrKywgMCwgZGVzYyk7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSBhIHRleHRibG9jayBsb29rcyBhbmQgYmVoYXZlcyBjb3JyZWN0bHkgaW5cbiAgICAvLyBjb250ZW50RWRpdGFibGUuXG4gICAgYWRkVGV4dGJsb2NrSGFja3MoKSB7XG4gICAgICAgIGxldCBsYXN0Q2hpbGQgPSB0aGlzLnRvcC5jaGlsZHJlblt0aGlzLmluZGV4IC0gMV0sIHBhcmVudCA9IHRoaXMudG9wO1xuICAgICAgICB3aGlsZSAobGFzdENoaWxkIGluc3RhbmNlb2YgTWFya1ZpZXdEZXNjKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBsYXN0Q2hpbGQ7XG4gICAgICAgICAgICBsYXN0Q2hpbGQgPSBwYXJlbnQuY2hpbGRyZW5bcGFyZW50LmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbGFzdENoaWxkIHx8IC8vIEVtcHR5IHRleHRibG9ja1xuICAgICAgICAgICAgIShsYXN0Q2hpbGQgaW5zdGFuY2VvZiBUZXh0Vmlld0Rlc2MpIHx8XG4gICAgICAgICAgICAvXFxuJC8udGVzdChsYXN0Q2hpbGQubm9kZS50ZXh0KSB8fFxuICAgICAgICAgICAgKHRoaXMudmlldy5yZXF1aXJlc0dlY2tvSGFja05vZGUgJiYgL1xccyQvLnRlc3QobGFzdENoaWxkLm5vZGUudGV4dCkpKSB7XG4gICAgICAgICAgICAvLyBBdm9pZCBidWdzIGluIFNhZmFyaSdzIGN1cnNvciBkcmF3aW5nICgjMTE2NSkgYW5kIENocm9tZSdzIG1vdXNlIHNlbGVjdGlvbiAoIzExNTIpXG4gICAgICAgICAgICBpZiAoKHNhZmFyaSB8fCBjaHJvbWUpICYmIGxhc3RDaGlsZCAmJiBsYXN0Q2hpbGQuZG9tLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRIYWNrTm9kZShcIklNR1wiLCBwYXJlbnQpO1xuICAgICAgICAgICAgdGhpcy5hZGRIYWNrTm9kZShcIkJSXCIsIHRoaXMudG9wKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRIYWNrTm9kZShub2RlTmFtZSwgcGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQgPT0gdGhpcy50b3AgJiYgdGhpcy5pbmRleCA8IHBhcmVudC5jaGlsZHJlbi5sZW5ndGggJiYgcGFyZW50LmNoaWxkcmVuW3RoaXMuaW5kZXhdLm1hdGNoZXNIYWNrKG5vZGVOYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobm9kZU5hbWUpO1xuICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09IFwiSU1HXCIpIHtcbiAgICAgICAgICAgICAgICBkb20uY2xhc3NOYW1lID0gXCJQcm9zZU1pcnJvci1zZXBhcmF0b3JcIjtcbiAgICAgICAgICAgICAgICBkb20uYWx0ID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2RlTmFtZSA9PSBcIkJSXCIpXG4gICAgICAgICAgICAgICAgZG9tLmNsYXNzTmFtZSA9IFwiUHJvc2VNaXJyb3ItdHJhaWxpbmdCcmVha1wiO1xuICAgICAgICAgICAgbGV0IGhhY2sgPSBuZXcgVHJhaWxpbmdIYWNrVmlld0Rlc2ModGhpcy50b3AsIFtdLCBkb20sIG51bGwpO1xuICAgICAgICAgICAgaWYgKHBhcmVudCAhPSB0aGlzLnRvcClcbiAgICAgICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChoYWNrKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKHRoaXMuaW5kZXgrKywgMCwgaGFjayk7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzTG9ja2VkKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jayAmJiAobm9kZSA9PSB0aGlzLmxvY2sgfHwgbm9kZS5ub2RlVHlwZSA9PSAxICYmIG5vZGUuY29udGFpbnModGhpcy5sb2NrLnBhcmVudE5vZGUpKTtcbiAgICB9XG59XG4vLyBJdGVyYXRlIGZyb20gdGhlIGVuZCBvZiB0aGUgZnJhZ21lbnQgYW5kIGFycmF5IG9mIGRlc2NzIHRvIGZpbmRcbi8vIGRpcmVjdGx5IG1hdGNoaW5nIG9uZXMsIGluIG9yZGVyIHRvIGF2b2lkIG92ZXJlYWdlcmx5IHJldXNpbmcgdGhvc2Vcbi8vIGZvciBvdGhlciBub2Rlcy4gUmV0dXJucyB0aGUgZnJhZ21lbnQgaW5kZXggb2YgdGhlIGZpcnN0IG5vZGUgdGhhdFxuLy8gaXMgcGFydCBvZiB0aGUgc2VxdWVuY2Ugb2YgbWF0Y2hlZCBub2RlcyBhdCB0aGUgZW5kIG9mIHRoZVxuLy8gZnJhZ21lbnQuXG5mdW5jdGlvbiBwcmVNYXRjaChmcmFnLCBwYXJlbnREZXNjKSB7XG4gICAgbGV0IGN1ckRlc2MgPSBwYXJlbnREZXNjLCBkZXNjSSA9IGN1ckRlc2MuY2hpbGRyZW4ubGVuZ3RoO1xuICAgIGxldCBmSSA9IGZyYWcuY2hpbGRDb3VudCwgbWF0Y2hlZCA9IG5ldyBNYXAsIG1hdGNoZXMgPSBbXTtcbiAgICBvdXRlcjogd2hpbGUgKGZJID4gMCkge1xuICAgICAgICBsZXQgZGVzYztcbiAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaWYgKGRlc2NJKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSBjdXJEZXNjLmNoaWxkcmVuW2Rlc2NJIC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgaW5zdGFuY2VvZiBNYXJrVmlld0Rlc2MpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VyRGVzYyA9IG5leHQ7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NJID0gbmV4dC5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZXNjID0gbmV4dDtcbiAgICAgICAgICAgICAgICAgICAgZGVzY0ktLTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY3VyRGVzYyA9PSBwYXJlbnREZXNjKSB7XG4gICAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGSVhNRVxuICAgICAgICAgICAgICAgIGRlc2NJID0gY3VyRGVzYy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihjdXJEZXNjKTtcbiAgICAgICAgICAgICAgICBjdXJEZXNjID0gY3VyRGVzYy5wYXJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5vZGUgPSBkZXNjLm5vZGU7XG4gICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAobm9kZSAhPSBmcmFnLmNoaWxkKGZJIC0gMSkpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgLS1mSTtcbiAgICAgICAgbWF0Y2hlZC5zZXQoZGVzYywgZkkpO1xuICAgICAgICBtYXRjaGVzLnB1c2goZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiB7IGluZGV4OiBmSSwgbWF0Y2hlZCwgbWF0Y2hlczogbWF0Y2hlcy5yZXZlcnNlKCkgfTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmVTaWRlKGEsIGIpIHtcbiAgICByZXR1cm4gYS50eXBlLnNpZGUgLSBiLnR5cGUuc2lkZTtcbn1cbi8vIFRoaXMgZnVuY3Rpb24gYWJzdHJhY3RzIGl0ZXJhdGluZyBvdmVyIHRoZSBub2RlcyBhbmQgZGVjb3JhdGlvbnMgaW5cbi8vIGEgZnJhZ21lbnQuIENhbGxzIGBvbk5vZGVgIGZvciBlYWNoIG5vZGUsIHdpdGggaXRzIGxvY2FsIGFuZCBjaGlsZFxuLy8gZGVjb3JhdGlvbnMuIFNwbGl0cyB0ZXh0IG5vZGVzIHdoZW4gdGhlcmUgaXMgYSBkZWNvcmF0aW9uIHN0YXJ0aW5nXG4vLyBvciBlbmRpbmcgaW5zaWRlIG9mIHRoZW0uIENhbGxzIGBvbldpZGdldGAgZm9yIGVhY2ggd2lkZ2V0LlxuZnVuY3Rpb24gaXRlckRlY28ocGFyZW50LCBkZWNvLCBvbldpZGdldCwgb25Ob2RlKSB7XG4gICAgbGV0IGxvY2FscyA9IGRlY28ubG9jYWxzKHBhcmVudCksIG9mZnNldCA9IDA7XG4gICAgLy8gU2ltcGxlLCBjaGVhcCB2YXJpYW50IGZvciB3aGVuIHRoZXJlIGFyZSBubyBsb2NhbCBkZWNvcmF0aW9uc1xuICAgIGlmIChsb2NhbHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJlbnQuY2hpbGRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBwYXJlbnQuY2hpbGQoaSk7XG4gICAgICAgICAgICBvbk5vZGUoY2hpbGQsIGxvY2FscywgZGVjby5mb3JDaGlsZChvZmZzZXQsIGNoaWxkKSwgaSk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gY2hpbGQubm9kZVNpemU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZGVjb0luZGV4ID0gMCwgYWN0aXZlID0gW10sIHJlc3ROb2RlID0gbnVsbDtcbiAgICBmb3IgKGxldCBwYXJlbnRJbmRleCA9IDA7Oykge1xuICAgICAgICBsZXQgd2lkZ2V0LCB3aWRnZXRzO1xuICAgICAgICB3aGlsZSAoZGVjb0luZGV4IDwgbG9jYWxzLmxlbmd0aCAmJiBsb2NhbHNbZGVjb0luZGV4XS50byA9PSBvZmZzZXQpIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gbG9jYWxzW2RlY29JbmRleCsrXTtcbiAgICAgICAgICAgIGlmIChuZXh0LndpZGdldCkge1xuICAgICAgICAgICAgICAgIGlmICghd2lkZ2V0KVxuICAgICAgICAgICAgICAgICAgICB3aWRnZXQgPSBuZXh0O1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgKHdpZGdldHMgfHwgKHdpZGdldHMgPSBbd2lkZ2V0XSkpLnB1c2gobmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpZGdldCkge1xuICAgICAgICAgICAgaWYgKHdpZGdldHMpIHtcbiAgICAgICAgICAgICAgICB3aWRnZXRzLnNvcnQoY29tcGFyZVNpZGUpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd2lkZ2V0cy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgb25XaWRnZXQod2lkZ2V0c1tpXSwgcGFyZW50SW5kZXgsICEhcmVzdE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb25XaWRnZXQod2lkZ2V0LCBwYXJlbnRJbmRleCwgISFyZXN0Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNoaWxkLCBpbmRleDtcbiAgICAgICAgaWYgKHJlc3ROb2RlKSB7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgY2hpbGQgPSByZXN0Tm9kZTtcbiAgICAgICAgICAgIHJlc3ROb2RlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJlbnRJbmRleCA8IHBhcmVudC5jaGlsZENvdW50KSB7XG4gICAgICAgICAgICBpbmRleCA9IHBhcmVudEluZGV4O1xuICAgICAgICAgICAgY2hpbGQgPSBwYXJlbnQuY2hpbGQocGFyZW50SW5kZXgrKyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGl2ZS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmIChhY3RpdmVbaV0udG8gPD0gb2Zmc2V0KVxuICAgICAgICAgICAgICAgIGFjdGl2ZS5zcGxpY2UoaS0tLCAxKTtcbiAgICAgICAgd2hpbGUgKGRlY29JbmRleCA8IGxvY2Fscy5sZW5ndGggJiYgbG9jYWxzW2RlY29JbmRleF0uZnJvbSA8PSBvZmZzZXQgJiYgbG9jYWxzW2RlY29JbmRleF0udG8gPiBvZmZzZXQpXG4gICAgICAgICAgICBhY3RpdmUucHVzaChsb2NhbHNbZGVjb0luZGV4KytdKTtcbiAgICAgICAgbGV0IGVuZCA9IG9mZnNldCArIGNoaWxkLm5vZGVTaXplO1xuICAgICAgICBpZiAoY2hpbGQuaXNUZXh0KSB7XG4gICAgICAgICAgICBsZXQgY3V0QXQgPSBlbmQ7XG4gICAgICAgICAgICBpZiAoZGVjb0luZGV4IDwgbG9jYWxzLmxlbmd0aCAmJiBsb2NhbHNbZGVjb0luZGV4XS5mcm9tIDwgY3V0QXQpXG4gICAgICAgICAgICAgICAgY3V0QXQgPSBsb2NhbHNbZGVjb0luZGV4XS5mcm9tO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY3RpdmUubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVtpXS50byA8IGN1dEF0KVxuICAgICAgICAgICAgICAgICAgICBjdXRBdCA9IGFjdGl2ZVtpXS50bztcbiAgICAgICAgICAgIGlmIChjdXRBdCA8IGVuZCkge1xuICAgICAgICAgICAgICAgIHJlc3ROb2RlID0gY2hpbGQuY3V0KGN1dEF0IC0gb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkLmN1dCgwLCBjdXRBdCAtIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgZW5kID0gY3V0QXQ7XG4gICAgICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdoaWxlIChkZWNvSW5kZXggPCBsb2NhbHMubGVuZ3RoICYmIGxvY2Fsc1tkZWNvSW5kZXhdLnRvIDwgZW5kKVxuICAgICAgICAgICAgICAgIGRlY29JbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvdXRlckRlY28gPSBjaGlsZC5pc0lubGluZSAmJiAhY2hpbGQuaXNMZWFmID8gYWN0aXZlLmZpbHRlcihkID0+ICFkLmlubGluZSkgOiBhY3RpdmUuc2xpY2UoKTtcbiAgICAgICAgb25Ob2RlKGNoaWxkLCBvdXRlckRlY28sIGRlY28uZm9yQ2hpbGQob2Zmc2V0LCBjaGlsZCksIGluZGV4KTtcbiAgICAgICAgb2Zmc2V0ID0gZW5kO1xuICAgIH1cbn1cbi8vIExpc3QgbWFya2VycyBpbiBNb2JpbGUgU2FmYXJpIHdpbGwgbXlzdGVyaW91c2x5IGRpc2FwcGVhclxuLy8gc29tZXRpbWVzLiBUaGlzIHdvcmtzIGFyb3VuZCB0aGF0LlxuZnVuY3Rpb24gaW9zSGFja3MoZG9tKSB7XG4gICAgaWYgKGRvbS5ub2RlTmFtZSA9PSBcIlVMXCIgfHwgZG9tLm5vZGVOYW1lID09IFwiT0xcIikge1xuICAgICAgICBsZXQgb2xkQ1NTID0gZG9tLnN0eWxlLmNzc1RleHQ7XG4gICAgICAgIGRvbS5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTICsgXCI7IGxpc3Qtc3R5bGU6IHNxdWFyZSAhaW1wb3J0YW50XCI7XG4gICAgICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvbSkubGlzdFN0eWxlO1xuICAgICAgICBkb20uc3R5bGUuY3NzVGV4dCA9IG9sZENTUztcbiAgICB9XG59XG4vLyBGaW5kIGEgcGllY2Ugb2YgdGV4dCBpbiBhbiBpbmxpbmUgZnJhZ21lbnQsIG92ZXJsYXBwaW5nIGZyb20tdG9cbmZ1bmN0aW9uIGZpbmRUZXh0SW5GcmFnbWVudChmcmFnLCB0ZXh0LCBmcm9tLCB0bykge1xuICAgIGZvciAobGV0IGkgPSAwLCBwb3MgPSAwOyBpIDwgZnJhZy5jaGlsZENvdW50ICYmIHBvcyA8PSB0bzspIHtcbiAgICAgICAgbGV0IGNoaWxkID0gZnJhZy5jaGlsZChpKyspLCBjaGlsZFN0YXJ0ID0gcG9zO1xuICAgICAgICBwb3MgKz0gY2hpbGQubm9kZVNpemU7XG4gICAgICAgIGlmICghY2hpbGQuaXNUZXh0KVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGxldCBzdHIgPSBjaGlsZC50ZXh0O1xuICAgICAgICB3aGlsZSAoaSA8IGZyYWcuY2hpbGRDb3VudCkge1xuICAgICAgICAgICAgbGV0IG5leHQgPSBmcmFnLmNoaWxkKGkrKyk7XG4gICAgICAgICAgICBwb3MgKz0gbmV4dC5ub2RlU2l6ZTtcbiAgICAgICAgICAgIGlmICghbmV4dC5pc1RleHQpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBzdHIgKz0gbmV4dC50ZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3MgPj0gZnJvbSkge1xuICAgICAgICAgICAgaWYgKHBvcyA+PSB0byAmJiBzdHIuc2xpY2UodG8gLSB0ZXh0Lmxlbmd0aCAtIGNoaWxkU3RhcnQsIHRvIC0gY2hpbGRTdGFydCkgPT0gdGV4dClcbiAgICAgICAgICAgICAgICByZXR1cm4gdG8gLSB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IGNoaWxkU3RhcnQgPCB0byA/IHN0ci5sYXN0SW5kZXhPZih0ZXh0LCB0byAtIGNoaWxkU3RhcnQgLSAxKSA6IC0xO1xuICAgICAgICAgICAgaWYgKGZvdW5kID49IDAgJiYgZm91bmQgKyB0ZXh0Lmxlbmd0aCArIGNoaWxkU3RhcnQgPj0gZnJvbSlcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRTdGFydCArIGZvdW5kO1xuICAgICAgICAgICAgaWYgKGZyb20gPT0gdG8gJiYgc3RyLmxlbmd0aCA+PSAodG8gKyB0ZXh0Lmxlbmd0aCkgLSBjaGlsZFN0YXJ0ICYmXG4gICAgICAgICAgICAgICAgc3RyLnNsaWNlKHRvIC0gY2hpbGRTdGFydCwgdG8gLSBjaGlsZFN0YXJ0ICsgdGV4dC5sZW5ndGgpID09IHRleHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbi8vIFJlcGxhY2UgcmFuZ2UgZnJvbS10byBpbiBhbiBhcnJheSBvZiB2aWV3IGRlc2NzIHdpdGggcmVwbGFjZW1lbnRcbi8vIChtYXkgYmUgbnVsbCB0byBqdXN0IGRlbGV0ZSkuIFRoaXMgZ29lcyB2ZXJ5IG11Y2ggYWdhaW5zdCB0aGUgZ3JhaW5cbi8vIG9mIHRoZSByZXN0IG9mIHRoaXMgY29kZSwgd2hpY2ggdGVuZHMgdG8gY3JlYXRlIG5vZGVzIHdpdGggdGhlXG4vLyByaWdodCBzaGFwZSBpbiBvbmUgZ28sIHJhdGhlciB0aGFuIG1lc3Npbmcgd2l0aCB0aGVtIGFmdGVyXG4vLyBjcmVhdGlvbiwgYnV0IGlzIG5lY2Vzc2FyeSBpbiB0aGUgY29tcG9zaXRpb24gaGFjay5cbmZ1bmN0aW9uIHJlcGxhY2VOb2Rlcyhub2RlcywgZnJvbSwgdG8sIHZpZXcsIHJlcGxhY2VtZW50KSB7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBvZmYgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGNoaWxkID0gbm9kZXNbaV0sIHN0YXJ0ID0gb2ZmLCBlbmQgPSBvZmYgKz0gY2hpbGQuc2l6ZTtcbiAgICAgICAgaWYgKHN0YXJ0ID49IHRvIHx8IGVuZCA8PSBmcm9tKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoc3RhcnQgPCBmcm9tKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNoaWxkLnNsaWNlKDAsIGZyb20gLSBzdGFydCwgdmlldykpO1xuICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocmVwbGFjZW1lbnQpO1xuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuZCA+IHRvKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNoaWxkLnNsaWNlKHRvIC0gc3RhcnQsIGNoaWxkLnNpemUsIHZpZXcpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25Gcm9tRE9NKHZpZXcsIG9yaWdpbiA9IG51bGwpIHtcbiAgICBsZXQgZG9tU2VsID0gdmlldy5kb21TZWxlY3Rpb25SYW5nZSgpLCBkb2MgPSB2aWV3LnN0YXRlLmRvYztcbiAgICBpZiAoIWRvbVNlbC5mb2N1c05vZGUpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBuZWFyZXN0RGVzYyA9IHZpZXcuZG9jVmlldy5uZWFyZXN0RGVzYyhkb21TZWwuZm9jdXNOb2RlKSwgaW5XaWRnZXQgPSBuZWFyZXN0RGVzYyAmJiBuZWFyZXN0RGVzYy5zaXplID09IDA7XG4gICAgbGV0IGhlYWQgPSB2aWV3LmRvY1ZpZXcucG9zRnJvbURPTShkb21TZWwuZm9jdXNOb2RlLCBkb21TZWwuZm9jdXNPZmZzZXQsIDEpO1xuICAgIGlmIChoZWFkIDwgMClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0ICRoZWFkID0gZG9jLnJlc29sdmUoaGVhZCksIGFuY2hvciwgc2VsZWN0aW9uO1xuICAgIGlmIChzZWxlY3Rpb25Db2xsYXBzZWQoZG9tU2VsKSkge1xuICAgICAgICBhbmNob3IgPSBoZWFkO1xuICAgICAgICB3aGlsZSAobmVhcmVzdERlc2MgJiYgIW5lYXJlc3REZXNjLm5vZGUpXG4gICAgICAgICAgICBuZWFyZXN0RGVzYyA9IG5lYXJlc3REZXNjLnBhcmVudDtcbiAgICAgICAgbGV0IG5lYXJlc3REZXNjTm9kZSA9IG5lYXJlc3REZXNjLm5vZGU7XG4gICAgICAgIGlmIChuZWFyZXN0RGVzYyAmJiBuZWFyZXN0RGVzY05vZGUuaXNBdG9tICYmIE5vZGVTZWxlY3Rpb24uaXNTZWxlY3RhYmxlKG5lYXJlc3REZXNjTm9kZSkgJiYgbmVhcmVzdERlc2MucGFyZW50XG4gICAgICAgICAgICAmJiAhKG5lYXJlc3REZXNjTm9kZS5pc0lubGluZSAmJiBpc09uRWRnZShkb21TZWwuZm9jdXNOb2RlLCBkb21TZWwuZm9jdXNPZmZzZXQsIG5lYXJlc3REZXNjLmRvbSkpKSB7XG4gICAgICAgICAgICBsZXQgcG9zID0gbmVhcmVzdERlc2MucG9zQmVmb3JlO1xuICAgICAgICAgICAgc2VsZWN0aW9uID0gbmV3IE5vZGVTZWxlY3Rpb24oaGVhZCA9PSBwb3MgPyAkaGVhZCA6IGRvYy5yZXNvbHZlKHBvcykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoZG9tU2VsIGluc3RhbmNlb2Ygdmlldy5kb20ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5TZWxlY3Rpb24gJiYgZG9tU2VsLnJhbmdlQ291bnQgPiAxKSB7XG4gICAgICAgICAgICBsZXQgbWluID0gaGVhZCwgbWF4ID0gaGVhZDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZG9tU2VsLnJhbmdlQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCByYW5nZSA9IGRvbVNlbC5nZXRSYW5nZUF0KGkpO1xuICAgICAgICAgICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgdmlldy5kb2NWaWV3LnBvc0Zyb21ET00ocmFuZ2Uuc3RhcnRDb250YWluZXIsIHJhbmdlLnN0YXJ0T2Zmc2V0LCAxKSk7XG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCB2aWV3LmRvY1ZpZXcucG9zRnJvbURPTShyYW5nZS5lbmRDb250YWluZXIsIHJhbmdlLmVuZE9mZnNldCwgLTEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtaW4gPCAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgW2FuY2hvciwgaGVhZF0gPSBtYXggPT0gdmlldy5zdGF0ZS5zZWxlY3Rpb24uYW5jaG9yID8gW21heCwgbWluXSA6IFttaW4sIG1heF07XG4gICAgICAgICAgICAkaGVhZCA9IGRvYy5yZXNvbHZlKGhlYWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYW5jaG9yID0gdmlldy5kb2NWaWV3LnBvc0Zyb21ET00oZG9tU2VsLmFuY2hvck5vZGUsIGRvbVNlbC5hbmNob3JPZmZzZXQsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbmNob3IgPCAwKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCAkYW5jaG9yID0gZG9jLnJlc29sdmUoYW5jaG9yKTtcbiAgICBpZiAoIXNlbGVjdGlvbikge1xuICAgICAgICBsZXQgYmlhcyA9IG9yaWdpbiA9PSBcInBvaW50ZXJcIiB8fCAodmlldy5zdGF0ZS5zZWxlY3Rpb24uaGVhZCA8ICRoZWFkLnBvcyAmJiAhaW5XaWRnZXQpID8gMSA6IC0xO1xuICAgICAgICBzZWxlY3Rpb24gPSBzZWxlY3Rpb25CZXR3ZWVuKHZpZXcsICRhbmNob3IsICRoZWFkLCBiaWFzKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGlvbjtcbn1cbmZ1bmN0aW9uIGVkaXRvck93bnNTZWxlY3Rpb24odmlldykge1xuICAgIHJldHVybiB2aWV3LmVkaXRhYmxlID8gdmlldy5oYXNGb2N1cygpIDpcbiAgICAgICAgaGFzU2VsZWN0aW9uKHZpZXcpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5jb250YWlucyh2aWV3LmRvbSk7XG59XG5mdW5jdGlvbiBzZWxlY3Rpb25Ub0RPTSh2aWV3LCBmb3JjZSA9IGZhbHNlKSB7XG4gICAgbGV0IHNlbCA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uO1xuICAgIHN5bmNOb2RlU2VsZWN0aW9uKHZpZXcsIHNlbCk7XG4gICAgaWYgKCFlZGl0b3JPd25zU2VsZWN0aW9uKHZpZXcpKVxuICAgICAgICByZXR1cm47XG4gICAgLy8gVGhlIGRlbGF5ZWQgZHJhZyBzZWxlY3Rpb24gY2F1c2VzIGlzc3VlcyB3aXRoIENlbGwgU2VsZWN0aW9uc1xuICAgIC8vIGluIFNhZmFyaS4gQW5kIHRoZSBkcmFnIHNlbGVjdGlvbiBkZWxheSBpcyB0byB3b3JrYXJvbmQgaXNzdWVzXG4gICAgLy8gd2hpY2ggb25seSBwcmVzZW50IGluIENocm9tZS5cbiAgICBpZiAoIWZvcmNlICYmIHZpZXcuaW5wdXQubW91c2VEb3duICYmIHZpZXcuaW5wdXQubW91c2VEb3duLmFsbG93RGVmYXVsdCAmJiBjaHJvbWUpIHtcbiAgICAgICAgbGV0IGRvbVNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uUmFuZ2UoKSwgY3VyU2VsID0gdmlldy5kb21PYnNlcnZlci5jdXJyZW50U2VsZWN0aW9uO1xuICAgICAgICBpZiAoZG9tU2VsLmFuY2hvck5vZGUgJiYgY3VyU2VsLmFuY2hvck5vZGUgJiZcbiAgICAgICAgICAgIGlzRXF1aXZhbGVudFBvc2l0aW9uKGRvbVNlbC5hbmNob3JOb2RlLCBkb21TZWwuYW5jaG9yT2Zmc2V0LCBjdXJTZWwuYW5jaG9yTm9kZSwgY3VyU2VsLmFuY2hvck9mZnNldCkpIHtcbiAgICAgICAgICAgIHZpZXcuaW5wdXQubW91c2VEb3duLmRlbGF5ZWRTZWxlY3Rpb25TeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgIHZpZXcuZG9tT2JzZXJ2ZXIuc2V0Q3VyU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmlldy5kb21PYnNlcnZlci5kaXNjb25uZWN0U2VsZWN0aW9uKCk7XG4gICAgaWYgKHZpZXcuY3Vyc29yV3JhcHBlcikge1xuICAgICAgICBzZWxlY3RDdXJzb3JXcmFwcGVyKHZpZXcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IHsgYW5jaG9yLCBoZWFkIH0gPSBzZWwsIHJlc2V0RWRpdGFibGVGcm9tLCByZXNldEVkaXRhYmxlVG87XG4gICAgICAgIGlmIChicm9rZW5TZWxlY3RCZXR3ZWVuVW5lZGl0YWJsZSAmJiAhKHNlbCBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24pKSB7XG4gICAgICAgICAgICBpZiAoIXNlbC4kZnJvbS5wYXJlbnQuaW5saW5lQ29udGVudClcbiAgICAgICAgICAgICAgICByZXNldEVkaXRhYmxlRnJvbSA9IHRlbXBvcmFyaWx5RWRpdGFibGVOZWFyKHZpZXcsIHNlbC5mcm9tKTtcbiAgICAgICAgICAgIGlmICghc2VsLmVtcHR5ICYmICFzZWwuJGZyb20ucGFyZW50LmlubGluZUNvbnRlbnQpXG4gICAgICAgICAgICAgICAgcmVzZXRFZGl0YWJsZVRvID0gdGVtcG9yYXJpbHlFZGl0YWJsZU5lYXIodmlldywgc2VsLnRvKTtcbiAgICAgICAgfVxuICAgICAgICB2aWV3LmRvY1ZpZXcuc2V0U2VsZWN0aW9uKGFuY2hvciwgaGVhZCwgdmlldywgZm9yY2UpO1xuICAgICAgICBpZiAoYnJva2VuU2VsZWN0QmV0d2VlblVuZWRpdGFibGUpIHtcbiAgICAgICAgICAgIGlmIChyZXNldEVkaXRhYmxlRnJvbSlcbiAgICAgICAgICAgICAgICByZXNldEVkaXRhYmxlKHJlc2V0RWRpdGFibGVGcm9tKTtcbiAgICAgICAgICAgIGlmIChyZXNldEVkaXRhYmxlVG8pXG4gICAgICAgICAgICAgICAgcmVzZXRFZGl0YWJsZShyZXNldEVkaXRhYmxlVG8pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWwudmlzaWJsZSkge1xuICAgICAgICAgICAgdmlldy5kb20uY2xhc3NMaXN0LnJlbW92ZShcIlByb3NlTWlycm9yLWhpZGVzZWxlY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2aWV3LmRvbS5jbGFzc0xpc3QuYWRkKFwiUHJvc2VNaXJyb3ItaGlkZXNlbGVjdGlvblwiKTtcbiAgICAgICAgICAgIGlmIChcIm9uc2VsZWN0aW9uY2hhbmdlXCIgaW4gZG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NPblNlbGVjdGlvbkNoYW5nZSh2aWV3KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2aWV3LmRvbU9ic2VydmVyLnNldEN1clNlbGVjdGlvbigpO1xuICAgIHZpZXcuZG9tT2JzZXJ2ZXIuY29ubmVjdFNlbGVjdGlvbigpO1xufVxuLy8gS2x1ZGdlIHRvIHdvcmsgYXJvdW5kIFdlYmtpdCBub3QgYWxsb3dpbmcgYSBzZWxlY3Rpb24gdG8gc3RhcnQvZW5kXG4vLyBiZXR3ZWVuIG5vbi1lZGl0YWJsZSBibG9jayBub2Rlcy4gV2UgYnJpZWZseSBtYWtlIHNvbWV0aGluZ1xuLy8gZWRpdGFibGUsIHNldCB0aGUgc2VsZWN0aW9uLCB0aGVuIHNldCBpdCB1bmVkaXRhYmxlIGFnYWluLlxuY29uc3QgYnJva2VuU2VsZWN0QmV0d2VlblVuZWRpdGFibGUgPSBzYWZhcmkgfHwgY2hyb21lICYmIGNocm9tZV92ZXJzaW9uIDwgNjM7XG5mdW5jdGlvbiB0ZW1wb3JhcmlseUVkaXRhYmxlTmVhcih2aWV3LCBwb3MpIHtcbiAgICBsZXQgeyBub2RlLCBvZmZzZXQgfSA9IHZpZXcuZG9jVmlldy5kb21Gcm9tUG9zKHBvcywgMCk7XG4gICAgbGV0IGFmdGVyID0gb2Zmc2V0IDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA/IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdIDogbnVsbDtcbiAgICBsZXQgYmVmb3JlID0gb2Zmc2V0ID8gbm9kZS5jaGlsZE5vZGVzW29mZnNldCAtIDFdIDogbnVsbDtcbiAgICBpZiAoc2FmYXJpICYmIGFmdGVyICYmIGFmdGVyLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpXG4gICAgICAgIHJldHVybiBzZXRFZGl0YWJsZShhZnRlcik7XG4gICAgaWYgKCghYWZ0ZXIgfHwgYWZ0ZXIuY29udGVudEVkaXRhYmxlID09IFwiZmFsc2VcIikgJiZcbiAgICAgICAgKCFiZWZvcmUgfHwgYmVmb3JlLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpKSB7XG4gICAgICAgIGlmIChhZnRlcilcbiAgICAgICAgICAgIHJldHVybiBzZXRFZGl0YWJsZShhZnRlcik7XG4gICAgICAgIGVsc2UgaWYgKGJlZm9yZSlcbiAgICAgICAgICAgIHJldHVybiBzZXRFZGl0YWJsZShiZWZvcmUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldEVkaXRhYmxlKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmNvbnRlbnRFZGl0YWJsZSA9IFwidHJ1ZVwiO1xuICAgIGlmIChzYWZhcmkgJiYgZWxlbWVudC5kcmFnZ2FibGUpIHtcbiAgICAgICAgZWxlbWVudC5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgICAgZWxlbWVudC53YXNEcmFnZ2FibGUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudDtcbn1cbmZ1bmN0aW9uIHJlc2V0RWRpdGFibGUoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuY29udGVudEVkaXRhYmxlID0gXCJmYWxzZVwiO1xuICAgIGlmIChlbGVtZW50Lndhc0RyYWdnYWJsZSkge1xuICAgICAgICBlbGVtZW50LmRyYWdnYWJsZSA9IHRydWU7XG4gICAgICAgIGVsZW1lbnQud2FzRHJhZ2dhYmxlID0gbnVsbDtcbiAgICB9XG59XG5mdW5jdGlvbiByZW1vdmVDbGFzc09uU2VsZWN0aW9uQ2hhbmdlKHZpZXcpIHtcbiAgICBsZXQgZG9jID0gdmlldy5kb20ub3duZXJEb2N1bWVudDtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdGlvbmNoYW5nZVwiLCB2aWV3LmlucHV0LmhpZGVTZWxlY3Rpb25HdWFyZCk7XG4gICAgbGV0IGRvbVNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uUmFuZ2UoKTtcbiAgICBsZXQgbm9kZSA9IGRvbVNlbC5hbmNob3JOb2RlLCBvZmZzZXQgPSBkb21TZWwuYW5jaG9yT2Zmc2V0O1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsIHZpZXcuaW5wdXQuaGlkZVNlbGVjdGlvbkd1YXJkID0gKCkgPT4ge1xuICAgICAgICBpZiAoZG9tU2VsLmFuY2hvck5vZGUgIT0gbm9kZSB8fCBkb21TZWwuYW5jaG9yT2Zmc2V0ICE9IG9mZnNldCkge1xuICAgICAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzZWxlY3Rpb25jaGFuZ2VcIiwgdmlldy5pbnB1dC5oaWRlU2VsZWN0aW9uR3VhcmQpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlZGl0b3JPd25zU2VsZWN0aW9uKHZpZXcpIHx8IHZpZXcuc3RhdGUuc2VsZWN0aW9uLnZpc2libGUpXG4gICAgICAgICAgICAgICAgICAgIHZpZXcuZG9tLmNsYXNzTGlzdC5yZW1vdmUoXCJQcm9zZU1pcnJvci1oaWRlc2VsZWN0aW9uXCIpO1xuICAgICAgICAgICAgfSwgMjApO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzZWxlY3RDdXJzb3JXcmFwcGVyKHZpZXcpIHtcbiAgICBsZXQgZG9tU2VsID0gdmlldy5kb21TZWxlY3Rpb24oKSwgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIGlmICghZG9tU2VsKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IG5vZGUgPSB2aWV3LmN1cnNvcldyYXBwZXIuZG9tLCBpbWcgPSBub2RlLm5vZGVOYW1lID09IFwiSU1HXCI7XG4gICAgaWYgKGltZylcbiAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZS5wYXJlbnROb2RlLCBkb21JbmRleChub2RlKSArIDEpO1xuICAgIGVsc2VcbiAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgMCk7XG4gICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgZG9tU2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgIGRvbVNlbC5hZGRSYW5nZShyYW5nZSk7XG4gICAgLy8gS2x1ZGdlIHRvIGtpbGwgJ2NvbnRyb2wgc2VsZWN0aW9uJyBpbiBJRTExIHdoZW4gc2VsZWN0aW5nIGFuXG4gICAgLy8gaW52aXNpYmxlIGN1cnNvciB3cmFwcGVyLCBzaW5jZSB0aGF0IHdvdWxkIHJlc3VsdCBpbiB0aG9zZSB3ZWlyZFxuICAgIC8vIHJlc2l6ZSBoYW5kbGVzIGFuZCBhIHNlbGVjdGlvbiB0aGF0IGNvbnNpZGVycyB0aGUgYWJzb2x1dGVseVxuICAgIC8vIHBvc2l0aW9uZWQgd3JhcHBlciwgcmF0aGVyIHRoYW4gdGhlIHJvb3QgZWRpdGFibGUgbm9kZSwgdGhlXG4gICAgLy8gZm9jdXNlZCBlbGVtZW50LlxuICAgIGlmICghaW1nICYmICF2aWV3LnN0YXRlLnNlbGVjdGlvbi52aXNpYmxlICYmIGllICYmIGllX3ZlcnNpb24gPD0gMTEpIHtcbiAgICAgICAgbm9kZS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIG5vZGUuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBzeW5jTm9kZVNlbGVjdGlvbih2aWV3LCBzZWwpIHtcbiAgICBpZiAoc2VsIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbikge1xuICAgICAgICBsZXQgZGVzYyA9IHZpZXcuZG9jVmlldy5kZXNjQXQoc2VsLmZyb20pO1xuICAgICAgICBpZiAoZGVzYyAhPSB2aWV3Lmxhc3RTZWxlY3RlZFZpZXdEZXNjKSB7XG4gICAgICAgICAgICBjbGVhck5vZGVTZWxlY3Rpb24odmlldyk7XG4gICAgICAgICAgICBpZiAoZGVzYylcbiAgICAgICAgICAgICAgICBkZXNjLnNlbGVjdE5vZGUoKTtcbiAgICAgICAgICAgIHZpZXcubGFzdFNlbGVjdGVkVmlld0Rlc2MgPSBkZXNjO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjbGVhck5vZGVTZWxlY3Rpb24odmlldyk7XG4gICAgfVxufVxuLy8gQ2xlYXIgYWxsIERPTSBzdGF0ZWZ1bG5lc3Mgb2YgdGhlIGxhc3Qgbm9kZSBzZWxlY3Rpb24uXG5mdW5jdGlvbiBjbGVhck5vZGVTZWxlY3Rpb24odmlldykge1xuICAgIGlmICh2aWV3Lmxhc3RTZWxlY3RlZFZpZXdEZXNjKSB7XG4gICAgICAgIGlmICh2aWV3Lmxhc3RTZWxlY3RlZFZpZXdEZXNjLnBhcmVudClcbiAgICAgICAgICAgIHZpZXcubGFzdFNlbGVjdGVkVmlld0Rlc2MuZGVzZWxlY3ROb2RlKCk7XG4gICAgICAgIHZpZXcubGFzdFNlbGVjdGVkVmlld0Rlc2MgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0aW9uQmV0d2Vlbih2aWV3LCAkYW5jaG9yLCAkaGVhZCwgYmlhcykge1xuICAgIHJldHVybiB2aWV3LnNvbWVQcm9wKFwiY3JlYXRlU2VsZWN0aW9uQmV0d2VlblwiLCBmID0+IGYodmlldywgJGFuY2hvciwgJGhlYWQpKVxuICAgICAgICB8fCBUZXh0U2VsZWN0aW9uLmJldHdlZW4oJGFuY2hvciwgJGhlYWQsIGJpYXMpO1xufVxuZnVuY3Rpb24gaGFzRm9jdXNBbmRTZWxlY3Rpb24odmlldykge1xuICAgIGlmICh2aWV3LmVkaXRhYmxlICYmICF2aWV3Lmhhc0ZvY3VzKCkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gaGFzU2VsZWN0aW9uKHZpZXcpO1xufVxuZnVuY3Rpb24gaGFzU2VsZWN0aW9uKHZpZXcpIHtcbiAgICBsZXQgc2VsID0gdmlldy5kb21TZWxlY3Rpb25SYW5nZSgpO1xuICAgIGlmICghc2VsLmFuY2hvck5vZGUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICAvLyBGaXJlZm94IHdpbGwgcmFpc2UgJ3Blcm1pc3Npb24gZGVuaWVkJyBlcnJvcnMgd2hlbiBhY2Nlc3NpbmdcbiAgICAgICAgLy8gcHJvcGVydGllcyBvZiBgc2VsLmFuY2hvck5vZGVgIHdoZW4gaXQncyBpbiBhIGdlbmVyYXRlZCBDU1NcbiAgICAgICAgLy8gZWxlbWVudC5cbiAgICAgICAgcmV0dXJuIHZpZXcuZG9tLmNvbnRhaW5zKHNlbC5hbmNob3JOb2RlLm5vZGVUeXBlID09IDMgPyBzZWwuYW5jaG9yTm9kZS5wYXJlbnROb2RlIDogc2VsLmFuY2hvck5vZGUpICYmXG4gICAgICAgICAgICAodmlldy5lZGl0YWJsZSB8fCB2aWV3LmRvbS5jb250YWlucyhzZWwuZm9jdXNOb2RlLm5vZGVUeXBlID09IDMgPyBzZWwuZm9jdXNOb2RlLnBhcmVudE5vZGUgOiBzZWwuZm9jdXNOb2RlKSk7XG4gICAgfVxuICAgIGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBhbmNob3JJblJpZ2h0UGxhY2Uodmlldykge1xuICAgIGxldCBhbmNob3JET00gPSB2aWV3LmRvY1ZpZXcuZG9tRnJvbVBvcyh2aWV3LnN0YXRlLnNlbGVjdGlvbi5hbmNob3IsIDApO1xuICAgIGxldCBkb21TZWwgPSB2aWV3LmRvbVNlbGVjdGlvblJhbmdlKCk7XG4gICAgcmV0dXJuIGlzRXF1aXZhbGVudFBvc2l0aW9uKGFuY2hvckRPTS5ub2RlLCBhbmNob3JET00ub2Zmc2V0LCBkb21TZWwuYW5jaG9yTm9kZSwgZG9tU2VsLmFuY2hvck9mZnNldCk7XG59XG5cbmZ1bmN0aW9uIG1vdmVTZWxlY3Rpb25CbG9jayhzdGF0ZSwgZGlyKSB7XG4gICAgbGV0IHsgJGFuY2hvciwgJGhlYWQgfSA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICBsZXQgJHNpZGUgPSBkaXIgPiAwID8gJGFuY2hvci5tYXgoJGhlYWQpIDogJGFuY2hvci5taW4oJGhlYWQpO1xuICAgIGxldCAkc3RhcnQgPSAhJHNpZGUucGFyZW50LmlubGluZUNvbnRlbnQgPyAkc2lkZSA6ICRzaWRlLmRlcHRoID8gc3RhdGUuZG9jLnJlc29sdmUoZGlyID4gMCA/ICRzaWRlLmFmdGVyKCkgOiAkc2lkZS5iZWZvcmUoKSkgOiBudWxsO1xuICAgIHJldHVybiAkc3RhcnQgJiYgU2VsZWN0aW9uLmZpbmRGcm9tKCRzdGFydCwgZGlyKTtcbn1cbmZ1bmN0aW9uIGFwcGx5KHZpZXcsIHNlbCkge1xuICAgIHZpZXcuZGlzcGF0Y2godmlldy5zdGF0ZS50ci5zZXRTZWxlY3Rpb24oc2VsKS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdEhvcml6b250YWxseSh2aWV3LCBkaXIsIG1vZHMpIHtcbiAgICBsZXQgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XG4gICAgaWYgKHNlbCBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24pIHtcbiAgICAgICAgaWYgKG1vZHMuaW5kZXhPZihcInNcIikgPiAtMSkge1xuICAgICAgICAgICAgbGV0IHsgJGhlYWQgfSA9IHNlbCwgbm9kZSA9ICRoZWFkLnRleHRPZmZzZXQgPyBudWxsIDogZGlyIDwgMCA/ICRoZWFkLm5vZGVCZWZvcmUgOiAkaGVhZC5ub2RlQWZ0ZXI7XG4gICAgICAgICAgICBpZiAoIW5vZGUgfHwgbm9kZS5pc1RleHQgfHwgIW5vZGUuaXNMZWFmKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGxldCAkbmV3SGVhZCA9IHZpZXcuc3RhdGUuZG9jLnJlc29sdmUoJGhlYWQucG9zICsgbm9kZS5ub2RlU2l6ZSAqIChkaXIgPCAwID8gLTEgOiAxKSk7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkodmlldywgbmV3IFRleHRTZWxlY3Rpb24oc2VsLiRhbmNob3IsICRuZXdIZWFkKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXNlbC5lbXB0eSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZpZXcuZW5kT2ZUZXh0YmxvY2soZGlyID4gMCA/IFwiZm9yd2FyZFwiIDogXCJiYWNrd2FyZFwiKSkge1xuICAgICAgICAgICAgbGV0IG5leHQgPSBtb3ZlU2VsZWN0aW9uQmxvY2sodmlldy5zdGF0ZSwgZGlyKTtcbiAgICAgICAgICAgIGlmIChuZXh0ICYmIChuZXh0IGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcGx5KHZpZXcsIG5leHQpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCEobWFjICYmIG1vZHMuaW5kZXhPZihcIm1cIikgPiAtMSkpIHtcbiAgICAgICAgICAgIGxldCAkaGVhZCA9IHNlbC4kaGVhZCwgbm9kZSA9ICRoZWFkLnRleHRPZmZzZXQgPyBudWxsIDogZGlyIDwgMCA/ICRoZWFkLm5vZGVCZWZvcmUgOiAkaGVhZC5ub2RlQWZ0ZXIsIGRlc2M7XG4gICAgICAgICAgICBpZiAoIW5vZGUgfHwgbm9kZS5pc1RleHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgbGV0IG5vZGVQb3MgPSBkaXIgPCAwID8gJGhlYWQucG9zIC0gbm9kZS5ub2RlU2l6ZSA6ICRoZWFkLnBvcztcbiAgICAgICAgICAgIGlmICghKG5vZGUuaXNBdG9tIHx8IChkZXNjID0gdmlldy5kb2NWaWV3LmRlc2NBdChub2RlUG9zKSkgJiYgIWRlc2MuY29udGVudERPTSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKE5vZGVTZWxlY3Rpb24uaXNTZWxlY3RhYmxlKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcGx5KHZpZXcsIG5ldyBOb2RlU2VsZWN0aW9uKGRpciA8IDAgPyB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKCRoZWFkLnBvcyAtIG5vZGUubm9kZVNpemUpIDogJGhlYWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHdlYmtpdCkge1xuICAgICAgICAgICAgICAgIC8vIENocm9tZSBhbmQgU2FmYXJpIHdpbGwgaW50cm9kdWNlIGV4dHJhIHBvaW50bGVzcyBjdXJzb3JcbiAgICAgICAgICAgICAgICAvLyBwb3NpdGlvbnMgYXJvdW5kIGlubGluZSB1bmVkaXRhYmxlIG5vZGVzLCBzbyB3ZSBoYXZlIHRvXG4gICAgICAgICAgICAgICAgLy8gdGFrZSBvdmVyIGFuZCBtb3ZlIHRoZSBjdXJzb3IgcGFzdCB0aGVtICgjOTM3KVxuICAgICAgICAgICAgICAgIHJldHVybiBhcHBseSh2aWV3LCBuZXcgVGV4dFNlbGVjdGlvbih2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGRpciA8IDAgPyBub2RlUG9zIDogbm9kZVBvcyArIG5vZGUubm9kZVNpemUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbiAmJiBzZWwubm9kZS5pc0lubGluZSkge1xuICAgICAgICByZXR1cm4gYXBwbHkodmlldywgbmV3IFRleHRTZWxlY3Rpb24oZGlyID4gMCA/IHNlbC4kdG8gOiBzZWwuJGZyb20pKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBuZXh0ID0gbW92ZVNlbGVjdGlvbkJsb2NrKHZpZXcuc3RhdGUsIGRpcik7XG4gICAgICAgIGlmIChuZXh0KVxuICAgICAgICAgICAgcmV0dXJuIGFwcGx5KHZpZXcsIG5leHQpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gbm9kZUxlbihub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT0gMyA/IG5vZGUubm9kZVZhbHVlLmxlbmd0aCA6IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7XG59XG5mdW5jdGlvbiBpc0lnbm9yYWJsZShkb20sIGRpcikge1xuICAgIGxldCBkZXNjID0gZG9tLnBtVmlld0Rlc2M7XG4gICAgcmV0dXJuIGRlc2MgJiYgZGVzYy5zaXplID09IDAgJiYgKGRpciA8IDAgfHwgZG9tLm5leHRTaWJsaW5nIHx8IGRvbS5ub2RlTmFtZSAhPSBcIkJSXCIpO1xufVxuZnVuY3Rpb24gc2tpcElnbm9yZWROb2Rlcyh2aWV3LCBkaXIpIHtcbiAgICByZXR1cm4gZGlyIDwgMCA/IHNraXBJZ25vcmVkTm9kZXNCZWZvcmUodmlldykgOiBza2lwSWdub3JlZE5vZGVzQWZ0ZXIodmlldyk7XG59XG4vLyBNYWtlIHN1cmUgdGhlIGN1cnNvciBpc24ndCBkaXJlY3RseSBhZnRlciBvbmUgb3IgbW9yZSBpZ25vcmVkXG4vLyBub2Rlcywgd2hpY2ggd2lsbCBjb25mdXNlIHRoZSBicm93c2VyJ3MgY3Vyc29yIG1vdGlvbiBsb2dpYy5cbmZ1bmN0aW9uIHNraXBJZ25vcmVkTm9kZXNCZWZvcmUodmlldykge1xuICAgIGxldCBzZWwgPSB2aWV3LmRvbVNlbGVjdGlvblJhbmdlKCk7XG4gICAgbGV0IG5vZGUgPSBzZWwuZm9jdXNOb2RlLCBvZmZzZXQgPSBzZWwuZm9jdXNPZmZzZXQ7XG4gICAgaWYgKCFub2RlKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IG1vdmVOb2RlLCBtb3ZlT2Zmc2V0LCBmb3JjZSA9IGZhbHNlO1xuICAgIC8vIEdlY2tvIHdpbGwgZG8gb2RkIHRoaW5ncyB3aGVuIHRoZSBzZWxlY3Rpb24gaXMgZGlyZWN0bHkgaW4gZnJvbnRcbiAgICAvLyBvZiBhIG5vbi1lZGl0YWJsZSBub2RlLCBzbyBpbiB0aGF0IGNhc2UsIG1vdmUgaXQgaW50byB0aGUgbmV4dFxuICAgIC8vIG5vZGUgaWYgcG9zc2libGUuIElzc3VlIHByb3NlbWlycm9yL3Byb3NlbWlycm9yIzgzMi5cbiAgICBpZiAoZ2Vja28gJiYgbm9kZS5ub2RlVHlwZSA9PSAxICYmIG9mZnNldCA8IG5vZGVMZW4obm9kZSkgJiYgaXNJZ25vcmFibGUobm9kZS5jaGlsZE5vZGVzW29mZnNldF0sIC0xKSlcbiAgICAgICAgZm9yY2UgPSB0cnVlO1xuICAgIGZvciAoOzspIHtcbiAgICAgICAgaWYgKG9mZnNldCA+IDApIHtcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9IDEpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBiZWZvcmUgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0IC0gMV07XG4gICAgICAgICAgICAgICAgaWYgKGlzSWdub3JhYmxlKGJlZm9yZSwgLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdmVOb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgbW92ZU9mZnNldCA9IC0tb2Zmc2V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChiZWZvcmUubm9kZVR5cGUgPT0gMykge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gYmVmb3JlO1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBub2RlLm5vZGVWYWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNCbG9ja05vZGUobm9kZSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IHByZXYgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgIHdoaWxlIChwcmV2ICYmIGlzSWdub3JhYmxlKHByZXYsIC0xKSkge1xuICAgICAgICAgICAgICAgIG1vdmVOb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIG1vdmVPZmZzZXQgPSBkb21JbmRleChwcmV2KTtcbiAgICAgICAgICAgICAgICBwcmV2ID0gcHJldi5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIGlmIChub2RlID09IHZpZXcuZG9tKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHByZXY7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gbm9kZUxlbihub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZm9yY2UpXG4gICAgICAgIHNldFNlbEZvY3VzKHZpZXcsIG5vZGUsIG9mZnNldCk7XG4gICAgZWxzZSBpZiAobW92ZU5vZGUpXG4gICAgICAgIHNldFNlbEZvY3VzKHZpZXcsIG1vdmVOb2RlLCBtb3ZlT2Zmc2V0KTtcbn1cbi8vIE1ha2Ugc3VyZSB0aGUgY3Vyc29yIGlzbid0IGRpcmVjdGx5IGJlZm9yZSBvbmUgb3IgbW9yZSBpZ25vcmVkXG4vLyBub2Rlcy5cbmZ1bmN0aW9uIHNraXBJZ25vcmVkTm9kZXNBZnRlcih2aWV3KSB7XG4gICAgbGV0IHNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uUmFuZ2UoKTtcbiAgICBsZXQgbm9kZSA9IHNlbC5mb2N1c05vZGUsIG9mZnNldCA9IHNlbC5mb2N1c09mZnNldDtcbiAgICBpZiAoIW5vZGUpXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgbGVuID0gbm9kZUxlbihub2RlKTtcbiAgICBsZXQgbW92ZU5vZGUsIG1vdmVPZmZzZXQ7XG4gICAgZm9yICg7Oykge1xuICAgICAgICBpZiAob2Zmc2V0IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSAhPSAxKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgbGV0IGFmdGVyID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldF07XG4gICAgICAgICAgICBpZiAoaXNJZ25vcmFibGUoYWZ0ZXIsIDEpKSB7XG4gICAgICAgICAgICAgICAgbW92ZU5vZGUgPSBub2RlO1xuICAgICAgICAgICAgICAgIG1vdmVPZmZzZXQgPSArK29mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0Jsb2NrTm9kZShub2RlKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB3aGlsZSAobmV4dCAmJiBpc0lnbm9yYWJsZShuZXh0LCAxKSkge1xuICAgICAgICAgICAgICAgIG1vdmVOb2RlID0gbmV4dC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIG1vdmVPZmZzZXQgPSBkb21JbmRleChuZXh0KSArIDE7XG4gICAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIGlmIChub2RlID09IHZpZXcuZG9tKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBsZW4gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICBsZW4gPSBub2RlTGVuKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChtb3ZlTm9kZSlcbiAgICAgICAgc2V0U2VsRm9jdXModmlldywgbW92ZU5vZGUsIG1vdmVPZmZzZXQpO1xufVxuZnVuY3Rpb24gaXNCbG9ja05vZGUoZG9tKSB7XG4gICAgbGV0IGRlc2MgPSBkb20ucG1WaWV3RGVzYztcbiAgICByZXR1cm4gZGVzYyAmJiBkZXNjLm5vZGUgJiYgZGVzYy5ub2RlLmlzQmxvY2s7XG59XG5mdW5jdGlvbiB0ZXh0Tm9kZUFmdGVyKG5vZGUsIG9mZnNldCkge1xuICAgIHdoaWxlIChub2RlICYmIG9mZnNldCA9PSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoICYmICFoYXNCbG9ja0Rlc2Mobm9kZSkpIHtcbiAgICAgICAgb2Zmc2V0ID0gZG9tSW5kZXgobm9kZSkgKyAxO1xuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgICB3aGlsZSAobm9kZSAmJiBvZmZzZXQgPCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIGxldCBuZXh0ID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldF07XG4gICAgICAgIGlmIChuZXh0Lm5vZGVUeXBlID09IDMpXG4gICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgaWYgKG5leHQubm9kZVR5cGUgPT0gMSAmJiBuZXh0LmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICAgIG9mZnNldCA9IDA7XG4gICAgfVxufVxuZnVuY3Rpb24gdGV4dE5vZGVCZWZvcmUobm9kZSwgb2Zmc2V0KSB7XG4gICAgd2hpbGUgKG5vZGUgJiYgIW9mZnNldCAmJiAhaGFzQmxvY2tEZXNjKG5vZGUpKSB7XG4gICAgICAgIG9mZnNldCA9IGRvbUluZGV4KG5vZGUpO1xuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgICB3aGlsZSAobm9kZSAmJiBvZmZzZXQpIHtcbiAgICAgICAgbGV0IG5leHQgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0IC0gMV07XG4gICAgICAgIGlmIChuZXh0Lm5vZGVUeXBlID09IDMpXG4gICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgaWYgKG5leHQubm9kZVR5cGUgPT0gMSAmJiBuZXh0LmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICAgIG9mZnNldCA9IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0U2VsRm9jdXModmlldywgbm9kZSwgb2Zmc2V0KSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgIT0gMykge1xuICAgICAgICBsZXQgYmVmb3JlLCBhZnRlcjtcbiAgICAgICAgaWYgKGFmdGVyID0gdGV4dE5vZGVBZnRlcihub2RlLCBvZmZzZXQpKSB7XG4gICAgICAgICAgICBub2RlID0gYWZ0ZXI7XG4gICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJlZm9yZSA9IHRleHROb2RlQmVmb3JlKG5vZGUsIG9mZnNldCkpIHtcbiAgICAgICAgICAgIG5vZGUgPSBiZWZvcmU7XG4gICAgICAgICAgICBvZmZzZXQgPSBiZWZvcmUubm9kZVZhbHVlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgc2VsID0gdmlldy5kb21TZWxlY3Rpb24oKTtcbiAgICBpZiAoIXNlbClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChzZWxlY3Rpb25Db2xsYXBzZWQoc2VsKSkge1xuICAgICAgICBsZXQgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICByYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgb2Zmc2V0KTtcbiAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzZWwuZXh0ZW5kKSB7XG4gICAgICAgIHNlbC5leHRlbmQobm9kZSwgb2Zmc2V0KTtcbiAgICB9XG4gICAgdmlldy5kb21PYnNlcnZlci5zZXRDdXJTZWxlY3Rpb24oKTtcbiAgICBsZXQgeyBzdGF0ZSB9ID0gdmlldztcbiAgICAvLyBJZiBubyBzdGF0ZSB1cGRhdGUgZW5kcyB1cCBoYXBwZW5pbmcsIHJlc2V0IHRoZSBzZWxlY3Rpb24uXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh2aWV3LnN0YXRlID09IHN0YXRlKVxuICAgICAgICAgICAgc2VsZWN0aW9uVG9ET00odmlldyk7XG4gICAgfSwgNTApO1xufVxuZnVuY3Rpb24gZmluZERpcmVjdGlvbih2aWV3LCBwb3MpIHtcbiAgICBsZXQgJHBvcyA9IHZpZXcuc3RhdGUuZG9jLnJlc29sdmUocG9zKTtcbiAgICBpZiAoIShjaHJvbWUgfHwgd2luZG93cykgJiYgJHBvcy5wYXJlbnQuaW5saW5lQ29udGVudCkge1xuICAgICAgICBsZXQgY29vcmRzID0gdmlldy5jb29yZHNBdFBvcyhwb3MpO1xuICAgICAgICBpZiAocG9zID4gJHBvcy5zdGFydCgpKSB7XG4gICAgICAgICAgICBsZXQgYmVmb3JlID0gdmlldy5jb29yZHNBdFBvcyhwb3MgLSAxKTtcbiAgICAgICAgICAgIGxldCBtaWQgPSAoYmVmb3JlLnRvcCArIGJlZm9yZS5ib3R0b20pIC8gMjtcbiAgICAgICAgICAgIGlmIChtaWQgPiBjb29yZHMudG9wICYmIG1pZCA8IGNvb3Jkcy5ib3R0b20gJiYgTWF0aC5hYnMoYmVmb3JlLmxlZnQgLSBjb29yZHMubGVmdCkgPiAxKVxuICAgICAgICAgICAgICAgIHJldHVybiBiZWZvcmUubGVmdCA8IGNvb3Jkcy5sZWZ0ID8gXCJsdHJcIiA6IFwicnRsXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvcyA8ICRwb3MuZW5kKCkpIHtcbiAgICAgICAgICAgIGxldCBhZnRlciA9IHZpZXcuY29vcmRzQXRQb3MocG9zICsgMSk7XG4gICAgICAgICAgICBsZXQgbWlkID0gKGFmdGVyLnRvcCArIGFmdGVyLmJvdHRvbSkgLyAyO1xuICAgICAgICAgICAgaWYgKG1pZCA+IGNvb3Jkcy50b3AgJiYgbWlkIDwgY29vcmRzLmJvdHRvbSAmJiBNYXRoLmFicyhhZnRlci5sZWZ0IC0gY29vcmRzLmxlZnQpID4gMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gYWZ0ZXIubGVmdCA+IGNvb3Jkcy5sZWZ0ID8gXCJsdHJcIiA6IFwicnRsXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGNvbXB1dGVkID0gZ2V0Q29tcHV0ZWRTdHlsZSh2aWV3LmRvbSkuZGlyZWN0aW9uO1xuICAgIHJldHVybiBjb21wdXRlZCA9PSBcInJ0bFwiID8gXCJydGxcIiA6IFwibHRyXCI7XG59XG4vLyBDaGVjayB3aGV0aGVyIHZlcnRpY2FsIHNlbGVjdGlvbiBtb3Rpb24gd291bGQgaW52b2x2ZSBub2RlXG4vLyBzZWxlY3Rpb25zLiBJZiBzbywgYXBwbHkgaXQgKGlmIG5vdCwgdGhlIHJlc3VsdCBpcyBsZWZ0IHRvIHRoZVxuLy8gYnJvd3NlcilcbmZ1bmN0aW9uIHNlbGVjdFZlcnRpY2FsbHkodmlldywgZGlyLCBtb2RzKSB7XG4gICAgbGV0IHNlbCA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uO1xuICAgIGlmIChzZWwgaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uICYmICFzZWwuZW1wdHkgfHwgbW9kcy5pbmRleE9mKFwic1wiKSA+IC0xKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKG1hYyAmJiBtb2RzLmluZGV4T2YoXCJtXCIpID4gLTEpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgeyAkZnJvbSwgJHRvIH0gPSBzZWw7XG4gICAgaWYgKCEkZnJvbS5wYXJlbnQuaW5saW5lQ29udGVudCB8fCB2aWV3LmVuZE9mVGV4dGJsb2NrKGRpciA8IDAgPyBcInVwXCIgOiBcImRvd25cIikpIHtcbiAgICAgICAgbGV0IG5leHQgPSBtb3ZlU2VsZWN0aW9uQmxvY2sodmlldy5zdGF0ZSwgZGlyKTtcbiAgICAgICAgaWYgKG5leHQgJiYgKG5leHQgaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uKSlcbiAgICAgICAgICAgIHJldHVybiBhcHBseSh2aWV3LCBuZXh0KTtcbiAgICB9XG4gICAgaWYgKCEkZnJvbS5wYXJlbnQuaW5saW5lQ29udGVudCkge1xuICAgICAgICBsZXQgc2lkZSA9IGRpciA8IDAgPyAkZnJvbSA6ICR0bztcbiAgICAgICAgbGV0IGJleW9uZCA9IHNlbCBpbnN0YW5jZW9mIEFsbFNlbGVjdGlvbiA/IFNlbGVjdGlvbi5uZWFyKHNpZGUsIGRpcikgOiBTZWxlY3Rpb24uZmluZEZyb20oc2lkZSwgZGlyKTtcbiAgICAgICAgcmV0dXJuIGJleW9uZCA/IGFwcGx5KHZpZXcsIGJleW9uZCkgOiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gc3RvcE5hdGl2ZUhvcml6b250YWxEZWxldGUodmlldywgZGlyKSB7XG4gICAgaWYgKCEodmlldy5zdGF0ZS5zZWxlY3Rpb24gaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgbGV0IHsgJGhlYWQsICRhbmNob3IsIGVtcHR5IH0gPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICBpZiAoISRoZWFkLnNhbWVQYXJlbnQoJGFuY2hvcikpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICghZW1wdHkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodmlldy5lbmRPZlRleHRibG9jayhkaXIgPiAwID8gXCJmb3J3YXJkXCIgOiBcImJhY2t3YXJkXCIpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBsZXQgbmV4dE5vZGUgPSAhJGhlYWQudGV4dE9mZnNldCAmJiAoZGlyIDwgMCA/ICRoZWFkLm5vZGVCZWZvcmUgOiAkaGVhZC5ub2RlQWZ0ZXIpO1xuICAgIGlmIChuZXh0Tm9kZSAmJiAhbmV4dE5vZGUuaXNUZXh0KSB7XG4gICAgICAgIGxldCB0ciA9IHZpZXcuc3RhdGUudHI7XG4gICAgICAgIGlmIChkaXIgPCAwKVxuICAgICAgICAgICAgdHIuZGVsZXRlKCRoZWFkLnBvcyAtIG5leHROb2RlLm5vZGVTaXplLCAkaGVhZC5wb3MpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0ci5kZWxldGUoJGhlYWQucG9zLCAkaGVhZC5wb3MgKyBuZXh0Tm9kZS5ub2RlU2l6ZSk7XG4gICAgICAgIHZpZXcuZGlzcGF0Y2godHIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gc3dpdGNoRWRpdGFibGUodmlldywgbm9kZSwgc3RhdGUpIHtcbiAgICB2aWV3LmRvbU9ic2VydmVyLnN0b3AoKTtcbiAgICBub2RlLmNvbnRlbnRFZGl0YWJsZSA9IHN0YXRlO1xuICAgIHZpZXcuZG9tT2JzZXJ2ZXIuc3RhcnQoKTtcbn1cbi8vIElzc3VlICM4NjcgLyAjMTA5MCAvIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTkwMzgyMVxuLy8gSW4gd2hpY2ggU2FmYXJpIChhbmQgYXQgc29tZSBwb2ludCBpbiB0aGUgcGFzdCwgQ2hyb21lKSBkb2VzIHJlYWxseVxuLy8gd3JvbmcgdGhpbmdzIHdoZW4gdGhlIGRvd24gYXJyb3cgaXMgcHJlc3NlZCB3aGVuIHRoZSBjdXJzb3IgaXNcbi8vIGRpcmVjdGx5IGF0IHRoZSBzdGFydCBvZiBhIHRleHRibG9jayBhbmQgaGFzIGFuIHVuZWRpdGFibGUgbm9kZVxuLy8gYWZ0ZXIgaXRcbmZ1bmN0aW9uIHNhZmFyaURvd25BcnJvd0J1Zyh2aWV3KSB7XG4gICAgaWYgKCFzYWZhcmkgfHwgdmlldy5zdGF0ZS5zZWxlY3Rpb24uJGhlYWQucGFyZW50T2Zmc2V0ID4gMClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCB7IGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQgfSA9IHZpZXcuZG9tU2VsZWN0aW9uUmFuZ2UoKTtcbiAgICBpZiAoZm9jdXNOb2RlICYmIGZvY3VzTm9kZS5ub2RlVHlwZSA9PSAxICYmIGZvY3VzT2Zmc2V0ID09IDAgJiZcbiAgICAgICAgZm9jdXNOb2RlLmZpcnN0Q2hpbGQgJiYgZm9jdXNOb2RlLmZpcnN0Q2hpbGQuY29udGVudEVkaXRhYmxlID09IFwiZmFsc2VcIikge1xuICAgICAgICBsZXQgY2hpbGQgPSBmb2N1c05vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgc3dpdGNoRWRpdGFibGUodmlldywgY2hpbGQsIFwidHJ1ZVwiKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBzd2l0Y2hFZGl0YWJsZSh2aWV3LCBjaGlsZCwgXCJmYWxzZVwiKSwgMjApO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vLyBBIGJhY2tkcm9wIGtleSBtYXBwaW5nIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGFsd2F5cyBzdXBwcmVzcyBrZXlzXG4vLyB0aGF0IGhhdmUgYSBkYW5nZXJvdXMgZGVmYXVsdCBlZmZlY3QsIGV2ZW4gaWYgdGhlIGNvbW1hbmRzIHRoZXkgYXJlXG4vLyBib3VuZCB0byByZXR1cm4gZmFsc2UsIGFuZCB0byBtYWtlIHN1cmUgdGhhdCBjdXJzb3ItbW90aW9uIGtleXNcbi8vIGZpbmQgYSBjdXJzb3IgKGFzIG9wcG9zZWQgdG8gYSBub2RlIHNlbGVjdGlvbikgd2hlbiBwcmVzc2VkLiBGb3Jcbi8vIGN1cnNvci1tb3Rpb24ga2V5cywgdGhlIGNvZGUgaW4gdGhlIGhhbmRsZXJzIGFsc28gdGFrZXMgY2FyZSBvZlxuLy8gYmxvY2sgc2VsZWN0aW9ucy5cbmZ1bmN0aW9uIGdldE1vZHMoZXZlbnQpIHtcbiAgICBsZXQgcmVzdWx0ID0gXCJcIjtcbiAgICBpZiAoZXZlbnQuY3RybEtleSlcbiAgICAgICAgcmVzdWx0ICs9IFwiY1wiO1xuICAgIGlmIChldmVudC5tZXRhS2V5KVxuICAgICAgICByZXN1bHQgKz0gXCJtXCI7XG4gICAgaWYgKGV2ZW50LmFsdEtleSlcbiAgICAgICAgcmVzdWx0ICs9IFwiYVwiO1xuICAgIGlmIChldmVudC5zaGlmdEtleSlcbiAgICAgICAgcmVzdWx0ICs9IFwic1wiO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjYXB0dXJlS2V5RG93bih2aWV3LCBldmVudCkge1xuICAgIGxldCBjb2RlID0gZXZlbnQua2V5Q29kZSwgbW9kcyA9IGdldE1vZHMoZXZlbnQpO1xuICAgIGlmIChjb2RlID09IDggfHwgKG1hYyAmJiBjb2RlID09IDcyICYmIG1vZHMgPT0gXCJjXCIpKSB7IC8vIEJhY2tzcGFjZSwgQ3RybC1oIG9uIE1hY1xuICAgICAgICByZXR1cm4gc3RvcE5hdGl2ZUhvcml6b250YWxEZWxldGUodmlldywgLTEpIHx8IHNraXBJZ25vcmVkTm9kZXModmlldywgLTEpO1xuICAgIH1cbiAgICBlbHNlIGlmICgoY29kZSA9PSA0NiAmJiAhZXZlbnQuc2hpZnRLZXkpIHx8IChtYWMgJiYgY29kZSA9PSA2OCAmJiBtb2RzID09IFwiY1wiKSkgeyAvLyBEZWxldGUsIEN0cmwtZCBvbiBNYWNcbiAgICAgICAgcmV0dXJuIHN0b3BOYXRpdmVIb3Jpem9udGFsRGVsZXRlKHZpZXcsIDEpIHx8IHNraXBJZ25vcmVkTm9kZXModmlldywgMSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvZGUgPT0gMTMgfHwgY29kZSA9PSAyNykgeyAvLyBFbnRlciwgRXNjXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2RlID09IDM3IHx8IChtYWMgJiYgY29kZSA9PSA2NiAmJiBtb2RzID09IFwiY1wiKSkgeyAvLyBMZWZ0IGFycm93LCBDdHJsLWIgb24gTWFjXG4gICAgICAgIGxldCBkaXIgPSBjb2RlID09IDM3ID8gKGZpbmREaXJlY3Rpb24odmlldywgdmlldy5zdGF0ZS5zZWxlY3Rpb24uZnJvbSkgPT0gXCJsdHJcIiA/IC0xIDogMSkgOiAtMTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdEhvcml6b250YWxseSh2aWV3LCBkaXIsIG1vZHMpIHx8IHNraXBJZ25vcmVkTm9kZXModmlldywgZGlyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZSA9PSAzOSB8fCAobWFjICYmIGNvZGUgPT0gNzAgJiYgbW9kcyA9PSBcImNcIikpIHsgLy8gUmlnaHQgYXJyb3csIEN0cmwtZiBvbiBNYWNcbiAgICAgICAgbGV0IGRpciA9IGNvZGUgPT0gMzkgPyAoZmluZERpcmVjdGlvbih2aWV3LCB2aWV3LnN0YXRlLnNlbGVjdGlvbi5mcm9tKSA9PSBcImx0clwiID8gMSA6IC0xKSA6IDE7XG4gICAgICAgIHJldHVybiBzZWxlY3RIb3Jpem9udGFsbHkodmlldywgZGlyLCBtb2RzKSB8fCBza2lwSWdub3JlZE5vZGVzKHZpZXcsIGRpcik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNvZGUgPT0gMzggfHwgKG1hYyAmJiBjb2RlID09IDgwICYmIG1vZHMgPT0gXCJjXCIpKSB7IC8vIFVwIGFycm93LCBDdHJsLXAgb24gTWFjXG4gICAgICAgIHJldHVybiBzZWxlY3RWZXJ0aWNhbGx5KHZpZXcsIC0xLCBtb2RzKSB8fCBza2lwSWdub3JlZE5vZGVzKHZpZXcsIC0xKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZSA9PSA0MCB8fCAobWFjICYmIGNvZGUgPT0gNzggJiYgbW9kcyA9PSBcImNcIikpIHsgLy8gRG93biBhcnJvdywgQ3RybC1uIG9uIE1hY1xuICAgICAgICByZXR1cm4gc2FmYXJpRG93bkFycm93QnVnKHZpZXcpIHx8IHNlbGVjdFZlcnRpY2FsbHkodmlldywgMSwgbW9kcykgfHwgc2tpcElnbm9yZWROb2Rlcyh2aWV3LCAxKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobW9kcyA9PSAobWFjID8gXCJtXCIgOiBcImNcIikgJiZcbiAgICAgICAgKGNvZGUgPT0gNjYgfHwgY29kZSA9PSA3MyB8fCBjb2RlID09IDg5IHx8IGNvZGUgPT0gOTApKSB7IC8vIE1vZC1bYml5el1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplRm9yQ2xpcGJvYXJkKHZpZXcsIHNsaWNlKSB7XG4gICAgdmlldy5zb21lUHJvcChcInRyYW5zZm9ybUNvcGllZFwiLCBmID0+IHsgc2xpY2UgPSBmKHNsaWNlLCB2aWV3KTsgfSk7XG4gICAgbGV0IGNvbnRleHQgPSBbXSwgeyBjb250ZW50LCBvcGVuU3RhcnQsIG9wZW5FbmQgfSA9IHNsaWNlO1xuICAgIHdoaWxlIChvcGVuU3RhcnQgPiAxICYmIG9wZW5FbmQgPiAxICYmIGNvbnRlbnQuY2hpbGRDb3VudCA9PSAxICYmIGNvbnRlbnQuZmlyc3RDaGlsZC5jaGlsZENvdW50ID09IDEpIHtcbiAgICAgICAgb3BlblN0YXJ0LS07XG4gICAgICAgIG9wZW5FbmQtLTtcbiAgICAgICAgbGV0IG5vZGUgPSBjb250ZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGNvbnRleHQucHVzaChub2RlLnR5cGUubmFtZSwgbm9kZS5hdHRycyAhPSBub2RlLnR5cGUuZGVmYXVsdEF0dHJzID8gbm9kZS5hdHRycyA6IG51bGwpO1xuICAgICAgICBjb250ZW50ID0gbm9kZS5jb250ZW50O1xuICAgIH1cbiAgICBsZXQgc2VyaWFsaXplciA9IHZpZXcuc29tZVByb3AoXCJjbGlwYm9hcmRTZXJpYWxpemVyXCIpIHx8IERPTVNlcmlhbGl6ZXIuZnJvbVNjaGVtYSh2aWV3LnN0YXRlLnNjaGVtYSk7XG4gICAgbGV0IGRvYyA9IGRldGFjaGVkRG9jKCksIHdyYXAgPSBkb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB3cmFwLmFwcGVuZENoaWxkKHNlcmlhbGl6ZXIuc2VyaWFsaXplRnJhZ21lbnQoY29udGVudCwgeyBkb2N1bWVudDogZG9jIH0pKTtcbiAgICBsZXQgZmlyc3RDaGlsZCA9IHdyYXAuZmlyc3RDaGlsZCwgbmVlZHNXcmFwLCB3cmFwcGVycyA9IDA7XG4gICAgd2hpbGUgKGZpcnN0Q2hpbGQgJiYgZmlyc3RDaGlsZC5ub2RlVHlwZSA9PSAxICYmIChuZWVkc1dyYXAgPSB3cmFwTWFwW2ZpcnN0Q2hpbGQubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBuZWVkc1dyYXAubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGxldCB3cmFwcGVyID0gZG9jLmNyZWF0ZUVsZW1lbnQobmVlZHNXcmFwW2ldKTtcbiAgICAgICAgICAgIHdoaWxlICh3cmFwLmZpcnN0Q2hpbGQpXG4gICAgICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh3cmFwLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgd3JhcC5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgICAgICAgICAgIHdyYXBwZXJzKys7XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RDaGlsZCA9IHdyYXAuZmlyc3RDaGlsZDtcbiAgICB9XG4gICAgaWYgKGZpcnN0Q2hpbGQgJiYgZmlyc3RDaGlsZC5ub2RlVHlwZSA9PSAxKVxuICAgICAgICBmaXJzdENoaWxkLnNldEF0dHJpYnV0ZShcImRhdGEtcG0tc2xpY2VcIiwgYCR7b3BlblN0YXJ0fSAke29wZW5FbmR9JHt3cmFwcGVycyA/IGAgLSR7d3JhcHBlcnN9YCA6IFwiXCJ9ICR7SlNPTi5zdHJpbmdpZnkoY29udGV4dCl9YCk7XG4gICAgbGV0IHRleHQgPSB2aWV3LnNvbWVQcm9wKFwiY2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXJcIiwgZiA9PiBmKHNsaWNlLCB2aWV3KSkgfHxcbiAgICAgICAgc2xpY2UuY29udGVudC50ZXh0QmV0d2VlbigwLCBzbGljZS5jb250ZW50LnNpemUsIFwiXFxuXFxuXCIpO1xuICAgIHJldHVybiB7IGRvbTogd3JhcCwgdGV4dCwgc2xpY2UgfTtcbn1cbi8vIFJlYWQgYSBzbGljZSBvZiBjb250ZW50IGZyb20gdGhlIGNsaXBib2FyZCAob3IgZHJvcCBkYXRhKS5cbmZ1bmN0aW9uIHBhcnNlRnJvbUNsaXBib2FyZCh2aWV3LCB0ZXh0LCBodG1sLCBwbGFpblRleHQsICRjb250ZXh0KSB7XG4gICAgbGV0IGluQ29kZSA9ICRjb250ZXh0LnBhcmVudC50eXBlLnNwZWMuY29kZTtcbiAgICBsZXQgZG9tLCBzbGljZTtcbiAgICBpZiAoIWh0bWwgJiYgIXRleHQpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBhc1RleHQgPSB0ZXh0ICYmIChwbGFpblRleHQgfHwgaW5Db2RlIHx8ICFodG1sKTtcbiAgICBpZiAoYXNUZXh0KSB7XG4gICAgICAgIHZpZXcuc29tZVByb3AoXCJ0cmFuc2Zvcm1QYXN0ZWRUZXh0XCIsIGYgPT4geyB0ZXh0ID0gZih0ZXh0LCBpbkNvZGUgfHwgcGxhaW5UZXh0LCB2aWV3KTsgfSk7XG4gICAgICAgIGlmIChpbkNvZGUpXG4gICAgICAgICAgICByZXR1cm4gdGV4dCA/IG5ldyBTbGljZShGcmFnbWVudC5mcm9tKHZpZXcuc3RhdGUuc2NoZW1hLnRleHQodGV4dC5yZXBsYWNlKC9cXHJcXG4/L2csIFwiXFxuXCIpKSksIDAsIDApIDogU2xpY2UuZW1wdHk7XG4gICAgICAgIGxldCBwYXJzZWQgPSB2aWV3LnNvbWVQcm9wKFwiY2xpcGJvYXJkVGV4dFBhcnNlclwiLCBmID0+IGYodGV4dCwgJGNvbnRleHQsIHBsYWluVGV4dCwgdmlldykpO1xuICAgICAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgICAgICBzbGljZSA9IHBhcnNlZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBtYXJrcyA9ICRjb250ZXh0Lm1hcmtzKCk7XG4gICAgICAgICAgICBsZXQgeyBzY2hlbWEgfSA9IHZpZXcuc3RhdGUsIHNlcmlhbGl6ZXIgPSBET01TZXJpYWxpemVyLmZyb21TY2hlbWEoc2NoZW1hKTtcbiAgICAgICAgICAgIGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB0ZXh0LnNwbGl0KC8oPzpcXHJcXG4/fFxcbikrLykuZm9yRWFjaChibG9jayA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHAgPSBkb20uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIikpO1xuICAgICAgICAgICAgICAgIGlmIChibG9jaylcbiAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmRDaGlsZChzZXJpYWxpemVyLnNlcmlhbGl6ZU5vZGUoc2NoZW1hLnRleHQoYmxvY2ssIG1hcmtzKSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZpZXcuc29tZVByb3AoXCJ0cmFuc2Zvcm1QYXN0ZWRIVE1MXCIsIGYgPT4geyBodG1sID0gZihodG1sLCB2aWV3KTsgfSk7XG4gICAgICAgIGRvbSA9IHJlYWRIVE1MKGh0bWwpO1xuICAgICAgICBpZiAod2Via2l0KVxuICAgICAgICAgICAgcmVzdG9yZVJlcGxhY2VkU3BhY2VzKGRvbSk7XG4gICAgfVxuICAgIGxldCBjb250ZXh0Tm9kZSA9IGRvbSAmJiBkb20ucXVlcnlTZWxlY3RvcihcIltkYXRhLXBtLXNsaWNlXVwiKTtcbiAgICBsZXQgc2xpY2VEYXRhID0gY29udGV4dE5vZGUgJiYgL14oXFxkKykgKFxcZCspKD86IC0oXFxkKykpPyAoLiopLy5leGVjKGNvbnRleHROb2RlLmdldEF0dHJpYnV0ZShcImRhdGEtcG0tc2xpY2VcIikgfHwgXCJcIik7XG4gICAgaWYgKHNsaWNlRGF0YSAmJiBzbGljZURhdGFbM10pXG4gICAgICAgIGZvciAobGV0IGkgPSArc2xpY2VEYXRhWzNdOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBkb20uZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIHdoaWxlIChjaGlsZCAmJiBjaGlsZC5ub2RlVHlwZSAhPSAxKVxuICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBpZiAoIWNoaWxkKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZG9tID0gY2hpbGQ7XG4gICAgICAgIH1cbiAgICBpZiAoIXNsaWNlKSB7XG4gICAgICAgIGxldCBwYXJzZXIgPSB2aWV3LnNvbWVQcm9wKFwiY2xpcGJvYXJkUGFyc2VyXCIpIHx8IHZpZXcuc29tZVByb3AoXCJkb21QYXJzZXJcIikgfHwgRE9NUGFyc2VyLmZyb21TY2hlbWEodmlldy5zdGF0ZS5zY2hlbWEpO1xuICAgICAgICBzbGljZSA9IHBhcnNlci5wYXJzZVNsaWNlKGRvbSwge1xuICAgICAgICAgICAgcHJlc2VydmVXaGl0ZXNwYWNlOiAhIShhc1RleHQgfHwgc2xpY2VEYXRhKSxcbiAgICAgICAgICAgIGNvbnRleHQ6ICRjb250ZXh0LFxuICAgICAgICAgICAgcnVsZUZyb21Ob2RlKGRvbSkge1xuICAgICAgICAgICAgICAgIGlmIChkb20ubm9kZU5hbWUgPT0gXCJCUlwiICYmICFkb20ubmV4dFNpYmxpbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgZG9tLnBhcmVudE5vZGUgJiYgIWlubGluZVBhcmVudHMudGVzdChkb20ucGFyZW50Tm9kZS5ub2RlTmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGlnbm9yZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHNsaWNlRGF0YSkge1xuICAgICAgICBzbGljZSA9IGFkZENvbnRleHQoY2xvc2VTbGljZShzbGljZSwgK3NsaWNlRGF0YVsxXSwgK3NsaWNlRGF0YVsyXSksIHNsaWNlRGF0YVs0XSk7XG4gICAgfVxuICAgIGVsc2UgeyAvLyBIVE1MIHdhc24ndCBjcmVhdGVkIGJ5IFByb3NlTWlycm9yLiBNYWtlIHN1cmUgdG9wLWxldmVsIHNpYmxpbmdzIGFyZSBjb2hlcmVudFxuICAgICAgICBzbGljZSA9IFNsaWNlLm1heE9wZW4obm9ybWFsaXplU2libGluZ3Moc2xpY2UuY29udGVudCwgJGNvbnRleHQpLCB0cnVlKTtcbiAgICAgICAgaWYgKHNsaWNlLm9wZW5TdGFydCB8fCBzbGljZS5vcGVuRW5kKSB7XG4gICAgICAgICAgICBsZXQgb3BlblN0YXJ0ID0gMCwgb3BlbkVuZCA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBub2RlID0gc2xpY2UuY29udGVudC5maXJzdENoaWxkOyBvcGVuU3RhcnQgPCBzbGljZS5vcGVuU3RhcnQgJiYgIW5vZGUudHlwZS5zcGVjLmlzb2xhdGluZzsgb3BlblN0YXJ0KyssIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQpIHsgfVxuICAgICAgICAgICAgZm9yIChsZXQgbm9kZSA9IHNsaWNlLmNvbnRlbnQubGFzdENoaWxkOyBvcGVuRW5kIDwgc2xpY2Uub3BlbkVuZCAmJiAhbm9kZS50eXBlLnNwZWMuaXNvbGF0aW5nOyBvcGVuRW5kKyssIG5vZGUgPSBub2RlLmxhc3RDaGlsZCkgeyB9XG4gICAgICAgICAgICBzbGljZSA9IGNsb3NlU2xpY2Uoc2xpY2UsIG9wZW5TdGFydCwgb3BlbkVuZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmlldy5zb21lUHJvcChcInRyYW5zZm9ybVBhc3RlZFwiLCBmID0+IHsgc2xpY2UgPSBmKHNsaWNlLCB2aWV3KTsgfSk7XG4gICAgcmV0dXJuIHNsaWNlO1xufVxuY29uc3QgaW5saW5lUGFyZW50cyA9IC9eKGF8YWJicnxhY3JvbnltfGJ8Y2l0ZXxjb2RlfGRlbHxlbXxpfGluc3xrYmR8bGFiZWx8b3V0cHV0fHF8cnVieXxzfHNhbXB8c3BhbnxzdHJvbmd8c3VifHN1cHx0aW1lfHV8dHR8dmFyKSQvaTtcbi8vIFRha2VzIGEgc2xpY2UgcGFyc2VkIHdpdGggcGFyc2VTbGljZSwgd2hpY2ggbWVhbnMgdGhlcmUgaGFzbid0IGJlZW5cbi8vIGFueSBjb250ZW50LWV4cHJlc3Npb24gY2hlY2tpbmcgZG9uZSBvbiB0aGUgdG9wIG5vZGVzLCB0cmllcyB0b1xuLy8gZmluZCBhIHBhcmVudCBub2RlIGluIHRoZSBjdXJyZW50IGNvbnRleHQgdGhhdCBtaWdodCBmaXQgdGhlIG5vZGVzLFxuLy8gYW5kIGlmIHN1Y2Nlc3NmdWwsIHJlYnVpbGRzIHRoZSBzbGljZSBzbyB0aGF0IGl0IGZpdHMgaW50byB0aGF0IHBhcmVudC5cbi8vXG4vLyBUaGlzIGFkZHJlc3NlcyB0aGUgcHJvYmxlbSB0aGF0IFRyYW5zZm9ybS5yZXBsYWNlIGV4cGVjdHMgYVxuLy8gY29oZXJlbnQgc2xpY2UsIGFuZCB3aWxsIGZhaWwgdG8gcGxhY2UgYSBzZXQgb2Ygc2libGluZ3MgdGhhdCBkb24ndFxuLy8gZml0IGFueXdoZXJlIGluIHRoZSBzY2hlbWEuXG5mdW5jdGlvbiBub3JtYWxpemVTaWJsaW5ncyhmcmFnbWVudCwgJGNvbnRleHQpIHtcbiAgICBpZiAoZnJhZ21lbnQuY2hpbGRDb3VudCA8IDIpXG4gICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICBmb3IgKGxldCBkID0gJGNvbnRleHQuZGVwdGg7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgIGxldCBwYXJlbnQgPSAkY29udGV4dC5ub2RlKGQpO1xuICAgICAgICBsZXQgbWF0Y2ggPSBwYXJlbnQuY29udGVudE1hdGNoQXQoJGNvbnRleHQuaW5kZXgoZCkpO1xuICAgICAgICBsZXQgbGFzdFdyYXAsIHJlc3VsdCA9IFtdO1xuICAgICAgICBmcmFnbWVudC5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IHdyYXAgPSBtYXRjaC5maW5kV3JhcHBpbmcobm9kZS50eXBlKSwgaW5MYXN0O1xuICAgICAgICAgICAgaWYgKCF3cmFwKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGluTGFzdCA9IHJlc3VsdC5sZW5ndGggJiYgbGFzdFdyYXAubGVuZ3RoICYmIGFkZFRvU2libGluZyh3cmFwLCBsYXN0V3JhcCwgbm9kZSwgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSwgMCkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdID0gaW5MYXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0gPSBjbG9zZVJpZ2h0KHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0sIGxhc3RXcmFwLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgbGV0IHdyYXBwZWQgPSB3aXRoV3JhcHBlcnMobm9kZSwgd3JhcCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2god3JhcHBlZCk7XG4gICAgICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaC5tYXRjaFR5cGUod3JhcHBlZC50eXBlKTtcbiAgICAgICAgICAgICAgICBsYXN0V3JhcCA9IHdyYXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuIEZyYWdtZW50LmZyb20ocmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIGZyYWdtZW50O1xufVxuZnVuY3Rpb24gd2l0aFdyYXBwZXJzKG5vZGUsIHdyYXAsIGZyb20gPSAwKSB7XG4gICAgZm9yIChsZXQgaSA9IHdyYXAubGVuZ3RoIC0gMTsgaSA+PSBmcm9tOyBpLS0pXG4gICAgICAgIG5vZGUgPSB3cmFwW2ldLmNyZWF0ZShudWxsLCBGcmFnbWVudC5mcm9tKG5vZGUpKTtcbiAgICByZXR1cm4gbm9kZTtcbn1cbi8vIFVzZWQgdG8gZ3JvdXAgYWRqYWNlbnQgbm9kZXMgd3JhcHBlZCBpbiBzaW1pbGFyIHBhcmVudHMgYnlcbi8vIG5vcm1hbGl6ZVNpYmxpbmdzIGludG8gdGhlIHNhbWUgcGFyZW50IG5vZGVcbmZ1bmN0aW9uIGFkZFRvU2libGluZyh3cmFwLCBsYXN0V3JhcCwgbm9kZSwgc2libGluZywgZGVwdGgpIHtcbiAgICBpZiAoZGVwdGggPCB3cmFwLmxlbmd0aCAmJiBkZXB0aCA8IGxhc3RXcmFwLmxlbmd0aCAmJiB3cmFwW2RlcHRoXSA9PSBsYXN0V3JhcFtkZXB0aF0pIHtcbiAgICAgICAgbGV0IGlubmVyID0gYWRkVG9TaWJsaW5nKHdyYXAsIGxhc3RXcmFwLCBub2RlLCBzaWJsaW5nLmxhc3RDaGlsZCwgZGVwdGggKyAxKTtcbiAgICAgICAgaWYgKGlubmVyKVxuICAgICAgICAgICAgcmV0dXJuIHNpYmxpbmcuY29weShzaWJsaW5nLmNvbnRlbnQucmVwbGFjZUNoaWxkKHNpYmxpbmcuY2hpbGRDb3VudCAtIDEsIGlubmVyKSk7XG4gICAgICAgIGxldCBtYXRjaCA9IHNpYmxpbmcuY29udGVudE1hdGNoQXQoc2libGluZy5jaGlsZENvdW50KTtcbiAgICAgICAgaWYgKG1hdGNoLm1hdGNoVHlwZShkZXB0aCA9PSB3cmFwLmxlbmd0aCAtIDEgPyBub2RlLnR5cGUgOiB3cmFwW2RlcHRoICsgMV0pKVxuICAgICAgICAgICAgcmV0dXJuIHNpYmxpbmcuY29weShzaWJsaW5nLmNvbnRlbnQuYXBwZW5kKEZyYWdtZW50LmZyb20od2l0aFdyYXBwZXJzKG5vZGUsIHdyYXAsIGRlcHRoICsgMSkpKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xvc2VSaWdodChub2RlLCBkZXB0aCkge1xuICAgIGlmIChkZXB0aCA9PSAwKVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICBsZXQgZnJhZ21lbnQgPSBub2RlLmNvbnRlbnQucmVwbGFjZUNoaWxkKG5vZGUuY2hpbGRDb3VudCAtIDEsIGNsb3NlUmlnaHQobm9kZS5sYXN0Q2hpbGQsIGRlcHRoIC0gMSkpO1xuICAgIGxldCBmaWxsID0gbm9kZS5jb250ZW50TWF0Y2hBdChub2RlLmNoaWxkQ291bnQpLmZpbGxCZWZvcmUoRnJhZ21lbnQuZW1wdHksIHRydWUpO1xuICAgIHJldHVybiBub2RlLmNvcHkoZnJhZ21lbnQuYXBwZW5kKGZpbGwpKTtcbn1cbmZ1bmN0aW9uIGNsb3NlUmFuZ2UoZnJhZ21lbnQsIHNpZGUsIGZyb20sIHRvLCBkZXB0aCwgb3BlbkVuZCkge1xuICAgIGxldCBub2RlID0gc2lkZSA8IDAgPyBmcmFnbWVudC5maXJzdENoaWxkIDogZnJhZ21lbnQubGFzdENoaWxkLCBpbm5lciA9IG5vZGUuY29udGVudDtcbiAgICBpZiAoZnJhZ21lbnQuY2hpbGRDb3VudCA+IDEpXG4gICAgICAgIG9wZW5FbmQgPSAwO1xuICAgIGlmIChkZXB0aCA8IHRvIC0gMSlcbiAgICAgICAgaW5uZXIgPSBjbG9zZVJhbmdlKGlubmVyLCBzaWRlLCBmcm9tLCB0bywgZGVwdGggKyAxLCBvcGVuRW5kKTtcbiAgICBpZiAoZGVwdGggPj0gZnJvbSlcbiAgICAgICAgaW5uZXIgPSBzaWRlIDwgMCA/IG5vZGUuY29udGVudE1hdGNoQXQoMCkuZmlsbEJlZm9yZShpbm5lciwgb3BlbkVuZCA8PSBkZXB0aCkuYXBwZW5kKGlubmVyKVxuICAgICAgICAgICAgOiBpbm5lci5hcHBlbmQobm9kZS5jb250ZW50TWF0Y2hBdChub2RlLmNoaWxkQ291bnQpLmZpbGxCZWZvcmUoRnJhZ21lbnQuZW1wdHksIHRydWUpKTtcbiAgICByZXR1cm4gZnJhZ21lbnQucmVwbGFjZUNoaWxkKHNpZGUgPCAwID8gMCA6IGZyYWdtZW50LmNoaWxkQ291bnQgLSAxLCBub2RlLmNvcHkoaW5uZXIpKTtcbn1cbmZ1bmN0aW9uIGNsb3NlU2xpY2Uoc2xpY2UsIG9wZW5TdGFydCwgb3BlbkVuZCkge1xuICAgIGlmIChvcGVuU3RhcnQgPCBzbGljZS5vcGVuU3RhcnQpXG4gICAgICAgIHNsaWNlID0gbmV3IFNsaWNlKGNsb3NlUmFuZ2Uoc2xpY2UuY29udGVudCwgLTEsIG9wZW5TdGFydCwgc2xpY2Uub3BlblN0YXJ0LCAwLCBzbGljZS5vcGVuRW5kKSwgb3BlblN0YXJ0LCBzbGljZS5vcGVuRW5kKTtcbiAgICBpZiAob3BlbkVuZCA8IHNsaWNlLm9wZW5FbmQpXG4gICAgICAgIHNsaWNlID0gbmV3IFNsaWNlKGNsb3NlUmFuZ2Uoc2xpY2UuY29udGVudCwgMSwgb3BlbkVuZCwgc2xpY2Uub3BlbkVuZCwgMCwgMCksIHNsaWNlLm9wZW5TdGFydCwgb3BlbkVuZCk7XG4gICAgcmV0dXJuIHNsaWNlO1xufVxuLy8gVHJpY2sgZnJvbSBqUXVlcnkgLS0gc29tZSBlbGVtZW50cyBtdXN0IGJlIHdyYXBwZWQgaW4gb3RoZXJcbi8vIGVsZW1lbnRzIGZvciBpbm5lckhUTUwgdG8gd29yay4gSS5lLiBpZiB5b3UgZG8gYGRpdi5pbm5lckhUTUwgPVxuLy8gXCI8dGQ+Li48L3RkPlwiYCB0aGUgdGFibGUgY2VsbHMgYXJlIGlnbm9yZWQuXG5jb25zdCB3cmFwTWFwID0ge1xuICAgIHRoZWFkOiBbXCJ0YWJsZVwiXSxcbiAgICB0Ym9keTogW1widGFibGVcIl0sXG4gICAgdGZvb3Q6IFtcInRhYmxlXCJdLFxuICAgIGNhcHRpb246IFtcInRhYmxlXCJdLFxuICAgIGNvbGdyb3VwOiBbXCJ0YWJsZVwiXSxcbiAgICBjb2w6IFtcInRhYmxlXCIsIFwiY29sZ3JvdXBcIl0sXG4gICAgdHI6IFtcInRhYmxlXCIsIFwidGJvZHlcIl0sXG4gICAgdGQ6IFtcInRhYmxlXCIsIFwidGJvZHlcIiwgXCJ0clwiXSxcbiAgICB0aDogW1widGFibGVcIiwgXCJ0Ym9keVwiLCBcInRyXCJdXG59O1xubGV0IF9kZXRhY2hlZERvYyA9IG51bGw7XG5mdW5jdGlvbiBkZXRhY2hlZERvYygpIHtcbiAgICByZXR1cm4gX2RldGFjaGVkRG9jIHx8IChfZGV0YWNoZWREb2MgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXCJ0aXRsZVwiKSk7XG59XG5sZXQgX3BvbGljeSA9IG51bGw7XG5mdW5jdGlvbiBtYXliZVdyYXBUcnVzdGVkKGh0bWwpIHtcbiAgICBsZXQgdHJ1c3RlZFR5cGVzID0gd2luZG93LnRydXN0ZWRUeXBlcztcbiAgICBpZiAoIXRydXN0ZWRUeXBlcylcbiAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgLy8gV2l0aCB0aGUgcmVxdWlyZS10cnVzdGVkLXR5cGVzLWZvciBDU1AsIENocm9tZSB3aWxsIGJsb2NrXG4gICAgLy8gaW5uZXJIVE1MLCBldmVuIG9uIGEgZGV0YWNoZWQgZG9jdW1lbnQuIFRoaXMgd3JhcHMgdGhlIHN0cmluZyBpblxuICAgIC8vIGEgd2F5IHRoYXQgbWFrZXMgdGhlIGJyb3dzZXIgYWxsb3cgdXMgdG8gdXNlIGl0cyBwYXJzZXIgYWdhaW4uXG4gICAgaWYgKCFfcG9saWN5KVxuICAgICAgICBfcG9saWN5ID0gdHJ1c3RlZFR5cGVzLmRlZmF1bHRQb2xpY3kgfHwgdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeShcIlByb3NlTWlycm9yQ2xpcGJvYXJkXCIsIHsgY3JlYXRlSFRNTDogKHMpID0+IHMgfSk7XG4gICAgcmV0dXJuIF9wb2xpY3kuY3JlYXRlSFRNTChodG1sKTtcbn1cbmZ1bmN0aW9uIHJlYWRIVE1MKGh0bWwpIHtcbiAgICBsZXQgbWV0YXMgPSAvXihcXHMqPG1ldGEgW14+XSo+KSovLmV4ZWMoaHRtbCk7XG4gICAgaWYgKG1ldGFzKVxuICAgICAgICBodG1sID0gaHRtbC5zbGljZShtZXRhc1swXS5sZW5ndGgpO1xuICAgIGxldCBlbHQgPSBkZXRhY2hlZERvYygpLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbGV0IGZpcnN0VGFnID0gLzwoW2Etel1bXj5cXHNdKykvaS5leGVjKGh0bWwpLCB3cmFwO1xuICAgIGlmICh3cmFwID0gZmlyc3RUYWcgJiYgd3JhcE1hcFtmaXJzdFRhZ1sxXS50b0xvd2VyQ2FzZSgpXSlcbiAgICAgICAgaHRtbCA9IHdyYXAubWFwKG4gPT4gXCI8XCIgKyBuICsgXCI+XCIpLmpvaW4oXCJcIikgKyBodG1sICsgd3JhcC5tYXAobiA9PiBcIjwvXCIgKyBuICsgXCI+XCIpLnJldmVyc2UoKS5qb2luKFwiXCIpO1xuICAgIGVsdC5pbm5lckhUTUwgPSBtYXliZVdyYXBUcnVzdGVkKGh0bWwpO1xuICAgIGlmICh3cmFwKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdyYXAubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBlbHQgPSBlbHQucXVlcnlTZWxlY3Rvcih3cmFwW2ldKSB8fCBlbHQ7XG4gICAgcmV0dXJuIGVsdDtcbn1cbi8vIFdlYmtpdCBicm93c2VycyBkbyBzb21lIGhhcmQtdG8tcHJlZGljdCByZXBsYWNlbWVudCBvZiByZWd1bGFyXG4vLyBzcGFjZXMgd2l0aCBub24tYnJlYWtpbmcgc3BhY2VzIHdoZW4gcHV0dGluZyBjb250ZW50IG9uIHRoZVxuLy8gY2xpcGJvYXJkLiBUaGlzIHRyaWVzIHRvIGNvbnZlcnQgc3VjaCBub24tYnJlYWtpbmcgc3BhY2VzICh3aGljaFxuLy8gd2lsbCBiZSB3cmFwcGVkIGluIGEgcGxhaW4gc3BhbiBvbiBDaHJvbWUsIGEgc3BhbiB3aXRoIGNsYXNzXG4vLyBBcHBsZS1jb252ZXJ0ZWQtc3BhY2Ugb24gU2FmYXJpKSBiYWNrIHRvIHJlZ3VsYXIgc3BhY2VzLlxuZnVuY3Rpb24gcmVzdG9yZVJlcGxhY2VkU3BhY2VzKGRvbSkge1xuICAgIGxldCBub2RlcyA9IGRvbS5xdWVyeVNlbGVjdG9yQWxsKGNocm9tZSA/IFwic3Bhbjpub3QoW2NsYXNzXSk6bm90KFtzdHlsZV0pXCIgOiBcInNwYW4uQXBwbGUtY29udmVydGVkLXNwYWNlXCIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPT0gMSAmJiBub2RlLnRleHRDb250ZW50ID09IFwiXFx1MDBhMFwiICYmIG5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoZG9tLm93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIgXCIpLCBub2RlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhZGRDb250ZXh0KHNsaWNlLCBjb250ZXh0KSB7XG4gICAgaWYgKCFzbGljZS5zaXplKVxuICAgICAgICByZXR1cm4gc2xpY2U7XG4gICAgbGV0IHNjaGVtYSA9IHNsaWNlLmNvbnRlbnQuZmlyc3RDaGlsZC50eXBlLnNjaGVtYSwgYXJyYXk7XG4gICAgdHJ5IHtcbiAgICAgICAgYXJyYXkgPSBKU09OLnBhcnNlKGNvbnRleHQpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gc2xpY2U7XG4gICAgfVxuICAgIGxldCB7IGNvbnRlbnQsIG9wZW5TdGFydCwgb3BlbkVuZCB9ID0gc2xpY2U7XG4gICAgZm9yIChsZXQgaSA9IGFycmF5Lmxlbmd0aCAtIDI7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgICAgIGxldCB0eXBlID0gc2NoZW1hLm5vZGVzW2FycmF5W2ldXTtcbiAgICAgICAgaWYgKCF0eXBlIHx8IHR5cGUuaGFzUmVxdWlyZWRBdHRycygpKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNvbnRlbnQgPSBGcmFnbWVudC5mcm9tKHR5cGUuY3JlYXRlKGFycmF5W2kgKyAxXSwgY29udGVudCkpO1xuICAgICAgICBvcGVuU3RhcnQrKztcbiAgICAgICAgb3BlbkVuZCsrO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFNsaWNlKGNvbnRlbnQsIG9wZW5TdGFydCwgb3BlbkVuZCk7XG59XG5cbi8vIEEgY29sbGVjdGlvbiBvZiBET00gZXZlbnRzIHRoYXQgb2NjdXIgd2l0aGluIHRoZSBlZGl0b3IsIGFuZCBjYWxsYmFjayBmdW5jdGlvbnNcbi8vIHRvIGludm9rZSB3aGVuIHRoZSBldmVudCBmaXJlcy5cbmNvbnN0IGhhbmRsZXJzID0ge307XG5jb25zdCBlZGl0SGFuZGxlcnMgPSB7fTtcbmNvbnN0IHBhc3NpdmVIYW5kbGVycyA9IHsgdG91Y2hzdGFydDogdHJ1ZSwgdG91Y2htb3ZlOiB0cnVlIH07XG5jbGFzcyBJbnB1dFN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zaGlmdEtleSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1vdXNlRG93biA9IG51bGw7XG4gICAgICAgIHRoaXMubGFzdEtleUNvZGUgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RLZXlDb2RlVGltZSA9IDA7XG4gICAgICAgIHRoaXMubGFzdENsaWNrID0geyB0aW1lOiAwLCB4OiAwLCB5OiAwLCB0eXBlOiBcIlwiLCBidXR0b246IDAgfTtcbiAgICAgICAgdGhpcy5sYXN0U2VsZWN0aW9uT3JpZ2luID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXN0U2VsZWN0aW9uVGltZSA9IDA7XG4gICAgICAgIHRoaXMubGFzdElPU0VudGVyID0gMDtcbiAgICAgICAgdGhpcy5sYXN0SU9TRW50ZXJGYWxsYmFja1RpbWVvdXQgPSAtMTtcbiAgICAgICAgdGhpcy5sYXN0Rm9jdXMgPSAwO1xuICAgICAgICB0aGlzLmxhc3RUb3VjaCA9IDA7XG4gICAgICAgIHRoaXMubGFzdENocm9tZURlbGV0ZSA9IDA7XG4gICAgICAgIHRoaXMuY29tcG9zaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY29tcG9zaXRpb25Ob2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5jb21wb3NpbmdUaW1lb3V0ID0gLTE7XG4gICAgICAgIHRoaXMuY29tcG9zaXRpb25Ob2RlcyA9IFtdO1xuICAgICAgICB0aGlzLmNvbXBvc2l0aW9uRW5kZWRBdCA9IC0yZTg7XG4gICAgICAgIHRoaXMuY29tcG9zaXRpb25JRCA9IDE7XG4gICAgICAgIC8vIFNldCB0byBhIGNvbXBvc2l0aW9uIElEIHdoZW4gdGhlcmUgYXJlIHBlbmRpbmcgY2hhbmdlcyBhdCBjb21wb3NpdGlvbmVuZFxuICAgICAgICB0aGlzLmNvbXBvc2l0aW9uUGVuZGluZ0NoYW5nZXMgPSAwO1xuICAgICAgICB0aGlzLmRvbUNoYW5nZUNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5oaWRlU2VsZWN0aW9uR3VhcmQgPSBudWxsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGluaXRJbnB1dCh2aWV3KSB7XG4gICAgZm9yIChsZXQgZXZlbnQgaW4gaGFuZGxlcnMpIHtcbiAgICAgICAgbGV0IGhhbmRsZXIgPSBoYW5kbGVyc1tldmVudF07XG4gICAgICAgIHZpZXcuZG9tLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHZpZXcuaW5wdXQuZXZlbnRIYW5kbGVyc1tldmVudF0gPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudEJlbG9uZ3NUb1ZpZXcodmlldywgZXZlbnQpICYmICFydW5DdXN0b21IYW5kbGVyKHZpZXcsIGV2ZW50KSAmJlxuICAgICAgICAgICAgICAgICh2aWV3LmVkaXRhYmxlIHx8ICEoZXZlbnQudHlwZSBpbiBlZGl0SGFuZGxlcnMpKSlcbiAgICAgICAgICAgICAgICBoYW5kbGVyKHZpZXcsIGV2ZW50KTtcbiAgICAgICAgfSwgcGFzc2l2ZUhhbmRsZXJzW2V2ZW50XSA/IHsgcGFzc2l2ZTogdHJ1ZSB9IDogdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgLy8gT24gU2FmYXJpLCBmb3IgcmVhc29ucyBiZXlvbmQgbXkgdW5kZXJzdGFuZGluZywgYWRkaW5nIGFuIGlucHV0XG4gICAgLy8gZXZlbnQgaGFuZGxlciBtYWtlcyBhbiBpc3N1ZSB3aGVyZSB0aGUgY29tcG9zaXRpb24gdmFuaXNoZXMgd2hlblxuICAgIC8vIHlvdSBwcmVzcyBlbnRlciBnbyBhd2F5LlxuICAgIGlmIChzYWZhcmkpXG4gICAgICAgIHZpZXcuZG9tLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiBudWxsKTtcbiAgICBlbnN1cmVMaXN0ZW5lcnModmlldyk7XG59XG5mdW5jdGlvbiBzZXRTZWxlY3Rpb25PcmlnaW4odmlldywgb3JpZ2luKSB7XG4gICAgdmlldy5pbnB1dC5sYXN0U2VsZWN0aW9uT3JpZ2luID0gb3JpZ2luO1xuICAgIHZpZXcuaW5wdXQubGFzdFNlbGVjdGlvblRpbWUgPSBEYXRlLm5vdygpO1xufVxuZnVuY3Rpb24gZGVzdHJveUlucHV0KHZpZXcpIHtcbiAgICB2aWV3LmRvbU9ic2VydmVyLnN0b3AoKTtcbiAgICBmb3IgKGxldCB0eXBlIGluIHZpZXcuaW5wdXQuZXZlbnRIYW5kbGVycylcbiAgICAgICAgdmlldy5kb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCB2aWV3LmlucHV0LmV2ZW50SGFuZGxlcnNbdHlwZV0pO1xuICAgIGNsZWFyVGltZW91dCh2aWV3LmlucHV0LmNvbXBvc2luZ1RpbWVvdXQpO1xuICAgIGNsZWFyVGltZW91dCh2aWV3LmlucHV0Lmxhc3RJT1NFbnRlckZhbGxiYWNrVGltZW91dCk7XG59XG5mdW5jdGlvbiBlbnN1cmVMaXN0ZW5lcnModmlldykge1xuICAgIHZpZXcuc29tZVByb3AoXCJoYW5kbGVET01FdmVudHNcIiwgY3VycmVudEhhbmRsZXJzID0+IHtcbiAgICAgICAgZm9yIChsZXQgdHlwZSBpbiBjdXJyZW50SGFuZGxlcnMpXG4gICAgICAgICAgICBpZiAoIXZpZXcuaW5wdXQuZXZlbnRIYW5kbGVyc1t0eXBlXSlcbiAgICAgICAgICAgICAgICB2aWV3LmRvbS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIHZpZXcuaW5wdXQuZXZlbnRIYW5kbGVyc1t0eXBlXSA9IGV2ZW50ID0+IHJ1bkN1c3RvbUhhbmRsZXIodmlldywgZXZlbnQpKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHJ1bkN1c3RvbUhhbmRsZXIodmlldywgZXZlbnQpIHtcbiAgICByZXR1cm4gdmlldy5zb21lUHJvcChcImhhbmRsZURPTUV2ZW50c1wiLCBoYW5kbGVycyA9PiB7XG4gICAgICAgIGxldCBoYW5kbGVyID0gaGFuZGxlcnNbZXZlbnQudHlwZV07XG4gICAgICAgIHJldHVybiBoYW5kbGVyID8gaGFuZGxlcih2aWV3LCBldmVudCkgfHwgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA6IGZhbHNlO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZXZlbnRCZWxvbmdzVG9WaWV3KHZpZXcsIGV2ZW50KSB7XG4gICAgaWYgKCFldmVudC5idWJibGVzKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAobGV0IG5vZGUgPSBldmVudC50YXJnZXQ7IG5vZGUgIT0gdmlldy5kb207IG5vZGUgPSBub2RlLnBhcmVudE5vZGUpXG4gICAgICAgIGlmICghbm9kZSB8fCBub2RlLm5vZGVUeXBlID09IDExIHx8XG4gICAgICAgICAgICAobm9kZS5wbVZpZXdEZXNjICYmIG5vZGUucG1WaWV3RGVzYy5zdG9wRXZlbnQoZXZlbnQpKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQodmlldywgZXZlbnQpIHtcbiAgICBpZiAoIXJ1bkN1c3RvbUhhbmRsZXIodmlldywgZXZlbnQpICYmIGhhbmRsZXJzW2V2ZW50LnR5cGVdICYmXG4gICAgICAgICh2aWV3LmVkaXRhYmxlIHx8ICEoZXZlbnQudHlwZSBpbiBlZGl0SGFuZGxlcnMpKSlcbiAgICAgICAgaGFuZGxlcnNbZXZlbnQudHlwZV0odmlldywgZXZlbnQpO1xufVxuZWRpdEhhbmRsZXJzLmtleWRvd24gPSAodmlldywgX2V2ZW50KSA9PiB7XG4gICAgbGV0IGV2ZW50ID0gX2V2ZW50O1xuICAgIHZpZXcuaW5wdXQuc2hpZnRLZXkgPSBldmVudC5rZXlDb2RlID09IDE2IHx8IGV2ZW50LnNoaWZ0S2V5O1xuICAgIGlmIChpbk9yTmVhckNvbXBvc2l0aW9uKHZpZXcsIGV2ZW50KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHZpZXcuaW5wdXQubGFzdEtleUNvZGUgPSBldmVudC5rZXlDb2RlO1xuICAgIHZpZXcuaW5wdXQubGFzdEtleUNvZGVUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAvLyBTdXBwcmVzcyBlbnRlciBrZXkgZXZlbnRzIG9uIENocm9tZSBBbmRyb2lkLCBiZWNhdXNlIHRob3NlIHRlbmRcbiAgICAvLyB0byBiZSBwYXJ0IG9mIGEgY29uZnVzZWQgc2VxdWVuY2Ugb2YgY29tcG9zaXRpb24gZXZlbnRzIGZpcmVkLFxuICAgIC8vIGFuZCBoYW5kbGluZyB0aGVtIGVhZ2VybHkgdGVuZHMgdG8gY29ycnVwdCB0aGUgaW5wdXQuXG4gICAgaWYgKGFuZHJvaWQgJiYgY2hyb21lICYmIGV2ZW50LmtleUNvZGUgPT0gMTMpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoZXZlbnQua2V5Q29kZSAhPSAyMjkpXG4gICAgICAgIHZpZXcuZG9tT2JzZXJ2ZXIuZm9yY2VGbHVzaCgpO1xuICAgIC8vIE9uIGlPUywgaWYgd2UgcHJldmVudERlZmF1bHQgZW50ZXIga2V5IHByZXNzZXMsIHRoZSB2aXJ0dWFsXG4gICAgLy8ga2V5Ym9hcmQgZ2V0cyBjb25mdXNlZC4gU28gdGhlIGhhY2sgaGVyZSBpcyB0byBzZXQgYSBmbGFnIHRoYXRcbiAgICAvLyBtYWtlcyB0aGUgRE9NIGNoYW5nZSBjb2RlIHJlY29nbml6ZSB0aGF0IHdoYXQganVzdCBoYXBwZW5zIHNob3VsZFxuICAgIC8vIGJlIHJlcGxhY2VkIGJ5IHdoYXRldmVyIHRoZSBFbnRlciBrZXkgaGFuZGxlcnMgZG8uXG4gICAgaWYgKGlvcyAmJiBldmVudC5rZXlDb2RlID09IDEzICYmICFldmVudC5jdHJsS2V5ICYmICFldmVudC5hbHRLZXkgJiYgIWV2ZW50Lm1ldGFLZXkpIHtcbiAgICAgICAgbGV0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHZpZXcuaW5wdXQubGFzdElPU0VudGVyID0gbm93O1xuICAgICAgICB2aWV3LmlucHV0Lmxhc3RJT1NFbnRlckZhbGxiYWNrVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHZpZXcuaW5wdXQubGFzdElPU0VudGVyID09IG5vdykge1xuICAgICAgICAgICAgICAgIHZpZXcuc29tZVByb3AoXCJoYW5kbGVLZXlEb3duXCIsIGYgPT4gZih2aWV3LCBrZXlFdmVudCgxMywgXCJFbnRlclwiKSkpO1xuICAgICAgICAgICAgICAgIHZpZXcuaW5wdXQubGFzdElPU0VudGVyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMjAwKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmlldy5zb21lUHJvcChcImhhbmRsZUtleURvd25cIiwgZiA9PiBmKHZpZXcsIGV2ZW50KSkgfHwgY2FwdHVyZUtleURvd24odmlldywgZXZlbnQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZXRTZWxlY3Rpb25PcmlnaW4odmlldywgXCJrZXlcIik7XG4gICAgfVxufTtcbmVkaXRIYW5kbGVycy5rZXl1cCA9ICh2aWV3LCBldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5rZXlDb2RlID09IDE2KVxuICAgICAgICB2aWV3LmlucHV0LnNoaWZ0S2V5ID0gZmFsc2U7XG59O1xuZWRpdEhhbmRsZXJzLmtleXByZXNzID0gKHZpZXcsIF9ldmVudCkgPT4ge1xuICAgIGxldCBldmVudCA9IF9ldmVudDtcbiAgICBpZiAoaW5Pck5lYXJDb21wb3NpdGlvbih2aWV3LCBldmVudCkgfHwgIWV2ZW50LmNoYXJDb2RlIHx8XG4gICAgICAgIGV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LmFsdEtleSB8fCBtYWMgJiYgZXZlbnQubWV0YUtleSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICh2aWV3LnNvbWVQcm9wKFwiaGFuZGxlS2V5UHJlc3NcIiwgZiA9PiBmKHZpZXcsIGV2ZW50KSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XG4gICAgaWYgKCEoc2VsIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbikgfHwgIXNlbC4kZnJvbS5zYW1lUGFyZW50KHNlbC4kdG8pKSB7XG4gICAgICAgIGxldCB0ZXh0ID0gU3RyaW5nLmZyb21DaGFyQ29kZShldmVudC5jaGFyQ29kZSk7XG4gICAgICAgIGlmICghL1tcXHJcXG5dLy50ZXN0KHRleHQpICYmICF2aWV3LnNvbWVQcm9wKFwiaGFuZGxlVGV4dElucHV0XCIsIGYgPT4gZih2aWV3LCBzZWwuJGZyb20ucG9zLCBzZWwuJHRvLnBvcywgdGV4dCkpKVxuICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnRyLmluc2VydFRleHQodGV4dCkuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGV2ZW50Q29vcmRzKGV2ZW50KSB7IHJldHVybiB7IGxlZnQ6IGV2ZW50LmNsaWVudFgsIHRvcDogZXZlbnQuY2xpZW50WSB9OyB9XG5mdW5jdGlvbiBpc05lYXIoZXZlbnQsIGNsaWNrKSB7XG4gICAgbGV0IGR4ID0gY2xpY2sueCAtIGV2ZW50LmNsaWVudFgsIGR5ID0gY2xpY2sueSAtIGV2ZW50LmNsaWVudFk7XG4gICAgcmV0dXJuIGR4ICogZHggKyBkeSAqIGR5IDwgMTAwO1xufVxuZnVuY3Rpb24gcnVuSGFuZGxlck9uQ29udGV4dCh2aWV3LCBwcm9wTmFtZSwgcG9zLCBpbnNpZGUsIGV2ZW50KSB7XG4gICAgaWYgKGluc2lkZSA9PSAtMSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCAkcG9zID0gdmlldy5zdGF0ZS5kb2MucmVzb2x2ZShpbnNpZGUpO1xuICAgIGZvciAobGV0IGkgPSAkcG9zLmRlcHRoICsgMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBpZiAodmlldy5zb21lUHJvcChwcm9wTmFtZSwgZiA9PiBpID4gJHBvcy5kZXB0aCA/IGYodmlldywgcG9zLCAkcG9zLm5vZGVBZnRlciwgJHBvcy5iZWZvcmUoaSksIGV2ZW50LCB0cnVlKVxuICAgICAgICAgICAgOiBmKHZpZXcsIHBvcywgJHBvcy5ub2RlKGkpLCAkcG9zLmJlZm9yZShpKSwgZXZlbnQsIGZhbHNlKSkpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gdXBkYXRlU2VsZWN0aW9uKHZpZXcsIHNlbGVjdGlvbiwgb3JpZ2luKSB7XG4gICAgaWYgKCF2aWV3LmZvY3VzZWQpXG4gICAgICAgIHZpZXcuZm9jdXMoKTtcbiAgICBpZiAodmlldy5zdGF0ZS5zZWxlY3Rpb24uZXEoc2VsZWN0aW9uKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCB0ciA9IHZpZXcuc3RhdGUudHIuc2V0U2VsZWN0aW9uKHNlbGVjdGlvbik7XG4gICAgaWYgKG9yaWdpbiA9PSBcInBvaW50ZXJcIilcbiAgICAgICAgdHIuc2V0TWV0YShcInBvaW50ZXJcIiwgdHJ1ZSk7XG4gICAgdmlldy5kaXNwYXRjaCh0cik7XG59XG5mdW5jdGlvbiBzZWxlY3RDbGlja2VkTGVhZih2aWV3LCBpbnNpZGUpIHtcbiAgICBpZiAoaW5zaWRlID09IC0xKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0ICRwb3MgPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGluc2lkZSksIG5vZGUgPSAkcG9zLm5vZGVBZnRlcjtcbiAgICBpZiAobm9kZSAmJiBub2RlLmlzQXRvbSAmJiBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShub2RlKSkge1xuICAgICAgICB1cGRhdGVTZWxlY3Rpb24odmlldywgbmV3IE5vZGVTZWxlY3Rpb24oJHBvcyksIFwicG9pbnRlclwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdENsaWNrZWROb2RlKHZpZXcsIGluc2lkZSkge1xuICAgIGlmIChpbnNpZGUgPT0gLTEpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb24sIHNlbGVjdGVkTm9kZSwgc2VsZWN0QXQ7XG4gICAgaWYgKHNlbCBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24pXG4gICAgICAgIHNlbGVjdGVkTm9kZSA9IHNlbC5ub2RlO1xuICAgIGxldCAkcG9zID0gdmlldy5zdGF0ZS5kb2MucmVzb2x2ZShpbnNpZGUpO1xuICAgIGZvciAobGV0IGkgPSAkcG9zLmRlcHRoICsgMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBsZXQgbm9kZSA9IGkgPiAkcG9zLmRlcHRoID8gJHBvcy5ub2RlQWZ0ZXIgOiAkcG9zLm5vZGUoaSk7XG4gICAgICAgIGlmIChOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShub2RlKSkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkTm9kZSAmJiBzZWwuJGZyb20uZGVwdGggPiAwICYmXG4gICAgICAgICAgICAgICAgaSA+PSBzZWwuJGZyb20uZGVwdGggJiYgJHBvcy5iZWZvcmUoc2VsLiRmcm9tLmRlcHRoICsgMSkgPT0gc2VsLiRmcm9tLnBvcylcbiAgICAgICAgICAgICAgICBzZWxlY3RBdCA9ICRwb3MuYmVmb3JlKHNlbC4kZnJvbS5kZXB0aCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2VsZWN0QXQgPSAkcG9zLmJlZm9yZShpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZWxlY3RBdCAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZVNlbGVjdGlvbih2aWV3LCBOb2RlU2VsZWN0aW9uLmNyZWF0ZSh2aWV3LnN0YXRlLmRvYywgc2VsZWN0QXQpLCBcInBvaW50ZXJcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZVNpbmdsZUNsaWNrKHZpZXcsIHBvcywgaW5zaWRlLCBldmVudCwgc2VsZWN0Tm9kZSkge1xuICAgIHJldHVybiBydW5IYW5kbGVyT25Db250ZXh0KHZpZXcsIFwiaGFuZGxlQ2xpY2tPblwiLCBwb3MsIGluc2lkZSwgZXZlbnQpIHx8XG4gICAgICAgIHZpZXcuc29tZVByb3AoXCJoYW5kbGVDbGlja1wiLCBmID0+IGYodmlldywgcG9zLCBldmVudCkpIHx8XG4gICAgICAgIChzZWxlY3ROb2RlID8gc2VsZWN0Q2xpY2tlZE5vZGUodmlldywgaW5zaWRlKSA6IHNlbGVjdENsaWNrZWRMZWFmKHZpZXcsIGluc2lkZSkpO1xufVxuZnVuY3Rpb24gaGFuZGxlRG91YmxlQ2xpY2sodmlldywgcG9zLCBpbnNpZGUsIGV2ZW50KSB7XG4gICAgcmV0dXJuIHJ1bkhhbmRsZXJPbkNvbnRleHQodmlldywgXCJoYW5kbGVEb3VibGVDbGlja09uXCIsIHBvcywgaW5zaWRlLCBldmVudCkgfHxcbiAgICAgICAgdmlldy5zb21lUHJvcChcImhhbmRsZURvdWJsZUNsaWNrXCIsIGYgPT4gZih2aWV3LCBwb3MsIGV2ZW50KSk7XG59XG5mdW5jdGlvbiBoYW5kbGVUcmlwbGVDbGljayh2aWV3LCBwb3MsIGluc2lkZSwgZXZlbnQpIHtcbiAgICByZXR1cm4gcnVuSGFuZGxlck9uQ29udGV4dCh2aWV3LCBcImhhbmRsZVRyaXBsZUNsaWNrT25cIiwgcG9zLCBpbnNpZGUsIGV2ZW50KSB8fFxuICAgICAgICB2aWV3LnNvbWVQcm9wKFwiaGFuZGxlVHJpcGxlQ2xpY2tcIiwgZiA9PiBmKHZpZXcsIHBvcywgZXZlbnQpKSB8fFxuICAgICAgICBkZWZhdWx0VHJpcGxlQ2xpY2sodmlldywgaW5zaWRlLCBldmVudCk7XG59XG5mdW5jdGlvbiBkZWZhdWx0VHJpcGxlQ2xpY2sodmlldywgaW5zaWRlLCBldmVudCkge1xuICAgIGlmIChldmVudC5idXR0b24gIT0gMClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBkb2MgPSB2aWV3LnN0YXRlLmRvYztcbiAgICBpZiAoaW5zaWRlID09IC0xKSB7XG4gICAgICAgIGlmIChkb2MuaW5saW5lQ29udGVudCkge1xuICAgICAgICAgICAgdXBkYXRlU2VsZWN0aW9uKHZpZXcsIFRleHRTZWxlY3Rpb24uY3JlYXRlKGRvYywgMCwgZG9jLmNvbnRlbnQuc2l6ZSksIFwicG9pbnRlclwiKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0ICRwb3MgPSBkb2MucmVzb2x2ZShpbnNpZGUpO1xuICAgIGZvciAobGV0IGkgPSAkcG9zLmRlcHRoICsgMTsgaSA+IDA7IGktLSkge1xuICAgICAgICBsZXQgbm9kZSA9IGkgPiAkcG9zLmRlcHRoID8gJHBvcy5ub2RlQWZ0ZXIgOiAkcG9zLm5vZGUoaSk7XG4gICAgICAgIGxldCBub2RlUG9zID0gJHBvcy5iZWZvcmUoaSk7XG4gICAgICAgIGlmIChub2RlLmlubGluZUNvbnRlbnQpXG4gICAgICAgICAgICB1cGRhdGVTZWxlY3Rpb24odmlldywgVGV4dFNlbGVjdGlvbi5jcmVhdGUoZG9jLCBub2RlUG9zICsgMSwgbm9kZVBvcyArIDEgKyBub2RlLmNvbnRlbnQuc2l6ZSksIFwicG9pbnRlclwiKTtcbiAgICAgICAgZWxzZSBpZiAoTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUobm9kZSkpXG4gICAgICAgICAgICB1cGRhdGVTZWxlY3Rpb24odmlldywgTm9kZVNlbGVjdGlvbi5jcmVhdGUoZG9jLCBub2RlUG9zKSwgXCJwb2ludGVyXCIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZnVuY3Rpb24gZm9yY2VET01GbHVzaCh2aWV3KSB7XG4gICAgcmV0dXJuIGVuZENvbXBvc2l0aW9uKHZpZXcpO1xufVxuY29uc3Qgc2VsZWN0Tm9kZU1vZGlmaWVyID0gbWFjID8gXCJtZXRhS2V5XCIgOiBcImN0cmxLZXlcIjtcbmhhbmRsZXJzLm1vdXNlZG93biA9ICh2aWV3LCBfZXZlbnQpID0+IHtcbiAgICBsZXQgZXZlbnQgPSBfZXZlbnQ7XG4gICAgdmlldy5pbnB1dC5zaGlmdEtleSA9IGV2ZW50LnNoaWZ0S2V5O1xuICAgIGxldCBmbHVzaGVkID0gZm9yY2VET01GbHVzaCh2aWV3KTtcbiAgICBsZXQgbm93ID0gRGF0ZS5ub3coKSwgdHlwZSA9IFwic2luZ2xlQ2xpY2tcIjtcbiAgICBpZiAobm93IC0gdmlldy5pbnB1dC5sYXN0Q2xpY2sudGltZSA8IDUwMCAmJiBpc05lYXIoZXZlbnQsIHZpZXcuaW5wdXQubGFzdENsaWNrKSAmJiAhZXZlbnRbc2VsZWN0Tm9kZU1vZGlmaWVyXSAmJlxuICAgICAgICB2aWV3LmlucHV0Lmxhc3RDbGljay5idXR0b24gPT0gZXZlbnQuYnV0dG9uKSB7XG4gICAgICAgIGlmICh2aWV3LmlucHV0Lmxhc3RDbGljay50eXBlID09IFwic2luZ2xlQ2xpY2tcIilcbiAgICAgICAgICAgIHR5cGUgPSBcImRvdWJsZUNsaWNrXCI7XG4gICAgICAgIGVsc2UgaWYgKHZpZXcuaW5wdXQubGFzdENsaWNrLnR5cGUgPT0gXCJkb3VibGVDbGlja1wiKVxuICAgICAgICAgICAgdHlwZSA9IFwidHJpcGxlQ2xpY2tcIjtcbiAgICB9XG4gICAgdmlldy5pbnB1dC5sYXN0Q2xpY2sgPSB7IHRpbWU6IG5vdywgeDogZXZlbnQuY2xpZW50WCwgeTogZXZlbnQuY2xpZW50WSwgdHlwZSwgYnV0dG9uOiBldmVudC5idXR0b24gfTtcbiAgICBsZXQgcG9zID0gdmlldy5wb3NBdENvb3JkcyhldmVudENvb3JkcyhldmVudCkpO1xuICAgIGlmICghcG9zKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKHR5cGUgPT0gXCJzaW5nbGVDbGlja1wiKSB7XG4gICAgICAgIGlmICh2aWV3LmlucHV0Lm1vdXNlRG93bilcbiAgICAgICAgICAgIHZpZXcuaW5wdXQubW91c2VEb3duLmRvbmUoKTtcbiAgICAgICAgdmlldy5pbnB1dC5tb3VzZURvd24gPSBuZXcgTW91c2VEb3duKHZpZXcsIHBvcywgZXZlbnQsICEhZmx1c2hlZCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCh0eXBlID09IFwiZG91YmxlQ2xpY2tcIiA/IGhhbmRsZURvdWJsZUNsaWNrIDogaGFuZGxlVHJpcGxlQ2xpY2spKHZpZXcsIHBvcy5wb3MsIHBvcy5pbnNpZGUsIGV2ZW50KSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0aW9uT3JpZ2luKHZpZXcsIFwicG9pbnRlclwiKTtcbiAgICB9XG59O1xuY2xhc3MgTW91c2VEb3duIHtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3LCBwb3MsIGV2ZW50LCBmbHVzaGVkKSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMucG9zID0gcG9zO1xuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgIHRoaXMuZmx1c2hlZCA9IGZsdXNoZWQ7XG4gICAgICAgIHRoaXMuZGVsYXllZFNlbGVjdGlvblN5bmMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5taWdodERyYWcgPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXJ0RG9jID0gdmlldy5zdGF0ZS5kb2M7XG4gICAgICAgIHRoaXMuc2VsZWN0Tm9kZSA9ICEhZXZlbnRbc2VsZWN0Tm9kZU1vZGlmaWVyXTtcbiAgICAgICAgdGhpcy5hbGxvd0RlZmF1bHQgPSBldmVudC5zaGlmdEtleTtcbiAgICAgICAgbGV0IHRhcmdldE5vZGUsIHRhcmdldFBvcztcbiAgICAgICAgaWYgKHBvcy5pbnNpZGUgPiAtMSkge1xuICAgICAgICAgICAgdGFyZ2V0Tm9kZSA9IHZpZXcuc3RhdGUuZG9jLm5vZGVBdChwb3MuaW5zaWRlKTtcbiAgICAgICAgICAgIHRhcmdldFBvcyA9IHBvcy5pbnNpZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgJHBvcyA9IHZpZXcuc3RhdGUuZG9jLnJlc29sdmUocG9zLnBvcyk7XG4gICAgICAgICAgICB0YXJnZXROb2RlID0gJHBvcy5wYXJlbnQ7XG4gICAgICAgICAgICB0YXJnZXRQb3MgPSAkcG9zLmRlcHRoID8gJHBvcy5iZWZvcmUoKSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZmx1c2hlZCA/IG51bGwgOiBldmVudC50YXJnZXQ7XG4gICAgICAgIGNvbnN0IHRhcmdldERlc2MgPSB0YXJnZXQgPyB2aWV3LmRvY1ZpZXcubmVhcmVzdERlc2ModGFyZ2V0LCB0cnVlKSA6IG51bGw7XG4gICAgICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0RGVzYyAmJiB0YXJnZXREZXNjLmRvbS5ub2RlVHlwZSA9PSAxID8gdGFyZ2V0RGVzYy5kb20gOiBudWxsO1xuICAgICAgICBsZXQgeyBzZWxlY3Rpb24gfSA9IHZpZXcuc3RhdGU7XG4gICAgICAgIGlmIChldmVudC5idXR0b24gPT0gMCAmJlxuICAgICAgICAgICAgdGFyZ2V0Tm9kZS50eXBlLnNwZWMuZHJhZ2dhYmxlICYmIHRhcmdldE5vZGUudHlwZS5zcGVjLnNlbGVjdGFibGUgIT09IGZhbHNlIHx8XG4gICAgICAgICAgICBzZWxlY3Rpb24gaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uICYmIHNlbGVjdGlvbi5mcm9tIDw9IHRhcmdldFBvcyAmJiBzZWxlY3Rpb24udG8gPiB0YXJnZXRQb3MpXG4gICAgICAgICAgICB0aGlzLm1pZ2h0RHJhZyA9IHtcbiAgICAgICAgICAgICAgICBub2RlOiB0YXJnZXROb2RlLFxuICAgICAgICAgICAgICAgIHBvczogdGFyZ2V0UG9zLFxuICAgICAgICAgICAgICAgIGFkZEF0dHI6ICEhKHRoaXMudGFyZ2V0ICYmICF0aGlzLnRhcmdldC5kcmFnZ2FibGUpLFxuICAgICAgICAgICAgICAgIHNldFVuZWRpdGFibGU6ICEhKHRoaXMudGFyZ2V0ICYmIGdlY2tvICYmICF0aGlzLnRhcmdldC5oYXNBdHRyaWJ1dGUoXCJjb250ZW50RWRpdGFibGVcIikpXG4gICAgICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy50YXJnZXQgJiYgdGhpcy5taWdodERyYWcgJiYgKHRoaXMubWlnaHREcmFnLmFkZEF0dHIgfHwgdGhpcy5taWdodERyYWcuc2V0VW5lZGl0YWJsZSkpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy5kb21PYnNlcnZlci5zdG9wKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5taWdodERyYWcuYWRkQXR0cilcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5kcmFnZ2FibGUgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHRoaXMubWlnaHREcmFnLnNldFVuZWRpdGFibGUpXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZXcuaW5wdXQubW91c2VEb3duID09IHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjb250ZW50RWRpdGFibGVcIiwgXCJmYWxzZVwiKTtcbiAgICAgICAgICAgICAgICB9LCAyMCk7XG4gICAgICAgICAgICB0aGlzLnZpZXcuZG9tT2JzZXJ2ZXIuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgICB2aWV3LnJvb3QuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy51cCA9IHRoaXMudXAuYmluZCh0aGlzKSk7XG4gICAgICAgIHZpZXcucm9vdC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW92ZSA9IHRoaXMubW92ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgc2V0U2VsZWN0aW9uT3JpZ2luKHZpZXcsIFwicG9pbnRlclwiKTtcbiAgICB9XG4gICAgZG9uZSgpIHtcbiAgICAgICAgdGhpcy52aWV3LnJvb3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy51cCk7XG4gICAgICAgIHRoaXMudmlldy5yb290LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3ZlKTtcbiAgICAgICAgaWYgKHRoaXMubWlnaHREcmFnICYmIHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcuZG9tT2JzZXJ2ZXIuc3RvcCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMubWlnaHREcmFnLmFkZEF0dHIpXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQucmVtb3ZlQXR0cmlidXRlKFwiZHJhZ2dhYmxlXCIpO1xuICAgICAgICAgICAgaWYgKHRoaXMubWlnaHREcmFnLnNldFVuZWRpdGFibGUpXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQucmVtb3ZlQXR0cmlidXRlKFwiY29udGVudEVkaXRhYmxlXCIpO1xuICAgICAgICAgICAgdGhpcy52aWV3LmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGVsYXllZFNlbGVjdGlvblN5bmMpXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHNlbGVjdGlvblRvRE9NKHRoaXMudmlldykpO1xuICAgICAgICB0aGlzLnZpZXcuaW5wdXQubW91c2VEb3duID0gbnVsbDtcbiAgICB9XG4gICAgdXAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5kb25lKCk7XG4gICAgICAgIGlmICghdGhpcy52aWV3LmRvbS5jb250YWlucyhldmVudC50YXJnZXQpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgcG9zID0gdGhpcy5wb3M7XG4gICAgICAgIGlmICh0aGlzLnZpZXcuc3RhdGUuZG9jICE9IHRoaXMuc3RhcnREb2MpXG4gICAgICAgICAgICBwb3MgPSB0aGlzLnZpZXcucG9zQXRDb29yZHMoZXZlbnRDb29yZHMoZXZlbnQpKTtcbiAgICAgICAgdGhpcy51cGRhdGVBbGxvd0RlZmF1bHQoZXZlbnQpO1xuICAgICAgICBpZiAodGhpcy5hbGxvd0RlZmF1bHQgfHwgIXBvcykge1xuICAgICAgICAgICAgc2V0U2VsZWN0aW9uT3JpZ2luKHRoaXMudmlldywgXCJwb2ludGVyXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhhbmRsZVNpbmdsZUNsaWNrKHRoaXMudmlldywgcG9zLnBvcywgcG9zLmluc2lkZSwgZXZlbnQsIHRoaXMuc2VsZWN0Tm9kZSkpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXZlbnQuYnV0dG9uID09IDAgJiZcbiAgICAgICAgICAgICh0aGlzLmZsdXNoZWQgfHxcbiAgICAgICAgICAgICAgICAvLyBTYWZhcmkgaWdub3JlcyBjbGlja3Mgb24gZHJhZ2dhYmxlIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgKHNhZmFyaSAmJiB0aGlzLm1pZ2h0RHJhZyAmJiAhdGhpcy5taWdodERyYWcubm9kZS5pc0F0b20pIHx8XG4gICAgICAgICAgICAgICAgLy8gQ2hyb21lIHdpbGwgc29tZXRpbWVzIHRyZWF0IGEgbm9kZSBzZWxlY3Rpb24gYXMgYVxuICAgICAgICAgICAgICAgIC8vIGN1cnNvciwgYnV0IHN0aWxsIHJlcG9ydCB0aGF0IHRoZSBub2RlIGlzIHNlbGVjdGVkXG4gICAgICAgICAgICAgICAgLy8gd2hlbiBhc2tlZCB0aHJvdWdoIGdldFNlbGVjdGlvbi4gWW91J2xsIHRoZW4gZ2V0IGFcbiAgICAgICAgICAgICAgICAvLyBzaXR1YXRpb24gd2hlcmUgY2xpY2tpbmcgYXQgdGhlIHBvaW50IHdoZXJlIHRoYXRcbiAgICAgICAgICAgICAgICAvLyAoaGlkZGVuKSBjdXJzb3IgaXMgZG9lc24ndCBjaGFuZ2UgdGhlIHNlbGVjdGlvbiwgYW5kXG4gICAgICAgICAgICAgICAgLy8gdGh1cyBkb2Vzbid0IGdldCBhIHJlYWN0aW9uIGZyb20gUHJvc2VNaXJyb3IuIFRoaXNcbiAgICAgICAgICAgICAgICAvLyB3b3JrcyBhcm91bmQgdGhhdC5cbiAgICAgICAgICAgICAgICAoY2hyb21lICYmICF0aGlzLnZpZXcuc3RhdGUuc2VsZWN0aW9uLnZpc2libGUgJiZcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oTWF0aC5hYnMocG9zLnBvcyAtIHRoaXMudmlldy5zdGF0ZS5zZWxlY3Rpb24uZnJvbSksIE1hdGguYWJzKHBvcy5wb3MgLSB0aGlzLnZpZXcuc3RhdGUuc2VsZWN0aW9uLnRvKSkgPD0gMikpKSB7XG4gICAgICAgICAgICB1cGRhdGVTZWxlY3Rpb24odGhpcy52aWV3LCBTZWxlY3Rpb24ubmVhcih0aGlzLnZpZXcuc3RhdGUuZG9jLnJlc29sdmUocG9zLnBvcykpLCBcInBvaW50ZXJcIik7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0U2VsZWN0aW9uT3JpZ2luKHRoaXMudmlldywgXCJwb2ludGVyXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1vdmUoZXZlbnQpIHtcbiAgICAgICAgdGhpcy51cGRhdGVBbGxvd0RlZmF1bHQoZXZlbnQpO1xuICAgICAgICBzZXRTZWxlY3Rpb25PcmlnaW4odGhpcy52aWV3LCBcInBvaW50ZXJcIik7XG4gICAgICAgIGlmIChldmVudC5idXR0b25zID09IDApXG4gICAgICAgICAgICB0aGlzLmRvbmUoKTtcbiAgICB9XG4gICAgdXBkYXRlQWxsb3dEZWZhdWx0KGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5hbGxvd0RlZmF1bHQgJiYgKE1hdGguYWJzKHRoaXMuZXZlbnQueCAtIGV2ZW50LmNsaWVudFgpID4gNCB8fFxuICAgICAgICAgICAgTWF0aC5hYnModGhpcy5ldmVudC55IC0gZXZlbnQuY2xpZW50WSkgPiA0KSlcbiAgICAgICAgICAgIHRoaXMuYWxsb3dEZWZhdWx0ID0gdHJ1ZTtcbiAgICB9XG59XG5oYW5kbGVycy50b3VjaHN0YXJ0ID0gdmlldyA9PiB7XG4gICAgdmlldy5pbnB1dC5sYXN0VG91Y2ggPSBEYXRlLm5vdygpO1xuICAgIGZvcmNlRE9NRmx1c2godmlldyk7XG4gICAgc2V0U2VsZWN0aW9uT3JpZ2luKHZpZXcsIFwicG9pbnRlclwiKTtcbn07XG5oYW5kbGVycy50b3VjaG1vdmUgPSB2aWV3ID0+IHtcbiAgICB2aWV3LmlucHV0Lmxhc3RUb3VjaCA9IERhdGUubm93KCk7XG4gICAgc2V0U2VsZWN0aW9uT3JpZ2luKHZpZXcsIFwicG9pbnRlclwiKTtcbn07XG5oYW5kbGVycy5jb250ZXh0bWVudSA9IHZpZXcgPT4gZm9yY2VET01GbHVzaCh2aWV3KTtcbmZ1bmN0aW9uIGluT3JOZWFyQ29tcG9zaXRpb24odmlldywgZXZlbnQpIHtcbiAgICBpZiAodmlldy5jb21wb3NpbmcpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIC8vIFNlZSBodHRwczovL3d3dy5zdHVtLmRlLzIwMTYvMDYvMjQvaGFuZGxpbmctaW1lLWV2ZW50cy1pbi1qYXZhc2NyaXB0Ly5cbiAgICAvLyBPbiBKYXBhbmVzZSBpbnB1dCBtZXRob2QgZWRpdG9ycyAoSU1FcyksIHRoZSBFbnRlciBrZXkgaXMgdXNlZCB0byBjb25maXJtIGNoYXJhY3RlclxuICAgIC8vIHNlbGVjdGlvbi4gT24gU2FmYXJpLCB3aGVuIEVudGVyIGlzIHByZXNzZWQsIGNvbXBvc2l0aW9uZW5kIGFuZCBrZXlkb3duIGV2ZW50cyBhcmVcbiAgICAvLyBlbWl0dGVkLiBUaGUga2V5ZG93biBldmVudCB0cmlnZ2VycyBuZXdsaW5lIGluc2VydGlvbiwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cbiAgICAvLyBUaGlzIG1ldGhvZCByZXR1cm5zIHRydWUgaWYgdGhlIGtleWRvd24gZXZlbnQgc2hvdWxkIGJlIGlnbm9yZWQuXG4gICAgLy8gV2Ugb25seSBpZ25vcmUgaXQgb25jZSwgYXMgcHJlc3NpbmcgRW50ZXIgYSBzZWNvbmQgdGltZSAqc2hvdWxkKiBpbnNlcnQgYSBuZXdsaW5lLlxuICAgIC8vIEZ1cnRoZXJtb3JlLCB0aGUga2V5ZG93biBldmVudCB0aW1lc3RhbXAgbXVzdCBiZSBjbG9zZSB0byB0aGUgY29tcG9zaXRpb25FbmRlZEF0IHRpbWVzdGFtcC5cbiAgICAvLyBUaGlzIGd1YXJkcyBhZ2FpbnN0IHRoZSBjYXNlIHdoZXJlIGNvbXBvc2l0aW9uZW5kIGlzIHRyaWdnZXJlZCB3aXRob3V0IHRoZSBrZXlib2FyZFxuICAgIC8vIChlLmcuIGNoYXJhY3RlciBjb25maXJtYXRpb24gbWF5IGJlIGRvbmUgd2l0aCB0aGUgbW91c2UpLCBhbmQga2V5ZG93biBpcyB0cmlnZ2VyZWRcbiAgICAvLyBhZnRlcndhcmRzLSB3ZSB3b3VsZG4ndCB3YW50IHRvIGlnbm9yZSB0aGUga2V5ZG93biBldmVudCBpbiB0aGlzIGNhc2UuXG4gICAgaWYgKHNhZmFyaSAmJiBNYXRoLmFicyhldmVudC50aW1lU3RhbXAgLSB2aWV3LmlucHV0LmNvbXBvc2l0aW9uRW5kZWRBdCkgPCA1MDApIHtcbiAgICAgICAgdmlldy5pbnB1dC5jb21wb3NpdGlvbkVuZGVkQXQgPSAtMmU4O1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8gRHJvcCBhY3RpdmUgY29tcG9zaXRpb24gYWZ0ZXIgNSBzZWNvbmRzIG9mIGluYWN0aXZpdHkgb24gQW5kcm9pZFxuY29uc3QgdGltZW91dENvbXBvc2l0aW9uID0gYW5kcm9pZCA/IDUwMDAgOiAtMTtcbmVkaXRIYW5kbGVycy5jb21wb3NpdGlvbnN0YXJ0ID0gZWRpdEhhbmRsZXJzLmNvbXBvc2l0aW9udXBkYXRlID0gdmlldyA9PiB7XG4gICAgaWYgKCF2aWV3LmNvbXBvc2luZykge1xuICAgICAgICB2aWV3LmRvbU9ic2VydmVyLmZsdXNoKCk7XG4gICAgICAgIGxldCB7IHN0YXRlIH0gPSB2aWV3LCAkcG9zID0gc3RhdGUuc2VsZWN0aW9uLiR0bztcbiAgICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbiBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24gJiZcbiAgICAgICAgICAgIChzdGF0ZS5zdG9yZWRNYXJrcyB8fFxuICAgICAgICAgICAgICAgICghJHBvcy50ZXh0T2Zmc2V0ICYmICRwb3MucGFyZW50T2Zmc2V0ICYmICRwb3Mubm9kZUJlZm9yZS5tYXJrcy5zb21lKG0gPT4gbS50eXBlLnNwZWMuaW5jbHVzaXZlID09PSBmYWxzZSkpKSkge1xuICAgICAgICAgICAgLy8gTmVlZCB0byB3cmFwIHRoZSBjdXJzb3IgaW4gbWFyayBub2RlcyBkaWZmZXJlbnQgZnJvbSB0aGUgb25lcyBpbiB0aGUgRE9NIGNvbnRleHRcbiAgICAgICAgICAgIHZpZXcubWFya0N1cnNvciA9IHZpZXcuc3RhdGUuc3RvcmVkTWFya3MgfHwgJHBvcy5tYXJrcygpO1xuICAgICAgICAgICAgZW5kQ29tcG9zaXRpb24odmlldywgdHJ1ZSk7XG4gICAgICAgICAgICB2aWV3Lm1hcmtDdXJzb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZW5kQ29tcG9zaXRpb24odmlldywgIXN0YXRlLnNlbGVjdGlvbi5lbXB0eSk7XG4gICAgICAgICAgICAvLyBJbiBmaXJlZm94LCBpZiB0aGUgY3Vyc29yIGlzIGFmdGVyIGJ1dCBvdXRzaWRlIGEgbWFya2VkIG5vZGUsXG4gICAgICAgICAgICAvLyB0aGUgaW5zZXJ0ZWQgdGV4dCB3b24ndCBpbmhlcml0IHRoZSBtYXJrcy4gU28gdGhpcyBtb3ZlcyBpdFxuICAgICAgICAgICAgLy8gaW5zaWRlIGlmIG5lY2Vzc2FyeS5cbiAgICAgICAgICAgIGlmIChnZWNrbyAmJiBzdGF0ZS5zZWxlY3Rpb24uZW1wdHkgJiYgJHBvcy5wYXJlbnRPZmZzZXQgJiYgISRwb3MudGV4dE9mZnNldCAmJiAkcG9zLm5vZGVCZWZvcmUubWFya3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uUmFuZ2UoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBub2RlID0gc2VsLmZvY3VzTm9kZSwgb2Zmc2V0ID0gc2VsLmZvY3VzT2Zmc2V0OyBub2RlICYmIG5vZGUubm9kZVR5cGUgPT0gMSAmJiBvZmZzZXQgIT0gMDspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJlZm9yZSA9IG9mZnNldCA8IDAgPyBub2RlLmxhc3RDaGlsZCA6IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXQgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFiZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlZm9yZS5ub2RlVHlwZSA9PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VsID0gdmlldy5kb21TZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsLmNvbGxhcHNlKGJlZm9yZSwgYmVmb3JlLm5vZGVWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gYmVmb3JlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmlldy5pbnB1dC5jb21wb3NpbmcgPSB0cnVlO1xuICAgIH1cbiAgICBzY2hlZHVsZUNvbXBvc2VFbmQodmlldywgdGltZW91dENvbXBvc2l0aW9uKTtcbn07XG5lZGl0SGFuZGxlcnMuY29tcG9zaXRpb25lbmQgPSAodmlldywgZXZlbnQpID0+IHtcbiAgICBpZiAodmlldy5jb21wb3NpbmcpIHtcbiAgICAgICAgdmlldy5pbnB1dC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgICAgdmlldy5pbnB1dC5jb21wb3NpdGlvbkVuZGVkQXQgPSBldmVudC50aW1lU3RhbXA7XG4gICAgICAgIHZpZXcuaW5wdXQuY29tcG9zaXRpb25QZW5kaW5nQ2hhbmdlcyA9IHZpZXcuZG9tT2JzZXJ2ZXIucGVuZGluZ1JlY29yZHMoKS5sZW5ndGggPyB2aWV3LmlucHV0LmNvbXBvc2l0aW9uSUQgOiAwO1xuICAgICAgICB2aWV3LmlucHV0LmNvbXBvc2l0aW9uTm9kZSA9IG51bGw7XG4gICAgICAgIGlmICh2aWV3LmlucHV0LmNvbXBvc2l0aW9uUGVuZGluZ0NoYW5nZXMpXG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHZpZXcuZG9tT2JzZXJ2ZXIuZmx1c2goKSk7XG4gICAgICAgIHZpZXcuaW5wdXQuY29tcG9zaXRpb25JRCsrO1xuICAgICAgICBzY2hlZHVsZUNvbXBvc2VFbmQodmlldywgMjApO1xuICAgIH1cbn07XG5mdW5jdGlvbiBzY2hlZHVsZUNvbXBvc2VFbmQodmlldywgZGVsYXkpIHtcbiAgICBjbGVhclRpbWVvdXQodmlldy5pbnB1dC5jb21wb3NpbmdUaW1lb3V0KTtcbiAgICBpZiAoZGVsYXkgPiAtMSlcbiAgICAgICAgdmlldy5pbnB1dC5jb21wb3NpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBlbmRDb21wb3NpdGlvbih2aWV3KSwgZGVsYXkpO1xufVxuZnVuY3Rpb24gY2xlYXJDb21wb3NpdGlvbih2aWV3KSB7XG4gICAgaWYgKHZpZXcuY29tcG9zaW5nKSB7XG4gICAgICAgIHZpZXcuaW5wdXQuY29tcG9zaW5nID0gZmFsc2U7XG4gICAgICAgIHZpZXcuaW5wdXQuY29tcG9zaXRpb25FbmRlZEF0ID0gdGltZXN0YW1wRnJvbUN1c3RvbUV2ZW50KCk7XG4gICAgfVxuICAgIHdoaWxlICh2aWV3LmlucHV0LmNvbXBvc2l0aW9uTm9kZXMubGVuZ3RoID4gMClcbiAgICAgICAgdmlldy5pbnB1dC5jb21wb3NpdGlvbk5vZGVzLnBvcCgpLm1hcmtQYXJlbnRzRGlydHkoKTtcbn1cbmZ1bmN0aW9uIGZpbmRDb21wb3NpdGlvbk5vZGUodmlldykge1xuICAgIGxldCBzZWwgPSB2aWV3LmRvbVNlbGVjdGlvblJhbmdlKCk7XG4gICAgaWYgKCFzZWwuZm9jdXNOb2RlKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBsZXQgdGV4dEJlZm9yZSA9IHRleHROb2RlQmVmb3JlJDEoc2VsLmZvY3VzTm9kZSwgc2VsLmZvY3VzT2Zmc2V0KTtcbiAgICBsZXQgdGV4dEFmdGVyID0gdGV4dE5vZGVBZnRlciQxKHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCk7XG4gICAgaWYgKHRleHRCZWZvcmUgJiYgdGV4dEFmdGVyICYmIHRleHRCZWZvcmUgIT0gdGV4dEFmdGVyKSB7XG4gICAgICAgIGxldCBkZXNjQWZ0ZXIgPSB0ZXh0QWZ0ZXIucG1WaWV3RGVzYywgbGFzdENoYW5nZWQgPSB2aWV3LmRvbU9ic2VydmVyLmxhc3RDaGFuZ2VkVGV4dE5vZGU7XG4gICAgICAgIGlmICh0ZXh0QmVmb3JlID09IGxhc3RDaGFuZ2VkIHx8IHRleHRBZnRlciA9PSBsYXN0Q2hhbmdlZClcbiAgICAgICAgICAgIHJldHVybiBsYXN0Q2hhbmdlZDtcbiAgICAgICAgaWYgKCFkZXNjQWZ0ZXIgfHwgIWRlc2NBZnRlci5pc1RleHQodGV4dEFmdGVyLm5vZGVWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0QWZ0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmlldy5pbnB1dC5jb21wb3NpdGlvbk5vZGUgPT0gdGV4dEFmdGVyKSB7XG4gICAgICAgICAgICBsZXQgZGVzY0JlZm9yZSA9IHRleHRCZWZvcmUucG1WaWV3RGVzYztcbiAgICAgICAgICAgIGlmICghKCFkZXNjQmVmb3JlIHx8ICFkZXNjQmVmb3JlLmlzVGV4dCh0ZXh0QmVmb3JlLm5vZGVWYWx1ZSkpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0QWZ0ZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRleHRCZWZvcmUgfHwgdGV4dEFmdGVyO1xufVxuZnVuY3Rpb24gdGltZXN0YW1wRnJvbUN1c3RvbUV2ZW50KCkge1xuICAgIGxldCBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgZXZlbnQuaW5pdEV2ZW50KFwiZXZlbnRcIiwgdHJ1ZSwgdHJ1ZSk7XG4gICAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcDtcbn1cbi8qKlxuQGludGVybmFsXG4qL1xuZnVuY3Rpb24gZW5kQ29tcG9zaXRpb24odmlldywgcmVzdGFydGluZyA9IGZhbHNlKSB7XG4gICAgaWYgKGFuZHJvaWQgJiYgdmlldy5kb21PYnNlcnZlci5mbHVzaGluZ1Nvb24gPj0gMClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZpZXcuZG9tT2JzZXJ2ZXIuZm9yY2VGbHVzaCgpO1xuICAgIGNsZWFyQ29tcG9zaXRpb24odmlldyk7XG4gICAgaWYgKHJlc3RhcnRpbmcgfHwgdmlldy5kb2NWaWV3ICYmIHZpZXcuZG9jVmlldy5kaXJ0eSkge1xuICAgICAgICBsZXQgc2VsID0gc2VsZWN0aW9uRnJvbURPTSh2aWV3KSwgY3VyID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XG4gICAgICAgIGlmIChzZWwgJiYgIXNlbC5lcShjdXIpKVxuICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnRyLnNldFNlbGVjdGlvbihzZWwpKTtcbiAgICAgICAgZWxzZSBpZiAoKHZpZXcubWFya0N1cnNvciB8fCByZXN0YXJ0aW5nKSAmJiAhY3VyLiRmcm9tLm5vZGUoY3VyLiRmcm9tLnNoYXJlZERlcHRoKGN1ci50bykpLmlubGluZUNvbnRlbnQpXG4gICAgICAgICAgICB2aWV3LmRpc3BhdGNoKHZpZXcuc3RhdGUudHIuZGVsZXRlU2VsZWN0aW9uKCkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB2aWV3LnVwZGF0ZVN0YXRlKHZpZXcuc3RhdGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY2FwdHVyZUNvcHkodmlldywgZG9tKSB7XG4gICAgLy8gVGhlIGV4dHJhIHdyYXBwZXIgaXMgc29tZWhvdyBuZWNlc3Nhcnkgb24gSUUvRWRnZSB0byBwcmV2ZW50IHRoZVxuICAgIC8vIGNvbnRlbnQgZnJvbSBiZWluZyBtYW5nbGVkIHdoZW4gaXQgaXMgcHV0IG9udG8gdGhlIGNsaXBib2FyZFxuICAgIGlmICghdmlldy5kb20ucGFyZW50Tm9kZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCB3cmFwID0gdmlldy5kb20ucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKTtcbiAgICB3cmFwLmFwcGVuZENoaWxkKGRvbSk7XG4gICAgd3JhcC5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjogZml4ZWQ7IGxlZnQ6IC0xMDAwMHB4OyB0b3A6IDEwcHhcIjtcbiAgICBsZXQgc2VsID0gZ2V0U2VsZWN0aW9uKCksIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMoZG9tKTtcbiAgICAvLyBEb25lIGJlY2F1c2UgSUUgd2lsbCBmaXJlIGEgc2VsZWN0aW9uY2hhbmdlIG1vdmluZyB0aGUgc2VsZWN0aW9uXG4gICAgLy8gdG8gaXRzIHN0YXJ0IHdoZW4gcmVtb3ZlQWxsUmFuZ2VzIGlzIGNhbGxlZCBhbmQgdGhlIGVkaXRvciBzdGlsbFxuICAgIC8vIGhhcyBmb2N1cyAod2hpY2ggd2lsbCBtZXNzIHVwIHRoZSBlZGl0b3IncyBzZWxlY3Rpb24gc3RhdGUpLlxuICAgIHZpZXcuZG9tLmJsdXIoKTtcbiAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgc2VsLmFkZFJhbmdlKHJhbmdlKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHdyYXAucGFyZW50Tm9kZSlcbiAgICAgICAgICAgIHdyYXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh3cmFwKTtcbiAgICAgICAgdmlldy5mb2N1cygpO1xuICAgIH0sIDUwKTtcbn1cbi8vIFRoaXMgaXMgdmVyeSBjcnVkZSwgYnV0IHVuZm9ydHVuYXRlbHkgYm90aCB0aGVzZSBicm93c2VycyBfcHJldGVuZF9cbi8vIHRoYXQgdGhleSBoYXZlIGEgY2xpcGJvYXJkIEFQSeKAlGFsbCB0aGUgb2JqZWN0cyBhbmQgbWV0aG9kcyBhcmVcbi8vIHRoZXJlLCB0aGV5IGp1c3QgZG9uJ3Qgd29yaywgYW5kIHRoZXkgYXJlIGhhcmQgdG8gdGVzdC5cbmNvbnN0IGJyb2tlbkNsaXBib2FyZEFQSSA9IChpZSAmJiBpZV92ZXJzaW9uIDwgMTUpIHx8XG4gICAgKGlvcyAmJiB3ZWJraXRfdmVyc2lvbiA8IDYwNCk7XG5oYW5kbGVycy5jb3B5ID0gZWRpdEhhbmRsZXJzLmN1dCA9ICh2aWV3LCBfZXZlbnQpID0+IHtcbiAgICBsZXQgZXZlbnQgPSBfZXZlbnQ7XG4gICAgbGV0IHNlbCA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLCBjdXQgPSBldmVudC50eXBlID09IFwiY3V0XCI7XG4gICAgaWYgKHNlbC5lbXB0eSlcbiAgICAgICAgcmV0dXJuO1xuICAgIC8vIElFIGFuZCBFZGdlJ3MgY2xpcGJvYXJkIGludGVyZmFjZSBpcyBjb21wbGV0ZWx5IGJyb2tlblxuICAgIGxldCBkYXRhID0gYnJva2VuQ2xpcGJvYXJkQVBJID8gbnVsbCA6IGV2ZW50LmNsaXBib2FyZERhdGE7XG4gICAgbGV0IHNsaWNlID0gc2VsLmNvbnRlbnQoKSwgeyBkb20sIHRleHQgfSA9IHNlcmlhbGl6ZUZvckNsaXBib2FyZCh2aWV3LCBzbGljZSk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZGF0YS5jbGVhckRhdGEoKTtcbiAgICAgICAgZGF0YS5zZXREYXRhKFwidGV4dC9odG1sXCIsIGRvbS5pbm5lckhUTUwpO1xuICAgICAgICBkYXRhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHRleHQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2FwdHVyZUNvcHkodmlldywgZG9tKTtcbiAgICB9XG4gICAgaWYgKGN1dClcbiAgICAgICAgdmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnRyLmRlbGV0ZVNlbGVjdGlvbigpLnNjcm9sbEludG9WaWV3KCkuc2V0TWV0YShcInVpRXZlbnRcIiwgXCJjdXRcIikpO1xufTtcbmZ1bmN0aW9uIHNsaWNlU2luZ2xlTm9kZShzbGljZSkge1xuICAgIHJldHVybiBzbGljZS5vcGVuU3RhcnQgPT0gMCAmJiBzbGljZS5vcGVuRW5kID09IDAgJiYgc2xpY2UuY29udGVudC5jaGlsZENvdW50ID09IDEgPyBzbGljZS5jb250ZW50LmZpcnN0Q2hpbGQgOiBudWxsO1xufVxuZnVuY3Rpb24gY2FwdHVyZVBhc3RlKHZpZXcsIGV2ZW50KSB7XG4gICAgaWYgKCF2aWV3LmRvbS5wYXJlbnROb2RlKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IHBsYWluVGV4dCA9IHZpZXcuaW5wdXQuc2hpZnRLZXkgfHwgdmlldy5zdGF0ZS5zZWxlY3Rpb24uJGZyb20ucGFyZW50LnR5cGUuc3BlYy5jb2RlO1xuICAgIGxldCB0YXJnZXQgPSB2aWV3LmRvbS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQocGxhaW5UZXh0ID8gXCJ0ZXh0YXJlYVwiIDogXCJkaXZcIikpO1xuICAgIGlmICghcGxhaW5UZXh0KVxuICAgICAgICB0YXJnZXQuY29udGVudEVkaXRhYmxlID0gXCJ0cnVlXCI7XG4gICAgdGFyZ2V0LnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOiBmaXhlZDsgbGVmdDogLTEwMDAwcHg7IHRvcDogMTBweFwiO1xuICAgIHRhcmdldC5mb2N1cygpO1xuICAgIGxldCBwbGFpbiA9IHZpZXcuaW5wdXQuc2hpZnRLZXkgJiYgdmlldy5pbnB1dC5sYXN0S2V5Q29kZSAhPSA0NTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdmlldy5mb2N1cygpO1xuICAgICAgICBpZiAodGFyZ2V0LnBhcmVudE5vZGUpXG4gICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YXJnZXQpO1xuICAgICAgICBpZiAocGxhaW5UZXh0KVxuICAgICAgICAgICAgZG9QYXN0ZSh2aWV3LCB0YXJnZXQudmFsdWUsIG51bGwsIHBsYWluLCBldmVudCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRvUGFzdGUodmlldywgdGFyZ2V0LnRleHRDb250ZW50LCB0YXJnZXQuaW5uZXJIVE1MLCBwbGFpbiwgZXZlbnQpO1xuICAgIH0sIDUwKTtcbn1cbmZ1bmN0aW9uIGRvUGFzdGUodmlldywgdGV4dCwgaHRtbCwgcHJlZmVyUGxhaW4sIGV2ZW50KSB7XG4gICAgbGV0IHNsaWNlID0gcGFyc2VGcm9tQ2xpcGJvYXJkKHZpZXcsIHRleHQsIGh0bWwsIHByZWZlclBsYWluLCB2aWV3LnN0YXRlLnNlbGVjdGlvbi4kZnJvbSk7XG4gICAgaWYgKHZpZXcuc29tZVByb3AoXCJoYW5kbGVQYXN0ZVwiLCBmID0+IGYodmlldywgZXZlbnQsIHNsaWNlIHx8IFNsaWNlLmVtcHR5KSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICghc2xpY2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgc2luZ2xlTm9kZSA9IHNsaWNlU2luZ2xlTm9kZShzbGljZSk7XG4gICAgbGV0IHRyID0gc2luZ2xlTm9kZVxuICAgICAgICA/IHZpZXcuc3RhdGUudHIucmVwbGFjZVNlbGVjdGlvbldpdGgoc2luZ2xlTm9kZSwgcHJlZmVyUGxhaW4pXG4gICAgICAgIDogdmlldy5zdGF0ZS50ci5yZXBsYWNlU2VsZWN0aW9uKHNsaWNlKTtcbiAgICB2aWV3LmRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkuc2V0TWV0YShcInBhc3RlXCIsIHRydWUpLnNldE1ldGEoXCJ1aUV2ZW50XCIsIFwicGFzdGVcIikpO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZ2V0VGV4dChjbGlwYm9hcmREYXRhKSB7XG4gICAgbGV0IHRleHQgPSBjbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpIHx8IGNsaXBib2FyZERhdGEuZ2V0RGF0YShcIlRleHRcIik7XG4gICAgaWYgKHRleHQpXG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIGxldCB1cmlzID0gY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwidGV4dC91cmktbGlzdFwiKTtcbiAgICByZXR1cm4gdXJpcyA/IHVyaXMucmVwbGFjZSgvXFxyP1xcbi9nLCBcIiBcIikgOiBcIlwiO1xufVxuZWRpdEhhbmRsZXJzLnBhc3RlID0gKHZpZXcsIF9ldmVudCkgPT4ge1xuICAgIGxldCBldmVudCA9IF9ldmVudDtcbiAgICAvLyBIYW5kbGluZyBwYXN0ZSBmcm9tIEphdmFTY3JpcHQgZHVyaW5nIGNvbXBvc2l0aW9uIGlzIHZlcnkgcG9vcmx5XG4gICAgLy8gaGFuZGxlZCBieSBicm93c2Vycywgc28gYXMgYSBkb2RneSBidXQgcHJlZmVyYWJsZSBrbHVkZ2UsIHdlIGp1c3RcbiAgICAvLyBsZXQgdGhlIGJyb3dzZXIgZG8gaXRzIG5hdGl2ZSB0aGluZyB0aGVyZSwgZXhjZXB0IG9uIEFuZHJvaWQsXG4gICAgLy8gd2hlcmUgdGhlIGVkaXRvciBpcyBhbG1vc3QgYWx3YXlzIGNvbXBvc2luZy5cbiAgICBpZiAodmlldy5jb21wb3NpbmcgJiYgIWFuZHJvaWQpXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgZGF0YSA9IGJyb2tlbkNsaXBib2FyZEFQSSA/IG51bGwgOiBldmVudC5jbGlwYm9hcmREYXRhO1xuICAgIGxldCBwbGFpbiA9IHZpZXcuaW5wdXQuc2hpZnRLZXkgJiYgdmlldy5pbnB1dC5sYXN0S2V5Q29kZSAhPSA0NTtcbiAgICBpZiAoZGF0YSAmJiBkb1Bhc3RlKHZpZXcsIGdldFRleHQoZGF0YSksIGRhdGEuZ2V0RGF0YShcInRleHQvaHRtbFwiKSwgcGxhaW4sIGV2ZW50KSlcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBlbHNlXG4gICAgICAgIGNhcHR1cmVQYXN0ZSh2aWV3LCBldmVudCk7XG59O1xuY2xhc3MgRHJhZ2dpbmcge1xuICAgIGNvbnN0cnVjdG9yKHNsaWNlLCBtb3ZlLCBub2RlKSB7XG4gICAgICAgIHRoaXMuc2xpY2UgPSBzbGljZTtcbiAgICAgICAgdGhpcy5tb3ZlID0gbW92ZTtcbiAgICAgICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICB9XG59XG5jb25zdCBkcmFnQ29weU1vZGlmaWVyID0gbWFjID8gXCJhbHRLZXlcIiA6IFwiY3RybEtleVwiO1xuZnVuY3Rpb24gZHJhZ01vdmVzKHZpZXcsIGV2ZW50KSB7XG4gICAgbGV0IG1vdmVzID0gdmlldy5zb21lUHJvcChcImRyYWdDb3BpZXNcIiwgdGVzdCA9PiAhdGVzdChldmVudCkpO1xuICAgIHJldHVybiBtb3ZlcyAhPSBudWxsID8gbW92ZXMgOiAhZXZlbnRbZHJhZ0NvcHlNb2RpZmllcl07XG59XG5oYW5kbGVycy5kcmFnc3RhcnQgPSAodmlldywgX2V2ZW50KSA9PiB7XG4gICAgbGV0IGV2ZW50ID0gX2V2ZW50O1xuICAgIGxldCBtb3VzZURvd24gPSB2aWV3LmlucHV0Lm1vdXNlRG93bjtcbiAgICBpZiAobW91c2VEb3duKVxuICAgICAgICBtb3VzZURvd24uZG9uZSgpO1xuICAgIGlmICghZXZlbnQuZGF0YVRyYW5zZmVyKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0IHNlbCA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uO1xuICAgIGxldCBwb3MgPSBzZWwuZW1wdHkgPyBudWxsIDogdmlldy5wb3NBdENvb3JkcyhldmVudENvb3JkcyhldmVudCkpO1xuICAgIGxldCBub2RlO1xuICAgIGlmIChwb3MgJiYgcG9zLnBvcyA+PSBzZWwuZnJvbSAmJiBwb3MucG9zIDw9IChzZWwgaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uID8gc2VsLnRvIC0gMSA6IHNlbC50bykpIDtcbiAgICBlbHNlIGlmIChtb3VzZURvd24gJiYgbW91c2VEb3duLm1pZ2h0RHJhZykge1xuICAgICAgICBub2RlID0gTm9kZVNlbGVjdGlvbi5jcmVhdGUodmlldy5zdGF0ZS5kb2MsIG1vdXNlRG93bi5taWdodERyYWcucG9zKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgIGxldCBkZXNjID0gdmlldy5kb2NWaWV3Lm5lYXJlc3REZXNjKGV2ZW50LnRhcmdldCwgdHJ1ZSk7XG4gICAgICAgIGlmIChkZXNjICYmIGRlc2Mubm9kZS50eXBlLnNwZWMuZHJhZ2dhYmxlICYmIGRlc2MgIT0gdmlldy5kb2NWaWV3KVxuICAgICAgICAgICAgbm9kZSA9IE5vZGVTZWxlY3Rpb24uY3JlYXRlKHZpZXcuc3RhdGUuZG9jLCBkZXNjLnBvc0JlZm9yZSk7XG4gICAgfVxuICAgIGxldCBkcmFnZ2VkU2xpY2UgPSAobm9kZSB8fCB2aWV3LnN0YXRlLnNlbGVjdGlvbikuY29udGVudCgpO1xuICAgIGxldCB7IGRvbSwgdGV4dCwgc2xpY2UgfSA9IHNlcmlhbGl6ZUZvckNsaXBib2FyZCh2aWV3LCBkcmFnZ2VkU2xpY2UpO1xuICAgIC8vIFByZS0xMjAgQ2hyb21lIHZlcnNpb25zIGNsZWFyIGZpbGVzIHdoZW4gY2FsbGluZyBgY2xlYXJEYXRhYCAoIzE0NzIpXG4gICAgaWYgKCFldmVudC5kYXRhVHJhbnNmZXIuZmlsZXMubGVuZ3RoIHx8ICFjaHJvbWUgfHwgY2hyb21lX3ZlcnNpb24gPiAxMjApXG4gICAgICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5jbGVhckRhdGEoKTtcbiAgICBldmVudC5kYXRhVHJhbnNmZXIuc2V0RGF0YShicm9rZW5DbGlwYm9hcmRBUEkgPyBcIlRleHRcIiA6IFwidGV4dC9odG1sXCIsIGRvbS5pbm5lckhUTUwpO1xuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUHJvc2VNaXJyb3IvcHJvc2VtaXJyb3IvaXNzdWVzLzExNTZcbiAgICBldmVudC5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9IFwiY29weU1vdmVcIjtcbiAgICBpZiAoIWJyb2tlbkNsaXBib2FyZEFQSSlcbiAgICAgICAgZXZlbnQuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHRleHQpO1xuICAgIHZpZXcuZHJhZ2dpbmcgPSBuZXcgRHJhZ2dpbmcoc2xpY2UsIGRyYWdNb3Zlcyh2aWV3LCBldmVudCksIG5vZGUpO1xufTtcbmhhbmRsZXJzLmRyYWdlbmQgPSB2aWV3ID0+IHtcbiAgICBsZXQgZHJhZ2dpbmcgPSB2aWV3LmRyYWdnaW5nO1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHZpZXcuZHJhZ2dpbmcgPT0gZHJhZ2dpbmcpXG4gICAgICAgICAgICB2aWV3LmRyYWdnaW5nID0gbnVsbDtcbiAgICB9LCA1MCk7XG59O1xuZWRpdEhhbmRsZXJzLmRyYWdvdmVyID0gZWRpdEhhbmRsZXJzLmRyYWdlbnRlciA9IChfLCBlKSA9PiBlLnByZXZlbnREZWZhdWx0KCk7XG5lZGl0SGFuZGxlcnMuZHJvcCA9ICh2aWV3LCBfZXZlbnQpID0+IHtcbiAgICBsZXQgZXZlbnQgPSBfZXZlbnQ7XG4gICAgbGV0IGRyYWdnaW5nID0gdmlldy5kcmFnZ2luZztcbiAgICB2aWV3LmRyYWdnaW5nID0gbnVsbDtcbiAgICBpZiAoIWV2ZW50LmRhdGFUcmFuc2ZlcilcbiAgICAgICAgcmV0dXJuO1xuICAgIGxldCBldmVudFBvcyA9IHZpZXcucG9zQXRDb29yZHMoZXZlbnRDb29yZHMoZXZlbnQpKTtcbiAgICBpZiAoIWV2ZW50UG9zKVxuICAgICAgICByZXR1cm47XG4gICAgbGV0ICRtb3VzZSA9IHZpZXcuc3RhdGUuZG9jLnJlc29sdmUoZXZlbnRQb3MucG9zKTtcbiAgICBsZXQgc2xpY2UgPSBkcmFnZ2luZyAmJiBkcmFnZ2luZy5zbGljZTtcbiAgICBpZiAoc2xpY2UpIHtcbiAgICAgICAgdmlldy5zb21lUHJvcChcInRyYW5zZm9ybVBhc3RlZFwiLCBmID0+IHsgc2xpY2UgPSBmKHNsaWNlLCB2aWV3KTsgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzbGljZSA9IHBhcnNlRnJvbUNsaXBib2FyZCh2aWV3LCBnZXRUZXh0KGV2ZW50LmRhdGFUcmFuc2ZlciksIGJyb2tlbkNsaXBib2FyZEFQSSA/IG51bGwgOiBldmVudC5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcInRleHQvaHRtbFwiKSwgZmFsc2UsICRtb3VzZSk7XG4gICAgfVxuICAgIGxldCBtb3ZlID0gISEoZHJhZ2dpbmcgJiYgZHJhZ01vdmVzKHZpZXcsIGV2ZW50KSk7XG4gICAgaWYgKHZpZXcuc29tZVByb3AoXCJoYW5kbGVEcm9wXCIsIGYgPT4gZih2aWV3LCBldmVudCwgc2xpY2UgfHwgU2xpY2UuZW1wdHksIG1vdmUpKSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghc2xpY2UpXG4gICAgICAgIHJldHVybjtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBpbnNlcnRQb3MgPSBzbGljZSA/IGRyb3BQb2ludCh2aWV3LnN0YXRlLmRvYywgJG1vdXNlLnBvcywgc2xpY2UpIDogJG1vdXNlLnBvcztcbiAgICBpZiAoaW5zZXJ0UG9zID09IG51bGwpXG4gICAgICAgIGluc2VydFBvcyA9ICRtb3VzZS5wb3M7XG4gICAgbGV0IHRyID0gdmlldy5zdGF0ZS50cjtcbiAgICBpZiAobW92ZSkge1xuICAgICAgICBsZXQgeyBub2RlIH0gPSBkcmFnZ2luZztcbiAgICAgICAgaWYgKG5vZGUpXG4gICAgICAgICAgICBub2RlLnJlcGxhY2UodHIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0ci5kZWxldGVTZWxlY3Rpb24oKTtcbiAgICB9XG4gICAgbGV0IHBvcyA9IHRyLm1hcHBpbmcubWFwKGluc2VydFBvcyk7XG4gICAgbGV0IGlzTm9kZSA9IHNsaWNlLm9wZW5TdGFydCA9PSAwICYmIHNsaWNlLm9wZW5FbmQgPT0gMCAmJiBzbGljZS5jb250ZW50LmNoaWxkQ291bnQgPT0gMTtcbiAgICBsZXQgYmVmb3JlSW5zZXJ0ID0gdHIuZG9jO1xuICAgIGlmIChpc05vZGUpXG4gICAgICAgIHRyLnJlcGxhY2VSYW5nZVdpdGgocG9zLCBwb3MsIHNsaWNlLmNvbnRlbnQuZmlyc3RDaGlsZCk7XG4gICAgZWxzZVxuICAgICAgICB0ci5yZXBsYWNlUmFuZ2UocG9zLCBwb3MsIHNsaWNlKTtcbiAgICBpZiAodHIuZG9jLmVxKGJlZm9yZUluc2VydCkpXG4gICAgICAgIHJldHVybjtcbiAgICBsZXQgJHBvcyA9IHRyLmRvYy5yZXNvbHZlKHBvcyk7XG4gICAgaWYgKGlzTm9kZSAmJiBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShzbGljZS5jb250ZW50LmZpcnN0Q2hpbGQpICYmXG4gICAgICAgICRwb3Mubm9kZUFmdGVyICYmICRwb3Mubm9kZUFmdGVyLnNhbWVNYXJrdXAoc2xpY2UuY29udGVudC5maXJzdENoaWxkKSkge1xuICAgICAgICB0ci5zZXRTZWxlY3Rpb24obmV3IE5vZGVTZWxlY3Rpb24oJHBvcykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGVuZCA9IHRyLm1hcHBpbmcubWFwKGluc2VydFBvcyk7XG4gICAgICAgIHRyLm1hcHBpbmcubWFwc1t0ci5tYXBwaW5nLm1hcHMubGVuZ3RoIC0gMV0uZm9yRWFjaCgoX2Zyb20sIF90bywgX25ld0Zyb20sIG5ld1RvKSA9PiBlbmQgPSBuZXdUbyk7XG4gICAgICAgIHRyLnNldFNlbGVjdGlvbihzZWxlY3Rpb25CZXR3ZWVuKHZpZXcsICRwb3MsIHRyLmRvYy5yZXNvbHZlKGVuZCkpKTtcbiAgICB9XG4gICAgdmlldy5mb2N1cygpO1xuICAgIHZpZXcuZGlzcGF0Y2godHIuc2V0TWV0YShcInVpRXZlbnRcIiwgXCJkcm9wXCIpKTtcbn07XG5oYW5kbGVycy5mb2N1cyA9IHZpZXcgPT4ge1xuICAgIHZpZXcuaW5wdXQubGFzdEZvY3VzID0gRGF0ZS5ub3coKTtcbiAgICBpZiAoIXZpZXcuZm9jdXNlZCkge1xuICAgICAgICB2aWV3LmRvbU9ic2VydmVyLnN0b3AoKTtcbiAgICAgICAgdmlldy5kb20uY2xhc3NMaXN0LmFkZChcIlByb3NlTWlycm9yLWZvY3VzZWRcIik7XG4gICAgICAgIHZpZXcuZG9tT2JzZXJ2ZXIuc3RhcnQoKTtcbiAgICAgICAgdmlldy5mb2N1c2VkID0gdHJ1ZTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodmlldy5kb2NWaWV3ICYmIHZpZXcuaGFzRm9jdXMoKSAmJiAhdmlldy5kb21PYnNlcnZlci5jdXJyZW50U2VsZWN0aW9uLmVxKHZpZXcuZG9tU2VsZWN0aW9uUmFuZ2UoKSkpXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uVG9ET00odmlldyk7XG4gICAgICAgIH0sIDIwKTtcbiAgICB9XG59O1xuaGFuZGxlcnMuYmx1ciA9ICh2aWV3LCBfZXZlbnQpID0+IHtcbiAgICBsZXQgZXZlbnQgPSBfZXZlbnQ7XG4gICAgaWYgKHZpZXcuZm9jdXNlZCkge1xuICAgICAgICB2aWV3LmRvbU9ic2VydmVyLnN0b3AoKTtcbiAgICAgICAgdmlldy5kb20uY2xhc3NMaXN0LnJlbW92ZShcIlByb3NlTWlycm9yLWZvY3VzZWRcIik7XG4gICAgICAgIHZpZXcuZG9tT2JzZXJ2ZXIuc3RhcnQoKTtcbiAgICAgICAgaWYgKGV2ZW50LnJlbGF0ZWRUYXJnZXQgJiYgdmlldy5kb20uY29udGFpbnMoZXZlbnQucmVsYXRlZFRhcmdldCkpXG4gICAgICAgICAgICB2aWV3LmRvbU9ic2VydmVyLmN1cnJlbnRTZWxlY3Rpb24uY2xlYXIoKTtcbiAgICAgICAgdmlldy5mb2N1c2VkID0gZmFsc2U7XG4gICAgfVxufTtcbmhhbmRsZXJzLmJlZm9yZWlucHV0ID0gKHZpZXcsIF9ldmVudCkgPT4ge1xuICAgIGxldCBldmVudCA9IF9ldmVudDtcbiAgICAvLyBXZSBzaG91bGQgcHJvYmFibHkgZG8gbW9yZSB3aXRoIGJlZm9yZWlucHV0IGV2ZW50cywgYnV0IHN1cHBvcnRcbiAgICAvLyBpcyBzbyBzcG90dHkgdGhhdCBJJ20gc3RpbGwgd2FpdGluZyB0byBzZWUgd2hlcmUgdGhleSBhcmUgZ29pbmcuXG4gICAgLy8gVmVyeSBzcGVjaWZpYyBoYWNrIHRvIGRlYWwgd2l0aCBiYWNrc3BhY2Ugc29tZXRpbWVzIGZhaWxpbmcgb25cbiAgICAvLyBDaHJvbWUgQW5kcm9pZCB3aGVuIGFmdGVyIGFuIHVuZWRpdGFibGUgbm9kZS5cbiAgICBpZiAoY2hyb21lICYmIGFuZHJvaWQgJiYgZXZlbnQuaW5wdXRUeXBlID09IFwiZGVsZXRlQ29udGVudEJhY2t3YXJkXCIpIHtcbiAgICAgICAgdmlldy5kb21PYnNlcnZlci5mbHVzaFNvb24oKTtcbiAgICAgICAgbGV0IHsgZG9tQ2hhbmdlQ291bnQgfSA9IHZpZXcuaW5wdXQ7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHZpZXcuaW5wdXQuZG9tQ2hhbmdlQ291bnQgIT0gZG9tQ2hhbmdlQ291bnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBFdmVudCBhbHJlYWR5IGhhZCBzb21lIGVmZmVjdFxuICAgICAgICAgICAgLy8gVGhpcyBidWcgdGVuZHMgdG8gY2xvc2UgdGhlIHZpcnR1YWwga2V5Ym9hcmQsIHNvIHdlIHJlZm9jdXNcbiAgICAgICAgICAgIHZpZXcuZG9tLmJsdXIoKTtcbiAgICAgICAgICAgIHZpZXcuZm9jdXMoKTtcbiAgICAgICAgICAgIGlmICh2aWV3LnNvbWVQcm9wKFwiaGFuZGxlS2V5RG93blwiLCBmID0+IGYodmlldywga2V5RXZlbnQoOCwgXCJCYWNrc3BhY2VcIikpKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBsZXQgeyAkY3Vyc29yIH0gPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICAgICAgICAgIC8vIENydWRlIGFwcHJveGltYXRpb24gb2YgYmFja3NwYWNlIGJlaGF2aW9yIHdoZW4gbm8gY29tbWFuZCBoYW5kbGVkIGl0XG4gICAgICAgICAgICBpZiAoJGN1cnNvciAmJiAkY3Vyc29yLnBvcyA+IDApXG4gICAgICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnRyLmRlbGV0ZSgkY3Vyc29yLnBvcyAtIDEsICRjdXJzb3IucG9zKS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgfSwgNTApO1xuICAgIH1cbn07XG4vLyBNYWtlIHN1cmUgYWxsIGhhbmRsZXJzIGdldCByZWdpc3RlcmVkXG5mb3IgKGxldCBwcm9wIGluIGVkaXRIYW5kbGVycylcbiAgICBoYW5kbGVyc1twcm9wXSA9IGVkaXRIYW5kbGVyc1twcm9wXTtcblxuZnVuY3Rpb24gY29tcGFyZU9ianMoYSwgYikge1xuICAgIGlmIChhID09IGIpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGZvciAobGV0IHAgaW4gYSlcbiAgICAgICAgaWYgKGFbcF0gIT09IGJbcF0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgcCBpbiBiKVxuICAgICAgICBpZiAoIShwIGluIGEpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuY2xhc3MgV2lkZ2V0VHlwZSB7XG4gICAgY29uc3RydWN0b3IodG9ET00sIHNwZWMpIHtcbiAgICAgICAgdGhpcy50b0RPTSA9IHRvRE9NO1xuICAgICAgICB0aGlzLnNwZWMgPSBzcGVjIHx8IG5vU3BlYztcbiAgICAgICAgdGhpcy5zaWRlID0gdGhpcy5zcGVjLnNpZGUgfHwgMDtcbiAgICB9XG4gICAgbWFwKG1hcHBpbmcsIHNwYW4sIG9mZnNldCwgb2xkT2Zmc2V0KSB7XG4gICAgICAgIGxldCB7IHBvcywgZGVsZXRlZCB9ID0gbWFwcGluZy5tYXBSZXN1bHQoc3Bhbi5mcm9tICsgb2xkT2Zmc2V0LCB0aGlzLnNpZGUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZWQgPyBudWxsIDogbmV3IERlY29yYXRpb24ocG9zIC0gb2Zmc2V0LCBwb3MgLSBvZmZzZXQsIHRoaXMpO1xuICAgIH1cbiAgICB2YWxpZCgpIHsgcmV0dXJuIHRydWU7IH1cbiAgICBlcShvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcyA9PSBvdGhlciB8fFxuICAgICAgICAgICAgKG90aGVyIGluc3RhbmNlb2YgV2lkZ2V0VHlwZSAmJlxuICAgICAgICAgICAgICAgICh0aGlzLnNwZWMua2V5ICYmIHRoaXMuc3BlYy5rZXkgPT0gb3RoZXIuc3BlYy5rZXkgfHxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b0RPTSA9PSBvdGhlci50b0RPTSAmJiBjb21wYXJlT2Jqcyh0aGlzLnNwZWMsIG90aGVyLnNwZWMpKSk7XG4gICAgfVxuICAgIGRlc3Ryb3kobm9kZSkge1xuICAgICAgICBpZiAodGhpcy5zcGVjLmRlc3Ryb3kpXG4gICAgICAgICAgICB0aGlzLnNwZWMuZGVzdHJveShub2RlKTtcbiAgICB9XG59XG5jbGFzcyBJbmxpbmVUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihhdHRycywgc3BlYykge1xuICAgICAgICB0aGlzLmF0dHJzID0gYXR0cnM7XG4gICAgICAgIHRoaXMuc3BlYyA9IHNwZWMgfHwgbm9TcGVjO1xuICAgIH1cbiAgICBtYXAobWFwcGluZywgc3Bhbiwgb2Zmc2V0LCBvbGRPZmZzZXQpIHtcbiAgICAgICAgbGV0IGZyb20gPSBtYXBwaW5nLm1hcChzcGFuLmZyb20gKyBvbGRPZmZzZXQsIHRoaXMuc3BlYy5pbmNsdXNpdmVTdGFydCA/IC0xIDogMSkgLSBvZmZzZXQ7XG4gICAgICAgIGxldCB0byA9IG1hcHBpbmcubWFwKHNwYW4udG8gKyBvbGRPZmZzZXQsIHRoaXMuc3BlYy5pbmNsdXNpdmVFbmQgPyAxIDogLTEpIC0gb2Zmc2V0O1xuICAgICAgICByZXR1cm4gZnJvbSA+PSB0byA/IG51bGwgOiBuZXcgRGVjb3JhdGlvbihmcm9tLCB0bywgdGhpcyk7XG4gICAgfVxuICAgIHZhbGlkKF8sIHNwYW4pIHsgcmV0dXJuIHNwYW4uZnJvbSA8IHNwYW4udG87IH1cbiAgICBlcShvdGhlcikge1xuICAgICAgICByZXR1cm4gdGhpcyA9PSBvdGhlciB8fFxuICAgICAgICAgICAgKG90aGVyIGluc3RhbmNlb2YgSW5saW5lVHlwZSAmJiBjb21wYXJlT2Jqcyh0aGlzLmF0dHJzLCBvdGhlci5hdHRycykgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlT2Jqcyh0aGlzLnNwZWMsIG90aGVyLnNwZWMpKTtcbiAgICB9XG4gICAgc3RhdGljIGlzKHNwYW4pIHsgcmV0dXJuIHNwYW4udHlwZSBpbnN0YW5jZW9mIElubGluZVR5cGU7IH1cbiAgICBkZXN0cm95KCkgeyB9XG59XG5jbGFzcyBOb2RlVHlwZSB7XG4gICAgY29uc3RydWN0b3IoYXR0cnMsIHNwZWMpIHtcbiAgICAgICAgdGhpcy5hdHRycyA9IGF0dHJzO1xuICAgICAgICB0aGlzLnNwZWMgPSBzcGVjIHx8IG5vU3BlYztcbiAgICB9XG4gICAgbWFwKG1hcHBpbmcsIHNwYW4sIG9mZnNldCwgb2xkT2Zmc2V0KSB7XG4gICAgICAgIGxldCBmcm9tID0gbWFwcGluZy5tYXBSZXN1bHQoc3Bhbi5mcm9tICsgb2xkT2Zmc2V0LCAxKTtcbiAgICAgICAgaWYgKGZyb20uZGVsZXRlZClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgdG8gPSBtYXBwaW5nLm1hcFJlc3VsdChzcGFuLnRvICsgb2xkT2Zmc2V0LCAtMSk7XG4gICAgICAgIGlmICh0by5kZWxldGVkIHx8IHRvLnBvcyA8PSBmcm9tLnBvcylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gbmV3IERlY29yYXRpb24oZnJvbS5wb3MgLSBvZmZzZXQsIHRvLnBvcyAtIG9mZnNldCwgdGhpcyk7XG4gICAgfVxuICAgIHZhbGlkKG5vZGUsIHNwYW4pIHtcbiAgICAgICAgbGV0IHsgaW5kZXgsIG9mZnNldCB9ID0gbm9kZS5jb250ZW50LmZpbmRJbmRleChzcGFuLmZyb20pLCBjaGlsZDtcbiAgICAgICAgcmV0dXJuIG9mZnNldCA9PSBzcGFuLmZyb20gJiYgIShjaGlsZCA9IG5vZGUuY2hpbGQoaW5kZXgpKS5pc1RleHQgJiYgb2Zmc2V0ICsgY2hpbGQubm9kZVNpemUgPT0gc3Bhbi50bztcbiAgICB9XG4gICAgZXEob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMgPT0gb3RoZXIgfHxcbiAgICAgICAgICAgIChvdGhlciBpbnN0YW5jZW9mIE5vZGVUeXBlICYmIGNvbXBhcmVPYmpzKHRoaXMuYXR0cnMsIG90aGVyLmF0dHJzKSAmJlxuICAgICAgICAgICAgICAgIGNvbXBhcmVPYmpzKHRoaXMuc3BlYywgb3RoZXIuc3BlYykpO1xuICAgIH1cbiAgICBkZXN0cm95KCkgeyB9XG59XG4vKipcbkRlY29yYXRpb24gb2JqZWN0cyBjYW4gYmUgcHJvdmlkZWQgdG8gdGhlIHZpZXcgdGhyb3VnaCB0aGVcbltgZGVjb3JhdGlvbnNgIHByb3BdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkVkaXRvclByb3BzLmRlY29yYXRpb25zKS4gVGhleSBjb21lIGluXG5zZXZlcmFsIHZhcmlhbnRz4oCUc2VlIHRoZSBzdGF0aWMgbWVtYmVycyBvZiB0aGlzIGNsYXNzIGZvciBkZXRhaWxzLlxuKi9cbmNsYXNzIERlY29yYXRpb24ge1xuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBkZWNvcmF0aW9uLlxuICAgICovXG4gICAgZnJvbSwgXG4gICAgLyoqXG4gICAgVGhlIGVuZCBwb3NpdGlvbi4gV2lsbCBiZSB0aGUgc2FtZSBhcyBgZnJvbWAgZm9yIFt3aWRnZXRcbiAgICBkZWNvcmF0aW9uc10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3ZpZXcuRGVjb3JhdGlvbl53aWRnZXQpLlxuICAgICovXG4gICAgdG8sIFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgdHlwZSkge1xuICAgICAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgICAgICB0aGlzLnRvID0gdG87XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgY29weShmcm9tLCB0bykge1xuICAgICAgICByZXR1cm4gbmV3IERlY29yYXRpb24oZnJvbSwgdG8sIHRoaXMudHlwZSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZXEob3RoZXIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5lcShvdGhlci50eXBlKSAmJiB0aGlzLmZyb20gKyBvZmZzZXQgPT0gb3RoZXIuZnJvbSAmJiB0aGlzLnRvICsgb2Zmc2V0ID09IG90aGVyLnRvO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIG1hcChtYXBwaW5nLCBvZmZzZXQsIG9sZE9mZnNldCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlLm1hcChtYXBwaW5nLCB0aGlzLCBvZmZzZXQsIG9sZE9mZnNldCk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZXMgYSB3aWRnZXQgZGVjb3JhdGlvbiwgd2hpY2ggaXMgYSBET00gbm9kZSB0aGF0J3Mgc2hvd24gaW5cbiAgICB0aGUgZG9jdW1lbnQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHlvdVxuICAgIGRlbGF5IHJlbmRlcmluZyB0aGUgd2lkZ2V0IGJ5IHBhc3NpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmVcbiAgICBjYWxsZWQgd2hlbiB0aGUgd2lkZ2V0IGlzIGFjdHVhbGx5IGRyYXduIGluIGEgdmlldywgYnV0IHlvdSBjYW5cbiAgICBhbHNvIGRpcmVjdGx5IHBhc3MgYSBET00gbm9kZS4gYGdldFBvc2AgY2FuIGJlIHVzZWQgdG8gZmluZCB0aGVcbiAgICB3aWRnZXQncyBjdXJyZW50IGRvY3VtZW50IHBvc2l0aW9uLlxuICAgICovXG4gICAgc3RhdGljIHdpZGdldChwb3MsIHRvRE9NLCBzcGVjKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVjb3JhdGlvbihwb3MsIHBvcywgbmV3IFdpZGdldFR5cGUodG9ET00sIHNwZWMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlcyBhbiBpbmxpbmUgZGVjb3JhdGlvbiwgd2hpY2ggYWRkcyB0aGUgZ2l2ZW4gYXR0cmlidXRlcyB0b1xuICAgIGVhY2ggaW5saW5lIG5vZGUgYmV0d2VlbiBgZnJvbWAgYW5kIGB0b2AuXG4gICAgKi9cbiAgICBzdGF0aWMgaW5saW5lKGZyb20sIHRvLCBhdHRycywgc3BlYykge1xuICAgICAgICByZXR1cm4gbmV3IERlY29yYXRpb24oZnJvbSwgdG8sIG5ldyBJbmxpbmVUeXBlKGF0dHJzLCBzcGVjKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIENyZWF0ZXMgYSBub2RlIGRlY29yYXRpb24uIGBmcm9tYCBhbmQgYHRvYCBzaG91bGQgcG9pbnQgcHJlY2lzZWx5XG4gICAgYmVmb3JlIGFuZCBhZnRlciBhIG5vZGUgaW4gdGhlIGRvY3VtZW50LiBUaGF0IG5vZGUsIGFuZCBvbmx5IHRoYXRcbiAgICBub2RlLCB3aWxsIHJlY2VpdmUgdGhlIGdpdmVuIGF0dHJpYnV0ZXMuXG4gICAgKi9cbiAgICBzdGF0aWMgbm9kZShmcm9tLCB0bywgYXR0cnMsIHNwZWMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWNvcmF0aW9uKGZyb20sIHRvLCBuZXcgTm9kZVR5cGUoYXR0cnMsIHNwZWMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhlIHNwZWMgcHJvdmlkZWQgd2hlbiBjcmVhdGluZyB0aGlzIGRlY29yYXRpb24uIENhbiBiZSB1c2VmdWxcbiAgICBpZiB5b3UndmUgc3RvcmVkIGV4dHJhIGluZm9ybWF0aW9uIGluIHRoYXQgb2JqZWN0LlxuICAgICovXG4gICAgZ2V0IHNwZWMoKSB7IHJldHVybiB0aGlzLnR5cGUuc3BlYzsgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZ2V0IGlubGluZSgpIHsgcmV0dXJuIHRoaXMudHlwZSBpbnN0YW5jZW9mIElubGluZVR5cGU7IH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGdldCB3aWRnZXQoKSB7IHJldHVybiB0aGlzLnR5cGUgaW5zdGFuY2VvZiBXaWRnZXRUeXBlOyB9XG59XG5jb25zdCBub25lID0gW10sIG5vU3BlYyA9IHt9O1xuLyoqXG5BIGNvbGxlY3Rpb24gb2YgW2RlY29yYXRpb25zXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdmlldy5EZWNvcmF0aW9uKSwgb3JnYW5pemVkIGluIHN1Y2hcbmEgd2F5IHRoYXQgdGhlIGRyYXdpbmcgYWxnb3JpdGhtIGNhbiBlZmZpY2llbnRseSB1c2UgYW5kIGNvbXBhcmVcbnRoZW0uIFRoaXMgaXMgYSBwZXJzaXN0ZW50IGRhdGEgc3RydWN0dXJl4oCUaXQgaXMgbm90IG1vZGlmaWVkLFxudXBkYXRlcyBjcmVhdGUgYSBuZXcgdmFsdWUuXG4qL1xuY2xhc3MgRGVjb3JhdGlvblNldCB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihsb2NhbCwgY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5sb2NhbCA9IGxvY2FsLmxlbmd0aCA/IGxvY2FsIDogbm9uZTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuLmxlbmd0aCA/IGNoaWxkcmVuIDogbm9uZTtcbiAgICB9XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgc2V0IG9mIGRlY29yYXRpb25zLCB1c2luZyB0aGUgc3RydWN0dXJlIG9mIHRoZSBnaXZlblxuICAgIGRvY3VtZW50LiBUaGlzIHdpbGwgY29uc3VtZSAobW9kaWZ5KSB0aGUgYGRlY29yYXRpb25zYCBhcnJheSwgc29cbiAgICB5b3UgbXVzdCBtYWtlIGEgY29weSBpZiB5b3Ugd2FudCBuZWVkIHRvIHByZXNlcnZlIHRoYXQuXG4gICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlKGRvYywgZGVjb3JhdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGRlY29yYXRpb25zLmxlbmd0aCA/IGJ1aWxkVHJlZShkZWNvcmF0aW9ucywgZG9jLCAwLCBub1NwZWMpIDogZW1wdHk7XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgYWxsIGRlY29yYXRpb25zIGluIHRoaXMgc2V0IHdoaWNoIHRvdWNoIHRoZSBnaXZlbiByYW5nZVxuICAgIChpbmNsdWRpbmcgZGVjb3JhdGlvbnMgdGhhdCBzdGFydCBvciBlbmQgZGlyZWN0bHkgYXQgdGhlXG4gICAgYm91bmRhcmllcykgYW5kIG1hdGNoIHRoZSBnaXZlbiBwcmVkaWNhdGUgb24gdGhlaXIgc3BlYy4gV2hlblxuICAgIGBzdGFydGAgYW5kIGBlbmRgIGFyZSBvbWl0dGVkLCBhbGwgZGVjb3JhdGlvbnMgaW4gdGhlIHNldCBhcmVcbiAgICBjb25zaWRlcmVkLiBXaGVuIGBwcmVkaWNhdGVgIGlzbid0IGdpdmVuLCBhbGwgZGVjb3JhdGlvbnMgYXJlXG4gICAgYXNzdW1lZCB0byBtYXRjaC5cbiAgICAqL1xuICAgIGZpbmQoc3RhcnQsIGVuZCwgcHJlZGljYXRlKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgdGhpcy5maW5kSW5uZXIoc3RhcnQgPT0gbnVsbCA/IDAgOiBzdGFydCwgZW5kID09IG51bGwgPyAxZTkgOiBlbmQsIHJlc3VsdCwgMCwgcHJlZGljYXRlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZmluZElubmVyKHN0YXJ0LCBlbmQsIHJlc3VsdCwgb2Zmc2V0LCBwcmVkaWNhdGUpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxvY2FsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgc3BhbiA9IHRoaXMubG9jYWxbaV07XG4gICAgICAgICAgICBpZiAoc3Bhbi5mcm9tIDw9IGVuZCAmJiBzcGFuLnRvID49IHN0YXJ0ICYmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShzcGFuLnNwZWMpKSlcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzcGFuLmNvcHkoc3Bhbi5mcm9tICsgb2Zmc2V0LCBzcGFuLnRvICsgb2Zmc2V0KSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbltpXSA8IGVuZCAmJiB0aGlzLmNoaWxkcmVuW2kgKyAxXSA+IHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkT2ZmID0gdGhpcy5jaGlsZHJlbltpXSArIDE7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbltpICsgMl0uZmluZElubmVyKHN0YXJ0IC0gY2hpbGRPZmYsIGVuZCAtIGNoaWxkT2ZmLCByZXN1bHQsIG9mZnNldCArIGNoaWxkT2ZmLCBwcmVkaWNhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIE1hcCB0aGUgc2V0IG9mIGRlY29yYXRpb25zIGluIHJlc3BvbnNlIHRvIGEgY2hhbmdlIGluIHRoZVxuICAgIGRvY3VtZW50LlxuICAgICovXG4gICAgbWFwKG1hcHBpbmcsIGRvYywgb3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcyA9PSBlbXB0eSB8fCBtYXBwaW5nLm1hcHMubGVuZ3RoID09IDApXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwSW5uZXIobWFwcGluZywgZG9jLCAwLCAwLCBvcHRpb25zIHx8IG5vU3BlYyk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgbWFwSW5uZXIobWFwcGluZywgbm9kZSwgb2Zmc2V0LCBvbGRPZmZzZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IG5ld0xvY2FsO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubG9jYWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBtYXBwZWQgPSB0aGlzLmxvY2FsW2ldLm1hcChtYXBwaW5nLCBvZmZzZXQsIG9sZE9mZnNldCk7XG4gICAgICAgICAgICBpZiAobWFwcGVkICYmIG1hcHBlZC50eXBlLnZhbGlkKG5vZGUsIG1hcHBlZCkpXG4gICAgICAgICAgICAgICAgKG5ld0xvY2FsIHx8IChuZXdMb2NhbCA9IFtdKSkucHVzaChtYXBwZWQpO1xuICAgICAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5vblJlbW92ZSlcbiAgICAgICAgICAgICAgICBvcHRpb25zLm9uUmVtb3ZlKHRoaXMubG9jYWxbaV0uc3BlYyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIG1hcENoaWxkcmVuKHRoaXMuY2hpbGRyZW4sIG5ld0xvY2FsIHx8IFtdLCBtYXBwaW5nLCBub2RlLCBvZmZzZXQsIG9sZE9mZnNldCwgb3B0aW9ucyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiBuZXdMb2NhbCA/IG5ldyBEZWNvcmF0aW9uU2V0KG5ld0xvY2FsLnNvcnQoYnlQb3MpLCBub25lKSA6IGVtcHR5O1xuICAgIH1cbiAgICAvKipcbiAgICBBZGQgdGhlIGdpdmVuIGFycmF5IG9mIGRlY29yYXRpb25zIHRvIHRoZSBvbmVzIGluIHRoZSBzZXQsXG4gICAgcHJvZHVjaW5nIGEgbmV3IHNldC4gQ29uc3VtZXMgdGhlIGBkZWNvcmF0aW9uc2AgYXJyYXkuIE5lZWRzXG4gICAgYWNjZXNzIHRvIHRoZSBjdXJyZW50IGRvY3VtZW50IHRvIGNyZWF0ZSB0aGUgYXBwcm9wcmlhdGUgdHJlZVxuICAgIHN0cnVjdHVyZS5cbiAgICAqL1xuICAgIGFkZChkb2MsIGRlY29yYXRpb25zKSB7XG4gICAgICAgIGlmICghZGVjb3JhdGlvbnMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGlmICh0aGlzID09IGVtcHR5KVxuICAgICAgICAgICAgcmV0dXJuIERlY29yYXRpb25TZXQuY3JlYXRlKGRvYywgZGVjb3JhdGlvbnMpO1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRJbm5lcihkb2MsIGRlY29yYXRpb25zLCAwKTtcbiAgICB9XG4gICAgYWRkSW5uZXIoZG9jLCBkZWNvcmF0aW9ucywgb2Zmc2V0KSB7XG4gICAgICAgIGxldCBjaGlsZHJlbiwgY2hpbGRJbmRleCA9IDA7XG4gICAgICAgIGRvYy5mb3JFYWNoKChjaGlsZE5vZGUsIGNoaWxkT2Zmc2V0KSA9PiB7XG4gICAgICAgICAgICBsZXQgYmFzZU9mZnNldCA9IGNoaWxkT2Zmc2V0ICsgb2Zmc2V0LCBmb3VuZDtcbiAgICAgICAgICAgIGlmICghKGZvdW5kID0gdGFrZVNwYW5zRm9yTm9kZShkZWNvcmF0aW9ucywgY2hpbGROb2RlLCBiYXNlT2Zmc2V0KSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbilcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4uc2xpY2UoKTtcbiAgICAgICAgICAgIHdoaWxlIChjaGlsZEluZGV4IDwgY2hpbGRyZW4ubGVuZ3RoICYmIGNoaWxkcmVuW2NoaWxkSW5kZXhdIDwgY2hpbGRPZmZzZXQpXG4gICAgICAgICAgICAgICAgY2hpbGRJbmRleCArPSAzO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuW2NoaWxkSW5kZXhdID09IGNoaWxkT2Zmc2V0KVxuICAgICAgICAgICAgICAgIGNoaWxkcmVuW2NoaWxkSW5kZXggKyAyXSA9IGNoaWxkcmVuW2NoaWxkSW5kZXggKyAyXS5hZGRJbm5lcihjaGlsZE5vZGUsIGZvdW5kLCBiYXNlT2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uc3BsaWNlKGNoaWxkSW5kZXgsIDAsIGNoaWxkT2Zmc2V0LCBjaGlsZE9mZnNldCArIGNoaWxkTm9kZS5ub2RlU2l6ZSwgYnVpbGRUcmVlKGZvdW5kLCBjaGlsZE5vZGUsIGJhc2VPZmZzZXQgKyAxLCBub1NwZWMpKTtcbiAgICAgICAgICAgIGNoaWxkSW5kZXggKz0gMztcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBsb2NhbCA9IG1vdmVTcGFucyhjaGlsZEluZGV4ID8gd2l0aG91dE51bGxzKGRlY29yYXRpb25zKSA6IGRlY29yYXRpb25zLCAtb2Zmc2V0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NhbC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmICghbG9jYWxbaV0udHlwZS52YWxpZChkb2MsIGxvY2FsW2ldKSlcbiAgICAgICAgICAgICAgICBsb2NhbC5zcGxpY2UoaS0tLCAxKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWNvcmF0aW9uU2V0KGxvY2FsLmxlbmd0aCA/IHRoaXMubG9jYWwuY29uY2F0KGxvY2FsKS5zb3J0KGJ5UG9zKSA6IHRoaXMubG9jYWwsIGNoaWxkcmVuIHx8IHRoaXMuY2hpbGRyZW4pO1xuICAgIH1cbiAgICAvKipcbiAgICBDcmVhdGUgYSBuZXcgc2V0IHRoYXQgY29udGFpbnMgdGhlIGRlY29yYXRpb25zIGluIHRoaXMgc2V0LCBtaW51c1xuICAgIHRoZSBvbmVzIGluIHRoZSBnaXZlbiBhcnJheS5cbiAgICAqL1xuICAgIHJlbW92ZShkZWNvcmF0aW9ucykge1xuICAgICAgICBpZiAoZGVjb3JhdGlvbnMubGVuZ3RoID09IDAgfHwgdGhpcyA9PSBlbXB0eSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVJbm5lcihkZWNvcmF0aW9ucywgMCk7XG4gICAgfVxuICAgIHJlbW92ZUlubmVyKGRlY29yYXRpb25zLCBvZmZzZXQpIHtcbiAgICAgICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiwgbG9jYWwgPSB0aGlzLmxvY2FsO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBsZXQgZm91bmQ7XG4gICAgICAgICAgICBsZXQgZnJvbSA9IGNoaWxkcmVuW2ldICsgb2Zmc2V0LCB0byA9IGNoaWxkcmVuW2kgKyAxXSArIG9mZnNldDtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBzcGFuOyBqIDwgZGVjb3JhdGlvbnMubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgaWYgKHNwYW4gPSBkZWNvcmF0aW9uc1tqXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Bhbi5mcm9tID4gZnJvbSAmJiBzcGFuLnRvIDwgdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY29yYXRpb25zW2pdID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIChmb3VuZCB8fCAoZm91bmQgPSBbXSkpLnB1c2goc3Bhbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWZvdW5kKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuID09IHRoaXMuY2hpbGRyZW4pXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuLnNsaWNlKCk7XG4gICAgICAgICAgICBsZXQgcmVtb3ZlZCA9IGNoaWxkcmVuW2kgKyAyXS5yZW1vdmVJbm5lcihmb3VuZCwgZnJvbSArIDEpO1xuICAgICAgICAgICAgaWYgKHJlbW92ZWQgIT0gZW1wdHkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbltpICsgMl0gPSByZW1vdmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uc3BsaWNlKGksIDMpO1xuICAgICAgICAgICAgICAgIGkgLT0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYWwubGVuZ3RoKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIHNwYW47IGkgPCBkZWNvcmF0aW9ucy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBpZiAoc3BhbiA9IGRlY29yYXRpb25zW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbG9jYWwubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxbal0uZXEoc3Bhbiwgb2Zmc2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbCA9PSB0aGlzLmxvY2FsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCA9IHRoaXMubG9jYWwuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbC5zcGxpY2Uoai0tLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZHJlbiA9PSB0aGlzLmNoaWxkcmVuICYmIGxvY2FsID09IHRoaXMubG9jYWwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgcmV0dXJuIGxvY2FsLmxlbmd0aCB8fCBjaGlsZHJlbi5sZW5ndGggPyBuZXcgRGVjb3JhdGlvblNldChsb2NhbCwgY2hpbGRyZW4pIDogZW1wdHk7XG4gICAgfVxuICAgIGZvckNoaWxkKG9mZnNldCwgbm9kZSkge1xuICAgICAgICBpZiAodGhpcyA9PSBlbXB0eSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICBpZiAobm9kZS5pc0xlYWYpXG4gICAgICAgICAgICByZXR1cm4gRGVjb3JhdGlvblNldC5lbXB0eTtcbiAgICAgICAgbGV0IGNoaWxkLCBsb2NhbDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSArPSAzKVxuICAgICAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW5baV0gPj0gb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW5baV0gPT0gb2Zmc2V0KVxuICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baSArIDJdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICBsZXQgc3RhcnQgPSBvZmZzZXQgKyAxLCBlbmQgPSBzdGFydCArIG5vZGUuY29udGVudC5zaXplO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubG9jYWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBkZWMgPSB0aGlzLmxvY2FsW2ldO1xuICAgICAgICAgICAgaWYgKGRlYy5mcm9tIDwgZW5kICYmIGRlYy50byA+IHN0YXJ0ICYmIChkZWMudHlwZSBpbnN0YW5jZW9mIElubGluZVR5cGUpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZyb20gPSBNYXRoLm1heChzdGFydCwgZGVjLmZyb20pIC0gc3RhcnQsIHRvID0gTWF0aC5taW4oZW5kLCBkZWMudG8pIC0gc3RhcnQ7XG4gICAgICAgICAgICAgICAgaWYgKGZyb20gPCB0bylcbiAgICAgICAgICAgICAgICAgICAgKGxvY2FsIHx8IChsb2NhbCA9IFtdKSkucHVzaChkZWMuY29weShmcm9tLCB0bykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhbCkge1xuICAgICAgICAgICAgbGV0IGxvY2FsU2V0ID0gbmV3IERlY29yYXRpb25TZXQobG9jYWwuc29ydChieVBvcyksIG5vbmUpO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkID8gbmV3IERlY29yYXRpb25Hcm91cChbbG9jYWxTZXQsIGNoaWxkXSkgOiBsb2NhbFNldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGQgfHwgZW1wdHk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZXEob3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMgPT0gb3RoZXIpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBEZWNvcmF0aW9uU2V0KSB8fFxuICAgICAgICAgICAgdGhpcy5sb2NhbC5sZW5ndGggIT0gb3RoZXIubG9jYWwubGVuZ3RoIHx8XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmxlbmd0aCAhPSBvdGhlci5jaGlsZHJlbi5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sb2NhbC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGlmICghdGhpcy5sb2NhbFtpXS5lcShvdGhlci5sb2NhbFtpXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDMpXG4gICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbltpXSAhPSBvdGhlci5jaGlsZHJlbltpXSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5baSArIDFdICE9IG90aGVyLmNoaWxkcmVuW2kgKyAxXSB8fFxuICAgICAgICAgICAgICAgICF0aGlzLmNoaWxkcmVuW2kgKyAyXS5lcShvdGhlci5jaGlsZHJlbltpICsgMl0pKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgbG9jYWxzKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZU92ZXJsYXAodGhpcy5sb2NhbHNJbm5lcihub2RlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgbG9jYWxzSW5uZXIobm9kZSkge1xuICAgICAgICBpZiAodGhpcyA9PSBlbXB0eSlcbiAgICAgICAgICAgIHJldHVybiBub25lO1xuICAgICAgICBpZiAobm9kZS5pbmxpbmVDb250ZW50IHx8ICF0aGlzLmxvY2FsLnNvbWUoSW5saW5lVHlwZS5pcykpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbDtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubG9jYWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghKHRoaXMubG9jYWxbaV0udHlwZSBpbnN0YW5jZW9mIElubGluZVR5cGUpKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMubG9jYWxbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZvckVhY2hTZXQoZikgeyBmKHRoaXMpOyB9XG59XG4vKipcblRoZSBlbXB0eSBzZXQgb2YgZGVjb3JhdGlvbnMuXG4qL1xuRGVjb3JhdGlvblNldC5lbXB0eSA9IG5ldyBEZWNvcmF0aW9uU2V0KFtdLCBbXSk7XG4vKipcbkBpbnRlcm5hbFxuKi9cbkRlY29yYXRpb25TZXQucmVtb3ZlT3ZlcmxhcCA9IHJlbW92ZU92ZXJsYXA7XG5jb25zdCBlbXB0eSA9IERlY29yYXRpb25TZXQuZW1wdHk7XG4vLyBBbiBhYnN0cmFjdGlvbiB0aGF0IGFsbG93cyB0aGUgY29kZSBkZWFsaW5nIHdpdGggZGVjb3JhdGlvbnMgdG9cbi8vIHRyZWF0IG11bHRpcGxlIERlY29yYXRpb25TZXQgb2JqZWN0cyBhcyBpZiBpdCB3ZXJlIGEgc2luZ2xlIG9iamVjdFxuLy8gd2l0aCAoYSBzdWJzZXQgb2YpIHRoZSBzYW1lIGludGVyZmFjZS5cbmNsYXNzIERlY29yYXRpb25Hcm91cCB7XG4gICAgY29uc3RydWN0b3IobWVtYmVycykge1xuICAgICAgICB0aGlzLm1lbWJlcnMgPSBtZW1iZXJzO1xuICAgIH1cbiAgICBtYXAobWFwcGluZywgZG9jKSB7XG4gICAgICAgIGNvbnN0IG1hcHBlZERlY29zID0gdGhpcy5tZW1iZXJzLm1hcChtZW1iZXIgPT4gbWVtYmVyLm1hcChtYXBwaW5nLCBkb2MsIG5vU3BlYykpO1xuICAgICAgICByZXR1cm4gRGVjb3JhdGlvbkdyb3VwLmZyb20obWFwcGVkRGVjb3MpO1xuICAgIH1cbiAgICBmb3JDaGlsZChvZmZzZXQsIGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZC5pc0xlYWYpXG4gICAgICAgICAgICByZXR1cm4gRGVjb3JhdGlvblNldC5lbXB0eTtcbiAgICAgICAgbGV0IGZvdW5kID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tZW1iZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5tZW1iZXJzW2ldLmZvckNoaWxkKG9mZnNldCwgY2hpbGQpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PSBlbXB0eSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBEZWNvcmF0aW9uR3JvdXApXG4gICAgICAgICAgICAgICAgZm91bmQgPSBmb3VuZC5jb25jYXQocmVzdWx0Lm1lbWJlcnMpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGZvdW5kLnB1c2gocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRGVjb3JhdGlvbkdyb3VwLmZyb20oZm91bmQpO1xuICAgIH1cbiAgICBlcShvdGhlcikge1xuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIERlY29yYXRpb25Hcm91cCkgfHxcbiAgICAgICAgICAgIG90aGVyLm1lbWJlcnMubGVuZ3RoICE9IHRoaXMubWVtYmVycy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tZW1iZXJzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKCF0aGlzLm1lbWJlcnNbaV0uZXEob3RoZXIubWVtYmVyc1tpXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbG9jYWxzKG5vZGUpIHtcbiAgICAgICAgbGV0IHJlc3VsdCwgc29ydGVkID0gdHJ1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lbWJlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBsb2NhbHMgPSB0aGlzLm1lbWJlcnNbaV0ubG9jYWxzSW5uZXIobm9kZSk7XG4gICAgICAgICAgICBpZiAoIWxvY2Fscy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGxvY2FscztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHNvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxvY2Fscy5sZW5ndGg7IGorKylcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobG9jYWxzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0ID8gcmVtb3ZlT3ZlcmxhcChzb3J0ZWQgPyByZXN1bHQgOiByZXN1bHQuc29ydChieVBvcykpIDogbm9uZTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGEgZ3JvdXAgZm9yIHRoZSBnaXZlbiBhcnJheSBvZiBkZWNvcmF0aW9uIHNldHMsIG9yIHJldHVyblxuICAgIC8vIGEgc2luZ2xlIHNldCB3aGVuIHBvc3NpYmxlLlxuICAgIHN0YXRpYyBmcm9tKG1lbWJlcnMpIHtcbiAgICAgICAgc3dpdGNoIChtZW1iZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gZW1wdHk7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBtZW1iZXJzWzBdO1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIG5ldyBEZWNvcmF0aW9uR3JvdXAobWVtYmVycy5ldmVyeShtID0+IG0gaW5zdGFuY2VvZiBEZWNvcmF0aW9uU2V0KSA/IG1lbWJlcnMgOlxuICAgICAgICAgICAgICAgIG1lbWJlcnMucmVkdWNlKChyLCBtKSA9PiByLmNvbmNhdChtIGluc3RhbmNlb2YgRGVjb3JhdGlvblNldCA/IG0gOiBtLm1lbWJlcnMpLCBbXSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvckVhY2hTZXQoZikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubWVtYmVycy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHRoaXMubWVtYmVyc1tpXS5mb3JFYWNoU2V0KGYpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKG9sZENoaWxkcmVuLCBuZXdMb2NhbCwgbWFwcGluZywgbm9kZSwgb2Zmc2V0LCBvbGRPZmZzZXQsIG9wdGlvbnMpIHtcbiAgICBsZXQgY2hpbGRyZW4gPSBvbGRDaGlsZHJlbi5zbGljZSgpO1xuICAgIC8vIE1hcmsgdGhlIGNoaWxkcmVuIHRoYXQgYXJlIGRpcmVjdGx5IHRvdWNoZWQgYnkgY2hhbmdlcywgYW5kXG4gICAgLy8gbW92ZSB0aG9zZSB0aGF0IGFyZSBhZnRlciB0aGUgY2hhbmdlcy5cbiAgICBmb3IgKGxldCBpID0gMCwgYmFzZU9mZnNldCA9IG9sZE9mZnNldDsgaSA8IG1hcHBpbmcubWFwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbW92ZWQgPSAwO1xuICAgICAgICBtYXBwaW5nLm1hcHNbaV0uZm9yRWFjaCgob2xkU3RhcnQsIG9sZEVuZCwgbmV3U3RhcnQsIG5ld0VuZCkgPT4ge1xuICAgICAgICAgICAgbGV0IGRTaXplID0gKG5ld0VuZCAtIG5ld1N0YXJ0KSAtIChvbGRFbmQgLSBvbGRTdGFydCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVuZCA9IGNoaWxkcmVuW2kgKyAxXTtcbiAgICAgICAgICAgICAgICBpZiAoZW5kIDwgMCB8fCBvbGRTdGFydCA+IGVuZCArIGJhc2VPZmZzZXQgLSBtb3ZlZClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gY2hpbGRyZW5baV0gKyBiYXNlT2Zmc2V0IC0gbW92ZWQ7XG4gICAgICAgICAgICAgICAgaWYgKG9sZEVuZCA+PSBzdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbltpICsgMV0gPSBvbGRTdGFydCA8PSBzdGFydCA/IC0yIDogLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9sZFN0YXJ0ID49IGJhc2VPZmZzZXQgJiYgZFNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5baV0gKz0gZFNpemU7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2kgKyAxXSArPSBkU2l6ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtb3ZlZCArPSBkU2l6ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJhc2VPZmZzZXQgPSBtYXBwaW5nLm1hcHNbaV0ubWFwKGJhc2VPZmZzZXQsIC0xKTtcbiAgICB9XG4gICAgLy8gRmluZCB0aGUgY2hpbGQgbm9kZXMgdGhhdCBzdGlsbCBjb3JyZXNwb25kIHRvIGEgc2luZ2xlIG5vZGUsXG4gICAgLy8gcmVjdXJzaXZlbHkgY2FsbCBtYXBJbm5lciBvbiB0aGVtIGFuZCB1cGRhdGUgdGhlaXIgcG9zaXRpb25zLlxuICAgIGxldCBtdXN0UmVidWlsZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDMpXG4gICAgICAgIGlmIChjaGlsZHJlbltpICsgMV0gPCAwKSB7IC8vIFRvdWNoZWQgbm9kZXNcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbltpICsgMV0gPT0gLTIpIHtcbiAgICAgICAgICAgICAgICBtdXN0UmVidWlsZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5baSArIDFdID0gLTE7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZnJvbSA9IG1hcHBpbmcubWFwKG9sZENoaWxkcmVuW2ldICsgb2xkT2Zmc2V0KSwgZnJvbUxvY2FsID0gZnJvbSAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChmcm9tTG9jYWwgPCAwIHx8IGZyb21Mb2NhbCA+PSBub2RlLmNvbnRlbnQuc2l6ZSkge1xuICAgICAgICAgICAgICAgIG11c3RSZWJ1aWxkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE11c3QgcmVhZCBvbGRDaGlsZHJlbiBiZWNhdXNlIGNoaWxkcmVuIHdhcyB0YWdnZWQgd2l0aCAtMVxuICAgICAgICAgICAgbGV0IHRvID0gbWFwcGluZy5tYXAob2xkQ2hpbGRyZW5baSArIDFdICsgb2xkT2Zmc2V0LCAtMSksIHRvTG9jYWwgPSB0byAtIG9mZnNldDtcbiAgICAgICAgICAgIGxldCB7IGluZGV4LCBvZmZzZXQ6IGNoaWxkT2Zmc2V0IH0gPSBub2RlLmNvbnRlbnQuZmluZEluZGV4KGZyb21Mb2NhbCk7XG4gICAgICAgICAgICBsZXQgY2hpbGROb2RlID0gbm9kZS5tYXliZUNoaWxkKGluZGV4KTtcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGUgJiYgY2hpbGRPZmZzZXQgPT0gZnJvbUxvY2FsICYmIGNoaWxkT2Zmc2V0ICsgY2hpbGROb2RlLm5vZGVTaXplID09IHRvTG9jYWwpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWFwcGVkID0gY2hpbGRyZW5baSArIDJdXG4gICAgICAgICAgICAgICAgICAgIC5tYXBJbm5lcihtYXBwaW5nLCBjaGlsZE5vZGUsIGZyb20gKyAxLCBvbGRDaGlsZHJlbltpXSArIG9sZE9mZnNldCArIDEsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmIChtYXBwZWQgIT0gZW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5baV0gPSBmcm9tTG9jYWw7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2kgKyAxXSA9IHRvTG9jYWw7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2kgKyAyXSA9IG1hcHBlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2kgKyAxXSA9IC0yO1xuICAgICAgICAgICAgICAgICAgICBtdXN0UmVidWlsZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbXVzdFJlYnVpbGQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgLy8gUmVtYWluaW5nIGNoaWxkcmVuIG11c3QgYmUgY29sbGVjdGVkIGFuZCByZWJ1aWx0IGludG8gdGhlIGFwcHJvcHJpYXRlIHN0cnVjdHVyZVxuICAgIGlmIChtdXN0UmVidWlsZCkge1xuICAgICAgICBsZXQgZGVjb3JhdGlvbnMgPSBtYXBBbmRHYXRoZXJSZW1haW5pbmdEZWNvcmF0aW9ucyhjaGlsZHJlbiwgb2xkQ2hpbGRyZW4sIG5ld0xvY2FsLCBtYXBwaW5nLCBvZmZzZXQsIG9sZE9mZnNldCwgb3B0aW9ucyk7XG4gICAgICAgIGxldCBidWlsdCA9IGJ1aWxkVHJlZShkZWNvcmF0aW9ucywgbm9kZSwgMCwgb3B0aW9ucyk7XG4gICAgICAgIG5ld0xvY2FsID0gYnVpbHQubG9jYWw7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDMpXG4gICAgICAgICAgICBpZiAoY2hpbGRyZW5baSArIDFdIDwgMCkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnNwbGljZShpLCAzKTtcbiAgICAgICAgICAgICAgICBpIC09IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBqID0gMDsgaSA8IGJ1aWx0LmNoaWxkcmVuLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBsZXQgZnJvbSA9IGJ1aWx0LmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgd2hpbGUgKGogPCBjaGlsZHJlbi5sZW5ndGggJiYgY2hpbGRyZW5bal0gPCBmcm9tKVxuICAgICAgICAgICAgICAgIGogKz0gMztcbiAgICAgICAgICAgIGNoaWxkcmVuLnNwbGljZShqLCAwLCBidWlsdC5jaGlsZHJlbltpXSwgYnVpbHQuY2hpbGRyZW5baSArIDFdLCBidWlsdC5jaGlsZHJlbltpICsgMl0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGVjb3JhdGlvblNldChuZXdMb2NhbC5zb3J0KGJ5UG9zKSwgY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gbW92ZVNwYW5zKHNwYW5zLCBvZmZzZXQpIHtcbiAgICBpZiAoIW9mZnNldCB8fCAhc3BhbnMubGVuZ3RoKVxuICAgICAgICByZXR1cm4gc3BhbnM7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3BhbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHNwYW4gPSBzcGFuc1tpXTtcbiAgICAgICAgcmVzdWx0LnB1c2gobmV3IERlY29yYXRpb24oc3Bhbi5mcm9tICsgb2Zmc2V0LCBzcGFuLnRvICsgb2Zmc2V0LCBzcGFuLnR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1hcEFuZEdhdGhlclJlbWFpbmluZ0RlY29yYXRpb25zKGNoaWxkcmVuLCBvbGRDaGlsZHJlbiwgZGVjb3JhdGlvbnMsIG1hcHBpbmcsIG9mZnNldCwgb2xkT2Zmc2V0LCBvcHRpb25zKSB7XG4gICAgLy8gR2F0aGVyIGFsbCBkZWNvcmF0aW9ucyBmcm9tIHRoZSByZW1haW5pbmcgbWFya2VkIGNoaWxkcmVuXG4gICAgZnVuY3Rpb24gZ2F0aGVyKHNldCwgb2xkT2Zmc2V0KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0LmxvY2FsLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbWFwcGVkID0gc2V0LmxvY2FsW2ldLm1hcChtYXBwaW5nLCBvZmZzZXQsIG9sZE9mZnNldCk7XG4gICAgICAgICAgICBpZiAobWFwcGVkKVxuICAgICAgICAgICAgICAgIGRlY29yYXRpb25zLnB1c2gobWFwcGVkKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMub25SZW1vdmUpXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5vblJlbW92ZShzZXQubG9jYWxbaV0uc3BlYyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQuY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDMpXG4gICAgICAgICAgICBnYXRoZXIoc2V0LmNoaWxkcmVuW2kgKyAyXSwgc2V0LmNoaWxkcmVuW2ldICsgb2xkT2Zmc2V0ICsgMSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDMpXG4gICAgICAgIGlmIChjaGlsZHJlbltpICsgMV0gPT0gLTEpXG4gICAgICAgICAgICBnYXRoZXIoY2hpbGRyZW5baSArIDJdLCBvbGRDaGlsZHJlbltpXSArIG9sZE9mZnNldCArIDEpO1xuICAgIHJldHVybiBkZWNvcmF0aW9ucztcbn1cbmZ1bmN0aW9uIHRha2VTcGFuc0Zvck5vZGUoc3BhbnMsIG5vZGUsIG9mZnNldCkge1xuICAgIGlmIChub2RlLmlzTGVhZilcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IGVuZCA9IG9mZnNldCArIG5vZGUubm9kZVNpemUsIGZvdW5kID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMCwgc3BhbjsgaSA8IHNwYW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICgoc3BhbiA9IHNwYW5zW2ldKSAmJiBzcGFuLmZyb20gPiBvZmZzZXQgJiYgc3Bhbi50byA8IGVuZCkge1xuICAgICAgICAgICAgKGZvdW5kIHx8IChmb3VuZCA9IFtdKSkucHVzaChzcGFuKTtcbiAgICAgICAgICAgIHNwYW5zW2ldID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm91bmQ7XG59XG5mdW5jdGlvbiB3aXRob3V0TnVsbHMoYXJyYXkpIHtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKylcbiAgICAgICAgaWYgKGFycmF5W2ldICE9IG51bGwpXG4gICAgICAgICAgICByZXN1bHQucHVzaChhcnJheVtpXSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIEJ1aWxkIHVwIGEgdHJlZSB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgc2V0IG9mIGRlY29yYXRpb25zLiBgb2Zmc2V0YFxuLy8gaXMgYSBiYXNlIG9mZnNldCB0aGF0IHNob3VsZCBiZSBzdWJ0cmFjdGVkIGZyb20gdGhlIGBmcm9tYCBhbmQgYHRvYFxuLy8gcG9zaXRpb25zIGluIHRoZSBzcGFucyAoc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIGFsbG9jYXRlIG5ldyBzcGFuc1xuLy8gZm9yIHJlY3Vyc2l2ZSBjYWxscykuXG5mdW5jdGlvbiBidWlsZFRyZWUoc3BhbnMsIG5vZGUsIG9mZnNldCwgb3B0aW9ucykge1xuICAgIGxldCBjaGlsZHJlbiA9IFtdLCBoYXNOdWxscyA9IGZhbHNlO1xuICAgIG5vZGUuZm9yRWFjaCgoY2hpbGROb2RlLCBsb2NhbFN0YXJ0KSA9PiB7XG4gICAgICAgIGxldCBmb3VuZCA9IHRha2VTcGFuc0Zvck5vZGUoc3BhbnMsIGNoaWxkTm9kZSwgbG9jYWxTdGFydCArIG9mZnNldCk7XG4gICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgaGFzTnVsbHMgPSB0cnVlO1xuICAgICAgICAgICAgbGV0IHN1YnRyZWUgPSBidWlsZFRyZWUoZm91bmQsIGNoaWxkTm9kZSwgb2Zmc2V0ICsgbG9jYWxTdGFydCArIDEsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHN1YnRyZWUgIT0gZW1wdHkpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChsb2NhbFN0YXJ0LCBsb2NhbFN0YXJ0ICsgY2hpbGROb2RlLm5vZGVTaXplLCBzdWJ0cmVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBsb2NhbHMgPSBtb3ZlU3BhbnMoaGFzTnVsbHMgPyB3aXRob3V0TnVsbHMoc3BhbnMpIDogc3BhbnMsIC1vZmZzZXQpLnNvcnQoYnlQb3MpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWxzLmxlbmd0aDsgaSsrKVxuICAgICAgICBpZiAoIWxvY2Fsc1tpXS50eXBlLnZhbGlkKG5vZGUsIGxvY2Fsc1tpXSkpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm9uUmVtb3ZlKVxuICAgICAgICAgICAgICAgIG9wdGlvbnMub25SZW1vdmUobG9jYWxzW2ldLnNwZWMpO1xuICAgICAgICAgICAgbG9jYWxzLnNwbGljZShpLS0sIDEpO1xuICAgICAgICB9XG4gICAgcmV0dXJuIGxvY2Fscy5sZW5ndGggfHwgY2hpbGRyZW4ubGVuZ3RoID8gbmV3IERlY29yYXRpb25TZXQobG9jYWxzLCBjaGlsZHJlbikgOiBlbXB0eTtcbn1cbi8vIFVzZWQgdG8gc29ydCBkZWNvcmF0aW9ucyBzbyB0aGF0IG9uZXMgd2l0aCBhIGxvdyBzdGFydCBwb3NpdGlvblxuLy8gY29tZSBmaXJzdCwgYW5kIHdpdGhpbiBhIHNldCB3aXRoIHRoZSBzYW1lIHN0YXJ0IHBvc2l0aW9uLCB0aG9zZVxuLy8gd2l0aCBhbiBzbWFsbGVyIGVuZCBwb3NpdGlvbiBjb21lIGZpcnN0LlxuZnVuY3Rpb24gYnlQb3MoYSwgYikge1xuICAgIHJldHVybiBhLmZyb20gLSBiLmZyb20gfHwgYS50byAtIGIudG87XG59XG4vLyBTY2FuIGEgc29ydGVkIGFycmF5IG9mIGRlY29yYXRpb25zIGZvciBwYXJ0aWFsbHkgb3ZlcmxhcHBpbmcgc3BhbnMsXG4vLyBhbmQgc3BsaXQgdGhvc2Ugc28gdGhhdCBvbmx5IGZ1bGx5IG92ZXJsYXBwaW5nIHNwYW5zIGFyZSBsZWZ0ICh0b1xuLy8gbWFrZSBzdWJzZXF1ZW50IHJlbmRlcmluZyBlYXNpZXIpLiBXaWxsIHJldHVybiB0aGUgaW5wdXQgYXJyYXkgaWZcbi8vIG5vIHBhcnRpYWxseSBvdmVybGFwcGluZyBzcGFucyBhcmUgZm91bmQgKHRoZSBjb21tb24gY2FzZSkuXG5mdW5jdGlvbiByZW1vdmVPdmVybGFwKHNwYW5zKSB7XG4gICAgbGV0IHdvcmtpbmcgPSBzcGFucztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdvcmtpbmcubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGxldCBzcGFuID0gd29ya2luZ1tpXTtcbiAgICAgICAgaWYgKHNwYW4uZnJvbSAhPSBzcGFuLnRvKVxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgd29ya2luZy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gd29ya2luZ1tqXTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dC5mcm9tID09IHNwYW4uZnJvbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dC50byAhPSBzcGFuLnRvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod29ya2luZyA9PSBzcGFucylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JraW5nID0gc3BhbnMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvbGxvd2VkIGJ5IGEgcGFydGlhbGx5IG92ZXJsYXBwaW5nIGxhcmdlciBzcGFuLiBTcGxpdCB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzcGFuLlxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2luZ1tqXSA9IG5leHQuY29weShuZXh0LmZyb20sIHNwYW4udG8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0QWhlYWQod29ya2luZywgaiArIDEsIG5leHQuY29weShzcGFuLnRvLCBuZXh0LnRvKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dC5mcm9tIDwgc3Bhbi50bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdvcmtpbmcgPT0gc3BhbnMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya2luZyA9IHNwYW5zLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZW5kIG9mIHRoaXMgb25lIG92ZXJsYXBzIHdpdGggYSBzdWJzZXF1ZW50IHNwYW4uIFNwbGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIG9uZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtpbmdbaV0gPSBzcGFuLmNvcHkoc3Bhbi5mcm9tLCBuZXh0LmZyb20pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0QWhlYWQod29ya2luZywgaiwgc3Bhbi5jb3B5KG5leHQuZnJvbSwgc3Bhbi50bykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHdvcmtpbmc7XG59XG5mdW5jdGlvbiBpbnNlcnRBaGVhZChhcnJheSwgaSwgZGVjbykge1xuICAgIHdoaWxlIChpIDwgYXJyYXkubGVuZ3RoICYmIGJ5UG9zKGRlY28sIGFycmF5W2ldKSA+IDApXG4gICAgICAgIGkrKztcbiAgICBhcnJheS5zcGxpY2UoaSwgMCwgZGVjbyk7XG59XG4vLyBHZXQgdGhlIGRlY29yYXRpb25zIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBwcm9wcyBvZiBhIHZpZXcuXG5mdW5jdGlvbiB2aWV3RGVjb3JhdGlvbnModmlldykge1xuICAgIGxldCBmb3VuZCA9IFtdO1xuICAgIHZpZXcuc29tZVByb3AoXCJkZWNvcmF0aW9uc1wiLCBmID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGYodmlldy5zdGF0ZSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0ICE9IGVtcHR5KVxuICAgICAgICAgICAgZm91bmQucHVzaChyZXN1bHQpO1xuICAgIH0pO1xuICAgIGlmICh2aWV3LmN1cnNvcldyYXBwZXIpXG4gICAgICAgIGZvdW5kLnB1c2goRGVjb3JhdGlvblNldC5jcmVhdGUodmlldy5zdGF0ZS5kb2MsIFt2aWV3LmN1cnNvcldyYXBwZXIuZGVjb10pKTtcbiAgICByZXR1cm4gRGVjb3JhdGlvbkdyb3VwLmZyb20oZm91bmQpO1xufVxuXG5jb25zdCBvYnNlcnZlT3B0aW9ucyA9IHtcbiAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICBjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6IHRydWUsXG4gICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogdHJ1ZSxcbiAgICBzdWJ0cmVlOiB0cnVlXG59O1xuLy8gSUUxMSBoYXMgdmVyeSBicm9rZW4gbXV0YXRpb24gb2JzZXJ2ZXJzLCBzbyB3ZSBhbHNvIGxpc3RlbiB0byBET01DaGFyYWN0ZXJEYXRhTW9kaWZpZWRcbmNvbnN0IHVzZUNoYXJEYXRhID0gaWUgJiYgaWVfdmVyc2lvbiA8PSAxMTtcbmNsYXNzIFNlbGVjdGlvblN0YXRlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hbmNob3JOb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5hbmNob3JPZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmZvY3VzTm9kZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZm9jdXNPZmZzZXQgPSAwO1xuICAgIH1cbiAgICBzZXQoc2VsKSB7XG4gICAgICAgIHRoaXMuYW5jaG9yTm9kZSA9IHNlbC5hbmNob3JOb2RlO1xuICAgICAgICB0aGlzLmFuY2hvck9mZnNldCA9IHNlbC5hbmNob3JPZmZzZXQ7XG4gICAgICAgIHRoaXMuZm9jdXNOb2RlID0gc2VsLmZvY3VzTm9kZTtcbiAgICAgICAgdGhpcy5mb2N1c09mZnNldCA9IHNlbC5mb2N1c09mZnNldDtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuYW5jaG9yTm9kZSA9IHRoaXMuZm9jdXNOb2RlID0gbnVsbDtcbiAgICB9XG4gICAgZXEoc2VsKSB7XG4gICAgICAgIHJldHVybiBzZWwuYW5jaG9yTm9kZSA9PSB0aGlzLmFuY2hvck5vZGUgJiYgc2VsLmFuY2hvck9mZnNldCA9PSB0aGlzLmFuY2hvck9mZnNldCAmJlxuICAgICAgICAgICAgc2VsLmZvY3VzTm9kZSA9PSB0aGlzLmZvY3VzTm9kZSAmJiBzZWwuZm9jdXNPZmZzZXQgPT0gdGhpcy5mb2N1c09mZnNldDtcbiAgICB9XG59XG5jbGFzcyBET01PYnNlcnZlciB7XG4gICAgY29uc3RydWN0b3IodmlldywgaGFuZGxlRE9NQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICAgIHRoaXMuaGFuZGxlRE9NQ2hhbmdlID0gaGFuZGxlRE9NQ2hhbmdlO1xuICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgICAgIHRoaXMuZmx1c2hpbmdTb29uID0gLTE7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRTZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uU3RhdGU7XG4gICAgICAgIHRoaXMub25DaGFyRGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuc3VwcHJlc3NpbmdTZWxlY3Rpb25VcGRhdGVzID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGFzdENoYW5nZWRUZXh0Tm9kZSA9IG51bGw7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciAmJlxuICAgICAgICAgICAgbmV3IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKG11dGF0aW9ucyA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdXRhdGlvbnMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVldWUucHVzaChtdXRhdGlvbnNbaV0pO1xuICAgICAgICAgICAgICAgIC8vIElFMTEgd2lsbCBzb21ldGltZXMgKG9uIGJhY2tzcGFjaW5nIG91dCBhIHNpbmdsZSBjaGFyYWN0ZXJcbiAgICAgICAgICAgICAgICAvLyB0ZXh0IG5vZGUgYWZ0ZXIgYSBCUiBub2RlKSBjYWxsIHRoZSBvYnNlcnZlciBjYWxsYmFja1xuICAgICAgICAgICAgICAgIC8vIGJlZm9yZSBhY3R1YWxseSB1cGRhdGluZyB0aGUgRE9NLCB3aGljaCB3aWxsIGNhdXNlXG4gICAgICAgICAgICAgICAgLy8gUHJvc2VNaXJyb3IgdG8gbWlzcyB0aGUgY2hhbmdlIChzZWUgIzkzMClcbiAgICAgICAgICAgICAgICBpZiAoaWUgJiYgaWVfdmVyc2lvbiA8PSAxMSAmJiBtdXRhdGlvbnMuc29tZShtID0+IG0udHlwZSA9PSBcImNoaWxkTGlzdFwiICYmIG0ucmVtb3ZlZE5vZGVzLmxlbmd0aCB8fFxuICAgICAgICAgICAgICAgICAgICBtLnR5cGUgPT0gXCJjaGFyYWN0ZXJEYXRhXCIgJiYgbS5vbGRWYWx1ZS5sZW5ndGggPiBtLnRhcmdldC5ub2RlVmFsdWUubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mbHVzaFNvb24oKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpZiAodXNlQ2hhckRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMub25DaGFyRGF0YSA9IGUgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucXVldWUucHVzaCh7IHRhcmdldDogZS50YXJnZXQsIHR5cGU6IFwiY2hhcmFjdGVyRGF0YVwiLCBvbGRWYWx1ZTogZS5wcmV2VmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mbHVzaFNvb24oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vblNlbGVjdGlvbkNoYW5nZSA9IHRoaXMub25TZWxlY3Rpb25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB9XG4gICAgZmx1c2hTb29uKCkge1xuICAgICAgICBpZiAodGhpcy5mbHVzaGluZ1Nvb24gPCAwKVxuICAgICAgICAgICAgdGhpcy5mbHVzaGluZ1Nvb24gPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7IHRoaXMuZmx1c2hpbmdTb29uID0gLTE7IHRoaXMuZmx1c2goKTsgfSwgMjApO1xuICAgIH1cbiAgICBmb3JjZUZsdXNoKCkge1xuICAgICAgICBpZiAodGhpcy5mbHVzaGluZ1Nvb24gPiAtMSkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmZsdXNoaW5nU29vbik7XG4gICAgICAgICAgICB0aGlzLmZsdXNoaW5nU29vbiA9IC0xO1xuICAgICAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpO1xuICAgICAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMudmlldy5kb20sIG9ic2VydmVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vbkNoYXJEYXRhKVxuICAgICAgICAgICAgdGhpcy52aWV3LmRvbS5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkXCIsIHRoaXMub25DaGFyRGF0YSk7XG4gICAgICAgIHRoaXMuY29ubmVjdFNlbGVjdGlvbigpO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgICAgICAgbGV0IHRha2UgPSB0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCk7XG4gICAgICAgICAgICBpZiAodGFrZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRha2UubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVldWUucHVzaCh0YWtlW2ldKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB0aGlzLmZsdXNoKCksIDIwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9uQ2hhckRhdGEpXG4gICAgICAgICAgICB0aGlzLnZpZXcuZG9tLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01DaGFyYWN0ZXJEYXRhTW9kaWZpZWRcIiwgdGhpcy5vbkNoYXJEYXRhKTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0U2VsZWN0aW9uKCk7XG4gICAgfVxuICAgIGNvbm5lY3RTZWxlY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudmlldy5kb20ub3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0aW9uY2hhbmdlXCIsIHRoaXMub25TZWxlY3Rpb25DaGFuZ2UpO1xuICAgIH1cbiAgICBkaXNjb25uZWN0U2VsZWN0aW9uKCkge1xuICAgICAgICB0aGlzLnZpZXcuZG9tLm93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdGlvbmNoYW5nZVwiLCB0aGlzLm9uU2VsZWN0aW9uQ2hhbmdlKTtcbiAgICB9XG4gICAgc3VwcHJlc3NTZWxlY3Rpb25VcGRhdGVzKCkge1xuICAgICAgICB0aGlzLnN1cHByZXNzaW5nU2VsZWN0aW9uVXBkYXRlcyA9IHRydWU7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zdXBwcmVzc2luZ1NlbGVjdGlvblVwZGF0ZXMgPSBmYWxzZSwgNTApO1xuICAgIH1cbiAgICBvblNlbGVjdGlvbkNoYW5nZSgpIHtcbiAgICAgICAgaWYgKCFoYXNGb2N1c0FuZFNlbGVjdGlvbih0aGlzLnZpZXcpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5zdXBwcmVzc2luZ1NlbGVjdGlvblVwZGF0ZXMpXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0aW9uVG9ET00odGhpcy52aWV3KTtcbiAgICAgICAgLy8gRGVsZXRpb25zIG9uIElFMTEgZmlyZSB0aGVpciBldmVudHMgaW4gdGhlIHdyb25nIG9yZGVyLCBnaXZpbmdcbiAgICAgICAgLy8gdXMgYSBzZWxlY3Rpb24gY2hhbmdlIGV2ZW50IGJlZm9yZSB0aGUgRE9NIGNoYW5nZXMgYXJlXG4gICAgICAgIC8vIHJlcG9ydGVkLlxuICAgICAgICBpZiAoaWUgJiYgaWVfdmVyc2lvbiA8PSAxMSAmJiAhdGhpcy52aWV3LnN0YXRlLnNlbGVjdGlvbi5lbXB0eSkge1xuICAgICAgICAgICAgbGV0IHNlbCA9IHRoaXMudmlldy5kb21TZWxlY3Rpb25SYW5nZSgpO1xuICAgICAgICAgICAgLy8gU2VsZWN0aW9uLmlzQ29sbGFwc2VkIGlzbid0IHJlbGlhYmxlIG9uIElFXG4gICAgICAgICAgICBpZiAoc2VsLmZvY3VzTm9kZSAmJiBpc0VxdWl2YWxlbnRQb3NpdGlvbihzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQsIHNlbC5hbmNob3JOb2RlLCBzZWwuYW5jaG9yT2Zmc2V0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mbHVzaFNvb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZsdXNoKCk7XG4gICAgfVxuICAgIHNldEN1clNlbGVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U2VsZWN0aW9uLnNldCh0aGlzLnZpZXcuZG9tU2VsZWN0aW9uUmFuZ2UoKSk7XG4gICAgfVxuICAgIGlnbm9yZVNlbGVjdGlvbkNoYW5nZShzZWwpIHtcbiAgICAgICAgaWYgKCFzZWwuZm9jdXNOb2RlKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGxldCBhbmNlc3RvcnMgPSBuZXcgU2V0LCBjb250YWluZXI7XG4gICAgICAgIGZvciAobGV0IHNjYW4gPSBzZWwuZm9jdXNOb2RlOyBzY2FuOyBzY2FuID0gcGFyZW50Tm9kZShzY2FuKSlcbiAgICAgICAgICAgIGFuY2VzdG9ycy5hZGQoc2Nhbik7XG4gICAgICAgIGZvciAobGV0IHNjYW4gPSBzZWwuYW5jaG9yTm9kZTsgc2Nhbjsgc2NhbiA9IHBhcmVudE5vZGUoc2NhbikpXG4gICAgICAgICAgICBpZiAoYW5jZXN0b3JzLmhhcyhzY2FuKSkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHNjYW47XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIGxldCBkZXNjID0gY29udGFpbmVyICYmIHRoaXMudmlldy5kb2NWaWV3Lm5lYXJlc3REZXNjKGNvbnRhaW5lcik7XG4gICAgICAgIGlmIChkZXNjICYmIGRlc2MuaWdub3JlTXV0YXRpb24oe1xuICAgICAgICAgICAgdHlwZTogXCJzZWxlY3Rpb25cIixcbiAgICAgICAgICAgIHRhcmdldDogY29udGFpbmVyLm5vZGVUeXBlID09IDMgPyBjb250YWluZXIucGFyZW50Tm9kZSA6IGNvbnRhaW5lclxuICAgICAgICB9KSkge1xuICAgICAgICAgICAgdGhpcy5zZXRDdXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBlbmRpbmdSZWNvcmRzKCkge1xuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcilcbiAgICAgICAgICAgIGZvciAobGV0IG11dCBvZiB0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCkpXG4gICAgICAgICAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKG11dCk7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXVlO1xuICAgIH1cbiAgICBmbHVzaCgpIHtcbiAgICAgICAgbGV0IHsgdmlldyB9ID0gdGhpcztcbiAgICAgICAgaWYgKCF2aWV3LmRvY1ZpZXcgfHwgdGhpcy5mbHVzaGluZ1Nvb24gPiAtMSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbGV0IG11dGF0aW9ucyA9IHRoaXMucGVuZGluZ1JlY29yZHMoKTtcbiAgICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgICAgIGxldCBzZWwgPSB2aWV3LmRvbVNlbGVjdGlvblJhbmdlKCk7XG4gICAgICAgIGxldCBuZXdTZWwgPSAhdGhpcy5zdXBwcmVzc2luZ1NlbGVjdGlvblVwZGF0ZXMgJiYgIXRoaXMuY3VycmVudFNlbGVjdGlvbi5lcShzZWwpICYmIGhhc0ZvY3VzQW5kU2VsZWN0aW9uKHZpZXcpICYmICF0aGlzLmlnbm9yZVNlbGVjdGlvbkNoYW5nZShzZWwpO1xuICAgICAgICBsZXQgZnJvbSA9IC0xLCB0byA9IC0xLCB0eXBlT3ZlciA9IGZhbHNlLCBhZGRlZCA9IFtdO1xuICAgICAgICBpZiAodmlldy5lZGl0YWJsZSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdXRhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5yZWdpc3Rlck11dGF0aW9uKG11dGF0aW9uc1tpXSwgYWRkZWQpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IGZyb20gPCAwID8gcmVzdWx0LmZyb20gOiBNYXRoLm1pbihyZXN1bHQuZnJvbSwgZnJvbSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gdG8gPCAwID8gcmVzdWx0LnRvIDogTWF0aC5tYXgocmVzdWx0LnRvLCB0byk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudHlwZU92ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlT3ZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChnZWNrbyAmJiBhZGRlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGxldCBicnMgPSBhZGRlZC5maWx0ZXIobiA9PiBuLm5vZGVOYW1lID09IFwiQlJcIik7XG4gICAgICAgICAgICBpZiAoYnJzLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgICAgICAgICAgbGV0IFthLCBiXSA9IGJycztcbiAgICAgICAgICAgICAgICBpZiAoYS5wYXJlbnROb2RlICYmIGEucGFyZW50Tm9kZS5wYXJlbnROb2RlID09IGIucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgYi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGEucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgeyBmb2N1c05vZGUgfSA9IHRoaXMuY3VycmVudFNlbGVjdGlvbjtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBiciBvZiBicnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcmVudCA9IGJyLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50Lm5vZGVOYW1lID09IFwiTElcIiAmJiAoIWZvY3VzTm9kZSB8fCBibG9ja1BhcmVudCh2aWV3LCBmb2N1c05vZGUpICE9IHBhcmVudCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBici5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlYWRTZWwgPSBudWxsO1xuICAgICAgICAvLyBJZiBpdCBsb29rcyBsaWtlIHRoZSBicm93c2VyIGhhcyByZXNldCB0aGUgc2VsZWN0aW9uIHRvIHRoZVxuICAgICAgICAvLyBzdGFydCBvZiB0aGUgZG9jdW1lbnQgYWZ0ZXIgZm9jdXMsIHJlc3RvcmUgdGhlIHNlbGVjdGlvbiBmcm9tXG4gICAgICAgIC8vIHRoZSBzdGF0ZVxuICAgICAgICBpZiAoZnJvbSA8IDAgJiYgbmV3U2VsICYmIHZpZXcuaW5wdXQubGFzdEZvY3VzID4gRGF0ZS5ub3coKSAtIDIwMCAmJlxuICAgICAgICAgICAgTWF0aC5tYXgodmlldy5pbnB1dC5sYXN0VG91Y2gsIHZpZXcuaW5wdXQubGFzdENsaWNrLnRpbWUpIDwgRGF0ZS5ub3coKSAtIDMwMCAmJlxuICAgICAgICAgICAgc2VsZWN0aW9uQ29sbGFwc2VkKHNlbCkgJiYgKHJlYWRTZWwgPSBzZWxlY3Rpb25Gcm9tRE9NKHZpZXcpKSAmJlxuICAgICAgICAgICAgcmVhZFNlbC5lcShTZWxlY3Rpb24ubmVhcih2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKDApLCAxKSkpIHtcbiAgICAgICAgICAgIHZpZXcuaW5wdXQubGFzdEZvY3VzID0gMDtcbiAgICAgICAgICAgIHNlbGVjdGlvblRvRE9NKHZpZXcpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2VsZWN0aW9uLnNldChzZWwpO1xuICAgICAgICAgICAgdmlldy5zY3JvbGxUb1NlbGVjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZyb20gPiAtMSB8fCBuZXdTZWwpIHtcbiAgICAgICAgICAgIGlmIChmcm9tID4gLTEpIHtcbiAgICAgICAgICAgICAgICB2aWV3LmRvY1ZpZXcubWFya0RpcnR5KGZyb20sIHRvKTtcbiAgICAgICAgICAgICAgICBjaGVja0NTUyh2aWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRE9NQ2hhbmdlKGZyb20sIHRvLCB0eXBlT3ZlciwgYWRkZWQpO1xuICAgICAgICAgICAgaWYgKHZpZXcuZG9jVmlldyAmJiB2aWV3LmRvY1ZpZXcuZGlydHkpXG4gICAgICAgICAgICAgICAgdmlldy51cGRhdGVTdGF0ZSh2aWV3LnN0YXRlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLmN1cnJlbnRTZWxlY3Rpb24uZXEoc2VsKSlcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25Ub0RPTSh2aWV3KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFNlbGVjdGlvbi5zZXQoc2VsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZWdpc3Rlck11dGF0aW9uKG11dCwgYWRkZWQpIHtcbiAgICAgICAgLy8gSWdub3JlIG11dGF0aW9ucyBpbnNpZGUgbm9kZXMgdGhhdCB3ZXJlIGFscmVhZHkgbm90ZWQgYXMgaW5zZXJ0ZWRcbiAgICAgICAgaWYgKGFkZGVkLmluZGV4T2YobXV0LnRhcmdldCkgPiAtMSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgZGVzYyA9IHRoaXMudmlldy5kb2NWaWV3Lm5lYXJlc3REZXNjKG11dC50YXJnZXQpO1xuICAgICAgICBpZiAobXV0LnR5cGUgPT0gXCJhdHRyaWJ1dGVzXCIgJiZcbiAgICAgICAgICAgIChkZXNjID09IHRoaXMudmlldy5kb2NWaWV3IHx8IG11dC5hdHRyaWJ1dGVOYW1lID09IFwiY29udGVudGVkaXRhYmxlXCIgfHxcbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94IHNvbWV0aW1lcyBmaXJlcyBzcHVyaW91cyBldmVudHMgZm9yIG51bGwvZW1wdHkgc3R5bGVzXG4gICAgICAgICAgICAgICAgKG11dC5hdHRyaWJ1dGVOYW1lID09IFwic3R5bGVcIiAmJiAhbXV0Lm9sZFZhbHVlICYmICFtdXQudGFyZ2V0LmdldEF0dHJpYnV0ZShcInN0eWxlXCIpKSkpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCFkZXNjIHx8IGRlc2MuaWdub3JlTXV0YXRpb24obXV0KSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBpZiAobXV0LnR5cGUgPT0gXCJjaGlsZExpc3RcIikge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdXQuYWRkZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBub2RlID0gbXV0LmFkZGVkTm9kZXNbaV07XG4gICAgICAgICAgICAgICAgYWRkZWQucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RDaGFuZ2VkVGV4dE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlc2MuY29udGVudERPTSAmJiBkZXNjLmNvbnRlbnRET00gIT0gZGVzYy5kb20gJiYgIWRlc2MuY29udGVudERPTS5jb250YWlucyhtdXQudGFyZ2V0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4geyBmcm9tOiBkZXNjLnBvc0JlZm9yZSwgdG86IGRlc2MucG9zQWZ0ZXIgfTtcbiAgICAgICAgICAgIGxldCBwcmV2ID0gbXV0LnByZXZpb3VzU2libGluZywgbmV4dCA9IG11dC5uZXh0U2libGluZztcbiAgICAgICAgICAgIGlmIChpZSAmJiBpZV92ZXJzaW9uIDw9IDExICYmIG11dC5hZGRlZE5vZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIC8vIElFMTEgZ2l2ZXMgdXMgaW5jb3JyZWN0IG5leHQvcHJldiBzaWJsaW5ncyBmb3Igc29tZVxuICAgICAgICAgICAgICAgIC8vIGluc2VydGlvbnMsIHNvIGlmIHRoZXJlIGFyZSBhZGRlZCBub2RlcywgcmVjb21wdXRlIHRob3NlXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtdXQuYWRkZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgeyBwcmV2aW91c1NpYmxpbmcsIG5leHRTaWJsaW5nIH0gPSBtdXQuYWRkZWROb2Rlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcmV2aW91c1NpYmxpbmcgfHwgQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChtdXQuYWRkZWROb2RlcywgcHJldmlvdXNTaWJsaW5nKSA8IDApXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gcHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHRTaWJsaW5nIHx8IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwobXV0LmFkZGVkTm9kZXMsIG5leHRTaWJsaW5nKSA8IDApXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gbmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGZyb21PZmZzZXQgPSBwcmV2ICYmIHByZXYucGFyZW50Tm9kZSA9PSBtdXQudGFyZ2V0XG4gICAgICAgICAgICAgICAgPyBkb21JbmRleChwcmV2KSArIDEgOiAwO1xuICAgICAgICAgICAgbGV0IGZyb20gPSBkZXNjLmxvY2FsUG9zRnJvbURPTShtdXQudGFyZ2V0LCBmcm9tT2Zmc2V0LCAtMSk7XG4gICAgICAgICAgICBsZXQgdG9PZmZzZXQgPSBuZXh0ICYmIG5leHQucGFyZW50Tm9kZSA9PSBtdXQudGFyZ2V0XG4gICAgICAgICAgICAgICAgPyBkb21JbmRleChuZXh0KSA6IG11dC50YXJnZXQuY2hpbGROb2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgdG8gPSBkZXNjLmxvY2FsUG9zRnJvbURPTShtdXQudGFyZ2V0LCB0b09mZnNldCwgMSk7XG4gICAgICAgICAgICByZXR1cm4geyBmcm9tLCB0byB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG11dC50eXBlID09IFwiYXR0cmlidXRlc1wiKSB7XG4gICAgICAgICAgICByZXR1cm4geyBmcm9tOiBkZXNjLnBvc0F0U3RhcnQgLSBkZXNjLmJvcmRlciwgdG86IGRlc2MucG9zQXRFbmQgKyBkZXNjLmJvcmRlciB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBcImNoYXJhY3RlckRhdGFcIlxuICAgICAgICAgICAgdGhpcy5sYXN0Q2hhbmdlZFRleHROb2RlID0gbXV0LnRhcmdldDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZnJvbTogZGVzYy5wb3NBdFN0YXJ0LFxuICAgICAgICAgICAgICAgIHRvOiBkZXNjLnBvc0F0RW5kLFxuICAgICAgICAgICAgICAgIC8vIEFuIGV2ZW50IHdhcyBnZW5lcmF0ZWQgZm9yIGEgdGV4dCBjaGFuZ2UgdGhhdCBkaWRuJ3QgY2hhbmdlXG4gICAgICAgICAgICAgICAgLy8gYW55IHRleHQuIE1hcmsgdGhlIGRvbSBjaGFuZ2UgdG8gZmFsbCBiYWNrIHRvIGFzc3VtaW5nIHRoZVxuICAgICAgICAgICAgICAgIC8vIHNlbGVjdGlvbiB3YXMgdHlwZWQgb3ZlciB3aXRoIGFuIGlkZW50aWNhbCB2YWx1ZSBpZiBpdCBjYW4ndFxuICAgICAgICAgICAgICAgIC8vIGZpbmQgYW5vdGhlciBjaGFuZ2UuXG4gICAgICAgICAgICAgICAgdHlwZU92ZXI6IG11dC50YXJnZXQubm9kZVZhbHVlID09IG11dC5vbGRWYWx1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmxldCBjc3NDaGVja2VkID0gbmV3IFdlYWtNYXAoKTtcbmxldCBjc3NDaGVja1dhcm5lZCA9IGZhbHNlO1xuZnVuY3Rpb24gY2hlY2tDU1Modmlldykge1xuICAgIGlmIChjc3NDaGVja2VkLmhhcyh2aWV3KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNzc0NoZWNrZWQuc2V0KHZpZXcsIG51bGwpO1xuICAgIGlmIChbJ25vcm1hbCcsICdub3dyYXAnLCAncHJlLWxpbmUnXS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUodmlldy5kb20pLndoaXRlU3BhY2UpICE9PSAtMSkge1xuICAgICAgICB2aWV3LnJlcXVpcmVzR2Vja29IYWNrTm9kZSA9IGdlY2tvO1xuICAgICAgICBpZiAoY3NzQ2hlY2tXYXJuZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnNvbGVbXCJ3YXJuXCJdKFwiUHJvc2VNaXJyb3IgZXhwZWN0cyB0aGUgQ1NTIHdoaXRlLXNwYWNlIHByb3BlcnR5IHRvIGJlIHNldCwgcHJlZmVyYWJseSB0byAncHJlLXdyYXAnLiBJdCBpcyByZWNvbW1lbmRlZCB0byBsb2FkIHN0eWxlL3Byb3NlbWlycm9yLmNzcyBmcm9tIHRoZSBwcm9zZW1pcnJvci12aWV3IHBhY2thZ2UuXCIpO1xuICAgICAgICBjc3NDaGVja1dhcm5lZCA9IHRydWU7XG4gICAgfVxufVxuZnVuY3Rpb24gcmFuZ2VUb1NlbGVjdGlvblJhbmdlKHZpZXcsIHJhbmdlKSB7XG4gICAgbGV0IGFuY2hvck5vZGUgPSByYW5nZS5zdGFydENvbnRhaW5lciwgYW5jaG9yT2Zmc2V0ID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7XG4gICAgbGV0IGZvY3VzTm9kZSA9IHJhbmdlLmVuZENvbnRhaW5lciwgZm9jdXNPZmZzZXQgPSByYW5nZS5lbmRPZmZzZXQ7XG4gICAgbGV0IGN1cnJlbnRBbmNob3IgPSB2aWV3LmRvbUF0UG9zKHZpZXcuc3RhdGUuc2VsZWN0aW9uLmFuY2hvcik7XG4gICAgLy8gU2luY2Ugc3VjaCBhIHJhbmdlIGRvZXNuJ3QgZGlzdGluZ3Vpc2ggYmV0d2VlbiBhbmNob3IgYW5kIGhlYWQsXG4gICAgLy8gdXNlIGEgaGV1cmlzdGljIHRoYXQgZmxpcHMgaXQgYXJvdW5kIGlmIGl0cyBlbmQgbWF0Y2hlcyB0aGVcbiAgICAvLyBjdXJyZW50IGFuY2hvci5cbiAgICBpZiAoaXNFcXVpdmFsZW50UG9zaXRpb24oY3VycmVudEFuY2hvci5ub2RlLCBjdXJyZW50QW5jaG9yLm9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCkpXG4gICAgICAgIFthbmNob3JOb2RlLCBhbmNob3JPZmZzZXQsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXRdID0gW2ZvY3VzTm9kZSwgZm9jdXNPZmZzZXQsIGFuY2hvck5vZGUsIGFuY2hvck9mZnNldF07XG4gICAgcmV0dXJuIHsgYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0LCBmb2N1c05vZGUsIGZvY3VzT2Zmc2V0IH07XG59XG4vLyBVc2VkIHRvIHdvcmsgYXJvdW5kIGEgU2FmYXJpIFNlbGVjdGlvbi9zaGFkb3cgRE9NIGJ1Z1xuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2NvZGVtaXJyb3IvZGV2L2lzc3Vlcy80MTQgZml4XG5mdW5jdGlvbiBzYWZhcmlTaGFkb3dTZWxlY3Rpb25SYW5nZSh2aWV3LCBzZWxlY3Rpb24pIHtcbiAgICBpZiAoc2VsZWN0aW9uLmdldENvbXBvc2VkUmFuZ2VzKSB7XG4gICAgICAgIGxldCByYW5nZSA9IHNlbGVjdGlvbi5nZXRDb21wb3NlZFJhbmdlcyh2aWV3LnJvb3QpWzBdO1xuICAgICAgICBpZiAocmFuZ2UpXG4gICAgICAgICAgICByZXR1cm4gcmFuZ2VUb1NlbGVjdGlvblJhbmdlKHZpZXcsIHJhbmdlKTtcbiAgICB9XG4gICAgbGV0IGZvdW5kO1xuICAgIGZ1bmN0aW9uIHJlYWQoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGZvdW5kID0gZXZlbnQuZ2V0VGFyZ2V0UmFuZ2VzKClbMF07XG4gICAgfVxuICAgIC8vIEJlY2F1c2UgU2FmYXJpIChhdCBsZWFzdCBpbiAyMDE4LTIwMjIpIGRvZXNuJ3QgcHJvdmlkZSByZWd1bGFyXG4gICAgLy8gYWNjZXNzIHRvIHRoZSBzZWxlY3Rpb24gaW5zaWRlIGEgc2hhZG93Um9vdCwgd2UgaGF2ZSB0byBwZXJmb3JtIGFcbiAgICAvLyByaWRpY3Vsb3VzIGhhY2sgdG8gZ2V0IGF0IGl04oCUdXNpbmcgYGV4ZWNDb21tYW5kYCB0byB0cmlnZ2VyIGFcbiAgICAvLyBgYmVmb3JlSW5wdXRgIGV2ZW50IHNvIHRoYXQgd2UgY2FuIHJlYWQgdGhlIHRhcmdldCByYW5nZSBmcm9tIHRoZVxuICAgIC8vIGV2ZW50LlxuICAgIHZpZXcuZG9tLmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmVpbnB1dFwiLCByZWFkLCB0cnVlKTtcbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZChcImluZGVudFwiKTtcbiAgICB2aWV3LmRvbS5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JlaW5wdXRcIiwgcmVhZCwgdHJ1ZSk7XG4gICAgcmV0dXJuIGZvdW5kID8gcmFuZ2VUb1NlbGVjdGlvblJhbmdlKHZpZXcsIGZvdW5kKSA6IG51bGw7XG59XG5mdW5jdGlvbiBibG9ja1BhcmVudCh2aWV3LCBub2RlKSB7XG4gICAgZm9yIChsZXQgcCA9IG5vZGUucGFyZW50Tm9kZTsgcCAmJiBwICE9IHZpZXcuZG9tOyBwID0gcC5wYXJlbnROb2RlKSB7XG4gICAgICAgIGxldCBkZXNjID0gdmlldy5kb2NWaWV3Lm5lYXJlc3REZXNjKHAsIHRydWUpO1xuICAgICAgICBpZiAoZGVzYyAmJiBkZXNjLm5vZGUuaXNCbG9jaylcbiAgICAgICAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuLy8gTm90ZSB0aGF0IGFsbCByZWZlcmVuY2luZyBhbmQgcGFyc2luZyBpcyBkb25lIHdpdGggdGhlXG4vLyBzdGFydC1vZi1vcGVyYXRpb24gc2VsZWN0aW9uIGFuZCBkb2N1bWVudCwgc2luY2UgdGhhdCdzIHRoZSBvbmVcbi8vIHRoYXQgdGhlIERPTSByZXByZXNlbnRzLiBJZiBhbnkgY2hhbmdlcyBjYW1lIGluIGluIHRoZSBtZWFudGltZSxcbi8vIHRoZSBtb2RpZmljYXRpb24gaXMgbWFwcGVkIG92ZXIgdGhvc2UgYmVmb3JlIGl0IGlzIGFwcGxpZWQsIGluXG4vLyByZWFkRE9NQ2hhbmdlLlxuZnVuY3Rpb24gcGFyc2VCZXR3ZWVuKHZpZXcsIGZyb21fLCB0b18pIHtcbiAgICBsZXQgeyBub2RlOiBwYXJlbnQsIGZyb21PZmZzZXQsIHRvT2Zmc2V0LCBmcm9tLCB0byB9ID0gdmlldy5kb2NWaWV3LnBhcnNlUmFuZ2UoZnJvbV8sIHRvXyk7XG4gICAgbGV0IGRvbVNlbCA9IHZpZXcuZG9tU2VsZWN0aW9uUmFuZ2UoKTtcbiAgICBsZXQgZmluZDtcbiAgICBsZXQgYW5jaG9yID0gZG9tU2VsLmFuY2hvck5vZGU7XG4gICAgaWYgKGFuY2hvciAmJiB2aWV3LmRvbS5jb250YWlucyhhbmNob3Iubm9kZVR5cGUgPT0gMSA/IGFuY2hvciA6IGFuY2hvci5wYXJlbnROb2RlKSkge1xuICAgICAgICBmaW5kID0gW3sgbm9kZTogYW5jaG9yLCBvZmZzZXQ6IGRvbVNlbC5hbmNob3JPZmZzZXQgfV07XG4gICAgICAgIGlmICghc2VsZWN0aW9uQ29sbGFwc2VkKGRvbVNlbCkpXG4gICAgICAgICAgICBmaW5kLnB1c2goeyBub2RlOiBkb21TZWwuZm9jdXNOb2RlLCBvZmZzZXQ6IGRvbVNlbC5mb2N1c09mZnNldCB9KTtcbiAgICB9XG4gICAgLy8gV29yayBhcm91bmQgaXNzdWUgaW4gQ2hyb21lIHdoZXJlIGJhY2tzcGFjaW5nIHNvbWV0aW1lcyByZXBsYWNlc1xuICAgIC8vIHRoZSBkZWxldGVkIGNvbnRlbnQgd2l0aCBhIHJhbmRvbSBCUiBub2RlIChpc3N1ZXMgIzc5OSwgIzgzMSlcbiAgICBpZiAoY2hyb21lICYmIHZpZXcuaW5wdXQubGFzdEtleUNvZGUgPT09IDgpIHtcbiAgICAgICAgZm9yIChsZXQgb2ZmID0gdG9PZmZzZXQ7IG9mZiA+IGZyb21PZmZzZXQ7IG9mZi0tKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9IHBhcmVudC5jaGlsZE5vZGVzW29mZiAtIDFdLCBkZXNjID0gbm9kZS5wbVZpZXdEZXNjO1xuICAgICAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUgPT0gXCJCUlwiICYmICFkZXNjKSB7XG4gICAgICAgICAgICAgICAgdG9PZmZzZXQgPSBvZmY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWRlc2MgfHwgZGVzYy5zaXplKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBzdGFydERvYyA9IHZpZXcuc3RhdGUuZG9jO1xuICAgIGxldCBwYXJzZXIgPSB2aWV3LnNvbWVQcm9wKFwiZG9tUGFyc2VyXCIpIHx8IERPTVBhcnNlci5mcm9tU2NoZW1hKHZpZXcuc3RhdGUuc2NoZW1hKTtcbiAgICBsZXQgJGZyb20gPSBzdGFydERvYy5yZXNvbHZlKGZyb20pO1xuICAgIGxldCBzZWwgPSBudWxsLCBkb2MgPSBwYXJzZXIucGFyc2UocGFyZW50LCB7XG4gICAgICAgIHRvcE5vZGU6ICRmcm9tLnBhcmVudCxcbiAgICAgICAgdG9wTWF0Y2g6ICRmcm9tLnBhcmVudC5jb250ZW50TWF0Y2hBdCgkZnJvbS5pbmRleCgpKSxcbiAgICAgICAgdG9wT3BlbjogdHJ1ZSxcbiAgICAgICAgZnJvbTogZnJvbU9mZnNldCxcbiAgICAgICAgdG86IHRvT2Zmc2V0LFxuICAgICAgICBwcmVzZXJ2ZVdoaXRlc3BhY2U6ICRmcm9tLnBhcmVudC50eXBlLndoaXRlc3BhY2UgPT0gXCJwcmVcIiA/IFwiZnVsbFwiIDogdHJ1ZSxcbiAgICAgICAgZmluZFBvc2l0aW9uczogZmluZCxcbiAgICAgICAgcnVsZUZyb21Ob2RlLFxuICAgICAgICBjb250ZXh0OiAkZnJvbVxuICAgIH0pO1xuICAgIGlmIChmaW5kICYmIGZpbmRbMF0ucG9zICE9IG51bGwpIHtcbiAgICAgICAgbGV0IGFuY2hvciA9IGZpbmRbMF0ucG9zLCBoZWFkID0gZmluZFsxXSAmJiBmaW5kWzFdLnBvcztcbiAgICAgICAgaWYgKGhlYWQgPT0gbnVsbClcbiAgICAgICAgICAgIGhlYWQgPSBhbmNob3I7XG4gICAgICAgIHNlbCA9IHsgYW5jaG9yOiBhbmNob3IgKyBmcm9tLCBoZWFkOiBoZWFkICsgZnJvbSB9O1xuICAgIH1cbiAgICByZXR1cm4geyBkb2MsIHNlbCwgZnJvbSwgdG8gfTtcbn1cbmZ1bmN0aW9uIHJ1bGVGcm9tTm9kZShkb20pIHtcbiAgICBsZXQgZGVzYyA9IGRvbS5wbVZpZXdEZXNjO1xuICAgIGlmIChkZXNjKSB7XG4gICAgICAgIHJldHVybiBkZXNjLnBhcnNlUnVsZSgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChkb20ubm9kZU5hbWUgPT0gXCJCUlwiICYmIGRvbS5wYXJlbnROb2RlKSB7XG4gICAgICAgIC8vIFNhZmFyaSByZXBsYWNlcyB0aGUgbGlzdCBpdGVtIG9yIHRhYmxlIGNlbGwgd2l0aCBhIEJSXG4gICAgICAgIC8vIGRpcmVjdGx5IGluIHRoZSBsaXN0IG5vZGUgKD8hKSBpZiB5b3UgZGVsZXRlIHRoZSBsYXN0XG4gICAgICAgIC8vIGNoYXJhY3RlciBpbiBhIGxpc3QgaXRlbSBvciB0YWJsZSBjZWxsICgjNzA4LCAjODYyKVxuICAgICAgICBpZiAoc2FmYXJpICYmIC9eKHVsfG9sKSQvaS50ZXN0KGRvbS5wYXJlbnROb2RlLm5vZGVOYW1lKSkge1xuICAgICAgICAgICAgbGV0IHNraXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgc2tpcC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIikpO1xuICAgICAgICAgICAgcmV0dXJuIHsgc2tpcCB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRvbS5wYXJlbnROb2RlLmxhc3RDaGlsZCA9PSBkb20gfHwgc2FmYXJpICYmIC9eKHRyfHRhYmxlKSQvaS50ZXN0KGRvbS5wYXJlbnROb2RlLm5vZGVOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgaWdub3JlOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZG9tLm5vZGVOYW1lID09IFwiSU1HXCIgJiYgZG9tLmdldEF0dHJpYnV0ZShcIm1hcmstcGxhY2Vob2xkZXJcIikpIHtcbiAgICAgICAgcmV0dXJuIHsgaWdub3JlOiB0cnVlIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuY29uc3QgaXNJbmxpbmUgPSAvXihhfGFiYnJ8YWNyb255bXxifGJkW2lvXXxiaWd8YnJ8YnV0dG9ufGNpdGV8Y29kZXxkYXRhKGxpc3QpP3xkZWx8ZGZufGVtfGl8aW5zfGtiZHxsYWJlbHxtYXB8bWFya3xtZXRlcnxvdXRwdXR8cXxydWJ5fHN8c2FtcHxzbWFsbHxzcGFufHN0cm9uZ3xzdVticF18dGltZXx1fHR0fHZhcikkL2k7XG5mdW5jdGlvbiByZWFkRE9NQ2hhbmdlKHZpZXcsIGZyb20sIHRvLCB0eXBlT3ZlciwgYWRkZWROb2Rlcykge1xuICAgIGxldCBjb21wb3NpdGlvbklEID0gdmlldy5pbnB1dC5jb21wb3NpdGlvblBlbmRpbmdDaGFuZ2VzIHx8ICh2aWV3LmNvbXBvc2luZyA/IHZpZXcuaW5wdXQuY29tcG9zaXRpb25JRCA6IDApO1xuICAgIHZpZXcuaW5wdXQuY29tcG9zaXRpb25QZW5kaW5nQ2hhbmdlcyA9IDA7XG4gICAgaWYgKGZyb20gPCAwKSB7XG4gICAgICAgIGxldCBvcmlnaW4gPSB2aWV3LmlucHV0Lmxhc3RTZWxlY3Rpb25UaW1lID4gRGF0ZS5ub3coKSAtIDUwID8gdmlldy5pbnB1dC5sYXN0U2VsZWN0aW9uT3JpZ2luIDogbnVsbDtcbiAgICAgICAgbGV0IG5ld1NlbCA9IHNlbGVjdGlvbkZyb21ET00odmlldywgb3JpZ2luKTtcbiAgICAgICAgaWYgKG5ld1NlbCAmJiAhdmlldy5zdGF0ZS5zZWxlY3Rpb24uZXEobmV3U2VsKSkge1xuICAgICAgICAgICAgaWYgKGNocm9tZSAmJiBhbmRyb2lkICYmXG4gICAgICAgICAgICAgICAgdmlldy5pbnB1dC5sYXN0S2V5Q29kZSA9PT0gMTMgJiYgRGF0ZS5ub3coKSAtIDEwMCA8IHZpZXcuaW5wdXQubGFzdEtleUNvZGVUaW1lICYmXG4gICAgICAgICAgICAgICAgdmlldy5zb21lUHJvcChcImhhbmRsZUtleURvd25cIiwgZiA9PiBmKHZpZXcsIGtleUV2ZW50KDEzLCBcIkVudGVyXCIpKSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbGV0IHRyID0gdmlldy5zdGF0ZS50ci5zZXRTZWxlY3Rpb24obmV3U2VsKTtcbiAgICAgICAgICAgIGlmIChvcmlnaW4gPT0gXCJwb2ludGVyXCIpXG4gICAgICAgICAgICAgICAgdHIuc2V0TWV0YShcInBvaW50ZXJcIiwgdHJ1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmIChvcmlnaW4gPT0gXCJrZXlcIilcbiAgICAgICAgICAgICAgICB0ci5zY3JvbGxJbnRvVmlldygpO1xuICAgICAgICAgICAgaWYgKGNvbXBvc2l0aW9uSUQpXG4gICAgICAgICAgICAgICAgdHIuc2V0TWV0YShcImNvbXBvc2l0aW9uXCIsIGNvbXBvc2l0aW9uSUQpO1xuICAgICAgICAgICAgdmlldy5kaXNwYXRjaCh0cik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgJGJlZm9yZSA9IHZpZXcuc3RhdGUuZG9jLnJlc29sdmUoZnJvbSk7XG4gICAgbGV0IHNoYXJlZCA9ICRiZWZvcmUuc2hhcmVkRGVwdGgodG8pO1xuICAgIGZyb20gPSAkYmVmb3JlLmJlZm9yZShzaGFyZWQgKyAxKTtcbiAgICB0byA9IHZpZXcuc3RhdGUuZG9jLnJlc29sdmUodG8pLmFmdGVyKHNoYXJlZCArIDEpO1xuICAgIGxldCBzZWwgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICBsZXQgcGFyc2UgPSBwYXJzZUJldHdlZW4odmlldywgZnJvbSwgdG8pO1xuICAgIGxldCBkb2MgPSB2aWV3LnN0YXRlLmRvYywgY29tcGFyZSA9IGRvYy5zbGljZShwYXJzZS5mcm9tLCBwYXJzZS50byk7XG4gICAgbGV0IHByZWZlcnJlZFBvcywgcHJlZmVycmVkU2lkZTtcbiAgICAvLyBQcmVmZXIgYW5jaG9yaW5nIHRvIGVuZCB3aGVuIEJhY2tzcGFjZSBpcyBwcmVzc2VkXG4gICAgaWYgKHZpZXcuaW5wdXQubGFzdEtleUNvZGUgPT09IDggJiYgRGF0ZS5ub3coKSAtIDEwMCA8IHZpZXcuaW5wdXQubGFzdEtleUNvZGVUaW1lKSB7XG4gICAgICAgIHByZWZlcnJlZFBvcyA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLnRvO1xuICAgICAgICBwcmVmZXJyZWRTaWRlID0gXCJlbmRcIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHByZWZlcnJlZFBvcyA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLmZyb207XG4gICAgICAgIHByZWZlcnJlZFNpZGUgPSBcInN0YXJ0XCI7XG4gICAgfVxuICAgIHZpZXcuaW5wdXQubGFzdEtleUNvZGUgPSBudWxsO1xuICAgIGxldCBjaGFuZ2UgPSBmaW5kRGlmZihjb21wYXJlLmNvbnRlbnQsIHBhcnNlLmRvYy5jb250ZW50LCBwYXJzZS5mcm9tLCBwcmVmZXJyZWRQb3MsIHByZWZlcnJlZFNpZGUpO1xuICAgIGlmIChjaGFuZ2UpXG4gICAgICAgIHZpZXcuaW5wdXQuZG9tQ2hhbmdlQ291bnQrKztcbiAgICBpZiAoKGlvcyAmJiB2aWV3LmlucHV0Lmxhc3RJT1NFbnRlciA+IERhdGUubm93KCkgLSAyMjUgfHwgYW5kcm9pZCkgJiZcbiAgICAgICAgYWRkZWROb2Rlcy5zb21lKG4gPT4gbi5ub2RlVHlwZSA9PSAxICYmICFpc0lubGluZS50ZXN0KG4ubm9kZU5hbWUpKSAmJlxuICAgICAgICAoIWNoYW5nZSB8fCBjaGFuZ2UuZW5kQSA+PSBjaGFuZ2UuZW5kQikgJiZcbiAgICAgICAgdmlldy5zb21lUHJvcChcImhhbmRsZUtleURvd25cIiwgZiA9PiBmKHZpZXcsIGtleUV2ZW50KDEzLCBcIkVudGVyXCIpKSkpIHtcbiAgICAgICAgdmlldy5pbnB1dC5sYXN0SU9TRW50ZXIgPSAwO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghY2hhbmdlKSB7XG4gICAgICAgIGlmICh0eXBlT3ZlciAmJiBzZWwgaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uICYmICFzZWwuZW1wdHkgJiYgc2VsLiRoZWFkLnNhbWVQYXJlbnQoc2VsLiRhbmNob3IpICYmXG4gICAgICAgICAgICAhdmlldy5jb21wb3NpbmcgJiYgIShwYXJzZS5zZWwgJiYgcGFyc2Uuc2VsLmFuY2hvciAhPSBwYXJzZS5zZWwuaGVhZCkpIHtcbiAgICAgICAgICAgIGNoYW5nZSA9IHsgc3RhcnQ6IHNlbC5mcm9tLCBlbmRBOiBzZWwudG8sIGVuZEI6IHNlbC50byB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHBhcnNlLnNlbCkge1xuICAgICAgICAgICAgICAgIGxldCBzZWwgPSByZXNvbHZlU2VsZWN0aW9uKHZpZXcsIHZpZXcuc3RhdGUuZG9jLCBwYXJzZS5zZWwpO1xuICAgICAgICAgICAgICAgIGlmIChzZWwgJiYgIXNlbC5lcSh2aWV3LnN0YXRlLnNlbGVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyID0gdmlldy5zdGF0ZS50ci5zZXRTZWxlY3Rpb24oc2VsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBvc2l0aW9uSUQpXG4gICAgICAgICAgICAgICAgICAgICAgICB0ci5zZXRNZXRhKFwiY29tcG9zaXRpb25cIiwgY29tcG9zaXRpb25JRCk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcuZGlzcGF0Y2godHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgb3ZlcndyaXRpbmcgYSBzZWxlY3Rpb24gYnkgdHlwaW5nIG1hdGNoZXNcbiAgICAvLyB0aGUgc3RhcnQgb3IgZW5kIG9mIHRoZSBzZWxlY3RlZCBjb250ZW50LCBjcmVhdGluZyBhIGNoYW5nZVxuICAgIC8vIHRoYXQncyBzbWFsbGVyIHRoYW4gd2hhdCB3YXMgYWN0dWFsbHkgb3ZlcndyaXR0ZW4uXG4gICAgaWYgKHZpZXcuc3RhdGUuc2VsZWN0aW9uLmZyb20gPCB2aWV3LnN0YXRlLnNlbGVjdGlvbi50byAmJlxuICAgICAgICBjaGFuZ2Uuc3RhcnQgPT0gY2hhbmdlLmVuZEIgJiZcbiAgICAgICAgdmlldy5zdGF0ZS5zZWxlY3Rpb24gaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uKSB7XG4gICAgICAgIGlmIChjaGFuZ2Uuc3RhcnQgPiB2aWV3LnN0YXRlLnNlbGVjdGlvbi5mcm9tICYmIGNoYW5nZS5zdGFydCA8PSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5mcm9tICsgMiAmJlxuICAgICAgICAgICAgdmlldy5zdGF0ZS5zZWxlY3Rpb24uZnJvbSA+PSBwYXJzZS5mcm9tKSB7XG4gICAgICAgICAgICBjaGFuZ2Uuc3RhcnQgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5mcm9tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoYW5nZS5lbmRBIDwgdmlldy5zdGF0ZS5zZWxlY3Rpb24udG8gJiYgY2hhbmdlLmVuZEEgPj0gdmlldy5zdGF0ZS5zZWxlY3Rpb24udG8gLSAyICYmXG4gICAgICAgICAgICB2aWV3LnN0YXRlLnNlbGVjdGlvbi50byA8PSBwYXJzZS50bykge1xuICAgICAgICAgICAgY2hhbmdlLmVuZEIgKz0gKHZpZXcuc3RhdGUuc2VsZWN0aW9uLnRvIC0gY2hhbmdlLmVuZEEpO1xuICAgICAgICAgICAgY2hhbmdlLmVuZEEgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi50bztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBJRTExIHdpbGwgaW5zZXJ0IGEgbm9uLWJyZWFraW5nIHNwYWNlIF9haGVhZF8gb2YgdGhlIHNwYWNlIGFmdGVyXG4gICAgLy8gdGhlIGN1cnNvciBzcGFjZSB3aGVuIGFkZGluZyBhIHNwYWNlIGJlZm9yZSBhbm90aGVyIHNwYWNlLiBXaGVuXG4gICAgLy8gdGhhdCBoYXBwZW5lZCwgYWRqdXN0IHRoZSBjaGFuZ2UgdG8gY292ZXIgdGhlIHNwYWNlIGluc3RlYWQuXG4gICAgaWYgKGllICYmIGllX3ZlcnNpb24gPD0gMTEgJiYgY2hhbmdlLmVuZEIgPT0gY2hhbmdlLnN0YXJ0ICsgMSAmJlxuICAgICAgICBjaGFuZ2UuZW5kQSA9PSBjaGFuZ2Uuc3RhcnQgJiYgY2hhbmdlLnN0YXJ0ID4gcGFyc2UuZnJvbSAmJlxuICAgICAgICBwYXJzZS5kb2MudGV4dEJldHdlZW4oY2hhbmdlLnN0YXJ0IC0gcGFyc2UuZnJvbSAtIDEsIGNoYW5nZS5zdGFydCAtIHBhcnNlLmZyb20gKyAxKSA9PSBcIiBcXHUwMGEwXCIpIHtcbiAgICAgICAgY2hhbmdlLnN0YXJ0LS07XG4gICAgICAgIGNoYW5nZS5lbmRBLS07XG4gICAgICAgIGNoYW5nZS5lbmRCLS07XG4gICAgfVxuICAgIGxldCAkZnJvbSA9IHBhcnNlLmRvYy5yZXNvbHZlTm9DYWNoZShjaGFuZ2Uuc3RhcnQgLSBwYXJzZS5mcm9tKTtcbiAgICBsZXQgJHRvID0gcGFyc2UuZG9jLnJlc29sdmVOb0NhY2hlKGNoYW5nZS5lbmRCIC0gcGFyc2UuZnJvbSk7XG4gICAgbGV0ICRmcm9tQSA9IGRvYy5yZXNvbHZlKGNoYW5nZS5zdGFydCk7XG4gICAgbGV0IGlubGluZUNoYW5nZSA9ICRmcm9tLnNhbWVQYXJlbnQoJHRvKSAmJiAkZnJvbS5wYXJlbnQuaW5saW5lQ29udGVudCAmJiAkZnJvbUEuZW5kKCkgPj0gY2hhbmdlLmVuZEE7XG4gICAgbGV0IG5leHRTZWw7XG4gICAgLy8gSWYgdGhpcyBsb29rcyBsaWtlIHRoZSBlZmZlY3Qgb2YgcHJlc3NpbmcgRW50ZXIgKG9yIHdhcyByZWNvcmRlZFxuICAgIC8vIGFzIGJlaW5nIGFuIGlPUyBlbnRlciBwcmVzcyksIGp1c3QgZGlzcGF0Y2ggYW4gRW50ZXIga2V5IGluc3RlYWQuXG4gICAgaWYgKCgoaW9zICYmIHZpZXcuaW5wdXQubGFzdElPU0VudGVyID4gRGF0ZS5ub3coKSAtIDIyNSAmJlxuICAgICAgICAoIWlubGluZUNoYW5nZSB8fCBhZGRlZE5vZGVzLnNvbWUobiA9PiBuLm5vZGVOYW1lID09IFwiRElWXCIgfHwgbi5ub2RlTmFtZSA9PSBcIlBcIikpKSB8fFxuICAgICAgICAoIWlubGluZUNoYW5nZSAmJiAkZnJvbS5wb3MgPCBwYXJzZS5kb2MuY29udGVudC5zaXplICYmXG4gICAgICAgICAgICAoISRmcm9tLnNhbWVQYXJlbnQoJHRvKSB8fCAhJGZyb20ucGFyZW50LmlubGluZUNvbnRlbnQpICYmXG4gICAgICAgICAgICAhL1xcUy8udGVzdChwYXJzZS5kb2MudGV4dEJldHdlZW4oJGZyb20ucG9zLCAkdG8ucG9zLCBcIlwiLCBcIlwiKSkgJiZcbiAgICAgICAgICAgIChuZXh0U2VsID0gU2VsZWN0aW9uLmZpbmRGcm9tKHBhcnNlLmRvYy5yZXNvbHZlKCRmcm9tLnBvcyArIDEpLCAxLCB0cnVlKSkgJiZcbiAgICAgICAgICAgIG5leHRTZWwuaGVhZCA+ICRmcm9tLnBvcykpICYmXG4gICAgICAgIHZpZXcuc29tZVByb3AoXCJoYW5kbGVLZXlEb3duXCIsIGYgPT4gZih2aWV3LCBrZXlFdmVudCgxMywgXCJFbnRlclwiKSkpKSB7XG4gICAgICAgIHZpZXcuaW5wdXQubGFzdElPU0VudGVyID0gMDtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBTYW1lIGZvciBiYWNrc3BhY2VcbiAgICBpZiAodmlldy5zdGF0ZS5zZWxlY3Rpb24uYW5jaG9yID4gY2hhbmdlLnN0YXJ0ICYmXG4gICAgICAgIGxvb2tzTGlrZUJhY2tzcGFjZShkb2MsIGNoYW5nZS5zdGFydCwgY2hhbmdlLmVuZEEsICRmcm9tLCAkdG8pICYmXG4gICAgICAgIHZpZXcuc29tZVByb3AoXCJoYW5kbGVLZXlEb3duXCIsIGYgPT4gZih2aWV3LCBrZXlFdmVudCg4LCBcIkJhY2tzcGFjZVwiKSkpKSB7XG4gICAgICAgIGlmIChhbmRyb2lkICYmIGNocm9tZSlcbiAgICAgICAgICAgIHZpZXcuZG9tT2JzZXJ2ZXIuc3VwcHJlc3NTZWxlY3Rpb25VcGRhdGVzKCk7IC8vICM4MjBcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDaHJvbWUgd2lsbCBvY2Nhc2lvbmFsbHksIGR1cmluZyBjb21wb3NpdGlvbiwgZGVsZXRlIHRoZVxuICAgIC8vIGVudGlyZSBjb21wb3NpdGlvbiBhbmQgdGhlbiBpbW1lZGlhdGVseSBpbnNlcnQgaXQgYWdhaW4uIFRoaXMgaXNcbiAgICAvLyB1c2VkIHRvIGRldGVjdCB0aGF0IHNpdHVhdGlvbi5cbiAgICBpZiAoY2hyb21lICYmIGNoYW5nZS5lbmRCID09IGNoYW5nZS5zdGFydClcbiAgICAgICAgdmlldy5pbnB1dC5sYXN0Q2hyb21lRGVsZXRlID0gRGF0ZS5ub3coKTtcbiAgICAvLyBUaGlzIHRyaWVzIHRvIGRldGVjdCBBbmRyb2lkIHZpcnR1YWwga2V5Ym9hcmRcbiAgICAvLyBlbnRlci1hbmQtcGljay1zdWdnZXN0aW9uIGFjdGlvbi4gVGhhdCBzb21ldGltZXMgKHNlZSBpc3N1ZVxuICAgIC8vICMxMDU5KSBmaXJzdCBmaXJlcyBhIERPTSBtdXRhdGlvbiwgYmVmb3JlIG1vdmluZyB0aGUgc2VsZWN0aW9uIHRvXG4gICAgLy8gdGhlIG5ld2x5IGNyZWF0ZWQgYmxvY2suIEFuZCB0aGVuLCBiZWNhdXNlIFByb3NlTWlycm9yIGNsZWFucyB1cFxuICAgIC8vIHRoZSBET00gc2VsZWN0aW9uLCBpdCBnaXZlcyB1cCBtb3ZpbmcgdGhlIHNlbGVjdGlvbiBlbnRpcmVseSxcbiAgICAvLyBsZWF2aW5nIHRoZSBjdXJzb3IgaW4gdGhlIHdyb25nIHBsYWNlLiBXaGVuIHRoYXQgaGFwcGVucywgd2UgZHJvcFxuICAgIC8vIHRoZSBuZXcgcGFyYWdyYXBoIGZyb20gdGhlIGluaXRpYWwgY2hhbmdlLCBhbmQgZmlyZSBhIHNpbXVsYXRlZFxuICAgIC8vIGVudGVyIGtleSBhZnRlcndhcmRzLlxuICAgIGlmIChhbmRyb2lkICYmICFpbmxpbmVDaGFuZ2UgJiYgJGZyb20uc3RhcnQoKSAhPSAkdG8uc3RhcnQoKSAmJiAkdG8ucGFyZW50T2Zmc2V0ID09IDAgJiYgJGZyb20uZGVwdGggPT0gJHRvLmRlcHRoICYmXG4gICAgICAgIHBhcnNlLnNlbCAmJiBwYXJzZS5zZWwuYW5jaG9yID09IHBhcnNlLnNlbC5oZWFkICYmIHBhcnNlLnNlbC5oZWFkID09IGNoYW5nZS5lbmRBKSB7XG4gICAgICAgIGNoYW5nZS5lbmRCIC09IDI7XG4gICAgICAgICR0byA9IHBhcnNlLmRvYy5yZXNvbHZlTm9DYWNoZShjaGFuZ2UuZW5kQiAtIHBhcnNlLmZyb20pO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHZpZXcuc29tZVByb3AoXCJoYW5kbGVLZXlEb3duXCIsIGZ1bmN0aW9uIChmKSB7IHJldHVybiBmKHZpZXcsIGtleUV2ZW50KDEzLCBcIkVudGVyXCIpKTsgfSk7XG4gICAgICAgIH0sIDIwKTtcbiAgICB9XG4gICAgbGV0IGNoRnJvbSA9IGNoYW5nZS5zdGFydCwgY2hUbyA9IGNoYW5nZS5lbmRBO1xuICAgIGxldCB0ciwgc3RvcmVkTWFya3MsIG1hcmtDaGFuZ2U7XG4gICAgaWYgKGlubGluZUNoYW5nZSkge1xuICAgICAgICBpZiAoJGZyb20ucG9zID09ICR0by5wb3MpIHsgLy8gRGVsZXRpb25cbiAgICAgICAgICAgIC8vIElFMTEgc29tZXRpbWVzIHdlaXJkbHkgbW92ZXMgdGhlIERPTSBzZWxlY3Rpb24gYXJvdW5kIGFmdGVyXG4gICAgICAgICAgICAvLyBiYWNrc3BhY2luZyBvdXQgdGhlIGZpcnN0IGVsZW1lbnQgaW4gYSB0ZXh0YmxvY2tcbiAgICAgICAgICAgIGlmIChpZSAmJiBpZV92ZXJzaW9uIDw9IDExICYmICRmcm9tLnBhcmVudE9mZnNldCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdmlldy5kb21PYnNlcnZlci5zdXBwcmVzc1NlbGVjdGlvblVwZGF0ZXMoKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHNlbGVjdGlvblRvRE9NKHZpZXcpLCAyMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ciA9IHZpZXcuc3RhdGUudHIuZGVsZXRlKGNoRnJvbSwgY2hUbyk7XG4gICAgICAgICAgICBzdG9yZWRNYXJrcyA9IGRvYy5yZXNvbHZlKGNoYW5nZS5zdGFydCkubWFya3NBY3Jvc3MoZG9jLnJlc29sdmUoY2hhbmdlLmVuZEEpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICggLy8gQWRkaW5nIG9yIHJlbW92aW5nIGEgbWFya1xuICAgICAgICBjaGFuZ2UuZW5kQSA9PSBjaGFuZ2UuZW5kQiAmJlxuICAgICAgICAgICAgKG1hcmtDaGFuZ2UgPSBpc01hcmtDaGFuZ2UoJGZyb20ucGFyZW50LmNvbnRlbnQuY3V0KCRmcm9tLnBhcmVudE9mZnNldCwgJHRvLnBhcmVudE9mZnNldCksICRmcm9tQS5wYXJlbnQuY29udGVudC5jdXQoJGZyb21BLnBhcmVudE9mZnNldCwgY2hhbmdlLmVuZEEgLSAkZnJvbUEuc3RhcnQoKSkpKSkge1xuICAgICAgICAgICAgdHIgPSB2aWV3LnN0YXRlLnRyO1xuICAgICAgICAgICAgaWYgKG1hcmtDaGFuZ2UudHlwZSA9PSBcImFkZFwiKVxuICAgICAgICAgICAgICAgIHRyLmFkZE1hcmsoY2hGcm9tLCBjaFRvLCBtYXJrQ2hhbmdlLm1hcmspO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRyLnJlbW92ZU1hcmsoY2hGcm9tLCBjaFRvLCBtYXJrQ2hhbmdlLm1hcmspO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCRmcm9tLnBhcmVudC5jaGlsZCgkZnJvbS5pbmRleCgpKS5pc1RleHQgJiYgJGZyb20uaW5kZXgoKSA9PSAkdG8uaW5kZXgoKSAtICgkdG8udGV4dE9mZnNldCA/IDAgOiAxKSkge1xuICAgICAgICAgICAgLy8gQm90aCBwb3NpdGlvbnMgaW4gdGhlIHNhbWUgdGV4dCBub2RlIC0tIHNpbXBseSBpbnNlcnQgdGV4dFxuICAgICAgICAgICAgbGV0IHRleHQgPSAkZnJvbS5wYXJlbnQudGV4dEJldHdlZW4oJGZyb20ucGFyZW50T2Zmc2V0LCAkdG8ucGFyZW50T2Zmc2V0KTtcbiAgICAgICAgICAgIGlmICh2aWV3LnNvbWVQcm9wKFwiaGFuZGxlVGV4dElucHV0XCIsIGYgPT4gZih2aWV3LCBjaEZyb20sIGNoVG8sIHRleHQpKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0ciA9IHZpZXcuc3RhdGUudHIuaW5zZXJ0VGV4dCh0ZXh0LCBjaEZyb20sIGNoVG8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghdHIpXG4gICAgICAgIHRyID0gdmlldy5zdGF0ZS50ci5yZXBsYWNlKGNoRnJvbSwgY2hUbywgcGFyc2UuZG9jLnNsaWNlKGNoYW5nZS5zdGFydCAtIHBhcnNlLmZyb20sIGNoYW5nZS5lbmRCIC0gcGFyc2UuZnJvbSkpO1xuICAgIGlmIChwYXJzZS5zZWwpIHtcbiAgICAgICAgbGV0IHNlbCA9IHJlc29sdmVTZWxlY3Rpb24odmlldywgdHIuZG9jLCBwYXJzZS5zZWwpO1xuICAgICAgICAvLyBDaHJvbWUgd2lsbCBzb21ldGltZXMsIGR1cmluZyBjb21wb3NpdGlvbiwgcmVwb3J0IHRoZVxuICAgICAgICAvLyBzZWxlY3Rpb24gaW4gdGhlIHdyb25nIHBsYWNlLiBJZiBpdCBsb29rcyBsaWtlIHRoYXQgaXNcbiAgICAgICAgLy8gaGFwcGVuaW5nLCBkb24ndCB1cGRhdGUgdGhlIHNlbGVjdGlvbi5cbiAgICAgICAgLy8gRWRnZSBqdXN0IGRvZXNuJ3QgbW92ZSB0aGUgY3Vyc29yIGZvcndhcmQgd2hlbiB5b3Ugc3RhcnQgdHlwaW5nXG4gICAgICAgIC8vIGluIGFuIGVtcHR5IGJsb2NrIG9yIGJldHdlZW4gYnIgbm9kZXMuXG4gICAgICAgIGlmIChzZWwgJiYgIShjaHJvbWUgJiYgdmlldy5jb21wb3NpbmcgJiYgc2VsLmVtcHR5ICYmXG4gICAgICAgICAgICAoY2hhbmdlLnN0YXJ0ICE9IGNoYW5nZS5lbmRCIHx8IHZpZXcuaW5wdXQubGFzdENocm9tZURlbGV0ZSA8IERhdGUubm93KCkgLSAxMDApICYmXG4gICAgICAgICAgICAoc2VsLmhlYWQgPT0gY2hGcm9tIHx8IHNlbC5oZWFkID09IHRyLm1hcHBpbmcubWFwKGNoVG8pIC0gMSkgfHxcbiAgICAgICAgICAgIGllICYmIHNlbC5lbXB0eSAmJiBzZWwuaGVhZCA9PSBjaEZyb20pKVxuICAgICAgICAgICAgdHIuc2V0U2VsZWN0aW9uKHNlbCk7XG4gICAgfVxuICAgIGlmIChzdG9yZWRNYXJrcylcbiAgICAgICAgdHIuZW5zdXJlTWFya3Moc3RvcmVkTWFya3MpO1xuICAgIGlmIChjb21wb3NpdGlvbklEKVxuICAgICAgICB0ci5zZXRNZXRhKFwiY29tcG9zaXRpb25cIiwgY29tcG9zaXRpb25JRCk7XG4gICAgdmlldy5kaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVTZWxlY3Rpb24odmlldywgZG9jLCBwYXJzZWRTZWwpIHtcbiAgICBpZiAoTWF0aC5tYXgocGFyc2VkU2VsLmFuY2hvciwgcGFyc2VkU2VsLmhlYWQpID4gZG9jLmNvbnRlbnQuc2l6ZSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHNlbGVjdGlvbkJldHdlZW4odmlldywgZG9jLnJlc29sdmUocGFyc2VkU2VsLmFuY2hvciksIGRvYy5yZXNvbHZlKHBhcnNlZFNlbC5oZWFkKSk7XG59XG4vLyBHaXZlbiB0d28gc2FtZS1sZW5ndGgsIG5vbi1lbXB0eSBmcmFnbWVudHMgb2YgaW5saW5lIGNvbnRlbnQsXG4vLyBkZXRlcm1pbmUgd2hldGhlciB0aGUgZmlyc3QgY291bGQgYmUgY3JlYXRlZCBmcm9tIHRoZSBzZWNvbmQgYnlcbi8vIHJlbW92aW5nIG9yIGFkZGluZyBhIHNpbmdsZSBtYXJrIHR5cGUuXG5mdW5jdGlvbiBpc01hcmtDaGFuZ2UoY3VyLCBwcmV2KSB7XG4gICAgbGV0IGN1ck1hcmtzID0gY3VyLmZpcnN0Q2hpbGQubWFya3MsIHByZXZNYXJrcyA9IHByZXYuZmlyc3RDaGlsZC5tYXJrcztcbiAgICBsZXQgYWRkZWQgPSBjdXJNYXJrcywgcmVtb3ZlZCA9IHByZXZNYXJrcywgdHlwZSwgbWFyaywgdXBkYXRlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldk1hcmtzLmxlbmd0aDsgaSsrKVxuICAgICAgICBhZGRlZCA9IHByZXZNYXJrc1tpXS5yZW1vdmVGcm9tU2V0KGFkZGVkKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1ck1hcmtzLmxlbmd0aDsgaSsrKVxuICAgICAgICByZW1vdmVkID0gY3VyTWFya3NbaV0ucmVtb3ZlRnJvbVNldChyZW1vdmVkKTtcbiAgICBpZiAoYWRkZWQubGVuZ3RoID09IDEgJiYgcmVtb3ZlZC5sZW5ndGggPT0gMCkge1xuICAgICAgICBtYXJrID0gYWRkZWRbMF07XG4gICAgICAgIHR5cGUgPSBcImFkZFwiO1xuICAgICAgICB1cGRhdGUgPSAobm9kZSkgPT4gbm9kZS5tYXJrKG1hcmsuYWRkVG9TZXQobm9kZS5tYXJrcykpO1xuICAgIH1cbiAgICBlbHNlIGlmIChhZGRlZC5sZW5ndGggPT0gMCAmJiByZW1vdmVkLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIG1hcmsgPSByZW1vdmVkWzBdO1xuICAgICAgICB0eXBlID0gXCJyZW1vdmVcIjtcbiAgICAgICAgdXBkYXRlID0gKG5vZGUpID0+IG5vZGUubWFyayhtYXJrLnJlbW92ZUZyb21TZXQobm9kZS5tYXJrcykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCB1cGRhdGVkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2LmNoaWxkQ291bnQ7IGkrKylcbiAgICAgICAgdXBkYXRlZC5wdXNoKHVwZGF0ZShwcmV2LmNoaWxkKGkpKSk7XG4gICAgaWYgKEZyYWdtZW50LmZyb20odXBkYXRlZCkuZXEoY3VyKSlcbiAgICAgICAgcmV0dXJuIHsgbWFyaywgdHlwZSB9O1xufVxuZnVuY3Rpb24gbG9va3NMaWtlQmFja3NwYWNlKG9sZCwgc3RhcnQsIGVuZCwgJG5ld1N0YXJ0LCAkbmV3RW5kKSB7XG4gICAgaWYgKCAvLyBUaGUgY29udGVudCBtdXN0IGhhdmUgc2hydW5rXG4gICAgZW5kIC0gc3RhcnQgPD0gJG5ld0VuZC5wb3MgLSAkbmV3U3RhcnQucG9zIHx8XG4gICAgICAgIC8vIG5ld0VuZCBtdXN0IHBvaW50IGRpcmVjdGx5IGF0IG9yIGFmdGVyIHRoZSBlbmQgb2YgdGhlIGJsb2NrIHRoYXQgbmV3U3RhcnQgcG9pbnRzIGludG9cbiAgICAgICAgc2tpcENsb3NpbmdBbmRPcGVuaW5nKCRuZXdTdGFydCwgdHJ1ZSwgZmFsc2UpIDwgJG5ld0VuZC5wb3MpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgJHN0YXJ0ID0gb2xkLnJlc29sdmUoc3RhcnQpO1xuICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSwgcmF0aGVyIHRoYW4gam9pbmluZyBibG9ja3MsIHRoZSBjaGFuZ2UganVzdCByZW1vdmVkIGFuIGVudGlyZSBibG9ja1xuICAgIGlmICghJG5ld1N0YXJ0LnBhcmVudC5pc1RleHRibG9jaykge1xuICAgICAgICBsZXQgYWZ0ZXIgPSAkc3RhcnQubm9kZUFmdGVyO1xuICAgICAgICByZXR1cm4gYWZ0ZXIgIT0gbnVsbCAmJiBlbmQgPT0gc3RhcnQgKyBhZnRlci5ub2RlU2l6ZTtcbiAgICB9XG4gICAgLy8gU3RhcnQgbXVzdCBiZSBhdCB0aGUgZW5kIG9mIGEgYmxvY2tcbiAgICBpZiAoJHN0YXJ0LnBhcmVudE9mZnNldCA8ICRzdGFydC5wYXJlbnQuY29udGVudC5zaXplIHx8ICEkc3RhcnQucGFyZW50LmlzVGV4dGJsb2NrKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0ICRuZXh0ID0gb2xkLnJlc29sdmUoc2tpcENsb3NpbmdBbmRPcGVuaW5nKCRzdGFydCwgdHJ1ZSwgdHJ1ZSkpO1xuICAgIC8vIFRoZSBuZXh0IHRleHRibG9jayBtdXN0IHN0YXJ0IGJlZm9yZSBlbmQgYW5kIGVuZCBuZWFyIGl0XG4gICAgaWYgKCEkbmV4dC5wYXJlbnQuaXNUZXh0YmxvY2sgfHwgJG5leHQucG9zID4gZW5kIHx8XG4gICAgICAgIHNraXBDbG9zaW5nQW5kT3BlbmluZygkbmV4dCwgdHJ1ZSwgZmFsc2UpIDwgZW5kKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgLy8gVGhlIGZyYWdtZW50cyBhZnRlciB0aGUgam9pbiBwb2ludCBtdXN0IG1hdGNoXG4gICAgcmV0dXJuICRuZXdTdGFydC5wYXJlbnQuY29udGVudC5jdXQoJG5ld1N0YXJ0LnBhcmVudE9mZnNldCkuZXEoJG5leHQucGFyZW50LmNvbnRlbnQpO1xufVxuZnVuY3Rpb24gc2tpcENsb3NpbmdBbmRPcGVuaW5nKCRwb3MsIGZyb21FbmQsIG1heU9wZW4pIHtcbiAgICBsZXQgZGVwdGggPSAkcG9zLmRlcHRoLCBlbmQgPSBmcm9tRW5kID8gJHBvcy5lbmQoKSA6ICRwb3MucG9zO1xuICAgIHdoaWxlIChkZXB0aCA+IDAgJiYgKGZyb21FbmQgfHwgJHBvcy5pbmRleEFmdGVyKGRlcHRoKSA9PSAkcG9zLm5vZGUoZGVwdGgpLmNoaWxkQ291bnQpKSB7XG4gICAgICAgIGRlcHRoLS07XG4gICAgICAgIGVuZCsrO1xuICAgICAgICBmcm9tRW5kID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChtYXlPcGVuKSB7XG4gICAgICAgIGxldCBuZXh0ID0gJHBvcy5ub2RlKGRlcHRoKS5tYXliZUNoaWxkKCRwb3MuaW5kZXhBZnRlcihkZXB0aCkpO1xuICAgICAgICB3aGlsZSAobmV4dCAmJiAhbmV4dC5pc0xlYWYpIHtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0LmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBlbmQrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kO1xufVxuZnVuY3Rpb24gZmluZERpZmYoYSwgYiwgcG9zLCBwcmVmZXJyZWRQb3MsIHByZWZlcnJlZFNpZGUpIHtcbiAgICBsZXQgc3RhcnQgPSBhLmZpbmREaWZmU3RhcnQoYiwgcG9zKTtcbiAgICBpZiAoc3RhcnQgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IHsgYTogZW5kQSwgYjogZW5kQiB9ID0gYS5maW5kRGlmZkVuZChiLCBwb3MgKyBhLnNpemUsIHBvcyArIGIuc2l6ZSk7XG4gICAgaWYgKHByZWZlcnJlZFNpZGUgPT0gXCJlbmRcIikge1xuICAgICAgICBsZXQgYWRqdXN0ID0gTWF0aC5tYXgoMCwgc3RhcnQgLSBNYXRoLm1pbihlbmRBLCBlbmRCKSk7XG4gICAgICAgIHByZWZlcnJlZFBvcyAtPSBlbmRBICsgYWRqdXN0IC0gc3RhcnQ7XG4gICAgfVxuICAgIGlmIChlbmRBIDwgc3RhcnQgJiYgYS5zaXplIDwgYi5zaXplKSB7XG4gICAgICAgIGxldCBtb3ZlID0gcHJlZmVycmVkUG9zIDw9IHN0YXJ0ICYmIHByZWZlcnJlZFBvcyA+PSBlbmRBID8gc3RhcnQgLSBwcmVmZXJyZWRQb3MgOiAwO1xuICAgICAgICBzdGFydCAtPSBtb3ZlO1xuICAgICAgICBpZiAoc3RhcnQgJiYgc3RhcnQgPCBiLnNpemUgJiYgaXNTdXJyb2dhdGVQYWlyKGIudGV4dEJldHdlZW4oc3RhcnQgLSAxLCBzdGFydCArIDEpKSlcbiAgICAgICAgICAgIHN0YXJ0ICs9IG1vdmUgPyAxIDogLTE7XG4gICAgICAgIGVuZEIgPSBzdGFydCArIChlbmRCIC0gZW5kQSk7XG4gICAgICAgIGVuZEEgPSBzdGFydDtcbiAgICB9XG4gICAgZWxzZSBpZiAoZW5kQiA8IHN0YXJ0KSB7XG4gICAgICAgIGxldCBtb3ZlID0gcHJlZmVycmVkUG9zIDw9IHN0YXJ0ICYmIHByZWZlcnJlZFBvcyA+PSBlbmRCID8gc3RhcnQgLSBwcmVmZXJyZWRQb3MgOiAwO1xuICAgICAgICBzdGFydCAtPSBtb3ZlO1xuICAgICAgICBpZiAoc3RhcnQgJiYgc3RhcnQgPCBhLnNpemUgJiYgaXNTdXJyb2dhdGVQYWlyKGEudGV4dEJldHdlZW4oc3RhcnQgLSAxLCBzdGFydCArIDEpKSlcbiAgICAgICAgICAgIHN0YXJ0ICs9IG1vdmUgPyAxIDogLTE7XG4gICAgICAgIGVuZEEgPSBzdGFydCArIChlbmRBIC0gZW5kQik7XG4gICAgICAgIGVuZEIgPSBzdGFydDtcbiAgICB9XG4gICAgcmV0dXJuIHsgc3RhcnQsIGVuZEEsIGVuZEIgfTtcbn1cbmZ1bmN0aW9uIGlzU3Vycm9nYXRlUGFpcihzdHIpIHtcbiAgICBpZiAoc3RyLmxlbmd0aCAhPSAyKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGEgPSBzdHIuY2hhckNvZGVBdCgwKSwgYiA9IHN0ci5jaGFyQ29kZUF0KDEpO1xuICAgIHJldHVybiBhID49IDB4REMwMCAmJiBhIDw9IDB4REZGRiAmJiBiID49IDB4RDgwMCAmJiBiIDw9IDB4REJGRjtcbn1cblxuLyoqXG5AaW50ZXJuYWxcbiovXG5jb25zdCBfX3BhcnNlRnJvbUNsaXBib2FyZCA9IHBhcnNlRnJvbUNsaXBib2FyZDtcbi8qKlxuQGludGVybmFsXG4qL1xuY29uc3QgX19lbmRDb21wb3NpdGlvbiA9IGVuZENvbXBvc2l0aW9uO1xuLyoqXG5BbiBlZGl0b3IgdmlldyBtYW5hZ2VzIHRoZSBET00gc3RydWN0dXJlIHRoYXQgcmVwcmVzZW50cyBhblxuZWRpdGFibGUgZG9jdW1lbnQuIEl0cyBzdGF0ZSBhbmQgYmVoYXZpb3IgYXJlIGRldGVybWluZWQgYnkgaXRzXG5bcHJvcHNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkRpcmVjdEVkaXRvclByb3BzKS5cbiovXG5jbGFzcyBFZGl0b3JWaWV3IHtcbiAgICAvKipcbiAgICBDcmVhdGUgYSB2aWV3LiBgcGxhY2VgIG1heSBiZSBhIERPTSBub2RlIHRoYXQgdGhlIGVkaXRvciBzaG91bGRcbiAgICBiZSBhcHBlbmRlZCB0bywgYSBmdW5jdGlvbiB0aGF0IHdpbGwgcGxhY2UgaXQgaW50byB0aGUgZG9jdW1lbnQsXG4gICAgb3IgYW4gb2JqZWN0IHdob3NlIGBtb3VudGAgcHJvcGVydHkgaG9sZHMgdGhlIG5vZGUgdG8gdXNlIGFzIHRoZVxuICAgIGRvY3VtZW50IGNvbnRhaW5lci4gSWYgaXQgaXMgYG51bGxgLCB0aGUgZWRpdG9yIHdpbGwgbm90IGJlXG4gICAgYWRkZWQgdG8gdGhlIGRvY3VtZW50LlxuICAgICovXG4gICAgY29uc3RydWN0b3IocGxhY2UsIHByb3BzKSB7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMuZm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgS2x1ZGdlIHVzZWQgdG8gd29yayBhcm91bmQgYSBDaHJvbWUgYnVnIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLnRyYWNrV3JpdGVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tYXJrQ3Vyc29yID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLmN1cnNvcldyYXBwZXIgPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMubGFzdFNlbGVjdGVkVmlld0Rlc2MgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbnB1dCA9IG5ldyBJbnB1dFN0YXRlO1xuICAgICAgICB0aGlzLnByZXZEaXJlY3RQbHVnaW5zID0gW107XG4gICAgICAgIHRoaXMucGx1Z2luVmlld3MgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgIEhvbGRzIGB0cnVlYCB3aGVuIGEgaGFjayBub2RlIGlzIG5lZWRlZCBpbiBGaXJlZm94IHRvIHByZXZlbnQgdGhlXG4gICAgICAgIFtzcGFjZSBpcyBlYXRlbiBpc3N1ZV0oaHR0cHM6Ly9naXRodWIuY29tL1Byb3NlTWlycm9yL3Byb3NlbWlycm9yL2lzc3Vlcy82NTEpXG4gICAgICAgIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlcXVpcmVzR2Vja29IYWNrTm9kZSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgV2hlbiBlZGl0b3IgY29udGVudCBpcyBiZWluZyBkcmFnZ2VkLCB0aGlzIG9iamVjdCBjb250YWluc1xuICAgICAgICBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZHJhZ2dlZCBzbGljZSBhbmQgd2hldGhlciBpdCBpcyBiZWluZ1xuICAgICAgICBjb3BpZWQgb3IgbW92ZWQuIEF0IGFueSBvdGhlciB0aW1lLCBpdCBpcyBudWxsLlxuICAgICAgICAqL1xuICAgICAgICB0aGlzLmRyYWdnaW5nID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHByb3BzLnN0YXRlO1xuICAgICAgICB0aGlzLmRpcmVjdFBsdWdpbnMgPSBwcm9wcy5wbHVnaW5zIHx8IFtdO1xuICAgICAgICB0aGlzLmRpcmVjdFBsdWdpbnMuZm9yRWFjaChjaGVja1N0YXRlQ29tcG9uZW50KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCA9IHRoaXMuZGlzcGF0Y2guYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5kb20gPSAocGxhY2UgJiYgcGxhY2UubW91bnQpIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGlmIChwbGFjZSkge1xuICAgICAgICAgICAgaWYgKHBsYWNlLmFwcGVuZENoaWxkKVxuICAgICAgICAgICAgICAgIHBsYWNlLmFwcGVuZENoaWxkKHRoaXMuZG9tKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBwbGFjZSA9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgcGxhY2UodGhpcy5kb20pO1xuICAgICAgICAgICAgZWxzZSBpZiAocGxhY2UubW91bnQpXG4gICAgICAgICAgICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVkaXRhYmxlID0gZ2V0RWRpdGFibGUodGhpcyk7XG4gICAgICAgIHVwZGF0ZUN1cnNvcldyYXBwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubm9kZVZpZXdzID0gYnVpbGROb2RlVmlld3ModGhpcyk7XG4gICAgICAgIHRoaXMuZG9jVmlldyA9IGRvY1ZpZXdEZXNjKHRoaXMuc3RhdGUuZG9jLCBjb21wdXRlRG9jRGVjbyh0aGlzKSwgdmlld0RlY29yYXRpb25zKHRoaXMpLCB0aGlzLmRvbSwgdGhpcyk7XG4gICAgICAgIHRoaXMuZG9tT2JzZXJ2ZXIgPSBuZXcgRE9NT2JzZXJ2ZXIodGhpcywgKGZyb20sIHRvLCB0eXBlT3ZlciwgYWRkZWQpID0+IHJlYWRET01DaGFuZ2UodGhpcywgZnJvbSwgdG8sIHR5cGVPdmVyLCBhZGRlZCkpO1xuICAgICAgICB0aGlzLmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gICAgICAgIGluaXRJbnB1dCh0aGlzKTtcbiAgICAgICAgdGhpcy51cGRhdGVQbHVnaW5WaWV3cygpO1xuICAgIH1cbiAgICAvKipcbiAgICBIb2xkcyBgdHJ1ZWAgd2hlbiBhXG4gICAgW2NvbXBvc2l0aW9uXShodHRwczovL3czYy5naXRodWIuaW8vdWlldmVudHMvI2V2ZW50cy1jb21wb3NpdGlvbmV2ZW50cylcbiAgICBpcyBhY3RpdmUuXG4gICAgKi9cbiAgICBnZXQgY29tcG9zaW5nKCkgeyByZXR1cm4gdGhpcy5pbnB1dC5jb21wb3Npbmc7IH1cbiAgICAvKipcbiAgICBUaGUgdmlldydzIGN1cnJlbnQgW3Byb3BzXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdmlldy5FZGl0b3JQcm9wcykuXG4gICAgKi9cbiAgICBnZXQgcHJvcHMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wcm9wcy5zdGF0ZSAhPSB0aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICBsZXQgcHJldiA9IHRoaXMuX3Byb3BzO1xuICAgICAgICAgICAgdGhpcy5fcHJvcHMgPSB7fTtcbiAgICAgICAgICAgIGZvciAobGV0IG5hbWUgaW4gcHJldilcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9wc1tuYW1lXSA9IHByZXZbbmFtZV07XG4gICAgICAgICAgICB0aGlzLl9wcm9wcy5zdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3BzO1xuICAgIH1cbiAgICAvKipcbiAgICBVcGRhdGUgdGhlIHZpZXcncyBwcm9wcy4gV2lsbCBpbW1lZGlhdGVseSBjYXVzZSBhbiB1cGRhdGUgdG9cbiAgICB0aGUgRE9NLlxuICAgICovXG4gICAgdXBkYXRlKHByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcy5oYW5kbGVET01FdmVudHMgIT0gdGhpcy5fcHJvcHMuaGFuZGxlRE9NRXZlbnRzKVxuICAgICAgICAgICAgZW5zdXJlTGlzdGVuZXJzKHRoaXMpO1xuICAgICAgICBsZXQgcHJldlByb3BzID0gdGhpcy5fcHJvcHM7XG4gICAgICAgIHRoaXMuX3Byb3BzID0gcHJvcHM7XG4gICAgICAgIGlmIChwcm9wcy5wbHVnaW5zKSB7XG4gICAgICAgICAgICBwcm9wcy5wbHVnaW5zLmZvckVhY2goY2hlY2tTdGF0ZUNvbXBvbmVudCk7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdFBsdWdpbnMgPSBwcm9wcy5wbHVnaW5zO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGVJbm5lcihwcm9wcy5zdGF0ZSwgcHJldlByb3BzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVXBkYXRlIHRoZSB2aWV3IGJ5IHVwZGF0aW5nIGV4aXN0aW5nIHByb3BzIG9iamVjdCB3aXRoIHRoZSBvYmplY3RcbiAgICBnaXZlbiBhcyBhcmd1bWVudC4gRXF1aXZhbGVudCB0byBgdmlldy51cGRhdGUoT2JqZWN0LmFzc2lnbih7fSxcbiAgICB2aWV3LnByb3BzLCBwcm9wcykpYC5cbiAgICAqL1xuICAgIHNldFByb3BzKHByb3BzKSB7XG4gICAgICAgIGxldCB1cGRhdGVkID0ge307XG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gdGhpcy5fcHJvcHMpXG4gICAgICAgICAgICB1cGRhdGVkW25hbWVdID0gdGhpcy5fcHJvcHNbbmFtZV07XG4gICAgICAgIHVwZGF0ZWQuc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICBmb3IgKGxldCBuYW1lIGluIHByb3BzKVxuICAgICAgICAgICAgdXBkYXRlZFtuYW1lXSA9IHByb3BzW25hbWVdO1xuICAgICAgICB0aGlzLnVwZGF0ZSh1cGRhdGVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVXBkYXRlIHRoZSBlZGl0b3IncyBgc3RhdGVgIHByb3AsIHdpdGhvdXQgdG91Y2hpbmcgYW55IG9mIHRoZVxuICAgIG90aGVyIHByb3BzLlxuICAgICovXG4gICAgdXBkYXRlU3RhdGUoc3RhdGUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVTdGF0ZUlubmVyKHN0YXRlLCB0aGlzLl9wcm9wcyk7XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlSW5uZXIoc3RhdGUsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGxldCBwcmV2ID0gdGhpcy5zdGF0ZSwgcmVkcmF3ID0gZmFsc2UsIHVwZGF0ZVNlbCA9IGZhbHNlO1xuICAgICAgICAvLyBXaGVuIHN0b3JlZCBtYXJrcyBhcmUgYWRkZWQsIHN0b3AgY29tcG9zaXRpb24sIHNvIHRoYXQgdGhleSBjYW5cbiAgICAgICAgLy8gYmUgZGlzcGxheWVkLlxuICAgICAgICBpZiAoc3RhdGUuc3RvcmVkTWFya3MgJiYgdGhpcy5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgIGNsZWFyQ29tcG9zaXRpb24odGhpcyk7XG4gICAgICAgICAgICB1cGRhdGVTZWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgbGV0IHBsdWdpbnNDaGFuZ2VkID0gcHJldi5wbHVnaW5zICE9IHN0YXRlLnBsdWdpbnMgfHwgdGhpcy5fcHJvcHMucGx1Z2lucyAhPSBwcmV2UHJvcHMucGx1Z2lucztcbiAgICAgICAgaWYgKHBsdWdpbnNDaGFuZ2VkIHx8IHRoaXMuX3Byb3BzLnBsdWdpbnMgIT0gcHJldlByb3BzLnBsdWdpbnMgfHwgdGhpcy5fcHJvcHMubm9kZVZpZXdzICE9IHByZXZQcm9wcy5ub2RlVmlld3MpIHtcbiAgICAgICAgICAgIGxldCBub2RlVmlld3MgPSBidWlsZE5vZGVWaWV3cyh0aGlzKTtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VkTm9kZVZpZXdzKG5vZGVWaWV3cywgdGhpcy5ub2RlVmlld3MpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlVmlld3MgPSBub2RlVmlld3M7XG4gICAgICAgICAgICAgICAgcmVkcmF3ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGx1Z2luc0NoYW5nZWQgfHwgcHJldlByb3BzLmhhbmRsZURPTUV2ZW50cyAhPSB0aGlzLl9wcm9wcy5oYW5kbGVET01FdmVudHMpIHtcbiAgICAgICAgICAgIGVuc3VyZUxpc3RlbmVycyh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVkaXRhYmxlID0gZ2V0RWRpdGFibGUodGhpcyk7XG4gICAgICAgIHVwZGF0ZUN1cnNvcldyYXBwZXIodGhpcyk7XG4gICAgICAgIGxldCBpbm5lckRlY28gPSB2aWV3RGVjb3JhdGlvbnModGhpcyksIG91dGVyRGVjbyA9IGNvbXB1dGVEb2NEZWNvKHRoaXMpO1xuICAgICAgICBsZXQgc2Nyb2xsID0gcHJldi5wbHVnaW5zICE9IHN0YXRlLnBsdWdpbnMgJiYgIXByZXYuZG9jLmVxKHN0YXRlLmRvYykgPyBcInJlc2V0XCJcbiAgICAgICAgICAgIDogc3RhdGUuc2Nyb2xsVG9TZWxlY3Rpb24gPiBwcmV2LnNjcm9sbFRvU2VsZWN0aW9uID8gXCJ0byBzZWxlY3Rpb25cIiA6IFwicHJlc2VydmVcIjtcbiAgICAgICAgbGV0IHVwZGF0ZURvYyA9IHJlZHJhdyB8fCAhdGhpcy5kb2NWaWV3Lm1hdGNoZXNOb2RlKHN0YXRlLmRvYywgb3V0ZXJEZWNvLCBpbm5lckRlY28pO1xuICAgICAgICBpZiAodXBkYXRlRG9jIHx8ICFzdGF0ZS5zZWxlY3Rpb24uZXEocHJldi5zZWxlY3Rpb24pKVxuICAgICAgICAgICAgdXBkYXRlU2VsID0gdHJ1ZTtcbiAgICAgICAgbGV0IG9sZFNjcm9sbFBvcyA9IHNjcm9sbCA9PSBcInByZXNlcnZlXCIgJiYgdXBkYXRlU2VsICYmIHRoaXMuZG9tLnN0eWxlLm92ZXJmbG93QW5jaG9yID09IG51bGwgJiYgc3RvcmVTY3JvbGxQb3ModGhpcyk7XG4gICAgICAgIGlmICh1cGRhdGVTZWwpIHtcbiAgICAgICAgICAgIHRoaXMuZG9tT2JzZXJ2ZXIuc3RvcCgpO1xuICAgICAgICAgICAgLy8gV29yayBhcm91bmQgYW4gaXNzdWUgaW4gQ2hyb21lLCBJRSwgYW5kIEVkZ2Ugd2hlcmUgY2hhbmdpbmdcbiAgICAgICAgICAgIC8vIHRoZSBET00gYXJvdW5kIGFuIGFjdGl2ZSBzZWxlY3Rpb24gcHV0cyBpdCBpbnRvIGEgYnJva2VuXG4gICAgICAgICAgICAvLyBzdGF0ZSB3aGVyZSB0aGUgdGhpbmcgdGhlIHVzZXIgc2VlcyBkaWZmZXJzIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBzZWxlY3Rpb24gcmVwb3J0ZWQgYnkgdGhlIFNlbGVjdGlvbiBvYmplY3QgKCM3MTAsICM5NzMsXG4gICAgICAgICAgICAvLyAjMTAxMSwgIzEwMTMsICMxMDM1KS5cbiAgICAgICAgICAgIGxldCBmb3JjZVNlbFVwZGF0ZSA9IHVwZGF0ZURvYyAmJiAoaWUgfHwgY2hyb21lKSAmJiAhdGhpcy5jb21wb3NpbmcgJiZcbiAgICAgICAgICAgICAgICAhcHJldi5zZWxlY3Rpb24uZW1wdHkgJiYgIXN0YXRlLnNlbGVjdGlvbi5lbXB0eSAmJiBzZWxlY3Rpb25Db250ZXh0Q2hhbmdlZChwcmV2LnNlbGVjdGlvbiwgc3RhdGUuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIGlmICh1cGRhdGVEb2MpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbm9kZSB0aGF0IHRoZSBzZWxlY3Rpb24gcG9pbnRzIGludG8gaXMgd3JpdHRlbiB0byxcbiAgICAgICAgICAgICAgICAvLyBDaHJvbWUgc29tZXRpbWVzIHN0YXJ0cyBtaXNyZXBvcnRpbmcgdGhlIHNlbGVjdGlvbiwgc28gdGhpc1xuICAgICAgICAgICAgICAgIC8vIHRyYWNrcyB0aGF0IGFuZCBmb3JjZXMgYSBzZWxlY3Rpb24gcmVzZXQgd2hlbiBvdXIgdXBkYXRlXG4gICAgICAgICAgICAgICAgLy8gZGlkIHdyaXRlIHRvIHRoZSBub2RlLlxuICAgICAgICAgICAgICAgIGxldCBjaHJvbWVLbHVkZ2UgPSBjaHJvbWUgPyAodGhpcy50cmFja1dyaXRlcyA9IHRoaXMuZG9tU2VsZWN0aW9uUmFuZ2UoKS5mb2N1c05vZGUpIDogbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb21wb3NpbmcpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQuY29tcG9zaXRpb25Ob2RlID0gZmluZENvbXBvc2l0aW9uTm9kZSh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAocmVkcmF3IHx8ICF0aGlzLmRvY1ZpZXcudXBkYXRlKHN0YXRlLmRvYywgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jVmlldy51cGRhdGVPdXRlckRlY28ob3V0ZXJEZWNvKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2NWaWV3LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2NWaWV3ID0gZG9jVmlld0Rlc2Moc3RhdGUuZG9jLCBvdXRlckRlY28sIGlubmVyRGVjbywgdGhpcy5kb20sIHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hyb21lS2x1ZGdlICYmICF0aGlzLnRyYWNrV3JpdGVzKVxuICAgICAgICAgICAgICAgICAgICBmb3JjZVNlbFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXb3JrIGFyb3VuZCBmb3IgYW4gaXNzdWUgd2hlcmUgYW4gdXBkYXRlIGFycml2aW5nIHJpZ2h0IGJldHdlZW5cbiAgICAgICAgICAgIC8vIGEgRE9NIHNlbGVjdGlvbiBjaGFuZ2UgYW5kIHRoZSBcInNlbGVjdGlvbmNoYW5nZVwiIGV2ZW50IGZvciBpdFxuICAgICAgICAgICAgLy8gY2FuIGNhdXNlIGEgc3B1cmlvdXMgRE9NIHNlbGVjdGlvbiB1cGRhdGUsIGRpc3J1cHRpbmcgbW91c2VcbiAgICAgICAgICAgIC8vIGRyYWcgc2VsZWN0aW9uLlxuICAgICAgICAgICAgaWYgKGZvcmNlU2VsVXBkYXRlIHx8XG4gICAgICAgICAgICAgICAgISh0aGlzLmlucHV0Lm1vdXNlRG93biAmJiB0aGlzLmRvbU9ic2VydmVyLmN1cnJlbnRTZWxlY3Rpb24uZXEodGhpcy5kb21TZWxlY3Rpb25SYW5nZSgpKSAmJlxuICAgICAgICAgICAgICAgICAgICBhbmNob3JJblJpZ2h0UGxhY2UodGhpcykpKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uVG9ET00odGhpcywgZm9yY2VTZWxVcGRhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3luY05vZGVTZWxlY3Rpb24odGhpcywgc3RhdGUuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRvbU9ic2VydmVyLnNldEN1clNlbGVjdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kb21PYnNlcnZlci5zdGFydCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlUGx1Z2luVmlld3MocHJldik7XG4gICAgICAgIGlmICgoKF9hID0gdGhpcy5kcmFnZ2luZykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5vZGUpICYmICFwcmV2LmRvYy5lcShzdGF0ZS5kb2MpKVxuICAgICAgICAgICAgdGhpcy51cGRhdGVEcmFnZ2VkTm9kZSh0aGlzLmRyYWdnaW5nLCBwcmV2KTtcbiAgICAgICAgaWYgKHNjcm9sbCA9PSBcInJlc2V0XCIpIHtcbiAgICAgICAgICAgIHRoaXMuZG9tLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2Nyb2xsID09IFwidG8gc2VsZWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9TZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvbGRTY3JvbGxQb3MpIHtcbiAgICAgICAgICAgIHJlc2V0U2Nyb2xsUG9zKG9sZFNjcm9sbFBvcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBzY3JvbGxUb1NlbGVjdGlvbigpIHtcbiAgICAgICAgbGV0IHN0YXJ0RE9NID0gdGhpcy5kb21TZWxlY3Rpb25SYW5nZSgpLmZvY3VzTm9kZTtcbiAgICAgICAgaWYgKCFzdGFydERPTSB8fCAhdGhpcy5kb20uY29udGFpbnMoc3RhcnRET00ubm9kZVR5cGUgPT0gMSA/IHN0YXJ0RE9NIDogc3RhcnRET00ucGFyZW50Tm9kZSkpIDtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zb21lUHJvcChcImhhbmRsZVNjcm9sbFRvU2VsZWN0aW9uXCIsIGYgPT4gZih0aGlzKSkpIDtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGF0ZS5zZWxlY3Rpb24gaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBsZXQgdGFyZ2V0ID0gdGhpcy5kb2NWaWV3LmRvbUFmdGVyUG9zKHRoaXMuc3RhdGUuc2VsZWN0aW9uLmZyb20pO1xuICAgICAgICAgICAgaWYgKHRhcmdldC5ub2RlVHlwZSA9PSAxKVxuICAgICAgICAgICAgICAgIHNjcm9sbFJlY3RJbnRvVmlldyh0aGlzLCB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHN0YXJ0RE9NKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNjcm9sbFJlY3RJbnRvVmlldyh0aGlzLCB0aGlzLmNvb3Jkc0F0UG9zKHRoaXMuc3RhdGUuc2VsZWN0aW9uLmhlYWQsIDEpLCBzdGFydERPTSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVzdHJveVBsdWdpblZpZXdzKCkge1xuICAgICAgICBsZXQgdmlldztcbiAgICAgICAgd2hpbGUgKHZpZXcgPSB0aGlzLnBsdWdpblZpZXdzLnBvcCgpKVxuICAgICAgICAgICAgaWYgKHZpZXcuZGVzdHJveSlcbiAgICAgICAgICAgICAgICB2aWV3LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdXBkYXRlUGx1Z2luVmlld3MocHJldlN0YXRlKSB7XG4gICAgICAgIGlmICghcHJldlN0YXRlIHx8IHByZXZTdGF0ZS5wbHVnaW5zICE9IHRoaXMuc3RhdGUucGx1Z2lucyB8fCB0aGlzLmRpcmVjdFBsdWdpbnMgIT0gdGhpcy5wcmV2RGlyZWN0UGx1Z2lucykge1xuICAgICAgICAgICAgdGhpcy5wcmV2RGlyZWN0UGx1Z2lucyA9IHRoaXMuZGlyZWN0UGx1Z2lucztcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveVBsdWdpblZpZXdzKCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGlyZWN0UGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBwbHVnaW4gPSB0aGlzLmRpcmVjdFBsdWdpbnNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbi5zcGVjLnZpZXcpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luVmlld3MucHVzaChwbHVnaW4uc3BlYy52aWV3KHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZS5wbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBsdWdpbiA9IHRoaXMuc3RhdGUucGx1Z2luc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAocGx1Z2luLnNwZWMudmlldylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5WaWV3cy5wdXNoKHBsdWdpbi5zcGVjLnZpZXcodGhpcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBsdWdpblZpZXdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBsdWdpblZpZXcgPSB0aGlzLnBsdWdpblZpZXdzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW5WaWV3LnVwZGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luVmlldy51cGRhdGUodGhpcywgcHJldlN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB1cGRhdGVEcmFnZ2VkTm9kZShkcmFnZ2luZywgcHJldikge1xuICAgICAgICBsZXQgc2VsID0gZHJhZ2dpbmcubm9kZSwgZm91bmQgPSAtMTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZG9jLm5vZGVBdChzZWwuZnJvbSkgPT0gc2VsLm5vZGUpIHtcbiAgICAgICAgICAgIGZvdW5kID0gc2VsLmZyb207XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgbW92ZWRQb3MgPSBzZWwuZnJvbSArICh0aGlzLnN0YXRlLmRvYy5jb250ZW50LnNpemUgLSBwcmV2LmRvYy5jb250ZW50LnNpemUpO1xuICAgICAgICAgICAgbGV0IG1vdmVkID0gbW92ZWRQb3MgPiAwICYmIHRoaXMuc3RhdGUuZG9jLm5vZGVBdChtb3ZlZFBvcyk7XG4gICAgICAgICAgICBpZiAobW92ZWQgPT0gc2VsLm5vZGUpXG4gICAgICAgICAgICAgICAgZm91bmQgPSBtb3ZlZFBvcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRyYWdnaW5nID0gbmV3IERyYWdnaW5nKGRyYWdnaW5nLnNsaWNlLCBkcmFnZ2luZy5tb3ZlLCBmb3VuZCA8IDAgPyB1bmRlZmluZWQgOiBOb2RlU2VsZWN0aW9uLmNyZWF0ZSh0aGlzLnN0YXRlLmRvYywgZm91bmQpKTtcbiAgICB9XG4gICAgc29tZVByb3AocHJvcE5hbWUsIGYpIHtcbiAgICAgICAgbGV0IHByb3AgPSB0aGlzLl9wcm9wcyAmJiB0aGlzLl9wcm9wc1twcm9wTmFtZV0sIHZhbHVlO1xuICAgICAgICBpZiAocHJvcCAhPSBudWxsICYmICh2YWx1ZSA9IGYgPyBmKHByb3ApIDogcHJvcCkpXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kaXJlY3RQbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcHJvcCA9IHRoaXMuZGlyZWN0UGx1Z2luc1tpXS5wcm9wc1twcm9wTmFtZV07XG4gICAgICAgICAgICBpZiAocHJvcCAhPSBudWxsICYmICh2YWx1ZSA9IGYgPyBmKHByb3ApIDogcHJvcCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwbHVnaW5zID0gdGhpcy5zdGF0ZS5wbHVnaW5zO1xuICAgICAgICBpZiAocGx1Z2lucylcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBwcm9wID0gcGx1Z2luc1tpXS5wcm9wc1twcm9wTmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKHByb3AgIT0gbnVsbCAmJiAodmFsdWUgPSBmID8gZihwcm9wKSA6IHByb3ApKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIFF1ZXJ5IHdoZXRoZXIgdGhlIHZpZXcgaGFzIGZvY3VzLlxuICAgICovXG4gICAgaGFzRm9jdXMoKSB7XG4gICAgICAgIC8vIFdvcmsgYXJvdW5kIElFIG5vdCBoYW5kbGluZyBmb2N1cyBjb3JyZWN0bHkgaWYgcmVzaXplIGhhbmRsZXMgYXJlIHNob3duLlxuICAgICAgICAvLyBJZiB0aGUgY3Vyc29yIGlzIGluc2lkZSBhbiBlbGVtZW50IHdpdGggcmVzaXplIGhhbmRsZXMsIGFjdGl2ZUVsZW1lbnRcbiAgICAgICAgLy8gd2lsbCBiZSB0aGF0IGVsZW1lbnQgaW5zdGVhZCBvZiB0aGlzLmRvbS5cbiAgICAgICAgaWYgKGllKSB7XG4gICAgICAgICAgICAvLyBJZiBhY3RpdmVFbGVtZW50IGlzIHdpdGhpbiB0aGlzLmRvbSwgYW5kIHRoZXJlIGFyZSBubyBvdGhlciBlbGVtZW50c1xuICAgICAgICAgICAgLy8gc2V0dGluZyBgY29udGVudGVkaXRhYmxlYCB0byBmYWxzZSBpbiBiZXR3ZWVuLCB0cmVhdCBpdCBhcyBmb2N1c2VkLlxuICAgICAgICAgICAgbGV0IG5vZGUgPSB0aGlzLnJvb3QuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgICAgIGlmIChub2RlID09IHRoaXMuZG9tKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYgKCFub2RlIHx8ICF0aGlzLmRvbS5jb250YWlucyhub2RlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB3aGlsZSAobm9kZSAmJiB0aGlzLmRvbSAhPSBub2RlICYmIHRoaXMuZG9tLmNvbnRhaW5zKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuY29udGVudEVkaXRhYmxlID09ICdmYWxzZScpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5hY3RpdmVFbGVtZW50ID09IHRoaXMuZG9tO1xuICAgIH1cbiAgICAvKipcbiAgICBGb2N1cyB0aGUgZWRpdG9yLlxuICAgICovXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuZG9tT2JzZXJ2ZXIuc3RvcCgpO1xuICAgICAgICBpZiAodGhpcy5lZGl0YWJsZSlcbiAgICAgICAgICAgIGZvY3VzUHJldmVudFNjcm9sbCh0aGlzLmRvbSk7XG4gICAgICAgIHNlbGVjdGlvblRvRE9NKHRoaXMpO1xuICAgICAgICB0aGlzLmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgIEdldCB0aGUgZG9jdW1lbnQgcm9vdCBpbiB3aGljaCB0aGUgZWRpdG9yIGV4aXN0cy4gVGhpcyB3aWxsXG4gICAgdXN1YWxseSBiZSB0aGUgdG9wLWxldmVsIGBkb2N1bWVudGAsIGJ1dCBtaWdodCBiZSBhIFtzaGFkb3dcbiAgICBET01dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1dlYl9Db21wb25lbnRzL1NoYWRvd19ET00pXG4gICAgcm9vdCBpZiB0aGUgZWRpdG9yIGlzIGluc2lkZSBvbmUuXG4gICAgKi9cbiAgICBnZXQgcm9vdCgpIHtcbiAgICAgICAgbGV0IGNhY2hlZCA9IHRoaXMuX3Jvb3Q7XG4gICAgICAgIGlmIChjYWNoZWQgPT0gbnVsbClcbiAgICAgICAgICAgIGZvciAobGV0IHNlYXJjaCA9IHRoaXMuZG9tLnBhcmVudE5vZGU7IHNlYXJjaDsgc2VhcmNoID0gc2VhcmNoLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoLm5vZGVUeXBlID09IDkgfHwgKHNlYXJjaC5ub2RlVHlwZSA9PSAxMSAmJiBzZWFyY2guaG9zdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWFyY2guZ2V0U2VsZWN0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKHNlYXJjaCkuZ2V0U2VsZWN0aW9uID0gKCkgPT4gc2VhcmNoLm93bmVyRG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yb290ID0gc2VhcmNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhY2hlZCB8fCBkb2N1bWVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgV2hlbiBhbiBleGlzdGluZyBlZGl0b3IgdmlldyBpcyBtb3ZlZCB0byBhIG5ldyBkb2N1bWVudCBvclxuICAgIHNoYWRvdyB0cmVlLCBjYWxsIHRoaXMgdG8gbWFrZSBpdCByZWNvbXB1dGUgaXRzIHJvb3QuXG4gICAgKi9cbiAgICB1cGRhdGVSb290KCkge1xuICAgICAgICB0aGlzLl9yb290ID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgR2l2ZW4gYSBwYWlyIG9mIHZpZXdwb3J0IGNvb3JkaW5hdGVzLCByZXR1cm4gdGhlIGRvY3VtZW50XG4gICAgcG9zaXRpb24gdGhhdCBjb3JyZXNwb25kcyB0byB0aGVtLiBNYXkgcmV0dXJuIG51bGwgaWYgdGhlIGdpdmVuXG4gICAgY29vcmRpbmF0ZXMgYXJlbid0IGluc2lkZSBvZiB0aGUgZWRpdG9yLiBXaGVuIGFuIG9iamVjdCBpc1xuICAgIHJldHVybmVkLCBpdHMgYHBvc2AgcHJvcGVydHkgaXMgdGhlIHBvc2l0aW9uIG5lYXJlc3QgdG8gdGhlXG4gICAgY29vcmRpbmF0ZXMsIGFuZCBpdHMgYGluc2lkZWAgcHJvcGVydHkgaG9sZHMgdGhlIHBvc2l0aW9uIG9mIHRoZVxuICAgIGlubmVyIG5vZGUgdGhhdCB0aGUgcG9zaXRpb24gZmFsbHMgaW5zaWRlIG9mLCBvciAtMSBpZiBpdCBpcyBhdFxuICAgIHRoZSB0b3AgbGV2ZWwsIG5vdCBpbiBhbnkgbm9kZS5cbiAgICAqL1xuICAgIHBvc0F0Q29vcmRzKGNvb3Jkcykge1xuICAgICAgICByZXR1cm4gcG9zQXRDb29yZHModGhpcywgY29vcmRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmV0dXJucyB0aGUgdmlld3BvcnQgcmVjdGFuZ2xlIGF0IGEgZ2l2ZW4gZG9jdW1lbnQgcG9zaXRpb24uXG4gICAgYGxlZnRgIGFuZCBgcmlnaHRgIHdpbGwgYmUgdGhlIHNhbWUgbnVtYmVyLCBhcyB0aGlzIHJldHVybnMgYVxuICAgIGZsYXQgY3Vyc29yLWlzaCByZWN0YW5nbGUuIElmIHRoZSBwb3NpdGlvbiBpcyBiZXR3ZWVuIHR3byB0aGluZ3NcbiAgICB0aGF0IGFyZW4ndCBkaXJlY3RseSBhZGphY2VudCwgYHNpZGVgIGRldGVybWluZXMgd2hpY2ggZWxlbWVudFxuICAgIGlzIHVzZWQuIFdoZW4gPCAwLCB0aGUgZWxlbWVudCBiZWZvcmUgdGhlIHBvc2l0aW9uIGlzIHVzZWQsXG4gICAgb3RoZXJ3aXNlIHRoZSBlbGVtZW50IGFmdGVyLlxuICAgICovXG4gICAgY29vcmRzQXRQb3MocG9zLCBzaWRlID0gMSkge1xuICAgICAgICByZXR1cm4gY29vcmRzQXRQb3ModGhpcywgcG9zLCBzaWRlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgRmluZCB0aGUgRE9NIHBvc2l0aW9uIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGdpdmVuIGRvY3VtZW50XG4gICAgcG9zaXRpb24uIFdoZW4gYHNpZGVgIGlzIG5lZ2F0aXZlLCBmaW5kIHRoZSBwb3NpdGlvbiBhcyBjbG9zZSBhc1xuICAgIHBvc3NpYmxlIHRvIHRoZSBjb250ZW50IGJlZm9yZSB0aGUgcG9zaXRpb24uIFdoZW4gcG9zaXRpdmUsXG4gICAgcHJlZmVyIHBvc2l0aW9ucyBjbG9zZSB0byB0aGUgY29udGVudCBhZnRlciB0aGUgcG9zaXRpb24uIFdoZW5cbiAgICB6ZXJvLCBwcmVmZXIgYXMgc2hhbGxvdyBhIHBvc2l0aW9uIGFzIHBvc3NpYmxlLlxuICAgIFxuICAgIE5vdGUgdGhhdCB5b3Ugc2hvdWxkICoqbm90KiogbXV0YXRlIHRoZSBlZGl0b3IncyBpbnRlcm5hbCBET00sXG4gICAgb25seSBpbnNwZWN0IGl0IChhbmQgZXZlbiB0aGF0IGlzIHVzdWFsbHkgbm90IG5lY2Vzc2FyeSkuXG4gICAgKi9cbiAgICBkb21BdFBvcyhwb3MsIHNpZGUgPSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY1ZpZXcuZG9tRnJvbVBvcyhwb3MsIHNpZGUpO1xuICAgIH1cbiAgICAvKipcbiAgICBGaW5kIHRoZSBET00gbm9kZSB0aGF0IHJlcHJlc2VudHMgdGhlIGRvY3VtZW50IG5vZGUgYWZ0ZXIgdGhlXG4gICAgZ2l2ZW4gcG9zaXRpb24uIE1heSByZXR1cm4gYG51bGxgIHdoZW4gdGhlIHBvc2l0aW9uIGRvZXNuJ3QgcG9pbnRcbiAgICBpbiBmcm9udCBvZiBhIG5vZGUgb3IgaWYgdGhlIG5vZGUgaXMgaW5zaWRlIGFuIG9wYXF1ZSBub2RlIHZpZXcuXG4gICAgXG4gICAgVGhpcyBpcyBpbnRlbmRlZCB0byBiZSBhYmxlIHRvIGNhbGwgdGhpbmdzIGxpa2VcbiAgICBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBvbiB0aGF0IERPTSBub2RlLiBEbyAqKm5vdCoqIG11dGF0ZSB0aGVcbiAgICBlZGl0b3IgRE9NIGRpcmVjdGx5LCBvciBhZGQgc3R5bGluZyB0aGlzIHdheSwgc2luY2UgdGhhdCB3aWxsIGJlXG4gICAgaW1tZWRpYXRlbHkgb3ZlcnJpZGVuIGJ5IHRoZSBlZGl0b3IgYXMgaXQgcmVkcmF3cyB0aGUgbm9kZS5cbiAgICAqL1xuICAgIG5vZGVET00ocG9zKSB7XG4gICAgICAgIGxldCBkZXNjID0gdGhpcy5kb2NWaWV3LmRlc2NBdChwb3MpO1xuICAgICAgICByZXR1cm4gZGVzYyA/IGRlc2Mubm9kZURPTSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgIEZpbmQgdGhlIGRvY3VtZW50IHBvc2l0aW9uIHRoYXQgY29ycmVzcG9uZHMgdG8gYSBnaXZlbiBET01cbiAgICBwb3NpdGlvbi4gKFdoZW5ldmVyIHBvc3NpYmxlLCBpdCBpcyBwcmVmZXJhYmxlIHRvIGluc3BlY3QgdGhlXG4gICAgZG9jdW1lbnQgc3RydWN0dXJlIGRpcmVjdGx5LCByYXRoZXIgdGhhbiBwb2tpbmcgYXJvdW5kIGluIHRoZVxuICAgIERPTSwgYnV0IHNvbWV0aW1lc+KAlGZvciBleGFtcGxlIHdoZW4gaW50ZXJwcmV0aW5nIGFuIGV2ZW50XG4gICAgdGFyZ2V04oCUeW91IGRvbid0IGhhdmUgYSBjaG9pY2UuKVxuICAgIFxuICAgIFRoZSBgYmlhc2AgcGFyYW1ldGVyIGNhbiBiZSB1c2VkIHRvIGluZmx1ZW5jZSB3aGljaCBzaWRlIG9mIGEgRE9NXG4gICAgbm9kZSB0byB1c2Ugd2hlbiB0aGUgcG9zaXRpb24gaXMgaW5zaWRlIGEgbGVhZiBub2RlLlxuICAgICovXG4gICAgcG9zQXRET00obm9kZSwgb2Zmc2V0LCBiaWFzID0gLTEpIHtcbiAgICAgICAgbGV0IHBvcyA9IHRoaXMuZG9jVmlldy5wb3NGcm9tRE9NKG5vZGUsIG9mZnNldCwgYmlhcyk7XG4gICAgICAgIGlmIChwb3MgPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiRE9NIHBvc2l0aW9uIG5vdCBpbnNpZGUgdGhlIGVkaXRvclwiKTtcbiAgICAgICAgcmV0dXJuIHBvcztcbiAgICB9XG4gICAgLyoqXG4gICAgRmluZCBvdXQgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGF0IHRoZSBlbmQgb2YgYSB0ZXh0YmxvY2sgd2hlblxuICAgIG1vdmluZyBpbiBhIGdpdmVuIGRpcmVjdGlvbi4gV2hlbiwgZm9yIGV4YW1wbGUsIGdpdmVuIGBcImxlZnRcImAsXG4gICAgaXQgd2lsbCByZXR1cm4gdHJ1ZSBpZiBtb3ZpbmcgbGVmdCBmcm9tIHRoZSBjdXJyZW50IGN1cnNvclxuICAgIHBvc2l0aW9uIHdvdWxkIGxlYXZlIHRoYXQgcG9zaXRpb24ncyBwYXJlbnQgdGV4dGJsb2NrLiBXaWxsIGFwcGx5XG4gICAgdG8gdGhlIHZpZXcncyBjdXJyZW50IHN0YXRlIGJ5IGRlZmF1bHQsIGJ1dCBpdCBpcyBwb3NzaWJsZSB0b1xuICAgIHBhc3MgYSBkaWZmZXJlbnQgc3RhdGUuXG4gICAgKi9cbiAgICBlbmRPZlRleHRibG9jayhkaXIsIHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBlbmRPZlRleHRibG9jayh0aGlzLCBzdGF0ZSB8fCB0aGlzLnN0YXRlLCBkaXIpO1xuICAgIH1cbiAgICAvKipcbiAgICBSdW4gdGhlIGVkaXRvcidzIHBhc3RlIGxvZ2ljIHdpdGggdGhlIGdpdmVuIEhUTUwgc3RyaW5nLiBUaGVcbiAgICBgZXZlbnRgLCBpZiBnaXZlbiwgd2lsbCBiZSBwYXNzZWQgdG8gdGhlXG4gICAgW2BoYW5kbGVQYXN0ZWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkVkaXRvclByb3BzLmhhbmRsZVBhc3RlKSBob29rLlxuICAgICovXG4gICAgcGFzdGVIVE1MKGh0bWwsIGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBkb1Bhc3RlKHRoaXMsIFwiXCIsIGh0bWwsIGZhbHNlLCBldmVudCB8fCBuZXcgQ2xpcGJvYXJkRXZlbnQoXCJwYXN0ZVwiKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIFJ1biB0aGUgZWRpdG9yJ3MgcGFzdGUgbG9naWMgd2l0aCB0aGUgZ2l2ZW4gcGxhaW4tdGV4dCBpbnB1dC5cbiAgICAqL1xuICAgIHBhc3RlVGV4dCh0ZXh0LCBldmVudCkge1xuICAgICAgICByZXR1cm4gZG9QYXN0ZSh0aGlzLCB0ZXh0LCBudWxsLCB0cnVlLCBldmVudCB8fCBuZXcgQ2xpcGJvYXJkRXZlbnQoXCJwYXN0ZVwiKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIFNlcmlhbGl6ZSB0aGUgZ2l2ZW4gc2xpY2UgYXMgaXQgd291bGQgYmUgaWYgaXQgd2FzIGNvcGllZCBmcm9tXG4gICAgdGhpcyBlZGl0b3IuIFJldHVybnMgYSBET00gZWxlbWVudCB0aGF0IGNvbnRhaW5zIGFcbiAgICByZXByZXNlbnRhdGlvbiBvZiB0aGUgc2xpY2UgYXMgaXRzIGNoaWxkcmVuLCBhIHRleHR1YWxcbiAgICByZXByZXNlbnRhdGlvbiwgYW5kIHRoZSB0cmFuc2Zvcm1lZCBzbGljZSAod2hpY2ggY2FuIGJlXG4gICAgZGlmZmVyZW50IGZyb20gdGhlIGdpdmVuIGlucHV0IGR1ZSB0byBob29rcyBsaWtlXG4gICAgW2B0cmFuc2Zvcm1Db3BpZWRgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdmlldy5FZGl0b3JQcm9wcy50cmFuc2Zvcm1Db3BpZWQpKS5cbiAgICAqL1xuICAgIHNlcmlhbGl6ZUZvckNsaXBib2FyZChzbGljZSkge1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplRm9yQ2xpcGJvYXJkKHRoaXMsIHNsaWNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmVtb3ZlcyB0aGUgZWRpdG9yIGZyb20gdGhlIERPTSBhbmQgZGVzdHJveXMgYWxsIFtub2RlXG4gICAgdmlld3NdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3Lk5vZGVWaWV3KS5cbiAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICghdGhpcy5kb2NWaWV3KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBkZXN0cm95SW5wdXQodGhpcyk7XG4gICAgICAgIHRoaXMuZGVzdHJveVBsdWdpblZpZXdzKCk7XG4gICAgICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZG9jVmlldy51cGRhdGUodGhpcy5zdGF0ZS5kb2MsIFtdLCB2aWV3RGVjb3JhdGlvbnModGhpcyksIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kb20udGV4dENvbnRlbnQgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZG9tLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuZG9tLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5kb20pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZG9jVmlldy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZG9jVmlldyA9IG51bGw7XG4gICAgICAgIGNsZWFyUmV1c2VkUmFuZ2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgVGhpcyBpcyB0cnVlIHdoZW4gdGhlIHZpZXcgaGFzIGJlZW5cbiAgICBbZGVzdHJveWVkXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3LmRlc3Ryb3kpIChhbmQgdGh1cyBzaG91bGQgbm90IGJlXG4gICAgdXNlZCBhbnltb3JlKS5cbiAgICAqL1xuICAgIGdldCBpc0Rlc3Ryb3llZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jVmlldyA9PSBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICBVc2VkIGZvciB0ZXN0aW5nLlxuICAgICovXG4gICAgZGlzcGF0Y2hFdmVudChldmVudCkge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCBldmVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgIERpc3BhdGNoIGEgdHJhbnNhY3Rpb24uIFdpbGwgY2FsbFxuICAgIFtgZGlzcGF0Y2hUcmFuc2FjdGlvbmBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyN2aWV3LkRpcmVjdEVkaXRvclByb3BzLmRpc3BhdGNoVHJhbnNhY3Rpb24pXG4gICAgd2hlbiBnaXZlbiwgYW5kIG90aGVyd2lzZSBkZWZhdWx0cyB0byBhcHBseWluZyB0aGUgdHJhbnNhY3Rpb24gdG9cbiAgICB0aGUgY3VycmVudCBzdGF0ZSBhbmQgY2FsbGluZ1xuICAgIFtgdXBkYXRlU3RhdGVgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdmlldy5FZGl0b3JWaWV3LnVwZGF0ZVN0YXRlKSB3aXRoIHRoZSByZXN1bHQuXG4gICAgVGhpcyBtZXRob2QgaXMgYm91bmQgdG8gdGhlIHZpZXcgaW5zdGFuY2UsIHNvIHRoYXQgaXQgY2FuIGJlXG4gICAgZWFzaWx5IHBhc3NlZCBhcm91bmQuXG4gICAgKi9cbiAgICBkaXNwYXRjaCh0cikge1xuICAgICAgICBsZXQgZGlzcGF0Y2hUcmFuc2FjdGlvbiA9IHRoaXMuX3Byb3BzLmRpc3BhdGNoVHJhbnNhY3Rpb247XG4gICAgICAgIGlmIChkaXNwYXRjaFRyYW5zYWN0aW9uKVxuICAgICAgICAgICAgZGlzcGF0Y2hUcmFuc2FjdGlvbi5jYWxsKHRoaXMsIHRyKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSh0aGlzLnN0YXRlLmFwcGx5KHRyKSk7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZG9tU2VsZWN0aW9uUmFuZ2UoKSB7XG4gICAgICAgIGxldCBzZWwgPSB0aGlzLmRvbVNlbGVjdGlvbigpO1xuICAgICAgICBpZiAoIXNlbClcbiAgICAgICAgICAgIHJldHVybiB7IGZvY3VzTm9kZTogbnVsbCwgZm9jdXNPZmZzZXQ6IDAsIGFuY2hvck5vZGU6IG51bGwsIGFuY2hvck9mZnNldDogMCB9O1xuICAgICAgICByZXR1cm4gc2FmYXJpICYmIHRoaXMucm9vdC5ub2RlVHlwZSA9PT0gMTEgJiZcbiAgICAgICAgICAgIGRlZXBBY3RpdmVFbGVtZW50KHRoaXMuZG9tLm93bmVyRG9jdW1lbnQpID09IHRoaXMuZG9tICYmIHNhZmFyaVNoYWRvd1NlbGVjdGlvblJhbmdlKHRoaXMsIHNlbCkgfHwgc2VsO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGRvbVNlbGVjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb21wdXRlRG9jRGVjbyh2aWV3KSB7XG4gICAgbGV0IGF0dHJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBhdHRycy5jbGFzcyA9IFwiUHJvc2VNaXJyb3JcIjtcbiAgICBhdHRycy5jb250ZW50ZWRpdGFibGUgPSBTdHJpbmcodmlldy5lZGl0YWJsZSk7XG4gICAgdmlldy5zb21lUHJvcChcImF0dHJpYnV0ZXNcIiwgdmFsdWUgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUodmlldy5zdGF0ZSk7XG4gICAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgICAgIGZvciAobGV0IGF0dHIgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0ciA9PSBcImNsYXNzXCIpXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLmNsYXNzICs9IFwiIFwiICsgdmFsdWVbYXR0cl07XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYXR0ciA9PSBcInN0eWxlXCIpXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLnN0eWxlID0gKGF0dHJzLnN0eWxlID8gYXR0cnMuc3R5bGUgKyBcIjtcIiA6IFwiXCIpICsgdmFsdWVbYXR0cl07XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWF0dHJzW2F0dHJdICYmIGF0dHIgIT0gXCJjb250ZW50ZWRpdGFibGVcIiAmJiBhdHRyICE9IFwibm9kZU5hbWVcIilcbiAgICAgICAgICAgICAgICAgICAgYXR0cnNbYXR0cl0gPSBTdHJpbmcodmFsdWVbYXR0cl0pO1xuICAgICAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghYXR0cnMudHJhbnNsYXRlKVxuICAgICAgICBhdHRycy50cmFuc2xhdGUgPSBcIm5vXCI7XG4gICAgcmV0dXJuIFtEZWNvcmF0aW9uLm5vZGUoMCwgdmlldy5zdGF0ZS5kb2MuY29udGVudC5zaXplLCBhdHRycyldO1xufVxuZnVuY3Rpb24gdXBkYXRlQ3Vyc29yV3JhcHBlcih2aWV3KSB7XG4gICAgaWYgKHZpZXcubWFya0N1cnNvcikge1xuICAgICAgICBsZXQgZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgZG9tLmNsYXNzTmFtZSA9IFwiUHJvc2VNaXJyb3Itc2VwYXJhdG9yXCI7XG4gICAgICAgIGRvbS5zZXRBdHRyaWJ1dGUoXCJtYXJrLXBsYWNlaG9sZGVyXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgZG9tLnNldEF0dHJpYnV0ZShcImFsdFwiLCBcIlwiKTtcbiAgICAgICAgdmlldy5jdXJzb3JXcmFwcGVyID0geyBkb20sIGRlY286IERlY29yYXRpb24ud2lkZ2V0KHZpZXcuc3RhdGUuc2VsZWN0aW9uLmZyb20sIGRvbSwgeyByYXc6IHRydWUsIG1hcmtzOiB2aWV3Lm1hcmtDdXJzb3IgfSkgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZpZXcuY3Vyc29yV3JhcHBlciA9IG51bGw7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0RWRpdGFibGUodmlldykge1xuICAgIHJldHVybiAhdmlldy5zb21lUHJvcChcImVkaXRhYmxlXCIsIHZhbHVlID0+IHZhbHVlKHZpZXcuc3RhdGUpID09PSBmYWxzZSk7XG59XG5mdW5jdGlvbiBzZWxlY3Rpb25Db250ZXh0Q2hhbmdlZChzZWwxLCBzZWwyKSB7XG4gICAgbGV0IGRlcHRoID0gTWF0aC5taW4oc2VsMS4kYW5jaG9yLnNoYXJlZERlcHRoKHNlbDEuaGVhZCksIHNlbDIuJGFuY2hvci5zaGFyZWREZXB0aChzZWwyLmhlYWQpKTtcbiAgICByZXR1cm4gc2VsMS4kYW5jaG9yLnN0YXJ0KGRlcHRoKSAhPSBzZWwyLiRhbmNob3Iuc3RhcnQoZGVwdGgpO1xufVxuZnVuY3Rpb24gYnVpbGROb2RlVmlld3Modmlldykge1xuICAgIGxldCByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZ1bmN0aW9uIGFkZChvYmopIHtcbiAgICAgICAgZm9yIChsZXQgcHJvcCBpbiBvYmopXG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHByb3ApKVxuICAgICAgICAgICAgICAgIHJlc3VsdFtwcm9wXSA9IG9ialtwcm9wXTtcbiAgICB9XG4gICAgdmlldy5zb21lUHJvcChcIm5vZGVWaWV3c1wiLCBhZGQpO1xuICAgIHZpZXcuc29tZVByb3AoXCJtYXJrVmlld3NcIiwgYWRkKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2hhbmdlZE5vZGVWaWV3cyhhLCBiKSB7XG4gICAgbGV0IG5BID0gMCwgbkIgPSAwO1xuICAgIGZvciAobGV0IHByb3AgaW4gYSkge1xuICAgICAgICBpZiAoYVtwcm9wXSAhPSBiW3Byb3BdKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIG5BKys7XG4gICAgfVxuICAgIGZvciAobGV0IF8gaW4gYilcbiAgICAgICAgbkIrKztcbiAgICByZXR1cm4gbkEgIT0gbkI7XG59XG5mdW5jdGlvbiBjaGVja1N0YXRlQ29tcG9uZW50KHBsdWdpbikge1xuICAgIGlmIChwbHVnaW4uc3BlYy5zdGF0ZSB8fCBwbHVnaW4uc3BlYy5maWx0ZXJUcmFuc2FjdGlvbiB8fCBwbHVnaW4uc3BlYy5hcHBlbmRUcmFuc2FjdGlvbilcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJQbHVnaW5zIHBhc3NlZCBkaXJlY3RseSB0byB0aGUgdmlldyBtdXN0IG5vdCBoYXZlIGEgc3RhdGUgY29tcG9uZW50XCIpO1xufVxuXG5leHBvcnQgeyBEZWNvcmF0aW9uLCBEZWNvcmF0aW9uU2V0LCBFZGl0b3JWaWV3LCBfX2VuZENvbXBvc2l0aW9uLCBfX3BhcnNlRnJvbUNsaXBib2FyZCB9O1xuIiwidmFyIEdPT0RfTEVBRl9TSVpFID0gMjAwO1xuXG4vLyA6OiBjbGFzczxUPiBBIHJvcGUgc2VxdWVuY2UgaXMgYSBwZXJzaXN0ZW50IHNlcXVlbmNlIGRhdGEgc3RydWN0dXJlXG4vLyB0aGF0IHN1cHBvcnRzIGFwcGVuZGluZywgcHJlcGVuZGluZywgYW5kIHNsaWNpbmcgd2l0aG91dCBkb2luZyBhXG4vLyBmdWxsIGNvcHkuIEl0IGlzIHJlcHJlc2VudGVkIGFzIGEgbW9zdGx5LWJhbGFuY2VkIHRyZWUuXG52YXIgUm9wZVNlcXVlbmNlID0gZnVuY3Rpb24gUm9wZVNlcXVlbmNlICgpIHt9O1xuXG5Sb3BlU2VxdWVuY2UucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZCAob3RoZXIpIHtcbiAgaWYgKCFvdGhlci5sZW5ndGgpIHsgcmV0dXJuIHRoaXMgfVxuICBvdGhlciA9IFJvcGVTZXF1ZW5jZS5mcm9tKG90aGVyKTtcblxuICByZXR1cm4gKCF0aGlzLmxlbmd0aCAmJiBvdGhlcikgfHxcbiAgICAob3RoZXIubGVuZ3RoIDwgR09PRF9MRUFGX1NJWkUgJiYgdGhpcy5sZWFmQXBwZW5kKG90aGVyKSkgfHxcbiAgICAodGhpcy5sZW5ndGggPCBHT09EX0xFQUZfU0laRSAmJiBvdGhlci5sZWFmUHJlcGVuZCh0aGlzKSkgfHxcbiAgICB0aGlzLmFwcGVuZElubmVyKG90aGVyKVxufTtcblxuLy8gOjogKHVuaW9uPFtUXSwgUm9wZVNlcXVlbmNlPFQ+Pikg4oaSIFJvcGVTZXF1ZW5jZTxUPlxuLy8gUHJlcGVuZCBhbiBhcnJheSBvciBvdGhlciByb3BlIHRvIHRoaXMgb25lLCByZXR1cm5pbmcgYSBuZXcgcm9wZS5cblJvcGVTZXF1ZW5jZS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uIHByZXBlbmQgKG90aGVyKSB7XG4gIGlmICghb3RoZXIubGVuZ3RoKSB7IHJldHVybiB0aGlzIH1cbiAgcmV0dXJuIFJvcGVTZXF1ZW5jZS5mcm9tKG90aGVyKS5hcHBlbmQodGhpcylcbn07XG5cblJvcGVTZXF1ZW5jZS5wcm90b3R5cGUuYXBwZW5kSW5uZXIgPSBmdW5jdGlvbiBhcHBlbmRJbm5lciAob3RoZXIpIHtcbiAgcmV0dXJuIG5ldyBBcHBlbmQodGhpcywgb3RoZXIpXG59O1xuXG4vLyA6OiAoP251bWJlciwgP251bWJlcikg4oaSIFJvcGVTZXF1ZW5jZTxUPlxuLy8gQ3JlYXRlIGEgcm9wZSByZXBlc2VudGluZyBhIHN1Yi1zZXF1ZW5jZSBvZiB0aGlzIHJvcGUuXG5Sb3BlU2VxdWVuY2UucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKGZyb20sIHRvKSB7XG4gICAgaWYgKCBmcm9tID09PSB2b2lkIDAgKSBmcm9tID0gMDtcbiAgICBpZiAoIHRvID09PSB2b2lkIDAgKSB0byA9IHRoaXMubGVuZ3RoO1xuXG4gIGlmIChmcm9tID49IHRvKSB7IHJldHVybiBSb3BlU2VxdWVuY2UuZW1wdHkgfVxuICByZXR1cm4gdGhpcy5zbGljZUlubmVyKE1hdGgubWF4KDAsIGZyb20pLCBNYXRoLm1pbih0aGlzLmxlbmd0aCwgdG8pKVxufTtcblxuLy8gOjogKG51bWJlcikg4oaSIFRcbi8vIFJldHJpZXZlIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBmcm9tIHRoaXMgcm9wZS5cblJvcGVTZXF1ZW5jZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChpKSB7XG4gIGlmIChpIDwgMCB8fCBpID49IHRoaXMubGVuZ3RoKSB7IHJldHVybiB1bmRlZmluZWQgfVxuICByZXR1cm4gdGhpcy5nZXRJbm5lcihpKVxufTtcblxuLy8gOjogKChlbGVtZW50OiBULCBpbmRleDogbnVtYmVyKSDihpIgP2Jvb2wsID9udW1iZXIsID9udW1iZXIpXG4vLyBDYWxsIHRoZSBnaXZlbiBmdW5jdGlvbiBmb3IgZWFjaCBlbGVtZW50IGJldHdlZW4gdGhlIGdpdmVuXG4vLyBpbmRpY2VzLiBUaGlzIHRlbmRzIHRvIGJlIG1vcmUgZWZmaWNpZW50IHRoYW4gbG9vcGluZyBvdmVyIHRoZVxuLy8gaW5kaWNlcyBhbmQgY2FsbGluZyBgZ2V0YCwgYmVjYXVzZSBpdCBkb2Vzbid0IGhhdmUgdG8gZGVzY2VuZCB0aGVcbi8vIHRyZWUgZm9yIGV2ZXJ5IGVsZW1lbnQuXG5Sb3BlU2VxdWVuY2UucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoIChmLCBmcm9tLCB0bykge1xuICAgIGlmICggZnJvbSA9PT0gdm9pZCAwICkgZnJvbSA9IDA7XG4gICAgaWYgKCB0byA9PT0gdm9pZCAwICkgdG8gPSB0aGlzLmxlbmd0aDtcblxuICBpZiAoZnJvbSA8PSB0bylcbiAgICB7IHRoaXMuZm9yRWFjaElubmVyKGYsIGZyb20sIHRvLCAwKTsgfVxuICBlbHNlXG4gICAgeyB0aGlzLmZvckVhY2hJbnZlcnRlZElubmVyKGYsIGZyb20sIHRvLCAwKTsgfVxufTtcblxuLy8gOjogKChlbGVtZW50OiBULCBpbmRleDogbnVtYmVyKSDihpIgVSwgP251bWJlciwgP251bWJlcikg4oaSIFtVXVxuLy8gTWFwIHRoZSBnaXZlbiBmdW5jdGlvbnMgb3ZlciB0aGUgZWxlbWVudHMgb2YgdGhlIHJvcGUsIHByb2R1Y2luZ1xuLy8gYSBmbGF0IGFycmF5LlxuUm9wZVNlcXVlbmNlLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBtYXAgKGYsIGZyb20sIHRvKSB7XG4gICAgaWYgKCBmcm9tID09PSB2b2lkIDAgKSBmcm9tID0gMDtcbiAgICBpZiAoIHRvID09PSB2b2lkIDAgKSB0byA9IHRoaXMubGVuZ3RoO1xuXG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbHQsIGkpIHsgcmV0dXJuIHJlc3VsdC5wdXNoKGYoZWx0LCBpKSk7IH0sIGZyb20sIHRvKTtcbiAgcmV0dXJuIHJlc3VsdFxufTtcblxuLy8gOjogKD91bmlvbjxbVF0sIFJvcGVTZXF1ZW5jZTxUPj4pIOKGkiBSb3BlU2VxdWVuY2U8VD5cbi8vIENyZWF0ZSBhIHJvcGUgcmVwcmVzZW50aW5nIHRoZSBnaXZlbiBhcnJheSwgb3IgcmV0dXJuIHRoZSByb3BlXG4vLyBpdHNlbGYgaWYgYSByb3BlIHdhcyBnaXZlbi5cblJvcGVTZXF1ZW5jZS5mcm9tID0gZnVuY3Rpb24gZnJvbSAodmFsdWVzKSB7XG4gIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBSb3BlU2VxdWVuY2UpIHsgcmV0dXJuIHZhbHVlcyB9XG4gIHJldHVybiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aCA/IG5ldyBMZWFmKHZhbHVlcykgOiBSb3BlU2VxdWVuY2UuZW1wdHlcbn07XG5cbnZhciBMZWFmID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoUm9wZVNlcXVlbmNlKSB7XG4gIGZ1bmN0aW9uIExlYWYodmFsdWVzKSB7XG4gICAgUm9wZVNlcXVlbmNlLmNhbGwodGhpcyk7XG4gICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XG4gIH1cblxuICBpZiAoIFJvcGVTZXF1ZW5jZSApIExlYWYuX19wcm90b19fID0gUm9wZVNlcXVlbmNlO1xuICBMZWFmLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFJvcGVTZXF1ZW5jZSAmJiBSb3BlU2VxdWVuY2UucHJvdG90eXBlICk7XG4gIExlYWYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGVhZjtcblxuICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBsZW5ndGg6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sZGVwdGg6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICBMZWFmLnByb3RvdHlwZS5mbGF0dGVuID0gZnVuY3Rpb24gZmxhdHRlbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzXG4gIH07XG5cbiAgTGVhZi5wcm90b3R5cGUuc2xpY2VJbm5lciA9IGZ1bmN0aW9uIHNsaWNlSW5uZXIgKGZyb20sIHRvKSB7XG4gICAgaWYgKGZyb20gPT0gMCAmJiB0byA9PSB0aGlzLmxlbmd0aCkgeyByZXR1cm4gdGhpcyB9XG4gICAgcmV0dXJuIG5ldyBMZWFmKHRoaXMudmFsdWVzLnNsaWNlKGZyb20sIHRvKSlcbiAgfTtcblxuICBMZWFmLnByb3RvdHlwZS5nZXRJbm5lciA9IGZ1bmN0aW9uIGdldElubmVyIChpKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzW2ldXG4gIH07XG5cbiAgTGVhZi5wcm90b3R5cGUuZm9yRWFjaElubmVyID0gZnVuY3Rpb24gZm9yRWFjaElubmVyIChmLCBmcm9tLCB0bywgc3RhcnQpIHtcbiAgICBmb3IgKHZhciBpID0gZnJvbTsgaSA8IHRvOyBpKyspXG4gICAgICB7IGlmIChmKHRoaXMudmFsdWVzW2ldLCBzdGFydCArIGkpID09PSBmYWxzZSkgeyByZXR1cm4gZmFsc2UgfSB9XG4gIH07XG5cbiAgTGVhZi5wcm90b3R5cGUuZm9yRWFjaEludmVydGVkSW5uZXIgPSBmdW5jdGlvbiBmb3JFYWNoSW52ZXJ0ZWRJbm5lciAoZiwgZnJvbSwgdG8sIHN0YXJ0KSB7XG4gICAgZm9yICh2YXIgaSA9IGZyb20gLSAxOyBpID49IHRvOyBpLS0pXG4gICAgICB7IGlmIChmKHRoaXMudmFsdWVzW2ldLCBzdGFydCArIGkpID09PSBmYWxzZSkgeyByZXR1cm4gZmFsc2UgfSB9XG4gIH07XG5cbiAgTGVhZi5wcm90b3R5cGUubGVhZkFwcGVuZCA9IGZ1bmN0aW9uIGxlYWZBcHBlbmQgKG90aGVyKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoICsgb3RoZXIubGVuZ3RoIDw9IEdPT0RfTEVBRl9TSVpFKVxuICAgICAgeyByZXR1cm4gbmV3IExlYWYodGhpcy52YWx1ZXMuY29uY2F0KG90aGVyLmZsYXR0ZW4oKSkpIH1cbiAgfTtcblxuICBMZWFmLnByb3RvdHlwZS5sZWFmUHJlcGVuZCA9IGZ1bmN0aW9uIGxlYWZQcmVwZW5kIChvdGhlcikge1xuICAgIGlmICh0aGlzLmxlbmd0aCArIG90aGVyLmxlbmd0aCA8PSBHT09EX0xFQUZfU0laRSlcbiAgICAgIHsgcmV0dXJuIG5ldyBMZWFmKG90aGVyLmZsYXR0ZW4oKS5jb25jYXQodGhpcy52YWx1ZXMpKSB9XG4gIH07XG5cbiAgcHJvdG90eXBlQWNjZXNzb3JzLmxlbmd0aC5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnZhbHVlcy5sZW5ndGggfTtcblxuICBwcm90b3R5cGVBY2Nlc3NvcnMuZGVwdGguZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gMCB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBMZWFmLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgcmV0dXJuIExlYWY7XG59KFJvcGVTZXF1ZW5jZSkpO1xuXG4vLyA6OiBSb3BlU2VxdWVuY2Vcbi8vIFRoZSBlbXB0eSByb3BlIHNlcXVlbmNlLlxuUm9wZVNlcXVlbmNlLmVtcHR5ID0gbmV3IExlYWYoW10pO1xuXG52YXIgQXBwZW5kID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoUm9wZVNlcXVlbmNlKSB7XG4gIGZ1bmN0aW9uIEFwcGVuZChsZWZ0LCByaWdodCkge1xuICAgIFJvcGVTZXF1ZW5jZS5jYWxsKHRoaXMpO1xuICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgIHRoaXMubGVuZ3RoID0gbGVmdC5sZW5ndGggKyByaWdodC5sZW5ndGg7XG4gICAgdGhpcy5kZXB0aCA9IE1hdGgubWF4KGxlZnQuZGVwdGgsIHJpZ2h0LmRlcHRoKSArIDE7XG4gIH1cblxuICBpZiAoIFJvcGVTZXF1ZW5jZSApIEFwcGVuZC5fX3Byb3RvX18gPSBSb3BlU2VxdWVuY2U7XG4gIEFwcGVuZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBSb3BlU2VxdWVuY2UgJiYgUm9wZVNlcXVlbmNlLnByb3RvdHlwZSApO1xuICBBcHBlbmQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXBwZW5kO1xuXG4gIEFwcGVuZC5wcm90b3R5cGUuZmxhdHRlbiA9IGZ1bmN0aW9uIGZsYXR0ZW4gKCkge1xuICAgIHJldHVybiB0aGlzLmxlZnQuZmxhdHRlbigpLmNvbmNhdCh0aGlzLnJpZ2h0LmZsYXR0ZW4oKSlcbiAgfTtcblxuICBBcHBlbmQucHJvdG90eXBlLmdldElubmVyID0gZnVuY3Rpb24gZ2V0SW5uZXIgKGkpIHtcbiAgICByZXR1cm4gaSA8IHRoaXMubGVmdC5sZW5ndGggPyB0aGlzLmxlZnQuZ2V0KGkpIDogdGhpcy5yaWdodC5nZXQoaSAtIHRoaXMubGVmdC5sZW5ndGgpXG4gIH07XG5cbiAgQXBwZW5kLnByb3RvdHlwZS5mb3JFYWNoSW5uZXIgPSBmdW5jdGlvbiBmb3JFYWNoSW5uZXIgKGYsIGZyb20sIHRvLCBzdGFydCkge1xuICAgIHZhciBsZWZ0TGVuID0gdGhpcy5sZWZ0Lmxlbmd0aDtcbiAgICBpZiAoZnJvbSA8IGxlZnRMZW4gJiZcbiAgICAgICAgdGhpcy5sZWZ0LmZvckVhY2hJbm5lcihmLCBmcm9tLCBNYXRoLm1pbih0bywgbGVmdExlbiksIHN0YXJ0KSA9PT0gZmFsc2UpXG4gICAgICB7IHJldHVybiBmYWxzZSB9XG4gICAgaWYgKHRvID4gbGVmdExlbiAmJlxuICAgICAgICB0aGlzLnJpZ2h0LmZvckVhY2hJbm5lcihmLCBNYXRoLm1heChmcm9tIC0gbGVmdExlbiwgMCksIE1hdGgubWluKHRoaXMubGVuZ3RoLCB0bykgLSBsZWZ0TGVuLCBzdGFydCArIGxlZnRMZW4pID09PSBmYWxzZSlcbiAgICAgIHsgcmV0dXJuIGZhbHNlIH1cbiAgfTtcblxuICBBcHBlbmQucHJvdG90eXBlLmZvckVhY2hJbnZlcnRlZElubmVyID0gZnVuY3Rpb24gZm9yRWFjaEludmVydGVkSW5uZXIgKGYsIGZyb20sIHRvLCBzdGFydCkge1xuICAgIHZhciBsZWZ0TGVuID0gdGhpcy5sZWZ0Lmxlbmd0aDtcbiAgICBpZiAoZnJvbSA+IGxlZnRMZW4gJiZcbiAgICAgICAgdGhpcy5yaWdodC5mb3JFYWNoSW52ZXJ0ZWRJbm5lcihmLCBmcm9tIC0gbGVmdExlbiwgTWF0aC5tYXgodG8sIGxlZnRMZW4pIC0gbGVmdExlbiwgc3RhcnQgKyBsZWZ0TGVuKSA9PT0gZmFsc2UpXG4gICAgICB7IHJldHVybiBmYWxzZSB9XG4gICAgaWYgKHRvIDwgbGVmdExlbiAmJlxuICAgICAgICB0aGlzLmxlZnQuZm9yRWFjaEludmVydGVkSW5uZXIoZiwgTWF0aC5taW4oZnJvbSwgbGVmdExlbiksIHRvLCBzdGFydCkgPT09IGZhbHNlKVxuICAgICAgeyByZXR1cm4gZmFsc2UgfVxuICB9O1xuXG4gIEFwcGVuZC5wcm90b3R5cGUuc2xpY2VJbm5lciA9IGZ1bmN0aW9uIHNsaWNlSW5uZXIgKGZyb20sIHRvKSB7XG4gICAgaWYgKGZyb20gPT0gMCAmJiB0byA9PSB0aGlzLmxlbmd0aCkgeyByZXR1cm4gdGhpcyB9XG4gICAgdmFyIGxlZnRMZW4gPSB0aGlzLmxlZnQubGVuZ3RoO1xuICAgIGlmICh0byA8PSBsZWZ0TGVuKSB7IHJldHVybiB0aGlzLmxlZnQuc2xpY2UoZnJvbSwgdG8pIH1cbiAgICBpZiAoZnJvbSA+PSBsZWZ0TGVuKSB7IHJldHVybiB0aGlzLnJpZ2h0LnNsaWNlKGZyb20gLSBsZWZ0TGVuLCB0byAtIGxlZnRMZW4pIH1cbiAgICByZXR1cm4gdGhpcy5sZWZ0LnNsaWNlKGZyb20sIGxlZnRMZW4pLmFwcGVuZCh0aGlzLnJpZ2h0LnNsaWNlKDAsIHRvIC0gbGVmdExlbikpXG4gIH07XG5cbiAgQXBwZW5kLnByb3RvdHlwZS5sZWFmQXBwZW5kID0gZnVuY3Rpb24gbGVhZkFwcGVuZCAob3RoZXIpIHtcbiAgICB2YXIgaW5uZXIgPSB0aGlzLnJpZ2h0LmxlYWZBcHBlbmQob3RoZXIpO1xuICAgIGlmIChpbm5lcikgeyByZXR1cm4gbmV3IEFwcGVuZCh0aGlzLmxlZnQsIGlubmVyKSB9XG4gIH07XG5cbiAgQXBwZW5kLnByb3RvdHlwZS5sZWFmUHJlcGVuZCA9IGZ1bmN0aW9uIGxlYWZQcmVwZW5kIChvdGhlcikge1xuICAgIHZhciBpbm5lciA9IHRoaXMubGVmdC5sZWFmUHJlcGVuZChvdGhlcik7XG4gICAgaWYgKGlubmVyKSB7IHJldHVybiBuZXcgQXBwZW5kKGlubmVyLCB0aGlzLnJpZ2h0KSB9XG4gIH07XG5cbiAgQXBwZW5kLnByb3RvdHlwZS5hcHBlbmRJbm5lciA9IGZ1bmN0aW9uIGFwcGVuZElubmVyIChvdGhlcikge1xuICAgIGlmICh0aGlzLmxlZnQuZGVwdGggPj0gTWF0aC5tYXgodGhpcy5yaWdodC5kZXB0aCwgb3RoZXIuZGVwdGgpICsgMSlcbiAgICAgIHsgcmV0dXJuIG5ldyBBcHBlbmQodGhpcy5sZWZ0LCBuZXcgQXBwZW5kKHRoaXMucmlnaHQsIG90aGVyKSkgfVxuICAgIHJldHVybiBuZXcgQXBwZW5kKHRoaXMsIG90aGVyKVxuICB9O1xuXG4gIHJldHVybiBBcHBlbmQ7XG59KFJvcGVTZXF1ZW5jZSkpO1xuXG5leHBvcnQgZGVmYXVsdCBSb3BlU2VxdWVuY2U7XG4iLCJpbXBvcnQgUm9wZVNlcXVlbmNlIGZyb20gJ3JvcGUtc2VxdWVuY2UnO1xuaW1wb3J0IHsgTWFwcGluZyB9IGZyb20gJ3Byb3NlbWlycm9yLXRyYW5zZm9ybSc7XG5pbXBvcnQgeyBQbHVnaW5LZXksIFBsdWdpbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcblxuLy8gUHJvc2VNaXJyb3IncyBoaXN0b3J5IGlzbid0IHNpbXBseSBhIHdheSB0byByb2xsIGJhY2sgdG8gYSBwcmV2aW91c1xuLy8gc3RhdGUsIGJlY2F1c2UgUHJvc2VNaXJyb3Igc3VwcG9ydHMgYXBwbHlpbmcgY2hhbmdlcyB3aXRob3V0IGFkZGluZ1xuLy8gdGhlbSB0byB0aGUgaGlzdG9yeSAoZm9yIGV4YW1wbGUgZHVyaW5nIGNvbGxhYm9yYXRpb24pLlxuLy9cbi8vIFRvIHRoaXMgZW5kLCBlYWNoICdCcmFuY2gnIChvbmUgZm9yIHRoZSB1bmRvIGhpc3RvcnkgYW5kIG9uZSBmb3Jcbi8vIHRoZSByZWRvIGhpc3RvcnkpIGtlZXBzIGFuIGFycmF5IG9mICdJdGVtcycsIHdoaWNoIGNhbiBvcHRpb25hbGx5XG4vLyBob2xkIGEgc3RlcCAoYW4gYWN0dWFsIHVuZG9hYmxlIGNoYW5nZSksIGFuZCBhbHdheXMgaG9sZCBhIHBvc2l0aW9uXG4vLyBtYXAgKHdoaWNoIGlzIG5lZWRlZCB0byBtb3ZlIGNoYW5nZXMgYmVsb3cgdGhlbSB0byBhcHBseSB0byB0aGVcbi8vIGN1cnJlbnQgZG9jdW1lbnQpLlxuLy9cbi8vIEFuIGl0ZW0gdGhhdCBoYXMgYm90aCBhIHN0ZXAgYW5kIGEgc2VsZWN0aW9uIGJvb2ttYXJrIGlzIHRoZSBzdGFydFxuLy8gb2YgYW4gJ2V2ZW50JyDigJQgYSBncm91cCBvZiBjaGFuZ2VzIHRoYXQgd2lsbCBiZSB1bmRvbmUgb3IgcmVkb25lIGF0XG4vLyBvbmNlLiAoSXQgc3RvcmVzIG9ubHkgdGhlIGJvb2ttYXJrLCBzaW5jZSB0aGF0IHdheSB3ZSBkb24ndCBoYXZlIHRvXG4vLyBwcm92aWRlIGEgZG9jdW1lbnQgdW50aWwgdGhlIHNlbGVjdGlvbiBpcyBhY3R1YWxseSBhcHBsaWVkLCB3aGljaFxuLy8gaXMgdXNlZnVsIHdoZW4gY29tcHJlc3NpbmcuKVxuLy8gVXNlZCB0byBzY2hlZHVsZSBoaXN0b3J5IGNvbXByZXNzaW9uXG5jb25zdCBtYXhfZW1wdHlfaXRlbXMgPSA1MDA7XG5jbGFzcyBCcmFuY2gge1xuICAgIGNvbnN0cnVjdG9yKGl0ZW1zLCBldmVudENvdW50KSB7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcbiAgICAgICAgdGhpcy5ldmVudENvdW50ID0gZXZlbnRDb3VudDtcbiAgICB9XG4gICAgLy8gUG9wIHRoZSBsYXRlc3QgZXZlbnQgb2ZmIHRoZSBicmFuY2gncyBoaXN0b3J5IGFuZCBhcHBseSBpdFxuICAgIC8vIHRvIGEgZG9jdW1lbnQgdHJhbnNmb3JtLlxuICAgIHBvcEV2ZW50KHN0YXRlLCBwcmVzZXJ2ZUl0ZW1zKSB7XG4gICAgICAgIGlmICh0aGlzLmV2ZW50Q291bnQgPT0gMClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBsZXQgZW5kID0gdGhpcy5pdGVtcy5sZW5ndGg7XG4gICAgICAgIGZvciAoOzsgZW5kLS0pIHtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy5pdGVtcy5nZXQoZW5kIC0gMSk7XG4gICAgICAgICAgICBpZiAobmV4dC5zZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAtLWVuZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVtYXAsIG1hcEZyb207XG4gICAgICAgIGlmIChwcmVzZXJ2ZUl0ZW1zKSB7XG4gICAgICAgICAgICByZW1hcCA9IHRoaXMucmVtYXBwaW5nKGVuZCwgdGhpcy5pdGVtcy5sZW5ndGgpO1xuICAgICAgICAgICAgbWFwRnJvbSA9IHJlbWFwLm1hcHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0cmFuc2Zvcm0gPSBzdGF0ZS50cjtcbiAgICAgICAgbGV0IHNlbGVjdGlvbiwgcmVtYWluaW5nO1xuICAgICAgICBsZXQgYWRkQWZ0ZXIgPSBbXSwgYWRkQmVmb3JlID0gW107XG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFpdGVtLnN0ZXApIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlbWFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbWFwID0gdGhpcy5yZW1hcHBpbmcoZW5kLCBpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgIG1hcEZyb20gPSByZW1hcC5tYXBzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFwRnJvbS0tO1xuICAgICAgICAgICAgICAgIGFkZEJlZm9yZS5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZW1hcCkge1xuICAgICAgICAgICAgICAgIGFkZEJlZm9yZS5wdXNoKG5ldyBJdGVtKGl0ZW0ubWFwKSk7XG4gICAgICAgICAgICAgICAgbGV0IHN0ZXAgPSBpdGVtLnN0ZXAubWFwKHJlbWFwLnNsaWNlKG1hcEZyb20pKSwgbWFwO1xuICAgICAgICAgICAgICAgIGlmIChzdGVwICYmIHRyYW5zZm9ybS5tYXliZVN0ZXAoc3RlcCkuZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcCA9IHRyYW5zZm9ybS5tYXBwaW5nLm1hcHNbdHJhbnNmb3JtLm1hcHBpbmcubWFwcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgYWRkQWZ0ZXIucHVzaChuZXcgSXRlbShtYXAsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhZGRBZnRlci5sZW5ndGggKyBhZGRCZWZvcmUubGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1hcEZyb20tLTtcbiAgICAgICAgICAgICAgICBpZiAobWFwKVxuICAgICAgICAgICAgICAgICAgICByZW1hcC5hcHBlbmRNYXAobWFwLCBtYXBGcm9tKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybS5tYXliZVN0ZXAoaXRlbS5zdGVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtLnNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9IHJlbWFwID8gaXRlbS5zZWxlY3Rpb24ubWFwKHJlbWFwLnNsaWNlKG1hcEZyb20pKSA6IGl0ZW0uc2VsZWN0aW9uO1xuICAgICAgICAgICAgICAgIHJlbWFpbmluZyA9IG5ldyBCcmFuY2godGhpcy5pdGVtcy5zbGljZSgwLCBlbmQpLmFwcGVuZChhZGRCZWZvcmUucmV2ZXJzZSgpLmNvbmNhdChhZGRBZnRlcikpLCB0aGlzLmV2ZW50Q291bnQgLSAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMuaXRlbXMubGVuZ3RoLCAwKTtcbiAgICAgICAgcmV0dXJuIHsgcmVtYWluaW5nOiByZW1haW5pbmcsIHRyYW5zZm9ybSwgc2VsZWN0aW9uOiBzZWxlY3Rpb24gfTtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGEgbmV3IGJyYW5jaCB3aXRoIHRoZSBnaXZlbiB0cmFuc2Zvcm0gYWRkZWQuXG4gICAgYWRkVHJhbnNmb3JtKHRyYW5zZm9ybSwgc2VsZWN0aW9uLCBoaXN0T3B0aW9ucywgcHJlc2VydmVJdGVtcykge1xuICAgICAgICBsZXQgbmV3SXRlbXMgPSBbXSwgZXZlbnRDb3VudCA9IHRoaXMuZXZlbnRDb3VudDtcbiAgICAgICAgbGV0IG9sZEl0ZW1zID0gdGhpcy5pdGVtcywgbGFzdEl0ZW0gPSAhcHJlc2VydmVJdGVtcyAmJiBvbGRJdGVtcy5sZW5ndGggPyBvbGRJdGVtcy5nZXQob2xkSXRlbXMubGVuZ3RoIC0gMSkgOiBudWxsO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYW5zZm9ybS5zdGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHN0ZXAgPSB0cmFuc2Zvcm0uc3RlcHNbaV0uaW52ZXJ0KHRyYW5zZm9ybS5kb2NzW2ldKTtcbiAgICAgICAgICAgIGxldCBpdGVtID0gbmV3IEl0ZW0odHJhbnNmb3JtLm1hcHBpbmcubWFwc1tpXSwgc3RlcCwgc2VsZWN0aW9uKSwgbWVyZ2VkO1xuICAgICAgICAgICAgaWYgKG1lcmdlZCA9IGxhc3RJdGVtICYmIGxhc3RJdGVtLm1lcmdlKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgaXRlbSA9IG1lcmdlZDtcbiAgICAgICAgICAgICAgICBpZiAoaSlcbiAgICAgICAgICAgICAgICAgICAgbmV3SXRlbXMucG9wKCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvbGRJdGVtcyA9IG9sZEl0ZW1zLnNsaWNlKDAsIG9sZEl0ZW1zLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3SXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBldmVudENvdW50Kys7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwcmVzZXJ2ZUl0ZW1zKVxuICAgICAgICAgICAgICAgIGxhc3RJdGVtID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3ZlcmZsb3cgPSBldmVudENvdW50IC0gaGlzdE9wdGlvbnMuZGVwdGg7XG4gICAgICAgIGlmIChvdmVyZmxvdyA+IERFUFRIX09WRVJGTE9XKSB7XG4gICAgICAgICAgICBvbGRJdGVtcyA9IGN1dE9mZkV2ZW50cyhvbGRJdGVtcywgb3ZlcmZsb3cpO1xuICAgICAgICAgICAgZXZlbnRDb3VudCAtPSBvdmVyZmxvdztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEJyYW5jaChvbGRJdGVtcy5hcHBlbmQobmV3SXRlbXMpLCBldmVudENvdW50KTtcbiAgICB9XG4gICAgcmVtYXBwaW5nKGZyb20sIHRvKSB7XG4gICAgICAgIGxldCBtYXBzID0gbmV3IE1hcHBpbmc7XG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgbGV0IG1pcnJvclBvcyA9IGl0ZW0ubWlycm9yT2Zmc2V0ICE9IG51bGwgJiYgaSAtIGl0ZW0ubWlycm9yT2Zmc2V0ID49IGZyb21cbiAgICAgICAgICAgICAgICA/IG1hcHMubWFwcy5sZW5ndGggLSBpdGVtLm1pcnJvck9mZnNldCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIG1hcHMuYXBwZW5kTWFwKGl0ZW0ubWFwLCBtaXJyb3JQb3MpO1xuICAgICAgICB9LCBmcm9tLCB0byk7XG4gICAgICAgIHJldHVybiBtYXBzO1xuICAgIH1cbiAgICBhZGRNYXBzKGFycmF5KSB7XG4gICAgICAgIGlmICh0aGlzLmV2ZW50Q291bnQgPT0gMClcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IEJyYW5jaCh0aGlzLml0ZW1zLmFwcGVuZChhcnJheS5tYXAobWFwID0+IG5ldyBJdGVtKG1hcCkpKSwgdGhpcy5ldmVudENvdW50KTtcbiAgICB9XG4gICAgLy8gV2hlbiB0aGUgY29sbGFiIG1vZHVsZSByZWNlaXZlcyByZW1vdGUgY2hhbmdlcywgdGhlIGhpc3RvcnkgaGFzXG4gICAgLy8gdG8ga25vdyBhYm91dCB0aG9zZSwgc28gdGhhdCBpdCBjYW4gYWRqdXN0IHRoZSBzdGVwcyB0aGF0IHdlcmVcbiAgICAvLyByZWJhc2VkIG9uIHRvcCBvZiB0aGUgcmVtb3RlIGNoYW5nZXMsIGFuZCBpbmNsdWRlIHRoZSBwb3NpdGlvblxuICAgIC8vIG1hcHMgZm9yIHRoZSByZW1vdGUgY2hhbmdlcyBpbiBpdHMgYXJyYXkgb2YgaXRlbXMuXG4gICAgcmViYXNlZChyZWJhc2VkVHJhbnNmb3JtLCByZWJhc2VkQ291bnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmV2ZW50Q291bnQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgbGV0IHJlYmFzZWRJdGVtcyA9IFtdLCBzdGFydCA9IE1hdGgubWF4KDAsIHRoaXMuaXRlbXMubGVuZ3RoIC0gcmViYXNlZENvdW50KTtcbiAgICAgICAgbGV0IG1hcHBpbmcgPSByZWJhc2VkVHJhbnNmb3JtLm1hcHBpbmc7XG4gICAgICAgIGxldCBuZXdVbnRpbCA9IHJlYmFzZWRUcmFuc2Zvcm0uc3RlcHMubGVuZ3RoO1xuICAgICAgICBsZXQgZXZlbnRDb3VudCA9IHRoaXMuZXZlbnRDb3VudDtcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4geyBpZiAoaXRlbS5zZWxlY3Rpb24pXG4gICAgICAgICAgICBldmVudENvdW50LS07IH0sIHN0YXJ0KTtcbiAgICAgICAgbGV0IGlSZWJhc2VkID0gcmViYXNlZENvdW50O1xuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICBsZXQgcG9zID0gbWFwcGluZy5nZXRNaXJyb3IoLS1pUmViYXNlZCk7XG4gICAgICAgICAgICBpZiAocG9zID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbmV3VW50aWwgPSBNYXRoLm1pbihuZXdVbnRpbCwgcG9zKTtcbiAgICAgICAgICAgIGxldCBtYXAgPSBtYXBwaW5nLm1hcHNbcG9zXTtcbiAgICAgICAgICAgIGlmIChpdGVtLnN0ZXApIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RlcCA9IHJlYmFzZWRUcmFuc2Zvcm0uc3RlcHNbcG9zXS5pbnZlcnQocmViYXNlZFRyYW5zZm9ybS5kb2NzW3Bvc10pO1xuICAgICAgICAgICAgICAgIGxldCBzZWxlY3Rpb24gPSBpdGVtLnNlbGVjdGlvbiAmJiBpdGVtLnNlbGVjdGlvbi5tYXAobWFwcGluZy5zbGljZShpUmViYXNlZCArIDEsIHBvcykpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb24pXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Q291bnQrKztcbiAgICAgICAgICAgICAgICByZWJhc2VkSXRlbXMucHVzaChuZXcgSXRlbShtYXAsIHN0ZXAsIHNlbGVjdGlvbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmViYXNlZEl0ZW1zLnB1c2gobmV3IEl0ZW0obWFwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHN0YXJ0KTtcbiAgICAgICAgbGV0IG5ld01hcHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHJlYmFzZWRDb3VudDsgaSA8IG5ld1VudGlsOyBpKyspXG4gICAgICAgICAgICBuZXdNYXBzLnB1c2gobmV3IEl0ZW0obWFwcGluZy5tYXBzW2ldKSk7XG4gICAgICAgIGxldCBpdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UoMCwgc3RhcnQpLmFwcGVuZChuZXdNYXBzKS5hcHBlbmQocmViYXNlZEl0ZW1zKTtcbiAgICAgICAgbGV0IGJyYW5jaCA9IG5ldyBCcmFuY2goaXRlbXMsIGV2ZW50Q291bnQpO1xuICAgICAgICBpZiAoYnJhbmNoLmVtcHR5SXRlbUNvdW50KCkgPiBtYXhfZW1wdHlfaXRlbXMpXG4gICAgICAgICAgICBicmFuY2ggPSBicmFuY2guY29tcHJlc3ModGhpcy5pdGVtcy5sZW5ndGggLSByZWJhc2VkSXRlbXMubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGJyYW5jaDtcbiAgICB9XG4gICAgZW1wdHlJdGVtQ291bnQoKSB7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChpdGVtID0+IHsgaWYgKCFpdGVtLnN0ZXApXG4gICAgICAgICAgICBjb3VudCsrOyB9KTtcbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cbiAgICAvLyBDb21wcmVzc2luZyBhIGJyYW5jaCBtZWFucyByZXdyaXRpbmcgaXQgdG8gcHVzaCB0aGUgYWlyIChtYXAtb25seVxuICAgIC8vIGl0ZW1zKSBvdXQuIER1cmluZyBjb2xsYWJvcmF0aW9uLCB0aGVzZSBuYXR1cmFsbHkgYWNjdW11bGF0ZVxuICAgIC8vIGJlY2F1c2UgZWFjaCByZW1vdGUgY2hhbmdlIGFkZHMgb25lLiBUaGUgYHVwdG9gIGFyZ3VtZW50IGlzIHVzZWRcbiAgICAvLyB0byBlbnN1cmUgdGhhdCBvbmx5IHRoZSBpdGVtcyBiZWxvdyBhIGdpdmVuIGxldmVsIGFyZSBjb21wcmVzc2VkLFxuICAgIC8vIGJlY2F1c2UgYHJlYmFzZWRgIHJlbGllcyBvbiBhIGNsZWFuLCB1bnRvdWNoZWQgc2V0IG9mIGl0ZW1zIGluXG4gICAgLy8gb3JkZXIgdG8gYXNzb2NpYXRlIG9sZCBpdGVtcyB3aXRoIHJlYmFzZWQgc3RlcHMuXG4gICAgY29tcHJlc3ModXB0byA9IHRoaXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIGxldCByZW1hcCA9IHRoaXMucmVtYXBwaW5nKDAsIHVwdG8pLCBtYXBGcm9tID0gcmVtYXAubWFwcy5sZW5ndGg7XG4gICAgICAgIGxldCBpdGVtcyA9IFtdLCBldmVudHMgPSAwO1xuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcbiAgICAgICAgICAgIGlmIChpID49IHVwdG8pIHtcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLnNlbGVjdGlvbilcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpdGVtLnN0ZXApIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RlcCA9IGl0ZW0uc3RlcC5tYXAocmVtYXAuc2xpY2UobWFwRnJvbSkpLCBtYXAgPSBzdGVwICYmIHN0ZXAuZ2V0TWFwKCk7XG4gICAgICAgICAgICAgICAgbWFwRnJvbS0tO1xuICAgICAgICAgICAgICAgIGlmIChtYXApXG4gICAgICAgICAgICAgICAgICAgIHJlbWFwLmFwcGVuZE1hcChtYXAsIG1hcEZyb20pO1xuICAgICAgICAgICAgICAgIGlmIChzdGVwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWxlY3Rpb24gPSBpdGVtLnNlbGVjdGlvbiAmJiBpdGVtLnNlbGVjdGlvbi5tYXAocmVtYXAuc2xpY2UobWFwRnJvbSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzKys7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdJdGVtID0gbmV3IEl0ZW0obWFwLmludmVydCgpLCBzdGVwLCBzZWxlY3Rpb24pLCBtZXJnZWQsIGxhc3QgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVyZ2VkID0gaXRlbXMubGVuZ3RoICYmIGl0ZW1zW2xhc3RdLm1lcmdlKG5ld0l0ZW0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNbbGFzdF0gPSBtZXJnZWQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2gobmV3SXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS5tYXApIHtcbiAgICAgICAgICAgICAgICBtYXBGcm9tLS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMuaXRlbXMubGVuZ3RoLCAwKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCcmFuY2goUm9wZVNlcXVlbmNlLmZyb20oaXRlbXMucmV2ZXJzZSgpKSwgZXZlbnRzKTtcbiAgICB9XG59XG5CcmFuY2guZW1wdHkgPSBuZXcgQnJhbmNoKFJvcGVTZXF1ZW5jZS5lbXB0eSwgMCk7XG5mdW5jdGlvbiBjdXRPZmZFdmVudHMoaXRlbXMsIG4pIHtcbiAgICBsZXQgY3V0UG9pbnQ7XG4gICAgaXRlbXMuZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5zZWxlY3Rpb24gJiYgKG4tLSA9PSAwKSkge1xuICAgICAgICAgICAgY3V0UG9pbnQgPSBpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGl0ZW1zLnNsaWNlKGN1dFBvaW50KTtcbn1cbmNsYXNzIEl0ZW0ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8vIFRoZSAoZm9yd2FyZCkgc3RlcCBtYXAgZm9yIHRoaXMgaXRlbS5cbiAgICBtYXAsIFxuICAgIC8vIFRoZSBpbnZlcnRlZCBzdGVwXG4gICAgc3RlcCwgXG4gICAgLy8gSWYgdGhpcyBpcyBub24tbnVsbCwgdGhpcyBpdGVtIGlzIHRoZSBzdGFydCBvZiBhIGdyb3VwLCBhbmRcbiAgICAvLyB0aGlzIHNlbGVjdGlvbiBpcyB0aGUgc3RhcnRpbmcgc2VsZWN0aW9uIGZvciB0aGUgZ3JvdXAgKHRoZSBvbmVcbiAgICAvLyB0aGF0IHdhcyBhY3RpdmUgYmVmb3JlIHRoZSBmaXJzdCBzdGVwIHdhcyBhcHBsaWVkKVxuICAgIHNlbGVjdGlvbiwgXG4gICAgLy8gSWYgdGhpcyBpdGVtIGlzIHRoZSBpbnZlcnNlIG9mIGEgcHJldmlvdXMgbWFwcGluZyBvbiB0aGUgc3RhY2ssXG4gICAgLy8gdGhpcyBwb2ludHMgYXQgdGhlIGludmVyc2UncyBvZmZzZXRcbiAgICBtaXJyb3JPZmZzZXQpIHtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuc3RlcCA9IHN0ZXA7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uID0gc2VsZWN0aW9uO1xuICAgICAgICB0aGlzLm1pcnJvck9mZnNldCA9IG1pcnJvck9mZnNldDtcbiAgICB9XG4gICAgbWVyZ2Uob3RoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RlcCAmJiBvdGhlci5zdGVwICYmICFvdGhlci5zZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGxldCBzdGVwID0gb3RoZXIuc3RlcC5tZXJnZSh0aGlzLnN0ZXApO1xuICAgICAgICAgICAgaWYgKHN0ZXApXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVtKHN0ZXAuZ2V0TWFwKCkuaW52ZXJ0KCksIHN0ZXAsIHRoaXMuc2VsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIFRoZSB2YWx1ZSBvZiB0aGUgc3RhdGUgZmllbGQgdGhhdCB0cmFja3MgdW5kby9yZWRvIGhpc3RvcnkgZm9yIHRoYXRcbi8vIHN0YXRlLiBXaWxsIGJlIHN0b3JlZCBpbiB0aGUgcGx1Z2luIHN0YXRlIHdoZW4gdGhlIGhpc3RvcnkgcGx1Z2luXG4vLyBpcyBhY3RpdmUuXG5jbGFzcyBIaXN0b3J5U3RhdGUge1xuICAgIGNvbnN0cnVjdG9yKGRvbmUsIHVuZG9uZSwgcHJldlJhbmdlcywgcHJldlRpbWUsIHByZXZDb21wb3NpdGlvbikge1xuICAgICAgICB0aGlzLmRvbmUgPSBkb25lO1xuICAgICAgICB0aGlzLnVuZG9uZSA9IHVuZG9uZTtcbiAgICAgICAgdGhpcy5wcmV2UmFuZ2VzID0gcHJldlJhbmdlcztcbiAgICAgICAgdGhpcy5wcmV2VGltZSA9IHByZXZUaW1lO1xuICAgICAgICB0aGlzLnByZXZDb21wb3NpdGlvbiA9IHByZXZDb21wb3NpdGlvbjtcbiAgICB9XG59XG5jb25zdCBERVBUSF9PVkVSRkxPVyA9IDIwO1xuLy8gUmVjb3JkIGEgdHJhbnNmb3JtYXRpb24gaW4gdW5kbyBoaXN0b3J5LlxuZnVuY3Rpb24gYXBwbHlUcmFuc2FjdGlvbihoaXN0b3J5LCBzdGF0ZSwgdHIsIG9wdGlvbnMpIHtcbiAgICBsZXQgaGlzdG9yeVRyID0gdHIuZ2V0TWV0YShoaXN0b3J5S2V5KSwgcmViYXNlZDtcbiAgICBpZiAoaGlzdG9yeVRyKVxuICAgICAgICByZXR1cm4gaGlzdG9yeVRyLmhpc3RvcnlTdGF0ZTtcbiAgICBpZiAodHIuZ2V0TWV0YShjbG9zZUhpc3RvcnlLZXkpKVxuICAgICAgICBoaXN0b3J5ID0gbmV3IEhpc3RvcnlTdGF0ZShoaXN0b3J5LmRvbmUsIGhpc3RvcnkudW5kb25lLCBudWxsLCAwLCAtMSk7XG4gICAgbGV0IGFwcGVuZGVkID0gdHIuZ2V0TWV0YShcImFwcGVuZGVkVHJhbnNhY3Rpb25cIik7XG4gICAgaWYgKHRyLnN0ZXBzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJldHVybiBoaXN0b3J5O1xuICAgIH1cbiAgICBlbHNlIGlmIChhcHBlbmRlZCAmJiBhcHBlbmRlZC5nZXRNZXRhKGhpc3RvcnlLZXkpKSB7XG4gICAgICAgIGlmIChhcHBlbmRlZC5nZXRNZXRhKGhpc3RvcnlLZXkpLnJlZG8pXG4gICAgICAgICAgICByZXR1cm4gbmV3IEhpc3RvcnlTdGF0ZShoaXN0b3J5LmRvbmUuYWRkVHJhbnNmb3JtKHRyLCB1bmRlZmluZWQsIG9wdGlvbnMsIG11c3RQcmVzZXJ2ZUl0ZW1zKHN0YXRlKSksIGhpc3RvcnkudW5kb25lLCByYW5nZXNGb3IodHIubWFwcGluZy5tYXBzKSwgaGlzdG9yeS5wcmV2VGltZSwgaGlzdG9yeS5wcmV2Q29tcG9zaXRpb24pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gbmV3IEhpc3RvcnlTdGF0ZShoaXN0b3J5LmRvbmUsIGhpc3RvcnkudW5kb25lLmFkZFRyYW5zZm9ybSh0ciwgdW5kZWZpbmVkLCBvcHRpb25zLCBtdXN0UHJlc2VydmVJdGVtcyhzdGF0ZSkpLCBudWxsLCBoaXN0b3J5LnByZXZUaW1lLCBoaXN0b3J5LnByZXZDb21wb3NpdGlvbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRyLmdldE1ldGEoXCJhZGRUb0hpc3RvcnlcIikgIT09IGZhbHNlICYmICEoYXBwZW5kZWQgJiYgYXBwZW5kZWQuZ2V0TWV0YShcImFkZFRvSGlzdG9yeVwiKSA9PT0gZmFsc2UpKSB7XG4gICAgICAgIC8vIEdyb3VwIHRyYW5zZm9ybXMgdGhhdCBvY2N1ciBpbiBxdWljayBzdWNjZXNzaW9uIGludG8gb25lIGV2ZW50LlxuICAgICAgICBsZXQgY29tcG9zaXRpb24gPSB0ci5nZXRNZXRhKFwiY29tcG9zaXRpb25cIik7XG4gICAgICAgIGxldCBuZXdHcm91cCA9IGhpc3RvcnkucHJldlRpbWUgPT0gMCB8fFxuICAgICAgICAgICAgKCFhcHBlbmRlZCAmJiBoaXN0b3J5LnByZXZDb21wb3NpdGlvbiAhPSBjb21wb3NpdGlvbiAmJlxuICAgICAgICAgICAgICAgIChoaXN0b3J5LnByZXZUaW1lIDwgKHRyLnRpbWUgfHwgMCkgLSBvcHRpb25zLm5ld0dyb3VwRGVsYXkgfHwgIWlzQWRqYWNlbnRUbyh0ciwgaGlzdG9yeS5wcmV2UmFuZ2VzKSkpO1xuICAgICAgICBsZXQgcHJldlJhbmdlcyA9IGFwcGVuZGVkID8gbWFwUmFuZ2VzKGhpc3RvcnkucHJldlJhbmdlcywgdHIubWFwcGluZykgOiByYW5nZXNGb3IodHIubWFwcGluZy5tYXBzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBIaXN0b3J5U3RhdGUoaGlzdG9yeS5kb25lLmFkZFRyYW5zZm9ybSh0ciwgbmV3R3JvdXAgPyBzdGF0ZS5zZWxlY3Rpb24uZ2V0Qm9va21hcmsoKSA6IHVuZGVmaW5lZCwgb3B0aW9ucywgbXVzdFByZXNlcnZlSXRlbXMoc3RhdGUpKSwgQnJhbmNoLmVtcHR5LCBwcmV2UmFuZ2VzLCB0ci50aW1lLCBjb21wb3NpdGlvbiA9PSBudWxsID8gaGlzdG9yeS5wcmV2Q29tcG9zaXRpb24gOiBjb21wb3NpdGlvbik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlYmFzZWQgPSB0ci5nZXRNZXRhKFwicmViYXNlZFwiKSkge1xuICAgICAgICAvLyBVc2VkIGJ5IHRoZSBjb2xsYWIgbW9kdWxlIHRvIHRlbGwgdGhlIGhpc3RvcnkgdGhhdCBzb21lIG9mIGl0c1xuICAgICAgICAvLyBjb250ZW50IGhhcyBiZWVuIHJlYmFzZWQuXG4gICAgICAgIHJldHVybiBuZXcgSGlzdG9yeVN0YXRlKGhpc3RvcnkuZG9uZS5yZWJhc2VkKHRyLCByZWJhc2VkKSwgaGlzdG9yeS51bmRvbmUucmViYXNlZCh0ciwgcmViYXNlZCksIG1hcFJhbmdlcyhoaXN0b3J5LnByZXZSYW5nZXMsIHRyLm1hcHBpbmcpLCBoaXN0b3J5LnByZXZUaW1lLCBoaXN0b3J5LnByZXZDb21wb3NpdGlvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEhpc3RvcnlTdGF0ZShoaXN0b3J5LmRvbmUuYWRkTWFwcyh0ci5tYXBwaW5nLm1hcHMpLCBoaXN0b3J5LnVuZG9uZS5hZGRNYXBzKHRyLm1hcHBpbmcubWFwcyksIG1hcFJhbmdlcyhoaXN0b3J5LnByZXZSYW5nZXMsIHRyLm1hcHBpbmcpLCBoaXN0b3J5LnByZXZUaW1lLCBoaXN0b3J5LnByZXZDb21wb3NpdGlvbik7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNBZGphY2VudFRvKHRyYW5zZm9ybSwgcHJldlJhbmdlcykge1xuICAgIGlmICghcHJldlJhbmdlcylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghdHJhbnNmb3JtLmRvY0NoYW5nZWQpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGxldCBhZGphY2VudCA9IGZhbHNlO1xuICAgIHRyYW5zZm9ybS5tYXBwaW5nLm1hcHNbMF0uZm9yRWFjaCgoc3RhcnQsIGVuZCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXZSYW5nZXMubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgICAgICBpZiAoc3RhcnQgPD0gcHJldlJhbmdlc1tpICsgMV0gJiYgZW5kID49IHByZXZSYW5nZXNbaV0pXG4gICAgICAgICAgICAgICAgYWRqYWNlbnQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiBhZGphY2VudDtcbn1cbmZ1bmN0aW9uIHJhbmdlc0ZvcihtYXBzKSB7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSBtYXBzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiByZXN1bHQubGVuZ3RoID09IDA7IGktLSlcbiAgICAgICAgbWFwc1tpXS5mb3JFYWNoKChfZnJvbSwgX3RvLCBmcm9tLCB0bykgPT4gcmVzdWx0LnB1c2goZnJvbSwgdG8pKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbWFwUmFuZ2VzKHJhbmdlcywgbWFwcGluZykge1xuICAgIGlmICghcmFuZ2VzKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgbGV0IGZyb20gPSBtYXBwaW5nLm1hcChyYW5nZXNbaV0sIDEpLCB0byA9IG1hcHBpbmcubWFwKHJhbmdlc1tpICsgMV0sIC0xKTtcbiAgICAgICAgaWYgKGZyb20gPD0gdG8pXG4gICAgICAgICAgICByZXN1bHQucHVzaChmcm9tLCB0byk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyBBcHBseSB0aGUgbGF0ZXN0IGV2ZW50IGZyb20gb25lIGJyYW5jaCB0byB0aGUgZG9jdW1lbnQgYW5kIHNoaWZ0IHRoZSBldmVudFxuLy8gb250byB0aGUgb3RoZXIgYnJhbmNoLlxuZnVuY3Rpb24gaGlzdFRyYW5zYWN0aW9uKGhpc3RvcnksIHN0YXRlLCByZWRvKSB7XG4gICAgbGV0IHByZXNlcnZlSXRlbXMgPSBtdXN0UHJlc2VydmVJdGVtcyhzdGF0ZSk7XG4gICAgbGV0IGhpc3RPcHRpb25zID0gaGlzdG9yeUtleS5nZXQoc3RhdGUpLnNwZWMuY29uZmlnO1xuICAgIGxldCBwb3AgPSAocmVkbyA/IGhpc3RvcnkudW5kb25lIDogaGlzdG9yeS5kb25lKS5wb3BFdmVudChzdGF0ZSwgcHJlc2VydmVJdGVtcyk7XG4gICAgaWYgKCFwb3ApXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBzZWxlY3Rpb24gPSBwb3Auc2VsZWN0aW9uLnJlc29sdmUocG9wLnRyYW5zZm9ybS5kb2MpO1xuICAgIGxldCBhZGRlZCA9IChyZWRvID8gaGlzdG9yeS5kb25lIDogaGlzdG9yeS51bmRvbmUpLmFkZFRyYW5zZm9ybShwb3AudHJhbnNmb3JtLCBzdGF0ZS5zZWxlY3Rpb24uZ2V0Qm9va21hcmsoKSwgaGlzdE9wdGlvbnMsIHByZXNlcnZlSXRlbXMpO1xuICAgIGxldCBuZXdIaXN0ID0gbmV3IEhpc3RvcnlTdGF0ZShyZWRvID8gYWRkZWQgOiBwb3AucmVtYWluaW5nLCByZWRvID8gcG9wLnJlbWFpbmluZyA6IGFkZGVkLCBudWxsLCAwLCAtMSk7XG4gICAgcmV0dXJuIHBvcC50cmFuc2Zvcm0uc2V0U2VsZWN0aW9uKHNlbGVjdGlvbikuc2V0TWV0YShoaXN0b3J5S2V5LCB7IHJlZG8sIGhpc3RvcnlTdGF0ZTogbmV3SGlzdCB9KTtcbn1cbmxldCBjYWNoZWRQcmVzZXJ2ZUl0ZW1zID0gZmFsc2UsIGNhY2hlZFByZXNlcnZlSXRlbXNQbHVnaW5zID0gbnVsbDtcbi8vIENoZWNrIHdoZXRoZXIgYW55IHBsdWdpbiBpbiB0aGUgZ2l2ZW4gc3RhdGUgaGFzIGFcbi8vIGBoaXN0b3J5UHJlc2VydmVJdGVtc2AgcHJvcGVydHkgaW4gaXRzIHNwZWMsIGluIHdoaWNoIGNhc2Ugd2UgbXVzdFxuLy8gcHJlc2VydmUgc3RlcHMgZXhhY3RseSBhcyB0aGV5IGNhbWUgaW4sIHNvIHRoYXQgdGhleSBjYW4gYmVcbi8vIHJlYmFzZWQuXG5mdW5jdGlvbiBtdXN0UHJlc2VydmVJdGVtcyhzdGF0ZSkge1xuICAgIGxldCBwbHVnaW5zID0gc3RhdGUucGx1Z2lucztcbiAgICBpZiAoY2FjaGVkUHJlc2VydmVJdGVtc1BsdWdpbnMgIT0gcGx1Z2lucykge1xuICAgICAgICBjYWNoZWRQcmVzZXJ2ZUl0ZW1zID0gZmFsc2U7XG4gICAgICAgIGNhY2hlZFByZXNlcnZlSXRlbXNQbHVnaW5zID0gcGx1Z2lucztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKHBsdWdpbnNbaV0uc3BlYy5oaXN0b3J5UHJlc2VydmVJdGVtcykge1xuICAgICAgICAgICAgICAgIGNhY2hlZFByZXNlcnZlSXRlbXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkUHJlc2VydmVJdGVtcztcbn1cbi8qKlxuU2V0IGEgZmxhZyBvbiB0aGUgZ2l2ZW4gdHJhbnNhY3Rpb24gdGhhdCB3aWxsIHByZXZlbnQgZnVydGhlciBzdGVwc1xuZnJvbSBiZWluZyBhcHBlbmRlZCB0byBhbiBleGlzdGluZyBoaXN0b3J5IGV2ZW50IChzbyB0aGF0IHRoZXlcbnJlcXVpcmUgYSBzZXBhcmF0ZSB1bmRvIGNvbW1hbmQgdG8gdW5kbykuXG4qL1xuZnVuY3Rpb24gY2xvc2VIaXN0b3J5KHRyKSB7XG4gICAgcmV0dXJuIHRyLnNldE1ldGEoY2xvc2VIaXN0b3J5S2V5LCB0cnVlKTtcbn1cbmNvbnN0IGhpc3RvcnlLZXkgPSBuZXcgUGx1Z2luS2V5KFwiaGlzdG9yeVwiKTtcbmNvbnN0IGNsb3NlSGlzdG9yeUtleSA9IG5ldyBQbHVnaW5LZXkoXCJjbG9zZUhpc3RvcnlcIik7XG4vKipcblJldHVybnMgYSBwbHVnaW4gdGhhdCBlbmFibGVzIHRoZSB1bmRvIGhpc3RvcnkgZm9yIGFuIGVkaXRvci4gVGhlXG5wbHVnaW4gd2lsbCB0cmFjayB1bmRvIGFuZCByZWRvIHN0YWNrcywgd2hpY2ggY2FuIGJlIHVzZWQgd2l0aCB0aGVcbltgdW5kb2BdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNoaXN0b3J5LnVuZG8pIGFuZCBbYHJlZG9gXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jaGlzdG9yeS5yZWRvKSBjb21tYW5kcy5cblxuWW91IGNhbiBzZXQgYW4gYFwiYWRkVG9IaXN0b3J5XCJgIFttZXRhZGF0YVxucHJvcGVydHldKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzdGF0ZS5UcmFuc2FjdGlvbi5zZXRNZXRhKSBvZiBgZmFsc2VgIG9uIGEgdHJhbnNhY3Rpb25cbnRvIHByZXZlbnQgaXQgZnJvbSBiZWluZyByb2xsZWQgYmFjayBieSB1bmRvLlxuKi9cbmZ1bmN0aW9uIGhpc3RvcnkoY29uZmlnID0ge30pIHtcbiAgICBjb25maWcgPSB7IGRlcHRoOiBjb25maWcuZGVwdGggfHwgMTAwLFxuICAgICAgICBuZXdHcm91cERlbGF5OiBjb25maWcubmV3R3JvdXBEZWxheSB8fCA1MDAgfTtcbiAgICByZXR1cm4gbmV3IFBsdWdpbih7XG4gICAgICAgIGtleTogaGlzdG9yeUtleSxcbiAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgIGluaXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBIaXN0b3J5U3RhdGUoQnJhbmNoLmVtcHR5LCBCcmFuY2guZW1wdHksIG51bGwsIDAsIC0xKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhcHBseSh0ciwgaGlzdCwgc3RhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwbHlUcmFuc2FjdGlvbihoaXN0LCBzdGF0ZSwgdHIsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIGhhbmRsZURPTUV2ZW50czoge1xuICAgICAgICAgICAgICAgIGJlZm9yZWlucHV0KHZpZXcsIGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlucHV0VHlwZSA9IGUuaW5wdXRUeXBlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29tbWFuZCA9IGlucHV0VHlwZSA9PSBcImhpc3RvcnlVbmRvXCIgPyB1bmRvIDogaW5wdXRUeXBlID09IFwiaGlzdG9yeVJlZG9cIiA/IHJlZG8gOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbW1hbmQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmQodmlldy5zdGF0ZSwgdmlldy5kaXNwYXRjaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBidWlsZENvbW1hbmQocmVkbywgc2Nyb2xsKSB7XG4gICAgcmV0dXJuIChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICAgICAgbGV0IGhpc3QgPSBoaXN0b3J5S2V5LmdldFN0YXRlKHN0YXRlKTtcbiAgICAgICAgaWYgKCFoaXN0IHx8IChyZWRvID8gaGlzdC51bmRvbmUgOiBoaXN0LmRvbmUpLmV2ZW50Q291bnQgPT0gMClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgICAgICBsZXQgdHIgPSBoaXN0VHJhbnNhY3Rpb24oaGlzdCwgc3RhdGUsIHJlZG8pO1xuICAgICAgICAgICAgaWYgKHRyKVxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHNjcm9sbCA/IHRyLnNjcm9sbEludG9WaWV3KCkgOiB0cik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbi8qKlxuQSBjb21tYW5kIGZ1bmN0aW9uIHRoYXQgdW5kb2VzIHRoZSBsYXN0IGNoYW5nZSwgaWYgYW55LlxuKi9cbmNvbnN0IHVuZG8gPSBidWlsZENvbW1hbmQoZmFsc2UsIHRydWUpO1xuLyoqXG5BIGNvbW1hbmQgZnVuY3Rpb24gdGhhdCByZWRvZXMgdGhlIGxhc3QgdW5kb25lIGNoYW5nZSwgaWYgYW55LlxuKi9cbmNvbnN0IHJlZG8gPSBidWlsZENvbW1hbmQodHJ1ZSwgdHJ1ZSk7XG4vKipcbkEgY29tbWFuZCBmdW5jdGlvbiB0aGF0IHVuZG9lcyB0aGUgbGFzdCBjaGFuZ2UuIERvbid0IHNjcm9sbCB0aGVcbnNlbGVjdGlvbiBpbnRvIHZpZXcuXG4qL1xuY29uc3QgdW5kb05vU2Nyb2xsID0gYnVpbGRDb21tYW5kKGZhbHNlLCBmYWxzZSk7XG4vKipcbkEgY29tbWFuZCBmdW5jdGlvbiB0aGF0IHJlZG9lcyB0aGUgbGFzdCB1bmRvbmUgY2hhbmdlLiBEb24ndFxuc2Nyb2xsIHRoZSBzZWxlY3Rpb24gaW50byB2aWV3LlxuKi9cbmNvbnN0IHJlZG9Ob1Njcm9sbCA9IGJ1aWxkQ29tbWFuZCh0cnVlLCBmYWxzZSk7XG4vKipcblRoZSBhbW91bnQgb2YgdW5kb2FibGUgZXZlbnRzIGF2YWlsYWJsZSBpbiBhIGdpdmVuIHN0YXRlLlxuKi9cbmZ1bmN0aW9uIHVuZG9EZXB0aChzdGF0ZSkge1xuICAgIGxldCBoaXN0ID0gaGlzdG9yeUtleS5nZXRTdGF0ZShzdGF0ZSk7XG4gICAgcmV0dXJuIGhpc3QgPyBoaXN0LmRvbmUuZXZlbnRDb3VudCA6IDA7XG59XG4vKipcblRoZSBhbW91bnQgb2YgcmVkb2FibGUgZXZlbnRzIGF2YWlsYWJsZSBpbiBhIGdpdmVuIGVkaXRvciBzdGF0ZS5cbiovXG5mdW5jdGlvbiByZWRvRGVwdGgoc3RhdGUpIHtcbiAgICBsZXQgaGlzdCA9IGhpc3RvcnlLZXkuZ2V0U3RhdGUoc3RhdGUpO1xuICAgIHJldHVybiBoaXN0ID8gaGlzdC51bmRvbmUuZXZlbnRDb3VudCA6IDA7XG59XG5cbmV4cG9ydCB7IGNsb3NlSGlzdG9yeSwgaGlzdG9yeSwgcmVkbywgcmVkb0RlcHRoLCByZWRvTm9TY3JvbGwsIHVuZG8sIHVuZG9EZXB0aCwgdW5kb05vU2Nyb2xsIH07XG4iLCJpbXBvcnQgeyBQbHVnaW4gfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5pbXBvcnQgeyBmaW5kV3JhcHBpbmcsIGNhbkpvaW4gfSBmcm9tICdwcm9zZW1pcnJvci10cmFuc2Zvcm0nO1xuXG4vKipcbklucHV0IHJ1bGVzIGFyZSByZWd1bGFyIGV4cHJlc3Npb25zIGRlc2NyaWJpbmcgYSBwaWVjZSBvZiB0ZXh0XG50aGF0LCB3aGVuIHR5cGVkLCBjYXVzZXMgc29tZXRoaW5nIHRvIGhhcHBlbi4gVGhpcyBtaWdodCBiZVxuY2hhbmdpbmcgdHdvIGRhc2hlcyBpbnRvIGFuIGVtZGFzaCwgd3JhcHBpbmcgYSBwYXJhZ3JhcGggc3RhcnRpbmdcbndpdGggYFwiPiBcImAgaW50byBhIGJsb2NrcXVvdGUsIG9yIHNvbWV0aGluZyBlbnRpcmVseSBkaWZmZXJlbnQuXG4qL1xuY2xhc3MgSW5wdXRSdWxlIHtcbiAgICAvKipcbiAgICBDcmVhdGUgYW4gaW5wdXQgcnVsZS4gVGhlIHJ1bGUgYXBwbGllcyB3aGVuIHRoZSB1c2VyIHR5cGVkXG4gICAgc29tZXRoaW5nIGFuZCB0aGUgdGV4dCBkaXJlY3RseSBpbiBmcm9udCBvZiB0aGUgY3Vyc29yIG1hdGNoZXNcbiAgICBgbWF0Y2hgLCB3aGljaCBzaG91bGQgZW5kIHdpdGggYCRgLlxuICAgIFxuICAgIFRoZSBgaGFuZGxlcmAgY2FuIGJlIGEgc3RyaW5nLCBpbiB3aGljaCBjYXNlIHRoZSBtYXRjaGVkIHRleHQsIG9yXG4gICAgdGhlIGZpcnN0IG1hdGNoZWQgZ3JvdXAgaW4gdGhlIHJlZ2V4cCwgaXMgcmVwbGFjZWQgYnkgdGhhdFxuICAgIHN0cmluZy5cbiAgICBcbiAgICBPciBhIGl0IGNhbiBiZSBhIGZ1bmN0aW9uLCB3aGljaCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBtYXRjaFxuICAgIGFycmF5IHByb2R1Y2VkIGJ5XG4gICAgW2BSZWdFeHAuZXhlY2BdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1JlZ0V4cC9leGVjKSxcbiAgICBhcyB3ZWxsIGFzIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBtYXRjaGVkIHJhbmdlLCBhbmQgd2hpY2ggY2FuXG4gICAgcmV0dXJuIGEgW3RyYW5zYWN0aW9uXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc3RhdGUuVHJhbnNhY3Rpb24pIHRoYXQgZGVzY3JpYmVzIHRoZVxuICAgIHJ1bGUncyBlZmZlY3QsIG9yIG51bGwgdG8gaW5kaWNhdGUgdGhlIGlucHV0IHdhcyBub3QgaGFuZGxlZC5cbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgbWF0Y2gsIGhhbmRsZXIsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLm1hdGNoID0gbWF0Y2g7XG4gICAgICAgIHRoaXMubWF0Y2ggPSBtYXRjaDtcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gdHlwZW9mIGhhbmRsZXIgPT0gXCJzdHJpbmdcIiA/IHN0cmluZ0hhbmRsZXIoaGFuZGxlcikgOiBoYW5kbGVyO1xuICAgICAgICB0aGlzLnVuZG9hYmxlID0gb3B0aW9ucy51bmRvYWJsZSAhPT0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5Db2RlID0gb3B0aW9ucy5pbkNvZGUgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMuaW5Db2RlTWFyayA9IG9wdGlvbnMuaW5Db2RlTWFyayAhPT0gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gc3RyaW5nSGFuZGxlcihzdHJpbmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBtYXRjaCwgc3RhcnQsIGVuZCkge1xuICAgICAgICBsZXQgaW5zZXJ0ID0gc3RyaW5nO1xuICAgICAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAgICAgIGxldCBvZmZzZXQgPSBtYXRjaFswXS5sYXN0SW5kZXhPZihtYXRjaFsxXSk7XG4gICAgICAgICAgICBpbnNlcnQgKz0gbWF0Y2hbMF0uc2xpY2Uob2Zmc2V0ICsgbWF0Y2hbMV0ubGVuZ3RoKTtcbiAgICAgICAgICAgIHN0YXJ0ICs9IG9mZnNldDtcbiAgICAgICAgICAgIGxldCBjdXRPZmYgPSBzdGFydCAtIGVuZDtcbiAgICAgICAgICAgIGlmIChjdXRPZmYgPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5zZXJ0ID0gbWF0Y2hbMF0uc2xpY2Uob2Zmc2V0IC0gY3V0T2ZmLCBvZmZzZXQpICsgaW5zZXJ0O1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0ZS50ci5pbnNlcnRUZXh0KGluc2VydCwgc3RhcnQsIGVuZCk7XG4gICAgfTtcbn1cbmNvbnN0IE1BWF9NQVRDSCA9IDUwMDtcbi8qKlxuQ3JlYXRlIGFuIGlucHV0IHJ1bGVzIHBsdWdpbi4gV2hlbiBlbmFibGVkLCBpdCB3aWxsIGNhdXNlIHRleHRcbmlucHV0IHRoYXQgbWF0Y2hlcyBhbnkgb2YgdGhlIGdpdmVuIHJ1bGVzIHRvIHRyaWdnZXIgdGhlIHJ1bGUnc1xuYWN0aW9uLlxuKi9cbmZ1bmN0aW9uIGlucHV0UnVsZXMoeyBydWxlcyB9KSB7XG4gICAgbGV0IHBsdWdpbiA9IG5ldyBQbHVnaW4oe1xuICAgICAgICBzdGF0ZToge1xuICAgICAgICAgICAgaW5pdCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgICAgICBhcHBseSh0ciwgcHJldikge1xuICAgICAgICAgICAgICAgIGxldCBzdG9yZWQgPSB0ci5nZXRNZXRhKHRoaXMpO1xuICAgICAgICAgICAgICAgIGlmIChzdG9yZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZWQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyLnNlbGVjdGlvblNldCB8fCB0ci5kb2NDaGFuZ2VkID8gbnVsbCA6IHByZXY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBoYW5kbGVUZXh0SW5wdXQodmlldywgZnJvbSwgdG8sIHRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnVuKHZpZXcsIGZyb20sIHRvLCB0ZXh0LCBydWxlcywgcGx1Z2luKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYW5kbGVET01FdmVudHM6IHtcbiAgICAgICAgICAgICAgICBjb21wb3NpdGlvbmVuZDogKHZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgeyAkY3Vyc29yIH0gPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkY3Vyc29yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bih2aWV3LCAkY3Vyc29yLnBvcywgJGN1cnNvci5wb3MsIFwiXCIsIHJ1bGVzLCBwbHVnaW4pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGlzSW5wdXRSdWxlczogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBwbHVnaW47XG59XG5mdW5jdGlvbiBydW4odmlldywgZnJvbSwgdG8sIHRleHQsIHJ1bGVzLCBwbHVnaW4pIHtcbiAgICBpZiAodmlldy5jb21wb3NpbmcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgc3RhdGUgPSB2aWV3LnN0YXRlLCAkZnJvbSA9IHN0YXRlLmRvYy5yZXNvbHZlKGZyb20pO1xuICAgIGxldCB0ZXh0QmVmb3JlID0gJGZyb20ucGFyZW50LnRleHRCZXR3ZWVuKE1hdGgubWF4KDAsICRmcm9tLnBhcmVudE9mZnNldCAtIE1BWF9NQVRDSCksICRmcm9tLnBhcmVudE9mZnNldCwgbnVsbCwgXCJcXHVmZmZjXCIpICsgdGV4dDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBydWxlID0gcnVsZXNbaV07XG4gICAgICAgIGlmICghcnVsZS5pbkNvZGVNYXJrICYmICRmcm9tLm1hcmtzKCkuc29tZShtID0+IG0udHlwZS5zcGVjLmNvZGUpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmICgkZnJvbS5wYXJlbnQudHlwZS5zcGVjLmNvZGUpIHtcbiAgICAgICAgICAgIGlmICghcnVsZS5pbkNvZGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocnVsZS5pbkNvZGUgPT09IFwib25seVwiKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWF0Y2ggPSBydWxlLm1hdGNoLmV4ZWModGV4dEJlZm9yZSk7XG4gICAgICAgIGxldCB0ciA9IG1hdGNoICYmIG1hdGNoWzBdLmxlbmd0aCA+PSB0ZXh0Lmxlbmd0aCAmJlxuICAgICAgICAgICAgcnVsZS5oYW5kbGVyKHN0YXRlLCBtYXRjaCwgZnJvbSAtIChtYXRjaFswXS5sZW5ndGggLSB0ZXh0Lmxlbmd0aCksIHRvKTtcbiAgICAgICAgaWYgKCF0cilcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAocnVsZS51bmRvYWJsZSlcbiAgICAgICAgICAgIHRyLnNldE1ldGEocGx1Z2luLCB7IHRyYW5zZm9ybTogdHIsIGZyb20sIHRvLCB0ZXh0IH0pO1xuICAgICAgICB2aWV3LmRpc3BhdGNoKHRyKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuVGhpcyBpcyBhIGNvbW1hbmQgdGhhdCB3aWxsIHVuZG8gYW4gaW5wdXQgcnVsZSwgaWYgYXBwbHlpbmcgc3VjaCBhXG5ydWxlIHdhcyB0aGUgbGFzdCB0aGluZyB0aGF0IHRoZSB1c2VyIGRpZC5cbiovXG5jb25zdCB1bmRvSW5wdXRSdWxlID0gKHN0YXRlLCBkaXNwYXRjaCkgPT4ge1xuICAgIGxldCBwbHVnaW5zID0gc3RhdGUucGx1Z2lucztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHBsdWdpbiA9IHBsdWdpbnNbaV0sIHVuZG9hYmxlO1xuICAgICAgICBpZiAocGx1Z2luLnNwZWMuaXNJbnB1dFJ1bGVzICYmICh1bmRvYWJsZSA9IHBsdWdpbi5nZXRTdGF0ZShzdGF0ZSkpKSB7XG4gICAgICAgICAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgICAgICAgICBsZXQgdHIgPSBzdGF0ZS50ciwgdG9VbmRvID0gdW5kb2FibGUudHJhbnNmb3JtO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSB0b1VuZG8uc3RlcHMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pXG4gICAgICAgICAgICAgICAgICAgIHRyLnN0ZXAodG9VbmRvLnN0ZXBzW2pdLmludmVydCh0b1VuZG8uZG9jc1tqXSkpO1xuICAgICAgICAgICAgICAgIGlmICh1bmRvYWJsZS50ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXJrcyA9IHRyLmRvYy5yZXNvbHZlKHVuZG9hYmxlLmZyb20pLm1hcmtzKCk7XG4gICAgICAgICAgICAgICAgICAgIHRyLnJlcGxhY2VXaXRoKHVuZG9hYmxlLmZyb20sIHVuZG9hYmxlLnRvLCBzdGF0ZS5zY2hlbWEudGV4dCh1bmRvYWJsZS50ZXh0LCBtYXJrcykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHIuZGVsZXRlKHVuZG9hYmxlLmZyb20sIHVuZG9hYmxlLnRvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2godHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG5Db252ZXJ0cyBkb3VibGUgZGFzaGVzIHRvIGFuIGVtZGFzaC5cbiovXG5jb25zdCBlbURhc2ggPSBuZXcgSW5wdXRSdWxlKC8tLSQvLCBcIuKAlFwiLCB7IGluQ29kZU1hcms6IGZhbHNlIH0pO1xuLyoqXG5Db252ZXJ0cyB0aHJlZSBkb3RzIHRvIGFuIGVsbGlwc2lzIGNoYXJhY3Rlci5cbiovXG5jb25zdCBlbGxpcHNpcyA9IG5ldyBJbnB1dFJ1bGUoL1xcLlxcLlxcLiQvLCBcIuKAplwiLCB7IGluQ29kZU1hcms6IGZhbHNlIH0pO1xuLyoqXG7igJxTbWFydOKAnSBvcGVuaW5nIGRvdWJsZSBxdW90ZXMuXG4qL1xuY29uc3Qgb3BlbkRvdWJsZVF1b3RlID0gbmV3IElucHV0UnVsZSgvKD86XnxbXFxzXFx7XFxbXFwoXFw8J1wiXFx1MjAxOFxcdTIwMUNdKShcIikkLywgXCLigJxcIiwgeyBpbkNvZGVNYXJrOiBmYWxzZSB9KTtcbi8qKlxu4oCcU21hcnTigJ0gY2xvc2luZyBkb3VibGUgcXVvdGVzLlxuKi9cbmNvbnN0IGNsb3NlRG91YmxlUXVvdGUgPSBuZXcgSW5wdXRSdWxlKC9cIiQvLCBcIuKAnVwiLCB7IGluQ29kZU1hcms6IGZhbHNlIH0pO1xuLyoqXG7igJxTbWFydOKAnSBvcGVuaW5nIHNpbmdsZSBxdW90ZXMuXG4qL1xuY29uc3Qgb3BlblNpbmdsZVF1b3RlID0gbmV3IElucHV0UnVsZSgvKD86XnxbXFxzXFx7XFxbXFwoXFw8J1wiXFx1MjAxOFxcdTIwMUNdKSgnKSQvLCBcIuKAmFwiLCB7IGluQ29kZU1hcms6IGZhbHNlIH0pO1xuLyoqXG7igJxTbWFydOKAnSBjbG9zaW5nIHNpbmdsZSBxdW90ZXMuXG4qL1xuY29uc3QgY2xvc2VTaW5nbGVRdW90ZSA9IG5ldyBJbnB1dFJ1bGUoLyckLywgXCLigJlcIiwgeyBpbkNvZGVNYXJrOiBmYWxzZSB9KTtcbi8qKlxuU21hcnQtcXVvdGUgcmVsYXRlZCBpbnB1dCBydWxlcy5cbiovXG5jb25zdCBzbWFydFF1b3RlcyA9IFtvcGVuRG91YmxlUXVvdGUsIGNsb3NlRG91YmxlUXVvdGUsIG9wZW5TaW5nbGVRdW90ZSwgY2xvc2VTaW5nbGVRdW90ZV07XG5cbi8qKlxuQnVpbGQgYW4gaW5wdXQgcnVsZSBmb3IgYXV0b21hdGljYWxseSB3cmFwcGluZyBhIHRleHRibG9jayB3aGVuIGFcbmdpdmVuIHN0cmluZyBpcyB0eXBlZC4gVGhlIGByZWdleHBgIGFyZ3VtZW50IGlzXG5kaXJlY3RseSBwYXNzZWQgdGhyb3VnaCB0byB0aGUgYElucHV0UnVsZWAgY29uc3RydWN0b3IuIFlvdSdsbFxucHJvYmFibHkgd2FudCB0aGUgcmVnZXhwIHRvIHN0YXJ0IHdpdGggYF5gLCBzbyB0aGF0IHRoZSBwYXR0ZXJuIGNhblxub25seSBvY2N1ciBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0YmxvY2suXG5cbmBub2RlVHlwZWAgaXMgdGhlIHR5cGUgb2Ygbm9kZSB0byB3cmFwIGluLiBJZiBpdCBuZWVkcyBhdHRyaWJ1dGVzLFxueW91IGNhbiBlaXRoZXIgcGFzcyB0aGVtIGRpcmVjdGx5LCBvciBwYXNzIGEgZnVuY3Rpb24gdGhhdCB3aWxsXG5jb21wdXRlIHRoZW0gZnJvbSB0aGUgcmVndWxhciBleHByZXNzaW9uIG1hdGNoLlxuXG5CeSBkZWZhdWx0LCBpZiB0aGVyZSdzIGEgbm9kZSB3aXRoIHRoZSBzYW1lIHR5cGUgYWJvdmUgdGhlIG5ld2x5XG53cmFwcGVkIG5vZGUsIHRoZSBydWxlIHdpbGwgdHJ5IHRvIFtqb2luXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdHJhbnNmb3JtLlRyYW5zZm9ybS5qb2luKSB0aG9zZVxudHdvIG5vZGVzLiBZb3UgY2FuIHBhc3MgYSBqb2luIHByZWRpY2F0ZSwgd2hpY2ggdGFrZXMgYSByZWd1bGFyXG5leHByZXNzaW9uIG1hdGNoIGFuZCB0aGUgbm9kZSBiZWZvcmUgdGhlIHdyYXBwZWQgbm9kZSwgYW5kIGNhblxucmV0dXJuIGEgYm9vbGVhbiB0byBpbmRpY2F0ZSB3aGV0aGVyIGEgam9pbiBzaG91bGQgaGFwcGVuLlxuKi9cbmZ1bmN0aW9uIHdyYXBwaW5nSW5wdXRSdWxlKHJlZ2V4cCwgbm9kZVR5cGUsIGdldEF0dHJzID0gbnVsbCwgam9pblByZWRpY2F0ZSkge1xuICAgIHJldHVybiBuZXcgSW5wdXRSdWxlKHJlZ2V4cCwgKHN0YXRlLCBtYXRjaCwgc3RhcnQsIGVuZCkgPT4ge1xuICAgICAgICBsZXQgYXR0cnMgPSBnZXRBdHRycyBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gZ2V0QXR0cnMobWF0Y2gpIDogZ2V0QXR0cnM7XG4gICAgICAgIGxldCB0ciA9IHN0YXRlLnRyLmRlbGV0ZShzdGFydCwgZW5kKTtcbiAgICAgICAgbGV0ICRzdGFydCA9IHRyLmRvYy5yZXNvbHZlKHN0YXJ0KSwgcmFuZ2UgPSAkc3RhcnQuYmxvY2tSYW5nZSgpLCB3cmFwcGluZyA9IHJhbmdlICYmIGZpbmRXcmFwcGluZyhyYW5nZSwgbm9kZVR5cGUsIGF0dHJzKTtcbiAgICAgICAgaWYgKCF3cmFwcGluZylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB0ci53cmFwKHJhbmdlLCB3cmFwcGluZyk7XG4gICAgICAgIGxldCBiZWZvcmUgPSB0ci5kb2MucmVzb2x2ZShzdGFydCAtIDEpLm5vZGVCZWZvcmU7XG4gICAgICAgIGlmIChiZWZvcmUgJiYgYmVmb3JlLnR5cGUgPT0gbm9kZVR5cGUgJiYgY2FuSm9pbih0ci5kb2MsIHN0YXJ0IC0gMSkgJiZcbiAgICAgICAgICAgICgham9pblByZWRpY2F0ZSB8fCBqb2luUHJlZGljYXRlKG1hdGNoLCBiZWZvcmUpKSlcbiAgICAgICAgICAgIHRyLmpvaW4oc3RhcnQgLSAxKTtcbiAgICAgICAgcmV0dXJuIHRyO1xuICAgIH0pO1xufVxuLyoqXG5CdWlsZCBhbiBpbnB1dCBydWxlIHRoYXQgY2hhbmdlcyB0aGUgdHlwZSBvZiBhIHRleHRibG9jayB3aGVuIHRoZVxubWF0Y2hlZCB0ZXh0IGlzIHR5cGVkIGludG8gaXQuIFlvdSdsbCB1c3VhbGx5IHdhbnQgdG8gc3RhcnQgeW91clxucmVnZXhwIHdpdGggYF5gIHRvIHRoYXQgaXQgaXMgb25seSBtYXRjaGVkIGF0IHRoZSBzdGFydCBvZiBhXG50ZXh0YmxvY2suIFRoZSBvcHRpb25hbCBgZ2V0QXR0cnNgIHBhcmFtZXRlciBjYW4gYmUgdXNlZCB0byBjb21wdXRlXG50aGUgbmV3IG5vZGUncyBhdHRyaWJ1dGVzLCBhbmQgd29ya3MgdGhlIHNhbWUgYXMgaW4gdGhlXG5gd3JhcHBpbmdJbnB1dFJ1bGVgIGZ1bmN0aW9uLlxuKi9cbmZ1bmN0aW9uIHRleHRibG9ja1R5cGVJbnB1dFJ1bGUocmVnZXhwLCBub2RlVHlwZSwgZ2V0QXR0cnMgPSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBJbnB1dFJ1bGUocmVnZXhwLCAoc3RhdGUsIG1hdGNoLCBzdGFydCwgZW5kKSA9PiB7XG4gICAgICAgIGxldCAkc3RhcnQgPSBzdGF0ZS5kb2MucmVzb2x2ZShzdGFydCk7XG4gICAgICAgIGxldCBhdHRycyA9IGdldEF0dHJzIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBnZXRBdHRycyhtYXRjaCkgOiBnZXRBdHRycztcbiAgICAgICAgaWYgKCEkc3RhcnQubm9kZSgtMSkuY2FuUmVwbGFjZVdpdGgoJHN0YXJ0LmluZGV4KC0xKSwgJHN0YXJ0LmluZGV4QWZ0ZXIoLTEpLCBub2RlVHlwZSkpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHN0YXRlLnRyXG4gICAgICAgICAgICAuZGVsZXRlKHN0YXJ0LCBlbmQpXG4gICAgICAgICAgICAuc2V0QmxvY2tUeXBlKHN0YXJ0LCBzdGFydCwgbm9kZVR5cGUsIGF0dHJzKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgSW5wdXRSdWxlLCBjbG9zZURvdWJsZVF1b3RlLCBjbG9zZVNpbmdsZVF1b3RlLCBlbGxpcHNpcywgZW1EYXNoLCBpbnB1dFJ1bGVzLCBvcGVuRG91YmxlUXVvdGUsIG9wZW5TaW5nbGVRdW90ZSwgc21hcnRRdW90ZXMsIHRleHRibG9ja1R5cGVJbnB1dFJ1bGUsIHVuZG9JbnB1dFJ1bGUsIHdyYXBwaW5nSW5wdXRSdWxlIH07XG4iLCJpbXBvcnQgeyBmaW5kV3JhcHBpbmcsIFJlcGxhY2VBcm91bmRTdGVwLCBjYW5TcGxpdCwgbGlmdFRhcmdldCwgY2FuSm9pbiB9IGZyb20gJ3Byb3NlbWlycm9yLXRyYW5zZm9ybSc7XG5pbXBvcnQgeyBOb2RlUmFuZ2UsIEZyYWdtZW50LCBTbGljZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IFNlbGVjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcblxuY29uc3Qgb2xET00gPSBbXCJvbFwiLCAwXSwgdWxET00gPSBbXCJ1bFwiLCAwXSwgbGlET00gPSBbXCJsaVwiLCAwXTtcbi8qKlxuQW4gb3JkZXJlZCBsaXN0IFtub2RlIHNwZWNdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYykuIEhhcyBhIHNpbmdsZVxuYXR0cmlidXRlLCBgb3JkZXJgLCB3aGljaCBkZXRlcm1pbmVzIHRoZSBudW1iZXIgYXQgd2hpY2ggdGhlIGxpc3RcbnN0YXJ0cyBjb3VudGluZywgYW5kIGRlZmF1bHRzIHRvIDEuIFJlcHJlc2VudGVkIGFzIGFuIGA8b2w+YFxuZWxlbWVudC5cbiovXG5jb25zdCBvcmRlcmVkTGlzdCA9IHtcbiAgICBhdHRyczogeyBvcmRlcjogeyBkZWZhdWx0OiAxLCB2YWxpZGF0ZTogXCJudW1iZXJcIiB9IH0sXG4gICAgcGFyc2VET006IFt7IHRhZzogXCJvbFwiLCBnZXRBdHRycyhkb20pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBvcmRlcjogZG9tLmhhc0F0dHJpYnV0ZShcInN0YXJ0XCIpID8gK2RvbS5nZXRBdHRyaWJ1dGUoXCJzdGFydFwiKSA6IDEgfTtcbiAgICAgICAgICAgIH0gfV0sXG4gICAgdG9ET00obm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5hdHRycy5vcmRlciA9PSAxID8gb2xET00gOiBbXCJvbFwiLCB7IHN0YXJ0OiBub2RlLmF0dHJzLm9yZGVyIH0sIDBdO1xuICAgIH1cbn07XG4vKipcbkEgYnVsbGV0IGxpc3Qgbm9kZSBzcGVjLCByZXByZXNlbnRlZCBpbiB0aGUgRE9NIGFzIGA8dWw+YC5cbiovXG5jb25zdCBidWxsZXRMaXN0ID0ge1xuICAgIHBhcnNlRE9NOiBbeyB0YWc6IFwidWxcIiB9XSxcbiAgICB0b0RPTSgpIHsgcmV0dXJuIHVsRE9NOyB9XG59O1xuLyoqXG5BIGxpc3QgaXRlbSAoYDxsaT5gKSBzcGVjLlxuKi9cbmNvbnN0IGxpc3RJdGVtID0ge1xuICAgIHBhcnNlRE9NOiBbeyB0YWc6IFwibGlcIiB9XSxcbiAgICB0b0RPTSgpIHsgcmV0dXJuIGxpRE9NOyB9LFxuICAgIGRlZmluaW5nOiB0cnVlXG59O1xuZnVuY3Rpb24gYWRkKG9iaiwgcHJvcHMpIHtcbiAgICBsZXQgY29weSA9IHt9O1xuICAgIGZvciAobGV0IHByb3AgaW4gb2JqKVxuICAgICAgICBjb3B5W3Byb3BdID0gb2JqW3Byb3BdO1xuICAgIGZvciAobGV0IHByb3AgaW4gcHJvcHMpXG4gICAgICAgIGNvcHlbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICByZXR1cm4gY29weTtcbn1cbi8qKlxuQ29udmVuaWVuY2UgZnVuY3Rpb24gZm9yIGFkZGluZyBsaXN0LXJlbGF0ZWQgbm9kZSB0eXBlcyB0byBhIG1hcFxuc3BlY2lmeWluZyB0aGUgbm9kZXMgZm9yIGEgc2NoZW1hLiBBZGRzXG5bYG9yZGVyZWRMaXN0YF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3NjaGVtYS1saXN0Lm9yZGVyZWRMaXN0KSBhcyBgXCJvcmRlcmVkX2xpc3RcImAsXG5bYGJ1bGxldExpc3RgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc2NoZW1hLWxpc3QuYnVsbGV0TGlzdCkgYXMgYFwiYnVsbGV0X2xpc3RcImAsIGFuZFxuW2BsaXN0SXRlbWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNzY2hlbWEtbGlzdC5saXN0SXRlbSkgYXMgYFwibGlzdF9pdGVtXCJgLlxuXG5gaXRlbUNvbnRlbnRgIGRldGVybWluZXMgdGhlIGNvbnRlbnQgZXhwcmVzc2lvbiBmb3IgdGhlIGxpc3QgaXRlbXMuXG5JZiB5b3Ugd2FudCB0aGUgY29tbWFuZHMgZGVmaW5lZCBpbiB0aGlzIG1vZHVsZSB0byBhcHBseSB0byB5b3VyXG5saXN0IHN0cnVjdHVyZSwgaXQgc2hvdWxkIGhhdmUgYSBzaGFwZSBsaWtlIGBcInBhcmFncmFwaCBibG9jaypcImAgb3JcbmBcInBhcmFncmFwaCAob3JkZXJlZF9saXN0IHwgYnVsbGV0X2xpc3QpKlwiYC4gYGxpc3RHcm91cGAgY2FuIGJlXG5naXZlbiB0byBhc3NpZ24gYSBncm91cCBuYW1lIHRvIHRoZSBsaXN0IG5vZGUgdHlwZXMsIGZvciBleGFtcGxlXG5gXCJibG9ja1wiYC5cbiovXG5mdW5jdGlvbiBhZGRMaXN0Tm9kZXMobm9kZXMsIGl0ZW1Db250ZW50LCBsaXN0R3JvdXApIHtcbiAgICByZXR1cm4gbm9kZXMuYXBwZW5kKHtcbiAgICAgICAgb3JkZXJlZF9saXN0OiBhZGQob3JkZXJlZExpc3QsIHsgY29udGVudDogXCJsaXN0X2l0ZW0rXCIsIGdyb3VwOiBsaXN0R3JvdXAgfSksXG4gICAgICAgIGJ1bGxldF9saXN0OiBhZGQoYnVsbGV0TGlzdCwgeyBjb250ZW50OiBcImxpc3RfaXRlbStcIiwgZ3JvdXA6IGxpc3RHcm91cCB9KSxcbiAgICAgICAgbGlzdF9pdGVtOiBhZGQobGlzdEl0ZW0sIHsgY29udGVudDogaXRlbUNvbnRlbnQgfSlcbiAgICB9KTtcbn1cbi8qKlxuUmV0dXJucyBhIGNvbW1hbmQgZnVuY3Rpb24gdGhhdCB3cmFwcyB0aGUgc2VsZWN0aW9uIGluIGEgbGlzdCB3aXRoXG50aGUgZ2l2ZW4gdHlwZSBhbiBhdHRyaWJ1dGVzLiBJZiBgZGlzcGF0Y2hgIGlzIG51bGwsIG9ubHkgcmV0dXJuIGFcbnZhbHVlIHRvIGluZGljYXRlIHdoZXRoZXIgdGhpcyBpcyBwb3NzaWJsZSwgYnV0IGRvbid0IGFjdHVhbGx5XG5wZXJmb3JtIHRoZSBjaGFuZ2UuXG4qL1xuZnVuY3Rpb24gd3JhcEluTGlzdChsaXN0VHlwZSwgYXR0cnMgPSBudWxsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgZGlzcGF0Y2gpIHtcbiAgICAgICAgbGV0IHsgJGZyb20sICR0byB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgICAgICBsZXQgcmFuZ2UgPSAkZnJvbS5ibG9ja1JhbmdlKCR0byk7XG4gICAgICAgIGlmICghcmFuZ2UpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCB0ciA9IGRpc3BhdGNoID8gc3RhdGUudHIgOiBudWxsO1xuICAgICAgICBpZiAoIXdyYXBSYW5nZUluTGlzdCh0ciwgcmFuZ2UsIGxpc3RUeXBlLCBhdHRycykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuLyoqXG5UcnkgdG8gd3JhcCB0aGUgZ2l2ZW4gbm9kZSByYW5nZSBpbiBhIGxpc3Qgb2YgdGhlIGdpdmVuIHR5cGUuXG5SZXR1cm4gYHRydWVgIHdoZW4gdGhpcyBpcyBwb3NzaWJsZSwgYGZhbHNlYCBvdGhlcndpc2UuIFdoZW4gYHRyYFxuaXMgbm9uLW51bGwsIHRoZSB3cmFwcGluZyBpcyBhZGRlZCB0byB0aGF0IHRyYW5zYWN0aW9uLiBXaGVuIGl0IGlzXG5gbnVsbGAsIHRoZSBmdW5jdGlvbiBvbmx5IHF1ZXJpZXMgd2hldGhlciB0aGUgd3JhcHBpbmcgaXNcbnBvc3NpYmxlLlxuKi9cbmZ1bmN0aW9uIHdyYXBSYW5nZUluTGlzdCh0ciwgcmFuZ2UsIGxpc3RUeXBlLCBhdHRycyA9IG51bGwpIHtcbiAgICBsZXQgZG9Kb2luID0gZmFsc2UsIG91dGVyUmFuZ2UgPSByYW5nZSwgZG9jID0gcmFuZ2UuJGZyb20uZG9jO1xuICAgIC8vIFRoaXMgaXMgYXQgdGhlIHRvcCBvZiBhbiBleGlzdGluZyBsaXN0IGl0ZW1cbiAgICBpZiAocmFuZ2UuZGVwdGggPj0gMiAmJiByYW5nZS4kZnJvbS5ub2RlKHJhbmdlLmRlcHRoIC0gMSkudHlwZS5jb21wYXRpYmxlQ29udGVudChsaXN0VHlwZSkgJiYgcmFuZ2Uuc3RhcnRJbmRleCA9PSAwKSB7XG4gICAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoaXMgaXMgdGhlIHRvcCBvZiB0aGUgbGlzdFxuICAgICAgICBpZiAocmFuZ2UuJGZyb20uaW5kZXgocmFuZ2UuZGVwdGggLSAxKSA9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgJGluc2VydCA9IGRvYy5yZXNvbHZlKHJhbmdlLnN0YXJ0IC0gMik7XG4gICAgICAgIG91dGVyUmFuZ2UgPSBuZXcgTm9kZVJhbmdlKCRpbnNlcnQsICRpbnNlcnQsIHJhbmdlLmRlcHRoKTtcbiAgICAgICAgaWYgKHJhbmdlLmVuZEluZGV4IDwgcmFuZ2UucGFyZW50LmNoaWxkQ291bnQpXG4gICAgICAgICAgICByYW5nZSA9IG5ldyBOb2RlUmFuZ2UocmFuZ2UuJGZyb20sIGRvYy5yZXNvbHZlKHJhbmdlLiR0by5lbmQocmFuZ2UuZGVwdGgpKSwgcmFuZ2UuZGVwdGgpO1xuICAgICAgICBkb0pvaW4gPSB0cnVlO1xuICAgIH1cbiAgICBsZXQgd3JhcCA9IGZpbmRXcmFwcGluZyhvdXRlclJhbmdlLCBsaXN0VHlwZSwgYXR0cnMsIHJhbmdlKTtcbiAgICBpZiAoIXdyYXApXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHIpXG4gICAgICAgIGRvV3JhcEluTGlzdCh0ciwgcmFuZ2UsIHdyYXAsIGRvSm9pbiwgbGlzdFR5cGUpO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZG9XcmFwSW5MaXN0KHRyLCByYW5nZSwgd3JhcHBlcnMsIGpvaW5CZWZvcmUsIGxpc3RUeXBlKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBGcmFnbWVudC5lbXB0eTtcbiAgICBmb3IgKGxldCBpID0gd3JhcHBlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgIGNvbnRlbnQgPSBGcmFnbWVudC5mcm9tKHdyYXBwZXJzW2ldLnR5cGUuY3JlYXRlKHdyYXBwZXJzW2ldLmF0dHJzLCBjb250ZW50KSk7XG4gICAgdHIuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAocmFuZ2Uuc3RhcnQgLSAoam9pbkJlZm9yZSA/IDIgOiAwKSwgcmFuZ2UuZW5kLCByYW5nZS5zdGFydCwgcmFuZ2UuZW5kLCBuZXcgU2xpY2UoY29udGVudCwgMCwgMCksIHdyYXBwZXJzLmxlbmd0aCwgdHJ1ZSkpO1xuICAgIGxldCBmb3VuZCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3cmFwcGVycy5sZW5ndGg7IGkrKylcbiAgICAgICAgaWYgKHdyYXBwZXJzW2ldLnR5cGUgPT0gbGlzdFR5cGUpXG4gICAgICAgICAgICBmb3VuZCA9IGkgKyAxO1xuICAgIGxldCBzcGxpdERlcHRoID0gd3JhcHBlcnMubGVuZ3RoIC0gZm91bmQ7XG4gICAgbGV0IHNwbGl0UG9zID0gcmFuZ2Uuc3RhcnQgKyB3cmFwcGVycy5sZW5ndGggLSAoam9pbkJlZm9yZSA/IDIgOiAwKSwgcGFyZW50ID0gcmFuZ2UucGFyZW50O1xuICAgIGZvciAobGV0IGkgPSByYW5nZS5zdGFydEluZGV4LCBlID0gcmFuZ2UuZW5kSW5kZXgsIGZpcnN0ID0gdHJ1ZTsgaSA8IGU7IGkrKywgZmlyc3QgPSBmYWxzZSkge1xuICAgICAgICBpZiAoIWZpcnN0ICYmIGNhblNwbGl0KHRyLmRvYywgc3BsaXRQb3MsIHNwbGl0RGVwdGgpKSB7XG4gICAgICAgICAgICB0ci5zcGxpdChzcGxpdFBvcywgc3BsaXREZXB0aCk7XG4gICAgICAgICAgICBzcGxpdFBvcyArPSAyICogc3BsaXREZXB0aDtcbiAgICAgICAgfVxuICAgICAgICBzcGxpdFBvcyArPSBwYXJlbnQuY2hpbGQoaSkubm9kZVNpemU7XG4gICAgfVxuICAgIHJldHVybiB0cjtcbn1cbi8qKlxuQnVpbGQgYSBjb21tYW5kIHRoYXQgc3BsaXRzIGEgbm9uLWVtcHR5IHRleHRibG9jayBhdCB0aGUgdG9wIGxldmVsXG5vZiBhIGxpc3QgaXRlbSBieSBhbHNvIHNwbGl0dGluZyB0aGF0IGxpc3QgaXRlbS5cbiovXG5mdW5jdGlvbiBzcGxpdExpc3RJdGVtKGl0ZW1UeXBlLCBpdGVtQXR0cnMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBkaXNwYXRjaCkge1xuICAgICAgICBsZXQgeyAkZnJvbSwgJHRvLCBub2RlIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgICAgIGlmICgobm9kZSAmJiBub2RlLmlzQmxvY2spIHx8ICRmcm9tLmRlcHRoIDwgMiB8fCAhJGZyb20uc2FtZVBhcmVudCgkdG8pKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgZ3JhbmRQYXJlbnQgPSAkZnJvbS5ub2RlKC0xKTtcbiAgICAgICAgaWYgKGdyYW5kUGFyZW50LnR5cGUgIT0gaXRlbVR5cGUpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICgkZnJvbS5wYXJlbnQuY29udGVudC5zaXplID09IDAgJiYgJGZyb20ubm9kZSgtMSkuY2hpbGRDb3VudCA9PSAkZnJvbS5pbmRleEFmdGVyKC0xKSkge1xuICAgICAgICAgICAgLy8gSW4gYW4gZW1wdHkgYmxvY2suIElmIHRoaXMgaXMgYSBuZXN0ZWQgbGlzdCwgdGhlIHdyYXBwaW5nXG4gICAgICAgICAgICAvLyBsaXN0IGl0ZW0gc2hvdWxkIGJlIHNwbGl0LiBPdGhlcndpc2UsIGJhaWwgb3V0IGFuZCBsZXQgbmV4dFxuICAgICAgICAgICAgLy8gY29tbWFuZCBoYW5kbGUgbGlmdGluZy5cbiAgICAgICAgICAgIGlmICgkZnJvbS5kZXB0aCA9PSAzIHx8ICRmcm9tLm5vZGUoLTMpLnR5cGUgIT0gaXRlbVR5cGUgfHxcbiAgICAgICAgICAgICAgICAkZnJvbS5pbmRleCgtMikgIT0gJGZyb20ubm9kZSgtMikuY2hpbGRDb3VudCAtIDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHdyYXAgPSBGcmFnbWVudC5lbXB0eTtcbiAgICAgICAgICAgICAgICBsZXQgZGVwdGhCZWZvcmUgPSAkZnJvbS5pbmRleCgtMSkgPyAxIDogJGZyb20uaW5kZXgoLTIpID8gMiA6IDM7XG4gICAgICAgICAgICAgICAgLy8gQnVpbGQgYSBmcmFnbWVudCBjb250YWluaW5nIGVtcHR5IHZlcnNpb25zIG9mIHRoZSBzdHJ1Y3R1cmVcbiAgICAgICAgICAgICAgICAvLyBmcm9tIHRoZSBvdXRlciBsaXN0IGl0ZW0gdG8gdGhlIHBhcmVudCBub2RlIG9mIHRoZSBjdXJzb3JcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBkID0gJGZyb20uZGVwdGggLSBkZXB0aEJlZm9yZTsgZCA+PSAkZnJvbS5kZXB0aCAtIDM7IGQtLSlcbiAgICAgICAgICAgICAgICAgICAgd3JhcCA9IEZyYWdtZW50LmZyb20oJGZyb20ubm9kZShkKS5jb3B5KHdyYXApKTtcbiAgICAgICAgICAgICAgICBsZXQgZGVwdGhBZnRlciA9ICRmcm9tLmluZGV4QWZ0ZXIoLTEpIDwgJGZyb20ubm9kZSgtMikuY2hpbGRDb3VudCA/IDFcbiAgICAgICAgICAgICAgICAgICAgOiAkZnJvbS5pbmRleEFmdGVyKC0yKSA8ICRmcm9tLm5vZGUoLTMpLmNoaWxkQ291bnQgPyAyIDogMztcbiAgICAgICAgICAgICAgICAvLyBBZGQgYSBzZWNvbmQgbGlzdCBpdGVtIHdpdGggYW4gZW1wdHkgZGVmYXVsdCBzdGFydCBub2RlXG4gICAgICAgICAgICAgICAgd3JhcCA9IHdyYXAuYXBwZW5kKEZyYWdtZW50LmZyb20oaXRlbVR5cGUuY3JlYXRlQW5kRmlsbCgpKSk7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXJ0ID0gJGZyb20uYmVmb3JlKCRmcm9tLmRlcHRoIC0gKGRlcHRoQmVmb3JlIC0gMSkpO1xuICAgICAgICAgICAgICAgIGxldCB0ciA9IHN0YXRlLnRyLnJlcGxhY2Uoc3RhcnQsICRmcm9tLmFmdGVyKC1kZXB0aEFmdGVyKSwgbmV3IFNsaWNlKHdyYXAsIDQgLSBkZXB0aEJlZm9yZSwgMCkpO1xuICAgICAgICAgICAgICAgIGxldCBzZWwgPSAtMTtcbiAgICAgICAgICAgICAgICB0ci5kb2Mubm9kZXNCZXR3ZWVuKHN0YXJ0LCB0ci5kb2MuY29udGVudC5zaXplLCAobm9kZSwgcG9zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWwgPiAtMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuaXNUZXh0YmxvY2sgJiYgbm9kZS5jb250ZW50LnNpemUgPT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbCA9IHBvcyArIDE7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbCA+IC0xKVxuICAgICAgICAgICAgICAgICAgICB0ci5zZXRTZWxlY3Rpb24oU2VsZWN0aW9uLm5lYXIodHIuZG9jLnJlc29sdmUoc2VsKSkpO1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5leHRUeXBlID0gJHRvLnBvcyA9PSAkZnJvbS5lbmQoKSA/IGdyYW5kUGFyZW50LmNvbnRlbnRNYXRjaEF0KDApLmRlZmF1bHRUeXBlIDogbnVsbDtcbiAgICAgICAgbGV0IHRyID0gc3RhdGUudHIuZGVsZXRlKCRmcm9tLnBvcywgJHRvLnBvcyk7XG4gICAgICAgIGxldCB0eXBlcyA9IG5leHRUeXBlID8gW2l0ZW1BdHRycyA/IHsgdHlwZTogaXRlbVR5cGUsIGF0dHJzOiBpdGVtQXR0cnMgfSA6IG51bGwsIHsgdHlwZTogbmV4dFR5cGUgfV0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmICghY2FuU3BsaXQodHIuZG9jLCAkZnJvbS5wb3MsIDIsIHR5cGVzKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICAgICAgZGlzcGF0Y2godHIuc3BsaXQoJGZyb20ucG9zLCAyLCB0eXBlcykuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59XG4vKipcbkFjdHMgbGlrZSBbYHNwbGl0TGlzdEl0ZW1gXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc2NoZW1hLWxpc3Quc3BsaXRMaXN0SXRlbSksIGJ1dFxud2l0aG91dCByZXNldHRpbmcgdGhlIHNldCBvZiBhY3RpdmUgbWFya3MgYXQgdGhlIGN1cnNvci5cbiovXG5mdW5jdGlvbiBzcGxpdExpc3RJdGVtS2VlcE1hcmtzKGl0ZW1UeXBlLCBpdGVtQXR0cnMpIHtcbiAgICBsZXQgc3BsaXQgPSBzcGxpdExpc3RJdGVtKGl0ZW1UeXBlLCBpdGVtQXR0cnMpO1xuICAgIHJldHVybiAoc3RhdGUsIGRpc3BhdGNoKSA9PiB7XG4gICAgICAgIHJldHVybiBzcGxpdChzdGF0ZSwgZGlzcGF0Y2ggJiYgKHRyID0+IHtcbiAgICAgICAgICAgIGxldCBtYXJrcyA9IHN0YXRlLnN0b3JlZE1hcmtzIHx8IChzdGF0ZS5zZWxlY3Rpb24uJHRvLnBhcmVudE9mZnNldCAmJiBzdGF0ZS5zZWxlY3Rpb24uJGZyb20ubWFya3MoKSk7XG4gICAgICAgICAgICBpZiAobWFya3MpXG4gICAgICAgICAgICAgICAgdHIuZW5zdXJlTWFya3MobWFya3MpO1xuICAgICAgICAgICAgZGlzcGF0Y2godHIpO1xuICAgICAgICB9KSk7XG4gICAgfTtcbn1cbi8qKlxuQ3JlYXRlIGEgY29tbWFuZCB0byBsaWZ0IHRoZSBsaXN0IGl0ZW0gYXJvdW5kIHRoZSBzZWxlY3Rpb24gdXAgaW50b1xuYSB3cmFwcGluZyBsaXN0LlxuKi9cbmZ1bmN0aW9uIGxpZnRMaXN0SXRlbShpdGVtVHlwZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGRpc3BhdGNoKSB7XG4gICAgICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICAgICAgbGV0IHJhbmdlID0gJGZyb20uYmxvY2tSYW5nZSgkdG8sIG5vZGUgPT4gbm9kZS5jaGlsZENvdW50ID4gMCAmJiBub2RlLmZpcnN0Q2hpbGQudHlwZSA9PSBpdGVtVHlwZSk7XG4gICAgICAgIGlmICghcmFuZ2UpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghZGlzcGF0Y2gpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKCRmcm9tLm5vZGUocmFuZ2UuZGVwdGggLSAxKS50eXBlID09IGl0ZW1UeXBlKSAvLyBJbnNpZGUgYSBwYXJlbnQgbGlzdFxuICAgICAgICAgICAgcmV0dXJuIGxpZnRUb091dGVyTGlzdChzdGF0ZSwgZGlzcGF0Y2gsIGl0ZW1UeXBlLCByYW5nZSk7XG4gICAgICAgIGVsc2UgLy8gT3V0ZXIgbGlzdCBub2RlXG4gICAgICAgICAgICByZXR1cm4gbGlmdE91dE9mTGlzdChzdGF0ZSwgZGlzcGF0Y2gsIHJhbmdlKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gbGlmdFRvT3V0ZXJMaXN0KHN0YXRlLCBkaXNwYXRjaCwgaXRlbVR5cGUsIHJhbmdlKSB7XG4gICAgbGV0IHRyID0gc3RhdGUudHIsIGVuZCA9IHJhbmdlLmVuZCwgZW5kT2ZMaXN0ID0gcmFuZ2UuJHRvLmVuZChyYW5nZS5kZXB0aCk7XG4gICAgaWYgKGVuZCA8IGVuZE9mTGlzdCkge1xuICAgICAgICAvLyBUaGVyZSBhcmUgc2libGluZ3MgYWZ0ZXIgdGhlIGxpZnRlZCBpdGVtcywgd2hpY2ggbXVzdCBiZWNvbWVcbiAgICAgICAgLy8gY2hpbGRyZW4gb2YgdGhlIGxhc3QgaXRlbVxuICAgICAgICB0ci5zdGVwKG5ldyBSZXBsYWNlQXJvdW5kU3RlcChlbmQgLSAxLCBlbmRPZkxpc3QsIGVuZCwgZW5kT2ZMaXN0LCBuZXcgU2xpY2UoRnJhZ21lbnQuZnJvbShpdGVtVHlwZS5jcmVhdGUobnVsbCwgcmFuZ2UucGFyZW50LmNvcHkoKSkpLCAxLCAwKSwgMSwgdHJ1ZSkpO1xuICAgICAgICByYW5nZSA9IG5ldyBOb2RlUmFuZ2UodHIuZG9jLnJlc29sdmUocmFuZ2UuJGZyb20ucG9zKSwgdHIuZG9jLnJlc29sdmUoZW5kT2ZMaXN0KSwgcmFuZ2UuZGVwdGgpO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXQgPSBsaWZ0VGFyZ2V0KHJhbmdlKTtcbiAgICBpZiAodGFyZ2V0ID09IG51bGwpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB0ci5saWZ0KHJhbmdlLCB0YXJnZXQpO1xuICAgIGxldCAkYWZ0ZXIgPSB0ci5kb2MucmVzb2x2ZSh0ci5tYXBwaW5nLm1hcChlbmQsIC0xKSAtIDEpO1xuICAgIGlmIChjYW5Kb2luKHRyLmRvYywgJGFmdGVyLnBvcykgJiYgJGFmdGVyLm5vZGVCZWZvcmUudHlwZSA9PSAkYWZ0ZXIubm9kZUFmdGVyLnR5cGUpXG4gICAgICAgIHRyLmpvaW4oJGFmdGVyLnBvcyk7XG4gICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBsaWZ0T3V0T2ZMaXN0KHN0YXRlLCBkaXNwYXRjaCwgcmFuZ2UpIHtcbiAgICBsZXQgdHIgPSBzdGF0ZS50ciwgbGlzdCA9IHJhbmdlLnBhcmVudDtcbiAgICAvLyBNZXJnZSB0aGUgbGlzdCBpdGVtcyBpbnRvIGEgc2luZ2xlIGJpZyBpdGVtXG4gICAgZm9yIChsZXQgcG9zID0gcmFuZ2UuZW5kLCBpID0gcmFuZ2UuZW5kSW5kZXggLSAxLCBlID0gcmFuZ2Uuc3RhcnRJbmRleDsgaSA+IGU7IGktLSkge1xuICAgICAgICBwb3MgLT0gbGlzdC5jaGlsZChpKS5ub2RlU2l6ZTtcbiAgICAgICAgdHIuZGVsZXRlKHBvcyAtIDEsIHBvcyArIDEpO1xuICAgIH1cbiAgICBsZXQgJHN0YXJ0ID0gdHIuZG9jLnJlc29sdmUocmFuZ2Uuc3RhcnQpLCBpdGVtID0gJHN0YXJ0Lm5vZGVBZnRlcjtcbiAgICBpZiAodHIubWFwcGluZy5tYXAocmFuZ2UuZW5kKSAhPSByYW5nZS5zdGFydCArICRzdGFydC5ub2RlQWZ0ZXIubm9kZVNpemUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgYXRTdGFydCA9IHJhbmdlLnN0YXJ0SW5kZXggPT0gMCwgYXRFbmQgPSByYW5nZS5lbmRJbmRleCA9PSBsaXN0LmNoaWxkQ291bnQ7XG4gICAgbGV0IHBhcmVudCA9ICRzdGFydC5ub2RlKC0xKSwgaW5kZXhCZWZvcmUgPSAkc3RhcnQuaW5kZXgoLTEpO1xuICAgIGlmICghcGFyZW50LmNhblJlcGxhY2UoaW5kZXhCZWZvcmUgKyAoYXRTdGFydCA/IDAgOiAxKSwgaW5kZXhCZWZvcmUgKyAxLCBpdGVtLmNvbnRlbnQuYXBwZW5kKGF0RW5kID8gRnJhZ21lbnQuZW1wdHkgOiBGcmFnbWVudC5mcm9tKGxpc3QpKSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgc3RhcnQgPSAkc3RhcnQucG9zLCBlbmQgPSBzdGFydCArIGl0ZW0ubm9kZVNpemU7XG4gICAgLy8gU3RyaXAgb2ZmIHRoZSBzdXJyb3VuZGluZyBsaXN0LiBBdCB0aGUgc2lkZXMgd2hlcmUgd2UncmUgbm90IGF0XG4gICAgLy8gdGhlIGVuZCBvZiB0aGUgbGlzdCwgdGhlIGV4aXN0aW5nIGxpc3QgaXMgY2xvc2VkLiBBdCBzaWRlcyB3aGVyZVxuICAgIC8vIHRoaXMgaXMgdGhlIGVuZCwgaXQgaXMgb3ZlcndyaXR0ZW4gdG8gaXRzIGVuZC5cbiAgICB0ci5zdGVwKG5ldyBSZXBsYWNlQXJvdW5kU3RlcChzdGFydCAtIChhdFN0YXJ0ID8gMSA6IDApLCBlbmQgKyAoYXRFbmQgPyAxIDogMCksIHN0YXJ0ICsgMSwgZW5kIC0gMSwgbmV3IFNsaWNlKChhdFN0YXJ0ID8gRnJhZ21lbnQuZW1wdHkgOiBGcmFnbWVudC5mcm9tKGxpc3QuY29weShGcmFnbWVudC5lbXB0eSkpKVxuICAgICAgICAuYXBwZW5kKGF0RW5kID8gRnJhZ21lbnQuZW1wdHkgOiBGcmFnbWVudC5mcm9tKGxpc3QuY29weShGcmFnbWVudC5lbXB0eSkpKSwgYXRTdGFydCA/IDAgOiAxLCBhdEVuZCA/IDAgOiAxKSwgYXRTdGFydCA/IDAgOiAxKSk7XG4gICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbkNyZWF0ZSBhIGNvbW1hbmQgdG8gc2luayB0aGUgbGlzdCBpdGVtIGFyb3VuZCB0aGUgc2VsZWN0aW9uIGRvd25cbmludG8gYW4gaW5uZXIgbGlzdC5cbiovXG5mdW5jdGlvbiBzaW5rTGlzdEl0ZW0oaXRlbVR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBkaXNwYXRjaCkge1xuICAgICAgICBsZXQgeyAkZnJvbSwgJHRvIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgICAgIGxldCByYW5nZSA9ICRmcm9tLmJsb2NrUmFuZ2UoJHRvLCBub2RlID0+IG5vZGUuY2hpbGRDb3VudCA+IDAgJiYgbm9kZS5maXJzdENoaWxkLnR5cGUgPT0gaXRlbVR5cGUpO1xuICAgICAgICBpZiAoIXJhbmdlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgc3RhcnRJbmRleCA9IHJhbmdlLnN0YXJ0SW5kZXg7XG4gICAgICAgIGlmIChzdGFydEluZGV4ID09IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCBwYXJlbnQgPSByYW5nZS5wYXJlbnQsIG5vZGVCZWZvcmUgPSBwYXJlbnQuY2hpbGQoc3RhcnRJbmRleCAtIDEpO1xuICAgICAgICBpZiAobm9kZUJlZm9yZS50eXBlICE9IGl0ZW1UeXBlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgICAgIGxldCBuZXN0ZWRCZWZvcmUgPSBub2RlQmVmb3JlLmxhc3RDaGlsZCAmJiBub2RlQmVmb3JlLmxhc3RDaGlsZC50eXBlID09IHBhcmVudC50eXBlO1xuICAgICAgICAgICAgbGV0IGlubmVyID0gRnJhZ21lbnQuZnJvbShuZXN0ZWRCZWZvcmUgPyBpdGVtVHlwZS5jcmVhdGUoKSA6IG51bGwpO1xuICAgICAgICAgICAgbGV0IHNsaWNlID0gbmV3IFNsaWNlKEZyYWdtZW50LmZyb20oaXRlbVR5cGUuY3JlYXRlKG51bGwsIEZyYWdtZW50LmZyb20ocGFyZW50LnR5cGUuY3JlYXRlKG51bGwsIGlubmVyKSkpKSwgbmVzdGVkQmVmb3JlID8gMyA6IDEsIDApO1xuICAgICAgICAgICAgbGV0IGJlZm9yZSA9IHJhbmdlLnN0YXJ0LCBhZnRlciA9IHJhbmdlLmVuZDtcbiAgICAgICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLnN0ZXAobmV3IFJlcGxhY2VBcm91bmRTdGVwKGJlZm9yZSAtIChuZXN0ZWRCZWZvcmUgPyAzIDogMSksIGFmdGVyLCBiZWZvcmUsIGFmdGVyLCBzbGljZSwgMSwgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59XG5cbmV4cG9ydCB7IGFkZExpc3ROb2RlcywgYnVsbGV0TGlzdCwgbGlmdExpc3RJdGVtLCBsaXN0SXRlbSwgb3JkZXJlZExpc3QsIHNpbmtMaXN0SXRlbSwgc3BsaXRMaXN0SXRlbSwgc3BsaXRMaXN0SXRlbUtlZXBNYXJrcywgd3JhcEluTGlzdCwgd3JhcFJhbmdlSW5MaXN0IH07XG4iLCJpbXBvcnQgeyBTY2hlbWEgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5cbmNvbnN0IHBET00gPSBbXCJwXCIsIDBdLCBibG9ja3F1b3RlRE9NID0gW1wiYmxvY2txdW90ZVwiLCAwXSwgaHJET00gPSBbXCJoclwiXSwgcHJlRE9NID0gW1wicHJlXCIsIFtcImNvZGVcIiwgMF1dLCBickRPTSA9IFtcImJyXCJdO1xuLyoqXG5bU3BlY3NdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYykgZm9yIHRoZSBub2RlcyBkZWZpbmVkIGluIHRoaXMgc2NoZW1hLlxuKi9cbmNvbnN0IG5vZGVzID0ge1xuICAgIC8qKlxuICAgIE5vZGVTcGVjIFRoZSB0b3AgbGV2ZWwgZG9jdW1lbnQgbm9kZS5cbiAgICAqL1xuICAgIGRvYzoge1xuICAgICAgICBjb250ZW50OiBcImJsb2NrK1wiXG4gICAgfSxcbiAgICAvKipcbiAgICBBIHBsYWluIHBhcmFncmFwaCB0ZXh0YmxvY2suIFJlcHJlc2VudGVkIGluIHRoZSBET01cbiAgICBhcyBhIGA8cD5gIGVsZW1lbnQuXG4gICAgKi9cbiAgICBwYXJhZ3JhcGg6IHtcbiAgICAgICAgY29udGVudDogXCJpbmxpbmUqXCIsXG4gICAgICAgIGdyb3VwOiBcImJsb2NrXCIsXG4gICAgICAgIHBhcnNlRE9NOiBbeyB0YWc6IFwicFwiIH1dLFxuICAgICAgICB0b0RPTSgpIHsgcmV0dXJuIHBET007IH1cbiAgICB9LFxuICAgIC8qKlxuICAgIEEgYmxvY2txdW90ZSAoYDxibG9ja3F1b3RlPmApIHdyYXBwaW5nIG9uZSBvciBtb3JlIGJsb2Nrcy5cbiAgICAqL1xuICAgIGJsb2NrcXVvdGU6IHtcbiAgICAgICAgY29udGVudDogXCJibG9jaytcIixcbiAgICAgICAgZ3JvdXA6IFwiYmxvY2tcIixcbiAgICAgICAgZGVmaW5pbmc6IHRydWUsXG4gICAgICAgIHBhcnNlRE9NOiBbeyB0YWc6IFwiYmxvY2txdW90ZVwiIH1dLFxuICAgICAgICB0b0RPTSgpIHsgcmV0dXJuIGJsb2NrcXVvdGVET007IH1cbiAgICB9LFxuICAgIC8qKlxuICAgIEEgaG9yaXpvbnRhbCBydWxlIChgPGhyPmApLlxuICAgICovXG4gICAgaG9yaXpvbnRhbF9ydWxlOiB7XG4gICAgICAgIGdyb3VwOiBcImJsb2NrXCIsXG4gICAgICAgIHBhcnNlRE9NOiBbeyB0YWc6IFwiaHJcIiB9XSxcbiAgICAgICAgdG9ET00oKSB7IHJldHVybiBockRPTTsgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgQSBoZWFkaW5nIHRleHRibG9jaywgd2l0aCBhIGBsZXZlbGAgYXR0cmlidXRlIHRoYXRcbiAgICBzaG91bGQgaG9sZCB0aGUgbnVtYmVyIDEgdG8gNi4gUGFyc2VkIGFuZCBzZXJpYWxpemVkIGFzIGA8aDE+YCB0b1xuICAgIGA8aDY+YCBlbGVtZW50cy5cbiAgICAqL1xuICAgIGhlYWRpbmc6IHtcbiAgICAgICAgYXR0cnM6IHsgbGV2ZWw6IHsgZGVmYXVsdDogMSwgdmFsaWRhdGU6IFwibnVtYmVyXCIgfSB9LFxuICAgICAgICBjb250ZW50OiBcImlubGluZSpcIixcbiAgICAgICAgZ3JvdXA6IFwiYmxvY2tcIixcbiAgICAgICAgZGVmaW5pbmc6IHRydWUsXG4gICAgICAgIHBhcnNlRE9NOiBbeyB0YWc6IFwiaDFcIiwgYXR0cnM6IHsgbGV2ZWw6IDEgfSB9LFxuICAgICAgICAgICAgeyB0YWc6IFwiaDJcIiwgYXR0cnM6IHsgbGV2ZWw6IDIgfSB9LFxuICAgICAgICAgICAgeyB0YWc6IFwiaDNcIiwgYXR0cnM6IHsgbGV2ZWw6IDMgfSB9LFxuICAgICAgICAgICAgeyB0YWc6IFwiaDRcIiwgYXR0cnM6IHsgbGV2ZWw6IDQgfSB9LFxuICAgICAgICAgICAgeyB0YWc6IFwiaDVcIiwgYXR0cnM6IHsgbGV2ZWw6IDUgfSB9LFxuICAgICAgICAgICAgeyB0YWc6IFwiaDZcIiwgYXR0cnM6IHsgbGV2ZWw6IDYgfSB9XSxcbiAgICAgICAgdG9ET00obm9kZSkgeyByZXR1cm4gW1wiaFwiICsgbm9kZS5hdHRycy5sZXZlbCwgMF07IH1cbiAgICB9LFxuICAgIC8qKlxuICAgIEEgY29kZSBsaXN0aW5nLiBEaXNhbGxvd3MgbWFya3Mgb3Igbm9uLXRleHQgaW5saW5lXG4gICAgbm9kZXMgYnkgZGVmYXVsdC4gUmVwcmVzZW50ZWQgYXMgYSBgPHByZT5gIGVsZW1lbnQgd2l0aCBhXG4gICAgYDxjb2RlPmAgZWxlbWVudCBpbnNpZGUgb2YgaXQuXG4gICAgKi9cbiAgICBjb2RlX2Jsb2NrOiB7XG4gICAgICAgIGNvbnRlbnQ6IFwidGV4dCpcIixcbiAgICAgICAgbWFya3M6IFwiXCIsXG4gICAgICAgIGdyb3VwOiBcImJsb2NrXCIsXG4gICAgICAgIGNvZGU6IHRydWUsXG4gICAgICAgIGRlZmluaW5nOiB0cnVlLFxuICAgICAgICBwYXJzZURPTTogW3sgdGFnOiBcInByZVwiLCBwcmVzZXJ2ZVdoaXRlc3BhY2U6IFwiZnVsbFwiIH1dLFxuICAgICAgICB0b0RPTSgpIHsgcmV0dXJuIHByZURPTTsgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgVGhlIHRleHQgbm9kZS5cbiAgICAqL1xuICAgIHRleHQ6IHtcbiAgICAgICAgZ3JvdXA6IFwiaW5saW5lXCJcbiAgICB9LFxuICAgIC8qKlxuICAgIEFuIGlubGluZSBpbWFnZSAoYDxpbWc+YCkgbm9kZS4gU3VwcG9ydHMgYHNyY2AsXG4gICAgYGFsdGAsIGFuZCBgaHJlZmAgYXR0cmlidXRlcy4gVGhlIGxhdHRlciB0d28gZGVmYXVsdCB0byB0aGUgZW1wdHlcbiAgICBzdHJpbmcuXG4gICAgKi9cbiAgICBpbWFnZToge1xuICAgICAgICBpbmxpbmU6IHRydWUsXG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICBzcmM6IHsgdmFsaWRhdGU6IFwic3RyaW5nXCIgfSxcbiAgICAgICAgICAgIGFsdDogeyBkZWZhdWx0OiBudWxsLCB2YWxpZGF0ZTogXCJzdHJpbmd8bnVsbFwiIH0sXG4gICAgICAgICAgICB0aXRsZTogeyBkZWZhdWx0OiBudWxsLCB2YWxpZGF0ZTogXCJzdHJpbmd8bnVsbFwiIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ3JvdXA6IFwiaW5saW5lXCIsXG4gICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgcGFyc2VET006IFt7IHRhZzogXCJpbWdbc3JjXVwiLCBnZXRBdHRycyhkb20pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogZG9tLmdldEF0dHJpYnV0ZShcInNyY1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBkb20uZ2V0QXR0cmlidXRlKFwidGl0bGVcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHQ6IGRvbS5nZXRBdHRyaWJ1dGUoXCJhbHRcIilcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IH1dLFxuICAgICAgICB0b0RPTShub2RlKSB7IGxldCB7IHNyYywgYWx0LCB0aXRsZSB9ID0gbm9kZS5hdHRyczsgcmV0dXJuIFtcImltZ1wiLCB7IHNyYywgYWx0LCB0aXRsZSB9XTsgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgQSBoYXJkIGxpbmUgYnJlYWssIHJlcHJlc2VudGVkIGluIHRoZSBET00gYXMgYDxicj5gLlxuICAgICovXG4gICAgaGFyZF9icmVhazoge1xuICAgICAgICBpbmxpbmU6IHRydWUsXG4gICAgICAgIGdyb3VwOiBcImlubGluZVwiLFxuICAgICAgICBzZWxlY3RhYmxlOiBmYWxzZSxcbiAgICAgICAgcGFyc2VET006IFt7IHRhZzogXCJiclwiIH1dLFxuICAgICAgICB0b0RPTSgpIHsgcmV0dXJuIGJyRE9NOyB9XG4gICAgfVxufTtcbmNvbnN0IGVtRE9NID0gW1wiZW1cIiwgMF0sIHN0cm9uZ0RPTSA9IFtcInN0cm9uZ1wiLCAwXSwgY29kZURPTSA9IFtcImNvZGVcIiwgMF07XG4vKipcbltTcGVjc10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk1hcmtTcGVjKSBmb3IgdGhlIG1hcmtzIGluIHRoZSBzY2hlbWEuXG4qL1xuY29uc3QgbWFya3MgPSB7XG4gICAgLyoqXG4gICAgQSBsaW5rLiBIYXMgYGhyZWZgIGFuZCBgdGl0bGVgIGF0dHJpYnV0ZXMuIGB0aXRsZWBcbiAgICBkZWZhdWx0cyB0byB0aGUgZW1wdHkgc3RyaW5nLiBSZW5kZXJlZCBhbmQgcGFyc2VkIGFzIGFuIGA8YT5gXG4gICAgZWxlbWVudC5cbiAgICAqL1xuICAgIGxpbms6IHtcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgIGhyZWY6IHsgdmFsaWRhdGU6IFwic3RyaW5nXCIgfSxcbiAgICAgICAgICAgIHRpdGxlOiB7IGRlZmF1bHQ6IG51bGwsIHZhbGlkYXRlOiBcInN0cmluZ3xudWxsXCIgfVxuICAgICAgICB9LFxuICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICBwYXJzZURPTTogW3sgdGFnOiBcImFbaHJlZl1cIiwgZ2V0QXR0cnMoZG9tKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGhyZWY6IGRvbS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpLCB0aXRsZTogZG9tLmdldEF0dHJpYnV0ZShcInRpdGxlXCIpIH07XG4gICAgICAgICAgICAgICAgfSB9XSxcbiAgICAgICAgdG9ET00obm9kZSkgeyBsZXQgeyBocmVmLCB0aXRsZSB9ID0gbm9kZS5hdHRyczsgcmV0dXJuIFtcImFcIiwgeyBocmVmLCB0aXRsZSB9LCAwXTsgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgQW4gZW1waGFzaXMgbWFyay4gUmVuZGVyZWQgYXMgYW4gYDxlbT5gIGVsZW1lbnQuIEhhcyBwYXJzZSBydWxlc1xuICAgIHRoYXQgYWxzbyBtYXRjaCBgPGk+YCBhbmQgYGZvbnQtc3R5bGU6IGl0YWxpY2AuXG4gICAgKi9cbiAgICBlbToge1xuICAgICAgICBwYXJzZURPTTogW1xuICAgICAgICAgICAgeyB0YWc6IFwiaVwiIH0sIHsgdGFnOiBcImVtXCIgfSxcbiAgICAgICAgICAgIHsgc3R5bGU6IFwiZm9udC1zdHlsZT1pdGFsaWNcIiB9LFxuICAgICAgICAgICAgeyBzdHlsZTogXCJmb250LXN0eWxlPW5vcm1hbFwiLCBjbGVhck1hcms6IG0gPT4gbS50eXBlLm5hbWUgPT0gXCJlbVwiIH1cbiAgICAgICAgXSxcbiAgICAgICAgdG9ET00oKSB7IHJldHVybiBlbURPTTsgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgQSBzdHJvbmcgbWFyay4gUmVuZGVyZWQgYXMgYDxzdHJvbmc+YCwgcGFyc2UgcnVsZXMgYWxzbyBtYXRjaFxuICAgIGA8Yj5gIGFuZCBgZm9udC13ZWlnaHQ6IGJvbGRgLlxuICAgICovXG4gICAgc3Ryb25nOiB7XG4gICAgICAgIHBhcnNlRE9NOiBbXG4gICAgICAgICAgICB7IHRhZzogXCJzdHJvbmdcIiB9LFxuICAgICAgICAgICAgLy8gVGhpcyB3b3JrcyBhcm91bmQgYSBHb29nbGUgRG9jcyBtaXNiZWhhdmlvciB3aGVyZVxuICAgICAgICAgICAgLy8gcGFzdGVkIGNvbnRlbnQgd2lsbCBiZSBpbmV4cGxpY2FibHkgd3JhcHBlZCBpbiBgPGI+YFxuICAgICAgICAgICAgLy8gdGFncyB3aXRoIGEgZm9udC13ZWlnaHQgbm9ybWFsLlxuICAgICAgICAgICAgeyB0YWc6IFwiYlwiLCBnZXRBdHRyczogKG5vZGUpID0+IG5vZGUuc3R5bGUuZm9udFdlaWdodCAhPSBcIm5vcm1hbFwiICYmIG51bGwgfSxcbiAgICAgICAgICAgIHsgc3R5bGU6IFwiZm9udC13ZWlnaHQ9NDAwXCIsIGNsZWFyTWFyazogbSA9PiBtLnR5cGUubmFtZSA9PSBcInN0cm9uZ1wiIH0sXG4gICAgICAgICAgICB7IHN0eWxlOiBcImZvbnQtd2VpZ2h0XCIsIGdldEF0dHJzOiAodmFsdWUpID0+IC9eKGJvbGQoZXIpP3xbNS05XVxcZHsyLH0pJC8udGVzdCh2YWx1ZSkgJiYgbnVsbCB9LFxuICAgICAgICBdLFxuICAgICAgICB0b0RPTSgpIHsgcmV0dXJuIHN0cm9uZ0RPTTsgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgQ29kZSBmb250IG1hcmsuIFJlcHJlc2VudGVkIGFzIGEgYDxjb2RlPmAgZWxlbWVudC5cbiAgICAqL1xuICAgIGNvZGU6IHtcbiAgICAgICAgY29kZTogdHJ1ZSxcbiAgICAgICAgcGFyc2VET006IFt7IHRhZzogXCJjb2RlXCIgfV0sXG4gICAgICAgIHRvRE9NKCkgeyByZXR1cm4gY29kZURPTTsgfVxuICAgIH1cbn07XG4vKipcblRoaXMgc2NoZW1hIHJvdWdobHkgY29ycmVzcG9uZHMgdG8gdGhlIGRvY3VtZW50IHNjaGVtYSB1c2VkIGJ5XG5bQ29tbW9uTWFya10oaHR0cDovL2NvbW1vbm1hcmsub3JnLyksIG1pbnVzIHRoZSBsaXN0IGVsZW1lbnRzLFxud2hpY2ggYXJlIGRlZmluZWQgaW4gdGhlIFtgcHJvc2VtaXJyb3Itc2NoZW1hLWxpc3RgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc2NoZW1hLWxpc3QpXG5tb2R1bGUuXG5cblRvIHJldXNlIGVsZW1lbnRzIGZyb20gdGhpcyBzY2hlbWEsIGV4dGVuZCBvciByZWFkIGZyb20gaXRzXG5gc3BlYy5ub2Rlc2AgYW5kIGBzcGVjLm1hcmtzYCBbcHJvcGVydGllc10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLlNjaGVtYS5zcGVjKS5cbiovXG5jb25zdCBzY2hlbWEgPSBuZXcgU2NoZW1hKHsgbm9kZXMsIG1hcmtzIH0pO1xuXG5leHBvcnQgeyBtYXJrcywgbm9kZXMsIHNjaGVtYSB9O1xuIiwiaW1wb3J0IHsgYnVsbGV0TGlzdCwgbGlzdEl0ZW0sIG9yZGVyZWRMaXN0IH0gZnJvbSAncHJvc2VtaXJyb3Itc2NoZW1hLWxpc3QnO1xuaW1wb3J0IHsgbWFya3MsIG5vZGVzIH0gZnJvbSAncHJvc2VtaXJyb3Itc2NoZW1hLWJhc2ljJztcbmltcG9ydCB7IE5vZGVTcGVjLCBTY2hlbWEsIFNjaGVtYVNwZWMgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5cbmV4cG9ydCBjb25zdCBNQVJLRE9XTl9FU0NBUEVEX0FUVFIgPSAnbWFya2Rvd25fZXNjYXBlZCc7XG5leHBvcnQgY29uc3QgQVVUT19MSU5LX0FUVFIgPSAnYXV0b19saW5rJzsgLy8gTGlua3MgYXV0by1kZXRlY3RlZCBmcm9tIHVzZXIgaW5wdXQsIGFzIG9wcG9zZWQgdG8gbGlua3MgYWRkZWQgYXMgbWV0YWRhdGEgYnkgdGhlIHVzZXJcblxuY29uc3QgRURJVE9SX0NMUyA9ICdzbi1lZGl0b3InO1xuXG5jb25zdCBkb2NTcGVjOiBOb2RlU3BlYyA9IHtcbiAgY29udGVudDogJ2Jsb2NrKycsXG4gIHRvRE9NKG5vZGUpIHtcbiAgICByZXR1cm4gWydtYWluJywgeyBjbGFzczogRURJVE9SX0NMUyB9LCAwXTtcbiAgfSxcbiAgcGFyc2VET006IFtcbiAgICB7XG4gICAgICB0YWc6ICdtYWluJyxcbiAgICB9LFxuICBdLFxufTtcblxuY29uc3QgaGVhZGluZzFTcGVjOiBOb2RlU3BlYyA9IHtcbiAgY29udGVudDogJ2lubGluZSonLFxuICBkZWZpbmluZzogdHJ1ZSxcbiAgZ3JvdXA6ICdibG9jaycsXG4gIHRvRE9NKG5vZGUpIHtcbiAgICByZXR1cm4gWydoMScsIHsgY2xhc3M6IEVESVRPUl9DTFMgfSwgMF07XG4gIH0sXG4gIHBhcnNlRE9NOiBbXG4gICAge1xuICAgICAgdGFnOiAnaDEnLFxuICAgIH0sXG4gIF0sXG59O1xuXG5jb25zdCBoZWFkaW5nMlNwZWM6IE5vZGVTcGVjID0ge1xuICBjb250ZW50OiAnaW5saW5lKicsXG4gIGRlZmluaW5nOiB0cnVlLFxuICBncm91cDogJ2Jsb2NrJyxcbiAgdG9ET00obm9kZSkge1xuICAgIHJldHVybiBbJ2gyJywgeyBjbGFzczogRURJVE9SX0NMUyB9LCAwXTtcbiAgfSxcbiAgcGFyc2VET006IFt7IHRhZzogJ2gyJyB9XSxcbn07XG5cbmNvbnN0IGhlYWRpbmczU3BlYzogTm9kZVNwZWMgPSB7XG4gIGNvbnRlbnQ6ICdpbmxpbmUqJyxcbiAgZGVmaW5pbmc6IHRydWUsXG4gIGdyb3VwOiAnYmxvY2snLFxuICB0b0RPTShub2RlKSB7XG4gICAgcmV0dXJuIFsnaDMnLCB7IGNsYXNzOiBFRElUT1JfQ0xTIH0sIDBdO1xuICB9LFxuICBwYXJzZURPTTogW3sgdGFnOiAnaDMnIH1dLFxufTtcblxuY29uc3QgcGFyYWdyYXBoU3BlYzogTm9kZVNwZWMgPSB7XG4gIGNvbnRlbnQ6ICdpbmxpbmUqJyxcbiAgZ3JvdXA6ICdibG9jaycsXG4gIG1hcmtzOiAnXycsXG4gIHRvRE9NKG5vZGUpIHtcbiAgICByZXR1cm4gWydwJywgeyBjbGFzczogRURJVE9SX0NMUyB9LCAwXTtcbiAgfSxcbiAgcGFyc2VET006IFt7IHRhZzogJ3AnIH1dLFxufTtcblxuZXhwb3J0IGVudW0gQ2hlY2tib3hTdGF0dXMge1xuICBET05FLFxuICBFTVBUWSxcbn1cblxuY29uc3QgY2hlY2tsaXN0SXRlbVNwZWM6IE5vZGVTcGVjID0ge1xuICBhdHRyczoge1xuICAgIHN0YXR1czoge1xuICAgICAgZGVmYXVsdDogQ2hlY2tib3hTdGF0dXMuRU1QVFksXG4gICAgfSxcbiAgfSxcbiAgY29udGVudDogJ2lubGluZSonLFxuICBkZWZpbmluZzogdHJ1ZSxcbiAgZ3JvdXA6ICdibG9jaycsXG4gIG1hcmtzOiAnXycsXG4gIHRvRE9NKG5vZGUpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ2RpdicsXG4gICAgICB7IGNsYXNzOiAnY2hlY2tsaXN0LWl0ZW0nIH0sXG4gICAgICBbXG4gICAgICAgICdpbnB1dCcsXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAnY2hlY2tib3gnLFxuICAgICAgICAgIC4uLihub2RlLmF0dHJzLnN0YXR1cyA9PT0gQ2hlY2tib3hTdGF0dXMuRE9ORSAmJiB7IGNoZWNrZWQ6ICd0cnVlJyB9KSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBbJ3AnLCAwXSxcbiAgICBdO1xuICB9LFxuICBwYXJzZURPTTogW1xuICAgIHtcbiAgICAgIGNvbnRlbnRFbGVtZW50OiAncCcsXG4gICAgICB0YWc6ICdkaXYuY2hlY2tsaXN0LWl0ZW0nLFxuICAgICAgZ2V0QXR0cnMobm9kZSkge1xuICAgICAgICAvLyBXaWxsIGJlIHR5cGUgTm9kZSB3aGVuIHBhcnNlRE9NIHN1cHBsaWVzIGEgJ3RhZycgcnVsZVxuICAgICAgICBjb25zdCBpbnB1dCA9IChub2RlIGFzIEhUTUxFbGVtZW50KS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXR1czogISEoaW5wdXQgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZFxuICAgICAgICAgICAgPyBDaGVja2JveFN0YXR1cy5ET05FXG4gICAgICAgICAgICA6IENoZWNrYm94U3RhdHVzLkVNUFRZLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICB9LFxuICBdLFxufTtcblxuY29uc3QgdGV4dFNwZWM6IE5vZGVTcGVjID0ge1xuICBncm91cDogJ2lubGluZScsXG59O1xuXG5jb25zdCBjb2RlQmxvY2tTcGVjOiBOb2RlU3BlYyA9IHtcbiAgLi4ubm9kZXMuY29kZV9ibG9jayxcbiAgYXR0cnM6IHtcbiAgICAuLi5ub2Rlcy5jb2RlX2Jsb2NrLmF0dHJzLFxuICAgIFtNQVJLRE9XTl9FU0NBUEVEX0FUVFJdOiB7XG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB9LFxuICB9LFxuICB0b0RPTShub2RlKSB7XG4gICAgY29uc3QgYXR0cnMgPSB7XG4gICAgICBbYGRhdGEtJHtNQVJLRE9XTl9FU0NBUEVEX0FUVFJ9YF06IG5vZGUuYXR0cnNbTUFSS0RPV05fRVNDQVBFRF9BVFRSXSxcbiAgICB9O1xuICAgIHJldHVybiBub2RlLmF0dHJzW01BUktET1dOX0VTQ0FQRURfQVRUUl1cbiAgICAgID8gWydwcmUnLCBhdHRycywgWydkaXYnLCB7IGNsYXNzOiAnaW5mbycgfSwgJ2knXSwgWydjb2RlJywgMF1dXG4gICAgICA6IFsncHJlJywgYXR0cnMsIFsnY29kZScsIDBdXTtcbiAgfSxcbn07XG5cbmNvbnN0IHNwZWM6IFNjaGVtYVNwZWMgPSB7XG4gIG5vZGVzOiB7XG4gICAgZG9jOiBkb2NTcGVjLFxuICAgIC8vIE9yZGVyIG1hdHRlcnMgaGVyZS4gcG0gYXBwYXJlbnRseSBpbnNlcnRzIHRoZSBmaXJzdCB2YWxpZCBub2RlIG9uIGVudGVyLlxuICAgIHBhcmFncmFwaDogcGFyYWdyYXBoU3BlYyxcbiAgICBjaGVja2xpc3RfaXRlbTogY2hlY2tsaXN0SXRlbVNwZWMsXG4gICAgdW5vcmRlcmVkX2xpc3Q6IHtcbiAgICAgIC4uLmJ1bGxldExpc3QsXG4gICAgICBjb250ZW50OiAnbGlzdF9pdGVtKycsXG4gICAgICBncm91cDogJ2Jsb2NrJyxcbiAgICAgIHNlbGVjdGFibGU6IGZhbHNlLFxuICAgIH0sXG4gICAgb3JkZXJlZF9saXN0OiB7XG4gICAgICAuLi5vcmRlcmVkTGlzdCxcbiAgICAgIGNvbnRlbnQ6ICdsaXN0X2l0ZW0rJyxcbiAgICAgIGdyb3VwOiAnYmxvY2snLFxuICAgICAgc2VsZWN0YWJsZTogZmFsc2UsXG4gICAgfSxcbiAgICBsaXN0X2l0ZW06IHtcbiAgICAgIC4uLmxpc3RJdGVtLFxuICAgICAgY29udGVudDogJ3BhcmFncmFwaCsnLFxuICAgICAgc2VsZWN0YWJsZTogZmFsc2UsXG4gICAgfSxcbiAgICBoZWFkaW5nMTogaGVhZGluZzFTcGVjLFxuICAgIGhlYWRpbmcyOiBoZWFkaW5nMlNwZWMsXG4gICAgaGVhZGluZzM6IGhlYWRpbmczU3BlYyxcbiAgICB0ZXh0OiB0ZXh0U3BlYyxcbiAgICBjb2RlX2Jsb2NrOiBjb2RlQmxvY2tTcGVjLFxuICB9LFxuICBtYXJrczoge1xuICAgIGxpbms6IHtcbiAgICAgIGF0dHJzOiB7XG4gICAgICAgIGhyZWY6IHsgZGVmYXVsdDogJycgfSxcbiAgICAgICAgdGl0bGU6IHsgZGVmYXVsdDogbnVsbCB9LFxuICAgICAgICBbQVVUT19MSU5LX0FUVFJdOiB7IGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgICB9LFxuICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcbiAgICAgIHBhcnNlRE9NOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0YWc6ICdhW2hyZWZdJyxcbiAgICAgICAgICBnZXRBdHRycyhkb206IEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBocmVmOiBkb20uZ2V0QXR0cmlidXRlKCdocmVmJyksXG4gICAgICAgICAgICAgIHRpdGxlOiBkb20uZ2V0QXR0cmlidXRlKCd0aXRsZScpLFxuICAgICAgICAgICAgICBbYGRhdGEtJHtBVVRPX0xJTktfQVRUUn1gXTogZG9tLmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICBgZGF0YS0ke0FVVE9fTElOS19BVFRSfWAsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdG9ET00obm9kZSkge1xuICAgICAgICBsZXQgeyBocmVmLCB0aXRsZSB9ID0gbm9kZS5hdHRycztcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAnYScsXG4gICAgICAgICAge1xuICAgICAgICAgICAgaHJlZixcbiAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgW2BkYXRhLSR7QVVUT19MSU5LX0FUVFJ9YF06IG5vZGUuYXR0cnNbQVVUT19MSU5LX0FUVFJdLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgMCxcbiAgICAgICAgXTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBlbToge1xuICAgICAgLi4ubWFya3MuZW0sXG4gICAgfSxcbiAgICBzdHJvbmc6IHtcbiAgICAgIC4uLm1hcmtzLnN0cm9uZyxcbiAgICB9LFxuICAgIGNvZGU6IHtcbiAgICAgIC4uLm1hcmtzLmNvZGUsXG4gICAgICBhdHRyczoge1xuICAgICAgICAuLi5tYXJrcy5jb2RlLmF0dHJzLFxuICAgICAgICBbTUFSS0RPV05fRVNDQVBFRF9BVFRSXToge1xuICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxufTtcblxuZXhwb3J0IGNvbnN0IHNjaGVtYSA9IG5ldyBTY2hlbWEoc3BlYyk7XG4iLCJpbXBvcnQge1xuICBpbnB1dFJ1bGVzLFxuICBzbWFydFF1b3RlcyxcbiAgZWxsaXBzaXMsXG4gIHRleHRibG9ja1R5cGVJbnB1dFJ1bGUsXG4gIElucHV0UnVsZSxcbn0gZnJvbSAncHJvc2VtaXJyb3ItaW5wdXRydWxlcyc7XG5pbXBvcnQgeyBTZWxlY3Rpb24gfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5pbXBvcnQgeyBNYXJrVHlwZSwgTm9kZVR5cGUgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgeyBzY2hlbWEgfSBmcm9tICcuL3NjaGVtYSc7XG5cbmZ1bmN0aW9uIG1hcmtXcmFwcGluZ1J1bGUoYzogc3RyaW5nLCBtYXJrVHlwZTogTWFya1R5cGUpIHtcbiAgcmV0dXJuIG5ldyBJbnB1dFJ1bGUoXG4gICAgbmV3IFJlZ0V4cChgJHtjfSguKj8pJHtjfSRgKSxcbiAgICAoc3RhdGUsIG1hdGNoLCBzdGFydCwgZW5kKSA9PiB7XG4gICAgICBjb25zdCBbXywgdGV4dF0gPSBtYXRjaDtcbiAgICAgIGNvbnN0IHsgdHIgfSA9IHN0YXRlO1xuICAgICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXhpc3RpbmdNYXJrcyA9IHN0YXRlLmRvY1xuICAgICAgICAucmVzb2x2ZShzdGFydClcbiAgICAgICAgLm1hcmtzQWNyb3NzKHN0YXRlLmRvYy5yZXNvbHZlKGVuZCkpO1xuICAgICAgcmV0dXJuIHRyLnJlcGxhY2VSYW5nZVdpdGgoXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIHNjaGVtYS50ZXh0KHRleHQsIFsuLi5leGlzdGluZ01hcmtzLCBtYXJrVHlwZS5jcmVhdGUoKV0pLFxuICAgICAgKTtcbiAgICB9LFxuICApO1xufVxuXG5mdW5jdGlvbiBsaXN0VHlwZVJ1bGUocHJlZml4OiBzdHJpbmcsIGxpc3RUeXBlOiBOb2RlVHlwZSk6IElucHV0UnVsZSB7XG4gIHJldHVybiBuZXcgSW5wdXRSdWxlKFxuICAgIG5ldyBSZWdFeHAoYF4ke3ByZWZpeH1gKSxcbiAgICAoc3RhdGUsIG1hdGNoOiBSZWdFeHBNYXRjaEFycmF5LCBzdGFydCwgZW5kKSA9PiB7XG4gICAgICBjb25zdCAkZW5kID0gc3RhdGUuZG9jLnJlc29sdmUoZW5kKTtcbiAgICAgIGlmICgkZW5kLmRlcHRoID4gMSkge1xuICAgICAgICAvLyBNYWtlIHN1cmUgd2UgYXJlIG5vdCBhbHJlYWR5IGluIGEgbGlzdDsgYWxsIG90aGVyIHBvc2l0aW9ucyBzaG91bGQgYmVcbiAgICAgICAgLy8gZGVwdGggMS5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG1hdGNoLmlucHV0ICE9PSBwcmVmaXgpIHtcbiAgICAgICAgLy8gSWYgdGhlIGlucHV0IGFuZCBwcmVmaXggZG8gbm90IG1hdGNoIHRoYXQgbWVhbnMgdGhhdCB3ZSBhcmUgbWF0Y2hpbmdcbiAgICAgICAgLy8gYWdhaW5zdCBhIHBhdHRlcm4gdGhhdCBpcyBub3QgZmx1c2ggd2l0aCB0aGUgdXNlcidzIG1vc3QgcmVjZW50IGlucHV0LlxuICAgICAgICAvLyBUaGlzIGNvdWxkIGhhcHBlbiBpZiBmb3IgZXhhbXBsZSB5b3UgcGFzdGUgYC0gYCBhdCB0aGUgYmVnaW5uaW5nIG9mIGFcbiAgICAgICAgLy8gcGFyYWdyYXBoIGFuZCB0aGVuIGhpdCBzcGFjZS4gVGhlIGlucHV0IHJ1bGUgd2lsbCB0aGVuIGZpcmUgd2l0aCB0aGVcbiAgICAgICAgLy8gc3RhcnQgYW5kIGVuZCBvZiB0aGUgc2l0ZSBvZiB0aGF0IGxhc3Qgc3BhY2UgY2hhcmFjdGVyLiBTaW5jZSB0aGVcbiAgICAgICAgLy8gaW50ZW50aW9uIG9mIGlucHV0IHJ1bGVzIGlzIHRvIHNlcnZlIGFzIG1hY3JvcyBmb3IgdGhlIHVzZXIsIHdlIHNob3VsZFxuICAgICAgICAvLyBpZ25vcmUgdGhlc2UgY2FzZXMuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFN1YnRyYWN0IDIgaGVyZSwgZm9yIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBub2RlLlxuICAgICAgY29uc3QgcmFuZ2VBZnRlclByZWZpeDogW251bWJlciwgbnVtYmVyXSA9IFtcbiAgICAgICAgZW5kLFxuICAgICAgICBzdGFydCArICRlbmQucGFyZW50Lm5vZGVTaXplIC0gMixcbiAgICAgIF07XG4gICAgICBjb25zdCBzbGljZUFmdGVyUHJlZml4ID0gc3RhdGUuZG9jLnNsaWNlKC4uLnJhbmdlQWZ0ZXJQcmVmaXgpO1xuICAgICAgY29uc3QgeyB0ciB9ID0gc3RhdGU7XG4gICAgICB0ci5kZWxldGVSYW5nZSguLi5yYW5nZUFmdGVyUHJlZml4KTtcbiAgICAgIHRyLnJlcGxhY2VSYW5nZVdpdGgoc3RhcnQsIGVuZCwgbGlzdFR5cGUuY3JlYXRlQW5kRmlsbCgpKTtcbiAgICAgIHRyLnNldFNlbGVjdGlvbihTZWxlY3Rpb24ubmVhcih0ci5kb2MucmVzb2x2ZShzdGFydCkpKTtcbiAgICAgIHRyLmluc2VydCh0ci5zZWxlY3Rpb24uZnJvbSwgc2xpY2VBZnRlclByZWZpeC5jb250ZW50KTtcbiAgICAgIHJldHVybiB0cjtcbiAgICB9LFxuICApO1xufVxuXG5leHBvcnQgY29uc3QgaW5wdXRSdWxlc1BsdWdpbiA9IGlucHV0UnVsZXMoe1xuICBydWxlczogW1xuICAgIC4uLnNtYXJ0UXVvdGVzLFxuICAgIGVsbGlwc2lzLFxuICAgIHRleHRibG9ja1R5cGVJbnB1dFJ1bGUoL14jIC8sIHNjaGVtYS5ub2Rlcy5oZWFkaW5nMiksXG4gICAgdGV4dGJsb2NrVHlwZUlucHV0UnVsZSgvXiMjIC8sIHNjaGVtYS5ub2Rlcy5oZWFkaW5nMyksXG4gICAgdGV4dGJsb2NrVHlwZUlucHV0UnVsZSgvXmBgYC8sIHNjaGVtYS5ub2Rlcy5jb2RlX2Jsb2NrKSxcbiAgICBtYXJrV3JhcHBpbmdSdWxlKCdgJywgc2NoZW1hLm1hcmtzLmNvZGUpLFxuICAgIG1hcmtXcmFwcGluZ1J1bGUoJ1xcXFwqJywgc2NoZW1hLm1hcmtzLnN0cm9uZyksXG4gICAgbWFya1dyYXBwaW5nUnVsZSgnXycsIHNjaGVtYS5tYXJrcy5lbSksXG4gICAgbGlzdFR5cGVSdWxlKCcxLiAnLCBzY2hlbWEubm9kZXMub3JkZXJlZF9saXN0KSxcbiAgICBsaXN0VHlwZVJ1bGUoJy0gJywgc2NoZW1hLm5vZGVzLnVub3JkZXJlZF9saXN0KSxcbiAgXSxcbn0pO1xuIiwiaW1wb3J0IHsgbGlmdFRhcmdldCwgcmVwbGFjZVN0ZXAsIFJlcGxhY2VTdGVwLCBjYW5Kb2luLCBqb2luUG9pbnQsIGNhblNwbGl0LCBSZXBsYWNlQXJvdW5kU3RlcCwgZmluZFdyYXBwaW5nIH0gZnJvbSAncHJvc2VtaXJyb3ItdHJhbnNmb3JtJztcbmltcG9ydCB7IFNsaWNlLCBGcmFnbWVudCB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IE5vZGVTZWxlY3Rpb24sIFNlbGVjdGlvbiwgVGV4dFNlbGVjdGlvbiwgQWxsU2VsZWN0aW9uLCBTZWxlY3Rpb25SYW5nZSB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcblxuLyoqXG5EZWxldGUgdGhlIHNlbGVjdGlvbiwgaWYgdGhlcmUgaXMgb25lLlxuKi9cbmNvbnN0IGRlbGV0ZVNlbGVjdGlvbiA9IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICBpZiAoc3RhdGUuc2VsZWN0aW9uLmVtcHR5KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5kZWxldGVTZWxlY3Rpb24oKS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5mdW5jdGlvbiBhdEJsb2NrU3RhcnQoc3RhdGUsIHZpZXcpIHtcbiAgICBsZXQgeyAkY3Vyc29yIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgaWYgKCEkY3Vyc29yIHx8ICh2aWV3ID8gIXZpZXcuZW5kT2ZUZXh0YmxvY2soXCJiYWNrd2FyZFwiLCBzdGF0ZSlcbiAgICAgICAgOiAkY3Vyc29yLnBhcmVudE9mZnNldCA+IDApKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gJGN1cnNvcjtcbn1cbi8qKlxuSWYgdGhlIHNlbGVjdGlvbiBpcyBlbXB0eSBhbmQgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dGJsb2NrLCB0cnkgdG9cbnJlZHVjZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGF0IGJsb2NrIGFuZCB0aGUgb25lIGJlZm9yZSBpdOKAlGlmXG50aGVyZSdzIGEgYmxvY2sgZGlyZWN0bHkgYmVmb3JlIGl0IHRoYXQgY2FuIGJlIGpvaW5lZCwgam9pbiB0aGVtLlxuSWYgbm90LCB0cnkgdG8gbW92ZSB0aGUgc2VsZWN0ZWQgYmxvY2sgY2xvc2VyIHRvIHRoZSBuZXh0IG9uZSBpblxudGhlIGRvY3VtZW50IHN0cnVjdHVyZSBieSBsaWZ0aW5nIGl0IG91dCBvZiBpdHMgcGFyZW50IG9yIG1vdmluZyBpdFxuaW50byBhIHBhcmVudCBvZiB0aGUgcHJldmlvdXMgYmxvY2suIFdpbGwgdXNlIHRoZSB2aWV3IGZvciBhY2N1cmF0ZVxuKGJpZGktYXdhcmUpIHN0YXJ0LW9mLXRleHRibG9jayBkZXRlY3Rpb24gaWYgZ2l2ZW4uXG4qL1xuY29uc3Qgam9pbkJhY2t3YXJkID0gKHN0YXRlLCBkaXNwYXRjaCwgdmlldykgPT4ge1xuICAgIGxldCAkY3Vyc29yID0gYXRCbG9ja1N0YXJ0KHN0YXRlLCB2aWV3KTtcbiAgICBpZiAoISRjdXJzb3IpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgJGN1dCA9IGZpbmRDdXRCZWZvcmUoJGN1cnNvcik7XG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gbm9kZSBiZWZvcmUgdGhpcywgdHJ5IHRvIGxpZnRcbiAgICBpZiAoISRjdXQpIHtcbiAgICAgICAgbGV0IHJhbmdlID0gJGN1cnNvci5ibG9ja1JhbmdlKCksIHRhcmdldCA9IHJhbmdlICYmIGxpZnRUYXJnZXQocmFuZ2UpO1xuICAgICAgICBpZiAodGFyZ2V0ID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLmxpZnQocmFuZ2UsIHRhcmdldCkuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBsZXQgYmVmb3JlID0gJGN1dC5ub2RlQmVmb3JlO1xuICAgIC8vIEFwcGx5IHRoZSBqb2luaW5nIGFsZ29yaXRobVxuICAgIGlmIChkZWxldGVCYXJyaWVyKHN0YXRlLCAkY3V0LCBkaXNwYXRjaCwgLTEpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAvLyBJZiB0aGUgbm9kZSBiZWxvdyBoYXMgbm8gY29udGVudCBhbmQgdGhlIG5vZGUgYWJvdmUgaXNcbiAgICAvLyBzZWxlY3RhYmxlLCBkZWxldGUgdGhlIG5vZGUgYmVsb3cgYW5kIHNlbGVjdCB0aGUgb25lIGFib3ZlLlxuICAgIGlmICgkY3Vyc29yLnBhcmVudC5jb250ZW50LnNpemUgPT0gMCAmJlxuICAgICAgICAodGV4dGJsb2NrQXQoYmVmb3JlLCBcImVuZFwiKSB8fCBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShiZWZvcmUpKSkge1xuICAgICAgICBmb3IgKGxldCBkZXB0aCA9ICRjdXJzb3IuZGVwdGg7OyBkZXB0aC0tKSB7XG4gICAgICAgICAgICBsZXQgZGVsU3RlcCA9IHJlcGxhY2VTdGVwKHN0YXRlLmRvYywgJGN1cnNvci5iZWZvcmUoZGVwdGgpLCAkY3Vyc29yLmFmdGVyKGRlcHRoKSwgU2xpY2UuZW1wdHkpO1xuICAgICAgICAgICAgaWYgKGRlbFN0ZXAgJiYgZGVsU3RlcC5zbGljZS5zaXplIDwgZGVsU3RlcC50byAtIGRlbFN0ZXAuZnJvbSkge1xuICAgICAgICAgICAgICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHIgPSBzdGF0ZS50ci5zdGVwKGRlbFN0ZXApO1xuICAgICAgICAgICAgICAgICAgICB0ci5zZXRTZWxlY3Rpb24odGV4dGJsb2NrQXQoYmVmb3JlLCBcImVuZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBTZWxlY3Rpb24uZmluZEZyb20odHIuZG9jLnJlc29sdmUodHIubWFwcGluZy5tYXAoJGN1dC5wb3MsIC0xKSksIC0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBOb2RlU2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsICRjdXQucG9zIC0gYmVmb3JlLm5vZGVTaXplKSk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZXB0aCA9PSAxIHx8ICRjdXJzb3Iubm9kZShkZXB0aCAtIDEpLmNoaWxkQ291bnQgPiAxKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIElmIHRoZSBub2RlIGJlZm9yZSBpcyBhbiBhdG9tLCBkZWxldGUgaXRcbiAgICBpZiAoYmVmb3JlLmlzQXRvbSAmJiAkY3V0LmRlcHRoID09ICRjdXJzb3IuZGVwdGggLSAxKSB7XG4gICAgICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLmRlbGV0ZSgkY3V0LnBvcyAtIGJlZm9yZS5ub2RlU2l6ZSwgJGN1dC5wb3MpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcbi8qKlxuQSBtb3JlIGxpbWl0ZWQgZm9ybSBvZiBbYGpvaW5CYWNrd2FyZGBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNjb21tYW5kcy5qb2luQmFja3dhcmQpXG50aGF0IG9ubHkgdHJpZXMgdG8gam9pbiB0aGUgY3VycmVudCB0ZXh0YmxvY2sgdG8gdGhlIG9uZSBiZWZvcmVcbml0LCBpZiB0aGUgY3Vyc29yIGlzIGF0IHRoZSBzdGFydCBvZiBhIHRleHRibG9jay5cbiovXG5jb25zdCBqb2luVGV4dGJsb2NrQmFja3dhcmQgPSAoc3RhdGUsIGRpc3BhdGNoLCB2aWV3KSA9PiB7XG4gICAgbGV0ICRjdXJzb3IgPSBhdEJsb2NrU3RhcnQoc3RhdGUsIHZpZXcpO1xuICAgIGlmICghJGN1cnNvcilcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCAkY3V0ID0gZmluZEN1dEJlZm9yZSgkY3Vyc29yKTtcbiAgICByZXR1cm4gJGN1dCA/IGpvaW5UZXh0YmxvY2tzQXJvdW5kKHN0YXRlLCAkY3V0LCBkaXNwYXRjaCkgOiBmYWxzZTtcbn07XG4vKipcbkEgbW9yZSBsaW1pdGVkIGZvcm0gb2YgW2Bqb2luRm9yd2FyZGBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNjb21tYW5kcy5qb2luRm9yd2FyZClcbnRoYXQgb25seSB0cmllcyB0byBqb2luIHRoZSBjdXJyZW50IHRleHRibG9jayB0byB0aGUgb25lIGFmdGVyXG5pdCwgaWYgdGhlIGN1cnNvciBpcyBhdCB0aGUgZW5kIG9mIGEgdGV4dGJsb2NrLlxuKi9cbmNvbnN0IGpvaW5UZXh0YmxvY2tGb3J3YXJkID0gKHN0YXRlLCBkaXNwYXRjaCwgdmlldykgPT4ge1xuICAgIGxldCAkY3Vyc29yID0gYXRCbG9ja0VuZChzdGF0ZSwgdmlldyk7XG4gICAgaWYgKCEkY3Vyc29yKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0ICRjdXQgPSBmaW5kQ3V0QWZ0ZXIoJGN1cnNvcik7XG4gICAgcmV0dXJuICRjdXQgPyBqb2luVGV4dGJsb2Nrc0Fyb3VuZChzdGF0ZSwgJGN1dCwgZGlzcGF0Y2gpIDogZmFsc2U7XG59O1xuZnVuY3Rpb24gam9pblRleHRibG9ja3NBcm91bmQoc3RhdGUsICRjdXQsIGRpc3BhdGNoKSB7XG4gICAgbGV0IGJlZm9yZSA9ICRjdXQubm9kZUJlZm9yZSwgYmVmb3JlVGV4dCA9IGJlZm9yZSwgYmVmb3JlUG9zID0gJGN1dC5wb3MgLSAxO1xuICAgIGZvciAoOyAhYmVmb3JlVGV4dC5pc1RleHRibG9jazsgYmVmb3JlUG9zLS0pIHtcbiAgICAgICAgaWYgKGJlZm9yZVRleHQudHlwZS5zcGVjLmlzb2xhdGluZylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgbGV0IGNoaWxkID0gYmVmb3JlVGV4dC5sYXN0Q2hpbGQ7XG4gICAgICAgIGlmICghY2hpbGQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGJlZm9yZVRleHQgPSBjaGlsZDtcbiAgICB9XG4gICAgbGV0IGFmdGVyID0gJGN1dC5ub2RlQWZ0ZXIsIGFmdGVyVGV4dCA9IGFmdGVyLCBhZnRlclBvcyA9ICRjdXQucG9zICsgMTtcbiAgICBmb3IgKDsgIWFmdGVyVGV4dC5pc1RleHRibG9jazsgYWZ0ZXJQb3MrKykge1xuICAgICAgICBpZiAoYWZ0ZXJUZXh0LnR5cGUuc3BlYy5pc29sYXRpbmcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCBjaGlsZCA9IGFmdGVyVGV4dC5maXJzdENoaWxkO1xuICAgICAgICBpZiAoIWNoaWxkKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBhZnRlclRleHQgPSBjaGlsZDtcbiAgICB9XG4gICAgbGV0IHN0ZXAgPSByZXBsYWNlU3RlcChzdGF0ZS5kb2MsIGJlZm9yZVBvcywgYWZ0ZXJQb3MsIFNsaWNlLmVtcHR5KTtcbiAgICBpZiAoIXN0ZXAgfHwgc3RlcC5mcm9tICE9IGJlZm9yZVBvcyB8fFxuICAgICAgICBzdGVwIGluc3RhbmNlb2YgUmVwbGFjZVN0ZXAgJiYgc3RlcC5zbGljZS5zaXplID49IGFmdGVyUG9zIC0gYmVmb3JlUG9zKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgIGxldCB0ciA9IHN0YXRlLnRyLnN0ZXAoc3RlcCk7XG4gICAgICAgIHRyLnNldFNlbGVjdGlvbihUZXh0U2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsIGJlZm9yZVBvcykpO1xuICAgICAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiB0ZXh0YmxvY2tBdChub2RlLCBzaWRlLCBvbmx5ID0gZmFsc2UpIHtcbiAgICBmb3IgKGxldCBzY2FuID0gbm9kZTsgc2Nhbjsgc2NhbiA9IChzaWRlID09IFwic3RhcnRcIiA/IHNjYW4uZmlyc3RDaGlsZCA6IHNjYW4ubGFzdENoaWxkKSkge1xuICAgICAgICBpZiAoc2Nhbi5pc1RleHRibG9jaylcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAob25seSAmJiBzY2FuLmNoaWxkQ291bnQgIT0gMSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG5XaGVuIHRoZSBzZWxlY3Rpb24gaXMgZW1wdHkgYW5kIGF0IHRoZSBzdGFydCBvZiBhIHRleHRibG9jaywgc2VsZWN0XG50aGUgbm9kZSBiZWZvcmUgdGhhdCB0ZXh0YmxvY2ssIGlmIHBvc3NpYmxlLiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG5ib3VuZCB0byBrZXlzIGxpa2UgYmFja3NwYWNlLCBhZnRlclxuW2Bqb2luQmFja3dhcmRgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jY29tbWFuZHMuam9pbkJhY2t3YXJkKSBvciBvdGhlciBkZWxldGluZ1xuY29tbWFuZHMsIGFzIGEgZmFsbC1iYWNrIGJlaGF2aW9yIHdoZW4gdGhlIHNjaGVtYSBkb2Vzbid0IGFsbG93XG5kZWxldGlvbiBhdCB0aGUgc2VsZWN0ZWQgcG9pbnQuXG4qL1xuY29uc3Qgc2VsZWN0Tm9kZUJhY2t3YXJkID0gKHN0YXRlLCBkaXNwYXRjaCwgdmlldykgPT4ge1xuICAgIGxldCB7ICRoZWFkLCBlbXB0eSB9ID0gc3RhdGUuc2VsZWN0aW9uLCAkY3V0ID0gJGhlYWQ7XG4gICAgaWYgKCFlbXB0eSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICgkaGVhZC5wYXJlbnQuaXNUZXh0YmxvY2spIHtcbiAgICAgICAgaWYgKHZpZXcgPyAhdmlldy5lbmRPZlRleHRibG9jayhcImJhY2t3YXJkXCIsIHN0YXRlKSA6ICRoZWFkLnBhcmVudE9mZnNldCA+IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICRjdXQgPSBmaW5kQ3V0QmVmb3JlKCRoZWFkKTtcbiAgICB9XG4gICAgbGV0IG5vZGUgPSAkY3V0ICYmICRjdXQubm9kZUJlZm9yZTtcbiAgICBpZiAoIW5vZGUgfHwgIU5vZGVTZWxlY3Rpb24uaXNTZWxlY3RhYmxlKG5vZGUpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5zZXRTZWxlY3Rpb24oTm9kZVNlbGVjdGlvbi5jcmVhdGUoc3RhdGUuZG9jLCAkY3V0LnBvcyAtIG5vZGUubm9kZVNpemUpKS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5mdW5jdGlvbiBmaW5kQ3V0QmVmb3JlKCRwb3MpIHtcbiAgICBpZiAoISRwb3MucGFyZW50LnR5cGUuc3BlYy5pc29sYXRpbmcpXG4gICAgICAgIGZvciAobGV0IGkgPSAkcG9zLmRlcHRoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmICgkcG9zLmluZGV4KGkpID4gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gJHBvcy5kb2MucmVzb2x2ZSgkcG9zLmJlZm9yZShpICsgMSkpO1xuICAgICAgICAgICAgaWYgKCRwb3Mubm9kZShpKS50eXBlLnNwZWMuaXNvbGF0aW5nKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBhdEJsb2NrRW5kKHN0YXRlLCB2aWV3KSB7XG4gICAgbGV0IHsgJGN1cnNvciB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgIGlmICghJGN1cnNvciB8fCAodmlldyA/ICF2aWV3LmVuZE9mVGV4dGJsb2NrKFwiZm9yd2FyZFwiLCBzdGF0ZSlcbiAgICAgICAgOiAkY3Vyc29yLnBhcmVudE9mZnNldCA8ICRjdXJzb3IucGFyZW50LmNvbnRlbnQuc2l6ZSkpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiAkY3Vyc29yO1xufVxuLyoqXG5JZiB0aGUgc2VsZWN0aW9uIGlzIGVtcHR5IGFuZCB0aGUgY3Vyc29yIGlzIGF0IHRoZSBlbmQgb2YgYVxudGV4dGJsb2NrLCB0cnkgdG8gcmVkdWNlIG9yIHJlbW92ZSB0aGUgYm91bmRhcnkgYmV0d2VlbiB0aGF0IGJsb2NrXG5hbmQgdGhlIG9uZSBhZnRlciBpdCwgZWl0aGVyIGJ5IGpvaW5pbmcgdGhlbSBvciBieSBtb3ZpbmcgdGhlIG90aGVyXG5ibG9jayBjbG9zZXIgdG8gdGhpcyBvbmUgaW4gdGhlIHRyZWUgc3RydWN0dXJlLiBXaWxsIHVzZSB0aGUgdmlld1xuZm9yIGFjY3VyYXRlIHN0YXJ0LW9mLXRleHRibG9jayBkZXRlY3Rpb24gaWYgZ2l2ZW4uXG4qL1xuY29uc3Qgam9pbkZvcndhcmQgPSAoc3RhdGUsIGRpc3BhdGNoLCB2aWV3KSA9PiB7XG4gICAgbGV0ICRjdXJzb3IgPSBhdEJsb2NrRW5kKHN0YXRlLCB2aWV3KTtcbiAgICBpZiAoISRjdXJzb3IpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgJGN1dCA9IGZpbmRDdXRBZnRlcigkY3Vyc29yKTtcbiAgICAvLyBJZiB0aGVyZSBpcyBubyBub2RlIGFmdGVyIHRoaXMsIHRoZXJlJ3Mgbm90aGluZyB0byBkb1xuICAgIGlmICghJGN1dClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBhZnRlciA9ICRjdXQubm9kZUFmdGVyO1xuICAgIC8vIFRyeSB0aGUgam9pbmluZyBhbGdvcml0aG1cbiAgICBpZiAoZGVsZXRlQmFycmllcihzdGF0ZSwgJGN1dCwgZGlzcGF0Y2gsIDEpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAvLyBJZiB0aGUgbm9kZSBhYm92ZSBoYXMgbm8gY29udGVudCBhbmQgdGhlIG5vZGUgYmVsb3cgaXNcbiAgICAvLyBzZWxlY3RhYmxlLCBkZWxldGUgdGhlIG5vZGUgYWJvdmUgYW5kIHNlbGVjdCB0aGUgb25lIGJlbG93LlxuICAgIGlmICgkY3Vyc29yLnBhcmVudC5jb250ZW50LnNpemUgPT0gMCAmJlxuICAgICAgICAodGV4dGJsb2NrQXQoYWZ0ZXIsIFwic3RhcnRcIikgfHwgTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUoYWZ0ZXIpKSkge1xuICAgICAgICBsZXQgZGVsU3RlcCA9IHJlcGxhY2VTdGVwKHN0YXRlLmRvYywgJGN1cnNvci5iZWZvcmUoKSwgJGN1cnNvci5hZnRlcigpLCBTbGljZS5lbXB0eSk7XG4gICAgICAgIGlmIChkZWxTdGVwICYmIGRlbFN0ZXAuc2xpY2Uuc2l6ZSA8IGRlbFN0ZXAudG8gLSBkZWxTdGVwLmZyb20pIHtcbiAgICAgICAgICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgICAgICAgICAgIGxldCB0ciA9IHN0YXRlLnRyLnN0ZXAoZGVsU3RlcCk7XG4gICAgICAgICAgICAgICAgdHIuc2V0U2VsZWN0aW9uKHRleHRibG9ja0F0KGFmdGVyLCBcInN0YXJ0XCIpID8gU2VsZWN0aW9uLmZpbmRGcm9tKHRyLmRvYy5yZXNvbHZlKHRyLm1hcHBpbmcubWFwKCRjdXQucG9zKSksIDEpXG4gICAgICAgICAgICAgICAgICAgIDogTm9kZVNlbGVjdGlvbi5jcmVhdGUodHIuZG9jLCB0ci5tYXBwaW5nLm1hcCgkY3V0LnBvcykpKTtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIElmIHRoZSBuZXh0IG5vZGUgaXMgYW4gYXRvbSwgZGVsZXRlIGl0XG4gICAgaWYgKGFmdGVyLmlzQXRvbSAmJiAkY3V0LmRlcHRoID09ICRjdXJzb3IuZGVwdGggLSAxKSB7XG4gICAgICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLmRlbGV0ZSgkY3V0LnBvcywgJGN1dC5wb3MgKyBhZnRlci5ub2RlU2l6ZSkuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLyoqXG5XaGVuIHRoZSBzZWxlY3Rpb24gaXMgZW1wdHkgYW5kIGF0IHRoZSBlbmQgb2YgYSB0ZXh0YmxvY2ssIHNlbGVjdFxudGhlIG5vZGUgY29taW5nIGFmdGVyIHRoYXQgdGV4dGJsb2NrLCBpZiBwb3NzaWJsZS4gVGhpcyBpcyBpbnRlbmRlZFxudG8gYmUgYm91bmQgdG8ga2V5cyBsaWtlIGRlbGV0ZSwgYWZ0ZXJcbltgam9pbkZvcndhcmRgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jY29tbWFuZHMuam9pbkZvcndhcmQpIGFuZCBzaW1pbGFyIGRlbGV0aW5nXG5jb21tYW5kcywgdG8gcHJvdmlkZSBhIGZhbGwtYmFjayBiZWhhdmlvciB3aGVuIHRoZSBzY2hlbWEgZG9lc24ndFxuYWxsb3cgZGVsZXRpb24gYXQgdGhlIHNlbGVjdGVkIHBvaW50LlxuKi9cbmNvbnN0IHNlbGVjdE5vZGVGb3J3YXJkID0gKHN0YXRlLCBkaXNwYXRjaCwgdmlldykgPT4ge1xuICAgIGxldCB7ICRoZWFkLCBlbXB0eSB9ID0gc3RhdGUuc2VsZWN0aW9uLCAkY3V0ID0gJGhlYWQ7XG4gICAgaWYgKCFlbXB0eSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICgkaGVhZC5wYXJlbnQuaXNUZXh0YmxvY2spIHtcbiAgICAgICAgaWYgKHZpZXcgPyAhdmlldy5lbmRPZlRleHRibG9jayhcImZvcndhcmRcIiwgc3RhdGUpIDogJGhlYWQucGFyZW50T2Zmc2V0IDwgJGhlYWQucGFyZW50LmNvbnRlbnQuc2l6ZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgJGN1dCA9IGZpbmRDdXRBZnRlcigkaGVhZCk7XG4gICAgfVxuICAgIGxldCBub2RlID0gJGN1dCAmJiAkY3V0Lm5vZGVBZnRlcjtcbiAgICBpZiAoIW5vZGUgfHwgIU5vZGVTZWxlY3Rpb24uaXNTZWxlY3RhYmxlKG5vZGUpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5zZXRTZWxlY3Rpb24oTm9kZVNlbGVjdGlvbi5jcmVhdGUoc3RhdGUuZG9jLCAkY3V0LnBvcykpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbmZ1bmN0aW9uIGZpbmRDdXRBZnRlcigkcG9zKSB7XG4gICAgaWYgKCEkcG9zLnBhcmVudC50eXBlLnNwZWMuaXNvbGF0aW5nKVxuICAgICAgICBmb3IgKGxldCBpID0gJHBvcy5kZXB0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gJHBvcy5ub2RlKGkpO1xuICAgICAgICAgICAgaWYgKCRwb3MuaW5kZXgoaSkgKyAxIDwgcGFyZW50LmNoaWxkQ291bnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuICRwb3MuZG9jLnJlc29sdmUoJHBvcy5hZnRlcihpICsgMSkpO1xuICAgICAgICAgICAgaWYgKHBhcmVudC50eXBlLnNwZWMuaXNvbGF0aW5nKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbkpvaW4gdGhlIHNlbGVjdGVkIGJsb2NrIG9yLCBpZiB0aGVyZSBpcyBhIHRleHQgc2VsZWN0aW9uLCB0aGVcbmNsb3Nlc3QgYW5jZXN0b3IgYmxvY2sgb2YgdGhlIHNlbGVjdGlvbiB0aGF0IGNhbiBiZSBqb2luZWQsIHdpdGhcbnRoZSBzaWJsaW5nIGFib3ZlIGl0LlxuKi9cbmNvbnN0IGpvaW5VcCA9IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICBsZXQgc2VsID0gc3RhdGUuc2VsZWN0aW9uLCBub2RlU2VsID0gc2VsIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbiwgcG9pbnQ7XG4gICAgaWYgKG5vZGVTZWwpIHtcbiAgICAgICAgaWYgKHNlbC5ub2RlLmlzVGV4dGJsb2NrIHx8ICFjYW5Kb2luKHN0YXRlLmRvYywgc2VsLmZyb20pKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwb2ludCA9IHNlbC5mcm9tO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcG9pbnQgPSBqb2luUG9pbnQoc3RhdGUuZG9jLCBzZWwuZnJvbSwgLTEpO1xuICAgICAgICBpZiAocG9pbnQgPT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgIGxldCB0ciA9IHN0YXRlLnRyLmpvaW4ocG9pbnQpO1xuICAgICAgICBpZiAobm9kZVNlbClcbiAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbihOb2RlU2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsIHBvaW50IC0gc3RhdGUuZG9jLnJlc29sdmUocG9pbnQpLm5vZGVCZWZvcmUubm9kZVNpemUpKTtcbiAgICAgICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuSm9pbiB0aGUgc2VsZWN0ZWQgYmxvY2ssIG9yIHRoZSBjbG9zZXN0IGFuY2VzdG9yIG9mIHRoZSBzZWxlY3Rpb25cbnRoYXQgY2FuIGJlIGpvaW5lZCwgd2l0aCB0aGUgc2libGluZyBhZnRlciBpdC5cbiovXG5jb25zdCBqb2luRG93biA9IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICBsZXQgc2VsID0gc3RhdGUuc2VsZWN0aW9uLCBwb2ludDtcbiAgICBpZiAoc2VsIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbikge1xuICAgICAgICBpZiAoc2VsLm5vZGUuaXNUZXh0YmxvY2sgfHwgIWNhbkpvaW4oc3RhdGUuZG9jLCBzZWwudG8pKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBwb2ludCA9IHNlbC50bztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBvaW50ID0gam9pblBvaW50KHN0YXRlLmRvYywgc2VsLnRvLCAxKTtcbiAgICAgICAgaWYgKHBvaW50ID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIuam9pbihwb2ludCkuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5MaWZ0IHRoZSBzZWxlY3RlZCBibG9jaywgb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgYmxvY2sgb2YgdGhlXG5zZWxlY3Rpb24gdGhhdCBjYW4gYmUgbGlmdGVkLCBvdXQgb2YgaXRzIHBhcmVudCBub2RlLlxuKi9cbmNvbnN0IGxpZnQgPSAoc3RhdGUsIGRpc3BhdGNoKSA9PiB7XG4gICAgbGV0IHsgJGZyb20sICR0byB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgIGxldCByYW5nZSA9ICRmcm9tLmJsb2NrUmFuZ2UoJHRvKSwgdGFyZ2V0ID0gcmFuZ2UgJiYgbGlmdFRhcmdldChyYW5nZSk7XG4gICAgaWYgKHRhcmdldCA9PSBudWxsKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5saWZ0KHJhbmdlLCB0YXJnZXQpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuSWYgdGhlIHNlbGVjdGlvbiBpcyBpbiBhIG5vZGUgd2hvc2UgdHlwZSBoYXMgYSB0cnV0aHlcbltgY29kZWBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNtb2RlbC5Ob2RlU3BlYy5jb2RlKSBwcm9wZXJ0eSBpbiBpdHMgc3BlYywgcmVwbGFjZSB0aGVcbnNlbGVjdGlvbiB3aXRoIGEgbmV3bGluZSBjaGFyYWN0ZXIuXG4qL1xuY29uc3QgbmV3bGluZUluQ29kZSA9IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICBsZXQgeyAkaGVhZCwgJGFuY2hvciB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgIGlmICghJGhlYWQucGFyZW50LnR5cGUuc3BlYy5jb2RlIHx8ICEkaGVhZC5zYW1lUGFyZW50KCRhbmNob3IpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5pbnNlcnRUZXh0KFwiXFxuXCIpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbmZ1bmN0aW9uIGRlZmF1bHRCbG9ja0F0KG1hdGNoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRjaC5lZGdlQ291bnQ7IGkrKykge1xuICAgICAgICBsZXQgeyB0eXBlIH0gPSBtYXRjaC5lZGdlKGkpO1xuICAgICAgICBpZiAodHlwZS5pc1RleHRibG9jayAmJiAhdHlwZS5oYXNSZXF1aXJlZEF0dHJzKCkpXG4gICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbldoZW4gdGhlIHNlbGVjdGlvbiBpcyBpbiBhIG5vZGUgd2l0aCBhIHRydXRoeVxuW2Bjb2RlYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI21vZGVsLk5vZGVTcGVjLmNvZGUpIHByb3BlcnR5IGluIGl0cyBzcGVjLCBjcmVhdGUgYVxuZGVmYXVsdCBibG9jayBhZnRlciB0aGUgY29kZSBibG9jaywgYW5kIG1vdmUgdGhlIGN1cnNvciB0aGVyZS5cbiovXG5jb25zdCBleGl0Q29kZSA9IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICBsZXQgeyAkaGVhZCwgJGFuY2hvciB9ID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgIGlmICghJGhlYWQucGFyZW50LnR5cGUuc3BlYy5jb2RlIHx8ICEkaGVhZC5zYW1lUGFyZW50KCRhbmNob3IpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGFib3ZlID0gJGhlYWQubm9kZSgtMSksIGFmdGVyID0gJGhlYWQuaW5kZXhBZnRlcigtMSksIHR5cGUgPSBkZWZhdWx0QmxvY2tBdChhYm92ZS5jb250ZW50TWF0Y2hBdChhZnRlcikpO1xuICAgIGlmICghdHlwZSB8fCAhYWJvdmUuY2FuUmVwbGFjZVdpdGgoYWZ0ZXIsIGFmdGVyLCB0eXBlKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgICBsZXQgcG9zID0gJGhlYWQuYWZ0ZXIoKSwgdHIgPSBzdGF0ZS50ci5yZXBsYWNlV2l0aChwb3MsIHBvcywgdHlwZS5jcmVhdGVBbmRGaWxsKCkpO1xuICAgICAgICB0ci5zZXRTZWxlY3Rpb24oU2VsZWN0aW9uLm5lYXIodHIuZG9jLnJlc29sdmUocG9zKSwgMSkpO1xuICAgICAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG5JZiBhIGJsb2NrIG5vZGUgaXMgc2VsZWN0ZWQsIGNyZWF0ZSBhbiBlbXB0eSBwYXJhZ3JhcGggYmVmb3JlIChpZlxuaXQgaXMgaXRzIHBhcmVudCdzIGZpcnN0IGNoaWxkKSBvciBhZnRlciBpdC5cbiovXG5jb25zdCBjcmVhdGVQYXJhZ3JhcGhOZWFyID0gKHN0YXRlLCBkaXNwYXRjaCkgPT4ge1xuICAgIGxldCBzZWwgPSBzdGF0ZS5zZWxlY3Rpb24sIHsgJGZyb20sICR0byB9ID0gc2VsO1xuICAgIGlmIChzZWwgaW5zdGFuY2VvZiBBbGxTZWxlY3Rpb24gfHwgJGZyb20ucGFyZW50LmlubGluZUNvbnRlbnQgfHwgJHRvLnBhcmVudC5pbmxpbmVDb250ZW50KVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHR5cGUgPSBkZWZhdWx0QmxvY2tBdCgkdG8ucGFyZW50LmNvbnRlbnRNYXRjaEF0KCR0by5pbmRleEFmdGVyKCkpKTtcbiAgICBpZiAoIXR5cGUgfHwgIXR5cGUuaXNUZXh0YmxvY2spXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgbGV0IHNpZGUgPSAoISRmcm9tLnBhcmVudE9mZnNldCAmJiAkdG8uaW5kZXgoKSA8ICR0by5wYXJlbnQuY2hpbGRDb3VudCA/ICRmcm9tIDogJHRvKS5wb3M7XG4gICAgICAgIGxldCB0ciA9IHN0YXRlLnRyLmluc2VydChzaWRlLCB0eXBlLmNyZWF0ZUFuZEZpbGwoKSk7XG4gICAgICAgIHRyLnNldFNlbGVjdGlvbihUZXh0U2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsIHNpZGUgKyAxKSk7XG4gICAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbklmIHRoZSBjdXJzb3IgaXMgaW4gYW4gZW1wdHkgdGV4dGJsb2NrIHRoYXQgY2FuIGJlIGxpZnRlZCwgbGlmdCB0aGVcbmJsb2NrLlxuKi9cbmNvbnN0IGxpZnRFbXB0eUJsb2NrID0gKHN0YXRlLCBkaXNwYXRjaCkgPT4ge1xuICAgIGxldCB7ICRjdXJzb3IgfSA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICBpZiAoISRjdXJzb3IgfHwgJGN1cnNvci5wYXJlbnQuY29udGVudC5zaXplKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCRjdXJzb3IuZGVwdGggPiAxICYmICRjdXJzb3IuYWZ0ZXIoKSAhPSAkY3Vyc29yLmVuZCgtMSkpIHtcbiAgICAgICAgbGV0IGJlZm9yZSA9ICRjdXJzb3IuYmVmb3JlKCk7XG4gICAgICAgIGlmIChjYW5TcGxpdChzdGF0ZS5kb2MsIGJlZm9yZSkpIHtcbiAgICAgICAgICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5zcGxpdChiZWZvcmUpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHJhbmdlID0gJGN1cnNvci5ibG9ja1JhbmdlKCksIHRhcmdldCA9IHJhbmdlICYmIGxpZnRUYXJnZXQocmFuZ2UpO1xuICAgIGlmICh0YXJnZXQgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIubGlmdChyYW5nZSwgdGFyZ2V0KS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG4vKipcbkNyZWF0ZSBhIHZhcmlhbnQgb2YgW2BzcGxpdEJsb2NrYF0oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI2NvbW1hbmRzLnNwbGl0QmxvY2spIHRoYXQgdXNlc1xuYSBjdXN0b20gZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHRoZSB0eXBlIG9mIHRoZSBuZXdseSBzcGxpdCBvZmYgYmxvY2suXG4qL1xuZnVuY3Rpb24gc3BsaXRCbG9ja0FzKHNwbGl0Tm9kZSkge1xuICAgIHJldHVybiAoc3RhdGUsIGRpc3BhdGNoKSA9PiB7XG4gICAgICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICAgICAgaWYgKHN0YXRlLnNlbGVjdGlvbiBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24gJiYgc3RhdGUuc2VsZWN0aW9uLm5vZGUuaXNCbG9jaykge1xuICAgICAgICAgICAgaWYgKCEkZnJvbS5wYXJlbnRPZmZzZXQgfHwgIWNhblNwbGl0KHN0YXRlLmRvYywgJGZyb20ucG9zKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIuc3BsaXQoJGZyb20ucG9zKS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghJGZyb20uZGVwdGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGxldCB0eXBlcyA9IFtdO1xuICAgICAgICBsZXQgc3BsaXREZXB0aCwgZGVmbHQsIGF0RW5kID0gZmFsc2UsIGF0U3RhcnQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgZCA9ICRmcm9tLmRlcHRoOzsgZC0tKSB7XG4gICAgICAgICAgICBsZXQgbm9kZSA9ICRmcm9tLm5vZGUoZCk7XG4gICAgICAgICAgICBpZiAobm9kZS5pc0Jsb2NrKSB7XG4gICAgICAgICAgICAgICAgYXRFbmQgPSAkZnJvbS5lbmQoZCkgPT0gJGZyb20ucG9zICsgKCRmcm9tLmRlcHRoIC0gZCk7XG4gICAgICAgICAgICAgICAgYXRTdGFydCA9ICRmcm9tLnN0YXJ0KGQpID09ICRmcm9tLnBvcyAtICgkZnJvbS5kZXB0aCAtIGQpO1xuICAgICAgICAgICAgICAgIGRlZmx0ID0gZGVmYXVsdEJsb2NrQXQoJGZyb20ubm9kZShkIC0gMSkuY29udGVudE1hdGNoQXQoJGZyb20uaW5kZXhBZnRlcihkIC0gMSkpKTtcbiAgICAgICAgICAgICAgICBsZXQgc3BsaXRUeXBlID0gc3BsaXROb2RlICYmIHNwbGl0Tm9kZSgkdG8ucGFyZW50LCBhdEVuZCwgJGZyb20pO1xuICAgICAgICAgICAgICAgIHR5cGVzLnVuc2hpZnQoc3BsaXRUeXBlIHx8IChhdEVuZCAmJiBkZWZsdCA/IHsgdHlwZTogZGVmbHQgfSA6IG51bGwpKTtcbiAgICAgICAgICAgICAgICBzcGxpdERlcHRoID0gZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChkID09IDEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB0eXBlcy51bnNoaWZ0KG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCB0ciA9IHN0YXRlLnRyO1xuICAgICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbiB8fCBzdGF0ZS5zZWxlY3Rpb24gaW5zdGFuY2VvZiBBbGxTZWxlY3Rpb24pXG4gICAgICAgICAgICB0ci5kZWxldGVTZWxlY3Rpb24oKTtcbiAgICAgICAgbGV0IHNwbGl0UG9zID0gdHIubWFwcGluZy5tYXAoJGZyb20ucG9zKTtcbiAgICAgICAgbGV0IGNhbiA9IGNhblNwbGl0KHRyLmRvYywgc3BsaXRQb3MsIHR5cGVzLmxlbmd0aCwgdHlwZXMpO1xuICAgICAgICBpZiAoIWNhbikge1xuICAgICAgICAgICAgdHlwZXNbMF0gPSBkZWZsdCA/IHsgdHlwZTogZGVmbHQgfSA6IG51bGw7XG4gICAgICAgICAgICBjYW4gPSBjYW5TcGxpdCh0ci5kb2MsIHNwbGl0UG9zLCB0eXBlcy5sZW5ndGgsIHR5cGVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNhbilcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgdHIuc3BsaXQoc3BsaXRQb3MsIHR5cGVzLmxlbmd0aCwgdHlwZXMpO1xuICAgICAgICBpZiAoIWF0RW5kICYmIGF0U3RhcnQgJiYgJGZyb20ubm9kZShzcGxpdERlcHRoKS50eXBlICE9IGRlZmx0KSB7XG4gICAgICAgICAgICBsZXQgZmlyc3QgPSB0ci5tYXBwaW5nLm1hcCgkZnJvbS5iZWZvcmUoc3BsaXREZXB0aCkpLCAkZmlyc3QgPSB0ci5kb2MucmVzb2x2ZShmaXJzdCk7XG4gICAgICAgICAgICBpZiAoZGVmbHQgJiYgJGZyb20ubm9kZShzcGxpdERlcHRoIC0gMSkuY2FuUmVwbGFjZVdpdGgoJGZpcnN0LmluZGV4KCksICRmaXJzdC5pbmRleCgpICsgMSwgZGVmbHQpKVxuICAgICAgICAgICAgICAgIHRyLnNldE5vZGVNYXJrdXAodHIubWFwcGluZy5tYXAoJGZyb20uYmVmb3JlKHNwbGl0RGVwdGgpKSwgZGVmbHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuLyoqXG5TcGxpdCB0aGUgcGFyZW50IGJsb2NrIG9mIHRoZSBzZWxlY3Rpb24uIElmIHRoZSBzZWxlY3Rpb24gaXMgYSB0ZXh0XG5zZWxlY3Rpb24sIGFsc28gZGVsZXRlIGl0cyBjb250ZW50LlxuKi9cbmNvbnN0IHNwbGl0QmxvY2sgPSBzcGxpdEJsb2NrQXMoKTtcbi8qKlxuQWN0cyBsaWtlIFtgc3BsaXRCbG9ja2BdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNjb21tYW5kcy5zcGxpdEJsb2NrKSwgYnV0IHdpdGhvdXRcbnJlc2V0dGluZyB0aGUgc2V0IG9mIGFjdGl2ZSBtYXJrcyBhdCB0aGUgY3Vyc29yLlxuKi9cbmNvbnN0IHNwbGl0QmxvY2tLZWVwTWFya3MgPSAoc3RhdGUsIGRpc3BhdGNoKSA9PiB7XG4gICAgcmV0dXJuIHNwbGl0QmxvY2soc3RhdGUsIGRpc3BhdGNoICYmICh0ciA9PiB7XG4gICAgICAgIGxldCBtYXJrcyA9IHN0YXRlLnN0b3JlZE1hcmtzIHx8IChzdGF0ZS5zZWxlY3Rpb24uJHRvLnBhcmVudE9mZnNldCAmJiBzdGF0ZS5zZWxlY3Rpb24uJGZyb20ubWFya3MoKSk7XG4gICAgICAgIGlmIChtYXJrcylcbiAgICAgICAgICAgIHRyLmVuc3VyZU1hcmtzKG1hcmtzKTtcbiAgICAgICAgZGlzcGF0Y2godHIpO1xuICAgIH0pKTtcbn07XG4vKipcbk1vdmUgdGhlIHNlbGVjdGlvbiB0byB0aGUgbm9kZSB3cmFwcGluZyB0aGUgY3VycmVudCBzZWxlY3Rpb24sIGlmXG5hbnkuIChXaWxsIG5vdCBzZWxlY3QgdGhlIGRvY3VtZW50IG5vZGUuKVxuKi9cbmNvbnN0IHNlbGVjdFBhcmVudE5vZGUgPSAoc3RhdGUsIGRpc3BhdGNoKSA9PiB7XG4gICAgbGV0IHsgJGZyb20sIHRvIH0gPSBzdGF0ZS5zZWxlY3Rpb24sIHBvcztcbiAgICBsZXQgc2FtZSA9ICRmcm9tLnNoYXJlZERlcHRoKHRvKTtcbiAgICBpZiAoc2FtZSA9PSAwKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcG9zID0gJGZyb20uYmVmb3JlKHNhbWUpO1xuICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIuc2V0U2VsZWN0aW9uKE5vZGVTZWxlY3Rpb24uY3JlYXRlKHN0YXRlLmRvYywgcG9zKSkpO1xuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuU2VsZWN0IHRoZSB3aG9sZSBkb2N1bWVudC5cbiovXG5jb25zdCBzZWxlY3RBbGwgPSAoc3RhdGUsIGRpc3BhdGNoKSA9PiB7XG4gICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5zZXRTZWxlY3Rpb24obmV3IEFsbFNlbGVjdGlvbihzdGF0ZS5kb2MpKSk7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuZnVuY3Rpb24gam9pbk1heWJlQ2xlYXIoc3RhdGUsICRwb3MsIGRpc3BhdGNoKSB7XG4gICAgbGV0IGJlZm9yZSA9ICRwb3Mubm9kZUJlZm9yZSwgYWZ0ZXIgPSAkcG9zLm5vZGVBZnRlciwgaW5kZXggPSAkcG9zLmluZGV4KCk7XG4gICAgaWYgKCFiZWZvcmUgfHwgIWFmdGVyIHx8ICFiZWZvcmUudHlwZS5jb21wYXRpYmxlQ29udGVudChhZnRlci50eXBlKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghYmVmb3JlLmNvbnRlbnQuc2l6ZSAmJiAkcG9zLnBhcmVudC5jYW5SZXBsYWNlKGluZGV4IC0gMSwgaW5kZXgpKSB7XG4gICAgICAgIGlmIChkaXNwYXRjaClcbiAgICAgICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLmRlbGV0ZSgkcG9zLnBvcyAtIGJlZm9yZS5ub2RlU2l6ZSwgJHBvcy5wb3MpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCEkcG9zLnBhcmVudC5jYW5SZXBsYWNlKGluZGV4LCBpbmRleCArIDEpIHx8ICEoYWZ0ZXIuaXNUZXh0YmxvY2sgfHwgY2FuSm9pbihzdGF0ZS5kb2MsICRwb3MucG9zKSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGlzcGF0Y2gpXG4gICAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLmpvaW4oJHBvcy5wb3MpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZGVsZXRlQmFycmllcihzdGF0ZSwgJGN1dCwgZGlzcGF0Y2gsIGRpcikge1xuICAgIGxldCBiZWZvcmUgPSAkY3V0Lm5vZGVCZWZvcmUsIGFmdGVyID0gJGN1dC5ub2RlQWZ0ZXIsIGNvbm4sIG1hdGNoO1xuICAgIGxldCBpc29sYXRlZCA9IGJlZm9yZS50eXBlLnNwZWMuaXNvbGF0aW5nIHx8IGFmdGVyLnR5cGUuc3BlYy5pc29sYXRpbmc7XG4gICAgaWYgKCFpc29sYXRlZCAmJiBqb2luTWF5YmVDbGVhcihzdGF0ZSwgJGN1dCwgZGlzcGF0Y2gpKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBsZXQgY2FuRGVsQWZ0ZXIgPSAhaXNvbGF0ZWQgJiYgJGN1dC5wYXJlbnQuY2FuUmVwbGFjZSgkY3V0LmluZGV4KCksICRjdXQuaW5kZXgoKSArIDEpO1xuICAgIGlmIChjYW5EZWxBZnRlciAmJlxuICAgICAgICAoY29ubiA9IChtYXRjaCA9IGJlZm9yZS5jb250ZW50TWF0Y2hBdChiZWZvcmUuY2hpbGRDb3VudCkpLmZpbmRXcmFwcGluZyhhZnRlci50eXBlKSkgJiZcbiAgICAgICAgbWF0Y2gubWF0Y2hUeXBlKGNvbm5bMF0gfHwgYWZ0ZXIudHlwZSkudmFsaWRFbmQpIHtcbiAgICAgICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICAgICAgICBsZXQgZW5kID0gJGN1dC5wb3MgKyBhZnRlci5ub2RlU2l6ZSwgd3JhcCA9IEZyYWdtZW50LmVtcHR5O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGNvbm4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgICAgICAgICAgd3JhcCA9IEZyYWdtZW50LmZyb20oY29ubltpXS5jcmVhdGUobnVsbCwgd3JhcCkpO1xuICAgICAgICAgICAgd3JhcCA9IEZyYWdtZW50LmZyb20oYmVmb3JlLmNvcHkod3JhcCkpO1xuICAgICAgICAgICAgbGV0IHRyID0gc3RhdGUudHIuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoJGN1dC5wb3MgLSAxLCBlbmQsICRjdXQucG9zLCBlbmQsIG5ldyBTbGljZSh3cmFwLCAxLCAwKSwgY29ubi5sZW5ndGgsIHRydWUpKTtcbiAgICAgICAgICAgIGxldCAkam9pbkF0ID0gdHIuZG9jLnJlc29sdmUoZW5kICsgMiAqIGNvbm4ubGVuZ3RoKTtcbiAgICAgICAgICAgIGlmICgkam9pbkF0Lm5vZGVBZnRlciAmJiAkam9pbkF0Lm5vZGVBZnRlci50eXBlID09IGJlZm9yZS50eXBlICYmXG4gICAgICAgICAgICAgICAgY2FuSm9pbih0ci5kb2MsICRqb2luQXQucG9zKSlcbiAgICAgICAgICAgICAgICB0ci5qb2luKCRqb2luQXQucG9zKTtcbiAgICAgICAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBsZXQgc2VsQWZ0ZXIgPSBhZnRlci50eXBlLnNwZWMuaXNvbGF0aW5nIHx8IChkaXIgPiAwICYmIGlzb2xhdGVkKSA/IG51bGwgOiBTZWxlY3Rpb24uZmluZEZyb20oJGN1dCwgMSk7XG4gICAgbGV0IHJhbmdlID0gc2VsQWZ0ZXIgJiYgc2VsQWZ0ZXIuJGZyb20uYmxvY2tSYW5nZShzZWxBZnRlci4kdG8pLCB0YXJnZXQgPSByYW5nZSAmJiBsaWZ0VGFyZ2V0KHJhbmdlKTtcbiAgICBpZiAodGFyZ2V0ICE9IG51bGwgJiYgdGFyZ2V0ID49ICRjdXQuZGVwdGgpIHtcbiAgICAgICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIubGlmdChyYW5nZSwgdGFyZ2V0KS5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChjYW5EZWxBZnRlciAmJiB0ZXh0YmxvY2tBdChhZnRlciwgXCJzdGFydFwiLCB0cnVlKSAmJiB0ZXh0YmxvY2tBdChiZWZvcmUsIFwiZW5kXCIpKSB7XG4gICAgICAgIGxldCBhdCA9IGJlZm9yZSwgd3JhcCA9IFtdO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICB3cmFwLnB1c2goYXQpO1xuICAgICAgICAgICAgaWYgKGF0LmlzVGV4dGJsb2NrKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgYXQgPSBhdC5sYXN0Q2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFmdGVyVGV4dCA9IGFmdGVyLCBhZnRlckRlcHRoID0gMTtcbiAgICAgICAgZm9yICg7ICFhZnRlclRleHQuaXNUZXh0YmxvY2s7IGFmdGVyVGV4dCA9IGFmdGVyVGV4dC5maXJzdENoaWxkKVxuICAgICAgICAgICAgYWZ0ZXJEZXB0aCsrO1xuICAgICAgICBpZiAoYXQuY2FuUmVwbGFjZShhdC5jaGlsZENvdW50LCBhdC5jaGlsZENvdW50LCBhZnRlclRleHQuY29udGVudCkpIHtcbiAgICAgICAgICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgICAgICAgICAgIGxldCBlbmQgPSBGcmFnbWVudC5lbXB0eTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gd3JhcC5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gRnJhZ21lbnQuZnJvbSh3cmFwW2ldLmNvcHkoZW5kKSk7XG4gICAgICAgICAgICAgICAgbGV0IHRyID0gc3RhdGUudHIuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoJGN1dC5wb3MgLSB3cmFwLmxlbmd0aCwgJGN1dC5wb3MgKyBhZnRlci5ub2RlU2l6ZSwgJGN1dC5wb3MgKyBhZnRlckRlcHRoLCAkY3V0LnBvcyArIGFmdGVyLm5vZGVTaXplIC0gYWZ0ZXJEZXB0aCwgbmV3IFNsaWNlKGVuZCwgd3JhcC5sZW5ndGgsIDApLCAwLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBzZWxlY3RUZXh0YmxvY2tTaWRlKHNpZGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBkaXNwYXRjaCkge1xuICAgICAgICBsZXQgc2VsID0gc3RhdGUuc2VsZWN0aW9uLCAkcG9zID0gc2lkZSA8IDAgPyBzZWwuJGZyb20gOiBzZWwuJHRvO1xuICAgICAgICBsZXQgZGVwdGggPSAkcG9zLmRlcHRoO1xuICAgICAgICB3aGlsZSAoJHBvcy5ub2RlKGRlcHRoKS5pc0lubGluZSkge1xuICAgICAgICAgICAgaWYgKCFkZXB0aClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBkZXB0aC0tO1xuICAgICAgICB9XG4gICAgICAgIGlmICghJHBvcy5ub2RlKGRlcHRoKS5pc1RleHRibG9jaylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIuc2V0U2VsZWN0aW9uKFRleHRTZWxlY3Rpb24uY3JlYXRlKHN0YXRlLmRvYywgc2lkZSA8IDAgPyAkcG9zLnN0YXJ0KGRlcHRoKSA6ICRwb3MuZW5kKGRlcHRoKSkpKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbi8qKlxuTW92ZXMgdGhlIGN1cnNvciB0byB0aGUgc3RhcnQgb2YgY3VycmVudCB0ZXh0IGJsb2NrLlxuKi9cbmNvbnN0IHNlbGVjdFRleHRibG9ja1N0YXJ0ID0gc2VsZWN0VGV4dGJsb2NrU2lkZSgtMSk7XG4vKipcbk1vdmVzIHRoZSBjdXJzb3IgdG8gdGhlIGVuZCBvZiBjdXJyZW50IHRleHQgYmxvY2suXG4qL1xuY29uc3Qgc2VsZWN0VGV4dGJsb2NrRW5kID0gc2VsZWN0VGV4dGJsb2NrU2lkZSgxKTtcbi8vIFBhcmFtZXRlcml6ZWQgY29tbWFuZHNcbi8qKlxuV3JhcCB0aGUgc2VsZWN0aW9uIGluIGEgbm9kZSBvZiB0aGUgZ2l2ZW4gdHlwZSB3aXRoIHRoZSBnaXZlblxuYXR0cmlidXRlcy5cbiovXG5mdW5jdGlvbiB3cmFwSW4obm9kZVR5cGUsIGF0dHJzID0gbnVsbCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGRpc3BhdGNoKSB7XG4gICAgICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICAgICAgbGV0IHJhbmdlID0gJGZyb20uYmxvY2tSYW5nZSgkdG8pLCB3cmFwcGluZyA9IHJhbmdlICYmIGZpbmRXcmFwcGluZyhyYW5nZSwgbm9kZVR5cGUsIGF0dHJzKTtcbiAgICAgICAgaWYgKCF3cmFwcGluZylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGRpc3BhdGNoKVxuICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIud3JhcChyYW5nZSwgd3JhcHBpbmcpLnNjcm9sbEludG9WaWV3KCkpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuLyoqXG5SZXR1cm5zIGEgY29tbWFuZCB0aGF0IHRyaWVzIHRvIHNldCB0aGUgc2VsZWN0ZWQgdGV4dGJsb2NrcyB0byB0aGVcbmdpdmVuIG5vZGUgdHlwZSB3aXRoIHRoZSBnaXZlbiBhdHRyaWJ1dGVzLlxuKi9cbmZ1bmN0aW9uIHNldEJsb2NrVHlwZShub2RlVHlwZSwgYXR0cnMgPSBudWxsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgZGlzcGF0Y2gpIHtcbiAgICAgICAgbGV0IGFwcGxpY2FibGUgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzLmxlbmd0aCAmJiAhYXBwbGljYWJsZTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgeyAkZnJvbTogeyBwb3M6IGZyb20gfSwgJHRvOiB7IHBvczogdG8gfSB9ID0gc3RhdGUuc2VsZWN0aW9uLnJhbmdlc1tpXTtcbiAgICAgICAgICAgIHN0YXRlLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYXBwbGljYWJsZSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICghbm9kZS5pc1RleHRibG9jayB8fCBub2RlLmhhc01hcmt1cChub2RlVHlwZSwgYXR0cnMpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUudHlwZSA9PSBub2RlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBhcHBsaWNhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCAkcG9zID0gc3RhdGUuZG9jLnJlc29sdmUocG9zKSwgaW5kZXggPSAkcG9zLmluZGV4KCk7XG4gICAgICAgICAgICAgICAgICAgIGFwcGxpY2FibGUgPSAkcG9zLnBhcmVudC5jYW5SZXBsYWNlV2l0aChpbmRleCwgaW5kZXggKyAxLCBub2RlVHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcHBsaWNhYmxlKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgICAgICAgIGxldCB0ciA9IHN0YXRlLnRyO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZS5zZWxlY3Rpb24ucmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHsgJGZyb206IHsgcG9zOiBmcm9tIH0sICR0bzogeyBwb3M6IHRvIH0gfSA9IHN0YXRlLnNlbGVjdGlvbi5yYW5nZXNbaV07XG4gICAgICAgICAgICAgICAgdHIuc2V0QmxvY2tUeXBlKGZyb20sIHRvLCBub2RlVHlwZSwgYXR0cnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG1hcmtBcHBsaWVzKGRvYywgcmFuZ2VzLCB0eXBlLCBlbnRlckF0b21zKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHsgJGZyb20sICR0byB9ID0gcmFuZ2VzW2ldO1xuICAgICAgICBsZXQgY2FuID0gJGZyb20uZGVwdGggPT0gMCA/IGRvYy5pbmxpbmVDb250ZW50ICYmIGRvYy50eXBlLmFsbG93c01hcmtUeXBlKHR5cGUpIDogZmFsc2U7XG4gICAgICAgIGRvYy5ub2Rlc0JldHdlZW4oJGZyb20ucG9zLCAkdG8ucG9zLCAobm9kZSwgcG9zKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2FuIHx8ICFlbnRlckF0b21zICYmIG5vZGUuaXNBdG9tICYmIG5vZGUuaXNJbmxpbmUgJiYgcG9zID49ICRmcm9tLnBvcyAmJiBwb3MgKyBub2RlLm5vZGVTaXplIDw9ICR0by5wb3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY2FuID0gbm9kZS5pbmxpbmVDb250ZW50ICYmIG5vZGUudHlwZS5hbGxvd3NNYXJrVHlwZSh0eXBlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjYW4pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gcmVtb3ZlSW5saW5lQXRvbXMocmFuZ2VzKSB7XG4gICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHJhbmdlc1tpXTtcbiAgICAgICAgJGZyb20uZG9jLm5vZGVzQmV0d2VlbigkZnJvbS5wb3MsICR0by5wb3MsIChub2RlLCBwb3MpID0+IHtcbiAgICAgICAgICAgIGlmIChub2RlLmlzQXRvbSAmJiBub2RlLmNvbnRlbnQuc2l6ZSAmJiBub2RlLmlzSW5saW5lICYmIHBvcyA+PSAkZnJvbS5wb3MgJiYgcG9zICsgbm9kZS5ub2RlU2l6ZSA8PSAkdG8ucG9zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBvcyArIDEgPiAkZnJvbS5wb3MpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBTZWxlY3Rpb25SYW5nZSgkZnJvbSwgJGZyb20uZG9jLnJlc29sdmUocG9zICsgMSkpKTtcbiAgICAgICAgICAgICAgICAkZnJvbSA9ICRmcm9tLmRvYy5yZXNvbHZlKHBvcyArIDEgKyBub2RlLmNvbnRlbnQuc2l6ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCRmcm9tLnBvcyA8ICR0by5wb3MpXG4gICAgICAgICAgICByZXN1bHQucHVzaChuZXcgU2VsZWN0aW9uUmFuZ2UoJGZyb20sICR0bykpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG5DcmVhdGUgYSBjb21tYW5kIGZ1bmN0aW9uIHRoYXQgdG9nZ2xlcyB0aGUgZ2l2ZW4gbWFyayB3aXRoIHRoZVxuZ2l2ZW4gYXR0cmlidXRlcy4gV2lsbCByZXR1cm4gYGZhbHNlYCB3aGVuIHRoZSBjdXJyZW50IHNlbGVjdGlvblxuZG9lc24ndCBzdXBwb3J0IHRoYXQgbWFyay4gVGhpcyB3aWxsIHJlbW92ZSB0aGUgbWFyayBpZiBhbnkgbWFya3Ncbm9mIHRoYXQgdHlwZSBleGlzdCBpbiB0aGUgc2VsZWN0aW9uLCBvciBhZGQgaXQgb3RoZXJ3aXNlLiBJZiB0aGVcbnNlbGVjdGlvbiBpcyBlbXB0eSwgdGhpcyBhcHBsaWVzIHRvIHRoZSBbc3RvcmVkXG5tYXJrc10oaHR0cHM6Ly9wcm9zZW1pcnJvci5uZXQvZG9jcy9yZWYvI3N0YXRlLkVkaXRvclN0YXRlLnN0b3JlZE1hcmtzKSBpbnN0ZWFkIG9mIGEgcmFuZ2Ugb2YgdGhlXG5kb2N1bWVudC5cbiovXG5mdW5jdGlvbiB0b2dnbGVNYXJrKG1hcmtUeXBlLCBhdHRycyA9IG51bGwsIG9wdGlvbnMpIHtcbiAgICBsZXQgcmVtb3ZlV2hlblByZXNlbnQgPSAob3B0aW9ucyAmJiBvcHRpb25zLnJlbW92ZVdoZW5QcmVzZW50KSAhPT0gZmFsc2U7XG4gICAgbGV0IGVudGVyQXRvbXMgPSAob3B0aW9ucyAmJiBvcHRpb25zLmVudGVySW5saW5lQXRvbXMpICE9PSBmYWxzZTtcbiAgICBsZXQgZHJvcFNwYWNlID0gIShvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZVdoaXRlc3BhY2UpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGRpc3BhdGNoKSB7XG4gICAgICAgIGxldCB7IGVtcHR5LCAkY3Vyc29yLCByYW5nZXMgfSA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICAgICAgaWYgKChlbXB0eSAmJiAhJGN1cnNvcikgfHwgIW1hcmtBcHBsaWVzKHN0YXRlLmRvYywgcmFuZ2VzLCBtYXJrVHlwZSwgZW50ZXJBdG9tcykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgICAgICAgaWYgKCRjdXJzb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAobWFya1R5cGUuaXNJblNldChzdGF0ZS5zdG9yZWRNYXJrcyB8fCAkY3Vyc29yLm1hcmtzKCkpKVxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5yZW1vdmVTdG9yZWRNYXJrKG1hcmtUeXBlKSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChzdGF0ZS50ci5hZGRTdG9yZWRNYXJrKG1hcmtUeXBlLmNyZWF0ZShhdHRycykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBhZGQsIHRyID0gc3RhdGUudHI7XG4gICAgICAgICAgICAgICAgaWYgKCFlbnRlckF0b21zKVxuICAgICAgICAgICAgICAgICAgICByYW5nZXMgPSByZW1vdmVJbmxpbmVBdG9tcyhyYW5nZXMpO1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmVXaGVuUHJlc2VudCkge1xuICAgICAgICAgICAgICAgICAgICBhZGQgPSAhcmFuZ2VzLnNvbWUociA9PiBzdGF0ZS5kb2MucmFuZ2VIYXNNYXJrKHIuJGZyb20ucG9zLCByLiR0by5wb3MsIG1hcmtUeXBlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhZGQgPSAhcmFuZ2VzLmV2ZXJ5KHIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1pc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyLmRvYy5ub2Rlc0JldHdlZW4oci4kZnJvbS5wb3MsIHIuJHRvLnBvcywgKG5vZGUsIHBvcywgcGFyZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1pc3NpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nID0gIW1hcmtUeXBlLmlzSW5TZXQobm9kZS5tYXJrcykgJiYgISFwYXJlbnQgJiYgcGFyZW50LnR5cGUuYWxsb3dzTWFya1R5cGUobWFya1R5cGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICEobm9kZS5pc1RleHQgJiYgL15cXHMqJC8udGVzdChub2RlLnRleHRCZXR3ZWVuKE1hdGgubWF4KDAsIHIuJGZyb20ucG9zIC0gcG9zKSwgTWF0aC5taW4obm9kZS5ub2RlU2l6ZSwgci4kdG8ucG9zIC0gcG9zKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFtaXNzaW5nO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgJGZyb20sICR0byB9ID0gcmFuZ2VzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFkZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHIucmVtb3ZlTWFyaygkZnJvbS5wb3MsICR0by5wb3MsIG1hcmtUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmcm9tID0gJGZyb20ucG9zLCB0byA9ICR0by5wb3MsIHN0YXJ0ID0gJGZyb20ubm9kZUFmdGVyLCBlbmQgPSAkdG8ubm9kZUJlZm9yZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzcGFjZVN0YXJ0ID0gZHJvcFNwYWNlICYmIHN0YXJ0ICYmIHN0YXJ0LmlzVGV4dCA/IC9eXFxzKi8uZXhlYyhzdGFydC50ZXh0KVswXS5sZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNwYWNlRW5kID0gZHJvcFNwYWNlICYmIGVuZCAmJiBlbmQuaXNUZXh0ID8gL1xccyokLy5leGVjKGVuZC50ZXh0KVswXS5sZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyb20gKyBzcGFjZVN0YXJ0IDwgdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tICs9IHNwYWNlU3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gLT0gc3BhY2VFbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0ci5hZGRNYXJrKGZyb20sIHRvLCBtYXJrVHlwZS5jcmVhdGUoYXR0cnMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuZnVuY3Rpb24gd3JhcERpc3BhdGNoRm9ySm9pbihkaXNwYXRjaCwgaXNKb2luYWJsZSkge1xuICAgIHJldHVybiAodHIpID0+IHtcbiAgICAgICAgaWYgKCF0ci5pc0dlbmVyaWMpXG4gICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2godHIpO1xuICAgICAgICBsZXQgcmFuZ2VzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHIubWFwcGluZy5tYXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbWFwID0gdHIubWFwcGluZy5tYXBzW2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByYW5nZXMubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgcmFuZ2VzW2pdID0gbWFwLm1hcChyYW5nZXNbal0pO1xuICAgICAgICAgICAgbWFwLmZvckVhY2goKF9zLCBfZSwgZnJvbSwgdG8pID0+IHJhbmdlcy5wdXNoKGZyb20sIHRvKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmlndXJlIG91dCB3aGljaCBqb2luYWJsZSBwb2ludHMgZXhpc3QgaW5zaWRlIHRob3NlIHJhbmdlcyxcbiAgICAgICAgLy8gYnkgY2hlY2tpbmcgYWxsIG5vZGUgYm91bmRhcmllcyBpbiB0aGVpciBwYXJlbnQgbm9kZXMuXG4gICAgICAgIGxldCBqb2luYWJsZSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgbGV0IGZyb20gPSByYW5nZXNbaV0sIHRvID0gcmFuZ2VzW2kgKyAxXTtcbiAgICAgICAgICAgIGxldCAkZnJvbSA9IHRyLmRvYy5yZXNvbHZlKGZyb20pLCBkZXB0aCA9ICRmcm9tLnNoYXJlZERlcHRoKHRvKSwgcGFyZW50ID0gJGZyb20ubm9kZShkZXB0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9ICRmcm9tLmluZGV4QWZ0ZXIoZGVwdGgpLCBwb3MgPSAkZnJvbS5hZnRlcihkZXB0aCArIDEpOyBwb3MgPD0gdG87ICsraW5kZXgpIHtcbiAgICAgICAgICAgICAgICBsZXQgYWZ0ZXIgPSBwYXJlbnQubWF5YmVDaGlsZChpbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKCFhZnRlcilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICYmIGpvaW5hYmxlLmluZGV4T2YocG9zKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYmVmb3JlID0gcGFyZW50LmNoaWxkKGluZGV4IC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWZvcmUudHlwZSA9PSBhZnRlci50eXBlICYmIGlzSm9pbmFibGUoYmVmb3JlLCBhZnRlcikpXG4gICAgICAgICAgICAgICAgICAgICAgICBqb2luYWJsZS5wdXNoKHBvcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvcyArPSBhZnRlci5ub2RlU2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBKb2luIHRoZSBqb2luYWJsZSBwb2ludHNcbiAgICAgICAgam9pbmFibGUuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgICAgICBmb3IgKGxldCBpID0gam9pbmFibGUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChjYW5Kb2luKHRyLmRvYywgam9pbmFibGVbaV0pKVxuICAgICAgICAgICAgICAgIHRyLmpvaW4oam9pbmFibGVbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKHRyKTtcbiAgICB9O1xufVxuLyoqXG5XcmFwIGEgY29tbWFuZCBzbyB0aGF0LCB3aGVuIGl0IHByb2R1Y2VzIGEgdHJhbnNmb3JtIHRoYXQgY2F1c2VzXG50d28gam9pbmFibGUgbm9kZXMgdG8gZW5kIHVwIG5leHQgdG8gZWFjaCBvdGhlciwgdGhvc2UgYXJlIGpvaW5lZC5cbk5vZGVzIGFyZSBjb25zaWRlcmVkIGpvaW5hYmxlIHdoZW4gdGhleSBhcmUgb2YgdGhlIHNhbWUgdHlwZSBhbmRcbndoZW4gdGhlIGBpc0pvaW5hYmxlYCBwcmVkaWNhdGUgcmV0dXJucyB0cnVlIGZvciB0aGVtIG9yLCBpZiBhblxuYXJyYXkgb2Ygc3RyaW5ncyB3YXMgcGFzc2VkLCBpZiB0aGVpciBub2RlIHR5cGUgbmFtZSBpcyBpbiB0aGF0XG5hcnJheS5cbiovXG5mdW5jdGlvbiBhdXRvSm9pbihjb21tYW5kLCBpc0pvaW5hYmxlKSB7XG4gICAgbGV0IGNhbkpvaW4gPSBBcnJheS5pc0FycmF5KGlzSm9pbmFibGUpID8gKG5vZGUpID0+IGlzSm9pbmFibGUuaW5kZXhPZihub2RlLnR5cGUubmFtZSkgPiAtMVxuICAgICAgICA6IGlzSm9pbmFibGU7XG4gICAgcmV0dXJuIChzdGF0ZSwgZGlzcGF0Y2gsIHZpZXcpID0+IGNvbW1hbmQoc3RhdGUsIGRpc3BhdGNoICYmIHdyYXBEaXNwYXRjaEZvckpvaW4oZGlzcGF0Y2gsIGNhbkpvaW4pLCB2aWV3KTtcbn1cbi8qKlxuQ29tYmluZSBhIG51bWJlciBvZiBjb21tYW5kIGZ1bmN0aW9ucyBpbnRvIGEgc2luZ2xlIGZ1bmN0aW9uICh3aGljaFxuY2FsbHMgdGhlbSBvbmUgYnkgb25lIHVudGlsIG9uZSByZXR1cm5zIHRydWUpLlxuKi9cbmZ1bmN0aW9uIGNoYWluQ29tbWFuZHMoLi4uY29tbWFuZHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBkaXNwYXRjaCwgdmlldykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbW1hbmRzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgaWYgKGNvbW1hbmRzW2ldKHN0YXRlLCBkaXNwYXRjaCwgdmlldykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufVxubGV0IGJhY2tzcGFjZSA9IGNoYWluQ29tbWFuZHMoZGVsZXRlU2VsZWN0aW9uLCBqb2luQmFja3dhcmQsIHNlbGVjdE5vZGVCYWNrd2FyZCk7XG5sZXQgZGVsID0gY2hhaW5Db21tYW5kcyhkZWxldGVTZWxlY3Rpb24sIGpvaW5Gb3J3YXJkLCBzZWxlY3ROb2RlRm9yd2FyZCk7XG4vKipcbkEgYmFzaWMga2V5bWFwIGNvbnRhaW5pbmcgYmluZGluZ3Mgbm90IHNwZWNpZmljIHRvIGFueSBzY2hlbWEuXG5CaW5kcyB0aGUgZm9sbG93aW5nIGtleXMgKHdoZW4gbXVsdGlwbGUgY29tbWFuZHMgYXJlIGxpc3RlZCwgdGhleVxuYXJlIGNoYWluZWQgd2l0aCBbYGNoYWluQ29tbWFuZHNgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jY29tbWFuZHMuY2hhaW5Db21tYW5kcykpOlxuXG4qICoqRW50ZXIqKiB0byBgbmV3bGluZUluQ29kZWAsIGBjcmVhdGVQYXJhZ3JhcGhOZWFyYCwgYGxpZnRFbXB0eUJsb2NrYCwgYHNwbGl0QmxvY2tgXG4qICoqTW9kLUVudGVyKiogdG8gYGV4aXRDb2RlYFxuKiAqKkJhY2tzcGFjZSoqIGFuZCAqKk1vZC1CYWNrc3BhY2UqKiB0byBgZGVsZXRlU2VsZWN0aW9uYCwgYGpvaW5CYWNrd2FyZGAsIGBzZWxlY3ROb2RlQmFja3dhcmRgXG4qICoqRGVsZXRlKiogYW5kICoqTW9kLURlbGV0ZSoqIHRvIGBkZWxldGVTZWxlY3Rpb25gLCBgam9pbkZvcndhcmRgLCBgc2VsZWN0Tm9kZUZvcndhcmRgXG4qICoqTW9kLURlbGV0ZSoqIHRvIGBkZWxldGVTZWxlY3Rpb25gLCBgam9pbkZvcndhcmRgLCBgc2VsZWN0Tm9kZUZvcndhcmRgXG4qICoqTW9kLWEqKiB0byBgc2VsZWN0QWxsYFxuKi9cbmNvbnN0IHBjQmFzZUtleW1hcCA9IHtcbiAgICBcIkVudGVyXCI6IGNoYWluQ29tbWFuZHMobmV3bGluZUluQ29kZSwgY3JlYXRlUGFyYWdyYXBoTmVhciwgbGlmdEVtcHR5QmxvY2ssIHNwbGl0QmxvY2spLFxuICAgIFwiTW9kLUVudGVyXCI6IGV4aXRDb2RlLFxuICAgIFwiQmFja3NwYWNlXCI6IGJhY2tzcGFjZSxcbiAgICBcIk1vZC1CYWNrc3BhY2VcIjogYmFja3NwYWNlLFxuICAgIFwiU2hpZnQtQmFja3NwYWNlXCI6IGJhY2tzcGFjZSxcbiAgICBcIkRlbGV0ZVwiOiBkZWwsXG4gICAgXCJNb2QtRGVsZXRlXCI6IGRlbCxcbiAgICBcIk1vZC1hXCI6IHNlbGVjdEFsbFxufTtcbi8qKlxuQSBjb3B5IG9mIGBwY0Jhc2VLZXltYXBgIHRoYXQgYWxzbyBiaW5kcyAqKkN0cmwtaCoqIGxpa2UgQmFja3NwYWNlLFxuKipDdHJsLWQqKiBsaWtlIERlbGV0ZSwgKipBbHQtQmFja3NwYWNlKiogbGlrZSBDdHJsLUJhY2tzcGFjZSwgYW5kXG4qKkN0cmwtQWx0LUJhY2tzcGFjZSoqLCAqKkFsdC1EZWxldGUqKiwgYW5kICoqQWx0LWQqKiBsaWtlXG5DdHJsLURlbGV0ZS5cbiovXG5jb25zdCBtYWNCYXNlS2V5bWFwID0ge1xuICAgIFwiQ3RybC1oXCI6IHBjQmFzZUtleW1hcFtcIkJhY2tzcGFjZVwiXSxcbiAgICBcIkFsdC1CYWNrc3BhY2VcIjogcGNCYXNlS2V5bWFwW1wiTW9kLUJhY2tzcGFjZVwiXSxcbiAgICBcIkN0cmwtZFwiOiBwY0Jhc2VLZXltYXBbXCJEZWxldGVcIl0sXG4gICAgXCJDdHJsLUFsdC1CYWNrc3BhY2VcIjogcGNCYXNlS2V5bWFwW1wiTW9kLURlbGV0ZVwiXSxcbiAgICBcIkFsdC1EZWxldGVcIjogcGNCYXNlS2V5bWFwW1wiTW9kLURlbGV0ZVwiXSxcbiAgICBcIkFsdC1kXCI6IHBjQmFzZUtleW1hcFtcIk1vZC1EZWxldGVcIl0sXG4gICAgXCJDdHJsLWFcIjogc2VsZWN0VGV4dGJsb2NrU3RhcnQsXG4gICAgXCJDdHJsLWVcIjogc2VsZWN0VGV4dGJsb2NrRW5kXG59O1xuZm9yIChsZXQga2V5IGluIHBjQmFzZUtleW1hcClcbiAgICBtYWNCYXNlS2V5bWFwW2tleV0gPSBwY0Jhc2VLZXltYXBba2V5XTtcbmNvbnN0IG1hYyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiA/IC9NYWN8aVAoaG9uZXxbb2FdZCkvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKVxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICA6IHR5cGVvZiBvcyAhPSBcInVuZGVmaW5lZFwiICYmIG9zLnBsYXRmb3JtID8gb3MucGxhdGZvcm0oKSA9PSBcImRhcndpblwiIDogZmFsc2U7XG4vKipcbkRlcGVuZGluZyBvbiB0aGUgZGV0ZWN0ZWQgcGxhdGZvcm0sIHRoaXMgd2lsbCBob2xkXG5bYHBjQmFzZWtleW1hcGBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNjb21tYW5kcy5wY0Jhc2VLZXltYXApIG9yXG5bYG1hY0Jhc2VLZXltYXBgXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jY29tbWFuZHMubWFjQmFzZUtleW1hcCkuXG4qL1xuY29uc3QgYmFzZUtleW1hcCA9IG1hYyA/IG1hY0Jhc2VLZXltYXAgOiBwY0Jhc2VLZXltYXA7XG5cbmV4cG9ydCB7IGF1dG9Kb2luLCBiYXNlS2V5bWFwLCBjaGFpbkNvbW1hbmRzLCBjcmVhdGVQYXJhZ3JhcGhOZWFyLCBkZWxldGVTZWxlY3Rpb24sIGV4aXRDb2RlLCBqb2luQmFja3dhcmQsIGpvaW5Eb3duLCBqb2luRm9yd2FyZCwgam9pblRleHRibG9ja0JhY2t3YXJkLCBqb2luVGV4dGJsb2NrRm9yd2FyZCwgam9pblVwLCBsaWZ0LCBsaWZ0RW1wdHlCbG9jaywgbWFjQmFzZUtleW1hcCwgbmV3bGluZUluQ29kZSwgcGNCYXNlS2V5bWFwLCBzZWxlY3RBbGwsIHNlbGVjdE5vZGVCYWNrd2FyZCwgc2VsZWN0Tm9kZUZvcndhcmQsIHNlbGVjdFBhcmVudE5vZGUsIHNlbGVjdFRleHRibG9ja0VuZCwgc2VsZWN0VGV4dGJsb2NrU3RhcnQsIHNldEJsb2NrVHlwZSwgc3BsaXRCbG9jaywgc3BsaXRCbG9ja0FzLCBzcGxpdEJsb2NrS2VlcE1hcmtzLCB0b2dnbGVNYXJrLCB3cmFwSW4gfTtcbiIsImltcG9ydCB7XG4gIFBsdWdpbixcbiAgRWRpdG9yU3RhdGUsXG4gIFNlbGVjdGlvbixcbiAgVGV4dFNlbGVjdGlvbixcbiAgVHJhbnNhY3Rpb24sXG59IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tICdwcm9zZW1pcnJvci12aWV3JztcbmltcG9ydCB7IGxpZnRMaXN0SXRlbSwgd3JhcEluTGlzdCB9IGZyb20gJ3Byb3NlbWlycm9yLXNjaGVtYS1saXN0JztcbmltcG9ydCB7XG4gIE1hcmtUeXBlLFxuICBOb2RlUmFuZ2UsXG4gIE5vZGVUeXBlLFxuICBSZXNvbHZlZFBvcyxcbiAgU2NoZW1hLFxufSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgeyBSZW1vdmVNYXJrU3RlcCwgZmluZFdyYXBwaW5nIH0gZnJvbSAncHJvc2VtaXJyb3ItdHJhbnNmb3JtJztcbmltcG9ydCB7IHVuZG8sIHJlZG8gfSBmcm9tICdwcm9zZW1pcnJvci1oaXN0b3J5JztcbmltcG9ydCB7IHRvZ2dsZU1hcmsgfSBmcm9tICdwcm9zZW1pcnJvci1jb21tYW5kcyc7XG5pbXBvcnQgeyBBVVRPX0xJTktfQVRUUiwgc2NoZW1hIH0gZnJvbSAnLi9zY2hlbWEnO1xuaW1wb3J0IHtcbiAgY2hhaW5Db21tYW5kcyxcbiAgc2VsZWN0UGFyZW50Tm9kZSxcbiAgc2V0QmxvY2tUeXBlLFxuICB3cmFwSW4sXG59IGZyb20gJ3Byb3NlbWlycm9yLWNvbW1hbmRzJztcbmltcG9ydCB7IENoZWNrYm94U3RhdHVzIH0gZnJvbSAnLi9zY2hlbWEnO1xuXG5jb25zdCBBUFBMWV9GT1JNQVRfQVRUUiA9ICdkYXRhLWZvcm1hdCc7XG5cbnR5cGUgQ29tbWFuZCA9IHR5cGVvZiBzZWxlY3RQYXJlbnROb2RlO1xuXG5jb25zdCB0b2dnbGVDaGVja2xpc3RJdGVtU3RhdGU6IENvbW1hbmQgPSBmdW5jdGlvbiAoXG4gIHN0YXRlOiBFZGl0b3JTdGF0ZSxcbiAgZGlzcGF0Y2g6IEVkaXRvclZpZXdbJ2Rpc3BhdGNoJ10sXG4pIHtcbiAgY29uc3QgeyAkZnJvbSwgJHRvIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG5cbiAgY29uc3QgYmxvY2tSYW5nZSA9ICRmcm9tLmJsb2NrUmFuZ2UoJHRvKTtcblxuICBsZXQgaGFzQ2hlY2tlZCA9IGZhbHNlO1xuICBmb3IgKFxuICAgIGxldCBpbmRleCA9IGJsb2NrUmFuZ2Uuc3RhcnRJbmRleCwgY2hpbGQgPSBibG9ja1JhbmdlLnBhcmVudC5jaGlsZChpbmRleCk7XG4gICAgaW5kZXggPCBibG9ja1JhbmdlLmVuZEluZGV4O1xuICAgIGluZGV4ICs9IDFcbiAgKSB7XG4gICAgaWYgKGNoaWxkLnR5cGUgIT09IHNjaGVtYS5ub2Rlcy5jaGVja2xpc3RfaXRlbSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoY2hpbGQuYXR0cnMuc3RhdHVzID09PSBDaGVja2JveFN0YXR1cy5ET05FKSB7XG4gICAgICBoYXNDaGVja2VkID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICghZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHsgdHIgfSA9IHN0YXRlO1xuICBmb3IgKFxuICAgIGxldCBpbmRleCA9IGJsb2NrUmFuZ2Uuc3RhcnRJbmRleCxcbiAgICAgIGNoaWxkID0gYmxvY2tSYW5nZS5wYXJlbnQuY2hpbGQoaW5kZXgpLFxuICAgICAgcG9zID0gYmxvY2tSYW5nZS5zdGFydDtcbiAgICBpbmRleCA8IGJsb2NrUmFuZ2UuZW5kSW5kZXg7XG4gICAgaW5kZXggKz0gMVxuICApIHtcbiAgICB0ci5zZXROb2RlTWFya3VwKHBvcywgdW5kZWZpbmVkLCB7XG4gICAgICBzdGF0dXM6IGhhc0NoZWNrZWQgPyBDaGVja2JveFN0YXR1cy5FTVBUWSA6IENoZWNrYm94U3RhdHVzLkRPTkUsXG4gICAgfSk7XG4gICAgcG9zICs9IGNoaWxkLm5vZGVTaXplO1xuICB9XG5cbiAgZGlzcGF0Y2godHIpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnR5cGUgbW9kYWxDb25maXJtSGFuZGxlciA9IChwYXJhbXM6IHsgdGV4dDogc3RyaW5nOyB1cmw6IHN0cmluZyB9KSA9PiB2b2lkO1xuXG5jbGFzcyBMaW5rTW9kYWwge1xuICBwcml2YXRlIGVsOiBFbGVtZW50O1xuICBwcml2YXRlIGZyYW1lRWw6IEVsZW1lbnQ7XG4gIHByaXZhdGUgdGV4dDogc3RyaW5nO1xuICBwcml2YXRlIHVybDogc3RyaW5nO1xuICBwcml2YXRlIG9uQ29uZmlybTogbW9kYWxDb25maXJtSGFuZGxlcjtcbiAgcHJpdmF0ZSBvbkNsZWFyPzogKCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBzaG93Q2xzID0gJ2FjdGl2ZSc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZWw6IEVsZW1lbnQsXG4gICAge1xuICAgICAgb25Db25maXJtLFxuICAgICAgb25DbGVhcixcbiAgICAgIHRleHQsXG4gICAgICB1cmwsXG4gICAgfToge1xuICAgICAgb25DbGVhcj86ICgpID0+IHZvaWQ7XG4gICAgICBvbkNvbmZpcm06IG1vZGFsQ29uZmlybUhhbmRsZXI7XG4gICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICB1cmw6IHN0cmluZztcbiAgICB9LFxuICApIHtcbiAgICB0aGlzLmVsID0gZWw7XG4gICAgdGhpcy50ZXh0SW5wdXQudmFsdWUgPSB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMudXJsSW5wdXQudmFsdWUgPSB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLm9uQ29uZmlybSA9IG9uQ29uZmlybTtcbiAgICB0aGlzLm9uQ2xlYXIgPSBvbkNsZWFyO1xuICAgIHRoaXMuZnJhbWVFbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJyNmcmFtZScpO1xuXG4gICAgaWYgKG9uQ2xlYXIpIHtcbiAgICAgIHRoaXMuY2xlYXJCdG4uY2xhc3NMaXN0LmFkZCh0aGlzLnNob3dDbHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNsZWFyQnRuLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5zaG93Q2xzKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsLmNsYXNzTGlzdC5hZGQodGhpcy5zaG93Q2xzKTtcbiAgICB0aGlzLmNvbmZpcm1CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNvbmZpcm0pO1xuICAgIHRoaXMuY2FuY2VsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDYW5jZWwpO1xuICAgIHRoaXMuY2xlYXJCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsZWFyKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVHbG9iYWxLZXlkb3duKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlR2xvYmFsQ2xpY2spO1xuICAgIHRoaXMudXJsSW5wdXQuZm9jdXMoKTtcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95ID0gKCkgPT4ge1xuICAgIHRoaXMuY29uZmlybUJ0bi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ29uZmlybSk7XG4gICAgdGhpcy5jYW5jZWxCdG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNhbmNlbCk7XG4gICAgdGhpcy5jbGVhckJ0bi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xlYXIpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUdsb2JhbEtleWRvd24pO1xuICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnNob3dDbHMpO1xuICB9O1xuXG4gIHByaXZhdGUgaGFuZGxlQ29uZmlybSA9ICgpID0+IHtcbiAgICB0aGlzLm9uQ29uZmlybSh7XG4gICAgICB0ZXh0OiB0aGlzLnRleHRJbnB1dC52YWx1ZSxcbiAgICAgIHVybDogdGhpcy51cmxJbnB1dC52YWx1ZSxcbiAgICB9KTtcblxuICAgIHRoaXMuZGVzdHJveSgpO1xuICB9O1xuXG4gIHByaXZhdGUgaGFuZGxlQ2xlYXIgPSAoKSA9PiB7XG4gICAgdGhpcy5vbkNsZWFyKCk7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH07XG5cbiAgcHJpdmF0ZSBoYW5kbGVDYW5jZWwgPSAoKSA9PiB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gIH07XG5cbiAgcHJpdmF0ZSBoYW5kbGVHbG9iYWxLZXlkb3duID0gKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICBjb25zdCBpc0VudGVyID0gZS53aGljaCA9PT0gMTM7XG4gICAgaWYgKFxuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gdGhpcy50ZXh0SW5wdXQgfHxcbiAgICAgIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0aGlzLnVybElucHV0ICYmIGlzRW50ZXIpXG4gICAgKSB7XG4gICAgICB0aGlzLmhhbmRsZUNvbmZpcm0oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNFc2MgPSBlLndoaWNoID09PSAyNztcbiAgICBpZiAoZS53aGljaCA9PT0gMjcpIHtcbiAgICAgIHRoaXMuaGFuZGxlQ2FuY2VsKCk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgaGFuZGxlR2xvYmFsQ2xpY2sgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgIGlmICh0aGlzLmZyYW1lRWwuY29udGFpbnMoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfVxuICB9O1xuXG4gIGdldCB0ZXh0SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWwucXVlcnlTZWxlY3RvcignaW5wdXQjdGV4dCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gIH1cblxuICBnZXQgdXJsSW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWwucXVlcnlTZWxlY3RvcignaW5wdXQjdXJsJykgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgfVxuXG4gIGdldCBjb25maXJtQnRuKCkge1xuICAgIHJldHVybiB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbiNjb25maXJtJyk7XG4gIH1cblxuICBnZXQgY2FuY2VsQnRuKCkge1xuICAgIHJldHVybiB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbiNjYW5jZWwnKTtcbiAgfVxuXG4gIGdldCBjbGVhckJ0bigpIHtcbiAgICByZXR1cm4gdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCdidXR0b24jY2xlYXInKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVG9vbGJhclBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIHByaXZhdGUgdmlldzogRWRpdG9yVmlldztcbiAgcHJpdmF0ZSBtb2RhbEVsOiBFbGVtZW50O1xuICBwcml2YXRlIHRvb2xiYXJFbDogRWxlbWVudDtcbiAgcHJpdmF0ZSBtb2RhbDogTGlua01vZGFsO1xuXG4gIHByaXZhdGUgc3dhcFRleHRCbG9jayA9IChub2RlVHlwZTogTm9kZVR5cGUpID0+IHtcbiAgICBsZXQgeyBkaXNwYXRjaCwgc3RhdGUgfSA9IHRoaXMudmlldztcbiAgICBsZXQgeyB0ciB9ID0gc3RhdGU7XG4gICAgaWYgKFxuICAgICAgbm9kZVR5cGUgIT09IHNjaGVtYS5ub2Rlcy51bm9yZGVyZWRfbGlzdCAmJlxuICAgICAgbm9kZVR5cGUgIT09IHNjaGVtYS5ub2Rlcy5vcmRlcmVkX2xpc3RcbiAgICApIHtcbiAgICAgIGxpZnRMaXN0SXRlbShzY2hlbWEubm9kZXMubGlzdF9pdGVtKShzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgICAoeyBkaXNwYXRjaCwgc3RhdGUgfSA9IHRoaXMudmlldyk7XG4gICAgKHsgdHIgfSA9IHN0YXRlKTtcbiAgICBjb25zdCB7XG4gICAgICBzZWxlY3Rpb246IHsgZnJvbSwgdG8gfSxcbiAgICB9ID0gc3RhdGU7XG4gICAgdHIuc2V0QmxvY2tUeXBlKGZyb20sIHRvLCBub2RlVHlwZSk7XG4gICAgZGlzcGF0Y2godHIpO1xuICAgIHRoaXMudmlldy5mb2N1cygpO1xuICB9O1xuXG4gIHByaXZhdGUgcHJvbW90ZUhlYWRpbmcgPSAoc3RhdGU6IEVkaXRvclN0YXRlLCBkaXNwYXRjaCkgPT4ge1xuICAgIGNvbnN0IHsgc2VsZWN0aW9uIH0gPSBzdGF0ZTtcbiAgICBpZiAoIXNlbGVjdGlvbi5lbXB0eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICAkZnJvbToge1xuICAgICAgICBwYXJlbnQ6IHsgdHlwZSB9LFxuICAgICAgfSxcbiAgICB9ID0gc2VsZWN0aW9uO1xuICAgIGxldCBuZXh0VHlwZTogTm9kZVR5cGU7XG4gICAgaWYgKHR5cGUgPT09IHNjaGVtYS5ub2Rlcy5oZWFkaW5nMikge1xuICAgICAgbmV4dFR5cGUgPSBzY2hlbWEubm9kZXMuaGVhZGluZzE7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBzY2hlbWEubm9kZXMuaGVhZGluZzMpIHtcbiAgICAgIG5leHRUeXBlID0gc2NoZW1hLm5vZGVzLmhlYWRpbmcyO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gc2NoZW1hLm5vZGVzLmhlYWRpbmcxKSB7XG4gICAgICBuZXh0VHlwZSA9IHNjaGVtYS5ub2Rlcy5wYXJhZ3JhcGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRUeXBlID0gc2NoZW1hLm5vZGVzLmhlYWRpbmczO1xuICAgIH1cbiAgICB0aGlzLnN3YXBUZXh0QmxvY2sobmV4dFR5cGUpO1xuICB9O1xuXG4gIHByaXZhdGUgdG9nZ2xlTGlzdCA9IChsaXN0VHlwZTogTm9kZVR5cGUsIGl0ZW1UeXBlOiBOb2RlVHlwZSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHN0YXRlOiB7XG4gICAgICAgIHNlbGVjdGlvbjogeyAkZnJvbSwgJHRvIH0sXG4gICAgICAgIHRyLFxuICAgICAgfSxcbiAgICB9ID0gdGhpcy52aWV3O1xuXG4gICAgY29uc3QgbGlzdEJsb2NrUmFuZ2UgPSAkZnJvbS5ibG9ja1JhbmdlKFxuICAgICAgJHRvLFxuICAgICAgKG5vZGUpID0+IG5vZGUudHlwZSA9PT0gbGlzdFR5cGUsXG4gICAgKTtcbiAgICBpZiAobGlzdEJsb2NrUmFuZ2UpIHtcbiAgICAgIGNvbnN0IHsgZGlzcGF0Y2gsIHN0YXRlIH0gPSB0aGlzLnZpZXc7XG4gICAgICAvLyBJZiB0aGUgc2VsZWN0aW9uIGlzIGVudGlyZWx5IHdpdGhpbiBhIGxpc3QgbGlmdCB0aGUgc2VsZWN0ZWQgaXRlbXMgb3V0XG4gICAgICBsaWZ0TGlzdEl0ZW0oaXRlbVR5cGUpKHN0YXRlLCBkaXNwYXRjaCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJsb2NrUmFuZ2UgPSAkZnJvbS5ibG9ja1JhbmdlKCR0byk7XG4gICAgICBmb3IgKFxuICAgICAgICBsZXQgaW5kZXggPSBibG9ja1JhbmdlLnN0YXJ0SW5kZXg7XG4gICAgICAgIGluZGV4IDwgYmxvY2tSYW5nZS5lbmRJbmRleDtcbiAgICAgICAgaW5kZXggKz0gMVxuICAgICAgKSB7XG4gICAgICAgIGlmIChibG9ja1JhbmdlLnBhcmVudC5jaGlsZChpbmRleCkudHlwZSA9PT0gbGlzdFR5cGUpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgc2VsZWN0aW9uIGlzIHBhcnRpYWxseSBpbnNpZGUgYSBsaXN0LCBkbyBub3RoaW5nXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBJZiB0aGUgc2VsZWN0aW9uIGlzIGVudGlyZWx5IG91dHNpZGUgYSBsaXN0LCBjb252ZXJ0IGV2ZXJ5dGhpbmcgdG8gYSBwYXJhZ3JhcGhcbiAgICAgIC8vIHNvIGl0IGNhbiBzdWJzZXF1ZW50bHkgYmVjb21lIGEgbGlzdFxuICAgICAgdGhpcy5zd2FwVGV4dEJsb2NrKHNjaGVtYS5ub2Rlcy5wYXJhZ3JhcGgpO1xuICAgICAgY29uc3QgeyBkaXNwYXRjaCwgc3RhdGUgfSA9IHRoaXMudmlldztcbiAgICAgIHdyYXBJbkxpc3QobGlzdFR5cGUpKHN0YXRlLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgdG9nZ2xlQ2hlY2tsaXN0SXRlbSA9ICgpID0+IHtcbiAgICBjb25zdCB7IGRpc3BhdGNoLCBzdGF0ZSB9ID0gdGhpcy52aWV3O1xuICAgIGNvbnN0IHsgZG9jLCB0ciB9ID0gc3RhdGU7XG4gICAgY29uc3QgeyAkZnJvbSwgJHRvIH0gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgY29uc3QgYmxvY2tSYW5nZSA9ICRmcm9tLmJsb2NrUmFuZ2UoJHRvKTtcblxuICAgIGZvciAoXG4gICAgICBsZXQgaW5kZXggPSBibG9ja1JhbmdlLnN0YXJ0SW5kZXg7XG4gICAgICBpbmRleCA8IGJsb2NrUmFuZ2UuZW5kSW5kZXg7XG4gICAgICBpbmRleCArPSAxXG4gICAgKSB7XG4gICAgICBpZiAoYmxvY2tSYW5nZS5wYXJlbnQuY2hpbGQoaW5kZXgpLnR5cGUgPT09IHNjaGVtYS5ub2Rlcy5jaGVja2xpc3RfaXRlbSkge1xuICAgICAgICB0aGlzLnN3YXBUZXh0QmxvY2soc2NoZW1hLm5vZGVzLnBhcmFncmFwaCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zd2FwVGV4dEJsb2NrKHNjaGVtYS5ub2Rlcy5jaGVja2xpc3RfaXRlbSk7XG4gIH07XG5cbiAgcHJpdmF0ZSBhY3RpdmF0ZUxpbmtNb2RhbDogQ29tbWFuZCA9IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcbiAgICBjb25zdCB7IGRvYywgc2VsZWN0aW9uIH0gPSBzdGF0ZTtcbiAgICBjb25zdCB7ICRmcm9tLCAkdG8gfSA9IHNlbGVjdGlvbjtcbiAgICBjb25zdCBsaW5rTWFya0F0U3RhcnQgPSAkZnJvbVxuICAgICAgLm1hcmtzKClcbiAgICAgIC5maW5kKFxuICAgICAgICAobWFyaykgPT5cbiAgICAgICAgICBtYXJrLnR5cGUgPT09IHNjaGVtYS5tYXJrcy5saW5rICYmICFtYXJrLmF0dHJzW0FVVE9fTElOS19BVFRSXSxcbiAgICAgICk7XG4gICAgY29uc3QgbGlua01hcmtBdEVuZCA9ICR0b1xuICAgICAgLm1hcmtzKClcbiAgICAgIC5maW5kKFxuICAgICAgICAobWFyaykgPT5cbiAgICAgICAgICBtYXJrLnR5cGUgPT09IHNjaGVtYS5tYXJrcy5saW5rICYmICFtYXJrLmF0dHJzW0FVVE9fTElOS19BVFRSXSxcbiAgICAgICk7XG4gICAgY29uc3Qgc2VsZWN0aW9uSXNJbnNpZGVMaW5rID0gbGlua01hcmtBdFN0YXJ0ICYmIGxpbmtNYXJrQXRFbmQ7XG5cbiAgICBpZiAoc2VsZWN0aW9uLmVtcHR5ICYmICFzZWxlY3Rpb25Jc0luc2lkZUxpbmspIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGxpbmtNYXJrQXRTdGFydCAhPT0gbGlua01hcmtBdEVuZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWRpc3BhdGNoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXJrID0gbGlua01hcmtBdFN0YXJ0O1xuICAgIGxldCBlbmQsIHN0YXJ0LCB0ZXh0LCB1cmw7XG4gICAgaWYgKG1hcmspIHtcbiAgICAgIGNvbnN0IHRleHROb2RlID0gJGZyb20ucGFyZW50Lm5vZGVBdChcbiAgICAgICAgJGZyb20ucGFyZW50T2Zmc2V0IC0gJGZyb20udGV4dE9mZnNldCxcbiAgICAgICk7XG4gICAgICBzdGFydCA9ICRmcm9tLnBvcyAtICRmcm9tLnRleHRPZmZzZXQ7XG4gICAgICBlbmQgPSBzdGFydCArIHRleHROb2RlLm5vZGVTaXplO1xuICAgICAgdGV4dCA9IHRleHROb2RlLnRleHQ7XG4gICAgICB1cmwgPSBtYXJrLmF0dHJzLmhyZWY7XG4gICAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSBuZXcgVGV4dFNlbGVjdGlvbihcbiAgICAgICAgZG9jLnJlc29sdmUoc3RhcnQpLFxuICAgICAgICBkb2MucmVzb2x2ZShlbmQpLFxuICAgICAgKTtcbiAgICAgIGRpc3BhdGNoKHN0YXRlLnRyLnNldFNlbGVjdGlvbihuZXdTZWxlY3Rpb24pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kID0gJHRvLnBvcztcbiAgICAgIHN0YXJ0ID0gJGZyb20ucG9zO1xuICAgICAgdGV4dCA9IHN0YXRlLmRvYy50ZXh0QmV0d2VlbigkZnJvbS5wb3MsICR0by5wb3MpO1xuICAgICAgdXJsID0gJyc7XG4gICAgfVxuXG4gICAgY29uc3Qgb25DbGVhciA9XG4gICAgICBtYXJrICYmXG4gICAgICAoKCkgPT5cbiAgICAgICAgdGhpcy52aWV3LmRpc3BhdGNoKFxuICAgICAgICAgIHRoaXMudmlldy5zdGF0ZS50ci5zdGVwKG5ldyBSZW1vdmVNYXJrU3RlcChzdGFydCwgZW5kLCBtYXJrKSksXG4gICAgICAgICkpO1xuXG4gICAgdGhpcy5tb2RhbCA9IG5ldyBMaW5rTW9kYWwodGhpcy5tb2RhbEVsLCB7XG4gICAgICBvbkNsZWFyLFxuICAgICAgb25Db25maXJtOiAoeyB0ZXh0LCB1cmwgfSkgPT4ge1xuICAgICAgICBjb25zdCBtYXJrID0gc2NoZW1hLm1hcmtzLmxpbmsuY3JlYXRlKHsgaHJlZjogdXJsIH0pO1xuICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IHNjaGVtYS50ZXh0KHRleHQsIFttYXJrXSk7XG4gICAgICAgIHRoaXMudmlldy5kaXNwYXRjaChcbiAgICAgICAgICB0aGlzLnZpZXcuc3RhdGUudHIucmVwbGFjZVNlbGVjdGlvbldpdGgodGV4dE5vZGUsIGZhbHNlKSxcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICB0ZXh0LFxuICAgICAgdXJsLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgcHJpdmF0ZSB0b2dnbGVNYXJrID0gKG1hcms6IE1hcmtUeXBlKSA9PiB7XG4gICAgdG9nZ2xlTWFyayhtYXJrKSh0aGlzLnZpZXcuc3RhdGUsIHRoaXMudmlldy5kaXNwYXRjaCk7XG4gICAgdGhpcy52aWV3LmZvY3VzKCk7XG4gIH07XG5cbiAgY29uc3RydWN0b3IodG9vbGJhckVsOiBFbGVtZW50LCBtb2RhbEVsOiBFbGVtZW50KSB7XG4gICAgc3VwZXIoe1xuICAgICAgdmlldzogKHZpZXdJbnN0YW5jZSkgPT4ge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3SW5zdGFuY2U7XG4gICAgICAgIHRoaXMubW9kYWxFbCA9IG1vZGFsRWw7XG4gICAgICAgIHRoaXMudG9vbGJhckVsID0gdG9vbGJhckVsO1xuXG4gICAgICAgIHRvb2xiYXJFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlVG9vbGJhckNsaWNrKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRlc3Ryb3k6ICgpID0+IHtcbiAgICAgICAgICAgIHRvb2xiYXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlVG9vbGJhckNsaWNrKTtcbiAgICAgICAgICAgIHRoaXMudW5oaWdobGlnaHRTZWxlY3RlZEF0dHJzKCk7XG4gICAgICAgICAgICB0aGlzLm1vZGFsPy5kZXN0cm95KCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB1cGRhdGU6ICh2aWV3LCBwcmV2aW91c1N0YXRlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVuaGlnaGxpZ2h0U2VsZWN0ZWRBdHRycygpO1xuICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRTZWxlY3RlZEF0dHJzKHZpZXcuc3RhdGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgcHJvcHM6IHtcbiAgICAgICAgaGFuZGxlS2V5RG93bjogKHZpZXcsIGUpID0+IHtcbiAgICAgICAgICBjb25zdCBpc1QgPSBlLndoaWNoID09PSA4NDtcbiAgICAgICAgICBjb25zdCBoYXNDdHJsID0gZS5jdHJsS2V5O1xuICAgICAgICAgIGlmIChpc1QgJiYgaGFzQ3RybCkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVDaGVja2xpc3RJdGVtKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBpczcgPSBlLndoaWNoID09PSA1NTtcbiAgICAgICAgICBjb25zdCBoYXNNb2QgPSBlLm1ldGFLZXkgfHwgZS5jdHJsS2V5O1xuICAgICAgICAgIGlmIChpczcgJiYgaGFzTW9kKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUxpc3QoXG4gICAgICAgICAgICAgIHNjaGVtYS5ub2Rlcy51bm9yZGVyZWRfbGlzdCxcbiAgICAgICAgICAgICAgc2NoZW1hLm5vZGVzLmxpc3RfaXRlbSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBpc1UgPSBlLndoaWNoID09PSA4NTtcbiAgICAgICAgICBpZiAoaXNVICYmIGhhc0N0cmwpIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlTGlzdChcbiAgICAgICAgICAgICAgc2NoZW1hLm5vZGVzLnVub3JkZXJlZF9saXN0LFxuICAgICAgICAgICAgICBzY2hlbWEubm9kZXMubGlzdF9pdGVtLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzTyA9IGUud2hpY2ggPT09IDc5O1xuICAgICAgICAgIGlmIChpc08gJiYgaGFzQ3RybCkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVMaXN0KHNjaGVtYS5ub2Rlcy5vcmRlcmVkX2xpc3QsIHNjaGVtYS5ub2Rlcy5saXN0X2l0ZW0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgaXNQbHVzID0gZS53aGljaCA9PT0gMTg3O1xuICAgICAgICAgIGlmIChpc1BsdXMgJiYgaGFzQ3RybCkge1xuICAgICAgICAgICAgdGhpcy5wcm9tb3RlSGVhZGluZyh0aGlzLnZpZXcuc3RhdGUsIHRoaXMudmlldy5kaXNwYXRjaCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBpc0ogPSBlLndoaWNoID09PSA3NDtcbiAgICAgICAgICBpZiAoaXNKICYmIGhhc0N0cmwpIHtcbiAgICAgICAgICAgIHRoaXMuc3dhcFRleHRCbG9jayhzY2hlbWEubm9kZXMucGFyYWdyYXBoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzU3BhY2UgPSBlLndoaWNoID09PSAzMjtcbiAgICAgICAgICBpZiAoaGFzQ3RybCAmJiBpc1NwYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9nZ2xlQ2hlY2tsaXN0SXRlbVN0YXRlKFxuICAgICAgICAgICAgICB0aGlzLnZpZXcuc3RhdGUsXG4gICAgICAgICAgICAgIHRoaXMudmlldy5kaXNwYXRjaCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgaXNaID0gZS53aGljaCA9PT0gOTA7XG4gICAgICAgICAgaWYgKGhhc01vZCAmJiBpc1opIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRvKHRoaXMudmlldy5zdGF0ZSwgdGhpcy52aWV3LmRpc3BhdGNoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBpc1kgPSBlLndoaWNoID09PSA4OTtcbiAgICAgICAgICBpZiAoaGFzTW9kICYmIGlzWSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlZG8odGhpcy52aWV3LnN0YXRlLCB0aGlzLnZpZXcuZGlzcGF0Y2gpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzSSA9IGUud2hpY2ggPT09IDczO1xuICAgICAgICAgIGlmIChoYXNNb2QgJiYgaXNJKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZU1hcmsoc2NoZW1hLm1hcmtzLmVtKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzQiA9IGUud2hpY2ggPT09IDY2O1xuICAgICAgICAgIGlmIChoYXNNb2QgJiYgaXNCKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZU1hcmsoc2NoZW1hLm1hcmtzLnN0cm9uZyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBpc1ByaW1lID0gZS53aGljaCA9PT0gMjIyO1xuICAgICAgICAgIGlmIChoYXNNb2QgJiYgaXNQcmltZSkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVNYXJrKHNjaGVtYS5tYXJrcy5jb2RlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGlzSyA9IGUud2hpY2ggPT09IDc1O1xuICAgICAgICAgIGlmIChoYXNNb2QgJiYgaXNLKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2YXRlTGlua01vZGFsKHRoaXMudmlldy5zdGF0ZSwgdGhpcy52aWV3LmRpc3BhdGNoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICB1bmhpZ2hsaWdodFNlbGVjdGVkQXR0cnMgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0ZWRCdG5zID0gdGhpcy50b29sYmFyRWwucXVlcnlTZWxlY3RvckFsbCgnLnNlbGVjdGVkJyk7XG4gICAgc2VsZWN0ZWRCdG5zLmZvckVhY2goKGJ0bikgPT4ge1xuICAgICAgYnRuLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgfSk7XG4gIH07XG5cbiAgaGlnaGxpZ2h0U2VsZWN0ZWRBdHRycyA9IChzdGF0ZTogRWRpdG9yU3RhdGUpID0+IHtcbiAgICBjb25zdCBzZWxlY3RlZEF0dHJzID0gdGhpcy5nZXRTZWxlY3RlZEZvcm1hdEF0dHJzKHN0YXRlKTtcbiAgICBpZiAoc2VsZWN0ZWRBdHRycykge1xuICAgICAgc2VsZWN0ZWRBdHRycy5mb3JFYWNoKChhdHRyKSA9PiB7XG4gICAgICAgIGNvbnN0IGJ0biA9IHRoaXMudG9vbGJhckVsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWZvcm1hdD0ke2F0dHJ9XWApO1xuICAgICAgICBpZiAoYnRuKSB7XG4gICAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBnZXRTZWxlY3RlZEZvcm1hdEFuZE1hcmtzID0gKHN0YXRlOiBFZGl0b3JTdGF0ZSkgPT4ge1xuICAgIGlmICghc3RhdGUuc2VsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICBjb25zdCB7ICRmcm9tLCAkdG8sIGNvbnRlbnQgfSA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICBjb25zdCBibG9ja1JhbmdlID0gJGZyb20uYmxvY2tSYW5nZShcbiAgICAgICR0byxcbiAgICAgIChub2RlKSA9PiBub2RlLnR5cGUgIT09IHNjaGVtYS5ub2Rlcy5saXN0X2l0ZW0sXG4gICAgKTtcblxuICAgIGxldCBzZWxlY3RlZCA9IG51bGw7XG4gICAgZm9yIChcbiAgICAgIGxldCBpbmRleCA9IGJsb2NrUmFuZ2Uuc3RhcnRJbmRleDtcbiAgICAgIGluZGV4IDwgYmxvY2tSYW5nZS5lbmRJbmRleDtcbiAgICAgIGluZGV4ICs9IDFcbiAgICApIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gYmxvY2tSYW5nZS5wYXJlbnQuY2hpbGQoaW5kZXgpO1xuICAgICAgY29uc3QgY3VycmVudFR5cGUgPVxuICAgICAgICBjaGlsZC50eXBlID09PSBzY2hlbWEubm9kZXMubGlzdF9pdGVtXG4gICAgICAgICAgPyBibG9ja1JhbmdlLnBhcmVudC50eXBlXG4gICAgICAgICAgOiBjaGlsZC50eXBlO1xuXG4gICAgICBpZiAoc2VsZWN0ZWQgPT09IG51bGwpIHtcbiAgICAgICAgc2VsZWN0ZWQgPSBjdXJyZW50VHlwZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZWN0ZWQgIT09IGN1cnJlbnRUeXBlKSB7XG4gICAgICAgIHNlbGVjdGVkID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKHNlbGVjdGVkKTtcblxuICAgIGNvbnN0IG1hcmtzID0gJGZyb20ubWFya3NBY3Jvc3MoJHRvKTtcbiAgICBpZiAobWFya3MpIHtcbiAgICAgIHJlc3VsdC5wdXNoKC4uLm1hcmtzLm1hcCgobWFyaykgPT4gbWFyay50eXBlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBnZXRTZWxlY3RlZEZvcm1hdEF0dHJzID0gKHN0YXRlOiBFZGl0b3JTdGF0ZSkgPT4ge1xuICAgIGNvbnN0IFtub2RlVHlwZSwgLi4ubWFya1R5cGVzXSA9IHRoaXMuZ2V0U2VsZWN0ZWRGb3JtYXRBbmRNYXJrcyhzdGF0ZSk7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICBsZXQgYWN0aXZlQnRuQXR0ciA9IG51bGw7XG4gICAgc3dpdGNoIChub2RlVHlwZSkge1xuICAgICAgY2FzZSBzY2hlbWEubm9kZXMuaGVhZGluZzE6XG4gICAgICBjYXNlIHNjaGVtYS5ub2Rlcy5oZWFkaW5nMjoge1xuICAgICAgICByZXN1bHQucHVzaCgnaGVhZGluZycpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2Ugc2NoZW1hLm5vZGVzLnBhcmFncmFwaDoge1xuICAgICAgICByZXN1bHQucHVzaCgncGFyYWdyYXBoJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBzY2hlbWEubm9kZXMudW5vcmRlcmVkX2xpc3Q6IHtcbiAgICAgICAgcmVzdWx0LnB1c2goJ3Vub3JkZXJlZF9saXN0Jyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBzY2hlbWEubm9kZXMub3JkZXJlZF9saXN0OiB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCdvcmRlcmVkX2xpc3QnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIHNjaGVtYS5ub2Rlcy5jaGVja2xpc3RfaXRlbToge1xuICAgICAgICByZXN1bHQucHVzaCgnY2hlY2tsaXN0X2l0ZW0nKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXJrVHlwZXMuZm9yRWFjaCgobWFya1R5cGUpID0+IHtcbiAgICAgIHN3aXRjaCAobWFya1R5cGUpIHtcbiAgICAgICAgY2FzZSBzY2hlbWEubWFya3MubGluazoge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKCdsaW5rJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBzY2hlbWEubWFya3MuaW5saW5lX2xpbms6IHtcbiAgICAgICAgICByZXN1bHQucHVzaCgnbGluaycpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2Ugc2NoZW1hLm1hcmtzLmVtOiB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goJ2VtJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBzY2hlbWEubWFya3Muc3Ryb25nOiB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goJ3N0cm9uZycpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2Ugc2NoZW1hLm1hcmtzLmNvZGU6IHtcbiAgICAgICAgICByZXN1bHQucHVzaCgnY29kZScpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGhhbmRsZVRvb2xiYXJDbGljayA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29uc3QgYnV0dG9uID0gdGFyZ2V0LmNsb3Nlc3QoYFske0FQUExZX0ZPUk1BVF9BVFRSfV1gKTtcbiAgICBpZiAoYnV0dG9uKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5hcHBseUZvcm1hdChidXR0b24uZ2V0QXR0cmlidXRlKEFQUExZX0ZPUk1BVF9BVFRSKSk7XG4gICAgfVxuICB9O1xuXG4gIGFwcGx5Rm9ybWF0ID0gKGRhdGFGb3JtYXRTdHI6IHN0cmluZykgPT4ge1xuICAgIHN3aXRjaCAoZGF0YUZvcm1hdFN0cikge1xuICAgICAgY2FzZSAndW5kbyc6IHtcbiAgICAgICAgdW5kbyh0aGlzLnZpZXcuc3RhdGUsIHRoaXMudmlldy5kaXNwYXRjaCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAncmVkbyc6IHtcbiAgICAgICAgcmVkbyh0aGlzLnZpZXcuc3RhdGUsIHRoaXMudmlldy5kaXNwYXRjaCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAncGFyYWdyYXBoJzoge1xuICAgICAgICB0aGlzLnN3YXBUZXh0QmxvY2soc2NoZW1hLm5vZGVzLnBhcmFncmFwaCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnY29kZV9ibG9jayc6IHtcbiAgICAgICAgdGhpcy5zd2FwVGV4dEJsb2NrKHNjaGVtYS5ub2Rlcy5jb2RlX2Jsb2NrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdoZWFkaW5nJzoge1xuICAgICAgICB0aGlzLnByb21vdGVIZWFkaW5nKHRoaXMudmlldy5zdGF0ZSwgdGhpcy52aWV3LmRpc3BhdGNoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICd1bm9yZGVyZWRfbGlzdCc6IHtcbiAgICAgICAgdGhpcy50b2dnbGVMaXN0KHNjaGVtYS5ub2Rlcy51bm9yZGVyZWRfbGlzdCwgc2NoZW1hLm5vZGVzLmxpc3RfaXRlbSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnb3JkZXJlZF9saXN0Jzoge1xuICAgICAgICB0aGlzLnRvZ2dsZUxpc3Qoc2NoZW1hLm5vZGVzLm9yZGVyZWRfbGlzdCwgc2NoZW1hLm5vZGVzLmxpc3RfaXRlbSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnY2hlY2tsaXN0X2l0ZW0nOiB7XG4gICAgICAgIHRoaXMudG9nZ2xlQ2hlY2tsaXN0SXRlbSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3N0cm9uZyc6XG4gICAgICBjYXNlICdlbSc6XG4gICAgICBjYXNlICdjb2RlJzoge1xuICAgICAgICB0aGlzLnRvZ2dsZU1hcmsoc2NoZW1hLm1hcmtzW2RhdGFGb3JtYXRTdHJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdsaW5rJzoge1xuICAgICAgICB0aGlzLmFjdGl2YXRlTGlua01vZGFsKHRoaXMudmlldy5zdGF0ZSwgdGhpcy52aWV3LmRpc3BhdGNoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBSZXNvbHZlZFBvcyB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tICdwcm9zZW1pcnJvci12aWV3JztcbmltcG9ydCB7XG4gIFBsdWdpbixcbiAgRWRpdG9yU3RhdGUsXG4gIFNlbGVjdGlvbixcbiAgVGV4dFNlbGVjdGlvbixcbiAgVHJhbnNhY3Rpb24sXG59IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IEFVVE9fTElOS19BVFRSLCBzY2hlbWEgfSBmcm9tICcuL3NjaGVtYSc7XG5cbmNvbnN0IFNIT1dfQ0xTID0gJ3Nob3cnO1xuXG5jb25zdCBIVFRQX0xJTksgPSBuZXcgUmVnRXhwKCdeaHR0cHM/Oi8vJyk7XG5cbmNvbnN0IE1BSUxUT19MSU5LID0gbmV3IFJlZ0V4cCgnXm1haWx0bzonKTtcblxuZXhwb3J0IGNsYXNzIFRvb2x0aXBQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICBwcml2YXRlIHRvb2x0aXBFbDogSFRNTERpdkVsZW1lbnQ7XG4gIHByaXZhdGUgdmlldzogRWRpdG9yVmlldztcblxuICBzdGF0aWMgbm9kZVRvQW5jaG9ySHJlZih1cmw6IHN0cmluZykge1xuICAgIGlmIChIVFRQX0xJTksudGVzdCh1cmwpIHx8IE1BSUxUT19MSU5LLnRlc3QodXJsKSkge1xuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gICAgcmV0dXJuIGBodHRwOi8vJHt1cmx9YDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGVsOiBIVE1MRGl2RWxlbWVudCkge1xuICAgIHN1cGVyKHtcbiAgICAgIHZpZXc6ICh2aWV3SW5zdGFuY2UpID0+IHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlld0luc3RhbmNlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRlc3Ryb3k6ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdXBkYXRlOiAodmlldywgcHJldmlvdXNTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGVja1NlbGVjdGlvbigpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy50b29sdGlwRWwgPSBlbDtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tTZWxlY3Rpb24gPSAoKSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0aW9uID0gdGhpcy52aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICBpZiAoIShzZWxlY3Rpb24gaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uKSkgcmV0dXJuO1xuICAgIGNvbnN0IHsgJGN1cnNvciB9ID0gc2VsZWN0aW9uO1xuXG4gICAgY29uc3Qgd2l0aGluTGluayA9IEJvb2xlYW4oXG4gICAgICAkY3Vyc29yICYmXG4gICAgICAgICRjdXJzb3Iubm9kZUJlZm9yZSAmJlxuICAgICAgICAkY3Vyc29yLm5vZGVBZnRlciAmJlxuICAgICAgICAkY3Vyc29yLm5vZGVCZWZvcmUubWFya3Muc29tZShcbiAgICAgICAgICAobWFyaykgPT4gbWFyay50eXBlID09PSBzY2hlbWEubWFya3MubGluayxcbiAgICAgICAgKSAmJlxuICAgICAgICAkY3Vyc29yLm5vZGVBZnRlci5tYXJrcy5zb21lKChtYXJrKSA9PiBtYXJrLnR5cGUgPT09IHNjaGVtYS5tYXJrcy5saW5rKSxcbiAgICApO1xuXG4gICAgaWYgKHdpdGhpbkxpbmsgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtYXJrID0gJGN1cnNvci5ub2RlQmVmb3JlLm1hcmtzLmZpbmQoXG4gICAgICAobWFyaykgPT4gbWFyay50eXBlID09PSBzY2hlbWEubWFya3MubGluayxcbiAgICApO1xuXG4gICAgdGhpcy5zaG93KCRjdXJzb3IsIG1hcmsuYXR0cnMuaHJlZiwgbWFyay5hdHRyc1tBVVRPX0xJTktfQVRUUl0pO1xuICB9O1xuXG4gIHByaXZhdGUgaGlkZSA9ICgpID0+IHtcbiAgICB0aGlzLnRvb2x0aXBFbC5jbGFzc0xpc3QucmVtb3ZlKFNIT1dfQ0xTKTtcbiAgfTtcblxuICBwcml2YXRlIHNob3cgPSAoJHBvczogUmVzb2x2ZWRQb3MsIHVybDogc3RyaW5nLCBpc0F1dG9MaW5rOiBib29sZWFuKSA9PiB7XG4gICAgdGhpcy5saW5rVGV4dEVsLmlubmVyVGV4dCA9IHVybDtcbiAgICB0aGlzLmFuY2hvckVsLmhyZWYgPSBUb29sdGlwUGx1Z2luLm5vZGVUb0FuY2hvckhyZWYodXJsKTtcbiAgICB0aGlzLnRvb2x0aXBFbC5jbGFzc0xpc3QudG9nZ2xlKCd5ZXMtYXV0by1saW5rJywgaXNBdXRvTGluayk7XG4gICAgdGhpcy50b29sdGlwRWwuY2xhc3NMaXN0LmFkZChTSE9XX0NMUyk7XG5cbiAgICBjb25zdCB7IGxlZnQsIHRvcCB9ID0gdGhpcy52aWV3LmNvb3Jkc0F0UG9zKCRwb3MucG9zKTtcbiAgICBjb25zdCBhY3R1YWxXaWR0aCA9IHRoaXMudG9vbHRpcEVsLm9mZnNldFdpZHRoO1xuICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgIC8vIHRvb2x0aXAgbWF4LXdpZHRoIGlzIDEwMCUgLSAxMCwgZm9yIDVweCBvZiBzcGFjZSBmcm9tIGVhY2ggd2luZG93IGVkZ2VcbiAgICBpZiAobGVmdCArIGFjdHVhbFdpZHRoID4gYXZhaWxhYmxlV2lkdGgpIHtcbiAgICAgIHRoaXMudG9vbHRpcEVsLnN0eWxlLmxlZnQgPSBgJHtNYXRoLm1heCg1LCBsZWZ0IC0gYWN0dWFsV2lkdGgpfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50b29sdGlwRWwuc3R5bGUubGVmdCA9IGAke01hdGgubWF4KDUsIGxlZnQpfXB4YDtcbiAgICB9XG4gICAgY29uc3Qgc2Nyb2xsZWQgPSAodGhpcy52aWV3LnJvb3QgYXMgRG9jdW1lbnQpLmJvZHk7XG4gICAgLy8gUHVsbCB0b3AgdXAgYnkgcHJlc3VtZWQgaGVpZ2h0IG9mIHRvb2x0aXAgcGx1cyBzb21lIG1hcmdpblxuICAgIHRoaXMudG9vbHRpcEVsLnN0eWxlLnRvcCA9IGAke3RvcCAtIDM2ICsgc2Nyb2xsZWQuc2Nyb2xsVG9wfXB4YDtcbiAgfTtcblxuICBnZXQgbGlua1RleHRFbCgpOiBIVE1MU3BhbkVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLnRvb2x0aXBFbC5xdWVyeVNlbGVjdG9yKCdkaXYudGV4dCcpO1xuICB9XG5cbiAgZ2V0IGFuY2hvckVsKCk6IEhUTUxBbmNob3JFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy50b29sdGlwRWwucXVlcnlTZWxlY3RvcignYS5saW5rLWFuY2hvcicpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQbHVnaW4sIFNlbGVjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tICdwcm9zZW1pcnJvci12aWV3JztcbmltcG9ydCB7IHNjaGVtYSB9IGZyb20gJy4vc2NoZW1hJztcblxuZXhwb3J0IGNsYXNzIEVkaXRvckV4dGVuZGVyUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgcHJpdmF0ZSB2aWV3OiBFZGl0b3JWaWV3O1xuICBwcml2YXRlIGVsOiBIVE1MRGl2RWxlbWVudDtcblxuICBjb25zdHJ1Y3RvcihleHRlbmRlckVsOiBIVE1MRGl2RWxlbWVudCkge1xuICAgIHN1cGVyKHtcbiAgICAgIHZpZXc6ICh2aWV3SW5zdGFuY2UpID0+IHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlld0luc3RhbmNlO1xuICAgICAgICB0aGlzLmVsID0gZXh0ZW5kZXJFbDtcblxuICAgICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkZXN0cm95OiAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICBjb25zdCB7IHN0YXRlIH0gPSB0aGlzLnZpZXc7XG4gICAgY29uc3QgeyBkb2MsIHRyIH0gPSBzdGF0ZTtcbiAgICBjb25zdCBsYXN0UG9zID0gZG9jLm5vZGVTaXplIC0gMjtcbiAgICBjb25zdCBsYXN0Tm9kZVR5cGUgPSBzdGF0ZS5kb2MubGFzdENoaWxkLnR5cGU7XG4gICAgaWYgKGxhc3ROb2RlVHlwZSA9PT0gc2NoZW1hLm5vZGVzLmNvZGVfYmxvY2sgfHwgbGFzdE5vZGVUeXBlLmlzTGVhZikge1xuICAgICAgdHIuaW5zZXJ0KGxhc3RQb3MsIHNjaGVtYS5ub2Rlcy5wYXJhZ3JhcGguY3JlYXRlQW5kRmlsbCgpKTtcbiAgICB9XG4gICAgdHIuc2V0U2VsZWN0aW9uKFNlbGVjdGlvbi5hdEVuZCh0ci5kb2MpKTtcbiAgICB0aGlzLnZpZXcuZGlzcGF0Y2godHIpO1xuICAgIHRoaXMudmlldy5mb2N1cygpO1xuICB9O1xufVxuIiwiY29uc3QgcmFuZG9tVVVJRCA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEICYmIGNyeXB0by5yYW5kb21VVUlELmJpbmQoY3J5cHRvKTtcbmV4cG9ydCBkZWZhdWx0IHsgcmFuZG9tVVVJRCB9O1xuIiwibGV0IGdldFJhbmRvbVZhbHVlcztcbmNvbnN0IHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY3J5cHRvID09PSAndW5kZWZpbmVkJyB8fCAhY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGdldFJhbmRvbVZhbHVlcyA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn1cbiIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbmNvbnN0IGJ5dGVUb0hleCA9IFtdO1xuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zbGljZSgxKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdW5zYWZlU3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAgIHJldHVybiAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICtcbiAgICAgICAgJy0nICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArXG4gICAgICAgICctJyArXG4gICAgICAgIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICtcbiAgICAgICAgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gK1xuICAgICAgICAnLScgK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gK1xuICAgICAgICBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyLCBvZmZzZXQgPSAwKSB7XG4gICAgY29uc3QgdXVpZCA9IHVuc2FmZVN0cmluZ2lmeShhcnIsIG9mZnNldCk7XG4gICAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICByZXR1cm4gdXVpZDtcbn1cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTtcbiIsImltcG9ydCBuYXRpdmUgZnJvbSAnLi9uYXRpdmUuanMnO1xuaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgeyB1bnNhZmVTdHJpbmdpZnkgfSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICAgIGlmIChuYXRpdmUucmFuZG9tVVVJRCAmJiAhYnVmICYmICFvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmUucmFuZG9tVVVJRCgpO1xuICAgIH1cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCBybmRzID0gb3B0aW9ucy5yYW5kb20gPz8gb3B0aW9ucy5ybmc/LigpID8/IHJuZygpO1xuICAgIGlmIChybmRzLmxlbmd0aCA8IDE2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmFuZG9tIGJ5dGVzIGxlbmd0aCBtdXN0IGJlID49IDE2Jyk7XG4gICAgfVxuICAgIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgICBybmRzWzhdID0gKHJuZHNbOF0gJiAweDNmKSB8IDB4ODA7XG4gICAgaWYgKGJ1Zikge1xuICAgICAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICsgMTYgPiBidWYubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVVVJRCBieXRlIHJhbmdlICR7b2Zmc2V0fToke29mZnNldCArIDE1fSBpcyBvdXQgb2YgYnVmZmVyIGJvdW5kc2ApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH1cbiAgICByZXR1cm4gdW5zYWZlU3RyaW5naWZ5KHJuZHMpO1xufVxuZXhwb3J0IGRlZmF1bHQgdjQ7XG4iLCJpbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IERPTVBhcnNlciB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCBDb21wb25lbnRNYW5hZ2VyIGZyb20gJ0BzdGFuZGFyZG5vdGVzL2NvbXBvbmVudC1yZWxheSc7XG5pbXBvcnQgeyBtYXJrZG93blBhcnNlciB9IGZyb20gJy4vbWFya2Rvd24nO1xuaW1wb3J0IHsgc2NoZW1hIH0gZnJvbSAnLi9zY2hlbWEnO1xuXG5jb25zdCBTTl9JVEVNX1NBVkVfS0VZID0gJ2NvbS5keWxhbm9uZWxzb24uc24tZWRpdG9yJztcblxuZnVuY3Rpb24gZ2V0TmFtZXNwYWNlZENvbnRlbnQoaXRlbTogSXRlbSkge1xuICBjb25zdCByZXN1bHQgPSBpdGVtICYmIGl0ZW0uY29udGVudCAmJiBpdGVtLmNvbnRlbnRbU05fSVRFTV9TQVZFX0tFWV07XG4gIHJldHVybiByZXN1bHQgfHwgbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VXVpZChpdGVtOiBJdGVtKSB7XG4gIGlmIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0udXVpZDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dChpdGVtOiBJdGVtKSB7XG4gIHJldHVybiBpdGVtICYmIGl0ZW0uY29udGVudCAmJiBpdGVtLmNvbnRlbnQudGV4dCA/IGl0ZW0uY29udGVudC50ZXh0IDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0RG9jKGl0ZW06IEl0ZW0pIHtcbiAgY29uc3QgY29udGVudCA9IGdldE5hbWVzcGFjZWRDb250ZW50KGl0ZW0pO1xuICBpZiAoY29udGVudCAmJiBjb250ZW50LmRvYykge1xuICAgIHJldHVybiBjb250ZW50LmRvYztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0TGFzdFNhdmVkQnkoaXRlbTogSXRlbSkge1xuICBjb25zdCBjb250ZW50ID0gZ2V0TmFtZXNwYWNlZENvbnRlbnQoaXRlbSk7XG4gIGlmIChjb250ZW50ICYmIGNvbnRlbnQubGFzdFNhdmVkQnkpIHtcbiAgICByZXR1cm4gY29udGVudC5sYXN0U2F2ZWRCeTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY2xhc3MgQ2xpZW50IHtcbiAgc3RhdGljIFNOX0lURU1fU0FWRV9LRVkgPSAnY29tLmR5bGFub25lbHNvbi5zbi1lZGl0b3InO1xuXG4gIHByaXZhdGUgc3RhdGljIGl0ZW1TZWxlY3RvcnMgPSB7fTtcblxuICBwcml2YXRlIF9pdGVtOiBJdGVtID0gbnVsbDtcblxuICBwcml2YXRlIF9yZWFkeTogUHJvbWlzZTx2b2lkPjtcblxuICBwcml2YXRlIF9pZDogc3RyaW5nO1xuXG4gIHByaXZhdGUgX2xpc3RlbmVyczogKCh7fSkgPT4gdm9pZClbXTtcblxuICBwcml2YXRlIGNvbXBvbmVudE1hbmFnZXI6IENvbXBvbmVudE1hbmFnZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5faWQgPSB1dWlkdjQoKTtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTtcblxuICAgIGxldCByZXNvbHZlQ2xpZW50UmVhZHk7XG4gICAgdGhpcy5fcmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgcmVzb2x2ZUNsaWVudFJlYWR5ID0gcmVzb2x2ZTtcbiAgICB9KTtcblxuICAgIHRoaXMuY29tcG9uZW50TWFuYWdlciA9IG5ldyBDb21wb25lbnRNYW5hZ2VyKHtcbiAgICAgIHRhcmdldFdpbmRvdzogd2luZG93LFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICBkZWJ1ZzogdHJ1ZSxcbiAgICAgICAgYWNjZXB0c1RoZW1lczogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBvblJlYWR5OiAoKSA9PiB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50TWFuYWdlci5zdHJlYW1Db250ZXh0SXRlbSgoaXRlbTogSXRlbSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ3N0cmVhbUNvbnRleHRJdGVtIHVwZGF0ZTonLCBpdGVtKTtcblxuICAgICAgICAgIGNvbnN0IGNhbGxMaXN0ZW5lcnMgPSB0aGlzLnNob3VsZENhbGxMaXN0ZW5lcnMoaXRlbSwgdGhpcy5faXRlbSk7XG5cbiAgICAgICAgICB0aGlzLl9pdGVtID0gaXRlbTtcblxuICAgICAgICAgIGlmIChjYWxsTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcbiAgICAgICAgICAgICAgbGlzdGVuZXIoaXRlbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXNvbHZlQ2xpZW50UmVhZHkoKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IGxhdGVzdERvYygpIHtcbiAgICByZXR1cm4gZ2V0RG9jKHRoaXMuX2l0ZW0pO1xuICB9XG5cbiAgZ2V0IGxhdGVzdFRleHQoKSB7XG4gICAgcmV0dXJuIGdldFRleHQodGhpcy5faXRlbSk7XG4gIH1cblxuICBvblVwZGF0ZShjYWxsYmFjazogKHt9KSA9PiB2b2lkKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnMuZmlsdGVyKFxuICAgICAgICAobGlzdGVuZXIpID0+IGxpc3RlbmVyICE9PSBjYWxsYmFjayxcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuXG4gIHJlYWR5KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkeTtcbiAgfVxuXG4gIHNhdmVOb3RlKGpzb25Eb2M6IHt9LCBtZERvYzogc3RyaW5nLCB0ZXh0UHJldmlldzogc3RyaW5nKSB7XG4gICAgY29uc3QgdG9TYXZlID0ge1xuICAgICAgLi4udGhpcy5faXRlbSxcbiAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgLi4udGhpcy5faXRlbS5jb250ZW50LFxuICAgICAgICBbU05fSVRFTV9TQVZFX0tFWV06IHtcbiAgICAgICAgICBkb2M6IGpzb25Eb2MsXG4gICAgICAgICAgbGFzdFNhdmVkQnk6IHRoaXMuX2lkLFxuICAgICAgICB9LFxuICAgICAgICB0ZXh0OiBtZERvYyxcbiAgICAgICAgcHJldmlld19wbGFpbjogdGV4dFByZXZpZXcsXG4gICAgICB9LFxuICAgIH07XG4gICAgdGhpcy5jb21wb25lbnRNYW5hZ2VyLnNhdmVJdGVtV2l0aFByZXNhdmUoXG4gICAgICB0b1NhdmUsXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFByZXNhdmUgY2FsbGJhY2tcbiAgICAgIH0sXG4gICAgICAoKSA9PiB7XG4gICAgICAgIC8vIFNhdmUgY29tcGxldGUgY2FsbGJhY2tcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIHNob3VsZENhbGxMaXN0ZW5lcnMgPSAobmV4dEl0ZW0sIHByZXZpb3VzSXRlbSkgPT4ge1xuICAgIGlmIChuZXh0SXRlbS5pc01ldGFkYXRhVXBkYXRlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICBnZXRVdWlkKG5leHRJdGVtKSAhPT0gZ2V0VXVpZChwcmV2aW91c0l0ZW0pIHx8XG4gICAgICBnZXRMYXN0U2F2ZWRCeShuZXh0SXRlbSkgIT09IHRoaXMuX2lkXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IGNsaWVudCA9IG5ldyBDbGllbnQoKTtcbiIsImltcG9ydCB7IENoZWNrYm94U3RhdHVzLCBzY2hlbWEgfSBmcm9tICcuL3NjaGVtYSc7XG5pbXBvcnQgeyBFZGl0b3JQcm9wcyB9IGZyb20gJ3Byb3NlbWlycm9yLXZpZXcnO1xuaW1wb3J0IHsgQ2hlY2tib3hPdXRsaW5lLCBDaGVja2JveCB9IGZyb20gJy4vYXNzZXRzJztcblxuY29uc3QgQ0hFQ0tCT1hfQ0hFQ0tFRF9DTEFTU05BTUUgPSAnaXMtY2hlY2tlZCc7XG5jb25zdCBDTElDS19UQVJHRVRfQ0xBU1NOQU1FID0gJ2NsaWNrLXRhcmdldCc7XG5cbmV4cG9ydCBjb25zdCBub2RlVmlld3M6IEVkaXRvclByb3BzPHR5cGVvZiBzY2hlbWE+Wydub2RlVmlld3MnXSA9IHtcbiAgY2hlY2tsaXN0X2l0ZW0obm9kZSwgdmlldywgZ2V0UG9zKSB7XG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoJ2NoZWNrbGlzdC1pdGVtJyk7XG5cbiAgICBjb25zdCBpbnB1dERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGlucHV0RGl2LmNsYXNzTGlzdC5hZGQoJ2NoZWNrYm94Jyk7XG4gICAgaWYgKG5vZGUuYXR0cnMuc3RhdHVzID09PSBDaGVja2JveFN0YXR1cy5ET05FKSB7XG4gICAgICBpbnB1dERpdi5jbGFzc0xpc3QuYWRkKENIRUNLQk9YX0NIRUNLRURfQ0xBU1NOQU1FKTtcbiAgICAgIGlucHV0RGl2LmlubmVySFRNTCA9IENoZWNrYm94O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dERpdi5pbm5lckhUTUwgPSBDaGVja2JveE91dGxpbmU7XG4gICAgfVxuXG4gICAgY29uc3QgY2xpY2tUYXJnZXREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjbGlja1RhcmdldERpdi5jbGFzc0xpc3QuYWRkKENMSUNLX1RBUkdFVF9DTEFTU05BTUUpO1xuICAgIGNsaWNrVGFyZ2V0RGl2LmNvbnRlbnRFZGl0YWJsZSA9ICdmYWxzZSc7XG4gICAgY2xpY2tUYXJnZXREaXYudGFiSW5kZXggPSAwO1xuXG4gICAgY29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblxuICAgIGNsaWNrVGFyZ2V0RGl2LmFwcGVuZENoaWxkKGlucHV0RGl2KTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoY2xpY2tUYXJnZXREaXYpO1xuICAgIGRpdi5hcHBlbmRDaGlsZChwKTtcblxuICAgIGNvbnN0IGZvY3VzSGFuZGxlciA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgY29uc3QgeyByZWxhdGVkVGFyZ2V0LCB0YXJnZXQgfSA9IGV2ZW50O1xuICAgICAgaWYgKGNsaWNrVGFyZ2V0RGl2LmNvbnRhaW5zKHJlbGF0ZWRUYXJnZXQgYXMgTm9kZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIElucHV0IGlzIHRha2luZyBmb2N1c1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZpZXdIYXNGb2N1cyA9IHRhcmdldCA9PT0gdmlldy5kb207XG4gICAgICBpZiAodmlld0hhc0ZvY3VzKSB7XG4gICAgICAgIC8vIFRoZSB2aWV3IHdhcyBmb2N1c2VkIGJlZm9yZSB0aGUgaW5wdXRcbiAgICAgICAgdmlldy5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBjbGlja0hhbmRsZXIgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIGlmIChjbGlja1RhcmdldERpdi5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNoZWNrZWQgPSBpbnB1dERpdi5jbGFzc0xpc3QuY29udGFpbnMoQ0hFQ0tCT1hfQ0hFQ0tFRF9DTEFTU05BTUUpO1xuICAgICAgY29uc3QgeyB0ciB9ID0gdmlldy5zdGF0ZTtcbiAgICAgIGNvbnN0IHBvcyA9IChnZXRQb3MgYXMgKCkgPT4gbnVtYmVyKSgpO1xuICAgICAgdHIuc2V0Tm9kZU1hcmt1cChwb3MsIHVuZGVmaW5lZCwge1xuICAgICAgICBzdGF0dXM6IGNoZWNrZWQgPyBDaGVja2JveFN0YXR1cy5FTVBUWSA6IENoZWNrYm94U3RhdHVzLkRPTkUsXG4gICAgICB9KTtcbiAgICAgIHZpZXcuZGlzcGF0Y2godHIpO1xuICAgIH07XG5cbiAgICB2aWV3LmRvbS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZm9jdXNIYW5kbGVyKTtcbiAgICB2aWV3LmRvbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsaWNrSGFuZGxlcik7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZG9tOiBkaXYsXG4gICAgICBjb250ZW50RE9NOiBwLFxuICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgdmlldy5kb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIGZvY3VzSGFuZGxlcik7XG4gICAgICAgIHZpZXcuZG9tLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xpY2tIYW5kbGVyKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSxcbn07XG4iLCJleHBvcnQgdmFyIGJhc2UgPSB7XG4gIDg6IFwiQmFja3NwYWNlXCIsXG4gIDk6IFwiVGFiXCIsXG4gIDEwOiBcIkVudGVyXCIsXG4gIDEyOiBcIk51bUxvY2tcIixcbiAgMTM6IFwiRW50ZXJcIixcbiAgMTY6IFwiU2hpZnRcIixcbiAgMTc6IFwiQ29udHJvbFwiLFxuICAxODogXCJBbHRcIixcbiAgMjA6IFwiQ2Fwc0xvY2tcIixcbiAgMjc6IFwiRXNjYXBlXCIsXG4gIDMyOiBcIiBcIixcbiAgMzM6IFwiUGFnZVVwXCIsXG4gIDM0OiBcIlBhZ2VEb3duXCIsXG4gIDM1OiBcIkVuZFwiLFxuICAzNjogXCJIb21lXCIsXG4gIDM3OiBcIkFycm93TGVmdFwiLFxuICAzODogXCJBcnJvd1VwXCIsXG4gIDM5OiBcIkFycm93UmlnaHRcIixcbiAgNDA6IFwiQXJyb3dEb3duXCIsXG4gIDQ0OiBcIlByaW50U2NyZWVuXCIsXG4gIDQ1OiBcIkluc2VydFwiLFxuICA0NjogXCJEZWxldGVcIixcbiAgNTk6IFwiO1wiLFxuICA2MTogXCI9XCIsXG4gIDkxOiBcIk1ldGFcIixcbiAgOTI6IFwiTWV0YVwiLFxuICAxMDY6IFwiKlwiLFxuICAxMDc6IFwiK1wiLFxuICAxMDg6IFwiLFwiLFxuICAxMDk6IFwiLVwiLFxuICAxMTA6IFwiLlwiLFxuICAxMTE6IFwiL1wiLFxuICAxNDQ6IFwiTnVtTG9ja1wiLFxuICAxNDU6IFwiU2Nyb2xsTG9ja1wiLFxuICAxNjA6IFwiU2hpZnRcIixcbiAgMTYxOiBcIlNoaWZ0XCIsXG4gIDE2MjogXCJDb250cm9sXCIsXG4gIDE2MzogXCJDb250cm9sXCIsXG4gIDE2NDogXCJBbHRcIixcbiAgMTY1OiBcIkFsdFwiLFxuICAxNzM6IFwiLVwiLFxuICAxODY6IFwiO1wiLFxuICAxODc6IFwiPVwiLFxuICAxODg6IFwiLFwiLFxuICAxODk6IFwiLVwiLFxuICAxOTA6IFwiLlwiLFxuICAxOTE6IFwiL1wiLFxuICAxOTI6IFwiYFwiLFxuICAyMTk6IFwiW1wiLFxuICAyMjA6IFwiXFxcXFwiLFxuICAyMjE6IFwiXVwiLFxuICAyMjI6IFwiJ1wiXG59XG5cbmV4cG9ydCB2YXIgc2hpZnQgPSB7XG4gIDQ4OiBcIilcIixcbiAgNDk6IFwiIVwiLFxuICA1MDogXCJAXCIsXG4gIDUxOiBcIiNcIixcbiAgNTI6IFwiJFwiLFxuICA1MzogXCIlXCIsXG4gIDU0OiBcIl5cIixcbiAgNTU6IFwiJlwiLFxuICA1NjogXCIqXCIsXG4gIDU3OiBcIihcIixcbiAgNTk6IFwiOlwiLFxuICA2MTogXCIrXCIsXG4gIDE3MzogXCJfXCIsXG4gIDE4NjogXCI6XCIsXG4gIDE4NzogXCIrXCIsXG4gIDE4ODogXCI8XCIsXG4gIDE4OTogXCJfXCIsXG4gIDE5MDogXCI+XCIsXG4gIDE5MTogXCI/XCIsXG4gIDE5MjogXCJ+XCIsXG4gIDIxOTogXCJ7XCIsXG4gIDIyMDogXCJ8XCIsXG4gIDIyMTogXCJ9XCIsXG4gIDIyMjogXCJcXFwiXCJcbn1cblxudmFyIG1hYyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiAmJiAvTWFjLy50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSlcbnZhciBpZSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiAmJiAvTVNJRSBcXGR8VHJpZGVudFxcLyg/Ols3LTldfFxcZHsyLH0pXFwuLipydjooXFxkKykvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudClcblxuLy8gRmlsbCBpbiB0aGUgZGlnaXQga2V5c1xuZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSBiYXNlWzQ4ICsgaV0gPSBiYXNlWzk2ICsgaV0gPSBTdHJpbmcoaSlcblxuLy8gVGhlIGZ1bmN0aW9uIGtleXNcbmZvciAodmFyIGkgPSAxOyBpIDw9IDI0OyBpKyspIGJhc2VbaSArIDExMV0gPSBcIkZcIiArIGlcblxuLy8gQW5kIHRoZSBhbHBoYWJldGljIGtleXNcbmZvciAodmFyIGkgPSA2NTsgaSA8PSA5MDsgaSsrKSB7XG4gIGJhc2VbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkgKyAzMilcbiAgc2hpZnRbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXG59XG5cbi8vIEZvciBlYWNoIGNvZGUgdGhhdCBkb2Vzbid0IGhhdmUgYSBzaGlmdC1lcXVpdmFsZW50LCBjb3B5IHRoZSBiYXNlIG5hbWVcbmZvciAodmFyIGNvZGUgaW4gYmFzZSkgaWYgKCFzaGlmdC5oYXNPd25Qcm9wZXJ0eShjb2RlKSkgc2hpZnRbY29kZV0gPSBiYXNlW2NvZGVdXG5cbmV4cG9ydCBmdW5jdGlvbiBrZXlOYW1lKGV2ZW50KSB7XG4gIC8vIE9uIG1hY09TLCBrZXlzIGhlbGQgd2l0aCBTaGlmdCBhbmQgQ21kIGRvbid0IHJlZmxlY3QgdGhlIGVmZmVjdCBvZiBTaGlmdCBpbiBgLmtleWAuXG4gIC8vIE9uIElFLCBzaGlmdCBlZmZlY3QgaXMgbmV2ZXIgaW5jbHVkZWQgaW4gYC5rZXlgLlxuICB2YXIgaWdub3JlS2V5ID0gbWFjICYmIGV2ZW50Lm1ldGFLZXkgJiYgZXZlbnQuc2hpZnRLZXkgJiYgIWV2ZW50LmN0cmxLZXkgJiYgIWV2ZW50LmFsdEtleSB8fFxuICAgICAgaWUgJiYgZXZlbnQuc2hpZnRLZXkgJiYgZXZlbnQua2V5ICYmIGV2ZW50LmtleS5sZW5ndGggPT0gMSB8fFxuICAgICAgZXZlbnQua2V5ID09IFwiVW5pZGVudGlmaWVkXCJcbiAgdmFyIG5hbWUgPSAoIWlnbm9yZUtleSAmJiBldmVudC5rZXkpIHx8XG4gICAgKGV2ZW50LnNoaWZ0S2V5ID8gc2hpZnQgOiBiYXNlKVtldmVudC5rZXlDb2RlXSB8fFxuICAgIGV2ZW50LmtleSB8fCBcIlVuaWRlbnRpZmllZFwiXG4gIC8vIEVkZ2Ugc29tZXRpbWVzIHByb2R1Y2VzIHdyb25nIG5hbWVzIChJc3N1ZSAjMylcbiAgaWYgKG5hbWUgPT0gXCJFc2NcIikgbmFtZSA9IFwiRXNjYXBlXCJcbiAgaWYgKG5hbWUgPT0gXCJEZWxcIikgbmFtZSA9IFwiRGVsZXRlXCJcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvODg2MDU3MS9cbiAgaWYgKG5hbWUgPT0gXCJMZWZ0XCIpIG5hbWUgPSBcIkFycm93TGVmdFwiXG4gIGlmIChuYW1lID09IFwiVXBcIikgbmFtZSA9IFwiQXJyb3dVcFwiXG4gIGlmIChuYW1lID09IFwiUmlnaHRcIikgbmFtZSA9IFwiQXJyb3dSaWdodFwiXG4gIGlmIChuYW1lID09IFwiRG93blwiKSBuYW1lID0gXCJBcnJvd0Rvd25cIlxuICByZXR1cm4gbmFtZVxufVxuIiwiaW1wb3J0IHsga2V5TmFtZSwgYmFzZSB9IGZyb20gJ3czYy1rZXluYW1lJztcbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcblxuY29uc3QgbWFjID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiICYmIC9NYWN8aVAoaG9uZXxbb2FdZCkvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTtcbmNvbnN0IHdpbmRvd3MgPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgJiYgL1dpbi8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pO1xuZnVuY3Rpb24gbm9ybWFsaXplS2V5TmFtZShuYW1lKSB7XG4gICAgbGV0IHBhcnRzID0gbmFtZS5zcGxpdCgvLSg/ISQpLyksIHJlc3VsdCA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChyZXN1bHQgPT0gXCJTcGFjZVwiKVxuICAgICAgICByZXN1bHQgPSBcIiBcIjtcbiAgICBsZXQgYWx0LCBjdHJsLCBzaGlmdCwgbWV0YTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBsZXQgbW9kID0gcGFydHNbaV07XG4gICAgICAgIGlmICgvXihjbWR8bWV0YXxtKSQvaS50ZXN0KG1vZCkpXG4gICAgICAgICAgICBtZXRhID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoL15hKGx0KT8kL2kudGVzdChtb2QpKVxuICAgICAgICAgICAgYWx0ID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoL14oY3xjdHJsfGNvbnRyb2wpJC9pLnRlc3QobW9kKSlcbiAgICAgICAgICAgIGN0cmwgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmICgvXnMoaGlmdCk/JC9pLnRlc3QobW9kKSlcbiAgICAgICAgICAgIHNoaWZ0ID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoL15tb2QkL2kudGVzdChtb2QpKSB7XG4gICAgICAgICAgICBpZiAobWFjKVxuICAgICAgICAgICAgICAgIG1ldGEgPSB0cnVlO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGN0cmwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCBtb2RpZmllciBuYW1lOiBcIiArIG1vZCk7XG4gICAgfVxuICAgIGlmIChhbHQpXG4gICAgICAgIHJlc3VsdCA9IFwiQWx0LVwiICsgcmVzdWx0O1xuICAgIGlmIChjdHJsKVxuICAgICAgICByZXN1bHQgPSBcIkN0cmwtXCIgKyByZXN1bHQ7XG4gICAgaWYgKG1ldGEpXG4gICAgICAgIHJlc3VsdCA9IFwiTWV0YS1cIiArIHJlc3VsdDtcbiAgICBpZiAoc2hpZnQpXG4gICAgICAgIHJlc3VsdCA9IFwiU2hpZnQtXCIgKyByZXN1bHQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZShtYXApIHtcbiAgICBsZXQgY29weSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChsZXQgcHJvcCBpbiBtYXApXG4gICAgICAgIGNvcHlbbm9ybWFsaXplS2V5TmFtZShwcm9wKV0gPSBtYXBbcHJvcF07XG4gICAgcmV0dXJuIGNvcHk7XG59XG5mdW5jdGlvbiBtb2RpZmllcnMobmFtZSwgZXZlbnQsIHNoaWZ0ID0gdHJ1ZSkge1xuICAgIGlmIChldmVudC5hbHRLZXkpXG4gICAgICAgIG5hbWUgPSBcIkFsdC1cIiArIG5hbWU7XG4gICAgaWYgKGV2ZW50LmN0cmxLZXkpXG4gICAgICAgIG5hbWUgPSBcIkN0cmwtXCIgKyBuYW1lO1xuICAgIGlmIChldmVudC5tZXRhS2V5KVxuICAgICAgICBuYW1lID0gXCJNZXRhLVwiICsgbmFtZTtcbiAgICBpZiAoc2hpZnQgJiYgZXZlbnQuc2hpZnRLZXkpXG4gICAgICAgIG5hbWUgPSBcIlNoaWZ0LVwiICsgbmFtZTtcbiAgICByZXR1cm4gbmFtZTtcbn1cbi8qKlxuQ3JlYXRlIGEga2V5bWFwIHBsdWdpbiBmb3IgdGhlIGdpdmVuIHNldCBvZiBiaW5kaW5ncy5cblxuQmluZGluZ3Mgc2hvdWxkIG1hcCBrZXkgbmFtZXMgdG8gW2NvbW1hbmRdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNjb21tYW5kcyktc3R5bGVcbmZ1bmN0aW9ucywgd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2l0aCBgKEVkaXRvclN0YXRlLCBkaXNwYXRjaCxcbkVkaXRvclZpZXcpYCBhcmd1bWVudHMsIGFuZCBzaG91bGQgcmV0dXJuIHRydWUgd2hlbiB0aGV5J3ZlIGhhbmRsZWRcbnRoZSBrZXkuIE5vdGUgdGhhdCB0aGUgdmlldyBhcmd1bWVudCBpc24ndCBwYXJ0IG9mIHRoZSBjb21tYW5kXG5wcm90b2NvbCwgYnV0IGNhbiBiZSB1c2VkIGFzIGFuIGVzY2FwZSBoYXRjaCBpZiBhIGJpbmRpbmcgbmVlZHMgdG9cbmRpcmVjdGx5IGludGVyYWN0IHdpdGggdGhlIFVJLlxuXG5LZXkgbmFtZXMgbWF5IGJlIHN0cmluZ3MgbGlrZSBgXCJTaGlmdC1DdHJsLUVudGVyXCJg4oCUYSBrZXlcbmlkZW50aWZpZXIgcHJlZml4ZWQgd2l0aCB6ZXJvIG9yIG1vcmUgbW9kaWZpZXJzLiBLZXkgaWRlbnRpZmllcnNcbmFyZSBiYXNlZCBvbiB0aGUgc3RyaW5ncyB0aGF0IGNhbiBhcHBlYXIgaW5cbltgS2V5RXZlbnQua2V5YF0oaHR0cHM6ZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2tleSkuXG5Vc2UgbG93ZXJjYXNlIGxldHRlcnMgdG8gcmVmZXIgdG8gbGV0dGVyIGtleXMgKG9yIHVwcGVyY2FzZSBsZXR0ZXJzXG5pZiB5b3Ugd2FudCBzaGlmdCB0byBiZSBoZWxkKS4gWW91IG1heSB1c2UgYFwiU3BhY2VcImAgYXMgYW4gYWxpYXNcbmZvciB0aGUgYFwiIFwiYCBuYW1lLlxuXG5Nb2RpZmllcnMgY2FuIGJlIGdpdmVuIGluIGFueSBvcmRlci4gYFNoaWZ0LWAgKG9yIGBzLWApLCBgQWx0LWAgKG9yXG5gYS1gKSwgYEN0cmwtYCAob3IgYGMtYCBvciBgQ29udHJvbC1gKSBhbmQgYENtZC1gIChvciBgbS1gIG9yXG5gTWV0YS1gKSBhcmUgcmVjb2duaXplZC4gRm9yIGNoYXJhY3RlcnMgdGhhdCBhcmUgY3JlYXRlZCBieSBob2xkaW5nXG5zaGlmdCwgdGhlIGBTaGlmdC1gIHByZWZpeCBpcyBpbXBsaWVkLCBhbmQgc2hvdWxkIG5vdCBiZSBhZGRlZFxuZXhwbGljaXRseS5cblxuWW91IGNhbiB1c2UgYE1vZC1gIGFzIGEgc2hvcnRoYW5kIGZvciBgQ21kLWAgb24gTWFjIGFuZCBgQ3RybC1gIG9uXG5vdGhlciBwbGF0Zm9ybXMuXG5cbllvdSBjYW4gYWRkIG11bHRpcGxlIGtleW1hcCBwbHVnaW5zIHRvIGFuIGVkaXRvci4gVGhlIG9yZGVyIGluXG53aGljaCB0aGV5IGFwcGVhciBkZXRlcm1pbmVzIHRoZWlyIHByZWNlZGVuY2UgKHRoZSBvbmVzIGVhcmx5IGluXG50aGUgYXJyYXkgZ2V0IHRvIGRpc3BhdGNoIGZpcnN0KS5cbiovXG5mdW5jdGlvbiBrZXltYXAoYmluZGluZ3MpIHtcbiAgICByZXR1cm4gbmV3IFBsdWdpbih7IHByb3BzOiB7IGhhbmRsZUtleURvd246IGtleWRvd25IYW5kbGVyKGJpbmRpbmdzKSB9IH0pO1xufVxuLyoqXG5HaXZlbiBhIHNldCBvZiBiaW5kaW5ncyAodXNpbmcgdGhlIHNhbWUgZm9ybWF0IGFzXG5bYGtleW1hcGBdKGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvcmVmLyNrZXltYXAua2V5bWFwKSksIHJldHVybiBhIFtrZXlkb3duXG5oYW5kbGVyXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jdmlldy5FZGl0b3JQcm9wcy5oYW5kbGVLZXlEb3duKSB0aGF0IGhhbmRsZXMgdGhlbS5cbiovXG5mdW5jdGlvbiBrZXlkb3duSGFuZGxlcihiaW5kaW5ncykge1xuICAgIGxldCBtYXAgPSBub3JtYWxpemUoYmluZGluZ3MpO1xuICAgIHJldHVybiBmdW5jdGlvbiAodmlldywgZXZlbnQpIHtcbiAgICAgICAgbGV0IG5hbWUgPSBrZXlOYW1lKGV2ZW50KSwgYmFzZU5hbWUsIGRpcmVjdCA9IG1hcFttb2RpZmllcnMobmFtZSwgZXZlbnQpXTtcbiAgICAgICAgaWYgKGRpcmVjdCAmJiBkaXJlY3Qodmlldy5zdGF0ZSwgdmlldy5kaXNwYXRjaCwgdmlldykpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgLy8gQSBjaGFyYWN0ZXIga2V5XG4gICAgICAgIGlmIChuYW1lLmxlbmd0aCA9PSAxICYmIG5hbWUgIT0gXCIgXCIpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIC8vIEluIGNhc2UgdGhlIG5hbWUgd2FzIGFscmVhZHkgbW9kaWZpZWQgYnkgc2hpZnQsIHRyeSBsb29raW5nXG4gICAgICAgICAgICAgICAgLy8gaXQgdXAgd2l0aG91dCBpdHMgc2hpZnQgbW9kaWZpZXJcbiAgICAgICAgICAgICAgICBsZXQgbm9TaGlmdCA9IG1hcFttb2RpZmllcnMobmFtZSwgZXZlbnQsIGZhbHNlKV07XG4gICAgICAgICAgICAgICAgaWYgKG5vU2hpZnQgJiYgbm9TaGlmdCh2aWV3LnN0YXRlLCB2aWV3LmRpc3BhdGNoLCB2aWV3KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGV2ZW50LmFsdEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LmN0cmxLZXkpICYmXG4gICAgICAgICAgICAgICAgLy8gQ3RybC1BbHQgbWF5IGJlIHVzZWQgZm9yIEFsdEdyIG9uIFdpbmRvd3NcbiAgICAgICAgICAgICAgICAhKHdpbmRvd3MgJiYgZXZlbnQuY3RybEtleSAmJiBldmVudC5hbHRLZXkpICYmXG4gICAgICAgICAgICAgICAgKGJhc2VOYW1lID0gYmFzZVtldmVudC5rZXlDb2RlXSkgJiYgYmFzZU5hbWUgIT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIC8vIFRyeSBmYWxsaW5nIGJhY2sgdG8gdGhlIGtleUNvZGUgd2hlbiB0aGVyZSdzIGEgbW9kaWZpZXJcbiAgICAgICAgICAgICAgICAvLyBhY3RpdmUgb3IgdGhlIGNoYXJhY3RlciBwcm9kdWNlZCBpc24ndCBBU0NJSSwgYW5kIG91ciB0YWJsZVxuICAgICAgICAgICAgICAgIC8vIHByb2R1Y2VzIGEgZGlmZmVyZW50IG5hbWUgZnJvbSB0aGUgdGhlIGtleUNvZGUuIFNlZSAjNjY4LFxuICAgICAgICAgICAgICAgIC8vICMxMDYwLCAjMTUyOS5cbiAgICAgICAgICAgICAgICBsZXQgZnJvbUNvZGUgPSBtYXBbbW9kaWZpZXJzKGJhc2VOYW1lLCBldmVudCldO1xuICAgICAgICAgICAgICAgIGlmIChmcm9tQ29kZSAmJiBmcm9tQ29kZSh2aWV3LnN0YXRlLCB2aWV3LmRpc3BhdGNoLCB2aWV3KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG5cbmV4cG9ydCB7IGtleWRvd25IYW5kbGVyLCBrZXltYXAgfTtcbiIsImltcG9ydCB7XG4gIEVkaXRvclN0YXRlLFxuICBQbHVnaW4sXG4gIFNlbGVjdGlvbixcbiAgVGV4dFNlbGVjdGlvbixcbiAgVHJhbnNhY3Rpb24sXG59IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IFJlc29sdmVkUG9zIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xuaW1wb3J0IHsgYmFzZUtleW1hcCwgc2V0QmxvY2tUeXBlIH0gZnJvbSAncHJvc2VtaXJyb3ItY29tbWFuZHMnO1xuaW1wb3J0IHsga2V5bWFwIH0gZnJvbSAncHJvc2VtaXJyb3Ita2V5bWFwJztcbmltcG9ydCB7IHNwbGl0TGlzdEl0ZW0gfSBmcm9tICdwcm9zZW1pcnJvci1zY2hlbWEtbGlzdCc7XG5pbXBvcnQgeyBzY2hlbWEgfSBmcm9tICcuL3NjaGVtYSc7XG5cbmZ1bmN0aW9uIHJlY3Vyc2l2ZURlbGV0ZUVtcHR5KHRyOiBUcmFuc2FjdGlvbiwgJHBvczogUmVzb2x2ZWRQb3MpOiBUcmFuc2FjdGlvbiB7XG4gIGNvbnN0IHBhcmVudE5vZGUgPSAkcG9zLnBhcmVudDtcbiAgaWYgKHBhcmVudE5vZGUubm9kZVNpemUgPT09IDIpIHtcbiAgICBjb25zdCB7IHBvcyB9ID0gJHBvcztcbiAgICByZXR1cm4gcmVjdXJzaXZlRGVsZXRlRW1wdHkoXG4gICAgICB0ci5kZWxldGVSYW5nZShwb3MgLSAxLCBwb3MgKyAxKSxcbiAgICAgIHRyLmRvYy5yZXNvbHZlKHRyLm1hcHBpbmcubWFwKHBvcykpLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHRyO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVUZXh0U2VsZWN0aW9uSW5FbXB0eU5vZGUoc3RhdGU6IEVkaXRvclN0YXRlKTogYm9vbGVhbiB7XG4gIGNvbnN0IHsgJGN1cnNvciB9ID0gc3RhdGUuc2VsZWN0aW9uIGFzIFRleHRTZWxlY3Rpb247XG4gIHJldHVybiBCb29sZWFuKCRjdXJzb3IgJiYgJGN1cnNvci5wYXJlbnQubm9kZVNpemUgPT09IDIpO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVDaGVja2xpc3RJdGVtVGV4dFNlbGVjdGlvbihzdGF0ZTogRWRpdG9yU3RhdGUpIHtcbiAgY29uc3QgeyAkY3Vyc29yIH0gPSBzdGF0ZS5zZWxlY3Rpb24gYXMgVGV4dFNlbGVjdGlvbjtcbiAgcmV0dXJuIEJvb2xlYW4oXG4gICAgJGN1cnNvciAmJiAkY3Vyc29yLnBhcmVudC50eXBlID09PSBzY2hlbWEubm9kZXMuY2hlY2tsaXN0X2l0ZW0sXG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCBrZXltYXBQbHVnaW5zOiBQbHVnaW5bXSA9IFtcbiAgLy8gY2hlY2tsaXN0IGl0ZW0gaGFuZGxlcnNcbiAga2V5bWFwKHtcbiAgICBCYWNrc3BhY2Uoc3RhdGUsIGRpc3BhdGNoLCB2aWV3KSB7XG4gICAgICBpZiAoZW5zdXJlQ2hlY2tsaXN0SXRlbVRleHRTZWxlY3Rpb24oc3RhdGUpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodmlldy5lbmRPZlRleHRibG9jaygnbGVmdCcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICgoc3RhdGUuc2VsZWN0aW9uIGFzIFRleHRTZWxlY3Rpb24pLiRjdXJzb3IuaW5kZXgoMCkgPT09IDApIHtcbiAgICAgICAgc2V0QmxvY2tUeXBlKHNjaGVtYS5ub2Rlcy5wYXJhZ3JhcGgpKHN0YXRlLCBkaXNwYXRjaCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBFbnRlcihzdGF0ZSwgZGlzcGF0Y2gpIHtcbiAgICAgIGNvbnN0IHsgc2VsZWN0aW9uLCB0ciB9ID0gc3RhdGU7XG4gICAgICBjb25zdCB7ICRmcm9tLCBmcm9tIH0gPSBzZWxlY3Rpb247XG4gICAgICBpZiAoJGZyb20ucGFyZW50LnR5cGUgIT09IHNjaGVtYS5ub2Rlcy5jaGVja2xpc3RfaXRlbSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB0ci5kZWxldGVTZWxlY3Rpb24oKTtcbiAgICAgIGNvbnN0IG5leHQkRnJvbSA9IHRyLmRvYy5yZXNvbHZlKGZyb20pO1xuICAgICAgaWYgKG5leHQkRnJvbS5wYXJlbnQubm9kZVNpemUgPT09IDIpIHtcbiAgICAgICAgY29uc3QgbmV4dEZyb20gPSBuZXh0JEZyb20ucG9zO1xuICAgICAgICAvLyBUaGUgbm9kZSBpcyBlbXB0eVxuICAgICAgICB0ci5yZXBsYWNlV2l0aChcbiAgICAgICAgICBuZXh0RnJvbSAtIDEsXG4gICAgICAgICAgbmV4dEZyb20gKyAxLFxuICAgICAgICAgIHNjaGVtYS5ub2Rlcy5wYXJhZ3JhcGguY3JlYXRlQW5kRmlsbCgpLFxuICAgICAgICApO1xuICAgICAgICB0ci5zZXRTZWxlY3Rpb24oU2VsZWN0aW9uLm5lYXIodHIuZG9jLnJlc29sdmUobmV4dEZyb20gLSAxKSkpO1xuICAgICAgICBkaXNwYXRjaCh0cik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdHIuc3BsaXQoZnJvbSwgdW5kZWZpbmVkLCBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiBzY2hlbWEubm9kZXMuY2hlY2tsaXN0X2l0ZW0sXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICAgIGRpc3BhdGNoKHRyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gIH0pLFxuICAvLyBsaXN0IGl0ZW0gaGFuZGxlcnNcbiAga2V5bWFwKHtcbiAgICBCYWNrc3BhY2Uoc3RhdGUsIGRpc3BhdGNoKSB7XG4gICAgICBpZiAoZW5zdXJlVGV4dFNlbGVjdGlvbkluRW1wdHlOb2RlKHN0YXRlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgICBpZiAoIShzZWxlY3Rpb24gaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICBjb25zdCB7ICRjdXJzb3IgfSA9IHNlbGVjdGlvbjtcbiAgICAgIGNvbnN0IHBvc3NpYmxlU2VsZWN0aW9uID0gU2VsZWN0aW9uLmZpbmRGcm9tKFxuICAgICAgICBzdGF0ZS5kb2MucmVzb2x2ZSgkY3Vyc29yLmJlZm9yZSgpKSxcbiAgICAgICAgLTEsXG4gICAgICAgIHRydWUsXG4gICAgICAgIC8vIFdlIGNhbiBhc3NlcnQgdGhpcyBoZXJlIGJjIG9mIHRoZSB0ZXh0T25seSBhcmcgYWJvdmVcbiAgICAgICkgYXMgVGV4dFNlbGVjdGlvbjtcbiAgICAgIGlmICghcG9zc2libGVTZWxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHBvc3NpYmxlU2VsZWN0aW9uLiRjdXJzb3Iubm9kZSgtMSkudHlwZSAhPT0gc2NoZW1hLm5vZGVzLmxpc3RfaXRlbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgdHIgPSBzdGF0ZS50ci5zZXRTZWxlY3Rpb24ocG9zc2libGVTZWxlY3Rpb24pO1xuICAgICAgdHIgPSByZWN1cnNpdmVEZWxldGVFbXB0eSh0ciwgJGN1cnNvcik7XG4gICAgICBkaXNwYXRjaCh0cik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIEVudGVyOiBzcGxpdExpc3RJdGVtKHNjaGVtYS5ub2Rlcy5saXN0X2l0ZW0pLFxuICB9KSxcbiAga2V5bWFwKGJhc2VLZXltYXApLFxuXTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuY29uc3QgZGVjb2RlQ2FjaGUgPSB7fVxuXG5mdW5jdGlvbiBnZXREZWNvZGVDYWNoZSAoZXhjbHVkZSkge1xuICBsZXQgY2FjaGUgPSBkZWNvZGVDYWNoZVtleGNsdWRlXVxuICBpZiAoY2FjaGUpIHsgcmV0dXJuIGNhY2hlIH1cblxuICBjYWNoZSA9IGRlY29kZUNhY2hlW2V4Y2x1ZGVdID0gW11cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IDEyODsgaSsrKSB7XG4gICAgY29uc3QgY2ggPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXG4gICAgY2FjaGUucHVzaChjaClcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZXhjbHVkZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoID0gZXhjbHVkZS5jaGFyQ29kZUF0KGkpXG4gICAgY2FjaGVbY2hdID0gJyUnICsgKCcwJyArIGNoLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKS5zbGljZSgtMilcbiAgfVxuXG4gIHJldHVybiBjYWNoZVxufVxuXG4vLyBEZWNvZGUgcGVyY2VudC1lbmNvZGVkIHN0cmluZy5cbi8vXG5mdW5jdGlvbiBkZWNvZGUgKHN0cmluZywgZXhjbHVkZSkge1xuICBpZiAodHlwZW9mIGV4Y2x1ZGUgIT09ICdzdHJpbmcnKSB7XG4gICAgZXhjbHVkZSA9IGRlY29kZS5kZWZhdWx0Q2hhcnNcbiAgfVxuXG4gIGNvbnN0IGNhY2hlID0gZ2V0RGVjb2RlQ2FjaGUoZXhjbHVkZSlcblxuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyglW2EtZjAtOV17Mn0pKy9naSwgZnVuY3Rpb24gKHNlcSkge1xuICAgIGxldCByZXN1bHQgPSAnJ1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBzZXEubGVuZ3RoOyBpIDwgbDsgaSArPSAzKSB7XG4gICAgICBjb25zdCBiMSA9IHBhcnNlSW50KHNlcS5zbGljZShpICsgMSwgaSArIDMpLCAxNilcblxuICAgICAgaWYgKGIxIDwgMHg4MCkge1xuICAgICAgICByZXN1bHQgKz0gY2FjaGVbYjFdXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmICgoYjEgJiAweEUwKSA9PT0gMHhDMCAmJiAoaSArIDMgPCBsKSkge1xuICAgICAgICAvLyAxMTB4eHh4eCAxMHh4eHh4eFxuICAgICAgICBjb25zdCBiMiA9IHBhcnNlSW50KHNlcS5zbGljZShpICsgNCwgaSArIDYpLCAxNilcblxuICAgICAgICBpZiAoKGIyICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICBjb25zdCBjaHIgPSAoKGIxIDw8IDYpICYgMHg3QzApIHwgKGIyICYgMHgzRilcblxuICAgICAgICAgIGlmIChjaHIgPCAweDgwKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gJ1xcdWZmZmRcXHVmZmZkJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAzXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoKGIxICYgMHhGMCkgPT09IDB4RTAgJiYgKGkgKyA2IDwgbCkpIHtcbiAgICAgICAgLy8gMTExMHh4eHggMTB4eHh4eHggMTB4eHh4eHhcbiAgICAgICAgY29uc3QgYjIgPSBwYXJzZUludChzZXEuc2xpY2UoaSArIDQsIGkgKyA2KSwgMTYpXG4gICAgICAgIGNvbnN0IGIzID0gcGFyc2VJbnQoc2VxLnNsaWNlKGkgKyA3LCBpICsgOSksIDE2KVxuXG4gICAgICAgIGlmICgoYjIgJiAweEMwKSA9PT0gMHg4MCAmJiAoYjMgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgIGNvbnN0IGNociA9ICgoYjEgPDwgMTIpICYgMHhGMDAwKSB8ICgoYjIgPDwgNikgJiAweEZDMCkgfCAoYjMgJiAweDNGKVxuXG4gICAgICAgICAgaWYgKGNociA8IDB4ODAwIHx8IChjaHIgPj0gMHhEODAwICYmIGNociA8PSAweERGRkYpKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gJ1xcdWZmZmRcXHVmZmZkXFx1ZmZmZCdcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hyKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gNlxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKChiMSAmIDB4RjgpID09PSAweEYwICYmIChpICsgOSA8IGwpKSB7XG4gICAgICAgIC8vIDExMTExMHh4IDEweHh4eHh4IDEweHh4eHh4IDEweHh4eHh4XG4gICAgICAgIGNvbnN0IGIyID0gcGFyc2VJbnQoc2VxLnNsaWNlKGkgKyA0LCBpICsgNiksIDE2KVxuICAgICAgICBjb25zdCBiMyA9IHBhcnNlSW50KHNlcS5zbGljZShpICsgNywgaSArIDkpLCAxNilcbiAgICAgICAgY29uc3QgYjQgPSBwYXJzZUludChzZXEuc2xpY2UoaSArIDEwLCBpICsgMTIpLCAxNilcblxuICAgICAgICBpZiAoKGIyICYgMHhDMCkgPT09IDB4ODAgJiYgKGIzICYgMHhDMCkgPT09IDB4ODAgJiYgKGI0ICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICBsZXQgY2hyID0gKChiMSA8PCAxOCkgJiAweDFDMDAwMCkgfCAoKGIyIDw8IDEyKSAmIDB4M0YwMDApIHwgKChiMyA8PCA2KSAmIDB4RkMwKSB8IChiNCAmIDB4M0YpXG5cbiAgICAgICAgICBpZiAoY2hyIDwgMHgxMDAwMCB8fCBjaHIgPiAweDEwRkZGRikge1xuICAgICAgICAgICAgcmVzdWx0ICs9ICdcXHVmZmZkXFx1ZmZmZFxcdWZmZmRcXHVmZmZkJ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaHIgLT0gMHgxMDAwMFxuICAgICAgICAgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODAwICsgKGNociA+PiAxMCksIDB4REMwMCArIChjaHIgJiAweDNGRikpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSA5XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXN1bHQgKz0gJ1xcdWZmZmQnXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KVxufVxuXG5kZWNvZGUuZGVmYXVsdENoYXJzID0gJzsvPzpAJj0rJCwjJ1xuZGVjb2RlLmNvbXBvbmVudENoYXJzID0gJydcblxuZXhwb3J0IGRlZmF1bHQgZGVjb2RlXG4iLCJjb25zdCBlbmNvZGVDYWNoZSA9IHt9XG5cbi8vIENyZWF0ZSBhIGxvb2t1cCBhcnJheSB3aGVyZSBhbnl0aGluZyBidXQgY2hhcmFjdGVycyBpbiBgY2hhcnNgIHN0cmluZ1xuLy8gYW5kIGFscGhhbnVtZXJpYyBjaGFycyBpcyBwZXJjZW50LWVuY29kZWQuXG4vL1xuZnVuY3Rpb24gZ2V0RW5jb2RlQ2FjaGUgKGV4Y2x1ZGUpIHtcbiAgbGV0IGNhY2hlID0gZW5jb2RlQ2FjaGVbZXhjbHVkZV1cbiAgaWYgKGNhY2hlKSB7IHJldHVybiBjYWNoZSB9XG5cbiAgY2FjaGUgPSBlbmNvZGVDYWNoZVtleGNsdWRlXSA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMjg7IGkrKykge1xuICAgIGNvbnN0IGNoID0gU3RyaW5nLmZyb21DaGFyQ29kZShpKVxuXG4gICAgaWYgKC9eWzAtOWEtel0kL2kudGVzdChjaCkpIHtcbiAgICAgIC8vIGFsd2F5cyBhbGxvdyB1bmVuY29kZWQgYWxwaGFudW1lcmljIGNoYXJhY3RlcnNcbiAgICAgIGNhY2hlLnB1c2goY2gpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlLnB1c2goJyUnICsgKCcwJyArIGkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpLnNsaWNlKC0yKSlcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGV4Y2x1ZGUubGVuZ3RoOyBpKyspIHtcbiAgICBjYWNoZVtleGNsdWRlLmNoYXJDb2RlQXQoaSldID0gZXhjbHVkZVtpXVxuICB9XG5cbiAgcmV0dXJuIGNhY2hlXG59XG5cbi8vIEVuY29kZSB1bnNhZmUgY2hhcmFjdGVycyB3aXRoIHBlcmNlbnQtZW5jb2RpbmcsIHNraXBwaW5nIGFscmVhZHlcbi8vIGVuY29kZWQgc2VxdWVuY2VzLlxuLy9cbi8vICAtIHN0cmluZyAgICAgICAtIHN0cmluZyB0byBlbmNvZGVcbi8vICAtIGV4Y2x1ZGUgICAgICAtIGxpc3Qgb2YgY2hhcmFjdGVycyB0byBpZ25vcmUgKGluIGFkZGl0aW9uIHRvIGEtekEtWjAtOSlcbi8vICAtIGtlZXBFc2NhcGVkICAtIGRvbid0IGVuY29kZSAnJScgaW4gYSBjb3JyZWN0IGVzY2FwZSBzZXF1ZW5jZSAoZGVmYXVsdDogdHJ1ZSlcbi8vXG5mdW5jdGlvbiBlbmNvZGUgKHN0cmluZywgZXhjbHVkZSwga2VlcEVzY2FwZWQpIHtcbiAgaWYgKHR5cGVvZiBleGNsdWRlICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGVuY29kZShzdHJpbmcsIGtlZXBFc2NhcGVkKVxuICAgIGtlZXBFc2NhcGVkID0gZXhjbHVkZVxuICAgIGV4Y2x1ZGUgPSBlbmNvZGUuZGVmYXVsdENoYXJzXG4gIH1cblxuICBpZiAodHlwZW9mIGtlZXBFc2NhcGVkID09PSAndW5kZWZpbmVkJykge1xuICAgIGtlZXBFc2NhcGVkID0gdHJ1ZVxuICB9XG5cbiAgY29uc3QgY2FjaGUgPSBnZXRFbmNvZGVDYWNoZShleGNsdWRlKVxuICBsZXQgcmVzdWx0ID0gJydcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IHN0cmluZy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCBjb2RlID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIGlmIChrZWVwRXNjYXBlZCAmJiBjb2RlID09PSAweDI1IC8qICUgKi8gJiYgaSArIDIgPCBsKSB7XG4gICAgICBpZiAoL15bMC05YS1mXXsyfSQvaS50ZXN0KHN0cmluZy5zbGljZShpICsgMSwgaSArIDMpKSkge1xuICAgICAgICByZXN1bHQgKz0gc3RyaW5nLnNsaWNlKGksIGkgKyAzKVxuICAgICAgICBpICs9IDJcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZSA8IDEyOCkge1xuICAgICAgcmVzdWx0ICs9IGNhY2hlW2NvZGVdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGlmIChjb2RlID49IDB4RDgwMCAmJiBjb2RlIDw9IDB4REZGRikge1xuICAgICAgaWYgKGNvZGUgPj0gMHhEODAwICYmIGNvZGUgPD0gMHhEQkZGICYmIGkgKyAxIDwgbCkge1xuICAgICAgICBjb25zdCBuZXh0Q29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGkgKyAxKVxuICAgICAgICBpZiAobmV4dENvZGUgPj0gMHhEQzAwICYmIG5leHRDb2RlIDw9IDB4REZGRikge1xuICAgICAgICAgIHJlc3VsdCArPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5nW2ldICsgc3RyaW5nW2kgKyAxXSlcbiAgICAgICAgICBpKytcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHQgKz0gJyVFRiVCRiVCRCdcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgcmVzdWx0ICs9IGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdbaV0pXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbmVuY29kZS5kZWZhdWx0Q2hhcnMgPSBcIjsvPzpAJj0rJCwtXy4hfionKCkjXCJcbmVuY29kZS5jb21wb25lbnRDaGFycyA9IFwiLV8uIX4qJygpXCJcblxuZXhwb3J0IGRlZmF1bHQgZW5jb2RlXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQgKHVybCkge1xuICBsZXQgcmVzdWx0ID0gJydcblxuICByZXN1bHQgKz0gdXJsLnByb3RvY29sIHx8ICcnXG4gIHJlc3VsdCArPSB1cmwuc2xhc2hlcyA/ICcvLycgOiAnJ1xuICByZXN1bHQgKz0gdXJsLmF1dGggPyB1cmwuYXV0aCArICdAJyA6ICcnXG5cbiAgaWYgKHVybC5ob3N0bmFtZSAmJiB1cmwuaG9zdG5hbWUuaW5kZXhPZignOicpICE9PSAtMSkge1xuICAgIC8vIGlwdjYgYWRkcmVzc1xuICAgIHJlc3VsdCArPSAnWycgKyB1cmwuaG9zdG5hbWUgKyAnXSdcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgKz0gdXJsLmhvc3RuYW1lIHx8ICcnXG4gIH1cblxuICByZXN1bHQgKz0gdXJsLnBvcnQgPyAnOicgKyB1cmwucG9ydCA6ICcnXG4gIHJlc3VsdCArPSB1cmwucGF0aG5hbWUgfHwgJydcbiAgcmVzdWx0ICs9IHVybC5zZWFyY2ggfHwgJydcbiAgcmVzdWx0ICs9IHVybC5oYXNoIHx8ICcnXG5cbiAgcmV0dXJuIHJlc3VsdFxufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vL1xuLy8gQ2hhbmdlcyBmcm9tIGpveWVudC9ub2RlOlxuLy9cbi8vIDEuIE5vIGxlYWRpbmcgc2xhc2ggaW4gcGF0aHMsXG4vLyAgICBlLmcuIGluIGB1cmwucGFyc2UoJ2h0dHA6Ly9mb28/YmFyJylgIHBhdGhuYW1lIGlzIGBgLCBub3QgYC9gXG4vL1xuLy8gMi4gQmFja3NsYXNoZXMgYXJlIG5vdCByZXBsYWNlZCB3aXRoIHNsYXNoZXMsXG4vLyAgICBzbyBgaHR0cDpcXFxcZXhhbXBsZS5vcmdcXGAgaXMgdHJlYXRlZCBsaWtlIGEgcmVsYXRpdmUgcGF0aFxuLy9cbi8vIDMuIFRyYWlsaW5nIGNvbG9uIGlzIHRyZWF0ZWQgbGlrZSBhIHBhcnQgb2YgdGhlIHBhdGgsXG4vLyAgICBpLmUuIGluIGBodHRwOi8vZXhhbXBsZS5vcmc6Zm9vYCBwYXRobmFtZSBpcyBgOmZvb2Bcbi8vXG4vLyA0LiBOb3RoaW5nIGlzIFVSTC1lbmNvZGVkIGluIHRoZSByZXN1bHRpbmcgb2JqZWN0LFxuLy8gICAgKGluIGpveWVudC9ub2RlIHNvbWUgY2hhcnMgaW4gYXV0aCBhbmQgcGF0aHMgYXJlIGVuY29kZWQpXG4vL1xuLy8gNS4gYHVybC5wYXJzZSgpYCBkb2VzIG5vdCBoYXZlIGBwYXJzZVF1ZXJ5U3RyaW5nYCBhcmd1bWVudFxuLy9cbi8vIDYuIFJlbW92ZWQgZXh0cmFuZW91cyByZXN1bHQgcHJvcGVydGllczogYGhvc3RgLCBgcGF0aGAsIGBxdWVyeWAsIGV0Yy4sXG4vLyAgICB3aGljaCBjYW4gYmUgY29uc3RydWN0ZWQgdXNpbmcgb3RoZXIgcGFydHMgb2YgdGhlIHVybC5cbi8vXG5cbmZ1bmN0aW9uIFVybCAoKSB7XG4gIHRoaXMucHJvdG9jb2wgPSBudWxsXG4gIHRoaXMuc2xhc2hlcyA9IG51bGxcbiAgdGhpcy5hdXRoID0gbnVsbFxuICB0aGlzLnBvcnQgPSBudWxsXG4gIHRoaXMuaG9zdG5hbWUgPSBudWxsXG4gIHRoaXMuaGFzaCA9IG51bGxcbiAgdGhpcy5zZWFyY2ggPSBudWxsXG4gIHRoaXMucGF0aG5hbWUgPSBudWxsXG59XG5cbi8vIFJlZmVyZW5jZTogUkZDIDM5ODYsIFJGQyAxODA4LCBSRkMgMjM5NlxuXG4vLyBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZVxuLy8gY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuXG5jb25zdCBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05ListXSs6KS9pXG5jb25zdCBwb3J0UGF0dGVybiA9IC86WzAtOV0qJC9cblxuLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlICovXG5jb25zdCBzaW1wbGVQYXRoUGF0dGVybiA9IC9eKFxcL1xcLz8oPyFcXC8pW15cXD9cXHNdKikoXFw/W15cXHNdKik/JC9cblxuLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgcmVzZXJ2ZWQgZm9yIGRlbGltaXRpbmcgVVJMcy5cbi8vIFdlIGFjdHVhbGx5IGp1c3QgYXV0by1lc2NhcGUgdGhlc2UuXG5jb25zdCBkZWxpbXMgPSBbJzwnLCAnPicsICdcIicsICdgJywgJyAnLCAnXFxyJywgJ1xcbicsICdcXHQnXVxuXG4vLyBSRkMgMjM5NjogY2hhcmFjdGVycyBub3QgYWxsb3dlZCBmb3IgdmFyaW91cyByZWFzb25zLlxuY29uc3QgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCddLmNvbmNhdChkZWxpbXMpXG5cbi8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbmNvbnN0IGF1dG9Fc2NhcGUgPSBbJ1xcJyddLmNvbmNhdCh1bndpc2UpXG4vLyBDaGFyYWN0ZXJzIHRoYXQgYXJlIG5ldmVyIGV2ZXIgYWxsb3dlZCBpbiBhIGhvc3RuYW1lLlxuLy8gTm90ZSB0aGF0IGFueSBpbnZhbGlkIGNoYXJzIGFyZSBhbHNvIGhhbmRsZWQsIGJ1dCB0aGVzZVxuLy8gYXJlIHRoZSBvbmVzIHRoYXQgYXJlICpleHBlY3RlZCogdG8gYmUgc2Vlbiwgc28gd2UgZmFzdC1wYXRoXG4vLyB0aGVtLlxuY29uc3Qgbm9uSG9zdENoYXJzID0gWyclJywgJy8nLCAnPycsICc7JywgJyMnXS5jb25jYXQoYXV0b0VzY2FwZSlcbmNvbnN0IGhvc3RFbmRpbmdDaGFycyA9IFsnLycsICc/JywgJyMnXVxuY29uc3QgaG9zdG5hbWVNYXhMZW4gPSAyNTVcbmNvbnN0IGhvc3RuYW1lUGFydFBhdHRlcm4gPSAvXlsrYS16MC05QS1aXy1dezAsNjN9JC9cbmNvbnN0IGhvc3RuYW1lUGFydFN0YXJ0ID0gL14oWythLXowLTlBLVpfLV17MCw2M30pKC4qKSQvXG4vLyBwcm90b2NvbHMgdGhhdCBjYW4gYWxsb3cgXCJ1bnNhZmVcIiBhbmQgXCJ1bndpc2VcIiBjaGFycy5cbi8vIHByb3RvY29scyB0aGF0IG5ldmVyIGhhdmUgYSBob3N0bmFtZS5cbmNvbnN0IGhvc3RsZXNzUHJvdG9jb2wgPSB7XG4gIGphdmFzY3JpcHQ6IHRydWUsXG4gICdqYXZhc2NyaXB0Oic6IHRydWVcbn1cbi8vIHByb3RvY29scyB0aGF0IGFsd2F5cyBjb250YWluIGEgLy8gYml0LlxuY29uc3Qgc2xhc2hlZFByb3RvY29sID0ge1xuICBodHRwOiB0cnVlLFxuICBodHRwczogdHJ1ZSxcbiAgZnRwOiB0cnVlLFxuICBnb3BoZXI6IHRydWUsXG4gIGZpbGU6IHRydWUsXG4gICdodHRwOic6IHRydWUsXG4gICdodHRwczonOiB0cnVlLFxuICAnZnRwOic6IHRydWUsXG4gICdnb3BoZXI6JzogdHJ1ZSxcbiAgJ2ZpbGU6JzogdHJ1ZVxufVxuXG5mdW5jdGlvbiB1cmxQYXJzZSAodXJsLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAodXJsICYmIHVybCBpbnN0YW5jZW9mIFVybCkgcmV0dXJuIHVybFxuXG4gIGNvbnN0IHUgPSBuZXcgVXJsKClcbiAgdS5wYXJzZSh1cmwsIHNsYXNoZXNEZW5vdGVIb3N0KVxuICByZXR1cm4gdVxufVxuXG5VcmwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKHVybCwgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgbGV0IGxvd2VyUHJvdG8sIGhlYywgc2xhc2hlc1xuICBsZXQgcmVzdCA9IHVybFxuXG4gIC8vIHRyaW0gYmVmb3JlIHByb2NlZWRpbmcuXG4gIC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlIFwiICBodHRwOi8vZm9vLmNvbSAgXFxuXCJcbiAgcmVzdCA9IHJlc3QudHJpbSgpXG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIGNvbnN0IHNpbXBsZVBhdGggPSBzaW1wbGVQYXRoUGF0dGVybi5leGVjKHJlc3QpXG4gICAgaWYgKHNpbXBsZVBhdGgpIHtcbiAgICAgIHRoaXMucGF0aG5hbWUgPSBzaW1wbGVQYXRoWzFdXG4gICAgICBpZiAoc2ltcGxlUGF0aFsyXSkge1xuICAgICAgICB0aGlzLnNlYXJjaCA9IHNpbXBsZVBhdGhbMl1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICB9XG5cbiAgbGV0IHByb3RvID0gcHJvdG9jb2xQYXR0ZXJuLmV4ZWMocmVzdClcbiAgaWYgKHByb3RvKSB7XG4gICAgcHJvdG8gPSBwcm90b1swXVxuICAgIGxvd2VyUHJvdG8gPSBwcm90by50b0xvd2VyQ2FzZSgpXG4gICAgdGhpcy5wcm90b2NvbCA9IHByb3RvXG4gICAgcmVzdCA9IHJlc3Quc3Vic3RyKHByb3RvLmxlbmd0aClcbiAgfVxuXG4gIC8vIGZpZ3VyZSBvdXQgaWYgaXQncyBnb3QgYSBob3N0XG4gIC8vIHVzZXJAc2VydmVyIGlzICphbHdheXMqIGludGVycHJldGVkIGFzIGEgaG9zdG5hbWUsIGFuZCB1cmxcbiAgLy8gcmVzb2x1dGlvbiB3aWxsIHRyZWF0IC8vZm9vL2JhciBhcyBob3N0PWZvbyxwYXRoPWJhciBiZWNhdXNlIHRoYXQnc1xuICAvLyBob3cgdGhlIGJyb3dzZXIgcmVzb2x2ZXMgcmVsYXRpdmUgVVJMcy5cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlICovXG4gIGlmIChzbGFzaGVzRGVub3RlSG9zdCB8fCBwcm90byB8fCByZXN0Lm1hdGNoKC9eXFwvXFwvW15AXFwvXStAW15AXFwvXSsvKSkge1xuICAgIHNsYXNoZXMgPSByZXN0LnN1YnN0cigwLCAyKSA9PT0gJy8vJ1xuICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7XG4gICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMilcbiAgICAgIHRoaXMuc2xhc2hlcyA9IHRydWVcbiAgICB9XG4gIH1cblxuICBpZiAoIWhvc3RsZXNzUHJvdG9jb2xbcHJvdG9dICYmXG4gICAgICAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkge1xuICAgIC8vIHRoZXJlJ3MgYSBob3N0bmFtZS5cbiAgICAvLyB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgLywgPywgOywgb3IgIyBlbmRzIHRoZSBob3N0LlxuICAgIC8vXG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gQCBpbiB0aGUgaG9zdG5hbWUsIHRoZW4gbm9uLWhvc3QgY2hhcnMgKmFyZSogYWxsb3dlZFxuICAgIC8vIHRvIHRoZSBsZWZ0IG9mIHRoZSBsYXN0IEAgc2lnbiwgdW5sZXNzIHNvbWUgaG9zdC1lbmRpbmcgY2hhcmFjdGVyXG4gICAgLy8gY29tZXMgKmJlZm9yZSogdGhlIEAtc2lnbi5cbiAgICAvLyBVUkxzIGFyZSBvYm5veGlvdXMuXG4gICAgLy9cbiAgICAvLyBleDpcbiAgICAvLyBodHRwOi8vYUBiQGMvID0+IHVzZXI6YUBiIGhvc3Q6Y1xuICAgIC8vIGh0dHA6Ly9hQGI/QGMgPT4gdXNlcjphIGhvc3Q6YyBwYXRoOi8/QGNcblxuICAgIC8vIHYwLjEyIFRPRE8oaXNhYWNzKTogVGhpcyBpcyBub3QgcXVpdGUgaG93IENocm9tZSBkb2VzIHRoaW5ncy5cbiAgICAvLyBSZXZpZXcgb3VyIHRlc3QgY2FzZSBhZ2FpbnN0IGJyb3dzZXJzIG1vcmUgY29tcHJlaGVuc2l2ZWx5LlxuXG4gICAgLy8gZmluZCB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYW55IGhvc3RFbmRpbmdDaGFyc1xuICAgIGxldCBob3N0RW5kID0gLTFcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhvc3RFbmRpbmdDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgaGVjID0gcmVzdC5pbmRleE9mKGhvc3RFbmRpbmdDaGFyc1tpXSlcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSkge1xuICAgICAgICBob3N0RW5kID0gaGVjXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYXQgdGhpcyBwb2ludCwgZWl0aGVyIHdlIGhhdmUgYW4gZXhwbGljaXQgcG9pbnQgd2hlcmUgdGhlXG4gICAgLy8gYXV0aCBwb3J0aW9uIGNhbm5vdCBnbyBwYXN0LCBvciB0aGUgbGFzdCBAIGNoYXIgaXMgdGhlIGRlY2lkZXIuXG4gICAgbGV0IGF1dGgsIGF0U2lnblxuICAgIGlmIChob3N0RW5kID09PSAtMSkge1xuICAgICAgLy8gYXRTaWduIGNhbiBiZSBhbnl3aGVyZS5cbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBhdFNpZ24gbXVzdCBiZSBpbiBhdXRoIHBvcnRpb24uXG4gICAgICAvLyBodHRwOi8vYUBiL2NAZCA9PiBob3N0OmIgYXV0aDphIHBhdGg6L2NAZFxuICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcsIGhvc3RFbmQpXG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguXG4gICAgLy8gUHVsbCB0aGF0IG9mZi5cbiAgICBpZiAoYXRTaWduICE9PSAtMSkge1xuICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKVxuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoYXRTaWduICsgMSlcbiAgICAgIHRoaXMuYXV0aCA9IGF1dGhcbiAgICB9XG5cbiAgICAvLyB0aGUgaG9zdCBpcyB0aGUgcmVtYWluaW5nIHRvIHRoZSBsZWZ0IG9mIHRoZSBmaXJzdCBub24taG9zdCBjaGFyXG4gICAgaG9zdEVuZCA9IC0xXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub25Ib3N0Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGhlYyA9IHJlc3QuaW5kZXhPZihub25Ib3N0Q2hhcnNbaV0pXG4gICAgICBpZiAoaGVjICE9PSAtMSAmJiAoaG9zdEVuZCA9PT0gLTEgfHwgaGVjIDwgaG9zdEVuZCkpIHtcbiAgICAgICAgaG9zdEVuZCA9IGhlY1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBpZiB3ZSBzdGlsbCBoYXZlIG5vdCBoaXQgaXQsIHRoZW4gdGhlIGVudGlyZSB0aGluZyBpcyBhIGhvc3QuXG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7XG4gICAgICBob3N0RW5kID0gcmVzdC5sZW5ndGhcbiAgICB9XG5cbiAgICBpZiAocmVzdFtob3N0RW5kIC0gMV0gPT09ICc6JykgeyBob3N0RW5kLS0gfVxuICAgIGNvbnN0IGhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpXG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZClcblxuICAgIC8vIHB1bGwgb3V0IHBvcnQuXG4gICAgdGhpcy5wYXJzZUhvc3QoaG9zdClcblxuICAgIC8vIHdlJ3ZlIGluZGljYXRlZCB0aGF0IHRoZXJlIGlzIGEgaG9zdG5hbWUsXG4gICAgLy8gc28gZXZlbiBpZiBpdCdzIGVtcHR5LCBpdCBoYXMgdG8gYmUgcHJlc2VudC5cbiAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZSB8fCAnJ1xuXG4gICAgLy8gaWYgaG9zdG5hbWUgYmVnaW5zIHdpdGggWyBhbmQgZW5kcyB3aXRoIF1cbiAgICAvLyBhc3N1bWUgdGhhdCBpdCdzIGFuIElQdjYgYWRkcmVzcy5cbiAgICBjb25zdCBpcHY2SG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lWzBdID09PSAnWycgJiZcbiAgICAgICAgdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSdcblxuICAgIC8vIHZhbGlkYXRlIGEgbGl0dGxlLlxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICBjb25zdCBob3N0cGFydHMgPSB0aGlzLmhvc3RuYW1lLnNwbGl0KC9cXC4vKVxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBob3N0cGFydHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhcnQgPSBob3N0cGFydHNbaV1cbiAgICAgICAgaWYgKCFwYXJ0KSB7IGNvbnRpbnVlIH1cbiAgICAgICAgaWYgKCFwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgbGV0IG5ld3BhcnQgPSAnJ1xuICAgICAgICAgIGZvciAobGV0IGogPSAwLCBrID0gcGFydC5sZW5ndGg7IGogPCBrOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LmNoYXJDb2RlQXQoaikgPiAxMjcpIHtcbiAgICAgICAgICAgICAgLy8gd2UgcmVwbGFjZSBub24tQVNDSUkgY2hhciB3aXRoIGEgdGVtcG9yYXJ5IHBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhpcyB0byBtYWtlIHN1cmUgc2l6ZSBvZiBob3N0bmFtZSBpcyBub3RcbiAgICAgICAgICAgICAgLy8gYnJva2VuIGJ5IHJlcGxhY2luZyBub24tQVNDSUkgYnkgbm90aGluZ1xuICAgICAgICAgICAgICBuZXdwYXJ0ICs9ICd4J1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3cGFydCArPSBwYXJ0W2pdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdlIHRlc3QgYWdhaW4gd2l0aCBBU0NJSSBjaGFyIG9ubHlcbiAgICAgICAgICBpZiAoIW5ld3BhcnQubWF0Y2goaG9zdG5hbWVQYXJ0UGF0dGVybikpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkUGFydHMgPSBob3N0cGFydHMuc2xpY2UoMCwgaSlcbiAgICAgICAgICAgIGNvbnN0IG5vdEhvc3QgPSBob3N0cGFydHMuc2xpY2UoaSArIDEpXG4gICAgICAgICAgICBjb25zdCBiaXQgPSBwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFN0YXJ0KVxuICAgICAgICAgICAgaWYgKGJpdCkge1xuICAgICAgICAgICAgICB2YWxpZFBhcnRzLnB1c2goYml0WzFdKVxuICAgICAgICAgICAgICBub3RIb3N0LnVuc2hpZnQoYml0WzJdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdEhvc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJlc3QgPSBub3RIb3N0LmpvaW4oJy4nKSArIHJlc3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaG9zdG5hbWUgPSB2YWxpZFBhcnRzLmpvaW4oJy4nKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5ob3N0bmFtZS5sZW5ndGggPiBob3N0bmFtZU1heExlbikge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9ICcnXG4gICAgfVxuXG4gICAgLy8gc3RyaXAgWyBhbmQgXSBmcm9tIHRoZSBob3N0bmFtZVxuICAgIC8vIHRoZSBob3N0IGZpZWxkIHN0aWxsIHJldGFpbnMgdGhlbSwgdGhvdWdoXG4gICAgaWYgKGlwdjZIb3N0bmFtZSkge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUuc3Vic3RyKDEsIHRoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMilcbiAgICB9XG4gIH1cblxuICAvLyBjaG9wIG9mZiBmcm9tIHRoZSB0YWlsIGZpcnN0LlxuICBjb25zdCBoYXNoID0gcmVzdC5pbmRleE9mKCcjJylcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHRoaXMuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpXG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgaGFzaClcbiAgfVxuICBjb25zdCBxbSA9IHJlc3QuaW5kZXhPZignPycpXG4gIGlmIChxbSAhPT0gLTEpIHtcbiAgICB0aGlzLnNlYXJjaCA9IHJlc3Quc3Vic3RyKHFtKVxuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIHFtKVxuICB9XG4gIGlmIChyZXN0KSB7IHRoaXMucGF0aG5hbWUgPSByZXN0IH1cbiAgaWYgKHNsYXNoZWRQcm90b2NvbFtsb3dlclByb3RvXSAmJlxuICAgICAgdGhpcy5ob3N0bmFtZSAmJiAhdGhpcy5wYXRobmFtZSkge1xuICAgIHRoaXMucGF0aG5hbWUgPSAnJ1xuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuVXJsLnByb3RvdHlwZS5wYXJzZUhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICBsZXQgcG9ydCA9IHBvcnRQYXR0ZXJuLmV4ZWMoaG9zdClcbiAgaWYgKHBvcnQpIHtcbiAgICBwb3J0ID0gcG9ydFswXVxuICAgIGlmIChwb3J0ICE9PSAnOicpIHtcbiAgICAgIHRoaXMucG9ydCA9IHBvcnQuc3Vic3RyKDEpXG4gICAgfVxuICAgIGhvc3QgPSBob3N0LnN1YnN0cigwLCBob3N0Lmxlbmd0aCAtIHBvcnQubGVuZ3RoKVxuICB9XG4gIGlmIChob3N0KSB7IHRoaXMuaG9zdG5hbWUgPSBob3N0IH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdXJsUGFyc2VcbiIsImV4cG9ydCBkZWZhdWx0IC9bIS0jJS1cXCosLVxcLzo7XFw/QFxcWy1cXF1fXFx7XFx9XFx4QTFcXHhBN1xceEFCXFx4QjZcXHhCN1xceEJCXFx4QkZcXHUwMzdFXFx1MDM4N1xcdTA1NUEtXFx1MDU1RlxcdTA1ODlcXHUwNThBXFx1MDVCRVxcdTA1QzBcXHUwNUMzXFx1MDVDNlxcdTA1RjNcXHUwNUY0XFx1MDYwOVxcdTA2MEFcXHUwNjBDXFx1MDYwRFxcdTA2MUJcXHUwNjFELVxcdTA2MUZcXHUwNjZBLVxcdTA2NkRcXHUwNkQ0XFx1MDcwMC1cXHUwNzBEXFx1MDdGNy1cXHUwN0Y5XFx1MDgzMC1cXHUwODNFXFx1MDg1RVxcdTA5NjRcXHUwOTY1XFx1MDk3MFxcdTA5RkRcXHUwQTc2XFx1MEFGMFxcdTBDNzdcXHUwQzg0XFx1MERGNFxcdTBFNEZcXHUwRTVBXFx1MEU1QlxcdTBGMDQtXFx1MEYxMlxcdTBGMTRcXHUwRjNBLVxcdTBGM0RcXHUwRjg1XFx1MEZEMC1cXHUwRkQ0XFx1MEZEOVxcdTBGREFcXHUxMDRBLVxcdTEwNEZcXHUxMEZCXFx1MTM2MC1cXHUxMzY4XFx1MTQwMFxcdTE2NkVcXHUxNjlCXFx1MTY5Q1xcdTE2RUItXFx1MTZFRFxcdTE3MzVcXHUxNzM2XFx1MTdENC1cXHUxN0Q2XFx1MTdEOC1cXHUxN0RBXFx1MTgwMC1cXHUxODBBXFx1MTk0NFxcdTE5NDVcXHUxQTFFXFx1MUExRlxcdTFBQTAtXFx1MUFBNlxcdTFBQTgtXFx1MUFBRFxcdTFCNUEtXFx1MUI2MFxcdTFCN0RcXHUxQjdFXFx1MUJGQy1cXHUxQkZGXFx1MUMzQi1cXHUxQzNGXFx1MUM3RVxcdTFDN0ZcXHUxQ0MwLVxcdTFDQzdcXHUxQ0QzXFx1MjAxMC1cXHUyMDI3XFx1MjAzMC1cXHUyMDQzXFx1MjA0NS1cXHUyMDUxXFx1MjA1My1cXHUyMDVFXFx1MjA3RFxcdTIwN0VcXHUyMDhEXFx1MjA4RVxcdTIzMDgtXFx1MjMwQlxcdTIzMjlcXHUyMzJBXFx1Mjc2OC1cXHUyNzc1XFx1MjdDNVxcdTI3QzZcXHUyN0U2LVxcdTI3RUZcXHUyOTgzLVxcdTI5OThcXHUyOUQ4LVxcdTI5REJcXHUyOUZDXFx1MjlGRFxcdTJDRjktXFx1MkNGQ1xcdTJDRkVcXHUyQ0ZGXFx1MkQ3MFxcdTJFMDAtXFx1MkUyRVxcdTJFMzAtXFx1MkU0RlxcdTJFNTItXFx1MkU1RFxcdTMwMDEtXFx1MzAwM1xcdTMwMDgtXFx1MzAxMVxcdTMwMTQtXFx1MzAxRlxcdTMwMzBcXHUzMDNEXFx1MzBBMFxcdTMwRkJcXHVBNEZFXFx1QTRGRlxcdUE2MEQtXFx1QTYwRlxcdUE2NzNcXHVBNjdFXFx1QTZGMi1cXHVBNkY3XFx1QTg3NC1cXHVBODc3XFx1QThDRVxcdUE4Q0ZcXHVBOEY4LVxcdUE4RkFcXHVBOEZDXFx1QTkyRVxcdUE5MkZcXHVBOTVGXFx1QTlDMS1cXHVBOUNEXFx1QTlERVxcdUE5REZcXHVBQTVDLVxcdUFBNUZcXHVBQURFXFx1QUFERlxcdUFBRjBcXHVBQUYxXFx1QUJFQlxcdUZEM0VcXHVGRDNGXFx1RkUxMC1cXHVGRTE5XFx1RkUzMC1cXHVGRTUyXFx1RkU1NC1cXHVGRTYxXFx1RkU2M1xcdUZFNjhcXHVGRTZBXFx1RkU2QlxcdUZGMDEtXFx1RkYwM1xcdUZGMDUtXFx1RkYwQVxcdUZGMEMtXFx1RkYwRlxcdUZGMUFcXHVGRjFCXFx1RkYxRlxcdUZGMjBcXHVGRjNCLVxcdUZGM0RcXHVGRjNGXFx1RkY1QlxcdUZGNURcXHVGRjVGLVxcdUZGNjVdfFxcdUQ4MDBbXFx1REQwMC1cXHVERDAyXFx1REY5RlxcdURGRDBdfFxcdUQ4MDFcXHVERDZGfFxcdUQ4MDJbXFx1REM1N1xcdUREMUZcXHVERDNGXFx1REU1MC1cXHVERTU4XFx1REU3RlxcdURFRjAtXFx1REVGNlxcdURGMzktXFx1REYzRlxcdURGOTktXFx1REY5Q118XFx1RDgwM1tcXHVERUFEXFx1REY1NS1cXHVERjU5XFx1REY4Ni1cXHVERjg5XXxcXHVEODA0W1xcdURDNDctXFx1REM0RFxcdURDQkJcXHVEQ0JDXFx1RENCRS1cXHVEQ0MxXFx1REQ0MC1cXHVERDQzXFx1REQ3NFxcdURENzVcXHVEREM1LVxcdUREQzhcXHVERENEXFx1REREQlxcdUREREQtXFx1RERERlxcdURFMzgtXFx1REUzRFxcdURFQTldfFxcdUQ4MDVbXFx1REM0Qi1cXHVEQzRGXFx1REM1QVxcdURDNUJcXHVEQzVEXFx1RENDNlxcdUREQzEtXFx1REREN1xcdURFNDEtXFx1REU0M1xcdURFNjAtXFx1REU2Q1xcdURFQjlcXHVERjNDLVxcdURGM0VdfFxcdUQ4MDZbXFx1REMzQlxcdURENDQtXFx1REQ0NlxcdURERTJcXHVERTNGLVxcdURFNDZcXHVERTlBLVxcdURFOUNcXHVERTlFLVxcdURFQTJcXHVERjAwLVxcdURGMDldfFxcdUQ4MDdbXFx1REM0MS1cXHVEQzQ1XFx1REM3MFxcdURDNzFcXHVERUY3XFx1REVGOFxcdURGNDMtXFx1REY0RlxcdURGRkZdfFxcdUQ4MDlbXFx1REM3MC1cXHVEQzc0XXxcXHVEODBCW1xcdURGRjFcXHVERkYyXXxcXHVEODFBW1xcdURFNkVcXHVERTZGXFx1REVGNVxcdURGMzctXFx1REYzQlxcdURGNDRdfFxcdUQ4MUJbXFx1REU5Ny1cXHVERTlBXFx1REZFMl18XFx1RDgyRlxcdURDOUZ8XFx1RDgzNltcXHVERTg3LVxcdURFOEJdfFxcdUQ4M0FbXFx1REQ1RVxcdURENUZdLyIsImV4cG9ydCBkZWZhdWx0IC9bXFwkXFwrPC0+XFxeYFxcfH5cXHhBMi1cXHhBNlxceEE4XFx4QTlcXHhBQ1xceEFFLVxceEIxXFx4QjRcXHhCOFxceEQ3XFx4RjdcXHUwMkMyLVxcdTAyQzVcXHUwMkQyLVxcdTAyREZcXHUwMkU1LVxcdTAyRUJcXHUwMkVEXFx1MDJFRi1cXHUwMkZGXFx1MDM3NVxcdTAzODRcXHUwMzg1XFx1MDNGNlxcdTA0ODJcXHUwNThELVxcdTA1OEZcXHUwNjA2LVxcdTA2MDhcXHUwNjBCXFx1MDYwRVxcdTA2MEZcXHUwNkRFXFx1MDZFOVxcdTA2RkRcXHUwNkZFXFx1MDdGNlxcdTA3RkVcXHUwN0ZGXFx1MDg4OFxcdTA5RjJcXHUwOUYzXFx1MDlGQVxcdTA5RkJcXHUwQUYxXFx1MEI3MFxcdTBCRjMtXFx1MEJGQVxcdTBDN0ZcXHUwRDRGXFx1MEQ3OVxcdTBFM0ZcXHUwRjAxLVxcdTBGMDNcXHUwRjEzXFx1MEYxNS1cXHUwRjE3XFx1MEYxQS1cXHUwRjFGXFx1MEYzNFxcdTBGMzZcXHUwRjM4XFx1MEZCRS1cXHUwRkM1XFx1MEZDNy1cXHUwRkNDXFx1MEZDRVxcdTBGQ0ZcXHUwRkQ1LVxcdTBGRDhcXHUxMDlFXFx1MTA5RlxcdTEzOTAtXFx1MTM5OVxcdTE2NkRcXHUxN0RCXFx1MTk0MFxcdTE5REUtXFx1MTlGRlxcdTFCNjEtXFx1MUI2QVxcdTFCNzQtXFx1MUI3Q1xcdTFGQkRcXHUxRkJGLVxcdTFGQzFcXHUxRkNELVxcdTFGQ0ZcXHUxRkRELVxcdTFGREZcXHUxRkVELVxcdTFGRUZcXHUxRkZEXFx1MUZGRVxcdTIwNDRcXHUyMDUyXFx1MjA3QS1cXHUyMDdDXFx1MjA4QS1cXHUyMDhDXFx1MjBBMC1cXHUyMEMwXFx1MjEwMFxcdTIxMDFcXHUyMTAzLVxcdTIxMDZcXHUyMTA4XFx1MjEwOVxcdTIxMTRcXHUyMTE2LVxcdTIxMThcXHUyMTFFLVxcdTIxMjNcXHUyMTI1XFx1MjEyN1xcdTIxMjlcXHUyMTJFXFx1MjEzQVxcdTIxM0JcXHUyMTQwLVxcdTIxNDRcXHUyMTRBLVxcdTIxNERcXHUyMTRGXFx1MjE4QVxcdTIxOEJcXHUyMTkwLVxcdTIzMDdcXHUyMzBDLVxcdTIzMjhcXHUyMzJCLVxcdTI0MjZcXHUyNDQwLVxcdTI0NEFcXHUyNDlDLVxcdTI0RTlcXHUyNTAwLVxcdTI3NjdcXHUyNzk0LVxcdTI3QzRcXHUyN0M3LVxcdTI3RTVcXHUyN0YwLVxcdTI5ODJcXHUyOTk5LVxcdTI5RDdcXHUyOURDLVxcdTI5RkJcXHUyOUZFLVxcdTJCNzNcXHUyQjc2LVxcdTJCOTVcXHUyQjk3LVxcdTJCRkZcXHUyQ0U1LVxcdTJDRUFcXHUyRTUwXFx1MkU1MVxcdTJFODAtXFx1MkU5OVxcdTJFOUItXFx1MkVGM1xcdTJGMDAtXFx1MkZENVxcdTJGRjAtXFx1MkZGRlxcdTMwMDRcXHUzMDEyXFx1MzAxM1xcdTMwMjBcXHUzMDM2XFx1MzAzN1xcdTMwM0VcXHUzMDNGXFx1MzA5QlxcdTMwOUNcXHUzMTkwXFx1MzE5MVxcdTMxOTYtXFx1MzE5RlxcdTMxQzAtXFx1MzFFM1xcdTMxRUZcXHUzMjAwLVxcdTMyMUVcXHUzMjJBLVxcdTMyNDdcXHUzMjUwXFx1MzI2MC1cXHUzMjdGXFx1MzI4QS1cXHUzMkIwXFx1MzJDMC1cXHUzM0ZGXFx1NERDMC1cXHU0REZGXFx1QTQ5MC1cXHVBNEM2XFx1QTcwMC1cXHVBNzE2XFx1QTcyMFxcdUE3MjFcXHVBNzg5XFx1QTc4QVxcdUE4MjgtXFx1QTgyQlxcdUE4MzYtXFx1QTgzOVxcdUFBNzctXFx1QUE3OVxcdUFCNUJcXHVBQjZBXFx1QUI2QlxcdUZCMjlcXHVGQkIyLVxcdUZCQzJcXHVGRDQwLVxcdUZENEZcXHVGRENGXFx1RkRGQy1cXHVGREZGXFx1RkU2MlxcdUZFNjQtXFx1RkU2NlxcdUZFNjlcXHVGRjA0XFx1RkYwQlxcdUZGMUMtXFx1RkYxRVxcdUZGM0VcXHVGRjQwXFx1RkY1Q1xcdUZGNUVcXHVGRkUwLVxcdUZGRTZcXHVGRkU4LVxcdUZGRUVcXHVGRkZDXFx1RkZGRF18XFx1RDgwMFtcXHVERDM3LVxcdUREM0ZcXHVERDc5LVxcdUREODlcXHVERDhDLVxcdUREOEVcXHVERDkwLVxcdUREOUNcXHVEREEwXFx1REREMC1cXHVEREZDXXxcXHVEODAyW1xcdURDNzdcXHVEQzc4XFx1REVDOF18XFx1RDgwNVxcdURGM0Z8XFx1RDgwN1tcXHVERkQ1LVxcdURGRjFdfFxcdUQ4MUFbXFx1REYzQy1cXHVERjNGXFx1REY0NV18XFx1RDgyRlxcdURDOUN8XFx1RDgzM1tcXHVERjUwLVxcdURGQzNdfFxcdUQ4MzRbXFx1REMwMC1cXHVEQ0Y1XFx1REQwMC1cXHVERDI2XFx1REQyOS1cXHVERDY0XFx1REQ2QS1cXHVERDZDXFx1REQ4M1xcdUREODRcXHVERDhDLVxcdUREQTlcXHVEREFFLVxcdURERUFcXHVERTAwLVxcdURFNDFcXHVERTQ1XFx1REYwMC1cXHVERjU2XXxcXHVEODM1W1xcdURFQzFcXHVERURCXFx1REVGQlxcdURGMTVcXHVERjM1XFx1REY0RlxcdURGNkZcXHVERjg5XFx1REZBOVxcdURGQzNdfFxcdUQ4MzZbXFx1REMwMC1cXHVEREZGXFx1REUzNy1cXHVERTNBXFx1REU2RC1cXHVERTc0XFx1REU3Ni1cXHVERTgzXFx1REU4NVxcdURFODZdfFxcdUQ4MzhbXFx1REQ0RlxcdURFRkZdfFxcdUQ4M0JbXFx1RENBQ1xcdURDQjBcXHVERDJFXFx1REVGMFxcdURFRjFdfFxcdUQ4M0NbXFx1REMwMC1cXHVEQzJCXFx1REMzMC1cXHVEQzkzXFx1RENBMC1cXHVEQ0FFXFx1RENCMS1cXHVEQ0JGXFx1RENDMS1cXHVEQ0NGXFx1RENEMS1cXHVEQ0Y1XFx1REQwRC1cXHVEREFEXFx1RERFNi1cXHVERTAyXFx1REUxMC1cXHVERTNCXFx1REU0MC1cXHVERTQ4XFx1REU1MFxcdURFNTFcXHVERTYwLVxcdURFNjVcXHVERjAwLVxcdURGRkZdfFxcdUQ4M0RbXFx1REMwMC1cXHVERUQ3XFx1REVEQy1cXHVERUVDXFx1REVGMC1cXHVERUZDXFx1REYwMC1cXHVERjc2XFx1REY3Qi1cXHVERkQ5XFx1REZFMC1cXHVERkVCXFx1REZGMF18XFx1RDgzRVtcXHVEQzAwLVxcdURDMEJcXHVEQzEwLVxcdURDNDdcXHVEQzUwLVxcdURDNTlcXHVEQzYwLVxcdURDODdcXHVEQzkwLVxcdURDQURcXHVEQ0IwXFx1RENCMVxcdUREMDAtXFx1REU1M1xcdURFNjAtXFx1REU2RFxcdURFNzAtXFx1REU3Q1xcdURFODAtXFx1REU4OFxcdURFOTAtXFx1REVCRFxcdURFQkYtXFx1REVDNVxcdURFQ0UtXFx1REVEQlxcdURFRTAtXFx1REVFOFxcdURFRjAtXFx1REVGOFxcdURGMDAtXFx1REY5MlxcdURGOTQtXFx1REZDQV0vIiwiZXhwb3J0IGRlZmF1bHQgL1tcXDAtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl18W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXXxbXFx1RDgwMC1cXHVEQkZGXSg/IVtcXHVEQzAwLVxcdURGRkZdKXwoPzpbXlxcdUQ4MDAtXFx1REJGRl18XilbXFx1REMwMC1cXHVERkZGXS8iLCJleHBvcnQgZGVmYXVsdCAvW1xcMC1cXHgxRlxceDdGLVxceDlGXS8iLCJleHBvcnQgZGVmYXVsdCAvW1xceEFEXFx1MDYwMC1cXHUwNjA1XFx1MDYxQ1xcdTA2RERcXHUwNzBGXFx1MDg5MFxcdTA4OTFcXHUwOEUyXFx1MTgwRVxcdTIwMEItXFx1MjAwRlxcdTIwMkEtXFx1MjAyRVxcdTIwNjAtXFx1MjA2NFxcdTIwNjYtXFx1MjA2RlxcdUZFRkZcXHVGRkY5LVxcdUZGRkJdfFxcdUQ4MDRbXFx1RENCRFxcdURDQ0RdfFxcdUQ4MERbXFx1REMzMC1cXHVEQzNGXXxcXHVEODJGW1xcdURDQTAtXFx1RENBM118XFx1RDgzNFtcXHVERDczLVxcdUREN0FdfFxcdURCNDBbXFx1REMwMVxcdURDMjAtXFx1REM3Rl0vIiwiZXhwb3J0IGRlZmF1bHQgL1sgXFx4QTBcXHUxNjgwXFx1MjAwMC1cXHUyMDBBXFx1MjAyOFxcdTIwMjlcXHUyMDJGXFx1MjA1RlxcdTMwMDBdLyIsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCwiLy8gVXRpbGl0aWVzXG4vL1xuXG5pbXBvcnQgKiBhcyBtZHVybCBmcm9tICdtZHVybCdcbmltcG9ydCAqIGFzIHVjbWljcm8gZnJvbSAndWMubWljcm8nXG5pbXBvcnQgeyBkZWNvZGVIVE1MIH0gZnJvbSAnZW50aXRpZXMnXG5cbmZ1bmN0aW9uIF9jbGFzcyAob2JqKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSB9XG5cbmZ1bmN0aW9uIGlzU3RyaW5nIChvYmopIHsgcmV0dXJuIF9jbGFzcyhvYmopID09PSAnW29iamVjdCBTdHJpbmddJyB9XG5cbmNvbnN0IF9oYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcblxuZnVuY3Rpb24gaGFzIChvYmplY3QsIGtleSkge1xuICByZXR1cm4gX2hhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpXG59XG5cbi8vIE1lcmdlIG9iamVjdHNcbi8vXG5mdW5jdGlvbiBhc3NpZ24gKG9iaiAvKiBmcm9tMSwgZnJvbTIsIGZyb20zLCAuLi4gKi8pIHtcbiAgY29uc3Qgc291cmNlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcblxuICBzb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIGlmICghc291cmNlKSB7IHJldHVybiB9XG5cbiAgICBpZiAodHlwZW9mIHNvdXJjZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc291cmNlICsgJ211c3QgYmUgb2JqZWN0JylcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgb2JqW2tleV0gPSBzb3VyY2Vba2V5XVxuICAgIH0pXG4gIH0pXG5cbiAgcmV0dXJuIG9ialxufVxuXG4vLyBSZW1vdmUgZWxlbWVudCBmcm9tIGFycmF5IGFuZCBwdXQgYW5vdGhlciBhcnJheSBhdCB0aG9zZSBwb3NpdGlvbi5cbi8vIFVzZWZ1bCBmb3Igc29tZSBvcGVyYXRpb25zIHdpdGggdG9rZW5zXG5mdW5jdGlvbiBhcnJheVJlcGxhY2VBdCAoc3JjLCBwb3MsIG5ld0VsZW1lbnRzKSB7XG4gIHJldHVybiBbXS5jb25jYXQoc3JjLnNsaWNlKDAsIHBvcyksIG5ld0VsZW1lbnRzLCBzcmMuc2xpY2UocG9zICsgMSkpXG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRFbnRpdHlDb2RlIChjKSB7XG4gIC8qIGVzbGludCBuby1iaXR3aXNlOjAgKi9cbiAgLy8gYnJva2VuIHNlcXVlbmNlXG4gIGlmIChjID49IDB4RDgwMCAmJiBjIDw9IDB4REZGRikgeyByZXR1cm4gZmFsc2UgfVxuICAvLyBuZXZlciB1c2VkXG4gIGlmIChjID49IDB4RkREMCAmJiBjIDw9IDB4RkRFRikgeyByZXR1cm4gZmFsc2UgfVxuICBpZiAoKGMgJiAweEZGRkYpID09PSAweEZGRkYgfHwgKGMgJiAweEZGRkYpID09PSAweEZGRkUpIHsgcmV0dXJuIGZhbHNlIH1cbiAgLy8gY29udHJvbCBjb2Rlc1xuICBpZiAoYyA+PSAweDAwICYmIGMgPD0gMHgwOCkgeyByZXR1cm4gZmFsc2UgfVxuICBpZiAoYyA9PT0gMHgwQikgeyByZXR1cm4gZmFsc2UgfVxuICBpZiAoYyA+PSAweDBFICYmIGMgPD0gMHgxRikgeyByZXR1cm4gZmFsc2UgfVxuICBpZiAoYyA+PSAweDdGICYmIGMgPD0gMHg5RikgeyByZXR1cm4gZmFsc2UgfVxuICAvLyBvdXQgb2YgcmFuZ2VcbiAgaWYgKGMgPiAweDEwRkZGRikgeyByZXR1cm4gZmFsc2UgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmcm9tQ29kZVBvaW50IChjKSB7XG4gIC8qIGVzbGludCBuby1iaXR3aXNlOjAgKi9cbiAgaWYgKGMgPiAweGZmZmYpIHtcbiAgICBjIC09IDB4MTAwMDBcbiAgICBjb25zdCBzdXJyb2dhdGUxID0gMHhkODAwICsgKGMgPj4gMTApXG4gICAgY29uc3Qgc3Vycm9nYXRlMiA9IDB4ZGMwMCArIChjICYgMHgzZmYpXG5cbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShzdXJyb2dhdGUxLCBzdXJyb2dhdGUyKVxuICB9XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpXG59XG5cbmNvbnN0IFVORVNDQVBFX01EX1JFICA9IC9cXFxcKFshXCIjJCUmJygpKissXFwtLi86Ozw9Pj9AW1xcXFxcXF1eX2B7fH1+XSkvZ1xuY29uc3QgRU5USVRZX1JFICAgICAgID0gLyYoW2EteiNdW2EtejAtOV17MSwzMX0pOy9naVxuY29uc3QgVU5FU0NBUEVfQUxMX1JFID0gbmV3IFJlZ0V4cChVTkVTQ0FQRV9NRF9SRS5zb3VyY2UgKyAnfCcgKyBFTlRJVFlfUkUuc291cmNlLCAnZ2knKVxuXG5jb25zdCBESUdJVEFMX0VOVElUWV9URVNUX1JFID0gL14jKCg/OnhbYS1mMC05XXsxLDh9fFswLTldezEsOH0pKSQvaVxuXG5mdW5jdGlvbiByZXBsYWNlRW50aXR5UGF0dGVybiAobWF0Y2gsIG5hbWUpIHtcbiAgaWYgKG5hbWUuY2hhckNvZGVBdCgwKSA9PT0gMHgyMy8qICMgKi8gJiYgRElHSVRBTF9FTlRJVFlfVEVTVF9SRS50ZXN0KG5hbWUpKSB7XG4gICAgY29uc3QgY29kZSA9IG5hbWVbMV0udG9Mb3dlckNhc2UoKSA9PT0gJ3gnXG4gICAgICA/IHBhcnNlSW50KG5hbWUuc2xpY2UoMiksIDE2KVxuICAgICAgOiBwYXJzZUludChuYW1lLnNsaWNlKDEpLCAxMClcblxuICAgIGlmIChpc1ZhbGlkRW50aXR5Q29kZShjb2RlKSkge1xuICAgICAgcmV0dXJuIGZyb21Db2RlUG9pbnQoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2hcbiAgfVxuXG4gIGNvbnN0IGRlY29kZWQgPSBkZWNvZGVIVE1MKG1hdGNoKVxuICBpZiAoZGVjb2RlZCAhPT0gbWF0Y2gpIHtcbiAgICByZXR1cm4gZGVjb2RlZFxuICB9XG5cbiAgcmV0dXJuIG1hdGNoXG59XG5cbi8qIGZ1bmN0aW9uIHJlcGxhY2VFbnRpdGllcyhzdHIpIHtcbiAgaWYgKHN0ci5pbmRleE9mKCcmJykgPCAwKSB7IHJldHVybiBzdHI7IH1cblxuICByZXR1cm4gc3RyLnJlcGxhY2UoRU5USVRZX1JFLCByZXBsYWNlRW50aXR5UGF0dGVybik7XG59ICovXG5cbmZ1bmN0aW9uIHVuZXNjYXBlTWQgKHN0cikge1xuICBpZiAoc3RyLmluZGV4T2YoJ1xcXFwnKSA8IDApIHsgcmV0dXJuIHN0ciB9XG4gIHJldHVybiBzdHIucmVwbGFjZShVTkVTQ0FQRV9NRF9SRSwgJyQxJylcbn1cblxuZnVuY3Rpb24gdW5lc2NhcGVBbGwgKHN0cikge1xuICBpZiAoc3RyLmluZGV4T2YoJ1xcXFwnKSA8IDAgJiYgc3RyLmluZGV4T2YoJyYnKSA8IDApIHsgcmV0dXJuIHN0ciB9XG5cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKFVORVNDQVBFX0FMTF9SRSwgZnVuY3Rpb24gKG1hdGNoLCBlc2NhcGVkLCBlbnRpdHkpIHtcbiAgICBpZiAoZXNjYXBlZCkgeyByZXR1cm4gZXNjYXBlZCB9XG4gICAgcmV0dXJuIHJlcGxhY2VFbnRpdHlQYXR0ZXJuKG1hdGNoLCBlbnRpdHkpXG4gIH0pXG59XG5cbmNvbnN0IEhUTUxfRVNDQVBFX1RFU1RfUkUgPSAvWyY8PlwiXS9cbmNvbnN0IEhUTUxfRVNDQVBFX1JFUExBQ0VfUkUgPSAvWyY8PlwiXS9nXG5jb25zdCBIVE1MX1JFUExBQ0VNRU5UUyA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPCc6ICcmbHQ7JyxcbiAgJz4nOiAnJmd0OycsXG4gICdcIic6ICcmcXVvdDsnXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VVbnNhZmVDaGFyIChjaCkge1xuICByZXR1cm4gSFRNTF9SRVBMQUNFTUVOVFNbY2hdXG59XG5cbmZ1bmN0aW9uIGVzY2FwZUh0bWwgKHN0cikge1xuICBpZiAoSFRNTF9FU0NBUEVfVEVTVF9SRS50ZXN0KHN0cikpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoSFRNTF9FU0NBUEVfUkVQTEFDRV9SRSwgcmVwbGFjZVVuc2FmZUNoYXIpXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5jb25zdCBSRUdFWFBfRVNDQVBFX1JFID0gL1suPyorXiRbXFxdXFxcXCgpe318LV0vZ1xuXG5mdW5jdGlvbiBlc2NhcGVSRSAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShSRUdFWFBfRVNDQVBFX1JFLCAnXFxcXCQmJylcbn1cblxuZnVuY3Rpb24gaXNTcGFjZSAoY29kZSkge1xuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICBjYXNlIDB4MDk6XG4gICAgY2FzZSAweDIwOlxuICAgICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLy8gWnMgKHVuaWNvZGUgY2xhc3MpIHx8IFtcXHRcXGZcXHZcXHJcXG5dXG5mdW5jdGlvbiBpc1doaXRlU3BhY2UgKGNvZGUpIHtcbiAgaWYgKGNvZGUgPj0gMHgyMDAwICYmIGNvZGUgPD0gMHgyMDBBKSB7IHJldHVybiB0cnVlIH1cbiAgc3dpdGNoIChjb2RlKSB7XG4gICAgY2FzZSAweDA5OiAvLyBcXHRcbiAgICBjYXNlIDB4MEE6IC8vIFxcblxuICAgIGNhc2UgMHgwQjogLy8gXFx2XG4gICAgY2FzZSAweDBDOiAvLyBcXGZcbiAgICBjYXNlIDB4MEQ6IC8vIFxcclxuICAgIGNhc2UgMHgyMDpcbiAgICBjYXNlIDB4QTA6XG4gICAgY2FzZSAweDE2ODA6XG4gICAgY2FzZSAweDIwMkY6XG4gICAgY2FzZSAweDIwNUY6XG4gICAgY2FzZSAweDMwMDA6XG4gICAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cbi8vIEN1cnJlbnRseSB3aXRob3V0IGFzdHJhbCBjaGFyYWN0ZXJzIHN1cHBvcnQuXG5mdW5jdGlvbiBpc1B1bmN0Q2hhciAoY2gpIHtcbiAgcmV0dXJuIHVjbWljcm8uUC50ZXN0KGNoKSB8fCB1Y21pY3JvLlMudGVzdChjaClcbn1cblxuLy8gTWFya2Rvd24gQVNDSUkgcHVuY3R1YXRpb24gY2hhcmFjdGVycy5cbi8vXG4vLyAhLCBcIiwgIywgJCwgJSwgJiwgJywgKCwgKSwgKiwgKywgLCwgLSwgLiwgLywgOiwgOywgPCwgPSwgPiwgPywgQCwgWywgXFwsIF0sIF4sIF8sIGAsIHssIHwsIH0sIG9yIH5cbi8vIGh0dHA6Ly9zcGVjLmNvbW1vbm1hcmsub3JnLzAuMTUvI2FzY2lpLXB1bmN0dWF0aW9uLWNoYXJhY3RlclxuLy9cbi8vIERvbid0IGNvbmZ1c2Ugd2l0aCB1bmljb2RlIHB1bmN0dWF0aW9uICEhISBJdCBsYWNrcyBzb21lIGNoYXJzIGluIGFzY2lpIHJhbmdlLlxuLy9cbmZ1bmN0aW9uIGlzTWRBc2NpaVB1bmN0IChjaCkge1xuICBzd2l0Y2ggKGNoKSB7XG4gICAgY2FzZSAweDIxLyogISAqLzpcbiAgICBjYXNlIDB4MjIvKiBcIiAqLzpcbiAgICBjYXNlIDB4MjMvKiAjICovOlxuICAgIGNhc2UgMHgyNC8qICQgKi86XG4gICAgY2FzZSAweDI1LyogJSAqLzpcbiAgICBjYXNlIDB4MjYvKiAmICovOlxuICAgIGNhc2UgMHgyNy8qICcgKi86XG4gICAgY2FzZSAweDI4LyogKCAqLzpcbiAgICBjYXNlIDB4MjkvKiApICovOlxuICAgIGNhc2UgMHgyQS8qICogKi86XG4gICAgY2FzZSAweDJCLyogKyAqLzpcbiAgICBjYXNlIDB4MkMvKiAsICovOlxuICAgIGNhc2UgMHgyRC8qIC0gKi86XG4gICAgY2FzZSAweDJFLyogLiAqLzpcbiAgICBjYXNlIDB4MkYvKiAvICovOlxuICAgIGNhc2UgMHgzQS8qIDogKi86XG4gICAgY2FzZSAweDNCLyogOyAqLzpcbiAgICBjYXNlIDB4M0MvKiA8ICovOlxuICAgIGNhc2UgMHgzRC8qID0gKi86XG4gICAgY2FzZSAweDNFLyogPiAqLzpcbiAgICBjYXNlIDB4M0YvKiA/ICovOlxuICAgIGNhc2UgMHg0MC8qIEAgKi86XG4gICAgY2FzZSAweDVCLyogWyAqLzpcbiAgICBjYXNlIDB4NUMvKiBcXCAqLzpcbiAgICBjYXNlIDB4NUQvKiBdICovOlxuICAgIGNhc2UgMHg1RS8qIF4gKi86XG4gICAgY2FzZSAweDVGLyogXyAqLzpcbiAgICBjYXNlIDB4NjAvKiBgICovOlxuICAgIGNhc2UgMHg3Qi8qIHsgKi86XG4gICAgY2FzZSAweDdDLyogfCAqLzpcbiAgICBjYXNlIDB4N0QvKiB9ICovOlxuICAgIGNhc2UgMHg3RS8qIH4gKi86XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vLyBIZXBsZXIgdG8gdW5pZnkgW3JlZmVyZW5jZSBsYWJlbHNdLlxuLy9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlZmVyZW5jZSAoc3RyKSB7XG4gIC8vIFRyaW0gYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2VcbiAgLy9cbiAgc3RyID0gc3RyLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJylcblxuICAvLyBJbiBub2RlIHYxMCAn4bqeJy50b0xvd2VyQ2FzZSgpID09PSAn4bm+Jywgd2hpY2ggaXMgcHJlc3VtZWQgdG8gYmUgYSBidWdcbiAgLy8gZml4ZWQgaW4gdjEyIChjb3VsZG4ndCBmaW5kIGFueSBkZXRhaWxzKS5cbiAgLy9cbiAgLy8gU28gdHJlYXQgdGhpcyBvbmUgYXMgYSBzcGVjaWFsIGNhc2VcbiAgLy8gKHJlbW92ZSB0aGlzIHdoZW4gbm9kZSB2MTAgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCkuXG4gIC8vXG4gIGlmICgn4bqeJy50b0xvd2VyQ2FzZSgpID09PSAn4bm+Jykge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC/hup4vZywgJ8OfJylcbiAgfVxuXG4gIC8vIC50b0xvd2VyQ2FzZSgpLnRvVXBwZXJDYXNlKCkgc2hvdWxkIGdldCByaWQgb2YgYWxsIGRpZmZlcmVuY2VzXG4gIC8vIGJldHdlZW4gbGV0dGVyIHZhcmlhbnRzLlxuICAvL1xuICAvLyBTaW1wbGUgLnRvTG93ZXJDYXNlKCkgZG9lc24ndCBub3JtYWxpemUgMTI1IGNvZGUgcG9pbnRzIGNvcnJlY3RseSxcbiAgLy8gYW5kIC50b1VwcGVyQ2FzZSBkb2Vzbid0IG5vcm1hbGl6ZSA2IG9mIHRoZW0gKGxpc3Qgb2YgZXhjZXB0aW9uczpcbiAgLy8gxLAsIM+0LCDhup4sIOKEpiwg4oSqLCDihKsgLSB0aG9zZSBhcmUgYWxyZWFkeSB1cHBlcmNhc2VkLCBidXQgaGF2ZSBkaWZmZXJlbnRseVxuICAvLyB1cHBlcmNhc2VkIHZlcnNpb25zKS5cbiAgLy9cbiAgLy8gSGVyZSdzIGFuIGV4YW1wbGUgc2hvd2luZyBob3cgaXQgaGFwcGVucy4gTGV0cyB0YWtlIGdyZWVrIGxldHRlciBvbWVnYTpcbiAgLy8gdXBwZXJjYXNlIFUrMDM5OCAozpgpLCBVKzAzZjQgKM+0KSBhbmQgbG93ZXJjYXNlIFUrMDNiOCAozrgpLCBVKzAzZDEgKM+RKVxuICAvL1xuICAvLyBVbmljb2RlIGVudHJpZXM6XG4gIC8vIDAzOTg7R1JFRUsgQ0FQSVRBTCBMRVRURVIgVEhFVEE7THU7MDtMOzs7OztOOzs7OzAzQjg7XG4gIC8vIDAzQjg7R1JFRUsgU01BTEwgTEVUVEVSIFRIRVRBO0xsOzA7TDs7Ozs7Tjs7OzAzOTg7OzAzOThcbiAgLy8gMDNEMTtHUkVFSyBUSEVUQSBTWU1CT0w7TGw7MDtMOzxjb21wYXQ+IDAzQjg7Ozs7TjtHUkVFSyBTTUFMTCBMRVRURVIgU0NSSVBUIFRIRVRBOzswMzk4OzswMzk4XG4gIC8vIDAzRjQ7R1JFRUsgQ0FQSVRBTCBUSEVUQSBTWU1CT0w7THU7MDtMOzxjb21wYXQ+IDAzOTg7Ozs7Tjs7OzswM0I4O1xuICAvL1xuICAvLyBDYXNlLWluc2Vuc2l0aXZlIGNvbXBhcmlzb24gc2hvdWxkIHRyZWF0IGFsbCBvZiB0aGVtIGFzIGVxdWl2YWxlbnQuXG4gIC8vXG4gIC8vIEJ1dCAudG9Mb3dlckNhc2UoKSBkb2Vzbid0IGNoYW5nZSDPkSAoaXQncyBhbHJlYWR5IGxvd2VyY2FzZSksXG4gIC8vIGFuZCAudG9VcHBlckNhc2UoKSBkb2Vzbid0IGNoYW5nZSDPtCAoYWxyZWFkeSB1cHBlcmNhc2UpLlxuICAvL1xuICAvLyBBcHBseWluZyBmaXJzdCBsb3dlciB0aGVuIHVwcGVyIGNhc2Ugbm9ybWFsaXplcyBhbnkgY2hhcmFjdGVyOlxuICAvLyAnXFx1MDM5OFxcdTAzZjRcXHUwM2I4XFx1MDNkMScudG9Mb3dlckNhc2UoKS50b1VwcGVyQ2FzZSgpID09PSAnXFx1MDM5OFxcdTAzOThcXHUwMzk4XFx1MDM5OCdcbiAgLy9cbiAgLy8gTm90ZTogdGhpcyBpcyBlcXVpdmFsZW50IHRvIHVuaWNvZGUgY2FzZSBmb2xkaW5nOyB1bmljb2RlIG5vcm1hbGl6YXRpb25cbiAgLy8gaXMgYSBkaWZmZXJlbnQgc3RlcCB0aGF0IGlzIG5vdCByZXF1aXJlZCBoZXJlLlxuICAvL1xuICAvLyBGaW5hbCByZXN1bHQgc2hvdWxkIGJlIHVwcGVyY2FzZWQsIGJlY2F1c2UgaXQncyBsYXRlciBzdG9yZWQgaW4gYW4gb2JqZWN0XG4gIC8vICh0aGlzIGF2b2lkIGEgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIG1lbWJlcnMsXG4gIC8vIG1vc3Qgbm90YWJseSwgYF9fcHJvdG9fX2ApXG4gIC8vXG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS50b1VwcGVyQ2FzZSgpXG59XG5cbi8vIFJlLWV4cG9ydCBsaWJyYXJpZXMgY29tbW9ubHkgdXNlZCBpbiBib3RoIG1hcmtkb3duLWl0IGFuZCBpdHMgcGx1Z2lucyxcbi8vIHNvIHBsdWdpbnMgd29uJ3QgaGF2ZSB0byBkZXBlbmQgb24gdGhlbSBleHBsaWNpdGx5LCB3aGljaCByZWR1Y2VzIHRoZWlyXG4vLyBidW5kbGVkIHNpemUgKGUuZy4gYSBicm93c2VyIGJ1aWxkKS5cbi8vXG5jb25zdCBsaWIgPSB7IG1kdXJsLCB1Y21pY3JvIH1cblxuZXhwb3J0IHtcbiAgbGliLFxuICBhc3NpZ24sXG4gIGlzU3RyaW5nLFxuICBoYXMsXG4gIHVuZXNjYXBlTWQsXG4gIHVuZXNjYXBlQWxsLFxuICBpc1ZhbGlkRW50aXR5Q29kZSxcbiAgZnJvbUNvZGVQb2ludCxcbiAgZXNjYXBlSHRtbCxcbiAgYXJyYXlSZXBsYWNlQXQsXG4gIGlzU3BhY2UsXG4gIGlzV2hpdGVTcGFjZSxcbiAgaXNNZEFzY2lpUHVuY3QsXG4gIGlzUHVuY3RDaGFyLFxuICBlc2NhcGVSRSxcbiAgbm9ybWFsaXplUmVmZXJlbmNlXG59XG4iLCIvLyBQYXJzZSBsaW5rIGxhYmVsXG4vL1xuLy8gdGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgZmlyc3QgY2hhcmFjdGVyIChcIltcIikgYWxyZWFkeSBtYXRjaGVzO1xuLy8gcmV0dXJucyB0aGUgZW5kIG9mIHRoZSBsYWJlbFxuLy9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VMaW5rTGFiZWwgKHN0YXRlLCBzdGFydCwgZGlzYWJsZU5lc3RlZCkge1xuICBsZXQgbGV2ZWwsIGZvdW5kLCBtYXJrZXIsIHByZXZQb3NcblxuICBjb25zdCBtYXggPSBzdGF0ZS5wb3NNYXhcbiAgY29uc3Qgb2xkUG9zID0gc3RhdGUucG9zXG5cbiAgc3RhdGUucG9zID0gc3RhcnQgKyAxXG4gIGxldmVsID0gMVxuXG4gIHdoaWxlIChzdGF0ZS5wb3MgPCBtYXgpIHtcbiAgICBtYXJrZXIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChzdGF0ZS5wb3MpXG4gICAgaWYgKG1hcmtlciA9PT0gMHg1RCAvKiBdICovKSB7XG4gICAgICBsZXZlbC0tXG4gICAgICBpZiAobGV2ZWwgPT09IDApIHtcbiAgICAgICAgZm91bmQgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJldlBvcyA9IHN0YXRlLnBvc1xuICAgIHN0YXRlLm1kLmlubGluZS5za2lwVG9rZW4oc3RhdGUpXG4gICAgaWYgKG1hcmtlciA9PT0gMHg1QiAvKiBbICovKSB7XG4gICAgICBpZiAocHJldlBvcyA9PT0gc3RhdGUucG9zIC0gMSkge1xuICAgICAgICAvLyBpbmNyZWFzZSBsZXZlbCBpZiB3ZSBmaW5kIHRleHQgYFtgLCB3aGljaCBpcyBub3QgYSBwYXJ0IG9mIGFueSB0b2tlblxuICAgICAgICBsZXZlbCsrXG4gICAgICB9IGVsc2UgaWYgKGRpc2FibGVOZXN0ZWQpIHtcbiAgICAgICAgc3RhdGUucG9zID0gb2xkUG9zXG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBsYWJlbEVuZCA9IC0xXG5cbiAgaWYgKGZvdW5kKSB7XG4gICAgbGFiZWxFbmQgPSBzdGF0ZS5wb3NcbiAgfVxuXG4gIC8vIHJlc3RvcmUgb2xkIHN0YXRlXG4gIHN0YXRlLnBvcyA9IG9sZFBvc1xuXG4gIHJldHVybiBsYWJlbEVuZFxufVxuIiwiLy8gUGFyc2UgbGluayBkZXN0aW5hdGlvblxuLy9cblxuaW1wb3J0IHsgdW5lc2NhcGVBbGwgfSBmcm9tICcuLi9jb21tb24vdXRpbHMubWpzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUxpbmtEZXN0aW5hdGlvbiAoc3RyLCBzdGFydCwgbWF4KSB7XG4gIGxldCBjb2RlXG4gIGxldCBwb3MgPSBzdGFydFxuXG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBvazogZmFsc2UsXG4gICAgcG9zOiAwLFxuICAgIHN0cjogJydcbiAgfVxuXG4gIGlmIChzdHIuY2hhckNvZGVBdChwb3MpID09PSAweDNDIC8qIDwgKi8pIHtcbiAgICBwb3MrK1xuICAgIHdoaWxlIChwb3MgPCBtYXgpIHtcbiAgICAgIGNvZGUgPSBzdHIuY2hhckNvZGVBdChwb3MpXG4gICAgICBpZiAoY29kZSA9PT0gMHgwQSAvKiBcXG4gKi8pIHsgcmV0dXJuIHJlc3VsdCB9XG4gICAgICBpZiAoY29kZSA9PT0gMHgzQyAvKiA8ICovKSB7IHJldHVybiByZXN1bHQgfVxuICAgICAgaWYgKGNvZGUgPT09IDB4M0UgLyogPiAqLykge1xuICAgICAgICByZXN1bHQucG9zID0gcG9zICsgMVxuICAgICAgICByZXN1bHQuc3RyID0gdW5lc2NhcGVBbGwoc3RyLnNsaWNlKHN0YXJ0ICsgMSwgcG9zKSlcbiAgICAgICAgcmVzdWx0Lm9rID0gdHJ1ZVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9XG4gICAgICBpZiAoY29kZSA9PT0gMHg1QyAvKiBcXCAqLyAmJiBwb3MgKyAxIDwgbWF4KSB7XG4gICAgICAgIHBvcyArPSAyXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHBvcysrXG4gICAgfVxuXG4gICAgLy8gbm8gY2xvc2luZyAnPidcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvLyB0aGlzIHNob3VsZCBiZSAuLi4gfSBlbHNlIHsgLi4uIGJyYW5jaFxuXG4gIGxldCBsZXZlbCA9IDBcbiAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgIGNvZGUgPSBzdHIuY2hhckNvZGVBdChwb3MpXG5cbiAgICBpZiAoY29kZSA9PT0gMHgyMCkgeyBicmVhayB9XG5cbiAgICAvLyBhc2NpaSBjb250cm9sIGNoYXJhY3RlcnNcbiAgICBpZiAoY29kZSA8IDB4MjAgfHwgY29kZSA9PT0gMHg3RikgeyBicmVhayB9XG5cbiAgICBpZiAoY29kZSA9PT0gMHg1QyAvKiBcXCAqLyAmJiBwb3MgKyAxIDwgbWF4KSB7XG4gICAgICBpZiAoc3RyLmNoYXJDb2RlQXQocG9zICsgMSkgPT09IDB4MjApIHsgYnJlYWsgfVxuICAgICAgcG9zICs9IDJcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDB4MjggLyogKCAqLykge1xuICAgICAgbGV2ZWwrK1xuICAgICAgaWYgKGxldmVsID4gMzIpIHsgcmV0dXJuIHJlc3VsdCB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDB4MjkgLyogKSAqLykge1xuICAgICAgaWYgKGxldmVsID09PSAwKSB7IGJyZWFrIH1cbiAgICAgIGxldmVsLS1cbiAgICB9XG5cbiAgICBwb3MrK1xuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSBwb3MpIHsgcmV0dXJuIHJlc3VsdCB9XG4gIGlmIChsZXZlbCAhPT0gMCkgeyByZXR1cm4gcmVzdWx0IH1cblxuICByZXN1bHQuc3RyID0gdW5lc2NhcGVBbGwoc3RyLnNsaWNlKHN0YXJ0LCBwb3MpKVxuICByZXN1bHQucG9zID0gcG9zXG4gIHJlc3VsdC5vayA9IHRydWVcbiAgcmV0dXJuIHJlc3VsdFxufVxuIiwiLy8gUGFyc2UgbGluayB0aXRsZVxuLy9cblxuaW1wb3J0IHsgdW5lc2NhcGVBbGwgfSBmcm9tICcuLi9jb21tb24vdXRpbHMubWpzJ1xuXG4vLyBQYXJzZSBsaW5rIHRpdGxlIHdpdGhpbiBgc3RyYCBpbiBbc3RhcnQsIG1heF0gcmFuZ2UsXG4vLyBvciBjb250aW51ZSBwcmV2aW91cyBwYXJzaW5nIGlmIGBwcmV2X3N0YXRlYCBpcyBkZWZpbmVkIChlcXVhbCB0byByZXN1bHQgb2YgbGFzdCBleGVjdXRpb24pLlxuLy9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlTGlua1RpdGxlIChzdHIsIHN0YXJ0LCBtYXgsIHByZXZfc3RhdGUpIHtcbiAgbGV0IGNvZGVcbiAgbGV0IHBvcyA9IHN0YXJ0XG5cbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgLy8gaWYgYHRydWVgLCB0aGlzIGlzIGEgdmFsaWQgbGluayB0aXRsZVxuICAgIG9rOiBmYWxzZSxcbiAgICAvLyBpZiBgdHJ1ZWAsIHRoaXMgbGluayBjYW4gYmUgY29udGludWVkIG9uIHRoZSBuZXh0IGxpbmVcbiAgICBjYW5fY29udGludWU6IGZhbHNlLFxuICAgIC8vIGlmIGBva2AsIGl0J3MgdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXIgYWZ0ZXIgdGhlIGNsb3NpbmcgbWFya2VyXG4gICAgcG9zOiAwLFxuICAgIC8vIGlmIGBva2AsIGl0J3MgdGhlIHVuZXNjYXBlZCB0aXRsZVxuICAgIHN0cjogJycsXG4gICAgLy8gZXhwZWN0ZWQgY2xvc2luZyBtYXJrZXIgY2hhcmFjdGVyIGNvZGVcbiAgICBtYXJrZXI6IDBcbiAgfVxuXG4gIGlmIChwcmV2X3N0YXRlKSB7XG4gICAgLy8gdGhpcyBpcyBhIGNvbnRpbnVhdGlvbiBvZiBhIHByZXZpb3VzIHBhcnNlTGlua1RpdGxlIGNhbGwgb24gdGhlIG5leHQgbGluZSxcbiAgICAvLyB1c2VkIGluIHJlZmVyZW5jZSBsaW5rcyBvbmx5XG4gICAgc3RhdGUuc3RyID0gcHJldl9zdGF0ZS5zdHJcbiAgICBzdGF0ZS5tYXJrZXIgPSBwcmV2X3N0YXRlLm1hcmtlclxuICB9IGVsc2Uge1xuICAgIGlmIChwb3MgPj0gbWF4KSB7IHJldHVybiBzdGF0ZSB9XG5cbiAgICBsZXQgbWFya2VyID0gc3RyLmNoYXJDb2RlQXQocG9zKVxuICAgIGlmIChtYXJrZXIgIT09IDB4MjIgLyogXCIgKi8gJiYgbWFya2VyICE9PSAweDI3IC8qICcgKi8gJiYgbWFya2VyICE9PSAweDI4IC8qICggKi8pIHsgcmV0dXJuIHN0YXRlIH1cblxuICAgIHN0YXJ0KytcbiAgICBwb3MrK1xuXG4gICAgLy8gaWYgb3BlbmluZyBtYXJrZXIgaXMgXCIoXCIsIHN3aXRjaCBpdCB0byBjbG9zaW5nIG1hcmtlciBcIilcIlxuICAgIGlmIChtYXJrZXIgPT09IDB4MjgpIHsgbWFya2VyID0gMHgyOSB9XG5cbiAgICBzdGF0ZS5tYXJrZXIgPSBtYXJrZXJcbiAgfVxuXG4gIHdoaWxlIChwb3MgPCBtYXgpIHtcbiAgICBjb2RlID0gc3RyLmNoYXJDb2RlQXQocG9zKVxuICAgIGlmIChjb2RlID09PSBzdGF0ZS5tYXJrZXIpIHtcbiAgICAgIHN0YXRlLnBvcyA9IHBvcyArIDFcbiAgICAgIHN0YXRlLnN0ciArPSB1bmVzY2FwZUFsbChzdHIuc2xpY2Uoc3RhcnQsIHBvcykpXG4gICAgICBzdGF0ZS5vayA9IHRydWVcbiAgICAgIHJldHVybiBzdGF0ZVxuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyOCAvKiAoICovICYmIHN0YXRlLm1hcmtlciA9PT0gMHgyOSAvKiApICovKSB7XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4NUMgLyogXFwgKi8gJiYgcG9zICsgMSA8IG1heCkge1xuICAgICAgcG9zKytcbiAgICB9XG5cbiAgICBwb3MrK1xuICB9XG5cbiAgLy8gbm8gY2xvc2luZyBtYXJrZXIgZm91bmQsIGJ1dCB0aGlzIGxpbmsgdGl0bGUgbWF5IGNvbnRpbnVlIG9uIHRoZSBuZXh0IGxpbmUgKGZvciByZWZlcmVuY2VzKVxuICBzdGF0ZS5jYW5fY29udGludWUgPSB0cnVlXG4gIHN0YXRlLnN0ciArPSB1bmVzY2FwZUFsbChzdHIuc2xpY2Uoc3RhcnQsIHBvcykpXG4gIHJldHVybiBzdGF0ZVxufVxuIiwiLyoqXG4gKiBjbGFzcyBSZW5kZXJlclxuICpcbiAqIEdlbmVyYXRlcyBIVE1MIGZyb20gcGFyc2VkIHRva2VuIHN0cmVhbS4gRWFjaCBpbnN0YW5jZSBoYXMgaW5kZXBlbmRlbnRcbiAqIGNvcHkgb2YgcnVsZXMuIFRob3NlIGNhbiBiZSByZXdyaXR0ZW4gd2l0aCBlYXNlLiBBbHNvLCB5b3UgY2FuIGFkZCBuZXdcbiAqIHJ1bGVzIGlmIHlvdSBjcmVhdGUgcGx1Z2luIGFuZCBhZGRzIG5ldyB0b2tlbiB0eXBlcy5cbiAqKi9cblxuaW1wb3J0IHsgYXNzaWduLCB1bmVzY2FwZUFsbCwgZXNjYXBlSHRtbCB9IGZyb20gJy4vY29tbW9uL3V0aWxzLm1qcydcblxuY29uc3QgZGVmYXVsdF9ydWxlcyA9IHt9XG5cbmRlZmF1bHRfcnVsZXMuY29kZV9pbmxpbmUgPSBmdW5jdGlvbiAodG9rZW5zLCBpZHgsIG9wdGlvbnMsIGVudiwgc2xmKSB7XG4gIGNvbnN0IHRva2VuID0gdG9rZW5zW2lkeF1cblxuICByZXR1cm4gICc8Y29kZScgKyBzbGYucmVuZGVyQXR0cnModG9rZW4pICsgJz4nICtcbiAgICAgICAgICBlc2NhcGVIdG1sKHRva2VuLmNvbnRlbnQpICtcbiAgICAgICAgICAnPC9jb2RlPidcbn1cblxuZGVmYXVsdF9ydWxlcy5jb2RlX2Jsb2NrID0gZnVuY3Rpb24gKHRva2VucywgaWR4LCBvcHRpb25zLCBlbnYsIHNsZikge1xuICBjb25zdCB0b2tlbiA9IHRva2Vuc1tpZHhdXG5cbiAgcmV0dXJuICAnPHByZScgKyBzbGYucmVuZGVyQXR0cnModG9rZW4pICsgJz48Y29kZT4nICtcbiAgICAgICAgICBlc2NhcGVIdG1sKHRva2Vuc1tpZHhdLmNvbnRlbnQpICtcbiAgICAgICAgICAnPC9jb2RlPjwvcHJlPlxcbidcbn1cblxuZGVmYXVsdF9ydWxlcy5mZW5jZSA9IGZ1bmN0aW9uICh0b2tlbnMsIGlkeCwgb3B0aW9ucywgZW52LCBzbGYpIHtcbiAgY29uc3QgdG9rZW4gPSB0b2tlbnNbaWR4XVxuICBjb25zdCBpbmZvID0gdG9rZW4uaW5mbyA/IHVuZXNjYXBlQWxsKHRva2VuLmluZm8pLnRyaW0oKSA6ICcnXG4gIGxldCBsYW5nTmFtZSA9ICcnXG4gIGxldCBsYW5nQXR0cnMgPSAnJ1xuXG4gIGlmIChpbmZvKSB7XG4gICAgY29uc3QgYXJyID0gaW5mby5zcGxpdCgvKFxccyspL2cpXG4gICAgbGFuZ05hbWUgPSBhcnJbMF1cbiAgICBsYW5nQXR0cnMgPSBhcnIuc2xpY2UoMikuam9pbignJylcbiAgfVxuXG4gIGxldCBoaWdobGlnaHRlZFxuICBpZiAob3B0aW9ucy5oaWdobGlnaHQpIHtcbiAgICBoaWdobGlnaHRlZCA9IG9wdGlvbnMuaGlnaGxpZ2h0KHRva2VuLmNvbnRlbnQsIGxhbmdOYW1lLCBsYW5nQXR0cnMpIHx8IGVzY2FwZUh0bWwodG9rZW4uY29udGVudClcbiAgfSBlbHNlIHtcbiAgICBoaWdobGlnaHRlZCA9IGVzY2FwZUh0bWwodG9rZW4uY29udGVudClcbiAgfVxuXG4gIGlmIChoaWdobGlnaHRlZC5pbmRleE9mKCc8cHJlJykgPT09IDApIHtcbiAgICByZXR1cm4gaGlnaGxpZ2h0ZWQgKyAnXFxuJ1xuICB9XG5cbiAgLy8gSWYgbGFuZ3VhZ2UgZXhpc3RzLCBpbmplY3QgY2xhc3MgZ2VudGx5LCB3aXRob3V0IG1vZGlmeWluZyBvcmlnaW5hbCB0b2tlbi5cbiAgLy8gTWF5IGJlLCBvbmUgZGF5IHdlIHdpbGwgYWRkIC5kZWVwQ2xvbmUoKSBmb3IgdG9rZW4gYW5kIHNpbXBsaWZ5IHRoaXMgcGFydCwgYnV0XG4gIC8vIG5vdyB3ZSBwcmVmZXIgdG8ga2VlcCB0aGluZ3MgbG9jYWwuXG4gIGlmIChpbmZvKSB7XG4gICAgY29uc3QgaSA9IHRva2VuLmF0dHJJbmRleCgnY2xhc3MnKVxuICAgIGNvbnN0IHRtcEF0dHJzID0gdG9rZW4uYXR0cnMgPyB0b2tlbi5hdHRycy5zbGljZSgpIDogW11cblxuICAgIGlmIChpIDwgMCkge1xuICAgICAgdG1wQXR0cnMucHVzaChbJ2NsYXNzJywgb3B0aW9ucy5sYW5nUHJlZml4ICsgbGFuZ05hbWVdKVxuICAgIH0gZWxzZSB7XG4gICAgICB0bXBBdHRyc1tpXSA9IHRtcEF0dHJzW2ldLnNsaWNlKClcbiAgICAgIHRtcEF0dHJzW2ldWzFdICs9ICcgJyArIG9wdGlvbnMubGFuZ1ByZWZpeCArIGxhbmdOYW1lXG4gICAgfVxuXG4gICAgLy8gRmFrZSB0b2tlbiBqdXN0IHRvIHJlbmRlciBhdHRyaWJ1dGVzXG4gICAgY29uc3QgdG1wVG9rZW4gPSB7XG4gICAgICBhdHRyczogdG1wQXR0cnNcbiAgICB9XG5cbiAgICByZXR1cm4gYDxwcmU+PGNvZGUke3NsZi5yZW5kZXJBdHRycyh0bXBUb2tlbil9PiR7aGlnaGxpZ2h0ZWR9PC9jb2RlPjwvcHJlPlxcbmBcbiAgfVxuXG4gIHJldHVybiBgPHByZT48Y29kZSR7c2xmLnJlbmRlckF0dHJzKHRva2VuKX0+JHtoaWdobGlnaHRlZH08L2NvZGU+PC9wcmU+XFxuYFxufVxuXG5kZWZhdWx0X3J1bGVzLmltYWdlID0gZnVuY3Rpb24gKHRva2VucywgaWR4LCBvcHRpb25zLCBlbnYsIHNsZikge1xuICBjb25zdCB0b2tlbiA9IHRva2Vuc1tpZHhdXG5cbiAgLy8gXCJhbHRcIiBhdHRyIE1VU1QgYmUgc2V0LCBldmVuIGlmIGVtcHR5LiBCZWNhdXNlIGl0J3MgbWFuZGF0b3J5IGFuZFxuICAvLyBzaG91bGQgYmUgcGxhY2VkIG9uIHByb3BlciBwb3NpdGlvbiBmb3IgdGVzdHMuXG4gIC8vXG4gIC8vIFJlcGxhY2UgY29udGVudCB3aXRoIGFjdHVhbCB2YWx1ZVxuXG4gIHRva2VuLmF0dHJzW3Rva2VuLmF0dHJJbmRleCgnYWx0JyldWzFdID1cbiAgICBzbGYucmVuZGVySW5saW5lQXNUZXh0KHRva2VuLmNoaWxkcmVuLCBvcHRpb25zLCBlbnYpXG5cbiAgcmV0dXJuIHNsZi5yZW5kZXJUb2tlbih0b2tlbnMsIGlkeCwgb3B0aW9ucylcbn1cblxuZGVmYXVsdF9ydWxlcy5oYXJkYnJlYWsgPSBmdW5jdGlvbiAodG9rZW5zLCBpZHgsIG9wdGlvbnMgLyosIGVudiAqLykge1xuICByZXR1cm4gb3B0aW9ucy54aHRtbE91dCA/ICc8YnIgLz5cXG4nIDogJzxicj5cXG4nXG59XG5kZWZhdWx0X3J1bGVzLnNvZnRicmVhayA9IGZ1bmN0aW9uICh0b2tlbnMsIGlkeCwgb3B0aW9ucyAvKiwgZW52ICovKSB7XG4gIHJldHVybiBvcHRpb25zLmJyZWFrcyA/IChvcHRpb25zLnhodG1sT3V0ID8gJzxiciAvPlxcbicgOiAnPGJyPlxcbicpIDogJ1xcbidcbn1cblxuZGVmYXVsdF9ydWxlcy50ZXh0ID0gZnVuY3Rpb24gKHRva2VucywgaWR4IC8qLCBvcHRpb25zLCBlbnYgKi8pIHtcbiAgcmV0dXJuIGVzY2FwZUh0bWwodG9rZW5zW2lkeF0uY29udGVudClcbn1cblxuZGVmYXVsdF9ydWxlcy5odG1sX2Jsb2NrID0gZnVuY3Rpb24gKHRva2VucywgaWR4IC8qLCBvcHRpb25zLCBlbnYgKi8pIHtcbiAgcmV0dXJuIHRva2Vuc1tpZHhdLmNvbnRlbnRcbn1cbmRlZmF1bHRfcnVsZXMuaHRtbF9pbmxpbmUgPSBmdW5jdGlvbiAodG9rZW5zLCBpZHggLyosIG9wdGlvbnMsIGVudiAqLykge1xuICByZXR1cm4gdG9rZW5zW2lkeF0uY29udGVudFxufVxuXG4vKipcbiAqIG5ldyBSZW5kZXJlcigpXG4gKlxuICogQ3JlYXRlcyBuZXcgW1tSZW5kZXJlcl1dIGluc3RhbmNlIGFuZCBmaWxsIFtbUmVuZGVyZXIjcnVsZXNdXSB3aXRoIGRlZmF1bHRzLlxuICoqL1xuZnVuY3Rpb24gUmVuZGVyZXIgKCkge1xuICAvKipcbiAgICogUmVuZGVyZXIjcnVsZXMgLT4gT2JqZWN0XG4gICAqXG4gICAqIENvbnRhaW5zIHJlbmRlciBydWxlcyBmb3IgdG9rZW5zLiBDYW4gYmUgdXBkYXRlZCBhbmQgZXh0ZW5kZWQuXG4gICAqXG4gICAqICMjIyMjIEV4YW1wbGVcbiAgICpcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKCk7XG4gICAqXG4gICAqIG1kLnJlbmRlcmVyLnJ1bGVzLnN0cm9uZ19vcGVuICA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICc8Yj4nOyB9O1xuICAgKiBtZC5yZW5kZXJlci5ydWxlcy5zdHJvbmdfY2xvc2UgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnPC9iPic7IH07XG4gICAqXG4gICAqIHZhciByZXN1bHQgPSBtZC5yZW5kZXJJbmxpbmUoLi4uKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEVhY2ggcnVsZSBpcyBjYWxsZWQgYXMgaW5kZXBlbmRlbnQgc3RhdGljIGZ1bmN0aW9uIHdpdGggZml4ZWQgc2lnbmF0dXJlOlxuICAgKlxuICAgKiBgYGBqYXZhc2NyaXB0XG4gICAqIGZ1bmN0aW9uIG15X3Rva2VuX3JlbmRlcih0b2tlbnMsIGlkeCwgb3B0aW9ucywgZW52LCByZW5kZXJlcikge1xuICAgKiAgIC8vIC4uLlxuICAgKiAgIHJldHVybiByZW5kZXJlZEhUTUw7XG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIFNlZSBbc291cmNlIGNvZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9tYXJrZG93bi1pdC9ibG9iL21hc3Rlci9saWIvcmVuZGVyZXIubWpzKVxuICAgKiBmb3IgbW9yZSBkZXRhaWxzIGFuZCBleGFtcGxlcy5cbiAgICoqL1xuICB0aGlzLnJ1bGVzID0gYXNzaWduKHt9LCBkZWZhdWx0X3J1bGVzKVxufVxuXG4vKipcbiAqIFJlbmRlcmVyLnJlbmRlckF0dHJzKHRva2VuKSAtPiBTdHJpbmdcbiAqXG4gKiBSZW5kZXIgdG9rZW4gYXR0cmlidXRlcyB0byBzdHJpbmcuXG4gKiovXG5SZW5kZXJlci5wcm90b3R5cGUucmVuZGVyQXR0cnMgPSBmdW5jdGlvbiByZW5kZXJBdHRycyAodG9rZW4pIHtcbiAgbGV0IGksIGwsIHJlc3VsdFxuXG4gIGlmICghdG9rZW4uYXR0cnMpIHsgcmV0dXJuICcnIH1cblxuICByZXN1bHQgPSAnJ1xuXG4gIGZvciAoaSA9IDAsIGwgPSB0b2tlbi5hdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICByZXN1bHQgKz0gJyAnICsgZXNjYXBlSHRtbCh0b2tlbi5hdHRyc1tpXVswXSkgKyAnPVwiJyArIGVzY2FwZUh0bWwodG9rZW4uYXR0cnNbaV1bMV0pICsgJ1wiJ1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIFJlbmRlcmVyLnJlbmRlclRva2VuKHRva2VucywgaWR4LCBvcHRpb25zKSAtPiBTdHJpbmdcbiAqIC0gdG9rZW5zIChBcnJheSk6IGxpc3Qgb2YgdG9rZW5zXG4gKiAtIGlkeCAoTnVtYmVkKTogdG9rZW4gaW5kZXggdG8gcmVuZGVyXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHBhcmFtcyBvZiBwYXJzZXIgaW5zdGFuY2VcbiAqXG4gKiBEZWZhdWx0IHRva2VuIHJlbmRlcmVyLiBDYW4gYmUgb3ZlcnJpZGVuIGJ5IGN1c3RvbSBmdW5jdGlvblxuICogaW4gW1tSZW5kZXJlciNydWxlc11dLlxuICoqL1xuUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlclRva2VuID0gZnVuY3Rpb24gcmVuZGVyVG9rZW4gKHRva2VucywgaWR4LCBvcHRpb25zKSB7XG4gIGNvbnN0IHRva2VuID0gdG9rZW5zW2lkeF1cbiAgbGV0IHJlc3VsdCA9ICcnXG5cbiAgLy8gVGlnaHQgbGlzdCBwYXJhZ3JhcGhzXG4gIGlmICh0b2tlbi5oaWRkZW4pIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEluc2VydCBhIG5ld2xpbmUgYmV0d2VlbiBoaWRkZW4gcGFyYWdyYXBoIGFuZCBzdWJzZXF1ZW50IG9wZW5pbmdcbiAgLy8gYmxvY2stbGV2ZWwgdGFnLlxuICAvL1xuICAvLyBGb3IgZXhhbXBsZSwgaGVyZSB3ZSBzaG91bGQgaW5zZXJ0IGEgbmV3bGluZSBiZWZvcmUgYmxvY2txdW90ZTpcbiAgLy8gIC0gYVxuICAvLyAgICA+XG4gIC8vXG4gIGlmICh0b2tlbi5ibG9jayAmJiB0b2tlbi5uZXN0aW5nICE9PSAtMSAmJiBpZHggJiYgdG9rZW5zW2lkeCAtIDFdLmhpZGRlbikge1xuICAgIHJlc3VsdCArPSAnXFxuJ1xuICB9XG5cbiAgLy8gQWRkIHRva2VuIG5hbWUsIGUuZy4gYDxpbWdgXG4gIHJlc3VsdCArPSAodG9rZW4ubmVzdGluZyA9PT0gLTEgPyAnPC8nIDogJzwnKSArIHRva2VuLnRhZ1xuXG4gIC8vIEVuY29kZSBhdHRyaWJ1dGVzLCBlLmcuIGA8aW1nIHNyYz1cImZvb1wiYFxuICByZXN1bHQgKz0gdGhpcy5yZW5kZXJBdHRycyh0b2tlbilcblxuICAvLyBBZGQgYSBzbGFzaCBmb3Igc2VsZi1jbG9zaW5nIHRhZ3MsIGUuZy4gYDxpbWcgc3JjPVwiZm9vXCIgL2BcbiAgaWYgKHRva2VuLm5lc3RpbmcgPT09IDAgJiYgb3B0aW9ucy54aHRtbE91dCkge1xuICAgIHJlc3VsdCArPSAnIC8nXG4gIH1cblxuICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGFkZCBhIG5ld2xpbmUgYWZ0ZXIgdGhpcyB0YWdcbiAgbGV0IG5lZWRMZiA9IGZhbHNlXG4gIGlmICh0b2tlbi5ibG9jaykge1xuICAgIG5lZWRMZiA9IHRydWVcblxuICAgIGlmICh0b2tlbi5uZXN0aW5nID09PSAxKSB7XG4gICAgICBpZiAoaWR4ICsgMSA8IHRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgbmV4dFRva2VuID0gdG9rZW5zW2lkeCArIDFdXG5cbiAgICAgICAgaWYgKG5leHRUb2tlbi50eXBlID09PSAnaW5saW5lJyB8fCBuZXh0VG9rZW4uaGlkZGVuKSB7XG4gICAgICAgICAgLy8gQmxvY2stbGV2ZWwgdGFnIGNvbnRhaW5pbmcgYW4gaW5saW5lIHRhZy5cbiAgICAgICAgICAvL1xuICAgICAgICAgIG5lZWRMZiA9IGZhbHNlXG4gICAgICAgIH0gZWxzZSBpZiAobmV4dFRva2VuLm5lc3RpbmcgPT09IC0xICYmIG5leHRUb2tlbi50YWcgPT09IHRva2VuLnRhZykge1xuICAgICAgICAgIC8vIE9wZW5pbmcgdGFnICsgY2xvc2luZyB0YWcgb2YgdGhlIHNhbWUgdHlwZS4gRS5nLiBgPGxpPjwvbGk+YC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIG5lZWRMZiA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXN1bHQgKz0gbmVlZExmID8gJz5cXG4nIDogJz4nXG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIFJlbmRlcmVyLnJlbmRlcklubGluZSh0b2tlbnMsIG9wdGlvbnMsIGVudikgLT4gU3RyaW5nXG4gKiAtIHRva2VucyAoQXJyYXkpOiBsaXN0IG9uIGJsb2NrIHRva2VucyB0byByZW5kZXJcbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogcGFyYW1zIG9mIHBhcnNlciBpbnN0YW5jZVxuICogLSBlbnYgKE9iamVjdCk6IGFkZGl0aW9uYWwgZGF0YSBmcm9tIHBhcnNlZCBpbnB1dCAocmVmZXJlbmNlcywgZm9yIGV4YW1wbGUpXG4gKlxuICogVGhlIHNhbWUgYXMgW1tSZW5kZXJlci5yZW5kZXJdXSwgYnV0IGZvciBzaW5nbGUgdG9rZW4gb2YgYGlubGluZWAgdHlwZS5cbiAqKi9cblJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJJbmxpbmUgPSBmdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zLCBlbnYpIHtcbiAgbGV0IHJlc3VsdCA9ICcnXG4gIGNvbnN0IHJ1bGVzID0gdGhpcy5ydWxlc1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0b2tlbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCB0eXBlID0gdG9rZW5zW2ldLnR5cGVcblxuICAgIGlmICh0eXBlb2YgcnVsZXNbdHlwZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXN1bHQgKz0gcnVsZXNbdHlwZV0odG9rZW5zLCBpLCBvcHRpb25zLCBlbnYsIHRoaXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCArPSB0aGlzLnJlbmRlclRva2VuKHRva2VucywgaSwgb3B0aW9ucylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKiBpbnRlcm5hbFxuICogUmVuZGVyZXIucmVuZGVySW5saW5lQXNUZXh0KHRva2Vucywgb3B0aW9ucywgZW52KSAtPiBTdHJpbmdcbiAqIC0gdG9rZW5zIChBcnJheSk6IGxpc3Qgb24gYmxvY2sgdG9rZW5zIHRvIHJlbmRlclxuICogLSBvcHRpb25zIChPYmplY3QpOiBwYXJhbXMgb2YgcGFyc2VyIGluc3RhbmNlXG4gKiAtIGVudiAoT2JqZWN0KTogYWRkaXRpb25hbCBkYXRhIGZyb20gcGFyc2VkIGlucHV0IChyZWZlcmVuY2VzLCBmb3IgZXhhbXBsZSlcbiAqXG4gKiBTcGVjaWFsIGtsdWRnZSBmb3IgaW1hZ2UgYGFsdGAgYXR0cmlidXRlcyB0byBjb25mb3JtIENvbW1vbk1hcmsgc3BlYy5cbiAqIERvbid0IHRyeSB0byB1c2UgaXQhIFNwZWMgcmVxdWlyZXMgdG8gc2hvdyBgYWx0YCBjb250ZW50IHdpdGggc3RyaXBwZWQgbWFya3VwLFxuICogaW5zdGVhZCBvZiBzaW1wbGUgZXNjYXBpbmcuXG4gKiovXG5SZW5kZXJlci5wcm90b3R5cGUucmVuZGVySW5saW5lQXNUZXh0ID0gZnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucywgZW52KSB7XG4gIGxldCByZXN1bHQgPSAnJ1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0b2tlbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzd2l0Y2ggKHRva2Vuc1tpXS50eXBlKSB7XG4gICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgcmVzdWx0ICs9IHRva2Vuc1tpXS5jb250ZW50XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdpbWFnZSc6XG4gICAgICAgIHJlc3VsdCArPSB0aGlzLnJlbmRlcklubGluZUFzVGV4dCh0b2tlbnNbaV0uY2hpbGRyZW4sIG9wdGlvbnMsIGVudilcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2h0bWxfaW5saW5lJzpcbiAgICAgIGNhc2UgJ2h0bWxfYmxvY2snOlxuICAgICAgICByZXN1bHQgKz0gdG9rZW5zW2ldLmNvbnRlbnRcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NvZnRicmVhayc6XG4gICAgICBjYXNlICdoYXJkYnJlYWsnOlxuICAgICAgICByZXN1bHQgKz0gJ1xcbidcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIGFsbCBvdGhlciB0b2tlbnMgYXJlIHNraXBwZWRcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogUmVuZGVyZXIucmVuZGVyKHRva2Vucywgb3B0aW9ucywgZW52KSAtPiBTdHJpbmdcbiAqIC0gdG9rZW5zIChBcnJheSk6IGxpc3Qgb24gYmxvY2sgdG9rZW5zIHRvIHJlbmRlclxuICogLSBvcHRpb25zIChPYmplY3QpOiBwYXJhbXMgb2YgcGFyc2VyIGluc3RhbmNlXG4gKiAtIGVudiAoT2JqZWN0KTogYWRkaXRpb25hbCBkYXRhIGZyb20gcGFyc2VkIGlucHV0IChyZWZlcmVuY2VzLCBmb3IgZXhhbXBsZSlcbiAqXG4gKiBUYWtlcyB0b2tlbiBzdHJlYW0gYW5kIGdlbmVyYXRlcyBIVE1MLiBQcm9iYWJseSwgeW91IHdpbGwgbmV2ZXIgbmVlZCB0byBjYWxsXG4gKiB0aGlzIG1ldGhvZCBkaXJlY3RseS5cbiAqKi9cblJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zLCBlbnYpIHtcbiAgbGV0IHJlc3VsdCA9ICcnXG4gIGNvbnN0IHJ1bGVzID0gdGhpcy5ydWxlc1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0b2tlbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCB0eXBlID0gdG9rZW5zW2ldLnR5cGVcblxuICAgIGlmICh0eXBlID09PSAnaW5saW5lJykge1xuICAgICAgcmVzdWx0ICs9IHRoaXMucmVuZGVySW5saW5lKHRva2Vuc1tpXS5jaGlsZHJlbiwgb3B0aW9ucywgZW52KVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHJ1bGVzW3R5cGVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVzdWx0ICs9IHJ1bGVzW3R5cGVdKHRva2VucywgaSwgb3B0aW9ucywgZW52LCB0aGlzKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgKz0gdGhpcy5yZW5kZXJUb2tlbih0b2tlbnMsIGksIG9wdGlvbnMsIGVudilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlbmRlcmVyXG4iLCIvKipcbiAqIGNsYXNzIFJ1bGVyXG4gKlxuICogSGVscGVyIGNsYXNzLCB1c2VkIGJ5IFtbTWFya2Rvd25JdCNjb3JlXV0sIFtbTWFya2Rvd25JdCNibG9ja11dIGFuZFxuICogW1tNYXJrZG93bkl0I2lubGluZV1dIHRvIG1hbmFnZSBzZXF1ZW5jZXMgb2YgZnVuY3Rpb25zIChydWxlcyk6XG4gKlxuICogLSBrZWVwIHJ1bGVzIGluIGRlZmluZWQgb3JkZXJcbiAqIC0gYXNzaWduIHRoZSBuYW1lIHRvIGVhY2ggcnVsZVxuICogLSBlbmFibGUvZGlzYWJsZSBydWxlc1xuICogLSBhZGQvcmVwbGFjZSBydWxlc1xuICogLSBhbGxvdyBhc3NpZ24gcnVsZXMgdG8gYWRkaXRpb25hbCBuYW1lZCBjaGFpbnMgKGluIHRoZSBzYW1lKVxuICogLSBjYWNoZWluZyBsaXN0cyBvZiBhY3RpdmUgcnVsZXNcbiAqXG4gKiBZb3Ugd2lsbCBub3QgbmVlZCB1c2UgdGhpcyBjbGFzcyBkaXJlY3RseSB1bnRpbCB3cml0ZSBwbHVnaW5zLiBGb3Igc2ltcGxlXG4gKiBydWxlcyBjb250cm9sIHVzZSBbW01hcmtkb3duSXQuZGlzYWJsZV1dLCBbW01hcmtkb3duSXQuZW5hYmxlXV0gYW5kXG4gKiBbW01hcmtkb3duSXQudXNlXV0uXG4gKiovXG5cbi8qKlxuICogbmV3IFJ1bGVyKClcbiAqKi9cbmZ1bmN0aW9uIFJ1bGVyICgpIHtcbiAgLy8gTGlzdCBvZiBhZGRlZCBydWxlcy4gRWFjaCBlbGVtZW50IGlzOlxuICAvL1xuICAvLyB7XG4gIC8vICAgbmFtZTogWFhYLFxuICAvLyAgIGVuYWJsZWQ6IEJvb2xlYW4sXG4gIC8vICAgZm46IEZ1bmN0aW9uKCksXG4gIC8vICAgYWx0OiBbIG5hbWUyLCBuYW1lMyBdXG4gIC8vIH1cbiAgLy9cbiAgdGhpcy5fX3J1bGVzX18gPSBbXVxuXG4gIC8vIENhY2hlZCBydWxlIGNoYWlucy5cbiAgLy9cbiAgLy8gRmlyc3QgbGV2ZWwgLSBjaGFpbiBuYW1lLCAnJyBmb3IgZGVmYXVsdC5cbiAgLy8gU2Vjb25kIGxldmVsIC0gZGlnaW5hbCBhbmNob3IgZm9yIGZhc3QgZmlsdGVyaW5nIGJ5IGNoYXJjb2Rlcy5cbiAgLy9cbiAgdGhpcy5fX2NhY2hlX18gPSBudWxsXG59XG5cbi8vIEhlbHBlciBtZXRob2RzLCBzaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHlcblxuLy8gRmluZCBydWxlIGluZGV4IGJ5IG5hbWVcbi8vXG5SdWxlci5wcm90b3R5cGUuX19maW5kX18gPSBmdW5jdGlvbiAobmFtZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX19ydWxlc19fLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHRoaXMuX19ydWxlc19fW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBpXG4gICAgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vLyBCdWlsZCBydWxlcyBsb29rdXAgY2FjaGVcbi8vXG5SdWxlci5wcm90b3R5cGUuX19jb21waWxlX18gPSBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGNvbnN0IGNoYWlucyA9IFsnJ11cblxuICAvLyBjb2xsZWN0IHVuaXF1ZSBuYW1lc1xuICBzZWxmLl9fcnVsZXNfXy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgaWYgKCFydWxlLmVuYWJsZWQpIHsgcmV0dXJuIH1cblxuICAgIHJ1bGUuYWx0LmZvckVhY2goZnVuY3Rpb24gKGFsdE5hbWUpIHtcbiAgICAgIGlmIChjaGFpbnMuaW5kZXhPZihhbHROYW1lKSA8IDApIHtcbiAgICAgICAgY2hhaW5zLnB1c2goYWx0TmFtZSlcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuXG4gIHNlbGYuX19jYWNoZV9fID0ge31cblxuICBjaGFpbnMuZm9yRWFjaChmdW5jdGlvbiAoY2hhaW4pIHtcbiAgICBzZWxmLl9fY2FjaGVfX1tjaGFpbl0gPSBbXVxuICAgIHNlbGYuX19ydWxlc19fLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIGlmICghcnVsZS5lbmFibGVkKSB7IHJldHVybiB9XG5cbiAgICAgIGlmIChjaGFpbiAmJiBydWxlLmFsdC5pbmRleE9mKGNoYWluKSA8IDApIHsgcmV0dXJuIH1cblxuICAgICAgc2VsZi5fX2NhY2hlX19bY2hhaW5dLnB1c2gocnVsZS5mbilcbiAgICB9KVxuICB9KVxufVxuXG4vKipcbiAqIFJ1bGVyLmF0KG5hbWUsIGZuIFssIG9wdGlvbnNdKVxuICogLSBuYW1lIChTdHJpbmcpOiBydWxlIG5hbWUgdG8gcmVwbGFjZS5cbiAqIC0gZm4gKEZ1bmN0aW9uKTogbmV3IHJ1bGUgZnVuY3Rpb24uXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IG5ldyBydWxlIG9wdGlvbnMgKG5vdCBtYW5kYXRvcnkpLlxuICpcbiAqIFJlcGxhY2UgcnVsZSBieSBuYW1lIHdpdGggbmV3IGZ1bmN0aW9uICYgb3B0aW9ucy4gVGhyb3dzIGVycm9yIGlmIG5hbWUgbm90XG4gKiBmb3VuZC5cbiAqXG4gKiAjIyMjIyBPcHRpb25zOlxuICpcbiAqIC0gX19hbHRfXyAtIGFycmF5IHdpdGggbmFtZXMgb2YgXCJhbHRlcm5hdGVcIiBjaGFpbnMuXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqIFJlcGxhY2UgZXhpc3RpbmcgdHlwb2dyYXBoZXIgcmVwbGFjZW1lbnQgcnVsZSB3aXRoIG5ldyBvbmU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIG1kID0gcmVxdWlyZSgnbWFya2Rvd24taXQnKSgpO1xuICpcbiAqIG1kLmNvcmUucnVsZXIuYXQoJ3JlcGxhY2VtZW50cycsIGZ1bmN0aW9uIHJlcGxhY2Uoc3RhdGUpIHtcbiAqICAgLy8uLi5cbiAqIH0pO1xuICogYGBgXG4gKiovXG5SdWxlci5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbiAobmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgY29uc3QgaW5kZXggPSB0aGlzLl9fZmluZF9fKG5hbWUpXG4gIGNvbnN0IG9wdCA9IG9wdGlvbnMgfHwge31cblxuICBpZiAoaW5kZXggPT09IC0xKSB7IHRocm93IG5ldyBFcnJvcignUGFyc2VyIHJ1bGUgbm90IGZvdW5kOiAnICsgbmFtZSkgfVxuXG4gIHRoaXMuX19ydWxlc19fW2luZGV4XS5mbiA9IGZuXG4gIHRoaXMuX19ydWxlc19fW2luZGV4XS5hbHQgPSBvcHQuYWx0IHx8IFtdXG4gIHRoaXMuX19jYWNoZV9fID0gbnVsbFxufVxuXG4vKipcbiAqIFJ1bGVyLmJlZm9yZShiZWZvcmVOYW1lLCBydWxlTmFtZSwgZm4gWywgb3B0aW9uc10pXG4gKiAtIGJlZm9yZU5hbWUgKFN0cmluZyk6IG5ldyBydWxlIHdpbGwgYmUgYWRkZWQgYmVmb3JlIHRoaXMgb25lLlxuICogLSBydWxlTmFtZSAoU3RyaW5nKTogbmFtZSBvZiBhZGRlZCBydWxlLlxuICogLSBmbiAoRnVuY3Rpb24pOiBydWxlIGZ1bmN0aW9uLlxuICogLSBvcHRpb25zIChPYmplY3QpOiBydWxlIG9wdGlvbnMgKG5vdCBtYW5kYXRvcnkpLlxuICpcbiAqIEFkZCBuZXcgcnVsZSB0byBjaGFpbiBiZWZvcmUgb25lIHdpdGggZ2l2ZW4gbmFtZS4gU2VlIGFsc29cbiAqIFtbUnVsZXIuYWZ0ZXJdXSwgW1tSdWxlci5wdXNoXV0uXG4gKlxuICogIyMjIyMgT3B0aW9uczpcbiAqXG4gKiAtIF9fYWx0X18gLSBhcnJheSB3aXRoIG5hbWVzIG9mIFwiYWx0ZXJuYXRlXCIgY2hhaW5zLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKCk7XG4gKlxuICogbWQuYmxvY2sucnVsZXIuYmVmb3JlKCdwYXJhZ3JhcGgnLCAnbXlfcnVsZScsIGZ1bmN0aW9uIHJlcGxhY2Uoc3RhdGUpIHtcbiAqICAgLy8uLi5cbiAqIH0pO1xuICogYGBgXG4gKiovXG5SdWxlci5wcm90b3R5cGUuYmVmb3JlID0gZnVuY3Rpb24gKGJlZm9yZU5hbWUsIHJ1bGVOYW1lLCBmbiwgb3B0aW9ucykge1xuICBjb25zdCBpbmRleCA9IHRoaXMuX19maW5kX18oYmVmb3JlTmFtZSlcbiAgY29uc3Qgb3B0ID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChpbmRleCA9PT0gLTEpIHsgdGhyb3cgbmV3IEVycm9yKCdQYXJzZXIgcnVsZSBub3QgZm91bmQ6ICcgKyBiZWZvcmVOYW1lKSB9XG5cbiAgdGhpcy5fX3J1bGVzX18uc3BsaWNlKGluZGV4LCAwLCB7XG4gICAgbmFtZTogcnVsZU5hbWUsXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICBmbixcbiAgICBhbHQ6IG9wdC5hbHQgfHwgW11cbiAgfSlcblxuICB0aGlzLl9fY2FjaGVfXyA9IG51bGxcbn1cblxuLyoqXG4gKiBSdWxlci5hZnRlcihhZnRlck5hbWUsIHJ1bGVOYW1lLCBmbiBbLCBvcHRpb25zXSlcbiAqIC0gYWZ0ZXJOYW1lIChTdHJpbmcpOiBuZXcgcnVsZSB3aWxsIGJlIGFkZGVkIGFmdGVyIHRoaXMgb25lLlxuICogLSBydWxlTmFtZSAoU3RyaW5nKTogbmFtZSBvZiBhZGRlZCBydWxlLlxuICogLSBmbiAoRnVuY3Rpb24pOiBydWxlIGZ1bmN0aW9uLlxuICogLSBvcHRpb25zIChPYmplY3QpOiBydWxlIG9wdGlvbnMgKG5vdCBtYW5kYXRvcnkpLlxuICpcbiAqIEFkZCBuZXcgcnVsZSB0byBjaGFpbiBhZnRlciBvbmUgd2l0aCBnaXZlbiBuYW1lLiBTZWUgYWxzb1xuICogW1tSdWxlci5iZWZvcmVdXSwgW1tSdWxlci5wdXNoXV0uXG4gKlxuICogIyMjIyMgT3B0aW9uczpcbiAqXG4gKiAtIF9fYWx0X18gLSBhcnJheSB3aXRoIG5hbWVzIG9mIFwiYWx0ZXJuYXRlXCIgY2hhaW5zLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKCk7XG4gKlxuICogbWQuaW5saW5lLnJ1bGVyLmFmdGVyKCd0ZXh0JywgJ215X3J1bGUnLCBmdW5jdGlvbiByZXBsYWNlKHN0YXRlKSB7XG4gKiAgIC8vLi4uXG4gKiB9KTtcbiAqIGBgYFxuICoqL1xuUnVsZXIucHJvdG90eXBlLmFmdGVyID0gZnVuY3Rpb24gKGFmdGVyTmFtZSwgcnVsZU5hbWUsIGZuLCBvcHRpb25zKSB7XG4gIGNvbnN0IGluZGV4ID0gdGhpcy5fX2ZpbmRfXyhhZnRlck5hbWUpXG4gIGNvbnN0IG9wdCA9IG9wdGlvbnMgfHwge31cblxuICBpZiAoaW5kZXggPT09IC0xKSB7IHRocm93IG5ldyBFcnJvcignUGFyc2VyIHJ1bGUgbm90IGZvdW5kOiAnICsgYWZ0ZXJOYW1lKSB9XG5cbiAgdGhpcy5fX3J1bGVzX18uc3BsaWNlKGluZGV4ICsgMSwgMCwge1xuICAgIG5hbWU6IHJ1bGVOYW1lLFxuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgZm4sXG4gICAgYWx0OiBvcHQuYWx0IHx8IFtdXG4gIH0pXG5cbiAgdGhpcy5fX2NhY2hlX18gPSBudWxsXG59XG5cbi8qKlxuICogUnVsZXIucHVzaChydWxlTmFtZSwgZm4gWywgb3B0aW9uc10pXG4gKiAtIHJ1bGVOYW1lIChTdHJpbmcpOiBuYW1lIG9mIGFkZGVkIHJ1bGUuXG4gKiAtIGZuIChGdW5jdGlvbik6IHJ1bGUgZnVuY3Rpb24uXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHJ1bGUgb3B0aW9ucyAobm90IG1hbmRhdG9yeSkuXG4gKlxuICogUHVzaCBuZXcgcnVsZSB0byB0aGUgZW5kIG9mIGNoYWluLiBTZWUgYWxzb1xuICogW1tSdWxlci5iZWZvcmVdXSwgW1tSdWxlci5hZnRlcl1dLlxuICpcbiAqICMjIyMjIE9wdGlvbnM6XG4gKlxuICogLSBfX2FsdF9fIC0gYXJyYXkgd2l0aCBuYW1lcyBvZiBcImFsdGVybmF0ZVwiIGNoYWlucy5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIG1kID0gcmVxdWlyZSgnbWFya2Rvd24taXQnKSgpO1xuICpcbiAqIG1kLmNvcmUucnVsZXIucHVzaCgnbXlfcnVsZScsIGZ1bmN0aW9uIHJlcGxhY2Uoc3RhdGUpIHtcbiAqICAgLy8uLi5cbiAqIH0pO1xuICogYGBgXG4gKiovXG5SdWxlci5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChydWxlTmFtZSwgZm4sIG9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0ID0gb3B0aW9ucyB8fCB7fVxuXG4gIHRoaXMuX19ydWxlc19fLnB1c2goe1xuICAgIG5hbWU6IHJ1bGVOYW1lLFxuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgZm4sXG4gICAgYWx0OiBvcHQuYWx0IHx8IFtdXG4gIH0pXG5cbiAgdGhpcy5fX2NhY2hlX18gPSBudWxsXG59XG5cbi8qKlxuICogUnVsZXIuZW5hYmxlKGxpc3QgWywgaWdub3JlSW52YWxpZF0pIC0+IEFycmF5XG4gKiAtIGxpc3QgKFN0cmluZ3xBcnJheSk6IGxpc3Qgb2YgcnVsZSBuYW1lcyB0byBlbmFibGUuXG4gKiAtIGlnbm9yZUludmFsaWQgKEJvb2xlYW4pOiBzZXQgYHRydWVgIHRvIGlnbm9yZSBlcnJvcnMgd2hlbiBydWxlIG5vdCBmb3VuZC5cbiAqXG4gKiBFbmFibGUgcnVsZXMgd2l0aCBnaXZlbiBuYW1lcy4gSWYgYW55IHJ1bGUgbmFtZSBub3QgZm91bmQgLSB0aHJvdyBFcnJvci5cbiAqIEVycm9ycyBjYW4gYmUgZGlzYWJsZWQgYnkgc2Vjb25kIHBhcmFtLlxuICpcbiAqIFJldHVybnMgbGlzdCBvZiBmb3VuZCBydWxlIG5hbWVzIChpZiBubyBleGNlcHRpb24gaGFwcGVuZWQpLlxuICpcbiAqIFNlZSBhbHNvIFtbUnVsZXIuZGlzYWJsZV1dLCBbW1J1bGVyLmVuYWJsZU9ubHldXS5cbiAqKi9cblJ1bGVyLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAobGlzdCwgaWdub3JlSW52YWxpZCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHsgbGlzdCA9IFtsaXN0XSB9XG5cbiAgY29uc3QgcmVzdWx0ID0gW11cblxuICAvLyBTZWFyY2ggYnkgbmFtZSBhbmQgZW5hYmxlXG4gIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGNvbnN0IGlkeCA9IHRoaXMuX19maW5kX18obmFtZSlcblxuICAgIGlmIChpZHggPCAwKSB7XG4gICAgICBpZiAoaWdub3JlSW52YWxpZCkgeyByZXR1cm4gfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSdWxlcyBtYW5hZ2VyOiBpbnZhbGlkIHJ1bGUgbmFtZSAnICsgbmFtZSlcbiAgICB9XG4gICAgdGhpcy5fX3J1bGVzX19baWR4XS5lbmFibGVkID0gdHJ1ZVxuICAgIHJlc3VsdC5wdXNoKG5hbWUpXG4gIH0sIHRoaXMpXG5cbiAgdGhpcy5fX2NhY2hlX18gPSBudWxsXG4gIHJldHVybiByZXN1bHRcbn1cblxuLyoqXG4gKiBSdWxlci5lbmFibGVPbmx5KGxpc3QgWywgaWdub3JlSW52YWxpZF0pXG4gKiAtIGxpc3QgKFN0cmluZ3xBcnJheSk6IGxpc3Qgb2YgcnVsZSBuYW1lcyB0byBlbmFibGUgKHdoaXRlbGlzdCkuXG4gKiAtIGlnbm9yZUludmFsaWQgKEJvb2xlYW4pOiBzZXQgYHRydWVgIHRvIGlnbm9yZSBlcnJvcnMgd2hlbiBydWxlIG5vdCBmb3VuZC5cbiAqXG4gKiBFbmFibGUgcnVsZXMgd2l0aCBnaXZlbiBuYW1lcywgYW5kIGRpc2FibGUgZXZlcnl0aGluZyBlbHNlLiBJZiBhbnkgcnVsZSBuYW1lXG4gKiBub3QgZm91bmQgLSB0aHJvdyBFcnJvci4gRXJyb3JzIGNhbiBiZSBkaXNhYmxlZCBieSBzZWNvbmQgcGFyYW0uXG4gKlxuICogU2VlIGFsc28gW1tSdWxlci5kaXNhYmxlXV0sIFtbUnVsZXIuZW5hYmxlXV0uXG4gKiovXG5SdWxlci5wcm90b3R5cGUuZW5hYmxlT25seSA9IGZ1bmN0aW9uIChsaXN0LCBpZ25vcmVJbnZhbGlkKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkgeyBsaXN0ID0gW2xpc3RdIH1cblxuICB0aGlzLl9fcnVsZXNfXy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7IHJ1bGUuZW5hYmxlZCA9IGZhbHNlIH0pXG5cbiAgdGhpcy5lbmFibGUobGlzdCwgaWdub3JlSW52YWxpZClcbn1cblxuLyoqXG4gKiBSdWxlci5kaXNhYmxlKGxpc3QgWywgaWdub3JlSW52YWxpZF0pIC0+IEFycmF5XG4gKiAtIGxpc3QgKFN0cmluZ3xBcnJheSk6IGxpc3Qgb2YgcnVsZSBuYW1lcyB0byBkaXNhYmxlLlxuICogLSBpZ25vcmVJbnZhbGlkIChCb29sZWFuKTogc2V0IGB0cnVlYCB0byBpZ25vcmUgZXJyb3JzIHdoZW4gcnVsZSBub3QgZm91bmQuXG4gKlxuICogRGlzYWJsZSBydWxlcyB3aXRoIGdpdmVuIG5hbWVzLiBJZiBhbnkgcnVsZSBuYW1lIG5vdCBmb3VuZCAtIHRocm93IEVycm9yLlxuICogRXJyb3JzIGNhbiBiZSBkaXNhYmxlZCBieSBzZWNvbmQgcGFyYW0uXG4gKlxuICogUmV0dXJucyBsaXN0IG9mIGZvdW5kIHJ1bGUgbmFtZXMgKGlmIG5vIGV4Y2VwdGlvbiBoYXBwZW5lZCkuXG4gKlxuICogU2VlIGFsc28gW1tSdWxlci5lbmFibGVdXSwgW1tSdWxlci5lbmFibGVPbmx5XV0uXG4gKiovXG5SdWxlci5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIChsaXN0LCBpZ25vcmVJbnZhbGlkKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkgeyBsaXN0ID0gW2xpc3RdIH1cblxuICBjb25zdCByZXN1bHQgPSBbXVxuXG4gIC8vIFNlYXJjaCBieSBuYW1lIGFuZCBkaXNhYmxlXG4gIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGNvbnN0IGlkeCA9IHRoaXMuX19maW5kX18obmFtZSlcblxuICAgIGlmIChpZHggPCAwKSB7XG4gICAgICBpZiAoaWdub3JlSW52YWxpZCkgeyByZXR1cm4gfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSdWxlcyBtYW5hZ2VyOiBpbnZhbGlkIHJ1bGUgbmFtZSAnICsgbmFtZSlcbiAgICB9XG4gICAgdGhpcy5fX3J1bGVzX19baWR4XS5lbmFibGVkID0gZmFsc2VcbiAgICByZXN1bHQucHVzaChuYW1lKVxuICB9LCB0aGlzKVxuXG4gIHRoaXMuX19jYWNoZV9fID0gbnVsbFxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qKlxuICogUnVsZXIuZ2V0UnVsZXMoY2hhaW5OYW1lKSAtPiBBcnJheVxuICpcbiAqIFJldHVybiBhcnJheSBvZiBhY3RpdmUgZnVuY3Rpb25zIChydWxlcykgZm9yIGdpdmVuIGNoYWluIG5hbWUuIEl0IGFuYWx5emVzXG4gKiBydWxlcyBjb25maWd1cmF0aW9uLCBjb21waWxlcyBjYWNoZXMgaWYgbm90IGV4aXN0cyBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogRGVmYXVsdCBjaGFpbiBuYW1lIGlzIGAnJ2AgKGVtcHR5IHN0cmluZykuIEl0IGNhbid0IGJlIHNraXBwZWQuIFRoYXQnc1xuICogZG9uZSBpbnRlbnRpb25hbGx5LCB0byBrZWVwIHNpZ25hdHVyZSBtb25vbW9ycGhpYyBmb3IgaGlnaCBzcGVlZC5cbiAqKi9cblJ1bGVyLnByb3RvdHlwZS5nZXRSdWxlcyA9IGZ1bmN0aW9uIChjaGFpbk5hbWUpIHtcbiAgaWYgKHRoaXMuX19jYWNoZV9fID09PSBudWxsKSB7XG4gICAgdGhpcy5fX2NvbXBpbGVfXygpXG4gIH1cblxuICAvLyBDaGFpbiBjYW4gYmUgZW1wdHksIGlmIHJ1bGVzIGRpc2FibGVkLiBCdXQgd2Ugc3RpbGwgaGF2ZSB0byByZXR1cm4gQXJyYXkuXG4gIHJldHVybiB0aGlzLl9fY2FjaGVfX1tjaGFpbk5hbWVdIHx8IFtdXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJ1bGVyXG4iLCIvLyBUb2tlbiBjbGFzc1xuXG4vKipcbiAqIGNsYXNzIFRva2VuXG4gKiovXG5cbi8qKlxuICogbmV3IFRva2VuKHR5cGUsIHRhZywgbmVzdGluZylcbiAqXG4gKiBDcmVhdGUgbmV3IHRva2VuIGFuZCBmaWxsIHBhc3NlZCBwcm9wZXJ0aWVzLlxuICoqL1xuZnVuY3Rpb24gVG9rZW4gKHR5cGUsIHRhZywgbmVzdGluZykge1xuICAvKipcbiAgICogVG9rZW4jdHlwZSAtPiBTdHJpbmdcbiAgICpcbiAgICogVHlwZSBvZiB0aGUgdG9rZW4gKHN0cmluZywgZS5nLiBcInBhcmFncmFwaF9vcGVuXCIpXG4gICAqKi9cbiAgdGhpcy50eXBlICAgICA9IHR5cGVcblxuICAvKipcbiAgICogVG9rZW4jdGFnIC0+IFN0cmluZ1xuICAgKlxuICAgKiBodG1sIHRhZyBuYW1lLCBlLmcuIFwicFwiXG4gICAqKi9cbiAgdGhpcy50YWcgICAgICA9IHRhZ1xuXG4gIC8qKlxuICAgKiBUb2tlbiNhdHRycyAtPiBBcnJheVxuICAgKlxuICAgKiBIdG1sIGF0dHJpYnV0ZXMuIEZvcm1hdDogYFsgWyBuYW1lMSwgdmFsdWUxIF0sIFsgbmFtZTIsIHZhbHVlMiBdIF1gXG4gICAqKi9cbiAgdGhpcy5hdHRycyAgICA9IG51bGxcblxuICAvKipcbiAgICogVG9rZW4jbWFwIC0+IEFycmF5XG4gICAqXG4gICAqIFNvdXJjZSBtYXAgaW5mby4gRm9ybWF0OiBgWyBsaW5lX2JlZ2luLCBsaW5lX2VuZCBdYFxuICAgKiovXG4gIHRoaXMubWFwICAgICAgPSBudWxsXG5cbiAgLyoqXG4gICAqIFRva2VuI25lc3RpbmcgLT4gTnVtYmVyXG4gICAqXG4gICAqIExldmVsIGNoYW5nZSAobnVtYmVyIGluIHstMSwgMCwgMX0gc2V0KSwgd2hlcmU6XG4gICAqXG4gICAqIC0gIGAxYCBtZWFucyB0aGUgdGFnIGlzIG9wZW5pbmdcbiAgICogLSAgYDBgIG1lYW5zIHRoZSB0YWcgaXMgc2VsZi1jbG9zaW5nXG4gICAqIC0gYC0xYCBtZWFucyB0aGUgdGFnIGlzIGNsb3NpbmdcbiAgICoqL1xuICB0aGlzLm5lc3RpbmcgID0gbmVzdGluZ1xuXG4gIC8qKlxuICAgKiBUb2tlbiNsZXZlbCAtPiBOdW1iZXJcbiAgICpcbiAgICogbmVzdGluZyBsZXZlbCwgdGhlIHNhbWUgYXMgYHN0YXRlLmxldmVsYFxuICAgKiovXG4gIHRoaXMubGV2ZWwgICAgPSAwXG5cbiAgLyoqXG4gICAqIFRva2VuI2NoaWxkcmVuIC0+IEFycmF5XG4gICAqXG4gICAqIEFuIGFycmF5IG9mIGNoaWxkIG5vZGVzIChpbmxpbmUgYW5kIGltZyB0b2tlbnMpXG4gICAqKi9cbiAgdGhpcy5jaGlsZHJlbiA9IG51bGxcblxuICAvKipcbiAgICogVG9rZW4jY29udGVudCAtPiBTdHJpbmdcbiAgICpcbiAgICogSW4gYSBjYXNlIG9mIHNlbGYtY2xvc2luZyB0YWcgKGNvZGUsIGh0bWwsIGZlbmNlLCBldGMuKSxcbiAgICogaXQgaGFzIGNvbnRlbnRzIG9mIHRoaXMgdGFnLlxuICAgKiovXG4gIHRoaXMuY29udGVudCAgPSAnJ1xuXG4gIC8qKlxuICAgKiBUb2tlbiNtYXJrdXAgLT4gU3RyaW5nXG4gICAqXG4gICAqICcqJyBvciAnXycgZm9yIGVtcGhhc2lzLCBmZW5jZSBzdHJpbmcgZm9yIGZlbmNlLCBldGMuXG4gICAqKi9cbiAgdGhpcy5tYXJrdXAgICA9ICcnXG5cbiAgLyoqXG4gICAqIFRva2VuI2luZm8gLT4gU3RyaW5nXG4gICAqXG4gICAqIEFkZGl0aW9uYWwgaW5mb3JtYXRpb246XG4gICAqXG4gICAqIC0gSW5mbyBzdHJpbmcgZm9yIFwiZmVuY2VcIiB0b2tlbnNcbiAgICogLSBUaGUgdmFsdWUgXCJhdXRvXCIgZm9yIGF1dG9saW5rIFwibGlua19vcGVuXCIgYW5kIFwibGlua19jbG9zZVwiIHRva2Vuc1xuICAgKiAtIFRoZSBzdHJpbmcgdmFsdWUgb2YgdGhlIGl0ZW0gbWFya2VyIGZvciBvcmRlcmVkLWxpc3QgXCJsaXN0X2l0ZW1fb3BlblwiIHRva2Vuc1xuICAgKiovXG4gIHRoaXMuaW5mbyAgICAgPSAnJ1xuXG4gIC8qKlxuICAgKiBUb2tlbiNtZXRhIC0+IE9iamVjdFxuICAgKlxuICAgKiBBIHBsYWNlIGZvciBwbHVnaW5zIHRvIHN0b3JlIGFuIGFyYml0cmFyeSBkYXRhXG4gICAqKi9cbiAgdGhpcy5tZXRhICAgICA9IG51bGxcblxuICAvKipcbiAgICogVG9rZW4jYmxvY2sgLT4gQm9vbGVhblxuICAgKlxuICAgKiBUcnVlIGZvciBibG9jay1sZXZlbCB0b2tlbnMsIGZhbHNlIGZvciBpbmxpbmUgdG9rZW5zLlxuICAgKiBVc2VkIGluIHJlbmRlcmVyIHRvIGNhbGN1bGF0ZSBsaW5lIGJyZWFrc1xuICAgKiovXG4gIHRoaXMuYmxvY2sgICAgPSBmYWxzZVxuXG4gIC8qKlxuICAgKiBUb2tlbiNoaWRkZW4gLT4gQm9vbGVhblxuICAgKlxuICAgKiBJZiBpdCdzIHRydWUsIGlnbm9yZSB0aGlzIGVsZW1lbnQgd2hlbiByZW5kZXJpbmcuIFVzZWQgZm9yIHRpZ2h0IGxpc3RzXG4gICAqIHRvIGhpZGUgcGFyYWdyYXBocy5cbiAgICoqL1xuICB0aGlzLmhpZGRlbiAgID0gZmFsc2Vcbn1cblxuLyoqXG4gKiBUb2tlbi5hdHRySW5kZXgobmFtZSkgLT4gTnVtYmVyXG4gKlxuICogU2VhcmNoIGF0dHJpYnV0ZSBpbmRleCBieSBuYW1lLlxuICoqL1xuVG9rZW4ucHJvdG90eXBlLmF0dHJJbmRleCA9IGZ1bmN0aW9uIGF0dHJJbmRleCAobmFtZSkge1xuICBpZiAoIXRoaXMuYXR0cnMpIHsgcmV0dXJuIC0xIH1cblxuICBjb25zdCBhdHRycyA9IHRoaXMuYXR0cnNcblxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXR0cnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoYXR0cnNbaV1bMF0gPT09IG5hbWUpIHsgcmV0dXJuIGkgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIFRva2VuLmF0dHJQdXNoKGF0dHJEYXRhKVxuICpcbiAqIEFkZCBgWyBuYW1lLCB2YWx1ZSBdYCBhdHRyaWJ1dGUgdG8gbGlzdC4gSW5pdCBhdHRycyBpZiBuZWNlc3NhcnlcbiAqKi9cblRva2VuLnByb3RvdHlwZS5hdHRyUHVzaCA9IGZ1bmN0aW9uIGF0dHJQdXNoIChhdHRyRGF0YSkge1xuICBpZiAodGhpcy5hdHRycykge1xuICAgIHRoaXMuYXR0cnMucHVzaChhdHRyRGF0YSlcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmF0dHJzID0gW2F0dHJEYXRhXVxuICB9XG59XG5cbi8qKlxuICogVG9rZW4uYXR0clNldChuYW1lLCB2YWx1ZSlcbiAqXG4gKiBTZXQgYG5hbWVgIGF0dHJpYnV0ZSB0byBgdmFsdWVgLiBPdmVycmlkZSBvbGQgdmFsdWUgaWYgZXhpc3RzLlxuICoqL1xuVG9rZW4ucHJvdG90eXBlLmF0dHJTZXQgPSBmdW5jdGlvbiBhdHRyU2V0IChuYW1lLCB2YWx1ZSkge1xuICBjb25zdCBpZHggPSB0aGlzLmF0dHJJbmRleChuYW1lKVxuICBjb25zdCBhdHRyRGF0YSA9IFtuYW1lLCB2YWx1ZV1cblxuICBpZiAoaWR4IDwgMCkge1xuICAgIHRoaXMuYXR0clB1c2goYXR0ckRhdGEpXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hdHRyc1tpZHhdID0gYXR0ckRhdGFcbiAgfVxufVxuXG4vKipcbiAqIFRva2VuLmF0dHJHZXQobmFtZSlcbiAqXG4gKiBHZXQgdGhlIHZhbHVlIG9mIGF0dHJpYnV0ZSBgbmFtZWAsIG9yIG51bGwgaWYgaXQgZG9lcyBub3QgZXhpc3QuXG4gKiovXG5Ub2tlbi5wcm90b3R5cGUuYXR0ckdldCA9IGZ1bmN0aW9uIGF0dHJHZXQgKG5hbWUpIHtcbiAgY29uc3QgaWR4ID0gdGhpcy5hdHRySW5kZXgobmFtZSlcbiAgbGV0IHZhbHVlID0gbnVsbFxuICBpZiAoaWR4ID49IDApIHtcbiAgICB2YWx1ZSA9IHRoaXMuYXR0cnNbaWR4XVsxXVxuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIFRva2VuLmF0dHJKb2luKG5hbWUsIHZhbHVlKVxuICpcbiAqIEpvaW4gdmFsdWUgdG8gZXhpc3RpbmcgYXR0cmlidXRlIHZpYSBzcGFjZS4gT3IgY3JlYXRlIG5ldyBhdHRyaWJ1dGUgaWYgbm90XG4gKiBleGlzdHMuIFVzZWZ1bCB0byBvcGVyYXRlIHdpdGggdG9rZW4gY2xhc3Nlcy5cbiAqKi9cblRva2VuLnByb3RvdHlwZS5hdHRySm9pbiA9IGZ1bmN0aW9uIGF0dHJKb2luIChuYW1lLCB2YWx1ZSkge1xuICBjb25zdCBpZHggPSB0aGlzLmF0dHJJbmRleChuYW1lKVxuXG4gIGlmIChpZHggPCAwKSB7XG4gICAgdGhpcy5hdHRyUHVzaChbbmFtZSwgdmFsdWVdKVxuICB9IGVsc2Uge1xuICAgIHRoaXMuYXR0cnNbaWR4XVsxXSA9IHRoaXMuYXR0cnNbaWR4XVsxXSArICcgJyArIHZhbHVlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9rZW5cbiIsIi8vIENvcmUgc3RhdGUgb2JqZWN0XG4vL1xuXG5pbXBvcnQgVG9rZW4gZnJvbSAnLi4vdG9rZW4ubWpzJ1xuXG5mdW5jdGlvbiBTdGF0ZUNvcmUgKHNyYywgbWQsIGVudikge1xuICB0aGlzLnNyYyA9IHNyY1xuICB0aGlzLmVudiA9IGVudlxuICB0aGlzLnRva2VucyA9IFtdXG4gIHRoaXMuaW5saW5lTW9kZSA9IGZhbHNlXG4gIHRoaXMubWQgPSBtZCAvLyBsaW5rIHRvIHBhcnNlciBpbnN0YW5jZVxufVxuXG4vLyByZS1leHBvcnQgVG9rZW4gY2xhc3MgdG8gdXNlIGluIGNvcmUgcnVsZXNcblN0YXRlQ29yZS5wcm90b3R5cGUuVG9rZW4gPSBUb2tlblxuXG5leHBvcnQgZGVmYXVsdCBTdGF0ZUNvcmVcbiIsIi8vIE5vcm1hbGl6ZSBpbnB1dCBzdHJpbmdcblxuLy8gaHR0cHM6Ly9zcGVjLmNvbW1vbm1hcmsub3JnLzAuMjkvI2xpbmUtZW5kaW5nXG5jb25zdCBORVdMSU5FU19SRSAgPSAvXFxyXFxuP3xcXG4vZ1xuY29uc3QgTlVMTF9SRSAgICAgID0gL1xcMC9nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZSAoc3RhdGUpIHtcbiAgbGV0IHN0clxuXG4gIC8vIE5vcm1hbGl6ZSBuZXdsaW5lc1xuICBzdHIgPSBzdGF0ZS5zcmMucmVwbGFjZShORVdMSU5FU19SRSwgJ1xcbicpXG5cbiAgLy8gUmVwbGFjZSBOVUxMIGNoYXJhY3RlcnNcbiAgc3RyID0gc3RyLnJlcGxhY2UoTlVMTF9SRSwgJ1xcdUZGRkQnKVxuXG4gIHN0YXRlLnNyYyA9IHN0clxufVxuIiwiLy8gUmVwbGFjZSBsaW5rLWxpa2UgdGV4dHMgd2l0aCBsaW5rIG5vZGVzLlxuLy9cbi8vIEN1cnJlbnRseSByZXN0cmljdGVkIGJ5IGBtZC52YWxpZGF0ZUxpbmsoKWAgdG8gaHR0cC9odHRwcy9mdHBcbi8vXG5cbmltcG9ydCB7IGFycmF5UmVwbGFjZUF0IH0gZnJvbSAnLi4vY29tbW9uL3V0aWxzLm1qcydcblxuZnVuY3Rpb24gaXNMaW5rT3BlbiAoc3RyKSB7XG4gIHJldHVybiAvXjxhWz5cXHNdL2kudGVzdChzdHIpXG59XG5mdW5jdGlvbiBpc0xpbmtDbG9zZSAoc3RyKSB7XG4gIHJldHVybiAvXjxcXC9hXFxzKj4vaS50ZXN0KHN0cilcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlua2lmeSAoc3RhdGUpIHtcbiAgY29uc3QgYmxvY2tUb2tlbnMgPSBzdGF0ZS50b2tlbnNcblxuICBpZiAoIXN0YXRlLm1kLm9wdGlvbnMubGlua2lmeSkgeyByZXR1cm4gfVxuXG4gIGZvciAobGV0IGogPSAwLCBsID0gYmxvY2tUb2tlbnMubGVuZ3RoOyBqIDwgbDsgaisrKSB7XG4gICAgaWYgKGJsb2NrVG9rZW5zW2pdLnR5cGUgIT09ICdpbmxpbmUnIHx8XG4gICAgICAgICFzdGF0ZS5tZC5saW5raWZ5LnByZXRlc3QoYmxvY2tUb2tlbnNbal0uY29udGVudCkpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgbGV0IHRva2VucyA9IGJsb2NrVG9rZW5zW2pdLmNoaWxkcmVuXG5cbiAgICBsZXQgaHRtbExpbmtMZXZlbCA9IDBcblxuICAgIC8vIFdlIHNjYW4gZnJvbSB0aGUgZW5kLCB0byBrZWVwIHBvc2l0aW9uIHdoZW4gbmV3IHRhZ3MgYWRkZWQuXG4gICAgLy8gVXNlIHJldmVyc2VkIGxvZ2ljIGluIGxpbmtzIHN0YXJ0L2VuZCBtYXRjaFxuICAgIGZvciAobGV0IGkgPSB0b2tlbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRUb2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICAvLyBTa2lwIGNvbnRlbnQgb2YgbWFya2Rvd24gbGlua3NcbiAgICAgIGlmIChjdXJyZW50VG9rZW4udHlwZSA9PT0gJ2xpbmtfY2xvc2UnKSB7XG4gICAgICAgIGktLVxuICAgICAgICB3aGlsZSAodG9rZW5zW2ldLmxldmVsICE9PSBjdXJyZW50VG9rZW4ubGV2ZWwgJiYgdG9rZW5zW2ldLnR5cGUgIT09ICdsaW5rX29wZW4nKSB7XG4gICAgICAgICAgaS0tXG4gICAgICAgIH1cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gU2tpcCBjb250ZW50IG9mIGh0bWwgdGFnIGxpbmtzXG4gICAgICBpZiAoY3VycmVudFRva2VuLnR5cGUgPT09ICdodG1sX2lubGluZScpIHtcbiAgICAgICAgaWYgKGlzTGlua09wZW4oY3VycmVudFRva2VuLmNvbnRlbnQpICYmIGh0bWxMaW5rTGV2ZWwgPiAwKSB7XG4gICAgICAgICAgaHRtbExpbmtMZXZlbC0tXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTGlua0Nsb3NlKGN1cnJlbnRUb2tlbi5jb250ZW50KSkge1xuICAgICAgICAgIGh0bWxMaW5rTGV2ZWwrK1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaHRtbExpbmtMZXZlbCA+IDApIHsgY29udGludWUgfVxuXG4gICAgICBpZiAoY3VycmVudFRva2VuLnR5cGUgPT09ICd0ZXh0JyAmJiBzdGF0ZS5tZC5saW5raWZ5LnRlc3QoY3VycmVudFRva2VuLmNvbnRlbnQpKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBjdXJyZW50VG9rZW4uY29udGVudFxuICAgICAgICBsZXQgbGlua3MgPSBzdGF0ZS5tZC5saW5raWZ5Lm1hdGNoKHRleHQpXG5cbiAgICAgICAgLy8gTm93IHNwbGl0IHN0cmluZyB0byBub2Rlc1xuICAgICAgICBjb25zdCBub2RlcyA9IFtdXG4gICAgICAgIGxldCBsZXZlbCA9IGN1cnJlbnRUb2tlbi5sZXZlbFxuICAgICAgICBsZXQgbGFzdFBvcyA9IDBcblxuICAgICAgICAvLyBmb3JiaWQgZXNjYXBlIHNlcXVlbmNlIGF0IHRoZSBzdGFydCBvZiB0aGUgc3RyaW5nLFxuICAgICAgICAvLyB0aGlzIGF2b2lkcyBodHRwXFw6Ly9leGFtcGxlLmNvbS8gZnJvbSBiZWluZyBsaW5raWZpZWQgYXNcbiAgICAgICAgLy8gaHR0cDo8YSBocmVmPVwiLy9leGFtcGxlLmNvbS9cIj4vL2V4YW1wbGUuY29tLzwvYT5cbiAgICAgICAgaWYgKGxpbmtzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgIGxpbmtzWzBdLmluZGV4ID09PSAwICYmXG4gICAgICAgICAgICBpID4gMCAmJlxuICAgICAgICAgICAgdG9rZW5zW2kgLSAxXS50eXBlID09PSAndGV4dF9zcGVjaWFsJykge1xuICAgICAgICAgIGxpbmtzID0gbGlua3Muc2xpY2UoMSlcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGxuID0gMDsgbG4gPCBsaW5rcy5sZW5ndGg7IGxuKyspIHtcbiAgICAgICAgICBjb25zdCB1cmwgPSBsaW5rc1tsbl0udXJsXG4gICAgICAgICAgY29uc3QgZnVsbFVybCA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmsodXJsKVxuICAgICAgICAgIGlmICghc3RhdGUubWQudmFsaWRhdGVMaW5rKGZ1bGxVcmwpKSB7IGNvbnRpbnVlIH1cblxuICAgICAgICAgIGxldCB1cmxUZXh0ID0gbGlua3NbbG5dLnRleHRcblxuICAgICAgICAgIC8vIExpbmtpZmllciBtaWdodCBzZW5kIHJhdyBob3N0bmFtZXMgbGlrZSBcImV4YW1wbGUuY29tXCIsIHdoZXJlIHVybFxuICAgICAgICAgIC8vIHN0YXJ0cyB3aXRoIGRvbWFpbiBuYW1lLiBTbyB3ZSBwcmVwZW5kIGh0dHA6Ly8gaW4gdGhvc2UgY2FzZXMsXG4gICAgICAgICAgLy8gYW5kIHJlbW92ZSBpdCBhZnRlcndhcmRzLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgaWYgKCFsaW5rc1tsbl0uc2NoZW1hKSB7XG4gICAgICAgICAgICB1cmxUZXh0ID0gc3RhdGUubWQubm9ybWFsaXplTGlua1RleHQoJ2h0dHA6Ly8nICsgdXJsVGV4dCkucmVwbGFjZSgvXmh0dHA6XFwvXFwvLywgJycpXG4gICAgICAgICAgfSBlbHNlIGlmIChsaW5rc1tsbl0uc2NoZW1hID09PSAnbWFpbHRvOicgJiYgIS9ebWFpbHRvOi9pLnRlc3QodXJsVGV4dCkpIHtcbiAgICAgICAgICAgIHVybFRleHQgPSBzdGF0ZS5tZC5ub3JtYWxpemVMaW5rVGV4dCgnbWFpbHRvOicgKyB1cmxUZXh0KS5yZXBsYWNlKC9ebWFpbHRvOi8sICcnKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmxUZXh0ID0gc3RhdGUubWQubm9ybWFsaXplTGlua1RleHQodXJsVGV4dClcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBwb3MgPSBsaW5rc1tsbl0uaW5kZXhcblxuICAgICAgICAgIGlmIChwb3MgPiBsYXN0UG9zKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbiAgID0gbmV3IHN0YXRlLlRva2VuKCd0ZXh0JywgJycsIDApXG4gICAgICAgICAgICB0b2tlbi5jb250ZW50ID0gdGV4dC5zbGljZShsYXN0UG9zLCBwb3MpXG4gICAgICAgICAgICB0b2tlbi5sZXZlbCAgID0gbGV2ZWxcbiAgICAgICAgICAgIG5vZGVzLnB1c2godG9rZW4pXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgdG9rZW5fbyAgID0gbmV3IHN0YXRlLlRva2VuKCdsaW5rX29wZW4nLCAnYScsIDEpXG4gICAgICAgICAgdG9rZW5fby5hdHRycyAgID0gW1snaHJlZicsIGZ1bGxVcmxdXVxuICAgICAgICAgIHRva2VuX28ubGV2ZWwgICA9IGxldmVsKytcbiAgICAgICAgICB0b2tlbl9vLm1hcmt1cCAgPSAnbGlua2lmeSdcbiAgICAgICAgICB0b2tlbl9vLmluZm8gICAgPSAnYXV0bydcbiAgICAgICAgICBub2Rlcy5wdXNoKHRva2VuX28pXG5cbiAgICAgICAgICBjb25zdCB0b2tlbl90ICAgPSBuZXcgc3RhdGUuVG9rZW4oJ3RleHQnLCAnJywgMClcbiAgICAgICAgICB0b2tlbl90LmNvbnRlbnQgPSB1cmxUZXh0XG4gICAgICAgICAgdG9rZW5fdC5sZXZlbCAgID0gbGV2ZWxcbiAgICAgICAgICBub2Rlcy5wdXNoKHRva2VuX3QpXG5cbiAgICAgICAgICBjb25zdCB0b2tlbl9jICAgPSBuZXcgc3RhdGUuVG9rZW4oJ2xpbmtfY2xvc2UnLCAnYScsIC0xKVxuICAgICAgICAgIHRva2VuX2MubGV2ZWwgICA9IC0tbGV2ZWxcbiAgICAgICAgICB0b2tlbl9jLm1hcmt1cCAgPSAnbGlua2lmeSdcbiAgICAgICAgICB0b2tlbl9jLmluZm8gICAgPSAnYXV0bydcbiAgICAgICAgICBub2Rlcy5wdXNoKHRva2VuX2MpXG5cbiAgICAgICAgICBsYXN0UG9zID0gbGlua3NbbG5dLmxhc3RJbmRleFxuICAgICAgICB9XG4gICAgICAgIGlmIChsYXN0UG9zIDwgdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCB0b2tlbiAgID0gbmV3IHN0YXRlLlRva2VuKCd0ZXh0JywgJycsIDApXG4gICAgICAgICAgdG9rZW4uY29udGVudCA9IHRleHQuc2xpY2UobGFzdFBvcylcbiAgICAgICAgICB0b2tlbi5sZXZlbCAgID0gbGV2ZWxcbiAgICAgICAgICBub2Rlcy5wdXNoKHRva2VuKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjZSBjdXJyZW50IG5vZGVcbiAgICAgICAgYmxvY2tUb2tlbnNbal0uY2hpbGRyZW4gPSB0b2tlbnMgPSBhcnJheVJlcGxhY2VBdCh0b2tlbnMsIGksIG5vZGVzKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLy8gU2ltcGxlIHR5cG9ncmFwaGljIHJlcGxhY2VtZW50c1xuLy9cbi8vIChjKSAoQykg4oaSIMKpXG4vLyAodG0pIChUTSkg4oaSIOKEolxuLy8gKHIpIChSKSDihpIgwq5cbi8vICstIOKGkiDCsVxuLy8gLi4uIOKGkiDigKYgKGFsc28gPy4uLi4g4oaSID8uLiwgIS4uLi4g4oaSICEuLilcbi8vID8/Pz8/Pz8/IOKGkiA/Pz8sICEhISEhIOKGkiAhISEsIGAsLGAg4oaSIGAsYFxuLy8gLS0g4oaSICZuZGFzaDssIC0tLSDihpIgJm1kYXNoO1xuLy9cblxuLy8gVE9ETzpcbi8vIC0gZnJhY3Rpb25hbHMgMS8yLCAxLzQsIDMvNCAtPiDCvSwgwrwsIMK+XG4vLyAtIG11bHRpcGxpY2F0aW9ucyAyIHggNCAtPiAyIMOXIDRcblxuY29uc3QgUkFSRV9SRSA9IC9cXCstfFxcLlxcLnxcXD9cXD9cXD9cXD98ISEhIXwsLHwtLS9cblxuLy8gV29ya2Fyb3VuZCBmb3IgcGhhbnRvbWpzIC0gbmVlZCByZWdleCB3aXRob3V0IC9nIGZsYWcsXG4vLyBvciByb290IGNoZWNrIHdpbGwgZmFpbCBldmVyeSBzZWNvbmQgdGltZVxuY29uc3QgU0NPUEVEX0FCQlJfVEVTVF9SRSA9IC9cXCgoY3x0bXxyKVxcKS9pXG5cbmNvbnN0IFNDT1BFRF9BQkJSX1JFID0gL1xcKChjfHRtfHIpXFwpL2lnXG5jb25zdCBTQ09QRURfQUJCUiA9IHtcbiAgYzogJ8KpJyxcbiAgcjogJ8KuJyxcbiAgdG06ICfihKInXG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VGbiAobWF0Y2gsIG5hbWUpIHtcbiAgcmV0dXJuIFNDT1BFRF9BQkJSW25hbWUudG9Mb3dlckNhc2UoKV1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZV9zY29wZWQgKGlubGluZVRva2Vucykge1xuICBsZXQgaW5zaWRlX2F1dG9saW5rID0gMFxuXG4gIGZvciAobGV0IGkgPSBpbmxpbmVUb2tlbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCB0b2tlbiA9IGlubGluZVRva2Vuc1tpXVxuXG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICd0ZXh0JyAmJiAhaW5zaWRlX2F1dG9saW5rKSB7XG4gICAgICB0b2tlbi5jb250ZW50ID0gdG9rZW4uY29udGVudC5yZXBsYWNlKFNDT1BFRF9BQkJSX1JFLCByZXBsYWNlRm4pXG4gICAgfVxuXG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICdsaW5rX29wZW4nICYmIHRva2VuLmluZm8gPT09ICdhdXRvJykge1xuICAgICAgaW5zaWRlX2F1dG9saW5rLS1cbiAgICB9XG5cbiAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2xpbmtfY2xvc2UnICYmIHRva2VuLmluZm8gPT09ICdhdXRvJykge1xuICAgICAgaW5zaWRlX2F1dG9saW5rKytcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZV9yYXJlIChpbmxpbmVUb2tlbnMpIHtcbiAgbGV0IGluc2lkZV9hdXRvbGluayA9IDBcblxuICBmb3IgKGxldCBpID0gaW5saW5lVG9rZW5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgdG9rZW4gPSBpbmxpbmVUb2tlbnNbaV1cblxuICAgIGlmICh0b2tlbi50eXBlID09PSAndGV4dCcgJiYgIWluc2lkZV9hdXRvbGluaykge1xuICAgICAgaWYgKFJBUkVfUkUudGVzdCh0b2tlbi5jb250ZW50KSkge1xuICAgICAgICB0b2tlbi5jb250ZW50ID0gdG9rZW4uY29udGVudFxuICAgICAgICAgIC5yZXBsYWNlKC9cXCstL2csICfCsScpXG4gICAgICAgICAgLy8gLi4sIC4uLiwgLi4uLi4uLiAtPiDigKZcbiAgICAgICAgICAvLyBidXQgPy4uLi4uICYgIS4uLi4uIC0+ID8uLiAmICEuLlxuICAgICAgICAgIC5yZXBsYWNlKC9cXC57Mix9L2csICfigKYnKS5yZXBsYWNlKC8oWz8hXSnigKYvZywgJyQxLi4nKVxuICAgICAgICAgIC5yZXBsYWNlKC8oWz8hXSl7NCx9L2csICckMSQxJDEnKS5yZXBsYWNlKC8sezIsfS9nLCAnLCcpXG4gICAgICAgICAgLy8gZW0tZGFzaFxuICAgICAgICAgIC5yZXBsYWNlKC8oXnxbXi1dKS0tLSg/PVteLV18JCkvbWcsICckMVxcdTIwMTQnKVxuICAgICAgICAgIC8vIGVuLWRhc2hcbiAgICAgICAgICAucmVwbGFjZSgvKF58XFxzKS0tKD89XFxzfCQpL21nLCAnJDFcXHUyMDEzJylcbiAgICAgICAgICAucmVwbGFjZSgvKF58W14tXFxzXSktLSg/PVteLVxcc118JCkvbWcsICckMVxcdTIwMTMnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0b2tlbi50eXBlID09PSAnbGlua19vcGVuJyAmJiB0b2tlbi5pbmZvID09PSAnYXV0bycpIHtcbiAgICAgIGluc2lkZV9hdXRvbGluay0tXG4gICAgfVxuXG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICdsaW5rX2Nsb3NlJyAmJiB0b2tlbi5pbmZvID09PSAnYXV0bycpIHtcbiAgICAgIGluc2lkZV9hdXRvbGluaysrXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcGxhY2UgKHN0YXRlKSB7XG4gIGxldCBibGtJZHhcblxuICBpZiAoIXN0YXRlLm1kLm9wdGlvbnMudHlwb2dyYXBoZXIpIHsgcmV0dXJuIH1cblxuICBmb3IgKGJsa0lkeCA9IHN0YXRlLnRva2Vucy5sZW5ndGggLSAxOyBibGtJZHggPj0gMDsgYmxrSWR4LS0pIHtcbiAgICBpZiAoc3RhdGUudG9rZW5zW2Jsa0lkeF0udHlwZSAhPT0gJ2lubGluZScpIHsgY29udGludWUgfVxuXG4gICAgaWYgKFNDT1BFRF9BQkJSX1RFU1RfUkUudGVzdChzdGF0ZS50b2tlbnNbYmxrSWR4XS5jb250ZW50KSkge1xuICAgICAgcmVwbGFjZV9zY29wZWQoc3RhdGUudG9rZW5zW2Jsa0lkeF0uY2hpbGRyZW4pXG4gICAgfVxuXG4gICAgaWYgKFJBUkVfUkUudGVzdChzdGF0ZS50b2tlbnNbYmxrSWR4XS5jb250ZW50KSkge1xuICAgICAgcmVwbGFjZV9yYXJlKHN0YXRlLnRva2Vuc1tibGtJZHhdLmNoaWxkcmVuKVxuICAgIH1cbiAgfVxufVxuIiwiLy8gQ29udmVydCBzdHJhaWdodCBxdW90YXRpb24gbWFya3MgdG8gdHlwb2dyYXBoaWMgb25lc1xuLy9cblxuaW1wb3J0IHsgaXNXaGl0ZVNwYWNlLCBpc1B1bmN0Q2hhciwgaXNNZEFzY2lpUHVuY3QgfSBmcm9tICcuLi9jb21tb24vdXRpbHMubWpzJ1xuXG5jb25zdCBRVU9URV9URVNUX1JFID0gL1snXCJdL1xuY29uc3QgUVVPVEVfUkUgPSAvWydcIl0vZ1xuY29uc3QgQVBPU1RST1BIRSA9ICdcXHUyMDE5JyAvKiDigJkgKi9cblxuZnVuY3Rpb24gcmVwbGFjZUF0IChzdHIsIGluZGV4LCBjaCkge1xuICByZXR1cm4gc3RyLnNsaWNlKDAsIGluZGV4KSArIGNoICsgc3RyLnNsaWNlKGluZGV4ICsgMSlcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc19pbmxpbmVzICh0b2tlbnMsIHN0YXRlKSB7XG4gIGxldCBqXG5cbiAgY29uc3Qgc3RhY2sgPSBbXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGNvbnN0IHRoaXNMZXZlbCA9IHRva2Vuc1tpXS5sZXZlbFxuXG4gICAgZm9yIChqID0gc3RhY2subGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIGlmIChzdGFja1tqXS5sZXZlbCA8PSB0aGlzTGV2ZWwpIHsgYnJlYWsgfVxuICAgIH1cbiAgICBzdGFjay5sZW5ndGggPSBqICsgMVxuXG4gICAgaWYgKHRva2VuLnR5cGUgIT09ICd0ZXh0JykgeyBjb250aW51ZSB9XG5cbiAgICBsZXQgdGV4dCA9IHRva2VuLmNvbnRlbnRcbiAgICBsZXQgcG9zID0gMFxuICAgIGxldCBtYXggPSB0ZXh0Lmxlbmd0aFxuXG4gICAgLyogZXNsaW50IG5vLWxhYmVsczowLGJsb2NrLXNjb3BlZC12YXI6MCAqL1xuICAgIE9VVEVSOlxuICAgIHdoaWxlIChwb3MgPCBtYXgpIHtcbiAgICAgIFFVT1RFX1JFLmxhc3RJbmRleCA9IHBvc1xuICAgICAgY29uc3QgdCA9IFFVT1RFX1JFLmV4ZWModGV4dClcbiAgICAgIGlmICghdCkgeyBicmVhayB9XG5cbiAgICAgIGxldCBjYW5PcGVuID0gdHJ1ZVxuICAgICAgbGV0IGNhbkNsb3NlID0gdHJ1ZVxuICAgICAgcG9zID0gdC5pbmRleCArIDFcbiAgICAgIGNvbnN0IGlzU2luZ2xlID0gKHRbMF0gPT09IFwiJ1wiKVxuXG4gICAgICAvLyBGaW5kIHByZXZpb3VzIGNoYXJhY3RlcixcbiAgICAgIC8vIGRlZmF1bHQgdG8gc3BhY2UgaWYgaXQncyB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5lXG4gICAgICAvL1xuICAgICAgbGV0IGxhc3RDaGFyID0gMHgyMFxuXG4gICAgICBpZiAodC5pbmRleCAtIDEgPj0gMCkge1xuICAgICAgICBsYXN0Q2hhciA9IHRleHQuY2hhckNvZGVBdCh0LmluZGV4IC0gMSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaiA9IGkgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICAgIGlmICh0b2tlbnNbal0udHlwZSA9PT0gJ3NvZnRicmVhaycgfHwgdG9rZW5zW2pdLnR5cGUgPT09ICdoYXJkYnJlYWsnKSBicmVhayAvLyBsYXN0Q2hhciBkZWZhdWx0cyB0byAweDIwXG4gICAgICAgICAgaWYgKCF0b2tlbnNbal0uY29udGVudCkgY29udGludWUgLy8gc2hvdWxkIHNraXAgYWxsIHRva2VucyBleGNlcHQgJ3RleHQnLCAnaHRtbF9pbmxpbmUnIG9yICdjb2RlX2lubGluZSdcblxuICAgICAgICAgIGxhc3RDaGFyID0gdG9rZW5zW2pdLmNvbnRlbnQuY2hhckNvZGVBdCh0b2tlbnNbal0uY29udGVudC5sZW5ndGggLSAxKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRmluZCBuZXh0IGNoYXJhY3RlcixcbiAgICAgIC8vIGRlZmF1bHQgdG8gc3BhY2UgaWYgaXQncyB0aGUgZW5kIG9mIHRoZSBsaW5lXG4gICAgICAvL1xuICAgICAgbGV0IG5leHRDaGFyID0gMHgyMFxuXG4gICAgICBpZiAocG9zIDwgbWF4KSB7XG4gICAgICAgIG5leHRDaGFyID0gdGV4dC5jaGFyQ29kZUF0KHBvcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgdG9rZW5zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaWYgKHRva2Vuc1tqXS50eXBlID09PSAnc29mdGJyZWFrJyB8fCB0b2tlbnNbal0udHlwZSA9PT0gJ2hhcmRicmVhaycpIGJyZWFrIC8vIG5leHRDaGFyIGRlZmF1bHRzIHRvIDB4MjBcbiAgICAgICAgICBpZiAoIXRva2Vuc1tqXS5jb250ZW50KSBjb250aW51ZSAvLyBzaG91bGQgc2tpcCBhbGwgdG9rZW5zIGV4Y2VwdCAndGV4dCcsICdodG1sX2lubGluZScgb3IgJ2NvZGVfaW5saW5lJ1xuXG4gICAgICAgICAgbmV4dENoYXIgPSB0b2tlbnNbal0uY29udGVudC5jaGFyQ29kZUF0KDApXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBpc0xhc3RQdW5jdENoYXIgPSBpc01kQXNjaWlQdW5jdChsYXN0Q2hhcikgfHwgaXNQdW5jdENoYXIoU3RyaW5nLmZyb21DaGFyQ29kZShsYXN0Q2hhcikpXG4gICAgICBjb25zdCBpc05leHRQdW5jdENoYXIgPSBpc01kQXNjaWlQdW5jdChuZXh0Q2hhcikgfHwgaXNQdW5jdENoYXIoU3RyaW5nLmZyb21DaGFyQ29kZShuZXh0Q2hhcikpXG5cbiAgICAgIGNvbnN0IGlzTGFzdFdoaXRlU3BhY2UgPSBpc1doaXRlU3BhY2UobGFzdENoYXIpXG4gICAgICBjb25zdCBpc05leHRXaGl0ZVNwYWNlID0gaXNXaGl0ZVNwYWNlKG5leHRDaGFyKVxuXG4gICAgICBpZiAoaXNOZXh0V2hpdGVTcGFjZSkge1xuICAgICAgICBjYW5PcGVuID0gZmFsc2VcbiAgICAgIH0gZWxzZSBpZiAoaXNOZXh0UHVuY3RDaGFyKSB7XG4gICAgICAgIGlmICghKGlzTGFzdFdoaXRlU3BhY2UgfHwgaXNMYXN0UHVuY3RDaGFyKSkge1xuICAgICAgICAgIGNhbk9wZW4gPSBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xhc3RXaGl0ZVNwYWNlKSB7XG4gICAgICAgIGNhbkNsb3NlID0gZmFsc2VcbiAgICAgIH0gZWxzZSBpZiAoaXNMYXN0UHVuY3RDaGFyKSB7XG4gICAgICAgIGlmICghKGlzTmV4dFdoaXRlU3BhY2UgfHwgaXNOZXh0UHVuY3RDaGFyKSkge1xuICAgICAgICAgIGNhbkNsb3NlID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobmV4dENoYXIgPT09IDB4MjIgLyogXCIgKi8gJiYgdFswXSA9PT0gJ1wiJykge1xuICAgICAgICBpZiAobGFzdENoYXIgPj0gMHgzMCAvKiAwICovICYmIGxhc3RDaGFyIDw9IDB4MzkgLyogOSAqLykge1xuICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZTogMVwiXCIgLSBjb3VudCBmaXJzdCBxdW90ZSBhcyBhbiBpbmNoXG4gICAgICAgICAgY2FuQ2xvc2UgPSBjYW5PcGVuID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2FuT3BlbiAmJiBjYW5DbG9zZSkge1xuICAgICAgICAvLyBSZXBsYWNlIHF1b3RlcyBpbiB0aGUgbWlkZGxlIG9mIHB1bmN0dWF0aW9uIHNlcXVlbmNlLCBidXQgbm90XG4gICAgICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgdGhlIHdvcmRzLCBpLmUuOlxuICAgICAgICAvL1xuICAgICAgICAvLyAxLiBmb28gXCIgYmFyIFwiIGJheiAtIG5vdCByZXBsYWNlZFxuICAgICAgICAvLyAyLiBmb28tXCItYmFyLVwiLWJheiAtIHJlcGxhY2VkXG4gICAgICAgIC8vIDMuIGZvb1wiYmFyXCJiYXogICAgIC0gbm90IHJlcGxhY2VkXG4gICAgICAgIC8vXG4gICAgICAgIGNhbk9wZW4gPSBpc0xhc3RQdW5jdENoYXJcbiAgICAgICAgY2FuQ2xvc2UgPSBpc05leHRQdW5jdENoYXJcbiAgICAgIH1cblxuICAgICAgaWYgKCFjYW5PcGVuICYmICFjYW5DbG9zZSkge1xuICAgICAgICAvLyBtaWRkbGUgb2Ygd29yZFxuICAgICAgICBpZiAoaXNTaW5nbGUpIHtcbiAgICAgICAgICB0b2tlbi5jb250ZW50ID0gcmVwbGFjZUF0KHRva2VuLmNvbnRlbnQsIHQuaW5kZXgsIEFQT1NUUk9QSEUpXG4gICAgICAgIH1cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKGNhbkNsb3NlKSB7XG4gICAgICAgIC8vIHRoaXMgY291bGQgYmUgYSBjbG9zaW5nIHF1b3RlLCByZXdpbmQgdGhlIHN0YWNrIHRvIGdldCBhIG1hdGNoXG4gICAgICAgIGZvciAoaiA9IHN0YWNrLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgbGV0IGl0ZW0gPSBzdGFja1tqXVxuICAgICAgICAgIGlmIChzdGFja1tqXS5sZXZlbCA8IHRoaXNMZXZlbCkgeyBicmVhayB9XG4gICAgICAgICAgaWYgKGl0ZW0uc2luZ2xlID09PSBpc1NpbmdsZSAmJiBzdGFja1tqXS5sZXZlbCA9PT0gdGhpc0xldmVsKSB7XG4gICAgICAgICAgICBpdGVtID0gc3RhY2tbal1cblxuICAgICAgICAgICAgbGV0IG9wZW5RdW90ZVxuICAgICAgICAgICAgbGV0IGNsb3NlUXVvdGVcbiAgICAgICAgICAgIGlmIChpc1NpbmdsZSkge1xuICAgICAgICAgICAgICBvcGVuUXVvdGUgPSBzdGF0ZS5tZC5vcHRpb25zLnF1b3Rlc1syXVxuICAgICAgICAgICAgICBjbG9zZVF1b3RlID0gc3RhdGUubWQub3B0aW9ucy5xdW90ZXNbM11cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG9wZW5RdW90ZSA9IHN0YXRlLm1kLm9wdGlvbnMucXVvdGVzWzBdXG4gICAgICAgICAgICAgIGNsb3NlUXVvdGUgPSBzdGF0ZS5tZC5vcHRpb25zLnF1b3Rlc1sxXVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyByZXBsYWNlIHRva2VuLmNvbnRlbnQgKmJlZm9yZSogdG9rZW5zW2l0ZW0udG9rZW5dLmNvbnRlbnQsXG4gICAgICAgICAgICAvLyBiZWNhdXNlLCBpZiB0aGV5IGFyZSBwb2ludGluZyBhdCB0aGUgc2FtZSB0b2tlbiwgcmVwbGFjZUF0XG4gICAgICAgICAgICAvLyBjb3VsZCBtZXNzIHVwIGluZGljZXMgd2hlbiBxdW90ZSBsZW5ndGggIT0gMVxuICAgICAgICAgICAgdG9rZW4uY29udGVudCA9IHJlcGxhY2VBdCh0b2tlbi5jb250ZW50LCB0LmluZGV4LCBjbG9zZVF1b3RlKVxuICAgICAgICAgICAgdG9rZW5zW2l0ZW0udG9rZW5dLmNvbnRlbnQgPSByZXBsYWNlQXQoXG4gICAgICAgICAgICAgIHRva2Vuc1tpdGVtLnRva2VuXS5jb250ZW50LCBpdGVtLnBvcywgb3BlblF1b3RlKVxuXG4gICAgICAgICAgICBwb3MgKz0gY2xvc2VRdW90ZS5sZW5ndGggLSAxXG4gICAgICAgICAgICBpZiAoaXRlbS50b2tlbiA9PT0gaSkgeyBwb3MgKz0gb3BlblF1b3RlLmxlbmd0aCAtIDEgfVxuXG4gICAgICAgICAgICB0ZXh0ID0gdG9rZW4uY29udGVudFxuICAgICAgICAgICAgbWF4ID0gdGV4dC5sZW5ndGhcblxuICAgICAgICAgICAgc3RhY2subGVuZ3RoID0galxuICAgICAgICAgICAgY29udGludWUgT1VURVJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNhbk9wZW4pIHtcbiAgICAgICAgc3RhY2sucHVzaCh7XG4gICAgICAgICAgdG9rZW46IGksXG4gICAgICAgICAgcG9zOiB0LmluZGV4LFxuICAgICAgICAgIHNpbmdsZTogaXNTaW5nbGUsXG4gICAgICAgICAgbGV2ZWw6IHRoaXNMZXZlbFxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChjYW5DbG9zZSAmJiBpc1NpbmdsZSkge1xuICAgICAgICB0b2tlbi5jb250ZW50ID0gcmVwbGFjZUF0KHRva2VuLmNvbnRlbnQsIHQuaW5kZXgsIEFQT1NUUk9QSEUpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNtYXJ0cXVvdGVzIChzdGF0ZSkge1xuICAvKiBlc2xpbnQgbWF4LWRlcHRoOjAgKi9cbiAgaWYgKCFzdGF0ZS5tZC5vcHRpb25zLnR5cG9ncmFwaGVyKSB7IHJldHVybiB9XG5cbiAgZm9yIChsZXQgYmxrSWR4ID0gc3RhdGUudG9rZW5zLmxlbmd0aCAtIDE7IGJsa0lkeCA+PSAwOyBibGtJZHgtLSkge1xuICAgIGlmIChzdGF0ZS50b2tlbnNbYmxrSWR4XS50eXBlICE9PSAnaW5saW5lJyB8fFxuICAgICAgICAhUVVPVEVfVEVTVF9SRS50ZXN0KHN0YXRlLnRva2Vuc1tibGtJZHhdLmNvbnRlbnQpKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHByb2Nlc3NfaW5saW5lcyhzdGF0ZS50b2tlbnNbYmxrSWR4XS5jaGlsZHJlbiwgc3RhdGUpXG4gIH1cbn1cbiIsIi8qKiBpbnRlcm5hbFxuICogY2xhc3MgQ29yZVxuICpcbiAqIFRvcC1sZXZlbCBydWxlcyBleGVjdXRvci4gR2x1ZXMgYmxvY2svaW5saW5lIHBhcnNlcnMgYW5kIGRvZXMgaW50ZXJtZWRpYXRlXG4gKiB0cmFuc2Zvcm1hdGlvbnMuXG4gKiovXG5cbmltcG9ydCBSdWxlciBmcm9tICcuL3J1bGVyLm1qcydcbmltcG9ydCBTdGF0ZUNvcmUgZnJvbSAnLi9ydWxlc19jb3JlL3N0YXRlX2NvcmUubWpzJ1xuXG5pbXBvcnQgcl9ub3JtYWxpemUgZnJvbSAnLi9ydWxlc19jb3JlL25vcm1hbGl6ZS5tanMnXG5pbXBvcnQgcl9ibG9jayBmcm9tICcuL3J1bGVzX2NvcmUvYmxvY2subWpzJ1xuaW1wb3J0IHJfaW5saW5lIGZyb20gJy4vcnVsZXNfY29yZS9pbmxpbmUubWpzJ1xuaW1wb3J0IHJfbGlua2lmeSBmcm9tICcuL3J1bGVzX2NvcmUvbGlua2lmeS5tanMnXG5pbXBvcnQgcl9yZXBsYWNlbWVudHMgZnJvbSAnLi9ydWxlc19jb3JlL3JlcGxhY2VtZW50cy5tanMnXG5pbXBvcnQgcl9zbWFydHF1b3RlcyBmcm9tICcuL3J1bGVzX2NvcmUvc21hcnRxdW90ZXMubWpzJ1xuaW1wb3J0IHJfdGV4dF9qb2luIGZyb20gJy4vcnVsZXNfY29yZS90ZXh0X2pvaW4ubWpzJ1xuXG5jb25zdCBfcnVsZXMgPSBbXG4gIFsnbm9ybWFsaXplJywgICAgICByX25vcm1hbGl6ZV0sXG4gIFsnYmxvY2snLCAgICAgICAgICByX2Jsb2NrXSxcbiAgWydpbmxpbmUnLCAgICAgICAgIHJfaW5saW5lXSxcbiAgWydsaW5raWZ5JywgICAgICAgIHJfbGlua2lmeV0sXG4gIFsncmVwbGFjZW1lbnRzJywgICByX3JlcGxhY2VtZW50c10sXG4gIFsnc21hcnRxdW90ZXMnLCAgICByX3NtYXJ0cXVvdGVzXSxcbiAgLy8gYHRleHRfam9pbmAgZmluZHMgYHRleHRfc3BlY2lhbGAgdG9rZW5zIChmb3IgZXNjYXBlIHNlcXVlbmNlcylcbiAgLy8gYW5kIGpvaW5zIHRoZW0gd2l0aCB0aGUgcmVzdCBvZiB0aGUgdGV4dFxuICBbJ3RleHRfam9pbicsICAgICAgcl90ZXh0X2pvaW5dXG5dXG5cbi8qKlxuICogbmV3IENvcmUoKVxuICoqL1xuZnVuY3Rpb24gQ29yZSAoKSB7XG4gIC8qKlxuICAgKiBDb3JlI3J1bGVyIC0+IFJ1bGVyXG4gICAqXG4gICAqIFtbUnVsZXJdXSBpbnN0YW5jZS4gS2VlcCBjb25maWd1cmF0aW9uIG9mIGNvcmUgcnVsZXMuXG4gICAqKi9cbiAgdGhpcy5ydWxlciA9IG5ldyBSdWxlcigpXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBfcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLnJ1bGVyLnB1c2goX3J1bGVzW2ldWzBdLCBfcnVsZXNbaV1bMV0pXG4gIH1cbn1cblxuLyoqXG4gKiBDb3JlLnByb2Nlc3Moc3RhdGUpXG4gKlxuICogRXhlY3V0ZXMgY29yZSBjaGFpbiBydWxlcy5cbiAqKi9cbkNvcmUucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgY29uc3QgcnVsZXMgPSB0aGlzLnJ1bGVyLmdldFJ1bGVzKCcnKVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gcnVsZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgcnVsZXNbaV0oc3RhdGUpXG4gIH1cbn1cblxuQ29yZS5wcm90b3R5cGUuU3RhdGUgPSBTdGF0ZUNvcmVcblxuZXhwb3J0IGRlZmF1bHQgQ29yZVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmxvY2sgKHN0YXRlKSB7XG4gIGxldCB0b2tlblxuXG4gIGlmIChzdGF0ZS5pbmxpbmVNb2RlKSB7XG4gICAgdG9rZW4gICAgICAgICAgPSBuZXcgc3RhdGUuVG9rZW4oJ2lubGluZScsICcnLCAwKVxuICAgIHRva2VuLmNvbnRlbnQgID0gc3RhdGUuc3JjXG4gICAgdG9rZW4ubWFwICAgICAgPSBbMCwgMV1cbiAgICB0b2tlbi5jaGlsZHJlbiA9IFtdXG4gICAgc3RhdGUudG9rZW5zLnB1c2godG9rZW4pXG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubWQuYmxvY2sucGFyc2Uoc3RhdGUuc3JjLCBzdGF0ZS5tZCwgc3RhdGUuZW52LCBzdGF0ZS50b2tlbnMpXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlubGluZSAoc3RhdGUpIHtcbiAgY29uc3QgdG9rZW5zID0gc3RhdGUudG9rZW5zXG5cbiAgLy8gUGFyc2UgaW5saW5lc1xuICBmb3IgKGxldCBpID0gMCwgbCA9IHRva2Vucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCB0b2sgPSB0b2tlbnNbaV1cbiAgICBpZiAodG9rLnR5cGUgPT09ICdpbmxpbmUnKSB7XG4gICAgICBzdGF0ZS5tZC5pbmxpbmUucGFyc2UodG9rLmNvbnRlbnQsIHN0YXRlLm1kLCBzdGF0ZS5lbnYsIHRvay5jaGlsZHJlbilcbiAgICB9XG4gIH1cbn1cbiIsIi8vIEpvaW4gcmF3IHRleHQgdG9rZW5zIHdpdGggdGhlIHJlc3Qgb2YgdGhlIHRleHRcbi8vXG4vLyBUaGlzIGlzIHNldCBhcyBhIHNlcGFyYXRlIHJ1bGUgdG8gcHJvdmlkZSBhbiBvcHBvcnR1bml0eSBmb3IgcGx1Z2luc1xuLy8gdG8gcnVuIHRleHQgcmVwbGFjZW1lbnRzIGFmdGVyIHRleHQgam9pbiwgYnV0IGJlZm9yZSBlc2NhcGUgam9pbi5cbi8vXG4vLyBGb3IgZXhhbXBsZSwgYFxcOilgIHNob3VsZG4ndCBiZSByZXBsYWNlZCB3aXRoIGFuIGVtb2ppLlxuLy9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGV4dF9qb2luIChzdGF0ZSkge1xuICBsZXQgY3VyciwgbGFzdFxuICBjb25zdCBibG9ja1Rva2VucyA9IHN0YXRlLnRva2Vuc1xuICBjb25zdCBsID0gYmxvY2tUb2tlbnMubGVuZ3RoXG5cbiAgZm9yIChsZXQgaiA9IDA7IGogPCBsOyBqKyspIHtcbiAgICBpZiAoYmxvY2tUb2tlbnNbal0udHlwZSAhPT0gJ2lubGluZScpIGNvbnRpbnVlXG5cbiAgICBjb25zdCB0b2tlbnMgPSBibG9ja1Rva2Vuc1tqXS5jaGlsZHJlblxuICAgIGNvbnN0IG1heCA9IHRva2Vucy5sZW5ndGhcblxuICAgIGZvciAoY3VyciA9IDA7IGN1cnIgPCBtYXg7IGN1cnIrKykge1xuICAgICAgaWYgKHRva2Vuc1tjdXJyXS50eXBlID09PSAndGV4dF9zcGVjaWFsJykge1xuICAgICAgICB0b2tlbnNbY3Vycl0udHlwZSA9ICd0ZXh0J1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY3VyciA9IGxhc3QgPSAwOyBjdXJyIDwgbWF4OyBjdXJyKyspIHtcbiAgICAgIGlmICh0b2tlbnNbY3Vycl0udHlwZSA9PT0gJ3RleHQnICYmXG4gICAgICAgICAgY3VyciArIDEgPCBtYXggJiZcbiAgICAgICAgICB0b2tlbnNbY3VyciArIDFdLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAvLyBjb2xsYXBzZSB0d28gYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICB0b2tlbnNbY3VyciArIDFdLmNvbnRlbnQgPSB0b2tlbnNbY3Vycl0uY29udGVudCArIHRva2Vuc1tjdXJyICsgMV0uY29udGVudFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGN1cnIgIT09IGxhc3QpIHsgdG9rZW5zW2xhc3RdID0gdG9rZW5zW2N1cnJdIH1cblxuICAgICAgICBsYXN0KytcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VyciAhPT0gbGFzdCkge1xuICAgICAgdG9rZW5zLmxlbmd0aCA9IGxhc3RcbiAgICB9XG4gIH1cbn1cbiIsIi8vIFBhcnNlciBzdGF0ZSBjbGFzc1xuXG5pbXBvcnQgVG9rZW4gZnJvbSAnLi4vdG9rZW4ubWpzJ1xuaW1wb3J0IHsgaXNTcGFjZSB9IGZyb20gJy4uL2NvbW1vbi91dGlscy5tanMnXG5cbmZ1bmN0aW9uIFN0YXRlQmxvY2sgKHNyYywgbWQsIGVudiwgdG9rZW5zKSB7XG4gIHRoaXMuc3JjID0gc3JjXG5cbiAgLy8gbGluayB0byBwYXJzZXIgaW5zdGFuY2VcbiAgdGhpcy5tZCAgICAgPSBtZFxuXG4gIHRoaXMuZW52ID0gZW52XG5cbiAgLy9cbiAgLy8gSW50ZXJuYWwgc3RhdGUgdmFydGlhYmxlc1xuICAvL1xuXG4gIHRoaXMudG9rZW5zID0gdG9rZW5zXG5cbiAgdGhpcy5iTWFya3MgPSBbXSAgLy8gbGluZSBiZWdpbiBvZmZzZXRzIGZvciBmYXN0IGp1bXBzXG4gIHRoaXMuZU1hcmtzID0gW10gIC8vIGxpbmUgZW5kIG9mZnNldHMgZm9yIGZhc3QganVtcHNcbiAgdGhpcy50U2hpZnQgPSBbXSAgLy8gb2Zmc2V0cyBvZiB0aGUgZmlyc3Qgbm9uLXNwYWNlIGNoYXJhY3RlcnMgKHRhYnMgbm90IGV4cGFuZGVkKVxuICB0aGlzLnNDb3VudCA9IFtdICAvLyBpbmRlbnRzIGZvciBlYWNoIGxpbmUgKHRhYnMgZXhwYW5kZWQpXG5cbiAgLy8gQW4gYW1vdW50IG9mIHZpcnR1YWwgc3BhY2VzICh0YWJzIGV4cGFuZGVkKSBiZXR3ZWVuIGJlZ2lubmluZ1xuICAvLyBvZiBlYWNoIGxpbmUgKGJNYXJrcykgYW5kIHJlYWwgYmVnaW5uaW5nIG9mIHRoYXQgbGluZS5cbiAgLy9cbiAgLy8gSXQgZXhpc3RzIG9ubHkgYXMgYSBoYWNrIGJlY2F1c2UgYmxvY2txdW90ZXMgb3ZlcnJpZGUgYk1hcmtzXG4gIC8vIGxvc2luZyBpbmZvcm1hdGlvbiBpbiB0aGUgcHJvY2Vzcy5cbiAgLy9cbiAgLy8gSXQncyB1c2VkIG9ubHkgd2hlbiBleHBhbmRpbmcgdGFicywgeW91IGNhbiB0aGluayBhYm91dCBpdCBhc1xuICAvLyBhbiBpbml0aWFsIHRhYiBsZW5ndGgsIGUuZy4gYnNDb3VudD0yMSBhcHBsaWVkIHRvIHN0cmluZyBgXFx0MTIzYFxuICAvLyBtZWFucyBmaXJzdCB0YWIgc2hvdWxkIGJlIGV4cGFuZGVkIHRvIDQtMjElNCA9PT0gMyBzcGFjZXMuXG4gIC8vXG4gIHRoaXMuYnNDb3VudCA9IFtdXG5cbiAgLy8gYmxvY2sgcGFyc2VyIHZhcmlhYmxlc1xuXG4gIC8vIHJlcXVpcmVkIGJsb2NrIGNvbnRlbnQgaW5kZW50IChmb3IgZXhhbXBsZSwgaWYgd2UgYXJlXG4gIC8vIGluc2lkZSBhIGxpc3QsIGl0IHdvdWxkIGJlIHBvc2l0aW9uZWQgYWZ0ZXIgbGlzdCBtYXJrZXIpXG4gIHRoaXMuYmxrSW5kZW50ICA9IDBcbiAgdGhpcy5saW5lICAgICAgID0gMCAvLyBsaW5lIGluZGV4IGluIHNyY1xuICB0aGlzLmxpbmVNYXggICAgPSAwIC8vIGxpbmVzIGNvdW50XG4gIHRoaXMudGlnaHQgICAgICA9IGZhbHNlICAvLyBsb29zZS90aWdodCBtb2RlIGZvciBsaXN0c1xuICB0aGlzLmRkSW5kZW50ICAgPSAtMSAvLyBpbmRlbnQgb2YgdGhlIGN1cnJlbnQgZGQgYmxvY2sgKC0xIGlmIHRoZXJlIGlzbid0IGFueSlcbiAgdGhpcy5saXN0SW5kZW50ID0gLTEgLy8gaW5kZW50IG9mIHRoZSBjdXJyZW50IGxpc3QgYmxvY2sgKC0xIGlmIHRoZXJlIGlzbid0IGFueSlcblxuICAvLyBjYW4gYmUgJ2Jsb2NrcXVvdGUnLCAnbGlzdCcsICdyb290JywgJ3BhcmFncmFwaCcgb3IgJ3JlZmVyZW5jZSdcbiAgLy8gdXNlZCBpbiBsaXN0cyB0byBkZXRlcm1pbmUgaWYgdGhleSBpbnRlcnJ1cHQgYSBwYXJhZ3JhcGhcbiAgdGhpcy5wYXJlbnRUeXBlID0gJ3Jvb3QnXG5cbiAgdGhpcy5sZXZlbCA9IDBcblxuICAvLyBDcmVhdGUgY2FjaGVzXG4gIC8vIEdlbmVyYXRlIG1hcmtlcnMuXG4gIGNvbnN0IHMgPSB0aGlzLnNyY1xuXG4gIGZvciAobGV0IHN0YXJ0ID0gMCwgcG9zID0gMCwgaW5kZW50ID0gMCwgb2Zmc2V0ID0gMCwgbGVuID0gcy5sZW5ndGgsIGluZGVudF9mb3VuZCA9IGZhbHNlOyBwb3MgPCBsZW47IHBvcysrKSB7XG4gICAgY29uc3QgY2ggPSBzLmNoYXJDb2RlQXQocG9zKVxuXG4gICAgaWYgKCFpbmRlbnRfZm91bmQpIHtcbiAgICAgIGlmIChpc1NwYWNlKGNoKSkge1xuICAgICAgICBpbmRlbnQrK1xuXG4gICAgICAgIGlmIChjaCA9PT0gMHgwOSkge1xuICAgICAgICAgIG9mZnNldCArPSA0IC0gb2Zmc2V0ICUgNFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZnNldCsrXG4gICAgICAgIH1cbiAgICAgICAgY29udGludWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGVudF9mb3VuZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2ggPT09IDB4MEEgfHwgcG9zID09PSBsZW4gLSAxKSB7XG4gICAgICBpZiAoY2ggIT09IDB4MEEpIHsgcG9zKysgfVxuICAgICAgdGhpcy5iTWFya3MucHVzaChzdGFydClcbiAgICAgIHRoaXMuZU1hcmtzLnB1c2gocG9zKVxuICAgICAgdGhpcy50U2hpZnQucHVzaChpbmRlbnQpXG4gICAgICB0aGlzLnNDb3VudC5wdXNoKG9mZnNldClcbiAgICAgIHRoaXMuYnNDb3VudC5wdXNoKDApXG5cbiAgICAgIGluZGVudF9mb3VuZCA9IGZhbHNlXG4gICAgICBpbmRlbnQgPSAwXG4gICAgICBvZmZzZXQgPSAwXG4gICAgICBzdGFydCA9IHBvcyArIDFcbiAgICB9XG4gIH1cblxuICAvLyBQdXNoIGZha2UgZW50cnkgdG8gc2ltcGxpZnkgY2FjaGUgYm91bmRzIGNoZWNrc1xuICB0aGlzLmJNYXJrcy5wdXNoKHMubGVuZ3RoKVxuICB0aGlzLmVNYXJrcy5wdXNoKHMubGVuZ3RoKVxuICB0aGlzLnRTaGlmdC5wdXNoKDApXG4gIHRoaXMuc0NvdW50LnB1c2goMClcbiAgdGhpcy5ic0NvdW50LnB1c2goMClcblxuICB0aGlzLmxpbmVNYXggPSB0aGlzLmJNYXJrcy5sZW5ndGggLSAxIC8vIGRvbid0IGNvdW50IGxhc3QgZmFrZSBsaW5lXG59XG5cbi8vIFB1c2ggbmV3IHRva2VuIHRvIFwic3RyZWFtXCIuXG4vL1xuU3RhdGVCbG9jay5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICh0eXBlLCB0YWcsIG5lc3RpbmcpIHtcbiAgY29uc3QgdG9rZW4gPSBuZXcgVG9rZW4odHlwZSwgdGFnLCBuZXN0aW5nKVxuICB0b2tlbi5ibG9jayA9IHRydWVcblxuICBpZiAobmVzdGluZyA8IDApIHRoaXMubGV2ZWwtLSAvLyBjbG9zaW5nIHRhZ1xuICB0b2tlbi5sZXZlbCA9IHRoaXMubGV2ZWxcbiAgaWYgKG5lc3RpbmcgPiAwKSB0aGlzLmxldmVsKysgLy8gb3BlbmluZyB0YWdcblxuICB0aGlzLnRva2Vucy5wdXNoKHRva2VuKVxuICByZXR1cm4gdG9rZW5cbn1cblxuU3RhdGVCbG9jay5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkgKGxpbmUpIHtcbiAgcmV0dXJuIHRoaXMuYk1hcmtzW2xpbmVdICsgdGhpcy50U2hpZnRbbGluZV0gPj0gdGhpcy5lTWFya3NbbGluZV1cbn1cblxuU3RhdGVCbG9jay5wcm90b3R5cGUuc2tpcEVtcHR5TGluZXMgPSBmdW5jdGlvbiBza2lwRW1wdHlMaW5lcyAoZnJvbSkge1xuICBmb3IgKGxldCBtYXggPSB0aGlzLmxpbmVNYXg7IGZyb20gPCBtYXg7IGZyb20rKykge1xuICAgIGlmICh0aGlzLmJNYXJrc1tmcm9tXSArIHRoaXMudFNoaWZ0W2Zyb21dIDwgdGhpcy5lTWFya3NbZnJvbV0pIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiBmcm9tXG59XG5cbi8vIFNraXAgc3BhY2VzIGZyb20gZ2l2ZW4gcG9zaXRpb24uXG5TdGF0ZUJsb2NrLnByb3RvdHlwZS5za2lwU3BhY2VzID0gZnVuY3Rpb24gc2tpcFNwYWNlcyAocG9zKSB7XG4gIGZvciAobGV0IG1heCA9IHRoaXMuc3JjLmxlbmd0aDsgcG9zIDwgbWF4OyBwb3MrKykge1xuICAgIGNvbnN0IGNoID0gdGhpcy5zcmMuY2hhckNvZGVBdChwb3MpXG4gICAgaWYgKCFpc1NwYWNlKGNoKSkgeyBicmVhayB9XG4gIH1cbiAgcmV0dXJuIHBvc1xufVxuXG4vLyBTa2lwIHNwYWNlcyBmcm9tIGdpdmVuIHBvc2l0aW9uIGluIHJldmVyc2UuXG5TdGF0ZUJsb2NrLnByb3RvdHlwZS5za2lwU3BhY2VzQmFjayA9IGZ1bmN0aW9uIHNraXBTcGFjZXNCYWNrIChwb3MsIG1pbikge1xuICBpZiAocG9zIDw9IG1pbikgeyByZXR1cm4gcG9zIH1cblxuICB3aGlsZSAocG9zID4gbWluKSB7XG4gICAgaWYgKCFpc1NwYWNlKHRoaXMuc3JjLmNoYXJDb2RlQXQoLS1wb3MpKSkgeyByZXR1cm4gcG9zICsgMSB9XG4gIH1cbiAgcmV0dXJuIHBvc1xufVxuXG4vLyBTa2lwIGNoYXIgY29kZXMgZnJvbSBnaXZlbiBwb3NpdGlvblxuU3RhdGVCbG9jay5wcm90b3R5cGUuc2tpcENoYXJzID0gZnVuY3Rpb24gc2tpcENoYXJzIChwb3MsIGNvZGUpIHtcbiAgZm9yIChsZXQgbWF4ID0gdGhpcy5zcmMubGVuZ3RoOyBwb3MgPCBtYXg7IHBvcysrKSB7XG4gICAgaWYgKHRoaXMuc3JjLmNoYXJDb2RlQXQocG9zKSAhPT0gY29kZSkgeyBicmVhayB9XG4gIH1cbiAgcmV0dXJuIHBvc1xufVxuXG4vLyBTa2lwIGNoYXIgY29kZXMgcmV2ZXJzZSBmcm9tIGdpdmVuIHBvc2l0aW9uIC0gMVxuU3RhdGVCbG9jay5wcm90b3R5cGUuc2tpcENoYXJzQmFjayA9IGZ1bmN0aW9uIHNraXBDaGFyc0JhY2sgKHBvcywgY29kZSwgbWluKSB7XG4gIGlmIChwb3MgPD0gbWluKSB7IHJldHVybiBwb3MgfVxuXG4gIHdoaWxlIChwb3MgPiBtaW4pIHtcbiAgICBpZiAoY29kZSAhPT0gdGhpcy5zcmMuY2hhckNvZGVBdCgtLXBvcykpIHsgcmV0dXJuIHBvcyArIDEgfVxuICB9XG4gIHJldHVybiBwb3Ncbn1cblxuLy8gY3V0IGxpbmVzIHJhbmdlIGZyb20gc291cmNlLlxuU3RhdGVCbG9jay5wcm90b3R5cGUuZ2V0TGluZXMgPSBmdW5jdGlvbiBnZXRMaW5lcyAoYmVnaW4sIGVuZCwgaW5kZW50LCBrZWVwTGFzdExGKSB7XG4gIGlmIChiZWdpbiA+PSBlbmQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGNvbnN0IHF1ZXVlID0gbmV3IEFycmF5KGVuZCAtIGJlZ2luKVxuXG4gIGZvciAobGV0IGkgPSAwLCBsaW5lID0gYmVnaW47IGxpbmUgPCBlbmQ7IGxpbmUrKywgaSsrKSB7XG4gICAgbGV0IGxpbmVJbmRlbnQgPSAwXG4gICAgY29uc3QgbGluZVN0YXJ0ID0gdGhpcy5iTWFya3NbbGluZV1cbiAgICBsZXQgZmlyc3QgPSBsaW5lU3RhcnRcbiAgICBsZXQgbGFzdFxuXG4gICAgaWYgKGxpbmUgKyAxIDwgZW5kIHx8IGtlZXBMYXN0TEYpIHtcbiAgICAgIC8vIE5vIG5lZWQgZm9yIGJvdW5kcyBjaGVjayBiZWNhdXNlIHdlIGhhdmUgZmFrZSBlbnRyeSBvbiB0YWlsLlxuICAgICAgbGFzdCA9IHRoaXMuZU1hcmtzW2xpbmVdICsgMVxuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gdGhpcy5lTWFya3NbbGluZV1cbiAgICB9XG5cbiAgICB3aGlsZSAoZmlyc3QgPCBsYXN0ICYmIGxpbmVJbmRlbnQgPCBpbmRlbnQpIHtcbiAgICAgIGNvbnN0IGNoID0gdGhpcy5zcmMuY2hhckNvZGVBdChmaXJzdClcblxuICAgICAgaWYgKGlzU3BhY2UoY2gpKSB7XG4gICAgICAgIGlmIChjaCA9PT0gMHgwOSkge1xuICAgICAgICAgIGxpbmVJbmRlbnQgKz0gNCAtIChsaW5lSW5kZW50ICsgdGhpcy5ic0NvdW50W2xpbmVdKSAlIDRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaW5lSW5kZW50KytcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChmaXJzdCAtIGxpbmVTdGFydCA8IHRoaXMudFNoaWZ0W2xpbmVdKSB7XG4gICAgICAgIC8vIHBhdGNoZWQgdFNoaWZ0IG1hc2tlZCBjaGFyYWN0ZXJzIHRvIGxvb2sgbGlrZSBzcGFjZXMgKGJsb2NrcXVvdGVzLCBsaXN0IG1hcmtlcnMpXG4gICAgICAgIGxpbmVJbmRlbnQrK1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgZmlyc3QrK1xuICAgIH1cblxuICAgIGlmIChsaW5lSW5kZW50ID4gaW5kZW50KSB7XG4gICAgICAvLyBwYXJ0aWFsbHkgZXhwYW5kaW5nIHRhYnMgaW4gY29kZSBibG9ja3MsIGUuZyAnXFx0XFx0Zm9vYmFyJ1xuICAgICAgLy8gd2l0aCBpbmRlbnQ9MiBiZWNvbWVzICcgIFxcdGZvb2JhcidcbiAgICAgIHF1ZXVlW2ldID0gbmV3IEFycmF5KGxpbmVJbmRlbnQgLSBpbmRlbnQgKyAxKS5qb2luKCcgJykgKyB0aGlzLnNyYy5zbGljZShmaXJzdCwgbGFzdClcbiAgICB9IGVsc2Uge1xuICAgICAgcXVldWVbaV0gPSB0aGlzLnNyYy5zbGljZShmaXJzdCwgbGFzdClcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcXVldWUuam9pbignJylcbn1cblxuLy8gcmUtZXhwb3J0IFRva2VuIGNsYXNzIHRvIHVzZSBpbiBibG9jayBydWxlc1xuU3RhdGVCbG9jay5wcm90b3R5cGUuVG9rZW4gPSBUb2tlblxuXG5leHBvcnQgZGVmYXVsdCBTdGF0ZUJsb2NrXG4iLCIvLyBHRk0gdGFibGUsIGh0dHBzOi8vZ2l0aHViLmdpdGh1Yi5jb20vZ2ZtLyN0YWJsZXMtZXh0ZW5zaW9uLVxuXG5pbXBvcnQgeyBpc1NwYWNlIH0gZnJvbSAnLi4vY29tbW9uL3V0aWxzLm1qcydcblxuLy8gTGltaXQgdGhlIGFtb3VudCBvZiBlbXB0eSBhdXRvY29tcGxldGVkIGNlbGxzIGluIGEgdGFibGUsXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0L2lzc3Vlcy8xMDAwLFxuLy9cbi8vIEJvdGggcHVsbGRvd24tY21hcmsgYW5kIGNvbW1vbm1hcmstaHMgbGltaXQgdGhlIG51bWJlciBvZiBjZWxscyB0aGlzIHdheSB0byB+MjAway5cbi8vIFdlIHNldCBpdCB0byA2NWssIHdoaWNoIGNhbiBleHBhbmQgdXNlciBpbnB1dCBieSBhIGZhY3RvciBvZiB4MzcwXG4vLyAoMjU2eDI1NiBzcXVhcmUgaXMgMS44a0IgZXhwYW5kZWQgaW50byA2NTBrQikuXG5jb25zdCBNQVhfQVVUT0NPTVBMRVRFRF9DRUxMUyA9IDB4MTAwMDBcblxuZnVuY3Rpb24gZ2V0TGluZSAoc3RhdGUsIGxpbmUpIHtcbiAgY29uc3QgcG9zID0gc3RhdGUuYk1hcmtzW2xpbmVdICsgc3RhdGUudFNoaWZ0W2xpbmVdXG4gIGNvbnN0IG1heCA9IHN0YXRlLmVNYXJrc1tsaW5lXVxuXG4gIHJldHVybiBzdGF0ZS5zcmMuc2xpY2UocG9zLCBtYXgpXG59XG5cbmZ1bmN0aW9uIGVzY2FwZWRTcGxpdCAoc3RyKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdXG4gIGNvbnN0IG1heCA9IHN0ci5sZW5ndGhcblxuICBsZXQgcG9zID0gMFxuICBsZXQgY2ggPSBzdHIuY2hhckNvZGVBdChwb3MpXG4gIGxldCBpc0VzY2FwZWQgPSBmYWxzZVxuICBsZXQgbGFzdFBvcyA9IDBcbiAgbGV0IGN1cnJlbnQgPSAnJ1xuXG4gIHdoaWxlIChwb3MgPCBtYXgpIHtcbiAgICBpZiAoY2ggPT09IDB4N2MvKiB8ICovKSB7XG4gICAgICBpZiAoIWlzRXNjYXBlZCkge1xuICAgICAgICAvLyBwaXBlIHNlcGFyYXRpbmcgY2VsbHMsICd8J1xuICAgICAgICByZXN1bHQucHVzaChjdXJyZW50ICsgc3RyLnN1YnN0cmluZyhsYXN0UG9zLCBwb3MpKVxuICAgICAgICBjdXJyZW50ID0gJydcbiAgICAgICAgbGFzdFBvcyA9IHBvcyArIDFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzY2FwZWQgcGlwZSwgJ1xcfCdcbiAgICAgICAgY3VycmVudCArPSBzdHIuc3Vic3RyaW5nKGxhc3RQb3MsIHBvcyAtIDEpXG4gICAgICAgIGxhc3RQb3MgPSBwb3NcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpc0VzY2FwZWQgPSAoY2ggPT09IDB4NWMvKiBcXCAqLylcbiAgICBwb3MrK1xuXG4gICAgY2ggPSBzdHIuY2hhckNvZGVBdChwb3MpXG4gIH1cblxuICByZXN1bHQucHVzaChjdXJyZW50ICsgc3RyLnN1YnN0cmluZyhsYXN0UG9zKSlcblxuICByZXR1cm4gcmVzdWx0XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRhYmxlIChzdGF0ZSwgc3RhcnRMaW5lLCBlbmRMaW5lLCBzaWxlbnQpIHtcbiAgLy8gc2hvdWxkIGhhdmUgYXQgbGVhc3QgdHdvIGxpbmVzXG4gIGlmIChzdGFydExpbmUgKyAyID4gZW5kTGluZSkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGxldCBuZXh0TGluZSA9IHN0YXJ0TGluZSArIDFcblxuICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSA8IHN0YXRlLmJsa0luZGVudCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIC8vIGlmIGl0J3MgaW5kZW50ZWQgbW9yZSB0aGFuIDMgc3BhY2VzLCBpdCBzaG91bGQgYmUgYSBjb2RlIGJsb2NrXG4gIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgcmV0dXJuIGZhbHNlIH1cblxuICAvLyBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHNlY29uZCBsaW5lIHNob3VsZCBiZSAnfCcsICctJywgJzonLFxuICAvLyBhbmQgbm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgYWxsb3dlZCBidXQgc3BhY2VzO1xuICAvLyBiYXNpY2FsbHksIHRoaXMgaXMgdGhlIGVxdWl2YWxlbnQgb2YgL15bLTp8XVstOnxcXHNdKiQvIHJlZ2V4cFxuXG4gIGxldCBwb3MgPSBzdGF0ZS5iTWFya3NbbmV4dExpbmVdICsgc3RhdGUudFNoaWZ0W25leHRMaW5lXVxuICBpZiAocG9zID49IHN0YXRlLmVNYXJrc1tuZXh0TGluZV0pIHsgcmV0dXJuIGZhbHNlIH1cblxuICBjb25zdCBmaXJzdENoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKyspXG4gIGlmIChmaXJzdENoICE9PSAweDdDLyogfCAqLyAmJiBmaXJzdENoICE9PSAweDJELyogLSAqLyAmJiBmaXJzdENoICE9PSAweDNBLyogOiAqLykgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGlmIChwb3MgPj0gc3RhdGUuZU1hcmtzW25leHRMaW5lXSkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGNvbnN0IHNlY29uZENoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKyspXG4gIGlmIChzZWNvbmRDaCAhPT0gMHg3Qy8qIHwgKi8gJiYgc2Vjb25kQ2ggIT09IDB4MkQvKiAtICovICYmIHNlY29uZENoICE9PSAweDNBLyogOiAqLyAmJiAhaXNTcGFjZShzZWNvbmRDaCkpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIGlmIGZpcnN0IGNoYXJhY3RlciBpcyAnLScsIHRoZW4gc2Vjb25kIGNoYXJhY3RlciBtdXN0IG5vdCBiZSBhIHNwYWNlXG4gIC8vIChkdWUgdG8gcGFyc2luZyBhbWJpZ3VpdHkgd2l0aCBsaXN0KVxuICBpZiAoZmlyc3RDaCA9PT0gMHgyRC8qIC0gKi8gJiYgaXNTcGFjZShzZWNvbmRDaCkpIHsgcmV0dXJuIGZhbHNlIH1cblxuICB3aGlsZSAocG9zIDwgc3RhdGUuZU1hcmtzW25leHRMaW5lXSkge1xuICAgIGNvbnN0IGNoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKVxuXG4gICAgaWYgKGNoICE9PSAweDdDLyogfCAqLyAmJiBjaCAhPT0gMHgyRC8qIC0gKi8gJiYgY2ggIT09IDB4M0EvKiA6ICovICYmICFpc1NwYWNlKGNoKSkgeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgcG9zKytcbiAgfVxuXG4gIGxldCBsaW5lVGV4dCA9IGdldExpbmUoc3RhdGUsIHN0YXJ0TGluZSArIDEpXG4gIGxldCBjb2x1bW5zID0gbGluZVRleHQuc3BsaXQoJ3wnKVxuICBjb25zdCBhbGlnbnMgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0ID0gY29sdW1uc1tpXS50cmltKClcbiAgICBpZiAoIXQpIHtcbiAgICAgIC8vIGFsbG93IGVtcHR5IGNvbHVtbnMgYmVmb3JlIGFuZCBhZnRlciB0YWJsZSwgYnV0IG5vdCBpbiBiZXR3ZWVuIGNvbHVtbnM7XG4gICAgICAvLyBlLmcuIGFsbG93IGAgfC0tLXwgYCwgZGlzYWxsb3cgYCAtLS18fC0tLSBgXG4gICAgICBpZiAoaSA9PT0gMCB8fCBpID09PSBjb2x1bW5zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghL146Py0rOj8kLy50ZXN0KHQpKSB7IHJldHVybiBmYWxzZSB9XG4gICAgaWYgKHQuY2hhckNvZGVBdCh0Lmxlbmd0aCAtIDEpID09PSAweDNBLyogOiAqLykge1xuICAgICAgYWxpZ25zLnB1c2godC5jaGFyQ29kZUF0KDApID09PSAweDNBLyogOiAqLyA/ICdjZW50ZXInIDogJ3JpZ2h0JylcbiAgICB9IGVsc2UgaWYgKHQuY2hhckNvZGVBdCgwKSA9PT0gMHgzQS8qIDogKi8pIHtcbiAgICAgIGFsaWducy5wdXNoKCdsZWZ0JylcbiAgICB9IGVsc2Uge1xuICAgICAgYWxpZ25zLnB1c2goJycpXG4gICAgfVxuICB9XG5cbiAgbGluZVRleHQgPSBnZXRMaW5lKHN0YXRlLCBzdGFydExpbmUpLnRyaW0oKVxuICBpZiAobGluZVRleHQuaW5kZXhPZignfCcpID09PSAtMSkgeyByZXR1cm4gZmFsc2UgfVxuICBpZiAoc3RhdGUuc0NvdW50W3N0YXJ0TGluZV0gLSBzdGF0ZS5ibGtJbmRlbnQgPj0gNCkgeyByZXR1cm4gZmFsc2UgfVxuICBjb2x1bW5zID0gZXNjYXBlZFNwbGl0KGxpbmVUZXh0KVxuICBpZiAoY29sdW1ucy5sZW5ndGggJiYgY29sdW1uc1swXSA9PT0gJycpIGNvbHVtbnMuc2hpZnQoKVxuICBpZiAoY29sdW1ucy5sZW5ndGggJiYgY29sdW1uc1tjb2x1bW5zLmxlbmd0aCAtIDFdID09PSAnJykgY29sdW1ucy5wb3AoKVxuXG4gIC8vIGhlYWRlciByb3cgd2lsbCBkZWZpbmUgYW4gYW1vdW50IG9mIGNvbHVtbnMgaW4gdGhlIGVudGlyZSB0YWJsZSxcbiAgLy8gYW5kIGFsaWduIHJvdyBzaG91bGQgYmUgZXhhY3RseSB0aGUgc2FtZSAodGhlIHJlc3Qgb2YgdGhlIHJvd3MgY2FuIGRpZmZlcilcbiAgY29uc3QgY29sdW1uQ291bnQgPSBjb2x1bW5zLmxlbmd0aFxuICBpZiAoY29sdW1uQ291bnQgPT09IDAgfHwgY29sdW1uQ291bnQgIT09IGFsaWducy5sZW5ndGgpIHsgcmV0dXJuIGZhbHNlIH1cblxuICBpZiAoc2lsZW50KSB7IHJldHVybiB0cnVlIH1cblxuICBjb25zdCBvbGRQYXJlbnRUeXBlID0gc3RhdGUucGFyZW50VHlwZVxuICBzdGF0ZS5wYXJlbnRUeXBlID0gJ3RhYmxlJ1xuXG4gIC8vIHVzZSAnYmxvY2txdW90ZScgbGlzdHMgZm9yIHRlcm1pbmF0aW9uIGJlY2F1c2UgaXQnc1xuICAvLyB0aGUgbW9zdCBzaW1pbGFyIHRvIHRhYmxlc1xuICBjb25zdCB0ZXJtaW5hdG9yUnVsZXMgPSBzdGF0ZS5tZC5ibG9jay5ydWxlci5nZXRSdWxlcygnYmxvY2txdW90ZScpXG5cbiAgY29uc3QgdG9rZW5fdG8gPSBzdGF0ZS5wdXNoKCd0YWJsZV9vcGVuJywgJ3RhYmxlJywgMSlcbiAgY29uc3QgdGFibGVMaW5lcyA9IFtzdGFydExpbmUsIDBdXG4gIHRva2VuX3RvLm1hcCA9IHRhYmxlTGluZXNcblxuICBjb25zdCB0b2tlbl90aG8gPSBzdGF0ZS5wdXNoKCd0aGVhZF9vcGVuJywgJ3RoZWFkJywgMSlcbiAgdG9rZW5fdGhvLm1hcCA9IFtzdGFydExpbmUsIHN0YXJ0TGluZSArIDFdXG5cbiAgY29uc3QgdG9rZW5faHRybyA9IHN0YXRlLnB1c2goJ3RyX29wZW4nLCAndHInLCAxKVxuICB0b2tlbl9odHJvLm1hcCA9IFtzdGFydExpbmUsIHN0YXJ0TGluZSArIDFdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2x1bW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdG9rZW5faG8gPSBzdGF0ZS5wdXNoKCd0aF9vcGVuJywgJ3RoJywgMSlcbiAgICBpZiAoYWxpZ25zW2ldKSB7XG4gICAgICB0b2tlbl9oby5hdHRycyAgPSBbWydzdHlsZScsICd0ZXh0LWFsaWduOicgKyBhbGlnbnNbaV1dXVxuICAgIH1cblxuICAgIGNvbnN0IHRva2VuX2lsID0gc3RhdGUucHVzaCgnaW5saW5lJywgJycsIDApXG4gICAgdG9rZW5faWwuY29udGVudCAgPSBjb2x1bW5zW2ldLnRyaW0oKVxuICAgIHRva2VuX2lsLmNoaWxkcmVuID0gW11cblxuICAgIHN0YXRlLnB1c2goJ3RoX2Nsb3NlJywgJ3RoJywgLTEpXG4gIH1cblxuICBzdGF0ZS5wdXNoKCd0cl9jbG9zZScsICd0cicsIC0xKVxuICBzdGF0ZS5wdXNoKCd0aGVhZF9jbG9zZScsICd0aGVhZCcsIC0xKVxuXG4gIGxldCB0Ym9keUxpbmVzXG4gIGxldCBhdXRvY29tcGxldGVkQ2VsbHMgPSAwXG5cbiAgZm9yIChuZXh0TGluZSA9IHN0YXJ0TGluZSArIDI7IG5leHRMaW5lIDwgZW5kTGluZTsgbmV4dExpbmUrKykge1xuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIDwgc3RhdGUuYmxrSW5kZW50KSB7IGJyZWFrIH1cblxuICAgIGxldCB0ZXJtaW5hdGUgPSBmYWxzZVxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGVybWluYXRvclJ1bGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHRlcm1pbmF0b3JSdWxlc1tpXShzdGF0ZSwgbmV4dExpbmUsIGVuZExpbmUsIHRydWUpKSB7XG4gICAgICAgIHRlcm1pbmF0ZSA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGVybWluYXRlKSB7IGJyZWFrIH1cbiAgICBsaW5lVGV4dCA9IGdldExpbmUoc3RhdGUsIG5leHRMaW5lKS50cmltKClcbiAgICBpZiAoIWxpbmVUZXh0KSB7IGJyZWFrIH1cbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7IGJyZWFrIH1cbiAgICBjb2x1bW5zID0gZXNjYXBlZFNwbGl0KGxpbmVUZXh0KVxuICAgIGlmIChjb2x1bW5zLmxlbmd0aCAmJiBjb2x1bW5zWzBdID09PSAnJykgY29sdW1ucy5zaGlmdCgpXG4gICAgaWYgKGNvbHVtbnMubGVuZ3RoICYmIGNvbHVtbnNbY29sdW1ucy5sZW5ndGggLSAxXSA9PT0gJycpIGNvbHVtbnMucG9wKClcblxuICAgIC8vIG5vdGU6IGF1dG9jb21wbGV0ZSBjb3VudCBjYW4gYmUgbmVnYXRpdmUgaWYgdXNlciBzcGVjaWZpZXMgbW9yZSBjb2x1bW5zIHRoYW4gaGVhZGVyLFxuICAgIC8vIGJ1dCB0aGF0IGRvZXMgbm90IGFmZmVjdCBpbnRlbmRlZCB1c2UgKHdoaWNoIGlzIGxpbWl0aW5nIGV4cGFuc2lvbilcbiAgICBhdXRvY29tcGxldGVkQ2VsbHMgKz0gY29sdW1uQ291bnQgLSBjb2x1bW5zLmxlbmd0aFxuICAgIGlmIChhdXRvY29tcGxldGVkQ2VsbHMgPiBNQVhfQVVUT0NPTVBMRVRFRF9DRUxMUykgeyBicmVhayB9XG5cbiAgICBpZiAobmV4dExpbmUgPT09IHN0YXJ0TGluZSArIDIpIHtcbiAgICAgIGNvbnN0IHRva2VuX3RibyA9IHN0YXRlLnB1c2goJ3Rib2R5X29wZW4nLCAndGJvZHknLCAxKVxuICAgICAgdG9rZW5fdGJvLm1hcCA9IHRib2R5TGluZXMgPSBbc3RhcnRMaW5lICsgMiwgMF1cbiAgICB9XG5cbiAgICBjb25zdCB0b2tlbl90cm8gPSBzdGF0ZS5wdXNoKCd0cl9vcGVuJywgJ3RyJywgMSlcbiAgICB0b2tlbl90cm8ubWFwID0gW25leHRMaW5lLCBuZXh0TGluZSArIDFdXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbkNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHRva2VuX3RkbyA9IHN0YXRlLnB1c2goJ3RkX29wZW4nLCAndGQnLCAxKVxuICAgICAgaWYgKGFsaWduc1tpXSkge1xuICAgICAgICB0b2tlbl90ZG8uYXR0cnMgID0gW1snc3R5bGUnLCAndGV4dC1hbGlnbjonICsgYWxpZ25zW2ldXV1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdG9rZW5faWwgPSBzdGF0ZS5wdXNoKCdpbmxpbmUnLCAnJywgMClcbiAgICAgIHRva2VuX2lsLmNvbnRlbnQgID0gY29sdW1uc1tpXSA/IGNvbHVtbnNbaV0udHJpbSgpIDogJydcbiAgICAgIHRva2VuX2lsLmNoaWxkcmVuID0gW11cblxuICAgICAgc3RhdGUucHVzaCgndGRfY2xvc2UnLCAndGQnLCAtMSlcbiAgICB9XG4gICAgc3RhdGUucHVzaCgndHJfY2xvc2UnLCAndHInLCAtMSlcbiAgfVxuXG4gIGlmICh0Ym9keUxpbmVzKSB7XG4gICAgc3RhdGUucHVzaCgndGJvZHlfY2xvc2UnLCAndGJvZHknLCAtMSlcbiAgICB0Ym9keUxpbmVzWzFdID0gbmV4dExpbmVcbiAgfVxuXG4gIHN0YXRlLnB1c2goJ3RhYmxlX2Nsb3NlJywgJ3RhYmxlJywgLTEpXG4gIHRhYmxlTGluZXNbMV0gPSBuZXh0TGluZVxuXG4gIHN0YXRlLnBhcmVudFR5cGUgPSBvbGRQYXJlbnRUeXBlXG4gIHN0YXRlLmxpbmUgPSBuZXh0TGluZVxuICByZXR1cm4gdHJ1ZVxufVxuIiwiLy8gTGlzdHNcblxuaW1wb3J0IHsgaXNTcGFjZSB9IGZyb20gJy4uL2NvbW1vbi91dGlscy5tanMnXG5cbi8vIFNlYXJjaCBgWy0rKl1bXFxuIF1gLCByZXR1cm5zIG5leHQgcG9zIGFmdGVyIG1hcmtlciBvbiBzdWNjZXNzXG4vLyBvciAtMSBvbiBmYWlsLlxuZnVuY3Rpb24gc2tpcEJ1bGxldExpc3RNYXJrZXIgKHN0YXRlLCBzdGFydExpbmUpIHtcbiAgY29uc3QgbWF4ID0gc3RhdGUuZU1hcmtzW3N0YXJ0TGluZV1cbiAgbGV0IHBvcyA9IHN0YXRlLmJNYXJrc1tzdGFydExpbmVdICsgc3RhdGUudFNoaWZ0W3N0YXJ0TGluZV1cblxuICBjb25zdCBtYXJrZXIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MrKylcbiAgLy8gQ2hlY2sgYnVsbGV0XG4gIGlmIChtYXJrZXIgIT09IDB4MkEvKiAqICovICYmXG4gICAgICBtYXJrZXIgIT09IDB4MkQvKiAtICovICYmXG4gICAgICBtYXJrZXIgIT09IDB4MkIvKiArICovKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cblxuICBpZiAocG9zIDwgbWF4KSB7XG4gICAgY29uc3QgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpXG5cbiAgICBpZiAoIWlzU3BhY2UoY2gpKSB7XG4gICAgICAvLyBcIiAtdGVzdCBcIiAtIGlzIG5vdCBhIGxpc3QgaXRlbVxuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBvc1xufVxuXG4vLyBTZWFyY2ggYFxcZCtbLildW1xcbiBdYCwgcmV0dXJucyBuZXh0IHBvcyBhZnRlciBtYXJrZXIgb24gc3VjY2Vzc1xuLy8gb3IgLTEgb24gZmFpbC5cbmZ1bmN0aW9uIHNraXBPcmRlcmVkTGlzdE1hcmtlciAoc3RhdGUsIHN0YXJ0TGluZSkge1xuICBjb25zdCBzdGFydCA9IHN0YXRlLmJNYXJrc1tzdGFydExpbmVdICsgc3RhdGUudFNoaWZ0W3N0YXJ0TGluZV1cbiAgY29uc3QgbWF4ID0gc3RhdGUuZU1hcmtzW3N0YXJ0TGluZV1cbiAgbGV0IHBvcyA9IHN0YXJ0XG5cbiAgLy8gTGlzdCBtYXJrZXIgc2hvdWxkIGhhdmUgYXQgbGVhc3QgMiBjaGFycyAoZGlnaXQgKyBkb3QpXG4gIGlmIChwb3MgKyAxID49IG1heCkgeyByZXR1cm4gLTEgfVxuXG4gIGxldCBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcysrKVxuXG4gIGlmIChjaCA8IDB4MzAvKiAwICovIHx8IGNoID4gMHgzOS8qIDkgKi8pIHsgcmV0dXJuIC0xIH1cblxuICBmb3IgKDs7KSB7XG4gICAgLy8gRU9MIC0+IGZhaWxcbiAgICBpZiAocG9zID49IG1heCkgeyByZXR1cm4gLTEgfVxuXG4gICAgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MrKylcblxuICAgIGlmIChjaCA+PSAweDMwLyogMCAqLyAmJiBjaCA8PSAweDM5LyogOSAqLykge1xuICAgICAgLy8gTGlzdCBtYXJrZXIgc2hvdWxkIGhhdmUgbm8gbW9yZSB0aGFuIDkgZGlnaXRzXG4gICAgICAvLyAocHJldmVudHMgaW50ZWdlciBvdmVyZmxvdyBpbiBicm93c2VycylcbiAgICAgIGlmIChwb3MgLSBzdGFydCA+PSAxMCkgeyByZXR1cm4gLTEgfVxuXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIC8vIGZvdW5kIHZhbGlkIG1hcmtlclxuICAgIGlmIChjaCA9PT0gMHgyOS8qICkgKi8gfHwgY2ggPT09IDB4MmUvKiAuICovKSB7XG4gICAgICBicmVha1xuICAgIH1cblxuICAgIHJldHVybiAtMVxuICB9XG5cbiAgaWYgKHBvcyA8IG1heCkge1xuICAgIGNoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKVxuXG4gICAgaWYgKCFpc1NwYWNlKGNoKSkge1xuICAgICAgLy8gXCIgMS50ZXN0IFwiIC0gaXMgbm90IGEgbGlzdCBpdGVtXG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBvc1xufVxuXG5mdW5jdGlvbiBtYXJrVGlnaHRQYXJhZ3JhcGhzIChzdGF0ZSwgaWR4KSB7XG4gIGNvbnN0IGxldmVsID0gc3RhdGUubGV2ZWwgKyAyXG5cbiAgZm9yIChsZXQgaSA9IGlkeCArIDIsIGwgPSBzdGF0ZS50b2tlbnMubGVuZ3RoIC0gMjsgaSA8IGw7IGkrKykge1xuICAgIGlmIChzdGF0ZS50b2tlbnNbaV0ubGV2ZWwgPT09IGxldmVsICYmIHN0YXRlLnRva2Vuc1tpXS50eXBlID09PSAncGFyYWdyYXBoX29wZW4nKSB7XG4gICAgICBzdGF0ZS50b2tlbnNbaSArIDJdLmhpZGRlbiA9IHRydWVcbiAgICAgIHN0YXRlLnRva2Vuc1tpXS5oaWRkZW4gPSB0cnVlXG4gICAgICBpICs9IDJcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdCAoc3RhdGUsIHN0YXJ0TGluZSwgZW5kTGluZSwgc2lsZW50KSB7XG4gIGxldCBtYXgsIHBvcywgc3RhcnQsIHRva2VuXG4gIGxldCBuZXh0TGluZSA9IHN0YXJ0TGluZVxuICBsZXQgdGlnaHQgPSB0cnVlXG5cbiAgLy8gaWYgaXQncyBpbmRlbnRlZCBtb3JlIHRoYW4gMyBzcGFjZXMsIGl0IHNob3VsZCBiZSBhIGNvZGUgYmxvY2tcbiAgaWYgKHN0YXRlLnNDb3VudFtuZXh0TGluZV0gLSBzdGF0ZS5ibGtJbmRlbnQgPj0gNCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIC8vIFNwZWNpYWwgY2FzZTpcbiAgLy8gIC0gaXRlbSAxXG4gIC8vICAgLSBpdGVtIDJcbiAgLy8gICAgLSBpdGVtIDNcbiAgLy8gICAgIC0gaXRlbSA0XG4gIC8vICAgICAgLSB0aGlzIG9uZSBpcyBhIHBhcmFncmFwaCBjb250aW51YXRpb25cbiAgaWYgKHN0YXRlLmxpc3RJbmRlbnQgPj0gMCAmJlxuICAgICAgc3RhdGUuc0NvdW50W25leHRMaW5lXSAtIHN0YXRlLmxpc3RJbmRlbnQgPj0gNCAmJlxuICAgICAgc3RhdGUuc0NvdW50W25leHRMaW5lXSA8IHN0YXRlLmJsa0luZGVudCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgbGV0IGlzVGVybWluYXRpbmdQYXJhZ3JhcGggPSBmYWxzZVxuXG4gIC8vIGxpbWl0IGNvbmRpdGlvbnMgd2hlbiBsaXN0IGNhbiBpbnRlcnJ1cHRcbiAgLy8gYSBwYXJhZ3JhcGggKHZhbGlkYXRpb24gbW9kZSBvbmx5KVxuICBpZiAoc2lsZW50ICYmIHN0YXRlLnBhcmVudFR5cGUgPT09ICdwYXJhZ3JhcGgnKSB7XG4gICAgLy8gTmV4dCBsaXN0IGl0ZW0gc2hvdWxkIHN0aWxsIHRlcm1pbmF0ZSBwcmV2aW91cyBsaXN0IGl0ZW07XG4gICAgLy9cbiAgICAvLyBUaGlzIGNvZGUgY2FuIGZhaWwgaWYgcGx1Z2lucyB1c2UgYmxrSW5kZW50IGFzIHdlbGwgYXMgbGlzdHMsXG4gICAgLy8gYnV0IEkgaG9wZSB0aGUgc3BlYyBnZXRzIGZpeGVkIGxvbmcgYmVmb3JlIHRoYXQgaGFwcGVucy5cbiAgICAvL1xuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdID49IHN0YXRlLmJsa0luZGVudCkge1xuICAgICAgaXNUZXJtaW5hdGluZ1BhcmFncmFwaCA9IHRydWVcbiAgICB9XG4gIH1cblxuICAvLyBEZXRlY3QgbGlzdCB0eXBlIGFuZCBwb3NpdGlvbiBhZnRlciBtYXJrZXJcbiAgbGV0IGlzT3JkZXJlZFxuICBsZXQgbWFya2VyVmFsdWVcbiAgbGV0IHBvc0FmdGVyTWFya2VyXG4gIGlmICgocG9zQWZ0ZXJNYXJrZXIgPSBza2lwT3JkZXJlZExpc3RNYXJrZXIoc3RhdGUsIG5leHRMaW5lKSkgPj0gMCkge1xuICAgIGlzT3JkZXJlZCA9IHRydWVcbiAgICBzdGFydCA9IHN0YXRlLmJNYXJrc1tuZXh0TGluZV0gKyBzdGF0ZS50U2hpZnRbbmV4dExpbmVdXG4gICAgbWFya2VyVmFsdWUgPSBOdW1iZXIoc3RhdGUuc3JjLnNsaWNlKHN0YXJ0LCBwb3NBZnRlck1hcmtlciAtIDEpKVxuXG4gICAgLy8gSWYgd2UncmUgc3RhcnRpbmcgYSBuZXcgb3JkZXJlZCBsaXN0IHJpZ2h0IGFmdGVyXG4gICAgLy8gYSBwYXJhZ3JhcGgsIGl0IHNob3VsZCBzdGFydCB3aXRoIDEuXG4gICAgaWYgKGlzVGVybWluYXRpbmdQYXJhZ3JhcGggJiYgbWFya2VyVmFsdWUgIT09IDEpIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKChwb3NBZnRlck1hcmtlciA9IHNraXBCdWxsZXRMaXN0TWFya2VyKHN0YXRlLCBuZXh0TGluZSkpID49IDApIHtcbiAgICBpc09yZGVyZWQgPSBmYWxzZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gSWYgd2UncmUgc3RhcnRpbmcgYSBuZXcgdW5vcmRlcmVkIGxpc3QgcmlnaHQgYWZ0ZXJcbiAgLy8gYSBwYXJhZ3JhcGgsIGZpcnN0IGxpbmUgc2hvdWxkIG5vdCBiZSBlbXB0eS5cbiAgaWYgKGlzVGVybWluYXRpbmdQYXJhZ3JhcGgpIHtcbiAgICBpZiAoc3RhdGUuc2tpcFNwYWNlcyhwb3NBZnRlck1hcmtlcikgPj0gc3RhdGUuZU1hcmtzW25leHRMaW5lXSkgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBGb3IgdmFsaWRhdGlvbiBtb2RlIHdlIGNhbiB0ZXJtaW5hdGUgaW1tZWRpYXRlbHlcbiAgaWYgKHNpbGVudCkgeyByZXR1cm4gdHJ1ZSB9XG5cbiAgLy8gV2Ugc2hvdWxkIHRlcm1pbmF0ZSBsaXN0IG9uIHN0eWxlIGNoYW5nZS4gUmVtZW1iZXIgZmlyc3Qgb25lIHRvIGNvbXBhcmUuXG4gIGNvbnN0IG1hcmtlckNoYXJDb2RlID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zQWZ0ZXJNYXJrZXIgLSAxKVxuXG4gIC8vIFN0YXJ0IGxpc3RcbiAgY29uc3QgbGlzdFRva0lkeCA9IHN0YXRlLnRva2Vucy5sZW5ndGhcblxuICBpZiAoaXNPcmRlcmVkKSB7XG4gICAgdG9rZW4gICAgICAgPSBzdGF0ZS5wdXNoKCdvcmRlcmVkX2xpc3Rfb3BlbicsICdvbCcsIDEpXG4gICAgaWYgKG1hcmtlclZhbHVlICE9PSAxKSB7XG4gICAgICB0b2tlbi5hdHRycyA9IFtbJ3N0YXJ0JywgbWFya2VyVmFsdWVdXVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0b2tlbiAgICAgICA9IHN0YXRlLnB1c2goJ2J1bGxldF9saXN0X29wZW4nLCAndWwnLCAxKVxuICB9XG5cbiAgY29uc3QgbGlzdExpbmVzID0gW25leHRMaW5lLCAwXVxuICB0b2tlbi5tYXAgICAgPSBsaXN0TGluZXNcbiAgdG9rZW4ubWFya3VwID0gU3RyaW5nLmZyb21DaGFyQ29kZShtYXJrZXJDaGFyQ29kZSlcblxuICAvL1xuICAvLyBJdGVyYXRlIGxpc3QgaXRlbXNcbiAgLy9cblxuICBsZXQgcHJldkVtcHR5RW5kID0gZmFsc2VcbiAgY29uc3QgdGVybWluYXRvclJ1bGVzID0gc3RhdGUubWQuYmxvY2sucnVsZXIuZ2V0UnVsZXMoJ2xpc3QnKVxuXG4gIGNvbnN0IG9sZFBhcmVudFR5cGUgPSBzdGF0ZS5wYXJlbnRUeXBlXG4gIHN0YXRlLnBhcmVudFR5cGUgPSAnbGlzdCdcblxuICB3aGlsZSAobmV4dExpbmUgPCBlbmRMaW5lKSB7XG4gICAgcG9zID0gcG9zQWZ0ZXJNYXJrZXJcbiAgICBtYXggPSBzdGF0ZS5lTWFya3NbbmV4dExpbmVdXG5cbiAgICBjb25zdCBpbml0aWFsID0gc3RhdGUuc0NvdW50W25leHRMaW5lXSArIHBvc0FmdGVyTWFya2VyIC0gKHN0YXRlLmJNYXJrc1tuZXh0TGluZV0gKyBzdGF0ZS50U2hpZnRbbmV4dExpbmVdKVxuICAgIGxldCBvZmZzZXQgPSBpbml0aWFsXG5cbiAgICB3aGlsZSAocG9zIDwgbWF4KSB7XG4gICAgICBjb25zdCBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcylcblxuICAgICAgaWYgKGNoID09PSAweDA5KSB7XG4gICAgICAgIG9mZnNldCArPSA0IC0gKG9mZnNldCArIHN0YXRlLmJzQ291bnRbbmV4dExpbmVdKSAlIDRcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4MjApIHtcbiAgICAgICAgb2Zmc2V0KytcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIHBvcysrXG4gICAgfVxuXG4gICAgY29uc3QgY29udGVudFN0YXJ0ID0gcG9zXG4gICAgbGV0IGluZGVudEFmdGVyTWFya2VyXG5cbiAgICBpZiAoY29udGVudFN0YXJ0ID49IG1heCkge1xuICAgICAgLy8gdHJpbW1pbmcgc3BhY2UgaW4gXCItICAgIFxcbiAgM1wiIGNhc2UsIGluZGVudCBpcyAxIGhlcmVcbiAgICAgIGluZGVudEFmdGVyTWFya2VyID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRlbnRBZnRlck1hcmtlciA9IG9mZnNldCAtIGluaXRpYWxcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBoYXZlIG1vcmUgdGhhbiA0IHNwYWNlcywgdGhlIGluZGVudCBpcyAxXG4gICAgLy8gKHRoZSByZXN0IGlzIGp1c3QgaW5kZW50ZWQgY29kZSBibG9jaylcbiAgICBpZiAoaW5kZW50QWZ0ZXJNYXJrZXIgPiA0KSB7IGluZGVudEFmdGVyTWFya2VyID0gMSB9XG5cbiAgICAvLyBcIiAgLSAgdGVzdFwiXG4gICAgLy8gIF5eXl5eIC0gY2FsY3VsYXRpbmcgdG90YWwgbGVuZ3RoIG9mIHRoaXMgdGhpbmdcbiAgICBjb25zdCBpbmRlbnQgPSBpbml0aWFsICsgaW5kZW50QWZ0ZXJNYXJrZXJcblxuICAgIC8vIFJ1biBzdWJwYXJzZXIgJiB3cml0ZSB0b2tlbnNcbiAgICB0b2tlbiAgICAgICAgPSBzdGF0ZS5wdXNoKCdsaXN0X2l0ZW1fb3BlbicsICdsaScsIDEpXG4gICAgdG9rZW4ubWFya3VwID0gU3RyaW5nLmZyb21DaGFyQ29kZShtYXJrZXJDaGFyQ29kZSlcbiAgICBjb25zdCBpdGVtTGluZXMgPSBbbmV4dExpbmUsIDBdXG4gICAgdG9rZW4ubWFwICAgID0gaXRlbUxpbmVzXG4gICAgaWYgKGlzT3JkZXJlZCkge1xuICAgICAgdG9rZW4uaW5mbyA9IHN0YXRlLnNyYy5zbGljZShzdGFydCwgcG9zQWZ0ZXJNYXJrZXIgLSAxKVxuICAgIH1cblxuICAgIC8vIGNoYW5nZSBjdXJyZW50IHN0YXRlLCB0aGVuIHJlc3RvcmUgaXQgYWZ0ZXIgcGFyc2VyIHN1YmNhbGxcbiAgICBjb25zdCBvbGRUaWdodCA9IHN0YXRlLnRpZ2h0XG4gICAgY29uc3Qgb2xkVFNoaWZ0ID0gc3RhdGUudFNoaWZ0W25leHRMaW5lXVxuICAgIGNvbnN0IG9sZFNDb3VudCA9IHN0YXRlLnNDb3VudFtuZXh0TGluZV1cblxuICAgIC8vICAtIGV4YW1wbGUgbGlzdFxuICAgIC8vIF4gbGlzdEluZGVudCBwb3NpdGlvbiB3aWxsIGJlIGhlcmVcbiAgICAvLyAgIF4gYmxrSW5kZW50IHBvc2l0aW9uIHdpbGwgYmUgaGVyZVxuICAgIC8vXG4gICAgY29uc3Qgb2xkTGlzdEluZGVudCA9IHN0YXRlLmxpc3RJbmRlbnRcbiAgICBzdGF0ZS5saXN0SW5kZW50ID0gc3RhdGUuYmxrSW5kZW50XG4gICAgc3RhdGUuYmxrSW5kZW50ID0gaW5kZW50XG5cbiAgICBzdGF0ZS50aWdodCA9IHRydWVcbiAgICBzdGF0ZS50U2hpZnRbbmV4dExpbmVdID0gY29udGVudFN0YXJ0IC0gc3RhdGUuYk1hcmtzW25leHRMaW5lXVxuICAgIHN0YXRlLnNDb3VudFtuZXh0TGluZV0gPSBvZmZzZXRcblxuICAgIGlmIChjb250ZW50U3RhcnQgPj0gbWF4ICYmIHN0YXRlLmlzRW1wdHkobmV4dExpbmUgKyAxKSkge1xuICAgICAgLy8gd29ya2Fyb3VuZCBmb3IgdGhpcyBjYXNlXG4gICAgICAvLyAobGlzdCBpdGVtIGlzIGVtcHR5LCBsaXN0IHRlcm1pbmF0ZXMgYmVmb3JlIFwiZm9vXCIpOlxuICAgICAgLy8gfn5+fn5+fn5cbiAgICAgIC8vICAgLVxuICAgICAgLy9cbiAgICAgIC8vICAgICBmb29cbiAgICAgIC8vIH5+fn5+fn5+XG4gICAgICBzdGF0ZS5saW5lID0gTWF0aC5taW4oc3RhdGUubGluZSArIDIsIGVuZExpbmUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLm1kLmJsb2NrLnRva2VuaXplKHN0YXRlLCBuZXh0TGluZSwgZW5kTGluZSwgdHJ1ZSlcbiAgICB9XG5cbiAgICAvLyBJZiBhbnkgb2YgbGlzdCBpdGVtIGlzIHRpZ2h0LCBtYXJrIGxpc3QgYXMgdGlnaHRcbiAgICBpZiAoIXN0YXRlLnRpZ2h0IHx8IHByZXZFbXB0eUVuZCkge1xuICAgICAgdGlnaHQgPSBmYWxzZVxuICAgIH1cbiAgICAvLyBJdGVtIGJlY29tZSBsb29zZSBpZiBmaW5pc2ggd2l0aCBlbXB0eSBsaW5lLFxuICAgIC8vIGJ1dCB3ZSBzaG91bGQgZmlsdGVyIGxhc3QgZWxlbWVudCwgYmVjYXVzZSBpdCBtZWFucyBsaXN0IGZpbmlzaFxuICAgIHByZXZFbXB0eUVuZCA9IChzdGF0ZS5saW5lIC0gbmV4dExpbmUpID4gMSAmJiBzdGF0ZS5pc0VtcHR5KHN0YXRlLmxpbmUgLSAxKVxuXG4gICAgc3RhdGUuYmxrSW5kZW50ID0gc3RhdGUubGlzdEluZGVudFxuICAgIHN0YXRlLmxpc3RJbmRlbnQgPSBvbGRMaXN0SW5kZW50XG4gICAgc3RhdGUudFNoaWZ0W25leHRMaW5lXSA9IG9sZFRTaGlmdFxuICAgIHN0YXRlLnNDb3VudFtuZXh0TGluZV0gPSBvbGRTQ291bnRcbiAgICBzdGF0ZS50aWdodCA9IG9sZFRpZ2h0XG5cbiAgICB0b2tlbiAgICAgICAgPSBzdGF0ZS5wdXNoKCdsaXN0X2l0ZW1fY2xvc2UnLCAnbGknLCAtMSlcbiAgICB0b2tlbi5tYXJrdXAgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG1hcmtlckNoYXJDb2RlKVxuXG4gICAgbmV4dExpbmUgPSBzdGF0ZS5saW5lXG4gICAgaXRlbUxpbmVzWzFdID0gbmV4dExpbmVcblxuICAgIGlmIChuZXh0TGluZSA+PSBlbmRMaW5lKSB7IGJyZWFrIH1cblxuICAgIC8vXG4gICAgLy8gVHJ5IHRvIGNoZWNrIGlmIGxpc3QgaXMgdGVybWluYXRlZCBvciBjb250aW51ZWQuXG4gICAgLy9cbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSA8IHN0YXRlLmJsa0luZGVudCkgeyBicmVhayB9XG5cbiAgICAvLyBpZiBpdCdzIGluZGVudGVkIG1vcmUgdGhhbiAzIHNwYWNlcywgaXQgc2hvdWxkIGJlIGEgY29kZSBibG9ja1xuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgYnJlYWsgfVxuXG4gICAgLy8gZmFpbCBpZiB0ZXJtaW5hdGluZyBibG9jayBmb3VuZFxuICAgIGxldCB0ZXJtaW5hdGUgPSBmYWxzZVxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGVybWluYXRvclJ1bGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKHRlcm1pbmF0b3JSdWxlc1tpXShzdGF0ZSwgbmV4dExpbmUsIGVuZExpbmUsIHRydWUpKSB7XG4gICAgICAgIHRlcm1pbmF0ZSA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRlcm1pbmF0ZSkgeyBicmVhayB9XG5cbiAgICAvLyBmYWlsIGlmIGxpc3QgaGFzIGFub3RoZXIgdHlwZVxuICAgIGlmIChpc09yZGVyZWQpIHtcbiAgICAgIHBvc0FmdGVyTWFya2VyID0gc2tpcE9yZGVyZWRMaXN0TWFya2VyKHN0YXRlLCBuZXh0TGluZSlcbiAgICAgIGlmIChwb3NBZnRlck1hcmtlciA8IDApIHsgYnJlYWsgfVxuICAgICAgc3RhcnQgPSBzdGF0ZS5iTWFya3NbbmV4dExpbmVdICsgc3RhdGUudFNoaWZ0W25leHRMaW5lXVxuICAgIH0gZWxzZSB7XG4gICAgICBwb3NBZnRlck1hcmtlciA9IHNraXBCdWxsZXRMaXN0TWFya2VyKHN0YXRlLCBuZXh0TGluZSlcbiAgICAgIGlmIChwb3NBZnRlck1hcmtlciA8IDApIHsgYnJlYWsgfVxuICAgIH1cblxuICAgIGlmIChtYXJrZXJDaGFyQ29kZSAhPT0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zQWZ0ZXJNYXJrZXIgLSAxKSkgeyBicmVhayB9XG4gIH1cblxuICAvLyBGaW5hbGl6ZSBsaXN0XG4gIGlmIChpc09yZGVyZWQpIHtcbiAgICB0b2tlbiA9IHN0YXRlLnB1c2goJ29yZGVyZWRfbGlzdF9jbG9zZScsICdvbCcsIC0xKVxuICB9IGVsc2Uge1xuICAgIHRva2VuID0gc3RhdGUucHVzaCgnYnVsbGV0X2xpc3RfY2xvc2UnLCAndWwnLCAtMSlcbiAgfVxuICB0b2tlbi5tYXJrdXAgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG1hcmtlckNoYXJDb2RlKVxuXG4gIGxpc3RMaW5lc1sxXSA9IG5leHRMaW5lXG4gIHN0YXRlLmxpbmUgPSBuZXh0TGluZVxuXG4gIHN0YXRlLnBhcmVudFR5cGUgPSBvbGRQYXJlbnRUeXBlXG5cbiAgLy8gbWFyayBwYXJhZ3JhcGhzIHRpZ2h0IGlmIG5lZWRlZFxuICBpZiAodGlnaHQpIHtcbiAgICBtYXJrVGlnaHRQYXJhZ3JhcGhzKHN0YXRlLCBsaXN0VG9rSWR4KVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cbiIsIi8vIExpc3Qgb2YgdmFsaWQgaHRtbCBibG9ja3MgbmFtZXMsIGFjY29yZGluZyB0byBjb21tb25tYXJrIHNwZWNcbi8vIGh0dHBzOi8vc3BlYy5jb21tb25tYXJrLm9yZy8wLjMwLyNodG1sLWJsb2Nrc1xuXG5leHBvcnQgZGVmYXVsdCBbXG4gICdhZGRyZXNzJyxcbiAgJ2FydGljbGUnLFxuICAnYXNpZGUnLFxuICAnYmFzZScsXG4gICdiYXNlZm9udCcsXG4gICdibG9ja3F1b3RlJyxcbiAgJ2JvZHknLFxuICAnY2FwdGlvbicsXG4gICdjZW50ZXInLFxuICAnY29sJyxcbiAgJ2NvbGdyb3VwJyxcbiAgJ2RkJyxcbiAgJ2RldGFpbHMnLFxuICAnZGlhbG9nJyxcbiAgJ2RpcicsXG4gICdkaXYnLFxuICAnZGwnLFxuICAnZHQnLFxuICAnZmllbGRzZXQnLFxuICAnZmlnY2FwdGlvbicsXG4gICdmaWd1cmUnLFxuICAnZm9vdGVyJyxcbiAgJ2Zvcm0nLFxuICAnZnJhbWUnLFxuICAnZnJhbWVzZXQnLFxuICAnaDEnLFxuICAnaDInLFxuICAnaDMnLFxuICAnaDQnLFxuICAnaDUnLFxuICAnaDYnLFxuICAnaGVhZCcsXG4gICdoZWFkZXInLFxuICAnaHInLFxuICAnaHRtbCcsXG4gICdpZnJhbWUnLFxuICAnbGVnZW5kJyxcbiAgJ2xpJyxcbiAgJ2xpbmsnLFxuICAnbWFpbicsXG4gICdtZW51JyxcbiAgJ21lbnVpdGVtJyxcbiAgJ25hdicsXG4gICdub2ZyYW1lcycsXG4gICdvbCcsXG4gICdvcHRncm91cCcsXG4gICdvcHRpb24nLFxuICAncCcsXG4gICdwYXJhbScsXG4gICdzZWFyY2gnLFxuICAnc2VjdGlvbicsXG4gICdzdW1tYXJ5JyxcbiAgJ3RhYmxlJyxcbiAgJ3Rib2R5JyxcbiAgJ3RkJyxcbiAgJ3Rmb290JyxcbiAgJ3RoJyxcbiAgJ3RoZWFkJyxcbiAgJ3RpdGxlJyxcbiAgJ3RyJyxcbiAgJ3RyYWNrJyxcbiAgJ3VsJ1xuXVxuIiwiLy8gUmVnZXhwcyB0byBtYXRjaCBodG1sIGVsZW1lbnRzXG5cbmNvbnN0IGF0dHJfbmFtZSAgICAgPSAnW2EtekEtWl86XVthLXpBLVowLTk6Ll8tXSonXG5cbmNvbnN0IHVucXVvdGVkICAgICAgPSAnW15cIlxcJz08PmBcXFxceDAwLVxcXFx4MjBdKydcbmNvbnN0IHNpbmdsZV9xdW90ZWQgPSBcIidbXiddKidcIlxuY29uc3QgZG91YmxlX3F1b3RlZCA9ICdcIlteXCJdKlwiJ1xuXG5jb25zdCBhdHRyX3ZhbHVlICA9ICcoPzonICsgdW5xdW90ZWQgKyAnfCcgKyBzaW5nbGVfcXVvdGVkICsgJ3wnICsgZG91YmxlX3F1b3RlZCArICcpJ1xuXG5jb25zdCBhdHRyaWJ1dGUgICA9ICcoPzpcXFxccysnICsgYXR0cl9uYW1lICsgJyg/OlxcXFxzKj1cXFxccyonICsgYXR0cl92YWx1ZSArICcpPyknXG5cbmNvbnN0IG9wZW5fdGFnICAgID0gJzxbQS1aYS16XVtBLVphLXowLTlcXFxcLV0qJyArIGF0dHJpYnV0ZSArICcqXFxcXHMqXFxcXC8/PidcblxuY29uc3QgY2xvc2VfdGFnICAgPSAnPFxcXFwvW0EtWmEtel1bQS1aYS16MC05XFxcXC1dKlxcXFxzKj4nXG5jb25zdCBjb21tZW50ICAgICA9ICc8IS0tLT8+fDwhLS0oPzpbXi1dfC1bXi1dfC0tW14+XSkqLS0+J1xuY29uc3QgcHJvY2Vzc2luZyAgPSAnPFs/XVtcXFxcc1xcXFxTXSo/Wz9dPidcbmNvbnN0IGRlY2xhcmF0aW9uID0gJzwhW0EtWmEtel1bXj5dKj4nXG5jb25zdCBjZGF0YSAgICAgICA9ICc8IVxcXFxbQ0RBVEFcXFxcW1tcXFxcc1xcXFxTXSo/XFxcXF1cXFxcXT4nXG5cbmNvbnN0IEhUTUxfVEFHX1JFID0gbmV3IFJlZ0V4cCgnXig/OicgKyBvcGVuX3RhZyArICd8JyArIGNsb3NlX3RhZyArICd8JyArIGNvbW1lbnQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3wnICsgcHJvY2Vzc2luZyArICd8JyArIGRlY2xhcmF0aW9uICsgJ3wnICsgY2RhdGEgKyAnKScpXG5jb25zdCBIVE1MX09QRU5fQ0xPU0VfVEFHX1JFID0gbmV3IFJlZ0V4cCgnXig/OicgKyBvcGVuX3RhZyArICd8JyArIGNsb3NlX3RhZyArICcpJylcblxuZXhwb3J0IHsgSFRNTF9UQUdfUkUsIEhUTUxfT1BFTl9DTE9TRV9UQUdfUkUgfVxuIiwiLy8gSFRNTCBibG9ja1xuXG5pbXBvcnQgYmxvY2tfbmFtZXMgZnJvbSAnLi4vY29tbW9uL2h0bWxfYmxvY2tzLm1qcydcbmltcG9ydCB7IEhUTUxfT1BFTl9DTE9TRV9UQUdfUkUgfSBmcm9tICcuLi9jb21tb24vaHRtbF9yZS5tanMnXG5cbi8vIEFuIGFycmF5IG9mIG9wZW5pbmcgYW5kIGNvcnJlc3BvbmRpbmcgY2xvc2luZyBzZXF1ZW5jZXMgZm9yIGh0bWwgdGFncyxcbi8vIGxhc3QgYXJndW1lbnQgZGVmaW5lcyB3aGV0aGVyIGl0IGNhbiB0ZXJtaW5hdGUgYSBwYXJhZ3JhcGggb3Igbm90XG4vL1xuY29uc3QgSFRNTF9TRVFVRU5DRVMgPSBbXG4gIFsvXjwoc2NyaXB0fHByZXxzdHlsZXx0ZXh0YXJlYSkoPz0oXFxzfD58JCkpL2ksIC88XFwvKHNjcmlwdHxwcmV8c3R5bGV8dGV4dGFyZWEpPi9pLCB0cnVlXSxcbiAgWy9ePCEtLS8sICAgICAgICAvLS0+LywgICB0cnVlXSxcbiAgWy9ePFxcPy8sICAgICAgICAgL1xcPz4vLCAgIHRydWVdLFxuICBbL148IVtBLVpdLywgICAgIC8+LywgICAgIHRydWVdLFxuICBbL148IVxcW0NEQVRBXFxbLywgL1xcXVxcXT4vLCB0cnVlXSxcbiAgW25ldyBSZWdFeHAoJ148Lz8oJyArIGJsb2NrX25hbWVzLmpvaW4oJ3wnKSArICcpKD89KFxcXFxzfC8/PnwkKSknLCAnaScpLCAvXiQvLCB0cnVlXSxcbiAgW25ldyBSZWdFeHAoSFRNTF9PUEVOX0NMT1NFX1RBR19SRS5zb3VyY2UgKyAnXFxcXHMqJCcpLCAgL14kLywgZmFsc2VdXG5dXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGh0bWxfYmxvY2sgKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUsIHNpbGVudCkge1xuICBsZXQgcG9zID0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV0gKyBzdGF0ZS50U2hpZnRbc3RhcnRMaW5lXVxuICBsZXQgbWF4ID0gc3RhdGUuZU1hcmtzW3N0YXJ0TGluZV1cblxuICAvLyBpZiBpdCdzIGluZGVudGVkIG1vcmUgdGhhbiAzIHNwYWNlcywgaXQgc2hvdWxkIGJlIGEgY29kZSBibG9ja1xuICBpZiAoc3RhdGUuc0NvdW50W3N0YXJ0TGluZV0gLSBzdGF0ZS5ibGtJbmRlbnQgPj0gNCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGlmICghc3RhdGUubWQub3B0aW9ucy5odG1sKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgIT09IDB4M0MvKiA8ICovKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgbGV0IGxpbmVUZXh0ID0gc3RhdGUuc3JjLnNsaWNlKHBvcywgbWF4KVxuXG4gIGxldCBpID0gMFxuICBmb3IgKDsgaSA8IEhUTUxfU0VRVUVOQ0VTLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEhUTUxfU0VRVUVOQ0VTW2ldWzBdLnRlc3QobGluZVRleHQpKSB7IGJyZWFrIH1cbiAgfVxuICBpZiAoaSA9PT0gSFRNTF9TRVFVRU5DRVMubGVuZ3RoKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIC8vIHRydWUgaWYgdGhpcyBzZXF1ZW5jZSBjYW4gYmUgYSB0ZXJtaW5hdG9yLCBmYWxzZSBvdGhlcndpc2VcbiAgICByZXR1cm4gSFRNTF9TRVFVRU5DRVNbaV1bMl1cbiAgfVxuXG4gIGxldCBuZXh0TGluZSA9IHN0YXJ0TGluZSArIDFcblxuICAvLyBJZiB3ZSBhcmUgaGVyZSAtIHdlIGRldGVjdGVkIEhUTUwgYmxvY2suXG4gIC8vIExldCdzIHJvbGwgZG93biB0aWxsIGJsb2NrIGVuZC5cbiAgaWYgKCFIVE1MX1NFUVVFTkNFU1tpXVsxXS50ZXN0KGxpbmVUZXh0KSkge1xuICAgIGZvciAoOyBuZXh0TGluZSA8IGVuZExpbmU7IG5leHRMaW5lKyspIHtcbiAgICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIDwgc3RhdGUuYmxrSW5kZW50KSB7IGJyZWFrIH1cblxuICAgICAgcG9zID0gc3RhdGUuYk1hcmtzW25leHRMaW5lXSArIHN0YXRlLnRTaGlmdFtuZXh0TGluZV1cbiAgICAgIG1heCA9IHN0YXRlLmVNYXJrc1tuZXh0TGluZV1cbiAgICAgIGxpbmVUZXh0ID0gc3RhdGUuc3JjLnNsaWNlKHBvcywgbWF4KVxuXG4gICAgICBpZiAoSFRNTF9TRVFVRU5DRVNbaV1bMV0udGVzdChsaW5lVGV4dCkpIHtcbiAgICAgICAgaWYgKGxpbmVUZXh0Lmxlbmd0aCAhPT0gMCkgeyBuZXh0TGluZSsrIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0ZS5saW5lID0gbmV4dExpbmVcblxuICBjb25zdCB0b2tlbiAgID0gc3RhdGUucHVzaCgnaHRtbF9ibG9jaycsICcnLCAwKVxuICB0b2tlbi5tYXAgICAgID0gW3N0YXJ0TGluZSwgbmV4dExpbmVdXG4gIHRva2VuLmNvbnRlbnQgPSBzdGF0ZS5nZXRMaW5lcyhzdGFydExpbmUsIG5leHRMaW5lLCBzdGF0ZS5ibGtJbmRlbnQsIHRydWUpXG5cbiAgcmV0dXJuIHRydWVcbn1cbiIsIi8qKiBpbnRlcm5hbFxuICogY2xhc3MgUGFyc2VyQmxvY2tcbiAqXG4gKiBCbG9jay1sZXZlbCB0b2tlbml6ZXIuXG4gKiovXG5cbmltcG9ydCBSdWxlciBmcm9tICcuL3J1bGVyLm1qcydcbmltcG9ydCBTdGF0ZUJsb2NrIGZyb20gJy4vcnVsZXNfYmxvY2svc3RhdGVfYmxvY2subWpzJ1xuXG5pbXBvcnQgcl90YWJsZSBmcm9tICcuL3J1bGVzX2Jsb2NrL3RhYmxlLm1qcydcbmltcG9ydCByX2NvZGUgZnJvbSAnLi9ydWxlc19ibG9jay9jb2RlLm1qcydcbmltcG9ydCByX2ZlbmNlIGZyb20gJy4vcnVsZXNfYmxvY2svZmVuY2UubWpzJ1xuaW1wb3J0IHJfYmxvY2txdW90ZSBmcm9tICcuL3J1bGVzX2Jsb2NrL2Jsb2NrcXVvdGUubWpzJ1xuaW1wb3J0IHJfaHIgZnJvbSAnLi9ydWxlc19ibG9jay9oci5tanMnXG5pbXBvcnQgcl9saXN0IGZyb20gJy4vcnVsZXNfYmxvY2svbGlzdC5tanMnXG5pbXBvcnQgcl9yZWZlcmVuY2UgZnJvbSAnLi9ydWxlc19ibG9jay9yZWZlcmVuY2UubWpzJ1xuaW1wb3J0IHJfaHRtbF9ibG9jayBmcm9tICcuL3J1bGVzX2Jsb2NrL2h0bWxfYmxvY2subWpzJ1xuaW1wb3J0IHJfaGVhZGluZyBmcm9tICcuL3J1bGVzX2Jsb2NrL2hlYWRpbmcubWpzJ1xuaW1wb3J0IHJfbGhlYWRpbmcgZnJvbSAnLi9ydWxlc19ibG9jay9saGVhZGluZy5tanMnXG5pbXBvcnQgcl9wYXJhZ3JhcGggZnJvbSAnLi9ydWxlc19ibG9jay9wYXJhZ3JhcGgubWpzJ1xuXG5jb25zdCBfcnVsZXMgPSBbXG4gIC8vIEZpcnN0IDIgcGFyYW1zIC0gcnVsZSBuYW1lICYgc291cmNlLiBTZWNvbmRhcnkgYXJyYXkgLSBsaXN0IG9mIHJ1bGVzLFxuICAvLyB3aGljaCBjYW4gYmUgdGVybWluYXRlZCBieSB0aGlzIG9uZS5cbiAgWyd0YWJsZScsICAgICAgcl90YWJsZSwgICAgICBbJ3BhcmFncmFwaCcsICdyZWZlcmVuY2UnXV0sXG4gIFsnY29kZScsICAgICAgIHJfY29kZV0sXG4gIFsnZmVuY2UnLCAgICAgIHJfZmVuY2UsICAgICAgWydwYXJhZ3JhcGgnLCAncmVmZXJlbmNlJywgJ2Jsb2NrcXVvdGUnLCAnbGlzdCddXSxcbiAgWydibG9ja3F1b3RlJywgcl9ibG9ja3F1b3RlLCBbJ3BhcmFncmFwaCcsICdyZWZlcmVuY2UnLCAnYmxvY2txdW90ZScsICdsaXN0J11dLFxuICBbJ2hyJywgICAgICAgICByX2hyLCAgICAgICAgIFsncGFyYWdyYXBoJywgJ3JlZmVyZW5jZScsICdibG9ja3F1b3RlJywgJ2xpc3QnXV0sXG4gIFsnbGlzdCcsICAgICAgIHJfbGlzdCwgICAgICAgWydwYXJhZ3JhcGgnLCAncmVmZXJlbmNlJywgJ2Jsb2NrcXVvdGUnXV0sXG4gIFsncmVmZXJlbmNlJywgIHJfcmVmZXJlbmNlXSxcbiAgWydodG1sX2Jsb2NrJywgcl9odG1sX2Jsb2NrLCBbJ3BhcmFncmFwaCcsICdyZWZlcmVuY2UnLCAnYmxvY2txdW90ZSddXSxcbiAgWydoZWFkaW5nJywgICAgcl9oZWFkaW5nLCAgICBbJ3BhcmFncmFwaCcsICdyZWZlcmVuY2UnLCAnYmxvY2txdW90ZSddXSxcbiAgWydsaGVhZGluZycsICAgcl9saGVhZGluZ10sXG4gIFsncGFyYWdyYXBoJywgIHJfcGFyYWdyYXBoXVxuXVxuXG4vKipcbiAqIG5ldyBQYXJzZXJCbG9jaygpXG4gKiovXG5mdW5jdGlvbiBQYXJzZXJCbG9jayAoKSB7XG4gIC8qKlxuICAgKiBQYXJzZXJCbG9jayNydWxlciAtPiBSdWxlclxuICAgKlxuICAgKiBbW1J1bGVyXV0gaW5zdGFuY2UuIEtlZXAgY29uZmlndXJhdGlvbiBvZiBibG9jayBydWxlcy5cbiAgICoqL1xuICB0aGlzLnJ1bGVyID0gbmV3IFJ1bGVyKClcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IF9ydWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucnVsZXIucHVzaChfcnVsZXNbaV1bMF0sIF9ydWxlc1tpXVsxXSwgeyBhbHQ6IChfcnVsZXNbaV1bMl0gfHwgW10pLnNsaWNlKCkgfSlcbiAgfVxufVxuXG4vLyBHZW5lcmF0ZSB0b2tlbnMgZm9yIGlucHV0IHJhbmdlXG4vL1xuUGFyc2VyQmxvY2sucHJvdG90eXBlLnRva2VuaXplID0gZnVuY3Rpb24gKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUpIHtcbiAgY29uc3QgcnVsZXMgPSB0aGlzLnJ1bGVyLmdldFJ1bGVzKCcnKVxuICBjb25zdCBsZW4gPSBydWxlcy5sZW5ndGhcbiAgY29uc3QgbWF4TmVzdGluZyA9IHN0YXRlLm1kLm9wdGlvbnMubWF4TmVzdGluZ1xuICBsZXQgbGluZSA9IHN0YXJ0TGluZVxuICBsZXQgaGFzRW1wdHlMaW5lcyA9IGZhbHNlXG5cbiAgd2hpbGUgKGxpbmUgPCBlbmRMaW5lKSB7XG4gICAgc3RhdGUubGluZSA9IGxpbmUgPSBzdGF0ZS5za2lwRW1wdHlMaW5lcyhsaW5lKVxuICAgIGlmIChsaW5lID49IGVuZExpbmUpIHsgYnJlYWsgfVxuXG4gICAgLy8gVGVybWluYXRpb24gY29uZGl0aW9uIGZvciBuZXN0ZWQgY2FsbHMuXG4gICAgLy8gTmVzdGVkIGNhbGxzIGN1cnJlbnRseSB1c2VkIGZvciBibG9ja3F1b3RlcyAmIGxpc3RzXG4gICAgaWYgKHN0YXRlLnNDb3VudFtsaW5lXSA8IHN0YXRlLmJsa0luZGVudCkgeyBicmVhayB9XG5cbiAgICAvLyBJZiBuZXN0aW5nIGxldmVsIGV4Y2VlZGVkIC0gc2tpcCB0YWlsIHRvIHRoZSBlbmQuIFRoYXQncyBub3Qgb3JkaW5hcnlcbiAgICAvLyBzaXR1YXRpb24gYW5kIHdlIHNob3VsZCBub3QgY2FyZSBhYm91dCBjb250ZW50LlxuICAgIGlmIChzdGF0ZS5sZXZlbCA+PSBtYXhOZXN0aW5nKSB7XG4gICAgICBzdGF0ZS5saW5lID0gZW5kTGluZVxuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICAvLyBUcnkgYWxsIHBvc3NpYmxlIHJ1bGVzLlxuICAgIC8vIE9uIHN1Y2Nlc3MsIHJ1bGUgc2hvdWxkOlxuICAgIC8vXG4gICAgLy8gLSB1cGRhdGUgYHN0YXRlLmxpbmVgXG4gICAgLy8gLSB1cGRhdGUgYHN0YXRlLnRva2Vuc2BcbiAgICAvLyAtIHJldHVybiB0cnVlXG4gICAgY29uc3QgcHJldkxpbmUgPSBzdGF0ZS5saW5lXG4gICAgbGV0IG9rID0gZmFsc2VcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG9rID0gcnVsZXNbaV0oc3RhdGUsIGxpbmUsIGVuZExpbmUsIGZhbHNlKVxuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIGlmIChwcmV2TGluZSA+PSBzdGF0ZS5saW5lKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmxvY2sgcnVsZSBkaWRuJ3QgaW5jcmVtZW50IHN0YXRlLmxpbmVcIilcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHRoaXMgY2FuIG9ubHkgaGFwcGVuIGlmIHVzZXIgZGlzYWJsZXMgcGFyYWdyYXBoIHJ1bGVcbiAgICBpZiAoIW9rKSB0aHJvdyBuZXcgRXJyb3IoJ25vbmUgb2YgdGhlIGJsb2NrIHJ1bGVzIG1hdGNoZWQnKVxuXG4gICAgLy8gc2V0IHN0YXRlLnRpZ2h0IGlmIHdlIGhhZCBhbiBlbXB0eSBsaW5lIGJlZm9yZSBjdXJyZW50IHRhZ1xuICAgIC8vIGkuZS4gbGF0ZXN0IGVtcHR5IGxpbmUgc2hvdWxkIG5vdCBjb3VudFxuICAgIHN0YXRlLnRpZ2h0ID0gIWhhc0VtcHR5TGluZXNcblxuICAgIC8vIHBhcmFncmFwaCBtaWdodCBcImVhdFwiIG9uZSBuZXdsaW5lIGFmdGVyIGl0IGluIG5lc3RlZCBsaXN0c1xuICAgIGlmIChzdGF0ZS5pc0VtcHR5KHN0YXRlLmxpbmUgLSAxKSkge1xuICAgICAgaGFzRW1wdHlMaW5lcyA9IHRydWVcbiAgICB9XG5cbiAgICBsaW5lID0gc3RhdGUubGluZVxuXG4gICAgaWYgKGxpbmUgPCBlbmRMaW5lICYmIHN0YXRlLmlzRW1wdHkobGluZSkpIHtcbiAgICAgIGhhc0VtcHR5TGluZXMgPSB0cnVlXG4gICAgICBsaW5lKytcbiAgICAgIHN0YXRlLmxpbmUgPSBsaW5lXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUGFyc2VyQmxvY2sucGFyc2Uoc3RyLCBtZCwgZW52LCBvdXRUb2tlbnMpXG4gKlxuICogUHJvY2VzcyBpbnB1dCBzdHJpbmcgYW5kIHB1c2ggYmxvY2sgdG9rZW5zIGludG8gYG91dFRva2Vuc2BcbiAqKi9cblBhcnNlckJsb2NrLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChzcmMsIG1kLCBlbnYsIG91dFRva2Vucykge1xuICBpZiAoIXNyYykgeyByZXR1cm4gfVxuXG4gIGNvbnN0IHN0YXRlID0gbmV3IHRoaXMuU3RhdGUoc3JjLCBtZCwgZW52LCBvdXRUb2tlbnMpXG5cbiAgdGhpcy50b2tlbml6ZShzdGF0ZSwgc3RhdGUubGluZSwgc3RhdGUubGluZU1heClcbn1cblxuUGFyc2VyQmxvY2sucHJvdG90eXBlLlN0YXRlID0gU3RhdGVCbG9ja1xuXG5leHBvcnQgZGVmYXVsdCBQYXJzZXJCbG9ja1xuIiwiLy8gQ29kZSBibG9jayAoNCBzcGFjZXMgcGFkZGVkKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2RlIChzdGF0ZSwgc3RhcnRMaW5lLCBlbmRMaW5lLyosIHNpbGVudCAqLykge1xuICBpZiAoc3RhdGUuc0NvdW50W3N0YXJ0TGluZV0gLSBzdGF0ZS5ibGtJbmRlbnQgPCA0KSB7IHJldHVybiBmYWxzZSB9XG5cbiAgbGV0IG5leHRMaW5lID0gc3RhcnRMaW5lICsgMVxuICBsZXQgbGFzdCA9IG5leHRMaW5lXG5cbiAgd2hpbGUgKG5leHRMaW5lIDwgZW5kTGluZSkge1xuICAgIGlmIChzdGF0ZS5pc0VtcHR5KG5leHRMaW5lKSkge1xuICAgICAgbmV4dExpbmUrK1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+PSA0KSB7XG4gICAgICBuZXh0TGluZSsrXG4gICAgICBsYXN0ID0gbmV4dExpbmVcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGJyZWFrXG4gIH1cblxuICBzdGF0ZS5saW5lID0gbGFzdFxuXG4gIGNvbnN0IHRva2VuICAgPSBzdGF0ZS5wdXNoKCdjb2RlX2Jsb2NrJywgJ2NvZGUnLCAwKVxuICB0b2tlbi5jb250ZW50ID0gc3RhdGUuZ2V0TGluZXMoc3RhcnRMaW5lLCBsYXN0LCA0ICsgc3RhdGUuYmxrSW5kZW50LCBmYWxzZSkgKyAnXFxuJ1xuICB0b2tlbi5tYXAgICAgID0gW3N0YXJ0TGluZSwgc3RhdGUubGluZV1cblxuICByZXR1cm4gdHJ1ZVxufVxuIiwiLy8gZmVuY2VzIChgYGAgbGFuZywgfn5+IGxhbmcpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZlbmNlIChzdGF0ZSwgc3RhcnRMaW5lLCBlbmRMaW5lLCBzaWxlbnQpIHtcbiAgbGV0IHBvcyA9IHN0YXRlLmJNYXJrc1tzdGFydExpbmVdICsgc3RhdGUudFNoaWZ0W3N0YXJ0TGluZV1cbiAgbGV0IG1heCA9IHN0YXRlLmVNYXJrc1tzdGFydExpbmVdXG5cbiAgLy8gaWYgaXQncyBpbmRlbnRlZCBtb3JlIHRoYW4gMyBzcGFjZXMsIGl0IHNob3VsZCBiZSBhIGNvZGUgYmxvY2tcbiAgaWYgKHN0YXRlLnNDb3VudFtzdGFydExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgcmV0dXJuIGZhbHNlIH1cblxuICBpZiAocG9zICsgMyA+IG1heCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGNvbnN0IG1hcmtlciA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcylcblxuICBpZiAobWFya2VyICE9PSAweDdFLyogfiAqLyAmJiBtYXJrZXIgIT09IDB4NjAgLyogYCAqLykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gc2NhbiBtYXJrZXIgbGVuZ3RoXG4gIGxldCBtZW0gPSBwb3NcbiAgcG9zID0gc3RhdGUuc2tpcENoYXJzKHBvcywgbWFya2VyKVxuXG4gIGxldCBsZW4gPSBwb3MgLSBtZW1cblxuICBpZiAobGVuIDwgMykgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGNvbnN0IG1hcmt1cCA9IHN0YXRlLnNyYy5zbGljZShtZW0sIHBvcylcbiAgY29uc3QgcGFyYW1zID0gc3RhdGUuc3JjLnNsaWNlKHBvcywgbWF4KVxuXG4gIGlmIChtYXJrZXIgPT09IDB4NjAgLyogYCAqLykge1xuICAgIGlmIChwYXJhbXMuaW5kZXhPZihTdHJpbmcuZnJvbUNoYXJDb2RlKG1hcmtlcikpID49IDApIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIC8vIFNpbmNlIHN0YXJ0IGlzIGZvdW5kLCB3ZSBjYW4gcmVwb3J0IHN1Y2Nlc3MgaGVyZSBpbiB2YWxpZGF0aW9uIG1vZGVcbiAgaWYgKHNpbGVudCkgeyByZXR1cm4gdHJ1ZSB9XG5cbiAgLy8gc2VhcmNoIGVuZCBvZiBibG9ja1xuICBsZXQgbmV4dExpbmUgPSBzdGFydExpbmVcbiAgbGV0IGhhdmVFbmRNYXJrZXIgPSBmYWxzZVxuXG4gIGZvciAoOzspIHtcbiAgICBuZXh0TGluZSsrXG4gICAgaWYgKG5leHRMaW5lID49IGVuZExpbmUpIHtcbiAgICAgIC8vIHVuY2xvc2VkIGJsb2NrIHNob3VsZCBiZSBhdXRvY2xvc2VkIGJ5IGVuZCBvZiBkb2N1bWVudC5cbiAgICAgIC8vIGFsc28gYmxvY2sgc2VlbXMgdG8gYmUgYXV0b2Nsb3NlZCBieSBlbmQgb2YgcGFyZW50XG4gICAgICBicmVha1xuICAgIH1cblxuICAgIHBvcyA9IG1lbSA9IHN0YXRlLmJNYXJrc1tuZXh0TGluZV0gKyBzdGF0ZS50U2hpZnRbbmV4dExpbmVdXG4gICAgbWF4ID0gc3RhdGUuZU1hcmtzW25leHRMaW5lXVxuXG4gICAgaWYgKHBvcyA8IG1heCAmJiBzdGF0ZS5zQ291bnRbbmV4dExpbmVdIDwgc3RhdGUuYmxrSW5kZW50KSB7XG4gICAgICAvLyBub24tZW1wdHkgbGluZSB3aXRoIG5lZ2F0aXZlIGluZGVudCBzaG91bGQgc3RvcCB0aGUgbGlzdDpcbiAgICAgIC8vIC0gYGBgXG4gICAgICAvLyAgdGVzdFxuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSAhPT0gbWFya2VyKSB7IGNvbnRpbnVlIH1cblxuICAgIGlmIChzdGF0ZS5zQ291bnRbbmV4dExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHtcbiAgICAgIC8vIGNsb3NpbmcgZmVuY2Ugc2hvdWxkIGJlIGluZGVudGVkIGxlc3MgdGhhbiA0IHNwYWNlc1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBwb3MgPSBzdGF0ZS5za2lwQ2hhcnMocG9zLCBtYXJrZXIpXG5cbiAgICAvLyBjbG9zaW5nIGNvZGUgZmVuY2UgbXVzdCBiZSBhdCBsZWFzdCBhcyBsb25nIGFzIHRoZSBvcGVuaW5nIG9uZVxuICAgIGlmIChwb3MgLSBtZW0gPCBsZW4pIHsgY29udGludWUgfVxuXG4gICAgLy8gbWFrZSBzdXJlIHRhaWwgaGFzIHNwYWNlcyBvbmx5XG4gICAgcG9zID0gc3RhdGUuc2tpcFNwYWNlcyhwb3MpXG5cbiAgICBpZiAocG9zIDwgbWF4KSB7IGNvbnRpbnVlIH1cblxuICAgIGhhdmVFbmRNYXJrZXIgPSB0cnVlXG4gICAgLy8gZm91bmQhXG4gICAgYnJlYWtcbiAgfVxuXG4gIC8vIElmIGEgZmVuY2UgaGFzIGhlYWRpbmcgc3BhY2VzLCB0aGV5IHNob3VsZCBiZSByZW1vdmVkIGZyb20gaXRzIGlubmVyIGJsb2NrXG4gIGxlbiA9IHN0YXRlLnNDb3VudFtzdGFydExpbmVdXG5cbiAgc3RhdGUubGluZSA9IG5leHRMaW5lICsgKGhhdmVFbmRNYXJrZXIgPyAxIDogMClcblxuICBjb25zdCB0b2tlbiAgID0gc3RhdGUucHVzaCgnZmVuY2UnLCAnY29kZScsIDApXG4gIHRva2VuLmluZm8gICAgPSBwYXJhbXNcbiAgdG9rZW4uY29udGVudCA9IHN0YXRlLmdldExpbmVzKHN0YXJ0TGluZSArIDEsIG5leHRMaW5lLCBsZW4sIHRydWUpXG4gIHRva2VuLm1hcmt1cCAgPSBtYXJrdXBcbiAgdG9rZW4ubWFwICAgICA9IFtzdGFydExpbmUsIHN0YXRlLmxpbmVdXG5cbiAgcmV0dXJuIHRydWVcbn1cbiIsIi8vIEJsb2NrIHF1b3Rlc1xuXG5pbXBvcnQgeyBpc1NwYWNlIH0gZnJvbSAnLi4vY29tbW9uL3V0aWxzLm1qcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmxvY2txdW90ZSAoc3RhdGUsIHN0YXJ0TGluZSwgZW5kTGluZSwgc2lsZW50KSB7XG4gIGxldCBwb3MgPSBzdGF0ZS5iTWFya3Nbc3RhcnRMaW5lXSArIHN0YXRlLnRTaGlmdFtzdGFydExpbmVdXG4gIGxldCBtYXggPSBzdGF0ZS5lTWFya3Nbc3RhcnRMaW5lXVxuXG4gIGNvbnN0IG9sZExpbmVNYXggPSBzdGF0ZS5saW5lTWF4XG5cbiAgLy8gaWYgaXQncyBpbmRlbnRlZCBtb3JlIHRoYW4gMyBzcGFjZXMsIGl0IHNob3VsZCBiZSBhIGNvZGUgYmxvY2tcbiAgaWYgKHN0YXRlLnNDb3VudFtzdGFydExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgcmV0dXJuIGZhbHNlIH1cblxuICAvLyBjaGVjayB0aGUgYmxvY2sgcXVvdGUgbWFya2VyXG4gIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDNFLyogPiAqLykgeyByZXR1cm4gZmFsc2UgfVxuXG4gIC8vIHdlIGtub3cgdGhhdCBpdCdzIGdvaW5nIHRvIGJlIGEgdmFsaWQgYmxvY2txdW90ZSxcbiAgLy8gc28gbm8gcG9pbnQgdHJ5aW5nIHRvIGZpbmQgdGhlIGVuZCBvZiBpdCBpbiBzaWxlbnQgbW9kZVxuICBpZiAoc2lsZW50KSB7IHJldHVybiB0cnVlIH1cblxuICBjb25zdCBvbGRCTWFya3MgID0gW11cbiAgY29uc3Qgb2xkQlNDb3VudCA9IFtdXG4gIGNvbnN0IG9sZFNDb3VudCAgPSBbXVxuICBjb25zdCBvbGRUU2hpZnQgID0gW11cblxuICBjb25zdCB0ZXJtaW5hdG9yUnVsZXMgPSBzdGF0ZS5tZC5ibG9jay5ydWxlci5nZXRSdWxlcygnYmxvY2txdW90ZScpXG5cbiAgY29uc3Qgb2xkUGFyZW50VHlwZSA9IHN0YXRlLnBhcmVudFR5cGVcbiAgc3RhdGUucGFyZW50VHlwZSA9ICdibG9ja3F1b3RlJ1xuICBsZXQgbGFzdExpbmVFbXB0eSA9IGZhbHNlXG4gIGxldCBuZXh0TGluZVxuXG4gIC8vIFNlYXJjaCB0aGUgZW5kIG9mIHRoZSBibG9ja1xuICAvL1xuICAvLyBCbG9jayBlbmRzIHdpdGggZWl0aGVyOlxuICAvLyAgMS4gYW4gZW1wdHkgbGluZSBvdXRzaWRlOlxuICAvLyAgICAgYGBgXG4gIC8vICAgICA+IHRlc3RcbiAgLy9cbiAgLy8gICAgIGBgYFxuICAvLyAgMi4gYW4gZW1wdHkgbGluZSBpbnNpZGU6XG4gIC8vICAgICBgYGBcbiAgLy8gICAgID5cbiAgLy8gICAgIHRlc3RcbiAgLy8gICAgIGBgYFxuICAvLyAgMy4gYW5vdGhlciB0YWc6XG4gIC8vICAgICBgYGBcbiAgLy8gICAgID4gdGVzdFxuICAvLyAgICAgIC0gLSAtXG4gIC8vICAgICBgYGBcbiAgZm9yIChuZXh0TGluZSA9IHN0YXJ0TGluZTsgbmV4dExpbmUgPCBlbmRMaW5lOyBuZXh0TGluZSsrKSB7XG4gICAgLy8gY2hlY2sgaWYgaXQncyBvdXRkZW50ZWQsIGkuZS4gaXQncyBpbnNpZGUgbGlzdCBpdGVtIGFuZCBpbmRlbnRlZFxuICAgIC8vIGxlc3MgdGhhbiBzYWlkIGxpc3QgaXRlbTpcbiAgICAvL1xuICAgIC8vIGBgYFxuICAgIC8vIDEuIGFueXRoaW5nXG4gICAgLy8gICAgPiBjdXJyZW50IGJsb2NrcXVvdGVcbiAgICAvLyAyLiBjaGVja2luZyB0aGlzIGxpbmVcbiAgICAvLyBgYGBcbiAgICBjb25zdCBpc091dGRlbnRlZCA9IHN0YXRlLnNDb3VudFtuZXh0TGluZV0gPCBzdGF0ZS5ibGtJbmRlbnRcblxuICAgIHBvcyA9IHN0YXRlLmJNYXJrc1tuZXh0TGluZV0gKyBzdGF0ZS50U2hpZnRbbmV4dExpbmVdXG4gICAgbWF4ID0gc3RhdGUuZU1hcmtzW25leHRMaW5lXVxuXG4gICAgaWYgKHBvcyA+PSBtYXgpIHtcbiAgICAgIC8vIENhc2UgMTogbGluZSBpcyBub3QgaW5zaWRlIHRoZSBibG9ja3F1b3RlLCBhbmQgdGhpcyBsaW5lIGlzIGVtcHR5LlxuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKyspID09PSAweDNFLyogPiAqLyAmJiAhaXNPdXRkZW50ZWQpIHtcbiAgICAgIC8vIFRoaXMgbGluZSBpcyBpbnNpZGUgdGhlIGJsb2NrcXVvdGUuXG5cbiAgICAgIC8vIHNldCBvZmZzZXQgcGFzdCBzcGFjZXMgYW5kIFwiPlwiXG4gICAgICBsZXQgaW5pdGlhbCA9IHN0YXRlLnNDb3VudFtuZXh0TGluZV0gKyAxXG4gICAgICBsZXQgc3BhY2VBZnRlck1hcmtlclxuICAgICAgbGV0IGFkanVzdFRhYlxuXG4gICAgICAvLyBza2lwIG9uZSBvcHRpb25hbCBzcGFjZSBhZnRlciAnPidcbiAgICAgIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpID09PSAweDIwIC8qIHNwYWNlICovKSB7XG4gICAgICAgIC8vICcgPiAgIHRlc3QgJ1xuICAgICAgICAvLyAgICAgXiAtLSBwb3NpdGlvbiBzdGFydCBvZiBsaW5lIGhlcmU6XG4gICAgICAgIHBvcysrXG4gICAgICAgIGluaXRpYWwrK1xuICAgICAgICBhZGp1c3RUYWIgPSBmYWxzZVxuICAgICAgICBzcGFjZUFmdGVyTWFya2VyID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpID09PSAweDA5IC8qIHRhYiAqLykge1xuICAgICAgICBzcGFjZUFmdGVyTWFya2VyID0gdHJ1ZVxuXG4gICAgICAgIGlmICgoc3RhdGUuYnNDb3VudFtuZXh0TGluZV0gKyBpbml0aWFsKSAlIDQgPT09IDMpIHtcbiAgICAgICAgICAvLyAnICA+XFx0ICB0ZXN0ICdcbiAgICAgICAgICAvLyAgICAgICBeIC0tIHBvc2l0aW9uIHN0YXJ0IG9mIGxpbmUgaGVyZSAodGFiIGhhcyB3aWR0aD09PTEpXG4gICAgICAgICAgcG9zKytcbiAgICAgICAgICBpbml0aWFsKytcbiAgICAgICAgICBhZGp1c3RUYWIgPSBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vICcgPlxcdCAgdGVzdCAnXG4gICAgICAgICAgLy8gICAgXiAtLSBwb3NpdGlvbiBzdGFydCBvZiBsaW5lIGhlcmUgKyBzaGlmdCBic0NvdW50IHNsaWdodGx5XG4gICAgICAgICAgLy8gICAgICAgICB0byBtYWtlIGV4dHJhIHNwYWNlIGFwcGVhclxuICAgICAgICAgIGFkanVzdFRhYiA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BhY2VBZnRlck1hcmtlciA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGxldCBvZmZzZXQgPSBpbml0aWFsXG4gICAgICBvbGRCTWFya3MucHVzaChzdGF0ZS5iTWFya3NbbmV4dExpbmVdKVxuICAgICAgc3RhdGUuYk1hcmtzW25leHRMaW5lXSA9IHBvc1xuXG4gICAgICB3aGlsZSAocG9zIDwgbWF4KSB7XG4gICAgICAgIGNvbnN0IGNoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKVxuXG4gICAgICAgIGlmIChpc1NwYWNlKGNoKSkge1xuICAgICAgICAgIGlmIChjaCA9PT0gMHgwOSkge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IDQgLSAob2Zmc2V0ICsgc3RhdGUuYnNDb3VudFtuZXh0TGluZV0gKyAoYWRqdXN0VGFiID8gMSA6IDApKSAlIDRcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0KytcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvcysrXG4gICAgICB9XG5cbiAgICAgIGxhc3RMaW5lRW1wdHkgPSBwb3MgPj0gbWF4XG5cbiAgICAgIG9sZEJTQ291bnQucHVzaChzdGF0ZS5ic0NvdW50W25leHRMaW5lXSlcbiAgICAgIHN0YXRlLmJzQ291bnRbbmV4dExpbmVdID0gc3RhdGUuc0NvdW50W25leHRMaW5lXSArIDEgKyAoc3BhY2VBZnRlck1hcmtlciA/IDEgOiAwKVxuXG4gICAgICBvbGRTQ291bnQucHVzaChzdGF0ZS5zQ291bnRbbmV4dExpbmVdKVxuICAgICAgc3RhdGUuc0NvdW50W25leHRMaW5lXSA9IG9mZnNldCAtIGluaXRpYWxcblxuICAgICAgb2xkVFNoaWZ0LnB1c2goc3RhdGUudFNoaWZ0W25leHRMaW5lXSlcbiAgICAgIHN0YXRlLnRTaGlmdFtuZXh0TGluZV0gPSBwb3MgLSBzdGF0ZS5iTWFya3NbbmV4dExpbmVdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIC8vIENhc2UgMjogbGluZSBpcyBub3QgaW5zaWRlIHRoZSBibG9ja3F1b3RlLCBhbmQgdGhlIGxhc3QgbGluZSB3YXMgZW1wdHkuXG4gICAgaWYgKGxhc3RMaW5lRW1wdHkpIHsgYnJlYWsgfVxuXG4gICAgLy8gQ2FzZSAzOiBhbm90aGVyIHRhZyBmb3VuZC5cbiAgICBsZXQgdGVybWluYXRlID0gZmFsc2VcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRlcm1pbmF0b3JSdWxlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh0ZXJtaW5hdG9yUnVsZXNbaV0oc3RhdGUsIG5leHRMaW5lLCBlbmRMaW5lLCB0cnVlKSkge1xuICAgICAgICB0ZXJtaW5hdGUgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRlcm1pbmF0ZSkge1xuICAgICAgLy8gUXVpcmsgdG8gZW5mb3JjZSBcImhhcmQgdGVybWluYXRpb24gbW9kZVwiIGZvciBwYXJhZ3JhcGhzO1xuICAgICAgLy8gbm9ybWFsbHkgaWYgeW91IGNhbGwgYHRva2VuaXplKHN0YXRlLCBzdGFydExpbmUsIG5leHRMaW5lKWAsXG4gICAgICAvLyBwYXJhZ3JhcGhzIHdpbGwgbG9vayBiZWxvdyBuZXh0TGluZSBmb3IgcGFyYWdyYXBoIGNvbnRpbnVhdGlvbixcbiAgICAgIC8vIGJ1dCBpZiBibG9ja3F1b3RlIGlzIHRlcm1pbmF0ZWQgYnkgYW5vdGhlciB0YWcsIHRoZXkgc2hvdWxkbid0XG4gICAgICBzdGF0ZS5saW5lTWF4ID0gbmV4dExpbmVcblxuICAgICAgaWYgKHN0YXRlLmJsa0luZGVudCAhPT0gMCkge1xuICAgICAgICAvLyBzdGF0ZS5ibGtJbmRlbnQgd2FzIG5vbi16ZXJvLCB3ZSBub3cgc2V0IGl0IHRvIHplcm8sXG4gICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gcmUtY2FsY3VsYXRlIGFsbCBvZmZzZXRzIHRvIGFwcGVhciBhc1xuICAgICAgICAvLyBpZiBpbmRlbnQgd2Fzbid0IGNoYW5nZWRcbiAgICAgICAgb2xkQk1hcmtzLnB1c2goc3RhdGUuYk1hcmtzW25leHRMaW5lXSlcbiAgICAgICAgb2xkQlNDb3VudC5wdXNoKHN0YXRlLmJzQ291bnRbbmV4dExpbmVdKVxuICAgICAgICBvbGRUU2hpZnQucHVzaChzdGF0ZS50U2hpZnRbbmV4dExpbmVdKVxuICAgICAgICBvbGRTQ291bnQucHVzaChzdGF0ZS5zQ291bnRbbmV4dExpbmVdKVxuICAgICAgICBzdGF0ZS5zQ291bnRbbmV4dExpbmVdIC09IHN0YXRlLmJsa0luZGVudFxuICAgICAgfVxuXG4gICAgICBicmVha1xuICAgIH1cblxuICAgIG9sZEJNYXJrcy5wdXNoKHN0YXRlLmJNYXJrc1tuZXh0TGluZV0pXG4gICAgb2xkQlNDb3VudC5wdXNoKHN0YXRlLmJzQ291bnRbbmV4dExpbmVdKVxuICAgIG9sZFRTaGlmdC5wdXNoKHN0YXRlLnRTaGlmdFtuZXh0TGluZV0pXG4gICAgb2xkU0NvdW50LnB1c2goc3RhdGUuc0NvdW50W25leHRMaW5lXSlcblxuICAgIC8vIEEgbmVnYXRpdmUgaW5kZW50YXRpb24gbWVhbnMgdGhhdCB0aGlzIGlzIGEgcGFyYWdyYXBoIGNvbnRpbnVhdGlvblxuICAgIC8vXG4gICAgc3RhdGUuc0NvdW50W25leHRMaW5lXSA9IC0xXG4gIH1cblxuICBjb25zdCBvbGRJbmRlbnQgPSBzdGF0ZS5ibGtJbmRlbnRcbiAgc3RhdGUuYmxrSW5kZW50ID0gMFxuXG4gIGNvbnN0IHRva2VuX28gID0gc3RhdGUucHVzaCgnYmxvY2txdW90ZV9vcGVuJywgJ2Jsb2NrcXVvdGUnLCAxKVxuICB0b2tlbl9vLm1hcmt1cCA9ICc+J1xuICBjb25zdCBsaW5lcyA9IFtzdGFydExpbmUsIDBdXG4gIHRva2VuX28ubWFwICAgID0gbGluZXNcblxuICBzdGF0ZS5tZC5ibG9jay50b2tlbml6ZShzdGF0ZSwgc3RhcnRMaW5lLCBuZXh0TGluZSlcblxuICBjb25zdCB0b2tlbl9jICA9IHN0YXRlLnB1c2goJ2Jsb2NrcXVvdGVfY2xvc2UnLCAnYmxvY2txdW90ZScsIC0xKVxuICB0b2tlbl9jLm1hcmt1cCA9ICc+J1xuXG4gIHN0YXRlLmxpbmVNYXggPSBvbGRMaW5lTWF4XG4gIHN0YXRlLnBhcmVudFR5cGUgPSBvbGRQYXJlbnRUeXBlXG4gIGxpbmVzWzFdID0gc3RhdGUubGluZVxuXG4gIC8vIFJlc3RvcmUgb3JpZ2luYWwgdFNoaWZ0OyB0aGlzIG1pZ2h0IG5vdCBiZSBuZWNlc3Nhcnkgc2luY2UgdGhlIHBhcnNlclxuICAvLyBoYXMgYWxyZWFkeSBiZWVuIGhlcmUsIGJ1dCBqdXN0IHRvIG1ha2Ugc3VyZSB3ZSBjYW4gZG8gdGhhdC5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBvbGRUU2hpZnQubGVuZ3RoOyBpKyspIHtcbiAgICBzdGF0ZS5iTWFya3NbaSArIHN0YXJ0TGluZV0gPSBvbGRCTWFya3NbaV1cbiAgICBzdGF0ZS50U2hpZnRbaSArIHN0YXJ0TGluZV0gPSBvbGRUU2hpZnRbaV1cbiAgICBzdGF0ZS5zQ291bnRbaSArIHN0YXJ0TGluZV0gPSBvbGRTQ291bnRbaV1cbiAgICBzdGF0ZS5ic0NvdW50W2kgKyBzdGFydExpbmVdID0gb2xkQlNDb3VudFtpXVxuICB9XG4gIHN0YXRlLmJsa0luZGVudCA9IG9sZEluZGVudFxuXG4gIHJldHVybiB0cnVlXG59XG4iLCIvLyBIb3Jpem9udGFsIHJ1bGVcblxuaW1wb3J0IHsgaXNTcGFjZSB9IGZyb20gJy4uL2NvbW1vbi91dGlscy5tanMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhyIChzdGF0ZSwgc3RhcnRMaW5lLCBlbmRMaW5lLCBzaWxlbnQpIHtcbiAgY29uc3QgbWF4ID0gc3RhdGUuZU1hcmtzW3N0YXJ0TGluZV1cbiAgLy8gaWYgaXQncyBpbmRlbnRlZCBtb3JlIHRoYW4gMyBzcGFjZXMsIGl0IHNob3VsZCBiZSBhIGNvZGUgYmxvY2tcbiAgaWYgKHN0YXRlLnNDb3VudFtzdGFydExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgcmV0dXJuIGZhbHNlIH1cblxuICBsZXQgcG9zID0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV0gKyBzdGF0ZS50U2hpZnRbc3RhcnRMaW5lXVxuICBjb25zdCBtYXJrZXIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MrKylcblxuICAvLyBDaGVjayBociBtYXJrZXJcbiAgaWYgKG1hcmtlciAhPT0gMHgyQS8qICogKi8gJiZcbiAgICAgIG1hcmtlciAhPT0gMHgyRC8qIC0gKi8gJiZcbiAgICAgIG1hcmtlciAhPT0gMHg1Ri8qIF8gKi8pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIG1hcmtlcnMgY2FuIGJlIG1peGVkIHdpdGggc3BhY2VzLCBidXQgdGhlcmUgc2hvdWxkIGJlIGF0IGxlYXN0IDMgb2YgdGhlbVxuXG4gIGxldCBjbnQgPSAxXG4gIHdoaWxlIChwb3MgPCBtYXgpIHtcbiAgICBjb25zdCBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcysrKVxuICAgIGlmIChjaCAhPT0gbWFya2VyICYmICFpc1NwYWNlKGNoKSkgeyByZXR1cm4gZmFsc2UgfVxuICAgIGlmIChjaCA9PT0gbWFya2VyKSB7IGNudCsrIH1cbiAgfVxuXG4gIGlmIChjbnQgPCAzKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgaWYgKHNpbGVudCkgeyByZXR1cm4gdHJ1ZSB9XG5cbiAgc3RhdGUubGluZSA9IHN0YXJ0TGluZSArIDFcblxuICBjb25zdCB0b2tlbiAgPSBzdGF0ZS5wdXNoKCdocicsICdocicsIDApXG4gIHRva2VuLm1hcCAgICA9IFtzdGFydExpbmUsIHN0YXRlLmxpbmVdXG4gIHRva2VuLm1hcmt1cCA9IEFycmF5KGNudCArIDEpLmpvaW4oU3RyaW5nLmZyb21DaGFyQ29kZShtYXJrZXIpKVxuXG4gIHJldHVybiB0cnVlXG59XG4iLCJpbXBvcnQgeyBpc1NwYWNlLCBub3JtYWxpemVSZWZlcmVuY2UgfSBmcm9tICcuLi9jb21tb24vdXRpbHMubWpzJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWZlcmVuY2UgKHN0YXRlLCBzdGFydExpbmUsIF9lbmRMaW5lLCBzaWxlbnQpIHtcbiAgbGV0IHBvcyA9IHN0YXRlLmJNYXJrc1tzdGFydExpbmVdICsgc3RhdGUudFNoaWZ0W3N0YXJ0TGluZV1cbiAgbGV0IG1heCA9IHN0YXRlLmVNYXJrc1tzdGFydExpbmVdXG4gIGxldCBuZXh0TGluZSA9IHN0YXJ0TGluZSArIDFcblxuICAvLyBpZiBpdCdzIGluZGVudGVkIG1vcmUgdGhhbiAzIHNwYWNlcywgaXQgc2hvdWxkIGJlIGEgY29kZSBibG9ja1xuICBpZiAoc3RhdGUuc0NvdW50W3N0YXJ0TGluZV0gLSBzdGF0ZS5ibGtJbmRlbnQgPj0gNCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDVCLyogWyAqLykgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGZ1bmN0aW9uIGdldE5leHRMaW5lIChuZXh0TGluZSkge1xuICAgIGNvbnN0IGVuZExpbmUgPSBzdGF0ZS5saW5lTWF4XG5cbiAgICBpZiAobmV4dExpbmUgPj0gZW5kTGluZSB8fCBzdGF0ZS5pc0VtcHR5KG5leHRMaW5lKSkge1xuICAgICAgLy8gZW1wdHkgbGluZSBvciBlbmQgb2YgaW5wdXRcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgbGV0IGlzQ29udGludWF0aW9uID0gZmFsc2VcblxuICAgIC8vIHRoaXMgd291bGQgYmUgYSBjb2RlIGJsb2NrIG5vcm1hbGx5LCBidXQgYWZ0ZXIgcGFyYWdyYXBoXG4gICAgLy8gaXQncyBjb25zaWRlcmVkIGEgbGF6eSBjb250aW51YXRpb24gcmVnYXJkbGVzcyBvZiB3aGF0J3MgdGhlcmVcbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+IDMpIHsgaXNDb250aW51YXRpb24gPSB0cnVlIH1cblxuICAgIC8vIHF1aXJrIGZvciBibG9ja3F1b3RlcywgdGhpcyBsaW5lIHNob3VsZCBhbHJlYWR5IGJlIGNoZWNrZWQgYnkgdGhhdCBydWxlXG4gICAgaWYgKHN0YXRlLnNDb3VudFtuZXh0TGluZV0gPCAwKSB7IGlzQ29udGludWF0aW9uID0gdHJ1ZSB9XG5cbiAgICBpZiAoIWlzQ29udGludWF0aW9uKSB7XG4gICAgICBjb25zdCB0ZXJtaW5hdG9yUnVsZXMgPSBzdGF0ZS5tZC5ibG9jay5ydWxlci5nZXRSdWxlcygncmVmZXJlbmNlJylcbiAgICAgIGNvbnN0IG9sZFBhcmVudFR5cGUgPSBzdGF0ZS5wYXJlbnRUeXBlXG4gICAgICBzdGF0ZS5wYXJlbnRUeXBlID0gJ3JlZmVyZW5jZSdcblxuICAgICAgLy8gU29tZSB0YWdzIGNhbiB0ZXJtaW5hdGUgcGFyYWdyYXBoIHdpdGhvdXQgZW1wdHkgbGluZS5cbiAgICAgIGxldCB0ZXJtaW5hdGUgPSBmYWxzZVxuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0ZXJtaW5hdG9yUnVsZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmICh0ZXJtaW5hdG9yUnVsZXNbaV0oc3RhdGUsIG5leHRMaW5lLCBlbmRMaW5lLCB0cnVlKSkge1xuICAgICAgICAgIHRlcm1pbmF0ZSA9IHRydWVcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0YXRlLnBhcmVudFR5cGUgPSBvbGRQYXJlbnRUeXBlXG4gICAgICBpZiAodGVybWluYXRlKSB7XG4gICAgICAgIC8vIHRlcm1pbmF0ZWQgYnkgYW5vdGhlciBibG9ja1xuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBvcyA9IHN0YXRlLmJNYXJrc1tuZXh0TGluZV0gKyBzdGF0ZS50U2hpZnRbbmV4dExpbmVdXG4gICAgY29uc3QgbWF4ID0gc3RhdGUuZU1hcmtzW25leHRMaW5lXVxuXG4gICAgLy8gbWF4ICsgMSBleHBsaWNpdGx5IGluY2x1ZGVzIHRoZSBuZXdsaW5lXG4gICAgcmV0dXJuIHN0YXRlLnNyYy5zbGljZShwb3MsIG1heCArIDEpXG4gIH1cblxuICBsZXQgc3RyID0gc3RhdGUuc3JjLnNsaWNlKHBvcywgbWF4ICsgMSlcblxuICBtYXggPSBzdHIubGVuZ3RoXG4gIGxldCBsYWJlbEVuZCA9IC0xXG5cbiAgZm9yIChwb3MgPSAxOyBwb3MgPCBtYXg7IHBvcysrKSB7XG4gICAgY29uc3QgY2ggPSBzdHIuY2hhckNvZGVBdChwb3MpXG4gICAgaWYgKGNoID09PSAweDVCIC8qIFsgKi8pIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4NUQgLyogXSAqLykge1xuICAgICAgbGFiZWxFbmQgPSBwb3NcbiAgICAgIGJyZWFrXG4gICAgfSBlbHNlIGlmIChjaCA9PT0gMHgwQSAvKiBcXG4gKi8pIHtcbiAgICAgIGNvbnN0IGxpbmVDb250ZW50ID0gZ2V0TmV4dExpbmUobmV4dExpbmUpXG4gICAgICBpZiAobGluZUNvbnRlbnQgIT09IG51bGwpIHtcbiAgICAgICAgc3RyICs9IGxpbmVDb250ZW50XG4gICAgICAgIG1heCA9IHN0ci5sZW5ndGhcbiAgICAgICAgbmV4dExpbmUrK1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2ggPT09IDB4NUMgLyogXFwgKi8pIHtcbiAgICAgIHBvcysrXG4gICAgICBpZiAocG9zIDwgbWF4ICYmIHN0ci5jaGFyQ29kZUF0KHBvcykgPT09IDB4MEEpIHtcbiAgICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXROZXh0TGluZShuZXh0TGluZSlcbiAgICAgICAgaWYgKGxpbmVDb250ZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RyICs9IGxpbmVDb250ZW50XG4gICAgICAgICAgbWF4ID0gc3RyLmxlbmd0aFxuICAgICAgICAgIG5leHRMaW5lKytcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChsYWJlbEVuZCA8IDAgfHwgc3RyLmNoYXJDb2RlQXQobGFiZWxFbmQgKyAxKSAhPT0gMHgzQS8qIDogKi8pIHsgcmV0dXJuIGZhbHNlIH1cblxuICAvLyBbbGFiZWxdOiAgIGRlc3RpbmF0aW9uICAgJ3RpdGxlJ1xuICAvLyAgICAgICAgIF5eXiBza2lwIG9wdGlvbmFsIHdoaXRlc3BhY2UgaGVyZVxuICBmb3IgKHBvcyA9IGxhYmVsRW5kICsgMjsgcG9zIDwgbWF4OyBwb3MrKykge1xuICAgIGNvbnN0IGNoID0gc3RyLmNoYXJDb2RlQXQocG9zKVxuICAgIGlmIChjaCA9PT0gMHgwQSkge1xuICAgICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXROZXh0TGluZShuZXh0TGluZSlcbiAgICAgIGlmIChsaW5lQ29udGVudCAhPT0gbnVsbCkge1xuICAgICAgICBzdHIgKz0gbGluZUNvbnRlbnRcbiAgICAgICAgbWF4ID0gc3RyLmxlbmd0aFxuICAgICAgICBuZXh0TGluZSsrXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1NwYWNlKGNoKSkge1xuICAgICAgLyogZXNsaW50IG5vLWVtcHR5OjAgKi9cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICAvLyBbbGFiZWxdOiAgIGRlc3RpbmF0aW9uICAgJ3RpdGxlJ1xuICAvLyAgICAgICAgICAgIF5eXl5eXl5eXl5eIHBhcnNlIHRoaXNcbiAgY29uc3QgZGVzdFJlcyA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rRGVzdGluYXRpb24oc3RyLCBwb3MsIG1heClcbiAgaWYgKCFkZXN0UmVzLm9rKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgY29uc3QgaHJlZiA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmsoZGVzdFJlcy5zdHIpXG4gIGlmICghc3RhdGUubWQudmFsaWRhdGVMaW5rKGhyZWYpKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgcG9zID0gZGVzdFJlcy5wb3NcblxuICAvLyBzYXZlIGN1cnNvciBzdGF0ZSwgd2UgY291bGQgcmVxdWlyZSB0byByb2xsYmFjayBsYXRlclxuICBjb25zdCBkZXN0RW5kUG9zID0gcG9zXG4gIGNvbnN0IGRlc3RFbmRMaW5lTm8gPSBuZXh0TGluZVxuXG4gIC8vIFtsYWJlbF06ICAgZGVzdGluYXRpb24gICAndGl0bGUnXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICBeXl4gc2tpcHBpbmcgdGhvc2Ugc3BhY2VzXG4gIGNvbnN0IHN0YXJ0ID0gcG9zXG4gIGZvciAoOyBwb3MgPCBtYXg7IHBvcysrKSB7XG4gICAgY29uc3QgY2ggPSBzdHIuY2hhckNvZGVBdChwb3MpXG4gICAgaWYgKGNoID09PSAweDBBKSB7XG4gICAgICBjb25zdCBsaW5lQ29udGVudCA9IGdldE5leHRMaW5lKG5leHRMaW5lKVxuICAgICAgaWYgKGxpbmVDb250ZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHN0ciArPSBsaW5lQ29udGVudFxuICAgICAgICBtYXggPSBzdHIubGVuZ3RoXG4gICAgICAgIG5leHRMaW5lKytcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzU3BhY2UoY2gpKSB7XG4gICAgICAvKiBlc2xpbnQgbm8tZW1wdHk6MCAqL1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIC8vIFtsYWJlbF06ICAgZGVzdGluYXRpb24gICAndGl0bGUnXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eIHBhcnNlIHRoaXNcbiAgbGV0IHRpdGxlUmVzID0gc3RhdGUubWQuaGVscGVycy5wYXJzZUxpbmtUaXRsZShzdHIsIHBvcywgbWF4KVxuICB3aGlsZSAodGl0bGVSZXMuY2FuX2NvbnRpbnVlKSB7XG4gICAgY29uc3QgbGluZUNvbnRlbnQgPSBnZXROZXh0TGluZShuZXh0TGluZSlcbiAgICBpZiAobGluZUNvbnRlbnQgPT09IG51bGwpIGJyZWFrXG4gICAgc3RyICs9IGxpbmVDb250ZW50XG4gICAgcG9zID0gbWF4XG4gICAgbWF4ID0gc3RyLmxlbmd0aFxuICAgIG5leHRMaW5lKytcbiAgICB0aXRsZVJlcyA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rVGl0bGUoc3RyLCBwb3MsIG1heCwgdGl0bGVSZXMpXG4gIH1cbiAgbGV0IHRpdGxlXG5cbiAgaWYgKHBvcyA8IG1heCAmJiBzdGFydCAhPT0gcG9zICYmIHRpdGxlUmVzLm9rKSB7XG4gICAgdGl0bGUgPSB0aXRsZVJlcy5zdHJcbiAgICBwb3MgPSB0aXRsZVJlcy5wb3NcbiAgfSBlbHNlIHtcbiAgICB0aXRsZSA9ICcnXG4gICAgcG9zID0gZGVzdEVuZFBvc1xuICAgIG5leHRMaW5lID0gZGVzdEVuZExpbmVOb1xuICB9XG5cbiAgLy8gc2tpcCB0cmFpbGluZyBzcGFjZXMgdW50aWwgdGhlIHJlc3Qgb2YgdGhlIGxpbmVcbiAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgIGNvbnN0IGNoID0gc3RyLmNoYXJDb2RlQXQocG9zKVxuICAgIGlmICghaXNTcGFjZShjaCkpIHsgYnJlYWsgfVxuICAgIHBvcysrXG4gIH1cblxuICBpZiAocG9zIDwgbWF4ICYmIHN0ci5jaGFyQ29kZUF0KHBvcykgIT09IDB4MEEpIHtcbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIC8vIGdhcmJhZ2UgYXQgdGhlIGVuZCBvZiB0aGUgbGluZSBhZnRlciB0aXRsZSxcbiAgICAgIC8vIGJ1dCBpdCBjb3VsZCBzdGlsbCBiZSBhIHZhbGlkIHJlZmVyZW5jZSBpZiB3ZSByb2xsIGJhY2tcbiAgICAgIHRpdGxlID0gJydcbiAgICAgIHBvcyA9IGRlc3RFbmRQb3NcbiAgICAgIG5leHRMaW5lID0gZGVzdEVuZExpbmVOb1xuICAgICAgd2hpbGUgKHBvcyA8IG1heCkge1xuICAgICAgICBjb25zdCBjaCA9IHN0ci5jaGFyQ29kZUF0KHBvcylcbiAgICAgICAgaWYgKCFpc1NwYWNlKGNoKSkgeyBicmVhayB9XG4gICAgICAgIHBvcysrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHBvcyA8IG1heCAmJiBzdHIuY2hhckNvZGVBdChwb3MpICE9PSAweDBBKSB7XG4gICAgLy8gZ2FyYmFnZSBhdCB0aGUgZW5kIG9mIHRoZSBsaW5lXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBjb25zdCBsYWJlbCA9IG5vcm1hbGl6ZVJlZmVyZW5jZShzdHIuc2xpY2UoMSwgbGFiZWxFbmQpKVxuICBpZiAoIWxhYmVsKSB7XG4gICAgLy8gQ29tbW9uTWFyayAwLjIwIGRpc2FsbG93cyBlbXB0eSBsYWJlbHNcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFJlZmVyZW5jZSBjYW4gbm90IHRlcm1pbmF0ZSBhbnl0aGluZy4gVGhpcyBjaGVjayBpcyBmb3Igc2FmZXR5IG9ubHkuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoc2lsZW50KSB7IHJldHVybiB0cnVlIH1cblxuICBpZiAodHlwZW9mIHN0YXRlLmVudi5yZWZlcmVuY2VzID09PSAndW5kZWZpbmVkJykge1xuICAgIHN0YXRlLmVudi5yZWZlcmVuY2VzID0ge31cbiAgfVxuICBpZiAodHlwZW9mIHN0YXRlLmVudi5yZWZlcmVuY2VzW2xhYmVsXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzdGF0ZS5lbnYucmVmZXJlbmNlc1tsYWJlbF0gPSB7IHRpdGxlLCBocmVmIH1cbiAgfVxuXG4gIHN0YXRlLmxpbmUgPSBuZXh0TGluZVxuICByZXR1cm4gdHJ1ZVxufVxuIiwiLy8gaGVhZGluZyAoIywgIyMsIC4uLilcblxuaW1wb3J0IHsgaXNTcGFjZSB9IGZyb20gJy4uL2NvbW1vbi91dGlscy5tanMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhlYWRpbmcgKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUsIHNpbGVudCkge1xuICBsZXQgcG9zID0gc3RhdGUuYk1hcmtzW3N0YXJ0TGluZV0gKyBzdGF0ZS50U2hpZnRbc3RhcnRMaW5lXVxuICBsZXQgbWF4ID0gc3RhdGUuZU1hcmtzW3N0YXJ0TGluZV1cblxuICAvLyBpZiBpdCdzIGluZGVudGVkIG1vcmUgdGhhbiAzIHNwYWNlcywgaXQgc2hvdWxkIGJlIGEgY29kZSBibG9ja1xuICBpZiAoc3RhdGUuc0NvdW50W3N0YXJ0TGluZV0gLSBzdGF0ZS5ibGtJbmRlbnQgPj0gNCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGxldCBjaCAgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpXG5cbiAgaWYgKGNoICE9PSAweDIzLyogIyAqLyB8fCBwb3MgPj0gbWF4KSB7IHJldHVybiBmYWxzZSB9XG5cbiAgLy8gY291bnQgaGVhZGluZyBsZXZlbFxuICBsZXQgbGV2ZWwgPSAxXG4gIGNoID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQoKytwb3MpXG4gIHdoaWxlIChjaCA9PT0gMHgyMy8qICMgKi8gJiYgcG9zIDwgbWF4ICYmIGxldmVsIDw9IDYpIHtcbiAgICBsZXZlbCsrXG4gICAgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdCgrK3BvcylcbiAgfVxuXG4gIGlmIChsZXZlbCA+IDYgfHwgKHBvcyA8IG1heCAmJiAhaXNTcGFjZShjaCkpKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgaWYgKHNpbGVudCkgeyByZXR1cm4gdHJ1ZSB9XG5cbiAgLy8gTGV0J3MgY3V0IHRhaWxzIGxpa2UgJyAgICAjIyMgICcgZnJvbSB0aGUgZW5kIG9mIHN0cmluZ1xuXG4gIG1heCA9IHN0YXRlLnNraXBTcGFjZXNCYWNrKG1heCwgcG9zKVxuICBjb25zdCB0bXAgPSBzdGF0ZS5za2lwQ2hhcnNCYWNrKG1heCwgMHgyMywgcG9zKSAvLyAjXG4gIGlmICh0bXAgPiBwb3MgJiYgaXNTcGFjZShzdGF0ZS5zcmMuY2hhckNvZGVBdCh0bXAgLSAxKSkpIHtcbiAgICBtYXggPSB0bXBcbiAgfVxuXG4gIHN0YXRlLmxpbmUgPSBzdGFydExpbmUgKyAxXG5cbiAgY29uc3QgdG9rZW5fbyAgPSBzdGF0ZS5wdXNoKCdoZWFkaW5nX29wZW4nLCAnaCcgKyBTdHJpbmcobGV2ZWwpLCAxKVxuICB0b2tlbl9vLm1hcmt1cCA9ICcjIyMjIyMjIycuc2xpY2UoMCwgbGV2ZWwpXG4gIHRva2VuX28ubWFwICAgID0gW3N0YXJ0TGluZSwgc3RhdGUubGluZV1cblxuICBjb25zdCB0b2tlbl9pICAgID0gc3RhdGUucHVzaCgnaW5saW5lJywgJycsIDApXG4gIHRva2VuX2kuY29udGVudCAgPSBzdGF0ZS5zcmMuc2xpY2UocG9zLCBtYXgpLnRyaW0oKVxuICB0b2tlbl9pLm1hcCAgICAgID0gW3N0YXJ0TGluZSwgc3RhdGUubGluZV1cbiAgdG9rZW5faS5jaGlsZHJlbiA9IFtdXG5cbiAgY29uc3QgdG9rZW5fYyAgPSBzdGF0ZS5wdXNoKCdoZWFkaW5nX2Nsb3NlJywgJ2gnICsgU3RyaW5nKGxldmVsKSwgLTEpXG4gIHRva2VuX2MubWFya3VwID0gJyMjIyMjIyMjJy5zbGljZSgwLCBsZXZlbClcblxuICByZXR1cm4gdHJ1ZVxufVxuIiwiLy8gbGhlYWRpbmcgKC0tLSwgPT09KVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaGVhZGluZyAoc3RhdGUsIHN0YXJ0TGluZSwgZW5kTGluZS8qLCBzaWxlbnQgKi8pIHtcbiAgY29uc3QgdGVybWluYXRvclJ1bGVzID0gc3RhdGUubWQuYmxvY2sucnVsZXIuZ2V0UnVsZXMoJ3BhcmFncmFwaCcpXG5cbiAgLy8gaWYgaXQncyBpbmRlbnRlZCBtb3JlIHRoYW4gMyBzcGFjZXMsIGl0IHNob3VsZCBiZSBhIGNvZGUgYmxvY2tcbiAgaWYgKHN0YXRlLnNDb3VudFtzdGFydExpbmVdIC0gc3RhdGUuYmxrSW5kZW50ID49IDQpIHsgcmV0dXJuIGZhbHNlIH1cblxuICBjb25zdCBvbGRQYXJlbnRUeXBlID0gc3RhdGUucGFyZW50VHlwZVxuICBzdGF0ZS5wYXJlbnRUeXBlID0gJ3BhcmFncmFwaCcgLy8gdXNlIHBhcmFncmFwaCB0byBtYXRjaCB0ZXJtaW5hdG9yUnVsZXNcblxuICAvLyBqdW1wIGxpbmUtYnktbGluZSB1bnRpbCBlbXB0eSBvbmUgb3IgRU9GXG4gIGxldCBsZXZlbCA9IDBcbiAgbGV0IG1hcmtlclxuICBsZXQgbmV4dExpbmUgPSBzdGFydExpbmUgKyAxXG5cbiAgZm9yICg7IG5leHRMaW5lIDwgZW5kTGluZSAmJiAhc3RhdGUuaXNFbXB0eShuZXh0TGluZSk7IG5leHRMaW5lKyspIHtcbiAgICAvLyB0aGlzIHdvdWxkIGJlIGEgY29kZSBibG9jayBub3JtYWxseSwgYnV0IGFmdGVyIHBhcmFncmFwaFxuICAgIC8vIGl0J3MgY29uc2lkZXJlZCBhIGxhenkgY29udGludWF0aW9uIHJlZ2FyZGxlc3Mgb2Ygd2hhdCdzIHRoZXJlXG4gICAgaWYgKHN0YXRlLnNDb3VudFtuZXh0TGluZV0gLSBzdGF0ZS5ibGtJbmRlbnQgPiAzKSB7IGNvbnRpbnVlIH1cblxuICAgIC8vXG4gICAgLy8gQ2hlY2sgZm9yIHVuZGVybGluZSBpbiBzZXRleHQgaGVhZGVyXG4gICAgLy9cbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSA+PSBzdGF0ZS5ibGtJbmRlbnQpIHtcbiAgICAgIGxldCBwb3MgPSBzdGF0ZS5iTWFya3NbbmV4dExpbmVdICsgc3RhdGUudFNoaWZ0W25leHRMaW5lXVxuICAgICAgY29uc3QgbWF4ID0gc3RhdGUuZU1hcmtzW25leHRMaW5lXVxuXG4gICAgICBpZiAocG9zIDwgbWF4KSB7XG4gICAgICAgIG1hcmtlciA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcylcblxuICAgICAgICBpZiAobWFya2VyID09PSAweDJELyogLSAqLyB8fCBtYXJrZXIgPT09IDB4M0QvKiA9ICovKSB7XG4gICAgICAgICAgcG9zID0gc3RhdGUuc2tpcENoYXJzKHBvcywgbWFya2VyKVxuICAgICAgICAgIHBvcyA9IHN0YXRlLnNraXBTcGFjZXMocG9zKVxuXG4gICAgICAgICAgaWYgKHBvcyA+PSBtYXgpIHtcbiAgICAgICAgICAgIGxldmVsID0gKG1hcmtlciA9PT0gMHgzRC8qID0gKi8gPyAxIDogMilcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gcXVpcmsgZm9yIGJsb2NrcXVvdGVzLCB0aGlzIGxpbmUgc2hvdWxkIGFscmVhZHkgYmUgY2hlY2tlZCBieSB0aGF0IHJ1bGVcbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSA8IDApIHsgY29udGludWUgfVxuXG4gICAgLy8gU29tZSB0YWdzIGNhbiB0ZXJtaW5hdGUgcGFyYWdyYXBoIHdpdGhvdXQgZW1wdHkgbGluZS5cbiAgICBsZXQgdGVybWluYXRlID0gZmFsc2VcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRlcm1pbmF0b3JSdWxlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh0ZXJtaW5hdG9yUnVsZXNbaV0oc3RhdGUsIG5leHRMaW5lLCBlbmRMaW5lLCB0cnVlKSkge1xuICAgICAgICB0ZXJtaW5hdGUgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0ZXJtaW5hdGUpIHsgYnJlYWsgfVxuICB9XG5cbiAgaWYgKCFsZXZlbCkge1xuICAgIC8vIERpZG4ndCBmaW5kIHZhbGlkIHVuZGVybGluZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgY29uc3QgY29udGVudCA9IHN0YXRlLmdldExpbmVzKHN0YXJ0TGluZSwgbmV4dExpbmUsIHN0YXRlLmJsa0luZGVudCwgZmFsc2UpLnRyaW0oKVxuXG4gIHN0YXRlLmxpbmUgPSBuZXh0TGluZSArIDFcblxuICBjb25zdCB0b2tlbl9vICAgID0gc3RhdGUucHVzaCgnaGVhZGluZ19vcGVuJywgJ2gnICsgU3RyaW5nKGxldmVsKSwgMSlcbiAgdG9rZW5fby5tYXJrdXAgICA9IFN0cmluZy5mcm9tQ2hhckNvZGUobWFya2VyKVxuICB0b2tlbl9vLm1hcCAgICAgID0gW3N0YXJ0TGluZSwgc3RhdGUubGluZV1cblxuICBjb25zdCB0b2tlbl9pICAgID0gc3RhdGUucHVzaCgnaW5saW5lJywgJycsIDApXG4gIHRva2VuX2kuY29udGVudCAgPSBjb250ZW50XG4gIHRva2VuX2kubWFwICAgICAgPSBbc3RhcnRMaW5lLCBzdGF0ZS5saW5lIC0gMV1cbiAgdG9rZW5faS5jaGlsZHJlbiA9IFtdXG5cbiAgY29uc3QgdG9rZW5fYyAgICA9IHN0YXRlLnB1c2goJ2hlYWRpbmdfY2xvc2UnLCAnaCcgKyBTdHJpbmcobGV2ZWwpLCAtMSlcbiAgdG9rZW5fYy5tYXJrdXAgICA9IFN0cmluZy5mcm9tQ2hhckNvZGUobWFya2VyKVxuXG4gIHN0YXRlLnBhcmVudFR5cGUgPSBvbGRQYXJlbnRUeXBlXG5cbiAgcmV0dXJuIHRydWVcbn1cbiIsIi8vIFBhcmFncmFwaFxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJhZ3JhcGggKHN0YXRlLCBzdGFydExpbmUsIGVuZExpbmUpIHtcbiAgY29uc3QgdGVybWluYXRvclJ1bGVzID0gc3RhdGUubWQuYmxvY2sucnVsZXIuZ2V0UnVsZXMoJ3BhcmFncmFwaCcpXG4gIGNvbnN0IG9sZFBhcmVudFR5cGUgPSBzdGF0ZS5wYXJlbnRUeXBlXG4gIGxldCBuZXh0TGluZSA9IHN0YXJ0TGluZSArIDFcbiAgc3RhdGUucGFyZW50VHlwZSA9ICdwYXJhZ3JhcGgnXG5cbiAgLy8ganVtcCBsaW5lLWJ5LWxpbmUgdW50aWwgZW1wdHkgb25lIG9yIEVPRlxuICBmb3IgKDsgbmV4dExpbmUgPCBlbmRMaW5lICYmICFzdGF0ZS5pc0VtcHR5KG5leHRMaW5lKTsgbmV4dExpbmUrKykge1xuICAgIC8vIHRoaXMgd291bGQgYmUgYSBjb2RlIGJsb2NrIG5vcm1hbGx5LCBidXQgYWZ0ZXIgcGFyYWdyYXBoXG4gICAgLy8gaXQncyBjb25zaWRlcmVkIGEgbGF6eSBjb250aW51YXRpb24gcmVnYXJkbGVzcyBvZiB3aGF0J3MgdGhlcmVcbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSAtIHN0YXRlLmJsa0luZGVudCA+IDMpIHsgY29udGludWUgfVxuXG4gICAgLy8gcXVpcmsgZm9yIGJsb2NrcXVvdGVzLCB0aGlzIGxpbmUgc2hvdWxkIGFscmVhZHkgYmUgY2hlY2tlZCBieSB0aGF0IHJ1bGVcbiAgICBpZiAoc3RhdGUuc0NvdW50W25leHRMaW5lXSA8IDApIHsgY29udGludWUgfVxuXG4gICAgLy8gU29tZSB0YWdzIGNhbiB0ZXJtaW5hdGUgcGFyYWdyYXBoIHdpdGhvdXQgZW1wdHkgbGluZS5cbiAgICBsZXQgdGVybWluYXRlID0gZmFsc2VcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRlcm1pbmF0b3JSdWxlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmICh0ZXJtaW5hdG9yUnVsZXNbaV0oc3RhdGUsIG5leHRMaW5lLCBlbmRMaW5lLCB0cnVlKSkge1xuICAgICAgICB0ZXJtaW5hdGUgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0ZXJtaW5hdGUpIHsgYnJlYWsgfVxuICB9XG5cbiAgY29uc3QgY29udGVudCA9IHN0YXRlLmdldExpbmVzKHN0YXJ0TGluZSwgbmV4dExpbmUsIHN0YXRlLmJsa0luZGVudCwgZmFsc2UpLnRyaW0oKVxuXG4gIHN0YXRlLmxpbmUgPSBuZXh0TGluZVxuXG4gIGNvbnN0IHRva2VuX28gICAgPSBzdGF0ZS5wdXNoKCdwYXJhZ3JhcGhfb3BlbicsICdwJywgMSlcbiAgdG9rZW5fby5tYXAgICAgICA9IFtzdGFydExpbmUsIHN0YXRlLmxpbmVdXG5cbiAgY29uc3QgdG9rZW5faSAgICA9IHN0YXRlLnB1c2goJ2lubGluZScsICcnLCAwKVxuICB0b2tlbl9pLmNvbnRlbnQgID0gY29udGVudFxuICB0b2tlbl9pLm1hcCAgICAgID0gW3N0YXJ0TGluZSwgc3RhdGUubGluZV1cbiAgdG9rZW5faS5jaGlsZHJlbiA9IFtdXG5cbiAgc3RhdGUucHVzaCgncGFyYWdyYXBoX2Nsb3NlJywgJ3AnLCAtMSlcblxuICBzdGF0ZS5wYXJlbnRUeXBlID0gb2xkUGFyZW50VHlwZVxuXG4gIHJldHVybiB0cnVlXG59XG4iLCIvLyBJbmxpbmUgcGFyc2VyIHN0YXRlXG5cbmltcG9ydCBUb2tlbiBmcm9tICcuLi90b2tlbi5tanMnXG5pbXBvcnQgeyBpc1doaXRlU3BhY2UsIGlzUHVuY3RDaGFyLCBpc01kQXNjaWlQdW5jdCB9IGZyb20gJy4uL2NvbW1vbi91dGlscy5tanMnXG5cbmZ1bmN0aW9uIFN0YXRlSW5saW5lIChzcmMsIG1kLCBlbnYsIG91dFRva2Vucykge1xuICB0aGlzLnNyYyA9IHNyY1xuICB0aGlzLmVudiA9IGVudlxuICB0aGlzLm1kID0gbWRcbiAgdGhpcy50b2tlbnMgPSBvdXRUb2tlbnNcbiAgdGhpcy50b2tlbnNfbWV0YSA9IEFycmF5KG91dFRva2Vucy5sZW5ndGgpXG5cbiAgdGhpcy5wb3MgPSAwXG4gIHRoaXMucG9zTWF4ID0gdGhpcy5zcmMubGVuZ3RoXG4gIHRoaXMubGV2ZWwgPSAwXG4gIHRoaXMucGVuZGluZyA9ICcnXG4gIHRoaXMucGVuZGluZ0xldmVsID0gMFxuXG4gIC8vIFN0b3JlcyB7IHN0YXJ0OiBlbmQgfSBwYWlycy4gVXNlZnVsIGZvciBiYWNrdHJhY2tcbiAgLy8gb3B0aW1pemF0aW9uIG9mIHBhaXJzIHBhcnNlIChlbXBoYXNpcywgc3RyaWtlcykuXG4gIHRoaXMuY2FjaGUgPSB7fVxuXG4gIC8vIExpc3Qgb2YgZW1waGFzaXMtbGlrZSBkZWxpbWl0ZXJzIGZvciBjdXJyZW50IHRhZ1xuICB0aGlzLmRlbGltaXRlcnMgPSBbXVxuXG4gIC8vIFN0YWNrIG9mIGRlbGltaXRlciBsaXN0cyBmb3IgdXBwZXIgbGV2ZWwgdGFnc1xuICB0aGlzLl9wcmV2X2RlbGltaXRlcnMgPSBbXVxuXG4gIC8vIGJhY2t0aWNrIGxlbmd0aCA9PiBsYXN0IHNlZW4gcG9zaXRpb25cbiAgdGhpcy5iYWNrdGlja3MgPSB7fVxuICB0aGlzLmJhY2t0aWNrc1NjYW5uZWQgPSBmYWxzZVxuXG4gIC8vIENvdW50ZXIgdXNlZCB0byBkaXNhYmxlIGlubGluZSBsaW5raWZ5LWl0IGV4ZWN1dGlvblxuICAvLyBpbnNpZGUgPGE+IGFuZCBtYXJrZG93biBsaW5rc1xuICB0aGlzLmxpbmtMZXZlbCA9IDBcbn1cblxuLy8gRmx1c2ggcGVuZGluZyB0ZXh0XG4vL1xuU3RhdGVJbmxpbmUucHJvdG90eXBlLnB1c2hQZW5kaW5nID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCB0b2tlbiA9IG5ldyBUb2tlbigndGV4dCcsICcnLCAwKVxuICB0b2tlbi5jb250ZW50ID0gdGhpcy5wZW5kaW5nXG4gIHRva2VuLmxldmVsID0gdGhpcy5wZW5kaW5nTGV2ZWxcbiAgdGhpcy50b2tlbnMucHVzaCh0b2tlbilcbiAgdGhpcy5wZW5kaW5nID0gJydcbiAgcmV0dXJuIHRva2VuXG59XG5cbi8vIFB1c2ggbmV3IHRva2VuIHRvIFwic3RyZWFtXCIuXG4vLyBJZiBwZW5kaW5nIHRleHQgZXhpc3RzIC0gZmx1c2ggaXQgYXMgdGV4dCB0b2tlblxuLy9cblN0YXRlSW5saW5lLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKHR5cGUsIHRhZywgbmVzdGluZykge1xuICBpZiAodGhpcy5wZW5kaW5nKSB7XG4gICAgdGhpcy5wdXNoUGVuZGluZygpXG4gIH1cblxuICBjb25zdCB0b2tlbiA9IG5ldyBUb2tlbih0eXBlLCB0YWcsIG5lc3RpbmcpXG4gIGxldCB0b2tlbl9tZXRhID0gbnVsbFxuXG4gIGlmIChuZXN0aW5nIDwgMCkge1xuICAgIC8vIGNsb3NpbmcgdGFnXG4gICAgdGhpcy5sZXZlbC0tXG4gICAgdGhpcy5kZWxpbWl0ZXJzID0gdGhpcy5fcHJldl9kZWxpbWl0ZXJzLnBvcCgpXG4gIH1cblxuICB0b2tlbi5sZXZlbCA9IHRoaXMubGV2ZWxcblxuICBpZiAobmVzdGluZyA+IDApIHtcbiAgICAvLyBvcGVuaW5nIHRhZ1xuICAgIHRoaXMubGV2ZWwrK1xuICAgIHRoaXMuX3ByZXZfZGVsaW1pdGVycy5wdXNoKHRoaXMuZGVsaW1pdGVycylcbiAgICB0aGlzLmRlbGltaXRlcnMgPSBbXVxuICAgIHRva2VuX21ldGEgPSB7IGRlbGltaXRlcnM6IHRoaXMuZGVsaW1pdGVycyB9XG4gIH1cblxuICB0aGlzLnBlbmRpbmdMZXZlbCA9IHRoaXMubGV2ZWxcbiAgdGhpcy50b2tlbnMucHVzaCh0b2tlbilcbiAgdGhpcy50b2tlbnNfbWV0YS5wdXNoKHRva2VuX21ldGEpXG4gIHJldHVybiB0b2tlblxufVxuXG4vLyBTY2FuIGEgc2VxdWVuY2Ugb2YgZW1waGFzaXMtbGlrZSBtYXJrZXJzLCBhbmQgZGV0ZXJtaW5lIHdoZXRoZXJcbi8vIGl0IGNhbiBzdGFydCBhbiBlbXBoYXNpcyBzZXF1ZW5jZSBvciBlbmQgYW4gZW1waGFzaXMgc2VxdWVuY2UuXG4vL1xuLy8gIC0gc3RhcnQgLSBwb3NpdGlvbiB0byBzY2FuIGZyb20gKGl0IHNob3VsZCBwb2ludCBhdCBhIHZhbGlkIG1hcmtlcik7XG4vLyAgLSBjYW5TcGxpdFdvcmQgLSBkZXRlcm1pbmUgaWYgdGhlc2UgbWFya2VycyBjYW4gYmUgZm91bmQgaW5zaWRlIGEgd29yZFxuLy9cblN0YXRlSW5saW5lLnByb3RvdHlwZS5zY2FuRGVsaW1zID0gZnVuY3Rpb24gKHN0YXJ0LCBjYW5TcGxpdFdvcmQpIHtcbiAgY29uc3QgbWF4ID0gdGhpcy5wb3NNYXhcbiAgY29uc3QgbWFya2VyID0gdGhpcy5zcmMuY2hhckNvZGVBdChzdGFydClcblxuICAvLyB0cmVhdCBiZWdpbm5pbmcgb2YgdGhlIGxpbmUgYXMgYSB3aGl0ZXNwYWNlXG4gIGNvbnN0IGxhc3RDaGFyID0gc3RhcnQgPiAwID8gdGhpcy5zcmMuY2hhckNvZGVBdChzdGFydCAtIDEpIDogMHgyMFxuXG4gIGxldCBwb3MgPSBzdGFydFxuICB3aGlsZSAocG9zIDwgbWF4ICYmIHRoaXMuc3JjLmNoYXJDb2RlQXQocG9zKSA9PT0gbWFya2VyKSB7IHBvcysrIH1cblxuICBjb25zdCBjb3VudCA9IHBvcyAtIHN0YXJ0XG5cbiAgLy8gdHJlYXQgZW5kIG9mIHRoZSBsaW5lIGFzIGEgd2hpdGVzcGFjZVxuICBjb25zdCBuZXh0Q2hhciA9IHBvcyA8IG1heCA/IHRoaXMuc3JjLmNoYXJDb2RlQXQocG9zKSA6IDB4MjBcblxuICBjb25zdCBpc0xhc3RQdW5jdENoYXIgPSBpc01kQXNjaWlQdW5jdChsYXN0Q2hhcikgfHwgaXNQdW5jdENoYXIoU3RyaW5nLmZyb21DaGFyQ29kZShsYXN0Q2hhcikpXG4gIGNvbnN0IGlzTmV4dFB1bmN0Q2hhciA9IGlzTWRBc2NpaVB1bmN0KG5leHRDaGFyKSB8fCBpc1B1bmN0Q2hhcihTdHJpbmcuZnJvbUNoYXJDb2RlKG5leHRDaGFyKSlcblxuICBjb25zdCBpc0xhc3RXaGl0ZVNwYWNlID0gaXNXaGl0ZVNwYWNlKGxhc3RDaGFyKVxuICBjb25zdCBpc05leHRXaGl0ZVNwYWNlID0gaXNXaGl0ZVNwYWNlKG5leHRDaGFyKVxuXG4gIGNvbnN0IGxlZnRfZmxhbmtpbmcgPVxuICAgICFpc05leHRXaGl0ZVNwYWNlICYmICghaXNOZXh0UHVuY3RDaGFyIHx8IGlzTGFzdFdoaXRlU3BhY2UgfHwgaXNMYXN0UHVuY3RDaGFyKVxuICBjb25zdCByaWdodF9mbGFua2luZyA9XG4gICAgIWlzTGFzdFdoaXRlU3BhY2UgJiYgKCFpc0xhc3RQdW5jdENoYXIgfHwgaXNOZXh0V2hpdGVTcGFjZSB8fCBpc05leHRQdW5jdENoYXIpXG5cbiAgY29uc3QgY2FuX29wZW4gID0gbGVmdF9mbGFua2luZyAgJiYgKGNhblNwbGl0V29yZCB8fCAhcmlnaHRfZmxhbmtpbmcgfHwgaXNMYXN0UHVuY3RDaGFyKVxuICBjb25zdCBjYW5fY2xvc2UgPSByaWdodF9mbGFua2luZyAmJiAoY2FuU3BsaXRXb3JkIHx8ICFsZWZ0X2ZsYW5raW5nICB8fCBpc05leHRQdW5jdENoYXIpXG5cbiAgcmV0dXJuIHsgY2FuX29wZW4sIGNhbl9jbG9zZSwgbGVuZ3RoOiBjb3VudCB9XG59XG5cbi8vIHJlLWV4cG9ydCBUb2tlbiBjbGFzcyB0byB1c2UgaW4gYmxvY2sgcnVsZXNcblN0YXRlSW5saW5lLnByb3RvdHlwZS5Ub2tlbiA9IFRva2VuXG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRlSW5saW5lXG4iLCIvLyBTa2lwIHRleHQgY2hhcmFjdGVycyBmb3IgdGV4dCB0b2tlbiwgcGxhY2UgdGhvc2UgdG8gcGVuZGluZyBidWZmZXJcbi8vIGFuZCBpbmNyZW1lbnQgY3VycmVudCBwb3NcblxuLy8gUnVsZSB0byBza2lwIHB1cmUgdGV4dFxuLy8gJ3t9JCVAfis9OicgcmVzZXJ2ZWQgZm9yIGV4dGVudGlvbnNcblxuLy8gISwgXCIsICMsICQsICUsICYsICcsICgsICksICosICssICwsIC0sIC4sIC8sIDosIDssIDwsID0sID4sID8sIEAsIFssIFxcLCBdLCBeLCBfLCBgLCB7LCB8LCB9LCBvciB+XG5cbi8vICEhISEgRG9uJ3QgY29uZnVzZSB3aXRoIFwiTWFya2Rvd24gQVNDSUkgUHVuY3R1YXRpb25cIiBjaGFyc1xuLy8gaHR0cDovL3NwZWMuY29tbW9ubWFyay5vcmcvMC4xNS8jYXNjaWktcHVuY3R1YXRpb24tY2hhcmFjdGVyXG5mdW5jdGlvbiBpc1Rlcm1pbmF0b3JDaGFyIChjaCkge1xuICBzd2l0Y2ggKGNoKSB7XG4gICAgY2FzZSAweDBBLyogXFxuICovOlxuICAgIGNhc2UgMHgyMS8qICEgKi86XG4gICAgY2FzZSAweDIzLyogIyAqLzpcbiAgICBjYXNlIDB4MjQvKiAkICovOlxuICAgIGNhc2UgMHgyNS8qICUgKi86XG4gICAgY2FzZSAweDI2LyogJiAqLzpcbiAgICBjYXNlIDB4MkEvKiAqICovOlxuICAgIGNhc2UgMHgyQi8qICsgKi86XG4gICAgY2FzZSAweDJELyogLSAqLzpcbiAgICBjYXNlIDB4M0EvKiA6ICovOlxuICAgIGNhc2UgMHgzQy8qIDwgKi86XG4gICAgY2FzZSAweDNELyogPSAqLzpcbiAgICBjYXNlIDB4M0UvKiA+ICovOlxuICAgIGNhc2UgMHg0MC8qIEAgKi86XG4gICAgY2FzZSAweDVCLyogWyAqLzpcbiAgICBjYXNlIDB4NUMvKiBcXCAqLzpcbiAgICBjYXNlIDB4NUQvKiBdICovOlxuICAgIGNhc2UgMHg1RS8qIF4gKi86XG4gICAgY2FzZSAweDVGLyogXyAqLzpcbiAgICBjYXNlIDB4NjAvKiBgICovOlxuICAgIGNhc2UgMHg3Qi8qIHsgKi86XG4gICAgY2FzZSAweDdELyogfSAqLzpcbiAgICBjYXNlIDB4N0UvKiB+ICovOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGV4dCAoc3RhdGUsIHNpbGVudCkge1xuICBsZXQgcG9zID0gc3RhdGUucG9zXG5cbiAgd2hpbGUgKHBvcyA8IHN0YXRlLnBvc01heCAmJiAhaXNUZXJtaW5hdG9yQ2hhcihzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpKSkge1xuICAgIHBvcysrXG4gIH1cblxuICBpZiAocG9zID09PSBzdGF0ZS5wb3MpIHsgcmV0dXJuIGZhbHNlIH1cblxuICBpZiAoIXNpbGVudCkgeyBzdGF0ZS5wZW5kaW5nICs9IHN0YXRlLnNyYy5zbGljZShzdGF0ZS5wb3MsIHBvcykgfVxuXG4gIHN0YXRlLnBvcyA9IHBvc1xuXG4gIHJldHVybiB0cnVlXG59XG5cbi8vIEFsdGVybmF0aXZlIGltcGxlbWVudGF0aW9uLCBmb3IgbWVtb3J5LlxuLy9cbi8vIEl0IGNvc3RzIDEwJSBvZiBwZXJmb3JtYW5jZSwgYnV0IGFsbG93cyBleHRlbmQgdGVybWluYXRvcnMgbGlzdCwgaWYgcGxhY2UgaXRcbi8vIHRvIGBQYXJzZXJJbmxpbmVgIHByb3BlcnR5LiBQcm9iYWJseSwgd2lsbCBzd2l0Y2ggdG8gaXQgc29tZXRpbWUsIHN1Y2hcbi8vIGZsZXhpYmlsaXR5IHJlcXVpcmVkLlxuXG4vKlxudmFyIFRFUk1JTkFUT1JfUkUgPSAvW1xcbiEjJCUmKitcXC06PD0+QFtcXFxcXFxdXl9ge31+XS87XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdGV4dChzdGF0ZSwgc2lsZW50KSB7XG4gIHZhciBwb3MgPSBzdGF0ZS5wb3MsXG4gICAgICBpZHggPSBzdGF0ZS5zcmMuc2xpY2UocG9zKS5zZWFyY2goVEVSTUlOQVRPUl9SRSk7XG5cbiAgLy8gZmlyc3QgY2hhciBpcyB0ZXJtaW5hdG9yIC0+IGVtcHR5IHRleHRcbiAgaWYgKGlkeCA9PT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAvLyBubyB0ZXJtaW5hdG9yIC0+IHRleHQgdGlsbCBlbmQgb2Ygc3RyaW5nXG4gIGlmIChpZHggPCAwKSB7XG4gICAgaWYgKCFzaWxlbnQpIHsgc3RhdGUucGVuZGluZyArPSBzdGF0ZS5zcmMuc2xpY2UocG9zKTsgfVxuICAgIHN0YXRlLnBvcyA9IHN0YXRlLnNyYy5sZW5ndGg7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoIXNpbGVudCkgeyBzdGF0ZS5wZW5kaW5nICs9IHN0YXRlLnNyYy5zbGljZShwb3MsIHBvcyArIGlkeCk7IH1cblxuICBzdGF0ZS5wb3MgKz0gaWR4O1xuXG4gIHJldHVybiB0cnVlO1xufTsgKi9cbiIsIi8vIFByb2Nlc3MgbGlua3MgbGlrZSBodHRwczovL2V4YW1wbGUub3JnL1xuXG4vLyBSRkMzOTg2OiBzY2hlbWUgPSBBTFBIQSAqKCBBTFBIQSAvIERJR0lUIC8gXCIrXCIgLyBcIi1cIiAvIFwiLlwiIClcbmNvbnN0IFNDSEVNRV9SRSA9IC8oPzpefFteYS16MC05ListXSkoW2Etel1bYS16MC05ListXSopJC9pXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmtpZnkgKHN0YXRlLCBzaWxlbnQpIHtcbiAgaWYgKCFzdGF0ZS5tZC5vcHRpb25zLmxpbmtpZnkpIHJldHVybiBmYWxzZVxuICBpZiAoc3RhdGUubGlua0xldmVsID4gMCkgcmV0dXJuIGZhbHNlXG5cbiAgY29uc3QgcG9zID0gc3RhdGUucG9zXG4gIGNvbnN0IG1heCA9IHN0YXRlLnBvc01heFxuXG4gIGlmIChwb3MgKyAzID4gbWF4KSByZXR1cm4gZmFsc2VcbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgIT09IDB4M0EvKiA6ICovKSByZXR1cm4gZmFsc2VcbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyArIDEpICE9PSAweDJGLyogLyAqLykgcmV0dXJuIGZhbHNlXG4gIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MgKyAyKSAhPT0gMHgyRi8qIC8gKi8pIHJldHVybiBmYWxzZVxuXG4gIGNvbnN0IG1hdGNoID0gc3RhdGUucGVuZGluZy5tYXRjaChTQ0hFTUVfUkUpXG4gIGlmICghbWF0Y2gpIHJldHVybiBmYWxzZVxuXG4gIGNvbnN0IHByb3RvID0gbWF0Y2hbMV1cblxuICBjb25zdCBsaW5rID0gc3RhdGUubWQubGlua2lmeS5tYXRjaEF0U3RhcnQoc3RhdGUuc3JjLnNsaWNlKHBvcyAtIHByb3RvLmxlbmd0aCkpXG4gIGlmICghbGluaykgcmV0dXJuIGZhbHNlXG5cbiAgbGV0IHVybCA9IGxpbmsudXJsXG5cbiAgLy8gaW52YWxpZCBsaW5rLCBidXQgc3RpbGwgZGV0ZWN0ZWQgYnkgbGlua2lmeSBzb21laG93O1xuICAvLyBuZWVkIHRvIGNoZWNrIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcCBiZWxvd1xuICBpZiAodXJsLmxlbmd0aCA8PSBwcm90by5sZW5ndGgpIHJldHVybiBmYWxzZVxuXG4gIC8vIGRpc2FsbG93ICcqJyBhdCB0aGUgZW5kIG9mIHRoZSBsaW5rIChjb25mbGljdHMgd2l0aCBlbXBoYXNpcylcbiAgdXJsID0gdXJsLnJlcGxhY2UoL1xcKiskLywgJycpXG5cbiAgY29uc3QgZnVsbFVybCA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmsodXJsKVxuICBpZiAoIXN0YXRlLm1kLnZhbGlkYXRlTGluayhmdWxsVXJsKSkgcmV0dXJuIGZhbHNlXG5cbiAgaWYgKCFzaWxlbnQpIHtcbiAgICBzdGF0ZS5wZW5kaW5nID0gc3RhdGUucGVuZGluZy5zbGljZSgwLCAtcHJvdG8ubGVuZ3RoKVxuXG4gICAgY29uc3QgdG9rZW5fbyA9IHN0YXRlLnB1c2goJ2xpbmtfb3BlbicsICdhJywgMSlcbiAgICB0b2tlbl9vLmF0dHJzID0gW1snaHJlZicsIGZ1bGxVcmxdXVxuICAgIHRva2VuX28ubWFya3VwID0gJ2xpbmtpZnknXG4gICAgdG9rZW5fby5pbmZvID0gJ2F1dG8nXG5cbiAgICBjb25zdCB0b2tlbl90ID0gc3RhdGUucHVzaCgndGV4dCcsICcnLCAwKVxuICAgIHRva2VuX3QuY29udGVudCA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmtUZXh0KHVybClcblxuICAgIGNvbnN0IHRva2VuX2MgPSBzdGF0ZS5wdXNoKCdsaW5rX2Nsb3NlJywgJ2EnLCAtMSlcbiAgICB0b2tlbl9jLm1hcmt1cCA9ICdsaW5raWZ5J1xuICAgIHRva2VuX2MuaW5mbyA9ICdhdXRvJ1xuICB9XG5cbiAgc3RhdGUucG9zICs9IHVybC5sZW5ndGggLSBwcm90by5sZW5ndGhcbiAgcmV0dXJuIHRydWVcbn1cbiIsIi8vIFByb2Nlc3MgZXNjYXBlZCBjaGFycyBhbmQgaGFyZGJyZWFrc1xuXG5pbXBvcnQgeyBpc1NwYWNlIH0gZnJvbSAnLi4vY29tbW9uL3V0aWxzLm1qcydcblxuY29uc3QgRVNDQVBFRCA9IFtdXG5cbmZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHsgRVNDQVBFRC5wdXNoKDApIH1cblxuJ1xcXFwhXCIjJCUmXFwnKCkqKywuLzo7PD0+P0BbXV5fYHt8fX4tJ1xuICAuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNoKSB7IEVTQ0FQRURbY2guY2hhckNvZGVBdCgwKV0gPSAxIH0pXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVzY2FwZSAoc3RhdGUsIHNpbGVudCkge1xuICBsZXQgcG9zID0gc3RhdGUucG9zXG4gIGNvbnN0IG1heCA9IHN0YXRlLnBvc01heFxuXG4gIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDVDLyogXFwgKi8pIHJldHVybiBmYWxzZVxuICBwb3MrK1xuXG4gIC8vICdcXCcgYXQgdGhlIGVuZCBvZiB0aGUgaW5saW5lIGJsb2NrXG4gIGlmIChwb3MgPj0gbWF4KSByZXR1cm4gZmFsc2VcblxuICBsZXQgY2gxID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKVxuXG4gIGlmIChjaDEgPT09IDB4MEEpIHtcbiAgICBpZiAoIXNpbGVudCkge1xuICAgICAgc3RhdGUucHVzaCgnaGFyZGJyZWFrJywgJ2JyJywgMClcbiAgICB9XG5cbiAgICBwb3MrK1xuICAgIC8vIHNraXAgbGVhZGluZyB3aGl0ZXNwYWNlcyBmcm9tIG5leHQgbGluZVxuICAgIHdoaWxlIChwb3MgPCBtYXgpIHtcbiAgICAgIGNoMSA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcylcbiAgICAgIGlmICghaXNTcGFjZShjaDEpKSBicmVha1xuICAgICAgcG9zKytcbiAgICB9XG5cbiAgICBzdGF0ZS5wb3MgPSBwb3NcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgbGV0IGVzY2FwZWRTdHIgPSBzdGF0ZS5zcmNbcG9zXVxuXG4gIGlmIChjaDEgPj0gMHhEODAwICYmIGNoMSA8PSAweERCRkYgJiYgcG9zICsgMSA8IG1heCkge1xuICAgIGNvbnN0IGNoMiA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcyArIDEpXG5cbiAgICBpZiAoY2gyID49IDB4REMwMCAmJiBjaDIgPD0gMHhERkZGKSB7XG4gICAgICBlc2NhcGVkU3RyICs9IHN0YXRlLnNyY1twb3MgKyAxXVxuICAgICAgcG9zKytcbiAgICB9XG4gIH1cblxuICBjb25zdCBvcmlnU3RyID0gJ1xcXFwnICsgZXNjYXBlZFN0clxuXG4gIGlmICghc2lsZW50KSB7XG4gICAgY29uc3QgdG9rZW4gPSBzdGF0ZS5wdXNoKCd0ZXh0X3NwZWNpYWwnLCAnJywgMClcblxuICAgIGlmIChjaDEgPCAyNTYgJiYgRVNDQVBFRFtjaDFdICE9PSAwKSB7XG4gICAgICB0b2tlbi5jb250ZW50ID0gZXNjYXBlZFN0clxuICAgIH0gZWxzZSB7XG4gICAgICB0b2tlbi5jb250ZW50ID0gb3JpZ1N0clxuICAgIH1cblxuICAgIHRva2VuLm1hcmt1cCA9IG9yaWdTdHJcbiAgICB0b2tlbi5pbmZvICAgPSAnZXNjYXBlJ1xuICB9XG5cbiAgc3RhdGUucG9zID0gcG9zICsgMVxuICByZXR1cm4gdHJ1ZVxufVxuIiwiLy8gfn5zdHJpa2UgdGhyb3VnaH5+XG4vL1xuXG4vLyBJbnNlcnQgZWFjaCBtYXJrZXIgYXMgYSBzZXBhcmF0ZSB0ZXh0IHRva2VuLCBhbmQgYWRkIGl0IHRvIGRlbGltaXRlciBsaXN0XG4vL1xuZnVuY3Rpb24gc3RyaWtldGhyb3VnaF90b2tlbml6ZSAoc3RhdGUsIHNpbGVudCkge1xuICBjb25zdCBzdGFydCA9IHN0YXRlLnBvc1xuICBjb25zdCBtYXJrZXIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChzdGFydClcblxuICBpZiAoc2lsZW50KSB7IHJldHVybiBmYWxzZSB9XG5cbiAgaWYgKG1hcmtlciAhPT0gMHg3RS8qIH4gKi8pIHsgcmV0dXJuIGZhbHNlIH1cblxuICBjb25zdCBzY2FubmVkID0gc3RhdGUuc2NhbkRlbGltcyhzdGF0ZS5wb3MsIHRydWUpXG4gIGxldCBsZW4gPSBzY2FubmVkLmxlbmd0aFxuICBjb25zdCBjaCA9IFN0cmluZy5mcm9tQ2hhckNvZGUobWFya2VyKVxuXG4gIGlmIChsZW4gPCAyKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgbGV0IHRva2VuXG5cbiAgaWYgKGxlbiAlIDIpIHtcbiAgICB0b2tlbiAgICAgICAgID0gc3RhdGUucHVzaCgndGV4dCcsICcnLCAwKVxuICAgIHRva2VuLmNvbnRlbnQgPSBjaFxuICAgIGxlbi0tXG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnB1c2goJ3RleHQnLCAnJywgMClcbiAgICB0b2tlbi5jb250ZW50ID0gY2ggKyBjaFxuXG4gICAgc3RhdGUuZGVsaW1pdGVycy5wdXNoKHtcbiAgICAgIG1hcmtlcixcbiAgICAgIGxlbmd0aDogMCwgICAgIC8vIGRpc2FibGUgXCJydWxlIG9mIDNcIiBsZW5ndGggY2hlY2tzIG1lYW50IGZvciBlbXBoYXNpc1xuICAgICAgdG9rZW46IHN0YXRlLnRva2Vucy5sZW5ndGggLSAxLFxuICAgICAgZW5kOiAtMSxcbiAgICAgIG9wZW46IHNjYW5uZWQuY2FuX29wZW4sXG4gICAgICBjbG9zZTogc2Nhbm5lZC5jYW5fY2xvc2VcbiAgICB9KVxuICB9XG5cbiAgc3RhdGUucG9zICs9IHNjYW5uZWQubGVuZ3RoXG5cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gcG9zdFByb2Nlc3MgKHN0YXRlLCBkZWxpbWl0ZXJzKSB7XG4gIGxldCB0b2tlblxuICBjb25zdCBsb25lTWFya2VycyA9IFtdXG4gIGNvbnN0IG1heCA9IGRlbGltaXRlcnMubGVuZ3RoXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXg7IGkrKykge1xuICAgIGNvbnN0IHN0YXJ0RGVsaW0gPSBkZWxpbWl0ZXJzW2ldXG5cbiAgICBpZiAoc3RhcnREZWxpbS5tYXJrZXIgIT09IDB4N0UvKiB+ICovKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGlmIChzdGFydERlbGltLmVuZCA9PT0gLTEpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgY29uc3QgZW5kRGVsaW0gPSBkZWxpbWl0ZXJzW3N0YXJ0RGVsaW0uZW5kXVxuXG4gICAgdG9rZW4gICAgICAgICA9IHN0YXRlLnRva2Vuc1tzdGFydERlbGltLnRva2VuXVxuICAgIHRva2VuLnR5cGUgICAgPSAnc19vcGVuJ1xuICAgIHRva2VuLnRhZyAgICAgPSAncydcbiAgICB0b2tlbi5uZXN0aW5nID0gMVxuICAgIHRva2VuLm1hcmt1cCAgPSAnfn4nXG4gICAgdG9rZW4uY29udGVudCA9ICcnXG5cbiAgICB0b2tlbiAgICAgICAgID0gc3RhdGUudG9rZW5zW2VuZERlbGltLnRva2VuXVxuICAgIHRva2VuLnR5cGUgICAgPSAnc19jbG9zZSdcbiAgICB0b2tlbi50YWcgICAgID0gJ3MnXG4gICAgdG9rZW4ubmVzdGluZyA9IC0xXG4gICAgdG9rZW4ubWFya3VwICA9ICd+fidcbiAgICB0b2tlbi5jb250ZW50ID0gJydcblxuICAgIGlmIChzdGF0ZS50b2tlbnNbZW5kRGVsaW0udG9rZW4gLSAxXS50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgc3RhdGUudG9rZW5zW2VuZERlbGltLnRva2VuIC0gMV0uY29udGVudCA9PT0gJ34nKSB7XG4gICAgICBsb25lTWFya2Vycy5wdXNoKGVuZERlbGltLnRva2VuIC0gMSlcbiAgICB9XG4gIH1cblxuICAvLyBJZiBhIG1hcmtlciBzZXF1ZW5jZSBoYXMgYW4gb2RkIG51bWJlciBvZiBjaGFyYWN0ZXJzLCBpdCdzIHNwbGl0dGVkXG4gIC8vIGxpa2UgdGhpczogYH5+fn5+YCAtPiBgfmAgKyBgfn5gICsgYH5+YCwgbGVhdmluZyBvbmUgbWFya2VyIGF0IHRoZVxuICAvLyBzdGFydCBvZiB0aGUgc2VxdWVuY2UuXG4gIC8vXG4gIC8vIFNvLCB3ZSBoYXZlIHRvIG1vdmUgYWxsIHRob3NlIG1hcmtlcnMgYWZ0ZXIgc3Vic2VxdWVudCBzX2Nsb3NlIHRhZ3MuXG4gIC8vXG4gIHdoaWxlIChsb25lTWFya2Vycy5sZW5ndGgpIHtcbiAgICBjb25zdCBpID0gbG9uZU1hcmtlcnMucG9wKClcbiAgICBsZXQgaiA9IGkgKyAxXG5cbiAgICB3aGlsZSAoaiA8IHN0YXRlLnRva2Vucy5sZW5ndGggJiYgc3RhdGUudG9rZW5zW2pdLnR5cGUgPT09ICdzX2Nsb3NlJykge1xuICAgICAgaisrXG4gICAgfVxuXG4gICAgai0tXG5cbiAgICBpZiAoaSAhPT0gaikge1xuICAgICAgdG9rZW4gPSBzdGF0ZS50b2tlbnNbal1cbiAgICAgIHN0YXRlLnRva2Vuc1tqXSA9IHN0YXRlLnRva2Vuc1tpXVxuICAgICAgc3RhdGUudG9rZW5zW2ldID0gdG9rZW5cbiAgICB9XG4gIH1cbn1cblxuLy8gV2FsayB0aHJvdWdoIGRlbGltaXRlciBsaXN0IGFuZCByZXBsYWNlIHRleHQgdG9rZW5zIHdpdGggdGFnc1xuLy9cbmZ1bmN0aW9uIHN0cmlrZXRocm91Z2hfcG9zdFByb2Nlc3MgKHN0YXRlKSB7XG4gIGNvbnN0IHRva2Vuc19tZXRhID0gc3RhdGUudG9rZW5zX21ldGFcbiAgY29uc3QgbWF4ID0gc3RhdGUudG9rZW5zX21ldGEubGVuZ3RoXG5cbiAgcG9zdFByb2Nlc3Moc3RhdGUsIHN0YXRlLmRlbGltaXRlcnMpXG5cbiAgZm9yIChsZXQgY3VyciA9IDA7IGN1cnIgPCBtYXg7IGN1cnIrKykge1xuICAgIGlmICh0b2tlbnNfbWV0YVtjdXJyXSAmJiB0b2tlbnNfbWV0YVtjdXJyXS5kZWxpbWl0ZXJzKSB7XG4gICAgICBwb3N0UHJvY2VzcyhzdGF0ZSwgdG9rZW5zX21ldGFbY3Vycl0uZGVsaW1pdGVycylcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICB0b2tlbml6ZTogc3RyaWtldGhyb3VnaF90b2tlbml6ZSxcbiAgcG9zdFByb2Nlc3M6IHN0cmlrZXRocm91Z2hfcG9zdFByb2Nlc3Ncbn1cbiIsIi8vIFByb2Nlc3MgKnRoaXMqIGFuZCBfdGhhdF9cbi8vXG5cbi8vIEluc2VydCBlYWNoIG1hcmtlciBhcyBhIHNlcGFyYXRlIHRleHQgdG9rZW4sIGFuZCBhZGQgaXQgdG8gZGVsaW1pdGVyIGxpc3Rcbi8vXG5mdW5jdGlvbiBlbXBoYXNpc190b2tlbml6ZSAoc3RhdGUsIHNpbGVudCkge1xuICBjb25zdCBzdGFydCA9IHN0YXRlLnBvc1xuICBjb25zdCBtYXJrZXIgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChzdGFydClcblxuICBpZiAoc2lsZW50KSB7IHJldHVybiBmYWxzZSB9XG5cbiAgaWYgKG1hcmtlciAhPT0gMHg1RiAvKiBfICovICYmIG1hcmtlciAhPT0gMHgyQSAvKiAqICovKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgY29uc3Qgc2Nhbm5lZCA9IHN0YXRlLnNjYW5EZWxpbXMoc3RhdGUucG9zLCBtYXJrZXIgPT09IDB4MkEpXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2FubmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdG9rZW4gPSBzdGF0ZS5wdXNoKCd0ZXh0JywgJycsIDApXG4gICAgdG9rZW4uY29udGVudCA9IFN0cmluZy5mcm9tQ2hhckNvZGUobWFya2VyKVxuXG4gICAgc3RhdGUuZGVsaW1pdGVycy5wdXNoKHtcbiAgICAgIC8vIENoYXIgY29kZSBvZiB0aGUgc3RhcnRpbmcgbWFya2VyIChudW1iZXIpLlxuICAgICAgLy9cbiAgICAgIG1hcmtlcixcblxuICAgICAgLy8gVG90YWwgbGVuZ3RoIG9mIHRoZXNlIHNlcmllcyBvZiBkZWxpbWl0ZXJzLlxuICAgICAgLy9cbiAgICAgIGxlbmd0aDogc2Nhbm5lZC5sZW5ndGgsXG5cbiAgICAgIC8vIEEgcG9zaXRpb24gb2YgdGhlIHRva2VuIHRoaXMgZGVsaW1pdGVyIGNvcnJlc3BvbmRzIHRvLlxuICAgICAgLy9cbiAgICAgIHRva2VuOiBzdGF0ZS50b2tlbnMubGVuZ3RoIC0gMSxcblxuICAgICAgLy8gSWYgdGhpcyBkZWxpbWl0ZXIgaXMgbWF0Y2hlZCBhcyBhIHZhbGlkIG9wZW5lciwgYGVuZGAgd2lsbCBiZVxuICAgICAgLy8gZXF1YWwgdG8gaXRzIHBvc2l0aW9uLCBvdGhlcndpc2UgaXQncyBgLTFgLlxuICAgICAgLy9cbiAgICAgIGVuZDogLTEsXG5cbiAgICAgIC8vIEJvb2xlYW4gZmxhZ3MgdGhhdCBkZXRlcm1pbmUgaWYgdGhpcyBkZWxpbWl0ZXIgY291bGQgb3BlbiBvciBjbG9zZVxuICAgICAgLy8gYW4gZW1waGFzaXMuXG4gICAgICAvL1xuICAgICAgb3Blbjogc2Nhbm5lZC5jYW5fb3BlbixcbiAgICAgIGNsb3NlOiBzY2FubmVkLmNhbl9jbG9zZVxuICAgIH0pXG4gIH1cblxuICBzdGF0ZS5wb3MgKz0gc2Nhbm5lZC5sZW5ndGhcblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBwb3N0UHJvY2VzcyAoc3RhdGUsIGRlbGltaXRlcnMpIHtcbiAgY29uc3QgbWF4ID0gZGVsaW1pdGVycy5sZW5ndGhcblxuICBmb3IgKGxldCBpID0gbWF4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBzdGFydERlbGltID0gZGVsaW1pdGVyc1tpXVxuXG4gICAgaWYgKHN0YXJ0RGVsaW0ubWFya2VyICE9PSAweDVGLyogXyAqLyAmJiBzdGFydERlbGltLm1hcmtlciAhPT0gMHgyQS8qICogKi8pIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyBvbmx5IG9wZW5pbmcgbWFya2Vyc1xuICAgIGlmIChzdGFydERlbGltLmVuZCA9PT0gLTEpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgY29uc3QgZW5kRGVsaW0gPSBkZWxpbWl0ZXJzW3N0YXJ0RGVsaW0uZW5kXVxuXG4gICAgLy8gSWYgdGhlIHByZXZpb3VzIGRlbGltaXRlciBoYXMgdGhlIHNhbWUgbWFya2VyIGFuZCBpcyBhZGphY2VudCB0byB0aGlzIG9uZSxcbiAgICAvLyBtZXJnZSB0aG9zZSBpbnRvIG9uZSBzdHJvbmcgZGVsaW1pdGVyLlxuICAgIC8vXG4gICAgLy8gYDxlbT48ZW0+d2hhdGV2ZXI8L2VtPjwvZW0+YCAtPiBgPHN0cm9uZz53aGF0ZXZlcjwvc3Ryb25nPmBcbiAgICAvL1xuICAgIGNvbnN0IGlzU3Ryb25nID0gaSA+IDAgJiZcbiAgICAgICAgICAgICAgIGRlbGltaXRlcnNbaSAtIDFdLmVuZCA9PT0gc3RhcnREZWxpbS5lbmQgKyAxICYmXG4gICAgICAgICAgICAgICAvLyBjaGVjayB0aGF0IGZpcnN0IHR3byBtYXJrZXJzIG1hdGNoIGFuZCBhZGphY2VudFxuICAgICAgICAgICAgICAgZGVsaW1pdGVyc1tpIC0gMV0ubWFya2VyID09PSBzdGFydERlbGltLm1hcmtlciAmJlxuICAgICAgICAgICAgICAgZGVsaW1pdGVyc1tpIC0gMV0udG9rZW4gPT09IHN0YXJ0RGVsaW0udG9rZW4gLSAxICYmXG4gICAgICAgICAgICAgICAvLyBjaGVjayB0aGF0IGxhc3QgdHdvIG1hcmtlcnMgYXJlIGFkamFjZW50ICh3ZSBjYW4gc2FmZWx5IGFzc3VtZSB0aGV5IG1hdGNoKVxuICAgICAgICAgICAgICAgZGVsaW1pdGVyc1tzdGFydERlbGltLmVuZCArIDFdLnRva2VuID09PSBlbmREZWxpbS50b2tlbiArIDFcblxuICAgIGNvbnN0IGNoID0gU3RyaW5nLmZyb21DaGFyQ29kZShzdGFydERlbGltLm1hcmtlcilcblxuICAgIGNvbnN0IHRva2VuX28gICA9IHN0YXRlLnRva2Vuc1tzdGFydERlbGltLnRva2VuXVxuICAgIHRva2VuX28udHlwZSAgICA9IGlzU3Ryb25nID8gJ3N0cm9uZ19vcGVuJyA6ICdlbV9vcGVuJ1xuICAgIHRva2VuX28udGFnICAgICA9IGlzU3Ryb25nID8gJ3N0cm9uZycgOiAnZW0nXG4gICAgdG9rZW5fby5uZXN0aW5nID0gMVxuICAgIHRva2VuX28ubWFya3VwICA9IGlzU3Ryb25nID8gY2ggKyBjaCA6IGNoXG4gICAgdG9rZW5fby5jb250ZW50ID0gJydcblxuICAgIGNvbnN0IHRva2VuX2MgICA9IHN0YXRlLnRva2Vuc1tlbmREZWxpbS50b2tlbl1cbiAgICB0b2tlbl9jLnR5cGUgICAgPSBpc1N0cm9uZyA/ICdzdHJvbmdfY2xvc2UnIDogJ2VtX2Nsb3NlJ1xuICAgIHRva2VuX2MudGFnICAgICA9IGlzU3Ryb25nID8gJ3N0cm9uZycgOiAnZW0nXG4gICAgdG9rZW5fYy5uZXN0aW5nID0gLTFcbiAgICB0b2tlbl9jLm1hcmt1cCAgPSBpc1N0cm9uZyA/IGNoICsgY2ggOiBjaFxuICAgIHRva2VuX2MuY29udGVudCA9ICcnXG5cbiAgICBpZiAoaXNTdHJvbmcpIHtcbiAgICAgIHN0YXRlLnRva2Vuc1tkZWxpbWl0ZXJzW2kgLSAxXS50b2tlbl0uY29udGVudCA9ICcnXG4gICAgICBzdGF0ZS50b2tlbnNbZGVsaW1pdGVyc1tzdGFydERlbGltLmVuZCArIDFdLnRva2VuXS5jb250ZW50ID0gJydcbiAgICAgIGktLVxuICAgIH1cbiAgfVxufVxuXG4vLyBXYWxrIHRocm91Z2ggZGVsaW1pdGVyIGxpc3QgYW5kIHJlcGxhY2UgdGV4dCB0b2tlbnMgd2l0aCB0YWdzXG4vL1xuZnVuY3Rpb24gZW1waGFzaXNfcG9zdF9wcm9jZXNzIChzdGF0ZSkge1xuICBjb25zdCB0b2tlbnNfbWV0YSA9IHN0YXRlLnRva2Vuc19tZXRhXG4gIGNvbnN0IG1heCA9IHN0YXRlLnRva2Vuc19tZXRhLmxlbmd0aFxuXG4gIHBvc3RQcm9jZXNzKHN0YXRlLCBzdGF0ZS5kZWxpbWl0ZXJzKVxuXG4gIGZvciAobGV0IGN1cnIgPSAwOyBjdXJyIDwgbWF4OyBjdXJyKyspIHtcbiAgICBpZiAodG9rZW5zX21ldGFbY3Vycl0gJiYgdG9rZW5zX21ldGFbY3Vycl0uZGVsaW1pdGVycykge1xuICAgICAgcG9zdFByb2Nlc3Moc3RhdGUsIHRva2Vuc19tZXRhW2N1cnJdLmRlbGltaXRlcnMpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgdG9rZW5pemU6IGVtcGhhc2lzX3Rva2VuaXplLFxuICBwb3N0UHJvY2VzczogZW1waGFzaXNfcG9zdF9wcm9jZXNzXG59XG4iLCIvLyBQcm9jZXNzIGF1dG9saW5rcyAnPHByb3RvY29sOi4uLj4nXG5cbi8qIGVzbGludCBtYXgtbGVuOjAgKi9cbmNvbnN0IEVNQUlMX1JFICAgID0gL14oW2EtekEtWjAtOS4hIyQlJicqKy89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSopJC9cbi8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4ICovXG5jb25zdCBBVVRPTElOS19SRSA9IC9eKFthLXpBLVpdW2EtekEtWjAtOSsuLV17MSwzMX0pOihbXjw+XFx4MDAtXFx4MjBdKikkL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhdXRvbGluayAoc3RhdGUsIHNpbGVudCkge1xuICBsZXQgcG9zID0gc3RhdGUucG9zXG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcykgIT09IDB4M0MvKiA8ICovKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgY29uc3Qgc3RhcnQgPSBzdGF0ZS5wb3NcbiAgY29uc3QgbWF4ID0gc3RhdGUucG9zTWF4XG5cbiAgZm9yICg7Oykge1xuICAgIGlmICgrK3BvcyA+PSBtYXgpIHJldHVybiBmYWxzZVxuXG4gICAgY29uc3QgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpXG5cbiAgICBpZiAoY2ggPT09IDB4M0MgLyogPCAqLykgcmV0dXJuIGZhbHNlXG4gICAgaWYgKGNoID09PSAweDNFIC8qID4gKi8pIGJyZWFrXG4gIH1cblxuICBjb25zdCB1cmwgPSBzdGF0ZS5zcmMuc2xpY2Uoc3RhcnQgKyAxLCBwb3MpXG5cbiAgaWYgKEFVVE9MSU5LX1JFLnRlc3QodXJsKSkge1xuICAgIGNvbnN0IGZ1bGxVcmwgPSBzdGF0ZS5tZC5ub3JtYWxpemVMaW5rKHVybClcbiAgICBpZiAoIXN0YXRlLm1kLnZhbGlkYXRlTGluayhmdWxsVXJsKSkgeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgaWYgKCFzaWxlbnQpIHtcbiAgICAgIGNvbnN0IHRva2VuX28gICA9IHN0YXRlLnB1c2goJ2xpbmtfb3BlbicsICdhJywgMSlcbiAgICAgIHRva2VuX28uYXR0cnMgICA9IFtbJ2hyZWYnLCBmdWxsVXJsXV1cbiAgICAgIHRva2VuX28ubWFya3VwICA9ICdhdXRvbGluaydcbiAgICAgIHRva2VuX28uaW5mbyAgICA9ICdhdXRvJ1xuXG4gICAgICBjb25zdCB0b2tlbl90ICAgPSBzdGF0ZS5wdXNoKCd0ZXh0JywgJycsIDApXG4gICAgICB0b2tlbl90LmNvbnRlbnQgPSBzdGF0ZS5tZC5ub3JtYWxpemVMaW5rVGV4dCh1cmwpXG5cbiAgICAgIGNvbnN0IHRva2VuX2MgICA9IHN0YXRlLnB1c2goJ2xpbmtfY2xvc2UnLCAnYScsIC0xKVxuICAgICAgdG9rZW5fYy5tYXJrdXAgID0gJ2F1dG9saW5rJ1xuICAgICAgdG9rZW5fYy5pbmZvICAgID0gJ2F1dG8nXG4gICAgfVxuXG4gICAgc3RhdGUucG9zICs9IHVybC5sZW5ndGggKyAyXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGlmIChFTUFJTF9SRS50ZXN0KHVybCkpIHtcbiAgICBjb25zdCBmdWxsVXJsID0gc3RhdGUubWQubm9ybWFsaXplTGluaygnbWFpbHRvOicgKyB1cmwpXG4gICAgaWYgKCFzdGF0ZS5tZC52YWxpZGF0ZUxpbmsoZnVsbFVybCkpIHsgcmV0dXJuIGZhbHNlIH1cblxuICAgIGlmICghc2lsZW50KSB7XG4gICAgICBjb25zdCB0b2tlbl9vICAgPSBzdGF0ZS5wdXNoKCdsaW5rX29wZW4nLCAnYScsIDEpXG4gICAgICB0b2tlbl9vLmF0dHJzICAgPSBbWydocmVmJywgZnVsbFVybF1dXG4gICAgICB0b2tlbl9vLm1hcmt1cCAgPSAnYXV0b2xpbmsnXG4gICAgICB0b2tlbl9vLmluZm8gICAgPSAnYXV0bydcblxuICAgICAgY29uc3QgdG9rZW5fdCAgID0gc3RhdGUucHVzaCgndGV4dCcsICcnLCAwKVxuICAgICAgdG9rZW5fdC5jb250ZW50ID0gc3RhdGUubWQubm9ybWFsaXplTGlua1RleHQodXJsKVxuXG4gICAgICBjb25zdCB0b2tlbl9jICAgPSBzdGF0ZS5wdXNoKCdsaW5rX2Nsb3NlJywgJ2EnLCAtMSlcbiAgICAgIHRva2VuX2MubWFya3VwICA9ICdhdXRvbGluaydcbiAgICAgIHRva2VuX2MuaW5mbyAgICA9ICdhdXRvJ1xuICAgIH1cblxuICAgIHN0YXRlLnBvcyArPSB1cmwubGVuZ3RoICsgMlxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cbiIsIi8vIFByb2Nlc3MgaHRtbCBlbnRpdHkgLSAmIzEyMzssICYjeEFGOywgJnF1b3Q7LCAuLi5cblxuaW1wb3J0IHsgZGVjb2RlSFRNTCB9IGZyb20gJ2VudGl0aWVzJ1xuaW1wb3J0IHsgaXNWYWxpZEVudGl0eUNvZGUsIGZyb21Db2RlUG9pbnQgfSBmcm9tICcuLi9jb21tb24vdXRpbHMubWpzJ1xuXG5jb25zdCBESUdJVEFMX1JFID0gL14mIygoPzp4W2EtZjAtOV17MSw2fXxbMC05XXsxLDd9KSk7L2lcbmNvbnN0IE5BTUVEX1JFICAgPSAvXiYoW2Etel1bYS16MC05XXsxLDMxfSk7L2lcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZW50aXR5IChzdGF0ZSwgc2lsZW50KSB7XG4gIGNvbnN0IHBvcyA9IHN0YXRlLnBvc1xuICBjb25zdCBtYXggPSBzdGF0ZS5wb3NNYXhcblxuICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSAhPT0gMHgyNi8qICYgKi8pIHJldHVybiBmYWxzZVxuXG4gIGlmIChwb3MgKyAxID49IG1heCkgcmV0dXJuIGZhbHNlXG5cbiAgY29uc3QgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MgKyAxKVxuXG4gIGlmIChjaCA9PT0gMHgyMyAvKiAjICovKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBzdGF0ZS5zcmMuc2xpY2UocG9zKS5tYXRjaChESUdJVEFMX1JFKVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgaWYgKCFzaWxlbnQpIHtcbiAgICAgICAgY29uc3QgY29kZSA9IG1hdGNoWzFdWzBdLnRvTG93ZXJDYXNlKCkgPT09ICd4JyA/IHBhcnNlSW50KG1hdGNoWzFdLnNsaWNlKDEpLCAxNikgOiBwYXJzZUludChtYXRjaFsxXSwgMTApXG5cbiAgICAgICAgY29uc3QgdG9rZW4gICA9IHN0YXRlLnB1c2goJ3RleHRfc3BlY2lhbCcsICcnLCAwKVxuICAgICAgICB0b2tlbi5jb250ZW50ID0gaXNWYWxpZEVudGl0eUNvZGUoY29kZSkgPyBmcm9tQ29kZVBvaW50KGNvZGUpIDogZnJvbUNvZGVQb2ludCgweEZGRkQpXG4gICAgICAgIHRva2VuLm1hcmt1cCAgPSBtYXRjaFswXVxuICAgICAgICB0b2tlbi5pbmZvICAgID0gJ2VudGl0eSdcbiAgICAgIH1cbiAgICAgIHN0YXRlLnBvcyArPSBtYXRjaFswXS5sZW5ndGhcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IG1hdGNoID0gc3RhdGUuc3JjLnNsaWNlKHBvcykubWF0Y2goTkFNRURfUkUpXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb25zdCBkZWNvZGVkID0gZGVjb2RlSFRNTChtYXRjaFswXSlcbiAgICAgIGlmIChkZWNvZGVkICE9PSBtYXRjaFswXSkge1xuICAgICAgICBpZiAoIXNpbGVudCkge1xuICAgICAgICAgIGNvbnN0IHRva2VuICAgPSBzdGF0ZS5wdXNoKCd0ZXh0X3NwZWNpYWwnLCAnJywgMClcbiAgICAgICAgICB0b2tlbi5jb250ZW50ID0gZGVjb2RlZFxuICAgICAgICAgIHRva2VuLm1hcmt1cCAgPSBtYXRjaFswXVxuICAgICAgICAgIHRva2VuLmluZm8gICAgPSAnZW50aXR5J1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLnBvcyArPSBtYXRjaFswXS5sZW5ndGhcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cbiIsIi8vIEZvciBlYWNoIG9wZW5pbmcgZW1waGFzaXMtbGlrZSBtYXJrZXIgZmluZCBhIG1hdGNoaW5nIGNsb3Npbmcgb25lXG4vL1xuXG5mdW5jdGlvbiBwcm9jZXNzRGVsaW1pdGVycyAoZGVsaW1pdGVycykge1xuICBjb25zdCBvcGVuZXJzQm90dG9tID0ge31cbiAgY29uc3QgbWF4ID0gZGVsaW1pdGVycy5sZW5ndGhcblxuICBpZiAoIW1heCkgcmV0dXJuXG5cbiAgLy8gaGVhZGVySWR4IGlzIHRoZSBmaXJzdCBkZWxpbWl0ZXIgb2YgdGhlIGN1cnJlbnQgKHdoZXJlIGNsb3NlciBpcykgZGVsaW1pdGVyIHJ1blxuICBsZXQgaGVhZGVySWR4ID0gMFxuICBsZXQgbGFzdFRva2VuSWR4ID0gLTIgLy8gbmVlZHMgYW55IHZhbHVlIGxvd2VyIHRoYW4gLTFcbiAgY29uc3QganVtcHMgPSBbXVxuXG4gIGZvciAobGV0IGNsb3NlcklkeCA9IDA7IGNsb3NlcklkeCA8IG1heDsgY2xvc2VySWR4KyspIHtcbiAgICBjb25zdCBjbG9zZXIgPSBkZWxpbWl0ZXJzW2Nsb3NlcklkeF1cblxuICAgIGp1bXBzLnB1c2goMClcblxuICAgIC8vIG1hcmtlcnMgYmVsb25nIHRvIHNhbWUgZGVsaW1pdGVyIHJ1biBpZjpcbiAgICAvLyAgLSB0aGV5IGhhdmUgYWRqYWNlbnQgdG9rZW5zXG4gICAgLy8gIC0gQU5EIG1hcmtlcnMgYXJlIHRoZSBzYW1lXG4gICAgLy9cbiAgICBpZiAoZGVsaW1pdGVyc1toZWFkZXJJZHhdLm1hcmtlciAhPT0gY2xvc2VyLm1hcmtlciB8fCBsYXN0VG9rZW5JZHggIT09IGNsb3Nlci50b2tlbiAtIDEpIHtcbiAgICAgIGhlYWRlcklkeCA9IGNsb3NlcklkeFxuICAgIH1cblxuICAgIGxhc3RUb2tlbklkeCA9IGNsb3Nlci50b2tlblxuXG4gICAgLy8gTGVuZ3RoIGlzIG9ubHkgdXNlZCBmb3IgZW1waGFzaXMtc3BlY2lmaWMgXCJydWxlIG9mIDNcIixcbiAgICAvLyBpZiBpdCdzIG5vdCBkZWZpbmVkIChpbiBzdHJpa2V0aHJvdWdoIG9yIDNyZCBwYXJ0eSBwbHVnaW5zKSxcbiAgICAvLyB3ZSBjYW4gZGVmYXVsdCBpdCB0byAwIHRvIGRpc2FibGUgdGhvc2UgY2hlY2tzLlxuICAgIC8vXG4gICAgY2xvc2VyLmxlbmd0aCA9IGNsb3Nlci5sZW5ndGggfHwgMFxuXG4gICAgaWYgKCFjbG9zZXIuY2xvc2UpIGNvbnRpbnVlXG5cbiAgICAvLyBQcmV2aW91c2x5IGNhbGN1bGF0ZWQgbG93ZXIgYm91bmRzIChwcmV2aW91cyBmYWlscylcbiAgICAvLyBmb3IgZWFjaCBtYXJrZXIsIGVhY2ggZGVsaW1pdGVyIGxlbmd0aCBtb2R1bG8gMyxcbiAgICAvLyBhbmQgZm9yIHdoZXRoZXIgdGhpcyBjbG9zZXIgY2FuIGJlIGFuIG9wZW5lcjtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY29tbW9ubWFyay9jbWFyay9jb21taXQvMzQyNTBlMTJjY2ViZGM2MzcyYjhiNDljNDRmYWI1N2M3MjQ0MzQ2MFxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgKi9cbiAgICBpZiAoIW9wZW5lcnNCb3R0b20uaGFzT3duUHJvcGVydHkoY2xvc2VyLm1hcmtlcikpIHtcbiAgICAgIG9wZW5lcnNCb3R0b21bY2xvc2VyLm1hcmtlcl0gPSBbLTEsIC0xLCAtMSwgLTEsIC0xLCAtMV1cbiAgICB9XG5cbiAgICBjb25zdCBtaW5PcGVuZXJJZHggPSBvcGVuZXJzQm90dG9tW2Nsb3Nlci5tYXJrZXJdWyhjbG9zZXIub3BlbiA/IDMgOiAwKSArIChjbG9zZXIubGVuZ3RoICUgMyldXG5cbiAgICBsZXQgb3BlbmVySWR4ID0gaGVhZGVySWR4IC0ganVtcHNbaGVhZGVySWR4XSAtIDFcblxuICAgIGxldCBuZXdNaW5PcGVuZXJJZHggPSBvcGVuZXJJZHhcblxuICAgIGZvciAoOyBvcGVuZXJJZHggPiBtaW5PcGVuZXJJZHg7IG9wZW5lcklkeCAtPSBqdW1wc1tvcGVuZXJJZHhdICsgMSkge1xuICAgICAgY29uc3Qgb3BlbmVyID0gZGVsaW1pdGVyc1tvcGVuZXJJZHhdXG5cbiAgICAgIGlmIChvcGVuZXIubWFya2VyICE9PSBjbG9zZXIubWFya2VyKSBjb250aW51ZVxuXG4gICAgICBpZiAob3BlbmVyLm9wZW4gJiYgb3BlbmVyLmVuZCA8IDApIHtcbiAgICAgICAgbGV0IGlzT2RkTWF0Y2ggPSBmYWxzZVxuXG4gICAgICAgIC8vIGZyb20gc3BlYzpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gSWYgb25lIG9mIHRoZSBkZWxpbWl0ZXJzIGNhbiBib3RoIG9wZW4gYW5kIGNsb3NlIGVtcGhhc2lzLCB0aGVuIHRoZVxuICAgICAgICAvLyBzdW0gb2YgdGhlIGxlbmd0aHMgb2YgdGhlIGRlbGltaXRlciBydW5zIGNvbnRhaW5pbmcgdGhlIG9wZW5pbmcgYW5kXG4gICAgICAgIC8vIGNsb3NpbmcgZGVsaW1pdGVycyBtdXN0IG5vdCBiZSBhIG11bHRpcGxlIG9mIDMgdW5sZXNzIGJvdGggbGVuZ3Roc1xuICAgICAgICAvLyBhcmUgbXVsdGlwbGVzIG9mIDMuXG4gICAgICAgIC8vXG4gICAgICAgIGlmIChvcGVuZXIuY2xvc2UgfHwgY2xvc2VyLm9wZW4pIHtcbiAgICAgICAgICBpZiAoKG9wZW5lci5sZW5ndGggKyBjbG9zZXIubGVuZ3RoKSAlIDMgPT09IDApIHtcbiAgICAgICAgICAgIGlmIChvcGVuZXIubGVuZ3RoICUgMyAhPT0gMCB8fCBjbG9zZXIubGVuZ3RoICUgMyAhPT0gMCkge1xuICAgICAgICAgICAgICBpc09kZE1hdGNoID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNPZGRNYXRjaCkge1xuICAgICAgICAgIC8vIElmIHByZXZpb3VzIGRlbGltaXRlciBjYW5ub3QgYmUgYW4gb3BlbmVyLCB3ZSBjYW4gc2FmZWx5IHNraXBcbiAgICAgICAgICAvLyB0aGUgZW50aXJlIHNlcXVlbmNlIGluIGZ1dHVyZSBjaGVja3MuIFRoaXMgaXMgcmVxdWlyZWQgdG8gbWFrZVxuICAgICAgICAgIC8vIHN1cmUgYWxnb3JpdGhtIGhhcyBsaW5lYXIgY29tcGxleGl0eSAoc2VlICpfKl8qXypfKl8uLi4gY2FzZSkuXG4gICAgICAgICAgLy9cbiAgICAgICAgICBjb25zdCBsYXN0SnVtcCA9IG9wZW5lcklkeCA+IDAgJiYgIWRlbGltaXRlcnNbb3BlbmVySWR4IC0gMV0ub3BlblxuICAgICAgICAgICAgPyBqdW1wc1tvcGVuZXJJZHggLSAxXSArIDFcbiAgICAgICAgICAgIDogMFxuXG4gICAgICAgICAganVtcHNbY2xvc2VySWR4XSA9IGNsb3NlcklkeCAtIG9wZW5lcklkeCArIGxhc3RKdW1wXG4gICAgICAgICAganVtcHNbb3BlbmVySWR4XSA9IGxhc3RKdW1wXG5cbiAgICAgICAgICBjbG9zZXIub3BlbiAgPSBmYWxzZVxuICAgICAgICAgIG9wZW5lci5lbmQgICA9IGNsb3NlcklkeFxuICAgICAgICAgIG9wZW5lci5jbG9zZSA9IGZhbHNlXG4gICAgICAgICAgbmV3TWluT3BlbmVySWR4ID0gLTFcbiAgICAgICAgICAvLyB0cmVhdCBuZXh0IHRva2VuIGFzIHN0YXJ0IG9mIHJ1bixcbiAgICAgICAgICAvLyBpdCBvcHRpbWl6ZXMgc2tpcHMgaW4gKio8Li4uPioqYSoqPC4uLj4qKiBwYXRob2xvZ2ljYWwgY2FzZVxuICAgICAgICAgIGxhc3RUb2tlbklkeCA9IC0yXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdNaW5PcGVuZXJJZHggIT09IC0xKSB7XG4gICAgICAvLyBJZiBtYXRjaCBmb3IgdGhpcyBkZWxpbWl0ZXIgcnVuIGZhaWxlZCwgd2Ugd2FudCB0byBzZXQgbG93ZXIgYm91bmQgZm9yXG4gICAgICAvLyBmdXR1cmUgbG9va3Vwcy4gVGhpcyBpcyByZXF1aXJlZCB0byBtYWtlIHN1cmUgYWxnb3JpdGhtIGhhcyBsaW5lYXJcbiAgICAgIC8vIGNvbXBsZXhpdHkuXG4gICAgICAvL1xuICAgICAgLy8gU2VlIGRldGFpbHMgaGVyZTpcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jb21tb25tYXJrL2NtYXJrL2lzc3Vlcy8xNzgjaXNzdWVjb21tZW50LTI3MDQxNzQ0MlxuICAgICAgLy9cbiAgICAgIG9wZW5lcnNCb3R0b21bY2xvc2VyLm1hcmtlcl1bKGNsb3Nlci5vcGVuID8gMyA6IDApICsgKChjbG9zZXIubGVuZ3RoIHx8IDApICUgMyldID0gbmV3TWluT3BlbmVySWR4XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmtfcGFpcnMgKHN0YXRlKSB7XG4gIGNvbnN0IHRva2Vuc19tZXRhID0gc3RhdGUudG9rZW5zX21ldGFcbiAgY29uc3QgbWF4ID0gc3RhdGUudG9rZW5zX21ldGEubGVuZ3RoXG5cbiAgcHJvY2Vzc0RlbGltaXRlcnMoc3RhdGUuZGVsaW1pdGVycylcblxuICBmb3IgKGxldCBjdXJyID0gMDsgY3VyciA8IG1heDsgY3VycisrKSB7XG4gICAgaWYgKHRva2Vuc19tZXRhW2N1cnJdICYmIHRva2Vuc19tZXRhW2N1cnJdLmRlbGltaXRlcnMpIHtcbiAgICAgIHByb2Nlc3NEZWxpbWl0ZXJzKHRva2Vuc19tZXRhW2N1cnJdLmRlbGltaXRlcnMpXG4gICAgfVxuICB9XG59XG4iLCIvKiogaW50ZXJuYWxcbiAqIGNsYXNzIFBhcnNlcklubGluZVxuICpcbiAqIFRva2VuaXplcyBwYXJhZ3JhcGggY29udGVudC5cbiAqKi9cblxuaW1wb3J0IFJ1bGVyIGZyb20gJy4vcnVsZXIubWpzJ1xuaW1wb3J0IFN0YXRlSW5saW5lIGZyb20gJy4vcnVsZXNfaW5saW5lL3N0YXRlX2lubGluZS5tanMnXG5cbmltcG9ydCByX3RleHQgZnJvbSAnLi9ydWxlc19pbmxpbmUvdGV4dC5tanMnXG5pbXBvcnQgcl9saW5raWZ5IGZyb20gJy4vcnVsZXNfaW5saW5lL2xpbmtpZnkubWpzJ1xuaW1wb3J0IHJfbmV3bGluZSBmcm9tICcuL3J1bGVzX2lubGluZS9uZXdsaW5lLm1qcydcbmltcG9ydCByX2VzY2FwZSBmcm9tICcuL3J1bGVzX2lubGluZS9lc2NhcGUubWpzJ1xuaW1wb3J0IHJfYmFja3RpY2tzIGZyb20gJy4vcnVsZXNfaW5saW5lL2JhY2t0aWNrcy5tanMnXG5pbXBvcnQgcl9zdHJpa2V0aHJvdWdoIGZyb20gJy4vcnVsZXNfaW5saW5lL3N0cmlrZXRocm91Z2gubWpzJ1xuaW1wb3J0IHJfZW1waGFzaXMgZnJvbSAnLi9ydWxlc19pbmxpbmUvZW1waGFzaXMubWpzJ1xuaW1wb3J0IHJfbGluayBmcm9tICcuL3J1bGVzX2lubGluZS9saW5rLm1qcydcbmltcG9ydCByX2ltYWdlIGZyb20gJy4vcnVsZXNfaW5saW5lL2ltYWdlLm1qcydcbmltcG9ydCByX2F1dG9saW5rIGZyb20gJy4vcnVsZXNfaW5saW5lL2F1dG9saW5rLm1qcydcbmltcG9ydCByX2h0bWxfaW5saW5lIGZyb20gJy4vcnVsZXNfaW5saW5lL2h0bWxfaW5saW5lLm1qcydcbmltcG9ydCByX2VudGl0eSBmcm9tICcuL3J1bGVzX2lubGluZS9lbnRpdHkubWpzJ1xuXG5pbXBvcnQgcl9iYWxhbmNlX3BhaXJzIGZyb20gJy4vcnVsZXNfaW5saW5lL2JhbGFuY2VfcGFpcnMubWpzJ1xuaW1wb3J0IHJfZnJhZ21lbnRzX2pvaW4gZnJvbSAnLi9ydWxlc19pbmxpbmUvZnJhZ21lbnRzX2pvaW4ubWpzJ1xuXG4vLyBQYXJzZXIgcnVsZXNcblxuY29uc3QgX3J1bGVzID0gW1xuICBbJ3RleHQnLCAgICAgICAgICAgIHJfdGV4dF0sXG4gIFsnbGlua2lmeScsICAgICAgICAgcl9saW5raWZ5XSxcbiAgWyduZXdsaW5lJywgICAgICAgICByX25ld2xpbmVdLFxuICBbJ2VzY2FwZScsICAgICAgICAgIHJfZXNjYXBlXSxcbiAgWydiYWNrdGlja3MnLCAgICAgICByX2JhY2t0aWNrc10sXG4gIFsnc3RyaWtldGhyb3VnaCcsICAgcl9zdHJpa2V0aHJvdWdoLnRva2VuaXplXSxcbiAgWydlbXBoYXNpcycsICAgICAgICByX2VtcGhhc2lzLnRva2VuaXplXSxcbiAgWydsaW5rJywgICAgICAgICAgICByX2xpbmtdLFxuICBbJ2ltYWdlJywgICAgICAgICAgIHJfaW1hZ2VdLFxuICBbJ2F1dG9saW5rJywgICAgICAgIHJfYXV0b2xpbmtdLFxuICBbJ2h0bWxfaW5saW5lJywgICAgIHJfaHRtbF9pbmxpbmVdLFxuICBbJ2VudGl0eScsICAgICAgICAgIHJfZW50aXR5XVxuXVxuXG4vLyBgcnVsZTJgIHJ1bGVzZXQgd2FzIGNyZWF0ZWQgc3BlY2lmaWNhbGx5IGZvciBlbXBoYXNpcy9zdHJpa2V0aHJvdWdoXG4vLyBwb3N0LXByb2Nlc3NpbmcgYW5kIG1heSBiZSBjaGFuZ2VkIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gRG9uJ3QgdXNlIHRoaXMgZm9yIGFueXRoaW5nIGV4Y2VwdCBwYWlycyAocGx1Z2lucyB3b3JraW5nIHdpdGggYGJhbGFuY2VfcGFpcnNgKS5cbi8vXG5jb25zdCBfcnVsZXMyID0gW1xuICBbJ2JhbGFuY2VfcGFpcnMnLCAgIHJfYmFsYW5jZV9wYWlyc10sXG4gIFsnc3RyaWtldGhyb3VnaCcsICAgcl9zdHJpa2V0aHJvdWdoLnBvc3RQcm9jZXNzXSxcbiAgWydlbXBoYXNpcycsICAgICAgICByX2VtcGhhc2lzLnBvc3RQcm9jZXNzXSxcbiAgLy8gcnVsZXMgZm9yIHBhaXJzIHNlcGFyYXRlICcqKicgaW50byBpdHMgb3duIHRleHQgdG9rZW5zLCB3aGljaCBtYXkgYmUgbGVmdCB1bnVzZWQsXG4gIC8vIHJ1bGUgYmVsb3cgbWVyZ2VzIHVudXNlZCBzZWdtZW50cyBiYWNrIHdpdGggdGhlIHJlc3Qgb2YgdGhlIHRleHRcbiAgWydmcmFnbWVudHNfam9pbicsICByX2ZyYWdtZW50c19qb2luXVxuXVxuXG4vKipcbiAqIG5ldyBQYXJzZXJJbmxpbmUoKVxuICoqL1xuZnVuY3Rpb24gUGFyc2VySW5saW5lICgpIHtcbiAgLyoqXG4gICAqIFBhcnNlcklubGluZSNydWxlciAtPiBSdWxlclxuICAgKlxuICAgKiBbW1J1bGVyXV0gaW5zdGFuY2UuIEtlZXAgY29uZmlndXJhdGlvbiBvZiBpbmxpbmUgcnVsZXMuXG4gICAqKi9cbiAgdGhpcy5ydWxlciA9IG5ldyBSdWxlcigpXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBfcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLnJ1bGVyLnB1c2goX3J1bGVzW2ldWzBdLCBfcnVsZXNbaV1bMV0pXG4gIH1cblxuICAvKipcbiAgICogUGFyc2VySW5saW5lI3J1bGVyMiAtPiBSdWxlclxuICAgKlxuICAgKiBbW1J1bGVyXV0gaW5zdGFuY2UuIFNlY29uZCBydWxlciB1c2VkIGZvciBwb3N0LXByb2Nlc3NpbmdcbiAgICogKGUuZy4gaW4gZW1waGFzaXMtbGlrZSBydWxlcykuXG4gICAqKi9cbiAgdGhpcy5ydWxlcjIgPSBuZXcgUnVsZXIoKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgX3J1bGVzMi5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMucnVsZXIyLnB1c2goX3J1bGVzMltpXVswXSwgX3J1bGVzMltpXVsxXSlcbiAgfVxufVxuXG4vLyBTa2lwIHNpbmdsZSB0b2tlbiBieSBydW5uaW5nIGFsbCBydWxlcyBpbiB2YWxpZGF0aW9uIG1vZGU7XG4vLyByZXR1cm5zIGB0cnVlYCBpZiBhbnkgcnVsZSByZXBvcnRlZCBzdWNjZXNzXG4vL1xuUGFyc2VySW5saW5lLnByb3RvdHlwZS5za2lwVG9rZW4gPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgY29uc3QgcG9zID0gc3RhdGUucG9zXG4gIGNvbnN0IHJ1bGVzID0gdGhpcy5ydWxlci5nZXRSdWxlcygnJylcbiAgY29uc3QgbGVuID0gcnVsZXMubGVuZ3RoXG4gIGNvbnN0IG1heE5lc3RpbmcgPSBzdGF0ZS5tZC5vcHRpb25zLm1heE5lc3RpbmdcbiAgY29uc3QgY2FjaGUgPSBzdGF0ZS5jYWNoZVxuXG4gIGlmICh0eXBlb2YgY2FjaGVbcG9zXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzdGF0ZS5wb3MgPSBjYWNoZVtwb3NdXG4gICAgcmV0dXJuXG4gIH1cblxuICBsZXQgb2sgPSBmYWxzZVxuXG4gIGlmIChzdGF0ZS5sZXZlbCA8IG1heE5lc3RpbmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAvLyBJbmNyZW1lbnQgc3RhdGUubGV2ZWwgYW5kIGRlY3JlbWVudCBpdCBsYXRlciB0byBsaW1pdCByZWN1cnNpb24uXG4gICAgICAvLyBJdCdzIGhhcm1sZXNzIHRvIGRvIGhlcmUsIGJlY2F1c2Ugbm8gdG9rZW5zIGFyZSBjcmVhdGVkLiBCdXQgaWRlYWxseSxcbiAgICAgIC8vIHdlJ2QgbmVlZCBhIHNlcGFyYXRlIHByaXZhdGUgc3RhdGUgdmFyaWFibGUgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgIC8vXG4gICAgICBzdGF0ZS5sZXZlbCsrXG4gICAgICBvayA9IHJ1bGVzW2ldKHN0YXRlLCB0cnVlKVxuICAgICAgc3RhdGUubGV2ZWwtLVxuXG4gICAgICBpZiAob2spIHtcbiAgICAgICAgaWYgKHBvcyA+PSBzdGF0ZS5wb3MpIHsgdGhyb3cgbmV3IEVycm9yKFwiaW5saW5lIHJ1bGUgZGlkbid0IGluY3JlbWVudCBzdGF0ZS5wb3NcIikgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUb28gbXVjaCBuZXN0aW5nLCBqdXN0IHNraXAgdW50aWwgdGhlIGVuZCBvZiB0aGUgcGFyYWdyYXBoLlxuICAgIC8vXG4gICAgLy8gTk9URTogdGhpcyB3aWxsIGNhdXNlIGxpbmtzIHRvIGJlaGF2ZSBpbmNvcnJlY3RseSBpbiB0aGUgZm9sbG93aW5nIGNhc2UsXG4gICAgLy8gICAgICAgd2hlbiBhbiBhbW91bnQgb2YgYFtgIGlzIGV4YWN0bHkgZXF1YWwgdG8gYG1heE5lc3RpbmcgKyAxYDpcbiAgICAvL1xuICAgIC8vICAgICAgIFtbW1tbW1tbW1tbW1tbW1tbW1tbW2Zvb10oKVxuICAgIC8vXG4gICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgd29ya2Fyb3VuZCB3aGVuIENNIHN0YW5kYXJkIHdpbGwgYWxsb3cgbmVzdGVkIGxpbmtzXG4gICAgLy8gICAgICAgKHdlIGNhbiByZXBsYWNlIGl0IGJ5IHByZXZlbnRpbmcgbGlua3MgZnJvbSBiZWluZyBwYXJzZWQgaW5cbiAgICAvLyAgICAgICB2YWxpZGF0aW9uIG1vZGUpXG4gICAgLy9cbiAgICBzdGF0ZS5wb3MgPSBzdGF0ZS5wb3NNYXhcbiAgfVxuXG4gIGlmICghb2spIHsgc3RhdGUucG9zKysgfVxuICBjYWNoZVtwb3NdID0gc3RhdGUucG9zXG59XG5cbi8vIEdlbmVyYXRlIHRva2VucyBmb3IgaW5wdXQgcmFuZ2Vcbi8vXG5QYXJzZXJJbmxpbmUucHJvdG90eXBlLnRva2VuaXplID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIGNvbnN0IHJ1bGVzID0gdGhpcy5ydWxlci5nZXRSdWxlcygnJylcbiAgY29uc3QgbGVuID0gcnVsZXMubGVuZ3RoXG4gIGNvbnN0IGVuZCA9IHN0YXRlLnBvc01heFxuICBjb25zdCBtYXhOZXN0aW5nID0gc3RhdGUubWQub3B0aW9ucy5tYXhOZXN0aW5nXG5cbiAgd2hpbGUgKHN0YXRlLnBvcyA8IGVuZCkge1xuICAgIC8vIFRyeSBhbGwgcG9zc2libGUgcnVsZXMuXG4gICAgLy8gT24gc3VjY2VzcywgcnVsZSBzaG91bGQ6XG4gICAgLy9cbiAgICAvLyAtIHVwZGF0ZSBgc3RhdGUucG9zYFxuICAgIC8vIC0gdXBkYXRlIGBzdGF0ZS50b2tlbnNgXG4gICAgLy8gLSByZXR1cm4gdHJ1ZVxuICAgIGNvbnN0IHByZXZQb3MgPSBzdGF0ZS5wb3NcbiAgICBsZXQgb2sgPSBmYWxzZVxuXG4gICAgaWYgKHN0YXRlLmxldmVsIDwgbWF4TmVzdGluZykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBvayA9IHJ1bGVzW2ldKHN0YXRlLCBmYWxzZSlcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgaWYgKHByZXZQb3MgPj0gc3RhdGUucG9zKSB7IHRocm93IG5ldyBFcnJvcihcImlubGluZSBydWxlIGRpZG4ndCBpbmNyZW1lbnQgc3RhdGUucG9zXCIpIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9rKSB7XG4gICAgICBpZiAoc3RhdGUucG9zID49IGVuZCkgeyBicmVhayB9XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHN0YXRlLnBlbmRpbmcgKz0gc3RhdGUuc3JjW3N0YXRlLnBvcysrXVxuICB9XG5cbiAgaWYgKHN0YXRlLnBlbmRpbmcpIHtcbiAgICBzdGF0ZS5wdXNoUGVuZGluZygpXG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZXJJbmxpbmUucGFyc2Uoc3RyLCBtZCwgZW52LCBvdXRUb2tlbnMpXG4gKlxuICogUHJvY2VzcyBpbnB1dCBzdHJpbmcgYW5kIHB1c2ggaW5saW5lIHRva2VucyBpbnRvIGBvdXRUb2tlbnNgXG4gKiovXG5QYXJzZXJJbmxpbmUucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKHN0ciwgbWQsIGVudiwgb3V0VG9rZW5zKSB7XG4gIGNvbnN0IHN0YXRlID0gbmV3IHRoaXMuU3RhdGUoc3RyLCBtZCwgZW52LCBvdXRUb2tlbnMpXG5cbiAgdGhpcy50b2tlbml6ZShzdGF0ZSlcblxuICBjb25zdCBydWxlcyA9IHRoaXMucnVsZXIyLmdldFJ1bGVzKCcnKVxuICBjb25zdCBsZW4gPSBydWxlcy5sZW5ndGhcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgcnVsZXNbaV0oc3RhdGUpXG4gIH1cbn1cblxuUGFyc2VySW5saW5lLnByb3RvdHlwZS5TdGF0ZSA9IFN0YXRlSW5saW5lXG5cbmV4cG9ydCBkZWZhdWx0IFBhcnNlcklubGluZVxuIiwiLy8gUHJvY2Vlc3MgJ1xcbidcblxuaW1wb3J0IHsgaXNTcGFjZSB9IGZyb20gJy4uL2NvbW1vbi91dGlscy5tanMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5ld2xpbmUgKHN0YXRlLCBzaWxlbnQpIHtcbiAgbGV0IHBvcyA9IHN0YXRlLnBvc1xuXG4gIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDBBLyogXFxuICovKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgY29uc3QgcG1heCA9IHN0YXRlLnBlbmRpbmcubGVuZ3RoIC0gMVxuICBjb25zdCBtYXggPSBzdGF0ZS5wb3NNYXhcblxuICAvLyAnICBcXG4nIC0+IGhhcmRicmVha1xuICAvLyBMb29rdXAgaW4gcGVuZGluZyBjaGFycyBpcyBiYWQgcHJhY3RpY2UhIERvbid0IGNvcHkgdG8gb3RoZXIgcnVsZXMhXG4gIC8vIFBlbmRpbmcgc3RyaW5nIGlzIHN0b3JlZCBpbiBjb25jYXQgbW9kZSwgaW5kZXhlZCBsb29rdXBzIHdpbGwgY2F1c2VcbiAgLy8gY29udmVydGlvbiB0byBmbGF0IG1vZGUuXG4gIGlmICghc2lsZW50KSB7XG4gICAgaWYgKHBtYXggPj0gMCAmJiBzdGF0ZS5wZW5kaW5nLmNoYXJDb2RlQXQocG1heCkgPT09IDB4MjApIHtcbiAgICAgIGlmIChwbWF4ID49IDEgJiYgc3RhdGUucGVuZGluZy5jaGFyQ29kZUF0KHBtYXggLSAxKSA9PT0gMHgyMCkge1xuICAgICAgICAvLyBGaW5kIHdoaXRlc3BhY2VzIHRhaWwgb2YgcGVuZGluZyBjaGFycy5cbiAgICAgICAgbGV0IHdzID0gcG1heCAtIDFcbiAgICAgICAgd2hpbGUgKHdzID49IDEgJiYgc3RhdGUucGVuZGluZy5jaGFyQ29kZUF0KHdzIC0gMSkgPT09IDB4MjApIHdzLS1cblxuICAgICAgICBzdGF0ZS5wZW5kaW5nID0gc3RhdGUucGVuZGluZy5zbGljZSgwLCB3cylcbiAgICAgICAgc3RhdGUucHVzaCgnaGFyZGJyZWFrJywgJ2JyJywgMClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnBlbmRpbmcgPSBzdGF0ZS5wZW5kaW5nLnNsaWNlKDAsIC0xKVxuICAgICAgICBzdGF0ZS5wdXNoKCdzb2Z0YnJlYWsnLCAnYnInLCAwKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wdXNoKCdzb2Z0YnJlYWsnLCAnYnInLCAwKVxuICAgIH1cbiAgfVxuXG4gIHBvcysrXG5cbiAgLy8gc2tpcCBoZWFkaW5nIHNwYWNlcyBmb3IgbmV4dCBsaW5lXG4gIHdoaWxlIChwb3MgPCBtYXggJiYgaXNTcGFjZShzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpKSkgeyBwb3MrKyB9XG5cbiAgc3RhdGUucG9zID0gcG9zXG4gIHJldHVybiB0cnVlXG59XG4iLCIvLyBQYXJzZSBiYWNrdGlja3NcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFja3RpY2sgKHN0YXRlLCBzaWxlbnQpIHtcbiAgbGV0IHBvcyA9IHN0YXRlLnBvc1xuICBjb25zdCBjaCA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcylcblxuICBpZiAoY2ggIT09IDB4NjAvKiBgICovKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgY29uc3Qgc3RhcnQgPSBwb3NcbiAgcG9zKytcbiAgY29uc3QgbWF4ID0gc3RhdGUucG9zTWF4XG5cbiAgLy8gc2NhbiBtYXJrZXIgbGVuZ3RoXG4gIHdoaWxlIChwb3MgPCBtYXggJiYgc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSA9PT0gMHg2MC8qIGAgKi8pIHsgcG9zKysgfVxuXG4gIGNvbnN0IG1hcmtlciA9IHN0YXRlLnNyYy5zbGljZShzdGFydCwgcG9zKVxuICBjb25zdCBvcGVuZXJMZW5ndGggPSBtYXJrZXIubGVuZ3RoXG5cbiAgaWYgKHN0YXRlLmJhY2t0aWNrc1NjYW5uZWQgJiYgKHN0YXRlLmJhY2t0aWNrc1tvcGVuZXJMZW5ndGhdIHx8IDApIDw9IHN0YXJ0KSB7XG4gICAgaWYgKCFzaWxlbnQpIHN0YXRlLnBlbmRpbmcgKz0gbWFya2VyXG4gICAgc3RhdGUucG9zICs9IG9wZW5lckxlbmd0aFxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBsZXQgbWF0Y2hFbmQgPSBwb3NcbiAgbGV0IG1hdGNoU3RhcnRcblxuICAvLyBOb3RoaW5nIGZvdW5kIGluIHRoZSBjYWNoZSwgc2NhbiB1bnRpbCB0aGUgZW5kIG9mIHRoZSBsaW5lIChvciB1bnRpbCBtYXJrZXIgaXMgZm91bmQpXG4gIHdoaWxlICgobWF0Y2hTdGFydCA9IHN0YXRlLnNyYy5pbmRleE9mKCdgJywgbWF0Y2hFbmQpKSAhPT0gLTEpIHtcbiAgICBtYXRjaEVuZCA9IG1hdGNoU3RhcnQgKyAxXG5cbiAgICAvLyBzY2FuIG1hcmtlciBsZW5ndGhcbiAgICB3aGlsZSAobWF0Y2hFbmQgPCBtYXggJiYgc3RhdGUuc3JjLmNoYXJDb2RlQXQobWF0Y2hFbmQpID09PSAweDYwLyogYCAqLykgeyBtYXRjaEVuZCsrIH1cblxuICAgIGNvbnN0IGNsb3Nlckxlbmd0aCA9IG1hdGNoRW5kIC0gbWF0Y2hTdGFydFxuXG4gICAgaWYgKGNsb3Nlckxlbmd0aCA9PT0gb3BlbmVyTGVuZ3RoKSB7XG4gICAgICAvLyBGb3VuZCBtYXRjaGluZyBjbG9zZXIgbGVuZ3RoLlxuICAgICAgaWYgKCFzaWxlbnQpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBzdGF0ZS5wdXNoKCdjb2RlX2lubGluZScsICdjb2RlJywgMClcbiAgICAgICAgdG9rZW4ubWFya3VwID0gbWFya2VyXG4gICAgICAgIHRva2VuLmNvbnRlbnQgPSBzdGF0ZS5zcmMuc2xpY2UocG9zLCBtYXRjaFN0YXJ0KVxuICAgICAgICAgIC5yZXBsYWNlKC9cXG4vZywgJyAnKVxuICAgICAgICAgIC5yZXBsYWNlKC9eICguKykgJC8sICckMScpXG4gICAgICB9XG4gICAgICBzdGF0ZS5wb3MgPSBtYXRjaEVuZFxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvLyBTb21lIGRpZmZlcmVudCBsZW5ndGggZm91bmQsIHB1dCBpdCBpbiBjYWNoZSBhcyB1cHBlciBsaW1pdCBvZiB3aGVyZSBjbG9zZXIgY2FuIGJlIGZvdW5kXG4gICAgc3RhdGUuYmFja3RpY2tzW2Nsb3Nlckxlbmd0aF0gPSBtYXRjaFN0YXJ0XG4gIH1cblxuICAvLyBTY2FubmVkIHRocm91Z2ggdGhlIGVuZCwgZGlkbid0IGZpbmQgYW55dGhpbmdcbiAgc3RhdGUuYmFja3RpY2tzU2Nhbm5lZCA9IHRydWVcblxuICBpZiAoIXNpbGVudCkgc3RhdGUucGVuZGluZyArPSBtYXJrZXJcbiAgc3RhdGUucG9zICs9IG9wZW5lckxlbmd0aFxuICByZXR1cm4gdHJ1ZVxufVxuIiwiLy8gUHJvY2VzcyBbbGlua10oPHRvPiBcInN0dWZmXCIpXG5cbmltcG9ydCB7IG5vcm1hbGl6ZVJlZmVyZW5jZSwgaXNTcGFjZSB9IGZyb20gJy4uL2NvbW1vbi91dGlscy5tanMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmsgKHN0YXRlLCBzaWxlbnQpIHtcbiAgbGV0IGNvZGUsIGxhYmVsLCByZXMsIHJlZlxuICBsZXQgaHJlZiA9ICcnXG4gIGxldCB0aXRsZSA9ICcnXG4gIGxldCBzdGFydCA9IHN0YXRlLnBvc1xuICBsZXQgcGFyc2VSZWZlcmVuY2UgPSB0cnVlXG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHN0YXRlLnBvcykgIT09IDB4NUIvKiBbICovKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgY29uc3Qgb2xkUG9zID0gc3RhdGUucG9zXG4gIGNvbnN0IG1heCA9IHN0YXRlLnBvc01heFxuICBjb25zdCBsYWJlbFN0YXJ0ID0gc3RhdGUucG9zICsgMVxuICBjb25zdCBsYWJlbEVuZCA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rTGFiZWwoc3RhdGUsIHN0YXRlLnBvcywgdHJ1ZSlcblxuICAvLyBwYXJzZXIgZmFpbGVkIHRvIGZpbmQgJ10nLCBzbyBpdCdzIG5vdCBhIHZhbGlkIGxpbmtcbiAgaWYgKGxhYmVsRW5kIDwgMCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGxldCBwb3MgPSBsYWJlbEVuZCArIDFcbiAgaWYgKHBvcyA8IG1heCAmJiBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpID09PSAweDI4LyogKCAqLykge1xuICAgIC8vXG4gICAgLy8gSW5saW5lIGxpbmtcbiAgICAvL1xuXG4gICAgLy8gbWlnaHQgaGF2ZSBmb3VuZCBhIHZhbGlkIHNob3J0Y3V0IGxpbmssIGRpc2FibGUgcmVmZXJlbmNlIHBhcnNpbmdcbiAgICBwYXJzZVJlZmVyZW5jZSA9IGZhbHNlXG5cbiAgICAvLyBbbGlua10oICA8aHJlZj4gIFwidGl0bGVcIiAgKVxuICAgIC8vICAgICAgICBeXiBza2lwcGluZyB0aGVzZSBzcGFjZXNcbiAgICBwb3MrK1xuICAgIGZvciAoOyBwb3MgPCBtYXg7IHBvcysrKSB7XG4gICAgICBjb2RlID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKVxuICAgICAgaWYgKCFpc1NwYWNlKGNvZGUpICYmIGNvZGUgIT09IDB4MEEpIHsgYnJlYWsgfVxuICAgIH1cbiAgICBpZiAocG9zID49IG1heCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgLy8gW2xpbmtdKCAgPGhyZWY+ICBcInRpdGxlXCIgIClcbiAgICAvLyAgICAgICAgICBeXl5eXl4gcGFyc2luZyBsaW5rIGRlc3RpbmF0aW9uXG4gICAgc3RhcnQgPSBwb3NcbiAgICByZXMgPSBzdGF0ZS5tZC5oZWxwZXJzLnBhcnNlTGlua0Rlc3RpbmF0aW9uKHN0YXRlLnNyYywgcG9zLCBzdGF0ZS5wb3NNYXgpXG4gICAgaWYgKHJlcy5vaykge1xuICAgICAgaHJlZiA9IHN0YXRlLm1kLm5vcm1hbGl6ZUxpbmsocmVzLnN0cilcbiAgICAgIGlmIChzdGF0ZS5tZC52YWxpZGF0ZUxpbmsoaHJlZikpIHtcbiAgICAgICAgcG9zID0gcmVzLnBvc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaHJlZiA9ICcnXG4gICAgICB9XG5cbiAgICAgIC8vIFtsaW5rXSggIDxocmVmPiAgXCJ0aXRsZVwiICApXG4gICAgICAvLyAgICAgICAgICAgICAgICBeXiBza2lwcGluZyB0aGVzZSBzcGFjZXNcbiAgICAgIHN0YXJ0ID0gcG9zXG4gICAgICBmb3IgKDsgcG9zIDwgbWF4OyBwb3MrKykge1xuICAgICAgICBjb2RlID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKVxuICAgICAgICBpZiAoIWlzU3BhY2UoY29kZSkgJiYgY29kZSAhPT0gMHgwQSkgeyBicmVhayB9XG4gICAgICB9XG5cbiAgICAgIC8vIFtsaW5rXSggIDxocmVmPiAgXCJ0aXRsZVwiICApXG4gICAgICAvLyAgICAgICAgICAgICAgICAgIF5eXl5eXl4gcGFyc2luZyBsaW5rIHRpdGxlXG4gICAgICByZXMgPSBzdGF0ZS5tZC5oZWxwZXJzLnBhcnNlTGlua1RpdGxlKHN0YXRlLnNyYywgcG9zLCBzdGF0ZS5wb3NNYXgpXG4gICAgICBpZiAocG9zIDwgbWF4ICYmIHN0YXJ0ICE9PSBwb3MgJiYgcmVzLm9rKSB7XG4gICAgICAgIHRpdGxlID0gcmVzLnN0clxuICAgICAgICBwb3MgPSByZXMucG9zXG5cbiAgICAgICAgLy8gW2xpbmtdKCAgPGhyZWY+ICBcInRpdGxlXCIgIClcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgXl4gc2tpcHBpbmcgdGhlc2Ugc3BhY2VzXG4gICAgICAgIGZvciAoOyBwb3MgPCBtYXg7IHBvcysrKSB7XG4gICAgICAgICAgY29kZSA9IHN0YXRlLnNyYy5jaGFyQ29kZUF0KHBvcylcbiAgICAgICAgICBpZiAoIWlzU3BhY2UoY29kZSkgJiYgY29kZSAhPT0gMHgwQSkgeyBicmVhayB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zID49IG1heCB8fCBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDI5LyogKSAqLykge1xuICAgICAgLy8gcGFyc2luZyBhIHZhbGlkIHNob3J0Y3V0IGxpbmsgZmFpbGVkLCBmYWxsYmFjayB0byByZWZlcmVuY2VcbiAgICAgIHBhcnNlUmVmZXJlbmNlID0gdHJ1ZVxuICAgIH1cbiAgICBwb3MrK1xuICB9XG5cbiAgaWYgKHBhcnNlUmVmZXJlbmNlKSB7XG4gICAgLy9cbiAgICAvLyBMaW5rIHJlZmVyZW5jZVxuICAgIC8vXG4gICAgaWYgKHR5cGVvZiBzdGF0ZS5lbnYucmVmZXJlbmNlcyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlIH1cblxuICAgIGlmIChwb3MgPCBtYXggJiYgc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSA9PT0gMHg1Qi8qIFsgKi8pIHtcbiAgICAgIHN0YXJ0ID0gcG9zICsgMVxuICAgICAgcG9zID0gc3RhdGUubWQuaGVscGVycy5wYXJzZUxpbmtMYWJlbChzdGF0ZSwgcG9zKVxuICAgICAgaWYgKHBvcyA+PSAwKSB7XG4gICAgICAgIGxhYmVsID0gc3RhdGUuc3JjLnNsaWNlKHN0YXJ0LCBwb3MrKylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvcyA9IGxhYmVsRW5kICsgMVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwb3MgPSBsYWJlbEVuZCArIDFcbiAgICB9XG5cbiAgICAvLyBjb3ZlcnMgbGFiZWwgPT09ICcnIGFuZCBsYWJlbCA9PT0gdW5kZWZpbmVkXG4gICAgLy8gKGNvbGxhcHNlZCByZWZlcmVuY2UgbGluayBhbmQgc2hvcnRjdXQgcmVmZXJlbmNlIGxpbmsgcmVzcGVjdGl2ZWx5KVxuICAgIGlmICghbGFiZWwpIHsgbGFiZWwgPSBzdGF0ZS5zcmMuc2xpY2UobGFiZWxTdGFydCwgbGFiZWxFbmQpIH1cblxuICAgIHJlZiA9IHN0YXRlLmVudi5yZWZlcmVuY2VzW25vcm1hbGl6ZVJlZmVyZW5jZShsYWJlbCldXG4gICAgaWYgKCFyZWYpIHtcbiAgICAgIHN0YXRlLnBvcyA9IG9sZFBvc1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGhyZWYgPSByZWYuaHJlZlxuICAgIHRpdGxlID0gcmVmLnRpdGxlXG4gIH1cblxuICAvL1xuICAvLyBXZSBmb3VuZCB0aGUgZW5kIG9mIHRoZSBsaW5rLCBhbmQga25vdyBmb3IgYSBmYWN0IGl0J3MgYSB2YWxpZCBsaW5rO1xuICAvLyBzbyBhbGwgdGhhdCdzIGxlZnQgdG8gZG8gaXMgdG8gY2FsbCB0b2tlbml6ZXIuXG4gIC8vXG4gIGlmICghc2lsZW50KSB7XG4gICAgc3RhdGUucG9zID0gbGFiZWxTdGFydFxuICAgIHN0YXRlLnBvc01heCA9IGxhYmVsRW5kXG5cbiAgICBjb25zdCB0b2tlbl9vID0gc3RhdGUucHVzaCgnbGlua19vcGVuJywgJ2EnLCAxKVxuICAgIGNvbnN0IGF0dHJzID0gW1snaHJlZicsIGhyZWZdXVxuICAgIHRva2VuX28uYXR0cnMgID0gYXR0cnNcbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIGF0dHJzLnB1c2goWyd0aXRsZScsIHRpdGxlXSlcbiAgICB9XG5cbiAgICBzdGF0ZS5saW5rTGV2ZWwrK1xuICAgIHN0YXRlLm1kLmlubGluZS50b2tlbml6ZShzdGF0ZSlcbiAgICBzdGF0ZS5saW5rTGV2ZWwtLVxuXG4gICAgc3RhdGUucHVzaCgnbGlua19jbG9zZScsICdhJywgLTEpXG4gIH1cblxuICBzdGF0ZS5wb3MgPSBwb3NcbiAgc3RhdGUucG9zTWF4ID0gbWF4XG4gIHJldHVybiB0cnVlXG59XG4iLCIvLyBQcm9jZXNzICFbaW1hZ2VdKDxzcmM+IFwidGl0bGVcIilcblxuaW1wb3J0IHsgbm9ybWFsaXplUmVmZXJlbmNlLCBpc1NwYWNlIH0gZnJvbSAnLi4vY29tbW9uL3V0aWxzLm1qcydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW1hZ2UgKHN0YXRlLCBzaWxlbnQpIHtcbiAgbGV0IGNvZGUsIGNvbnRlbnQsIGxhYmVsLCBwb3MsIHJlZiwgcmVzLCB0aXRsZSwgc3RhcnRcbiAgbGV0IGhyZWYgPSAnJ1xuICBjb25zdCBvbGRQb3MgPSBzdGF0ZS5wb3NcbiAgY29uc3QgbWF4ID0gc3RhdGUucG9zTWF4XG5cbiAgaWYgKHN0YXRlLnNyYy5jaGFyQ29kZUF0KHN0YXRlLnBvcykgIT09IDB4MjEvKiAhICovKSB7IHJldHVybiBmYWxzZSB9XG4gIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChzdGF0ZS5wb3MgKyAxKSAhPT0gMHg1Qi8qIFsgKi8pIHsgcmV0dXJuIGZhbHNlIH1cblxuICBjb25zdCBsYWJlbFN0YXJ0ID0gc3RhdGUucG9zICsgMlxuICBjb25zdCBsYWJlbEVuZCA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rTGFiZWwoc3RhdGUsIHN0YXRlLnBvcyArIDEsIGZhbHNlKVxuXG4gIC8vIHBhcnNlciBmYWlsZWQgdG8gZmluZCAnXScsIHNvIGl0J3Mgbm90IGEgdmFsaWQgbGlua1xuICBpZiAobGFiZWxFbmQgPCAwKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgcG9zID0gbGFiZWxFbmQgKyAxXG4gIGlmIChwb3MgPCBtYXggJiYgc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKSA9PT0gMHgyOC8qICggKi8pIHtcbiAgICAvL1xuICAgIC8vIElubGluZSBsaW5rXG4gICAgLy9cblxuICAgIC8vIFtsaW5rXSggIDxocmVmPiAgXCJ0aXRsZVwiICApXG4gICAgLy8gICAgICAgIF5eIHNraXBwaW5nIHRoZXNlIHNwYWNlc1xuICAgIHBvcysrXG4gICAgZm9yICg7IHBvcyA8IG1heDsgcG9zKyspIHtcbiAgICAgIGNvZGUgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpXG4gICAgICBpZiAoIWlzU3BhY2UoY29kZSkgJiYgY29kZSAhPT0gMHgwQSkgeyBicmVhayB9XG4gICAgfVxuICAgIGlmIChwb3MgPj0gbWF4KSB7IHJldHVybiBmYWxzZSB9XG5cbiAgICAvLyBbbGlua10oICA8aHJlZj4gIFwidGl0bGVcIiAgKVxuICAgIC8vICAgICAgICAgIF5eXl5eXiBwYXJzaW5nIGxpbmsgZGVzdGluYXRpb25cbiAgICBzdGFydCA9IHBvc1xuICAgIHJlcyA9IHN0YXRlLm1kLmhlbHBlcnMucGFyc2VMaW5rRGVzdGluYXRpb24oc3RhdGUuc3JjLCBwb3MsIHN0YXRlLnBvc01heClcbiAgICBpZiAocmVzLm9rKSB7XG4gICAgICBocmVmID0gc3RhdGUubWQubm9ybWFsaXplTGluayhyZXMuc3RyKVxuICAgICAgaWYgKHN0YXRlLm1kLnZhbGlkYXRlTGluayhocmVmKSkge1xuICAgICAgICBwb3MgPSByZXMucG9zXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBocmVmID0gJydcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBbbGlua10oICA8aHJlZj4gIFwidGl0bGVcIiAgKVxuICAgIC8vICAgICAgICAgICAgICAgIF5eIHNraXBwaW5nIHRoZXNlIHNwYWNlc1xuICAgIHN0YXJ0ID0gcG9zXG4gICAgZm9yICg7IHBvcyA8IG1heDsgcG9zKyspIHtcbiAgICAgIGNvZGUgPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpXG4gICAgICBpZiAoIWlzU3BhY2UoY29kZSkgJiYgY29kZSAhPT0gMHgwQSkgeyBicmVhayB9XG4gICAgfVxuXG4gICAgLy8gW2xpbmtdKCAgPGhyZWY+ICBcInRpdGxlXCIgIClcbiAgICAvLyAgICAgICAgICAgICAgICAgIF5eXl5eXl4gcGFyc2luZyBsaW5rIHRpdGxlXG4gICAgcmVzID0gc3RhdGUubWQuaGVscGVycy5wYXJzZUxpbmtUaXRsZShzdGF0ZS5zcmMsIHBvcywgc3RhdGUucG9zTWF4KVxuICAgIGlmIChwb3MgPCBtYXggJiYgc3RhcnQgIT09IHBvcyAmJiByZXMub2spIHtcbiAgICAgIHRpdGxlID0gcmVzLnN0clxuICAgICAgcG9zID0gcmVzLnBvc1xuXG4gICAgICAvLyBbbGlua10oICA8aHJlZj4gIFwidGl0bGVcIiAgKVxuICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgXl4gc2tpcHBpbmcgdGhlc2Ugc3BhY2VzXG4gICAgICBmb3IgKDsgcG9zIDwgbWF4OyBwb3MrKykge1xuICAgICAgICBjb2RlID0gc3RhdGUuc3JjLmNoYXJDb2RlQXQocG9zKVxuICAgICAgICBpZiAoIWlzU3BhY2UoY29kZSkgJiYgY29kZSAhPT0gMHgwQSkgeyBicmVhayB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlID0gJydcbiAgICB9XG5cbiAgICBpZiAocG9zID49IG1heCB8fCBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDI5LyogKSAqLykge1xuICAgICAgc3RhdGUucG9zID0gb2xkUG9zXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgcG9zKytcbiAgfSBlbHNlIHtcbiAgICAvL1xuICAgIC8vIExpbmsgcmVmZXJlbmNlXG4gICAgLy9cbiAgICBpZiAodHlwZW9mIHN0YXRlLmVudi5yZWZlcmVuY2VzID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgaWYgKHBvcyA8IG1heCAmJiBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpID09PSAweDVCLyogWyAqLykge1xuICAgICAgc3RhcnQgPSBwb3MgKyAxXG4gICAgICBwb3MgPSBzdGF0ZS5tZC5oZWxwZXJzLnBhcnNlTGlua0xhYmVsKHN0YXRlLCBwb3MpXG4gICAgICBpZiAocG9zID49IDApIHtcbiAgICAgICAgbGFiZWwgPSBzdGF0ZS5zcmMuc2xpY2Uoc3RhcnQsIHBvcysrKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9zID0gbGFiZWxFbmQgKyAxXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvcyA9IGxhYmVsRW5kICsgMVxuICAgIH1cblxuICAgIC8vIGNvdmVycyBsYWJlbCA9PT0gJycgYW5kIGxhYmVsID09PSB1bmRlZmluZWRcbiAgICAvLyAoY29sbGFwc2VkIHJlZmVyZW5jZSBsaW5rIGFuZCBzaG9ydGN1dCByZWZlcmVuY2UgbGluayByZXNwZWN0aXZlbHkpXG4gICAgaWYgKCFsYWJlbCkgeyBsYWJlbCA9IHN0YXRlLnNyYy5zbGljZShsYWJlbFN0YXJ0LCBsYWJlbEVuZCkgfVxuXG4gICAgcmVmID0gc3RhdGUuZW52LnJlZmVyZW5jZXNbbm9ybWFsaXplUmVmZXJlbmNlKGxhYmVsKV1cbiAgICBpZiAoIXJlZikge1xuICAgICAgc3RhdGUucG9zID0gb2xkUG9zXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaHJlZiA9IHJlZi5ocmVmXG4gICAgdGl0bGUgPSByZWYudGl0bGVcbiAgfVxuXG4gIC8vXG4gIC8vIFdlIGZvdW5kIHRoZSBlbmQgb2YgdGhlIGxpbmssIGFuZCBrbm93IGZvciBhIGZhY3QgaXQncyBhIHZhbGlkIGxpbms7XG4gIC8vIHNvIGFsbCB0aGF0J3MgbGVmdCB0byBkbyBpcyB0byBjYWxsIHRva2VuaXplci5cbiAgLy9cbiAgaWYgKCFzaWxlbnQpIHtcbiAgICBjb250ZW50ID0gc3RhdGUuc3JjLnNsaWNlKGxhYmVsU3RhcnQsIGxhYmVsRW5kKVxuXG4gICAgY29uc3QgdG9rZW5zID0gW11cbiAgICBzdGF0ZS5tZC5pbmxpbmUucGFyc2UoXG4gICAgICBjb250ZW50LFxuICAgICAgc3RhdGUubWQsXG4gICAgICBzdGF0ZS5lbnYsXG4gICAgICB0b2tlbnNcbiAgICApXG5cbiAgICBjb25zdCB0b2tlbiA9IHN0YXRlLnB1c2goJ2ltYWdlJywgJ2ltZycsIDApXG4gICAgY29uc3QgYXR0cnMgPSBbWydzcmMnLCBocmVmXSwgWydhbHQnLCAnJ11dXG4gICAgdG9rZW4uYXR0cnMgPSBhdHRyc1xuICAgIHRva2VuLmNoaWxkcmVuID0gdG9rZW5zXG4gICAgdG9rZW4uY29udGVudCA9IGNvbnRlbnRcblxuICAgIGlmICh0aXRsZSkge1xuICAgICAgYXR0cnMucHVzaChbJ3RpdGxlJywgdGl0bGVdKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRlLnBvcyA9IHBvc1xuICBzdGF0ZS5wb3NNYXggPSBtYXhcbiAgcmV0dXJuIHRydWVcbn1cbiIsIi8vIFByb2Nlc3MgaHRtbCB0YWdzXG5cbmltcG9ydCB7IEhUTUxfVEFHX1JFIH0gZnJvbSAnLi4vY29tbW9uL2h0bWxfcmUubWpzJ1xuXG5mdW5jdGlvbiBpc0xpbmtPcGVuIChzdHIpIHtcbiAgcmV0dXJuIC9ePGFbPlxcc10vaS50ZXN0KHN0cilcbn1cbmZ1bmN0aW9uIGlzTGlua0Nsb3NlIChzdHIpIHtcbiAgcmV0dXJuIC9ePFxcL2FcXHMqPi9pLnRlc3Qoc3RyKVxufVxuXG5mdW5jdGlvbiBpc0xldHRlciAoY2gpIHtcbiAgLyogZXNsaW50IG5vLWJpdHdpc2U6MCAqL1xuICBjb25zdCBsYyA9IGNoIHwgMHgyMCAvLyB0byBsb3dlciBjYXNlXG4gIHJldHVybiAobGMgPj0gMHg2MS8qIGEgKi8pICYmIChsYyA8PSAweDdhLyogeiAqLylcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHRtbF9pbmxpbmUgKHN0YXRlLCBzaWxlbnQpIHtcbiAgaWYgKCFzdGF0ZS5tZC5vcHRpb25zLmh0bWwpIHsgcmV0dXJuIGZhbHNlIH1cblxuICAvLyBDaGVjayBzdGFydFxuICBjb25zdCBtYXggPSBzdGF0ZS5wb3NNYXhcbiAgY29uc3QgcG9zID0gc3RhdGUucG9zXG4gIGlmIChzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MpICE9PSAweDNDLyogPCAqLyB8fFxuICAgICAgcG9zICsgMiA+PSBtYXgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFF1aWNrIGZhaWwgb24gc2Vjb25kIGNoYXJcbiAgY29uc3QgY2ggPSBzdGF0ZS5zcmMuY2hhckNvZGVBdChwb3MgKyAxKVxuICBpZiAoY2ggIT09IDB4MjEvKiAhICovICYmXG4gICAgICBjaCAhPT0gMHgzRi8qID8gKi8gJiZcbiAgICAgIGNoICE9PSAweDJGLyogLyAqLyAmJlxuICAgICAgIWlzTGV0dGVyKGNoKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgY29uc3QgbWF0Y2ggPSBzdGF0ZS5zcmMuc2xpY2UocG9zKS5tYXRjaChIVE1MX1RBR19SRSlcbiAgaWYgKCFtYXRjaCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGlmICghc2lsZW50KSB7XG4gICAgY29uc3QgdG9rZW4gPSBzdGF0ZS5wdXNoKCdodG1sX2lubGluZScsICcnLCAwKVxuICAgIHRva2VuLmNvbnRlbnQgPSBtYXRjaFswXVxuXG4gICAgaWYgKGlzTGlua09wZW4odG9rZW4uY29udGVudCkpICBzdGF0ZS5saW5rTGV2ZWwrK1xuICAgIGlmIChpc0xpbmtDbG9zZSh0b2tlbi5jb250ZW50KSkgc3RhdGUubGlua0xldmVsLS1cbiAgfVxuICBzdGF0ZS5wb3MgKz0gbWF0Y2hbMF0ubGVuZ3RoXG4gIHJldHVybiB0cnVlXG59XG4iLCIvLyBDbGVhbiB1cCB0b2tlbnMgYWZ0ZXIgZW1waGFzaXMgYW5kIHN0cmlrZXRocm91Z2ggcG9zdHByb2Nlc3Npbmc6XG4vLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzIGludG8gb25lIGFuZCByZS1jYWxjdWxhdGUgYWxsIHRva2VuIGxldmVsc1xuLy9cbi8vIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2UgaW5pdGlhbGx5IGVtcGhhc2lzIGRlbGltaXRlciBtYXJrZXJzICgqLCBfLCB+KVxuLy8gYXJlIHRyZWF0ZWQgYXMgdGhlaXIgb3duIHNlcGFyYXRlIHRleHQgdG9rZW5zLiBUaGVuIGVtcGhhc2lzIHJ1bGUgZWl0aGVyXG4vLyBsZWF2ZXMgdGhlbSBhcyB0ZXh0IChuZWVkZWQgdG8gbWVyZ2Ugd2l0aCBhZGphY2VudCB0ZXh0KSBvciB0dXJucyB0aGVtXG4vLyBpbnRvIG9wZW5pbmcvY2xvc2luZyB0YWdzICh3aGljaCBtZXNzZXMgdXAgbGV2ZWxzIGluc2lkZSkuXG4vL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmcmFnbWVudHNfam9pbiAoc3RhdGUpIHtcbiAgbGV0IGN1cnIsIGxhc3RcbiAgbGV0IGxldmVsID0gMFxuICBjb25zdCB0b2tlbnMgPSBzdGF0ZS50b2tlbnNcbiAgY29uc3QgbWF4ID0gc3RhdGUudG9rZW5zLmxlbmd0aFxuXG4gIGZvciAoY3VyciA9IGxhc3QgPSAwOyBjdXJyIDwgbWF4OyBjdXJyKyspIHtcbiAgICAvLyByZS1jYWxjdWxhdGUgbGV2ZWxzIGFmdGVyIGVtcGhhc2lzL3N0cmlrZXRocm91Z2ggdHVybnMgc29tZSB0ZXh0IG5vZGVzXG4gICAgLy8gaW50byBvcGVuaW5nL2Nsb3NpbmcgdGFnc1xuICAgIGlmICh0b2tlbnNbY3Vycl0ubmVzdGluZyA8IDApIGxldmVsLS0gLy8gY2xvc2luZyB0YWdcbiAgICB0b2tlbnNbY3Vycl0ubGV2ZWwgPSBsZXZlbFxuICAgIGlmICh0b2tlbnNbY3Vycl0ubmVzdGluZyA+IDApIGxldmVsKysgLy8gb3BlbmluZyB0YWdcblxuICAgIGlmICh0b2tlbnNbY3Vycl0udHlwZSA9PT0gJ3RleHQnICYmXG4gICAgICAgIGN1cnIgKyAxIDwgbWF4ICYmXG4gICAgICAgIHRva2Vuc1tjdXJyICsgMV0udHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAvLyBjb2xsYXBzZSB0d28gYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgdG9rZW5zW2N1cnIgKyAxXS5jb250ZW50ID0gdG9rZW5zW2N1cnJdLmNvbnRlbnQgKyB0b2tlbnNbY3VyciArIDFdLmNvbnRlbnRcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGN1cnIgIT09IGxhc3QpIHsgdG9rZW5zW2xhc3RdID0gdG9rZW5zW2N1cnJdIH1cblxuICAgICAgbGFzdCsrXG4gICAgfVxuICB9XG5cbiAgaWYgKGN1cnIgIT09IGxhc3QpIHtcbiAgICB0b2tlbnMubGVuZ3RoID0gbGFzdFxuICB9XG59XG4iLCJpbXBvcnQgcmVGYWN0b3J5IGZyb20gJy4vbGliL3JlLm1qcydcblxuLy9cbi8vIEhlbHBlcnNcbi8vXG5cbi8vIE1lcmdlIG9iamVjdHNcbi8vXG5mdW5jdGlvbiBhc3NpZ24gKG9iaiAvKiBmcm9tMSwgZnJvbTIsIGZyb20zLCAuLi4gKi8pIHtcbiAgY29uc3Qgc291cmNlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcblxuICBzb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgIGlmICghc291cmNlKSB7IHJldHVybiB9XG5cbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgb2JqW2tleV0gPSBzb3VyY2Vba2V5XVxuICAgIH0pXG4gIH0pXG5cbiAgcmV0dXJuIG9ialxufVxuXG5mdW5jdGlvbiBfY2xhc3MgKG9iaikgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgfVxuZnVuY3Rpb24gaXNTdHJpbmcgKG9iaikgeyByZXR1cm4gX2NsYXNzKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nIH1cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHsgcmV0dXJuIF9jbGFzcyhvYmopID09PSAnW29iamVjdCBPYmplY3RdJyB9XG5mdW5jdGlvbiBpc1JlZ0V4cCAob2JqKSB7IHJldHVybiBfY2xhc3Mob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXScgfVxuZnVuY3Rpb24gaXNGdW5jdGlvbiAob2JqKSB7IHJldHVybiBfY2xhc3Mob2JqKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJyB9XG5cbmZ1bmN0aW9uIGVzY2FwZVJFIChzdHIpIHsgcmV0dXJuIHN0ci5yZXBsYWNlKC9bLj8qK14kW1xcXVxcXFwoKXt9fC1dL2csICdcXFxcJCYnKSB9XG5cbi8vXG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBmdXp6eUxpbms6IHRydWUsXG4gIGZ1enp5RW1haWw6IHRydWUsXG4gIGZ1enp5SVA6IGZhbHNlXG59XG5cbmZ1bmN0aW9uIGlzT3B0aW9uc09iaiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmogfHwge30pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAqL1xuICAgIHJldHVybiBhY2MgfHwgZGVmYXVsdE9wdGlvbnMuaGFzT3duUHJvcGVydHkoaylcbiAgfSwgZmFsc2UpXG59XG5cbmNvbnN0IGRlZmF1bHRTY2hlbWFzID0ge1xuICAnaHR0cDonOiB7XG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uICh0ZXh0LCBwb3MsIHNlbGYpIHtcbiAgICAgIGNvbnN0IHRhaWwgPSB0ZXh0LnNsaWNlKHBvcylcblxuICAgICAgaWYgKCFzZWxmLnJlLmh0dHApIHtcbiAgICAgICAgLy8gY29tcGlsZSBsYXppbHksIGJlY2F1c2UgXCJob3N0XCItY29udGFpbmluZyB2YXJpYWJsZXMgY2FuIGNoYW5nZSBvbiB0bGRzIHVwZGF0ZS5cbiAgICAgICAgc2VsZi5yZS5odHRwID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAnXlxcXFwvXFxcXC8nICsgc2VsZi5yZS5zcmNfYXV0aCArIHNlbGYucmUuc3JjX2hvc3RfcG9ydF9zdHJpY3QgKyBzZWxmLnJlLnNyY19wYXRoLCAnaSdcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKHNlbGYucmUuaHR0cC50ZXN0KHRhaWwpKSB7XG4gICAgICAgIHJldHVybiB0YWlsLm1hdGNoKHNlbGYucmUuaHR0cClbMF0ubGVuZ3RoXG4gICAgICB9XG4gICAgICByZXR1cm4gMFxuICAgIH1cbiAgfSxcbiAgJ2h0dHBzOic6ICdodHRwOicsXG4gICdmdHA6JzogJ2h0dHA6JyxcbiAgJy8vJzoge1xuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAodGV4dCwgcG9zLCBzZWxmKSB7XG4gICAgICBjb25zdCB0YWlsID0gdGV4dC5zbGljZShwb3MpXG5cbiAgICAgIGlmICghc2VsZi5yZS5ub19odHRwKSB7XG4gICAgICAvLyBjb21waWxlIGxhemlseSwgYmVjYXVzZSBcImhvc3RcIi1jb250YWluaW5nIHZhcmlhYmxlcyBjYW4gY2hhbmdlIG9uIHRsZHMgdXBkYXRlLlxuICAgICAgICBzZWxmLnJlLm5vX2h0dHAgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICdeJyArXG4gICAgICAgICAgc2VsZi5yZS5zcmNfYXV0aCArXG4gICAgICAgICAgLy8gRG9uJ3QgYWxsb3cgc2luZ2xlLWxldmVsIGRvbWFpbnMsIGJlY2F1c2Ugb2YgZmFsc2UgcG9zaXRpdmVzIGxpa2UgJy8vdGVzdCdcbiAgICAgICAgICAvLyB3aXRoIGNvZGUgY29tbWVudHNcbiAgICAgICAgICAnKD86bG9jYWxob3N0fCg/Oig/OicgKyBzZWxmLnJlLnNyY19kb21haW4gKyAnKVxcXFwuKSsnICsgc2VsZi5yZS5zcmNfZG9tYWluX3Jvb3QgKyAnKScgK1xuICAgICAgICAgIHNlbGYucmUuc3JjX3BvcnQgK1xuICAgICAgICAgIHNlbGYucmUuc3JjX2hvc3RfdGVybWluYXRvciArXG4gICAgICAgICAgc2VsZi5yZS5zcmNfcGF0aCxcblxuICAgICAgICAgICdpJ1xuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLnJlLm5vX2h0dHAudGVzdCh0YWlsKSkge1xuICAgICAgICAvLyBzaG91bGQgbm90IGJlIGA6Ly9gICYgYC8vL2AsIHRoYXQgcHJvdGVjdHMgZnJvbSBlcnJvcnMgaW4gcHJvdG9jb2wgbmFtZVxuICAgICAgICBpZiAocG9zID49IDMgJiYgdGV4dFtwb3MgLSAzXSA9PT0gJzonKSB7IHJldHVybiAwIH1cbiAgICAgICAgaWYgKHBvcyA+PSAzICYmIHRleHRbcG9zIC0gM10gPT09ICcvJykgeyByZXR1cm4gMCB9XG4gICAgICAgIHJldHVybiB0YWlsLm1hdGNoKHNlbGYucmUubm9faHR0cClbMF0ubGVuZ3RoXG4gICAgICB9XG4gICAgICByZXR1cm4gMFxuICAgIH1cbiAgfSxcbiAgJ21haWx0bzonOiB7XG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uICh0ZXh0LCBwb3MsIHNlbGYpIHtcbiAgICAgIGNvbnN0IHRhaWwgPSB0ZXh0LnNsaWNlKHBvcylcblxuICAgICAgaWYgKCFzZWxmLnJlLm1haWx0bykge1xuICAgICAgICBzZWxmLnJlLm1haWx0byA9IG5ldyBSZWdFeHAoXG4gICAgICAgICAgJ14nICsgc2VsZi5yZS5zcmNfZW1haWxfbmFtZSArICdAJyArIHNlbGYucmUuc3JjX2hvc3Rfc3RyaWN0LCAnaSdcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgaWYgKHNlbGYucmUubWFpbHRvLnRlc3QodGFpbCkpIHtcbiAgICAgICAgcmV0dXJuIHRhaWwubWF0Y2goc2VsZi5yZS5tYWlsdG8pWzBdLmxlbmd0aFxuICAgICAgfVxuICAgICAgcmV0dXJuIDBcbiAgICB9XG4gIH1cbn1cblxuLy8gUkUgcGF0dGVybiBmb3IgMi1jaGFyYWN0ZXIgdGxkcyAoYXV0b2dlbmVyYXRlZCBieSAuL3N1cHBvcnQvdGxkc18yY2hhcl9nZW4uanMpXG4vKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlbiAqL1xuY29uc3QgdGxkc18yY2hfc3JjX3JlID0gJ2FbY2RlZmdpbG1ub3Fyc3R1d3h6XXxiW2FiZGVmZ2hpam1ub3JzdHZ3eXpdfGNbYWNkZmdoaWtsbW5vcnV2d3h5el18ZFtlamttb3pdfGVbY2VncnN0dV18Zltpamttb3JdfGdbYWJkZWZnaGlsbW5wcXJzdHV3eV18aFtrbW5ydHVdfGlbZGVsbW5vcXJzdF18altlbW9wXXxrW2VnaGltbnByd3l6XXxsW2FiY2lrcnN0dXZ5XXxtW2FjZGVnaGtsbW5vcHFyc3R1dnd4eXpdfG5bYWNlZmdpbG9wcnV6XXxvbXxwW2FlZmdoa2xtbnJzdHd5XXxxYXxyW2Vvc3V3XXxzW2FiY2RlZ2hpamtsbW5vcnR1dnh5el18dFtjZGZnaGprbG1ub3J0dnd6XXx1W2Fna3N5el18dlthY2VnaW51XXx3W2ZzXXx5W2V0XXx6W2Ftd10nXG5cbi8vIERPTidUIHRyeSB0byBtYWtlIFBScyB3aXRoIGNoYW5nZXMuIEV4dGVuZCBUTERzIHdpdGggTGlua2lmeUl0LnRsZHMoKSBpbnN0ZWFkXG5jb25zdCB0bGRzX2RlZmF1bHQgPSAnYml6fGNvbXxlZHV8Z292fG5ldHxvcmd8cHJvfHdlYnx4eHh8YWVyb3xhc2lhfGNvb3B8aW5mb3xtdXNldW18bmFtZXxzaG9wfNGA0YQnLnNwbGl0KCd8JylcblxuZnVuY3Rpb24gcmVzZXRTY2FuQ2FjaGUgKHNlbGYpIHtcbiAgc2VsZi5fX2luZGV4X18gPSAtMVxuICBzZWxmLl9fdGV4dF9jYWNoZV9fID0gJydcbn1cblxuZnVuY3Rpb24gY3JlYXRlVmFsaWRhdG9yIChyZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRleHQsIHBvcykge1xuICAgIGNvbnN0IHRhaWwgPSB0ZXh0LnNsaWNlKHBvcylcblxuICAgIGlmIChyZS50ZXN0KHRhaWwpKSB7XG4gICAgICByZXR1cm4gdGFpbC5tYXRjaChyZSlbMF0ubGVuZ3RoXG4gICAgfVxuICAgIHJldHVybiAwXG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9ybWFsaXplciAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIHNlbGYpIHtcbiAgICBzZWxmLm5vcm1hbGl6ZShtYXRjaClcbiAgfVxufVxuXG4vLyBTY2hlbWFzIGNvbXBpbGVyLiBCdWlsZCByZWdleHBzLlxuLy9cbmZ1bmN0aW9uIGNvbXBpbGUgKHNlbGYpIHtcbiAgLy8gTG9hZCAmIGNsb25lIFJFIHBhdHRlcm5zLlxuICBjb25zdCByZSA9IHNlbGYucmUgPSByZUZhY3Rvcnkoc2VsZi5fX29wdHNfXylcblxuICAvLyBEZWZpbmUgZHluYW1pYyBwYXR0ZXJuc1xuICBjb25zdCB0bGRzID0gc2VsZi5fX3RsZHNfXy5zbGljZSgpXG5cbiAgc2VsZi5vbkNvbXBpbGUoKVxuXG4gIGlmICghc2VsZi5fX3RsZHNfcmVwbGFjZWRfXykge1xuICAgIHRsZHMucHVzaCh0bGRzXzJjaF9zcmNfcmUpXG4gIH1cbiAgdGxkcy5wdXNoKHJlLnNyY194bilcblxuICByZS5zcmNfdGxkcyA9IHRsZHMuam9pbignfCcpXG5cbiAgZnVuY3Rpb24gdW50cGwgKHRwbCkgeyByZXR1cm4gdHBsLnJlcGxhY2UoJyVUTERTJScsIHJlLnNyY190bGRzKSB9XG5cbiAgcmUuZW1haWxfZnV6enkgPSBSZWdFeHAodW50cGwocmUudHBsX2VtYWlsX2Z1enp5KSwgJ2knKVxuICByZS5saW5rX2Z1enp5ID0gUmVnRXhwKHVudHBsKHJlLnRwbF9saW5rX2Z1enp5KSwgJ2knKVxuICByZS5saW5rX25vX2lwX2Z1enp5ID0gUmVnRXhwKHVudHBsKHJlLnRwbF9saW5rX25vX2lwX2Z1enp5KSwgJ2knKVxuICByZS5ob3N0X2Z1enp5X3Rlc3QgPSBSZWdFeHAodW50cGwocmUudHBsX2hvc3RfZnV6enlfdGVzdCksICdpJylcblxuICAvL1xuICAvLyBDb21waWxlIGVhY2ggc2NoZW1hXG4gIC8vXG5cbiAgY29uc3QgYWxpYXNlcyA9IFtdXG5cbiAgc2VsZi5fX2NvbXBpbGVkX18gPSB7fSAvLyBSZXNldCBjb21waWxlZCBkYXRhXG5cbiAgZnVuY3Rpb24gc2NoZW1hRXJyb3IgKG5hbWUsIHZhbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignKExpbmtpZnlJdCkgSW52YWxpZCBzY2hlbWEgXCInICsgbmFtZSArICdcIjogJyArIHZhbClcbiAgfVxuXG4gIE9iamVjdC5rZXlzKHNlbGYuX19zY2hlbWFzX18pLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBjb25zdCB2YWwgPSBzZWxmLl9fc2NoZW1hc19fW25hbWVdXG5cbiAgICAvLyBza2lwIGRpc2FibGVkIG1ldGhvZHNcbiAgICBpZiAodmFsID09PSBudWxsKSB7IHJldHVybiB9XG5cbiAgICBjb25zdCBjb21waWxlZCA9IHsgdmFsaWRhdGU6IG51bGwsIGxpbms6IG51bGwgfVxuXG4gICAgc2VsZi5fX2NvbXBpbGVkX19bbmFtZV0gPSBjb21waWxlZFxuXG4gICAgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgIGlmIChpc1JlZ0V4cCh2YWwudmFsaWRhdGUpKSB7XG4gICAgICAgIGNvbXBpbGVkLnZhbGlkYXRlID0gY3JlYXRlVmFsaWRhdG9yKHZhbC52YWxpZGF0ZSlcbiAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih2YWwudmFsaWRhdGUpKSB7XG4gICAgICAgIGNvbXBpbGVkLnZhbGlkYXRlID0gdmFsLnZhbGlkYXRlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2hlbWFFcnJvcihuYW1lLCB2YWwpXG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbC5ub3JtYWxpemUpKSB7XG4gICAgICAgIGNvbXBpbGVkLm5vcm1hbGl6ZSA9IHZhbC5ub3JtYWxpemVcbiAgICAgIH0gZWxzZSBpZiAoIXZhbC5ub3JtYWxpemUpIHtcbiAgICAgICAgY29tcGlsZWQubm9ybWFsaXplID0gY3JlYXRlTm9ybWFsaXplcigpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzY2hlbWFFcnJvcihuYW1lLCB2YWwpXG4gICAgICB9XG5cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc1N0cmluZyh2YWwpKSB7XG4gICAgICBhbGlhc2VzLnB1c2gobmFtZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNjaGVtYUVycm9yKG5hbWUsIHZhbClcbiAgfSlcblxuICAvL1xuICAvLyBDb21waWxlIHBvc3Rwb25lZCBhbGlhc2VzXG4gIC8vXG5cbiAgYWxpYXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgIGlmICghc2VsZi5fX2NvbXBpbGVkX19bc2VsZi5fX3NjaGVtYXNfX1thbGlhc11dKSB7XG4gICAgICAvLyBTaWxlbnRseSBmYWlsIG9uIG1pc3NlZCBzY2hlbWFzIHRvIGF2b2lkIGVycm9ucyBvbiBkaXNhYmxlLlxuICAgICAgLy8gc2NoZW1hRXJyb3IoYWxpYXMsIHNlbGYuX19zY2hlbWFzX19bYWxpYXNdKTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNlbGYuX19jb21waWxlZF9fW2FsaWFzXS52YWxpZGF0ZSA9XG4gICAgICBzZWxmLl9fY29tcGlsZWRfX1tzZWxmLl9fc2NoZW1hc19fW2FsaWFzXV0udmFsaWRhdGVcbiAgICBzZWxmLl9fY29tcGlsZWRfX1thbGlhc10ubm9ybWFsaXplID1cbiAgICAgIHNlbGYuX19jb21waWxlZF9fW3NlbGYuX19zY2hlbWFzX19bYWxpYXNdXS5ub3JtYWxpemVcbiAgfSlcblxuICAvL1xuICAvLyBGYWtlIHJlY29yZCBmb3IgZ3Vlc3NlZCBsaW5rc1xuICAvL1xuICBzZWxmLl9fY29tcGlsZWRfX1snJ10gPSB7IHZhbGlkYXRlOiBudWxsLCBub3JtYWxpemU6IGNyZWF0ZU5vcm1hbGl6ZXIoKSB9XG5cbiAgLy9cbiAgLy8gQnVpbGQgc2NoZW1hIGNvbmRpdGlvblxuICAvL1xuICBjb25zdCBzbGlzdCA9IE9iamVjdC5rZXlzKHNlbGYuX19jb21waWxlZF9fKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIC8vIEZpbHRlciBkaXNhYmxlZCAmIGZha2Ugc2NoZW1hc1xuICAgICAgcmV0dXJuIG5hbWUubGVuZ3RoID4gMCAmJiBzZWxmLl9fY29tcGlsZWRfX1tuYW1lXVxuICAgIH0pXG4gICAgLm1hcChlc2NhcGVSRSlcbiAgICAuam9pbignfCcpXG4gIC8vICg/IV8pIGNhdXNlIDEuNXggc2xvd2Rvd25cbiAgc2VsZi5yZS5zY2hlbWFfdGVzdCA9IFJlZ0V4cCgnKF58KD8hXykoPzpbPjxcXHVmZjVjXXwnICsgcmUuc3JjX1pQQ2MgKyAnKSkoJyArIHNsaXN0ICsgJyknLCAnaScpXG4gIHNlbGYucmUuc2NoZW1hX3NlYXJjaCA9IFJlZ0V4cCgnKF58KD8hXykoPzpbPjxcXHVmZjVjXXwnICsgcmUuc3JjX1pQQ2MgKyAnKSkoJyArIHNsaXN0ICsgJyknLCAnaWcnKVxuICBzZWxmLnJlLnNjaGVtYV9hdF9zdGFydCA9IFJlZ0V4cCgnXicgKyBzZWxmLnJlLnNjaGVtYV9zZWFyY2guc291cmNlLCAnaScpXG5cbiAgc2VsZi5yZS5wcmV0ZXN0ID0gUmVnRXhwKFxuICAgICcoJyArIHNlbGYucmUuc2NoZW1hX3Rlc3Quc291cmNlICsgJyl8KCcgKyBzZWxmLnJlLmhvc3RfZnV6enlfdGVzdC5zb3VyY2UgKyAnKXxAJyxcbiAgICAnaSdcbiAgKVxuXG4gIC8vXG4gIC8vIENsZWFudXBcbiAgLy9cblxuICByZXNldFNjYW5DYWNoZShzZWxmKVxufVxuXG4vKipcbiAqIGNsYXNzIE1hdGNoXG4gKlxuICogTWF0Y2ggcmVzdWx0LiBTaW5nbGUgZWxlbWVudCBvZiBhcnJheSwgcmV0dXJuZWQgYnkgW1tMaW5raWZ5SXQjbWF0Y2hdXVxuICoqL1xuZnVuY3Rpb24gTWF0Y2ggKHNlbGYsIHNoaWZ0KSB7XG4gIGNvbnN0IHN0YXJ0ID0gc2VsZi5fX2luZGV4X19cbiAgY29uc3QgZW5kID0gc2VsZi5fX2xhc3RfaW5kZXhfX1xuICBjb25zdCB0ZXh0ID0gc2VsZi5fX3RleHRfY2FjaGVfXy5zbGljZShzdGFydCwgZW5kKVxuXG4gIC8qKlxuICAgKiBNYXRjaCNzY2hlbWEgLT4gU3RyaW5nXG4gICAqXG4gICAqIFByZWZpeCAocHJvdG9jb2wpIGZvciBtYXRjaGVkIHN0cmluZy5cbiAgICoqL1xuICB0aGlzLnNjaGVtYSA9IHNlbGYuX19zY2hlbWFfXy50b0xvd2VyQ2FzZSgpXG4gIC8qKlxuICAgKiBNYXRjaCNpbmRleCAtPiBOdW1iZXJcbiAgICpcbiAgICogRmlyc3QgcG9zaXRpb24gb2YgbWF0Y2hlZCBzdHJpbmcuXG4gICAqKi9cbiAgdGhpcy5pbmRleCA9IHN0YXJ0ICsgc2hpZnRcbiAgLyoqXG4gICAqIE1hdGNoI2xhc3RJbmRleCAtPiBOdW1iZXJcbiAgICpcbiAgICogTmV4dCBwb3NpdGlvbiBhZnRlciBtYXRjaGVkIHN0cmluZy5cbiAgICoqL1xuICB0aGlzLmxhc3RJbmRleCA9IGVuZCArIHNoaWZ0XG4gIC8qKlxuICAgKiBNYXRjaCNyYXcgLT4gU3RyaW5nXG4gICAqXG4gICAqIE1hdGNoZWQgc3RyaW5nLlxuICAgKiovXG4gIHRoaXMucmF3ID0gdGV4dFxuICAvKipcbiAgICogTWF0Y2gjdGV4dCAtPiBTdHJpbmdcbiAgICpcbiAgICogTm90bWFsaXplZCB0ZXh0IG9mIG1hdGNoZWQgc3RyaW5nLlxuICAgKiovXG4gIHRoaXMudGV4dCA9IHRleHRcbiAgLyoqXG4gICAqIE1hdGNoI3VybCAtPiBTdHJpbmdcbiAgICpcbiAgICogTm9ybWFsaXplZCB1cmwgb2YgbWF0Y2hlZCBzdHJpbmcuXG4gICAqKi9cbiAgdGhpcy51cmwgPSB0ZXh0XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1hdGNoIChzZWxmLCBzaGlmdCkge1xuICBjb25zdCBtYXRjaCA9IG5ldyBNYXRjaChzZWxmLCBzaGlmdClcblxuICBzZWxmLl9fY29tcGlsZWRfX1ttYXRjaC5zY2hlbWFdLm5vcm1hbGl6ZShtYXRjaCwgc2VsZilcblxuICByZXR1cm4gbWF0Y2hcbn1cblxuLyoqXG4gKiBjbGFzcyBMaW5raWZ5SXRcbiAqKi9cblxuLyoqXG4gKiBuZXcgTGlua2lmeUl0KHNjaGVtYXMsIG9wdGlvbnMpXG4gKiAtIHNjaGVtYXMgKE9iamVjdCk6IE9wdGlvbmFsLiBBZGRpdGlvbmFsIHNjaGVtYXMgdG8gdmFsaWRhdGUgKHByZWZpeC92YWxpZGF0b3IpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHsgZnV6enlMaW5rfGZ1enp5RW1haWx8ZnV6enlJUDogdHJ1ZXxmYWxzZSB9XG4gKlxuICogQ3JlYXRlcyBuZXcgbGlua2lmaWVyIGluc3RhbmNlIHdpdGggb3B0aW9uYWwgYWRkaXRpb25hbCBzY2hlbWFzLlxuICogQ2FuIGJlIGNhbGxlZCB3aXRob3V0IGBuZXdgIGtleXdvcmQgZm9yIGNvbnZlbmllbmNlLlxuICpcbiAqIEJ5IGRlZmF1bHQgdW5kZXJzdGFuZHM6XG4gKlxuICogLSBgaHR0cChzKTovLy4uLmAgLCBgZnRwOi8vLi4uYCwgYG1haWx0bzouLi5gICYgYC8vLi4uYCBsaW5rc1xuICogLSBcImZ1enp5XCIgbGlua3MgYW5kIGVtYWlscyAoZXhhbXBsZS5jb20sIGZvb0BiYXIuY29tKS5cbiAqXG4gKiBgc2NoZW1hc2AgaXMgYW4gb2JqZWN0LCB3aGVyZSBlYWNoIGtleS92YWx1ZSBkZXNjcmliZXMgcHJvdG9jb2wvcnVsZTpcbiAqXG4gKiAtIF9fa2V5X18gLSBsaW5rIHByZWZpeCAodXN1YWxseSwgcHJvdG9jb2wgbmFtZSB3aXRoIGA6YCBhdCB0aGUgZW5kLCBgc2t5cGU6YFxuICogICBmb3IgZXhhbXBsZSkuIGBsaW5raWZ5LWl0YCBtYWtlcyBzaHVyZSB0aGF0IHByZWZpeCBpcyBub3QgcHJlY2VlZGVkIHdpdGhcbiAqICAgYWxwaGFudW1lcmljIGNoYXIgYW5kIHN5bWJvbHMuIE9ubHkgd2hpdGVzcGFjZXMgYW5kIHB1bmN0dWF0aW9uIGFsbG93ZWQuXG4gKiAtIF9fdmFsdWVfXyAtIHJ1bGUgdG8gY2hlY2sgdGFpbCBhZnRlciBsaW5rIHByZWZpeFxuICogICAtIF9TdHJpbmdfIC0ganVzdCBhbGlhcyB0byBleGlzdGluZyBydWxlXG4gKiAgIC0gX09iamVjdF9cbiAqICAgICAtIF92YWxpZGF0ZV8gLSB2YWxpZGF0b3IgZnVuY3Rpb24gKHNob3VsZCByZXR1cm4gbWF0Y2hlZCBsZW5ndGggb24gc3VjY2VzcyksXG4gKiAgICAgICBvciBgUmVnRXhwYC5cbiAqICAgICAtIF9ub3JtYWxpemVfIC0gb3B0aW9uYWwgZnVuY3Rpb24gdG8gbm9ybWFsaXplIHRleHQgJiB1cmwgb2YgbWF0Y2hlZCByZXN1bHRcbiAqICAgICAgIChmb3IgZXhhbXBsZSwgZm9yIEB0d2l0dGVyIG1lbnRpb25zKS5cbiAqXG4gKiBgb3B0aW9uc2A6XG4gKlxuICogLSBfX2Z1enp5TGlua19fIC0gcmVjb2duaWdlIFVSTC1zIHdpdGhvdXQgYGh0dHAocyk6YCBwcmVmaXguIERlZmF1bHQgYHRydWVgLlxuICogLSBfX2Z1enp5SVBfXyAtIGFsbG93IElQcyBpbiBmdXp6eSBsaW5rcyBhYm92ZS4gQ2FuIGNvbmZsaWN0IHdpdGggc29tZSB0ZXh0c1xuICogICBsaWtlIHZlcnNpb24gbnVtYmVycy4gRGVmYXVsdCBgZmFsc2VgLlxuICogLSBfX2Z1enp5RW1haWxfXyAtIHJlY29nbml6ZSBlbWFpbHMgd2l0aG91dCBgbWFpbHRvOmAgcHJlZml4LlxuICpcbiAqKi9cbmZ1bmN0aW9uIExpbmtpZnlJdCAoc2NoZW1hcywgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTGlua2lmeUl0KSkge1xuICAgIHJldHVybiBuZXcgTGlua2lmeUl0KHNjaGVtYXMsIG9wdGlvbnMpXG4gIH1cblxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBpZiAoaXNPcHRpb25zT2JqKHNjaGVtYXMpKSB7XG4gICAgICBvcHRpb25zID0gc2NoZW1hc1xuICAgICAgc2NoZW1hcyA9IHt9XG4gICAgfVxuICB9XG5cbiAgdGhpcy5fX29wdHNfXyA9IGFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpXG5cbiAgLy8gQ2FjaGUgbGFzdCB0ZXN0ZWQgcmVzdWx0LiBVc2VkIHRvIHNraXAgcmVwZWF0aW5nIHN0ZXBzIG9uIG5leHQgYG1hdGNoYCBjYWxsLlxuICB0aGlzLl9faW5kZXhfXyA9IC0xXG4gIHRoaXMuX19sYXN0X2luZGV4X18gPSAtMSAvLyBOZXh0IHNjYW4gcG9zaXRpb25cbiAgdGhpcy5fX3NjaGVtYV9fID0gJydcbiAgdGhpcy5fX3RleHRfY2FjaGVfXyA9ICcnXG5cbiAgdGhpcy5fX3NjaGVtYXNfXyA9IGFzc2lnbih7fSwgZGVmYXVsdFNjaGVtYXMsIHNjaGVtYXMpXG4gIHRoaXMuX19jb21waWxlZF9fID0ge31cblxuICB0aGlzLl9fdGxkc19fID0gdGxkc19kZWZhdWx0XG4gIHRoaXMuX190bGRzX3JlcGxhY2VkX18gPSBmYWxzZVxuXG4gIHRoaXMucmUgPSB7fVxuXG4gIGNvbXBpbGUodGhpcylcbn1cblxuLyoqIGNoYWluYWJsZVxuICogTGlua2lmeUl0I2FkZChzY2hlbWEsIGRlZmluaXRpb24pXG4gKiAtIHNjaGVtYSAoU3RyaW5nKTogcnVsZSBuYW1lIChmaXhlZCBwYXR0ZXJuIHByZWZpeClcbiAqIC0gZGVmaW5pdGlvbiAoU3RyaW5nfFJlZ0V4cHxPYmplY3QpOiBzY2hlbWEgZGVmaW5pdGlvblxuICpcbiAqIEFkZCBuZXcgcnVsZSBkZWZpbml0aW9uLiBTZWUgY29uc3RydWN0b3IgZGVzY3JpcHRpb24gZm9yIGRldGFpbHMuXG4gKiovXG5MaW5raWZ5SXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoc2NoZW1hLCBkZWZpbml0aW9uKSB7XG4gIHRoaXMuX19zY2hlbWFzX19bc2NoZW1hXSA9IGRlZmluaXRpb25cbiAgY29tcGlsZSh0aGlzKVxuICByZXR1cm4gdGhpc1xufVxuXG4vKiogY2hhaW5hYmxlXG4gKiBMaW5raWZ5SXQjc2V0KG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHsgZnV6enlMaW5rfGZ1enp5RW1haWx8ZnV6enlJUDogdHJ1ZXxmYWxzZSB9XG4gKlxuICogU2V0IHJlY29nbml0aW9uIG9wdGlvbnMgZm9yIGxpbmtzIHdpdGhvdXQgc2NoZW1hLlxuICoqL1xuTGlua2lmeUl0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQgKG9wdGlvbnMpIHtcbiAgdGhpcy5fX29wdHNfXyA9IGFzc2lnbih0aGlzLl9fb3B0c19fLCBvcHRpb25zKVxuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIExpbmtpZnlJdCN0ZXN0KHRleHQpIC0+IEJvb2xlYW5cbiAqXG4gKiBTZWFyY2hlcyBsaW5raWZpYWJsZSBwYXR0ZXJuIGFuZCByZXR1cm5zIGB0cnVlYCBvbiBzdWNjZXNzIG9yIGBmYWxzZWAgb24gZmFpbC5cbiAqKi9cbkxpbmtpZnlJdC5wcm90b3R5cGUudGVzdCA9IGZ1bmN0aW9uIHRlc3QgKHRleHQpIHtcbiAgLy8gUmVzZXQgc2NhbiBjYWNoZVxuICB0aGlzLl9fdGV4dF9jYWNoZV9fID0gdGV4dFxuICB0aGlzLl9faW5kZXhfXyA9IC0xXG5cbiAgaWYgKCF0ZXh0Lmxlbmd0aCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIGxldCBtLCBtbCwgbWUsIGxlbiwgc2hpZnQsIG5leHQsIHJlLCB0bGRfcG9zLCBhdF9wb3NcblxuICAvLyB0cnkgdG8gc2NhbiBmb3IgbGluayB3aXRoIHNjaGVtYSAtIHRoYXQncyB0aGUgbW9zdCBzaW1wbGUgcnVsZVxuICBpZiAodGhpcy5yZS5zY2hlbWFfdGVzdC50ZXN0KHRleHQpKSB7XG4gICAgcmUgPSB0aGlzLnJlLnNjaGVtYV9zZWFyY2hcbiAgICByZS5sYXN0SW5kZXggPSAwXG4gICAgd2hpbGUgKChtID0gcmUuZXhlYyh0ZXh0KSkgIT09IG51bGwpIHtcbiAgICAgIGxlbiA9IHRoaXMudGVzdFNjaGVtYUF0KHRleHQsIG1bMl0sIHJlLmxhc3RJbmRleClcbiAgICAgIGlmIChsZW4pIHtcbiAgICAgICAgdGhpcy5fX3NjaGVtYV9fID0gbVsyXVxuICAgICAgICB0aGlzLl9faW5kZXhfXyA9IG0uaW5kZXggKyBtWzFdLmxlbmd0aFxuICAgICAgICB0aGlzLl9fbGFzdF9pbmRleF9fID0gbS5pbmRleCArIG1bMF0ubGVuZ3RoICsgbGVuXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHRoaXMuX19vcHRzX18uZnV6enlMaW5rICYmIHRoaXMuX19jb21waWxlZF9fWydodHRwOiddKSB7XG4gICAgLy8gZ3Vlc3Mgc2NoZW1hbGVzcyBsaW5rc1xuICAgIHRsZF9wb3MgPSB0ZXh0LnNlYXJjaCh0aGlzLnJlLmhvc3RfZnV6enlfdGVzdClcbiAgICBpZiAodGxkX3BvcyA+PSAwKSB7XG4gICAgICAvLyBpZiB0bGQgaXMgbG9jYXRlZCBhZnRlciBmb3VuZCBsaW5rIC0gbm8gbmVlZCB0byBjaGVjayBmdXp6eSBwYXR0ZXJuXG4gICAgICBpZiAodGhpcy5fX2luZGV4X18gPCAwIHx8IHRsZF9wb3MgPCB0aGlzLl9faW5kZXhfXykge1xuICAgICAgICBpZiAoKG1sID0gdGV4dC5tYXRjaCh0aGlzLl9fb3B0c19fLmZ1enp5SVAgPyB0aGlzLnJlLmxpbmtfZnV6enkgOiB0aGlzLnJlLmxpbmtfbm9faXBfZnV6enkpKSAhPT0gbnVsbCkge1xuICAgICAgICAgIHNoaWZ0ID0gbWwuaW5kZXggKyBtbFsxXS5sZW5ndGhcblxuICAgICAgICAgIGlmICh0aGlzLl9faW5kZXhfXyA8IDAgfHwgc2hpZnQgPCB0aGlzLl9faW5kZXhfXykge1xuICAgICAgICAgICAgdGhpcy5fX3NjaGVtYV9fID0gJydcbiAgICAgICAgICAgIHRoaXMuX19pbmRleF9fID0gc2hpZnRcbiAgICAgICAgICAgIHRoaXMuX19sYXN0X2luZGV4X18gPSBtbC5pbmRleCArIG1sWzBdLmxlbmd0aFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9fb3B0c19fLmZ1enp5RW1haWwgJiYgdGhpcy5fX2NvbXBpbGVkX19bJ21haWx0bzonXSkge1xuICAgIC8vIGd1ZXNzIHNjaGVtYWxlc3MgZW1haWxzXG4gICAgYXRfcG9zID0gdGV4dC5pbmRleE9mKCdAJylcbiAgICBpZiAoYXRfcG9zID49IDApIHtcbiAgICAgIC8vIFdlIGNhbid0IHNraXAgdGhpcyBjaGVjaywgYmVjYXVzZSB0aGlzIGNhc2VzIGFyZSBwb3NzaWJsZTpcbiAgICAgIC8vIDE5Mi4xNjguMS4xQGdtYWlsLmNvbSwgbXkuaW5AZXhhbXBsZS5jb21cbiAgICAgIGlmICgobWUgPSB0ZXh0Lm1hdGNoKHRoaXMucmUuZW1haWxfZnV6enkpKSAhPT0gbnVsbCkge1xuICAgICAgICBzaGlmdCA9IG1lLmluZGV4ICsgbWVbMV0ubGVuZ3RoXG4gICAgICAgIG5leHQgPSBtZS5pbmRleCArIG1lWzBdLmxlbmd0aFxuXG4gICAgICAgIGlmICh0aGlzLl9faW5kZXhfXyA8IDAgfHwgc2hpZnQgPCB0aGlzLl9faW5kZXhfXyB8fFxuICAgICAgICAgICAgKHNoaWZ0ID09PSB0aGlzLl9faW5kZXhfXyAmJiBuZXh0ID4gdGhpcy5fX2xhc3RfaW5kZXhfXykpIHtcbiAgICAgICAgICB0aGlzLl9fc2NoZW1hX18gPSAnbWFpbHRvOidcbiAgICAgICAgICB0aGlzLl9faW5kZXhfXyA9IHNoaWZ0XG4gICAgICAgICAgdGhpcy5fX2xhc3RfaW5kZXhfXyA9IG5leHRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzLl9faW5kZXhfXyA+PSAwXG59XG5cbi8qKlxuICogTGlua2lmeUl0I3ByZXRlc3QodGV4dCkgLT4gQm9vbGVhblxuICpcbiAqIFZlcnkgcXVpY2sgY2hlY2ssIHRoYXQgY2FuIGdpdmUgZmFsc2UgcG9zaXRpdmVzLiBSZXR1cm5zIHRydWUgaWYgbGluayBNQVkgQkVcbiAqIGNhbiBleGlzdHMuIENhbiBiZSB1c2VkIGZvciBzcGVlZCBvcHRpbWl6YXRpb24sIHdoZW4geW91IG5lZWQgdG8gY2hlY2sgdGhhdFxuICogbGluayBOT1QgZXhpc3RzLlxuICoqL1xuTGlua2lmeUl0LnByb3RvdHlwZS5wcmV0ZXN0ID0gZnVuY3Rpb24gcHJldGVzdCAodGV4dCkge1xuICByZXR1cm4gdGhpcy5yZS5wcmV0ZXN0LnRlc3QodGV4dClcbn1cblxuLyoqXG4gKiBMaW5raWZ5SXQjdGVzdFNjaGVtYUF0KHRleHQsIG5hbWUsIHBvc2l0aW9uKSAtPiBOdW1iZXJcbiAqIC0gdGV4dCAoU3RyaW5nKTogdGV4dCB0byBzY2FuXG4gKiAtIG5hbWUgKFN0cmluZyk6IHJ1bGUgKHNjaGVtYSkgbmFtZVxuICogLSBwb3NpdGlvbiAoTnVtYmVyKTogdGV4dCBvZmZzZXQgdG8gY2hlY2sgZnJvbVxuICpcbiAqIFNpbWlsYXIgdG8gW1tMaW5raWZ5SXQjdGVzdF1dIGJ1dCBjaGVja3Mgb25seSBzcGVjaWZpYyBwcm90b2NvbCB0YWlsIGV4YWN0bHlcbiAqIGF0IGdpdmVuIHBvc2l0aW9uLiBSZXR1cm5zIGxlbmd0aCBvZiBmb3VuZCBwYXR0ZXJuICgwIG9uIGZhaWwpLlxuICoqL1xuTGlua2lmeUl0LnByb3RvdHlwZS50ZXN0U2NoZW1hQXQgPSBmdW5jdGlvbiB0ZXN0U2NoZW1hQXQgKHRleHQsIHNjaGVtYSwgcG9zKSB7XG4gIC8vIElmIG5vdCBzdXBwb3J0ZWQgc2NoZW1hIGNoZWNrIHJlcXVlc3RlZCAtIHRlcm1pbmF0ZVxuICBpZiAoIXRoaXMuX19jb21waWxlZF9fW3NjaGVtYS50b0xvd2VyQ2FzZSgpXSkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgcmV0dXJuIHRoaXMuX19jb21waWxlZF9fW3NjaGVtYS50b0xvd2VyQ2FzZSgpXS52YWxpZGF0ZSh0ZXh0LCBwb3MsIHRoaXMpXG59XG5cbi8qKlxuICogTGlua2lmeUl0I21hdGNoKHRleHQpIC0+IEFycmF5fG51bGxcbiAqXG4gKiBSZXR1cm5zIGFycmF5IG9mIGZvdW5kIGxpbmsgZGVzY3JpcHRpb25zIG9yIGBudWxsYCBvbiBmYWlsLiBXZSBzdHJvbmdseVxuICogcmVjb21tZW5kIHRvIHVzZSBbW0xpbmtpZnlJdCN0ZXN0XV0gZmlyc3QsIGZvciBiZXN0IHNwZWVkLlxuICpcbiAqICMjIyMjIFJlc3VsdCBtYXRjaCBkZXNjcmlwdGlvblxuICpcbiAqIC0gX19zY2hlbWFfXyAtIGxpbmsgc2NoZW1hLCBjYW4gYmUgZW1wdHkgZm9yIGZ1enp5IGxpbmtzLCBvciBgLy9gIGZvclxuICogICBwcm90b2NvbC1uZXV0cmFsICBsaW5rcy5cbiAqIC0gX19pbmRleF9fIC0gb2Zmc2V0IG9mIG1hdGNoZWQgdGV4dFxuICogLSBfX2xhc3RJbmRleF9fIC0gaW5kZXggb2YgbmV4dCBjaGFyIGFmdGVyIG1hdGhjaCBlbmRcbiAqIC0gX19yYXdfXyAtIG1hdGNoZWQgdGV4dFxuICogLSBfX3RleHRfXyAtIG5vcm1hbGl6ZWQgdGV4dFxuICogLSBfX3VybF9fIC0gbGluaywgZ2VuZXJhdGVkIGZyb20gbWF0Y2hlZCB0ZXh0XG4gKiovXG5MaW5raWZ5SXQucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2ggKHRleHQpIHtcbiAgY29uc3QgcmVzdWx0ID0gW11cbiAgbGV0IHNoaWZ0ID0gMFxuXG4gIC8vIFRyeSB0byB0YWtlIHByZXZpb3VzIGVsZW1lbnQgZnJvbSBjYWNoZSwgaWYgLnRlc3QoKSBjYWxsZWQgYmVmb3JlXG4gIGlmICh0aGlzLl9faW5kZXhfXyA+PSAwICYmIHRoaXMuX190ZXh0X2NhY2hlX18gPT09IHRleHQpIHtcbiAgICByZXN1bHQucHVzaChjcmVhdGVNYXRjaCh0aGlzLCBzaGlmdCkpXG4gICAgc2hpZnQgPSB0aGlzLl9fbGFzdF9pbmRleF9fXG4gIH1cblxuICAvLyBDdXQgaGVhZCBpZiBjYWNoZSB3YXMgdXNlZFxuICBsZXQgdGFpbCA9IHNoaWZ0ID8gdGV4dC5zbGljZShzaGlmdCkgOiB0ZXh0XG5cbiAgLy8gU2NhbiBzdHJpbmcgdW50aWwgZW5kIHJlYWNoZWRcbiAgd2hpbGUgKHRoaXMudGVzdCh0YWlsKSkge1xuICAgIHJlc3VsdC5wdXNoKGNyZWF0ZU1hdGNoKHRoaXMsIHNoaWZ0KSlcblxuICAgIHRhaWwgPSB0YWlsLnNsaWNlKHRoaXMuX19sYXN0X2luZGV4X18pXG4gICAgc2hpZnQgKz0gdGhpcy5fX2xhc3RfaW5kZXhfX1xuICB9XG5cbiAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG4vKipcbiAqIExpbmtpZnlJdCNtYXRjaEF0U3RhcnQodGV4dCkgLT4gTWF0Y2h8bnVsbFxuICpcbiAqIFJldHVybnMgZnVsbHktZm9ybWVkIChub3QgZnV6enkpIGxpbmsgaWYgaXQgc3RhcnRzIGF0IHRoZSBiZWdpbm5pbmdcbiAqIG9mIHRoZSBzdHJpbmcsIGFuZCBudWxsIG90aGVyd2lzZS5cbiAqKi9cbkxpbmtpZnlJdC5wcm90b3R5cGUubWF0Y2hBdFN0YXJ0ID0gZnVuY3Rpb24gbWF0Y2hBdFN0YXJ0ICh0ZXh0KSB7XG4gIC8vIFJlc2V0IHNjYW4gY2FjaGVcbiAgdGhpcy5fX3RleHRfY2FjaGVfXyA9IHRleHRcbiAgdGhpcy5fX2luZGV4X18gPSAtMVxuXG4gIGlmICghdGV4dC5sZW5ndGgpIHJldHVybiBudWxsXG5cbiAgY29uc3QgbSA9IHRoaXMucmUuc2NoZW1hX2F0X3N0YXJ0LmV4ZWModGV4dClcbiAgaWYgKCFtKSByZXR1cm4gbnVsbFxuXG4gIGNvbnN0IGxlbiA9IHRoaXMudGVzdFNjaGVtYUF0KHRleHQsIG1bMl0sIG1bMF0ubGVuZ3RoKVxuICBpZiAoIWxlbikgcmV0dXJuIG51bGxcblxuICB0aGlzLl9fc2NoZW1hX18gPSBtWzJdXG4gIHRoaXMuX19pbmRleF9fID0gbS5pbmRleCArIG1bMV0ubGVuZ3RoXG4gIHRoaXMuX19sYXN0X2luZGV4X18gPSBtLmluZGV4ICsgbVswXS5sZW5ndGggKyBsZW5cblxuICByZXR1cm4gY3JlYXRlTWF0Y2godGhpcywgMClcbn1cblxuLyoqIGNoYWluYWJsZVxuICogTGlua2lmeUl0I3RsZHMobGlzdCBbLCBrZWVwT2xkXSkgLT4gdGhpc1xuICogLSBsaXN0IChBcnJheSk6IGxpc3Qgb2YgdGxkc1xuICogLSBrZWVwT2xkIChCb29sZWFuKTogbWVyZ2Ugd2l0aCBjdXJyZW50IGxpc3QgaWYgYHRydWVgIChgZmFsc2VgIGJ5IGRlZmF1bHQpXG4gKlxuICogTG9hZCAob3IgbWVyZ2UpIG5ldyB0bGRzIGxpc3QuIFRob3NlIGFyZSB1c2VyIGZvciBmdXp6eSBsaW5rcyAod2l0aG91dCBwcmVmaXgpXG4gKiB0byBhdm9pZCBmYWxzZSBwb3NpdGl2ZXMuIEJ5IGRlZmF1bHQgdGhpcyBhbGdvcnl0aG0gdXNlZDpcbiAqXG4gKiAtIGhvc3RuYW1lIHdpdGggYW55IDItbGV0dGVyIHJvb3Qgem9uZXMgYXJlIG9rLlxuICogLSBiaXp8Y29tfGVkdXxnb3Z8bmV0fG9yZ3xwcm98d2VifHh4eHxhZXJvfGFzaWF8Y29vcHxpbmZvfG11c2V1bXxuYW1lfHNob3B80YDRhFxuICogICBhcmUgb2suXG4gKiAtIGVuY29kZWQgKGB4bi0tLi4uYCkgcm9vdCB6b25lcyBhcmUgb2suXG4gKlxuICogSWYgbGlzdCBpcyByZXBsYWNlZCwgdGhlbiBleGFjdCBtYXRjaCBmb3IgMi1jaGFycyByb290IHpvbmVzIHdpbGwgYmUgY2hlY2tlZC5cbiAqKi9cbkxpbmtpZnlJdC5wcm90b3R5cGUudGxkcyA9IGZ1bmN0aW9uIHRsZHMgKGxpc3QsIGtlZXBPbGQpIHtcbiAgbGlzdCA9IEFycmF5LmlzQXJyYXkobGlzdCkgPyBsaXN0IDogW2xpc3RdXG5cbiAgaWYgKCFrZWVwT2xkKSB7XG4gICAgdGhpcy5fX3RsZHNfXyA9IGxpc3Quc2xpY2UoKVxuICAgIHRoaXMuX190bGRzX3JlcGxhY2VkX18gPSB0cnVlXG4gICAgY29tcGlsZSh0aGlzKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICB0aGlzLl9fdGxkc19fID0gdGhpcy5fX3RsZHNfXy5jb25jYXQobGlzdClcbiAgICAuc29ydCgpXG4gICAgLmZpbHRlcihmdW5jdGlvbiAoZWwsIGlkeCwgYXJyKSB7XG4gICAgICByZXR1cm4gZWwgIT09IGFycltpZHggLSAxXVxuICAgIH0pXG4gICAgLnJldmVyc2UoKVxuXG4gIGNvbXBpbGUodGhpcylcbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBMaW5raWZ5SXQjbm9ybWFsaXplKG1hdGNoKVxuICpcbiAqIERlZmF1bHQgbm9ybWFsaXplciAoaWYgc2NoZW1hIGRvZXMgbm90IGRlZmluZSBpdCdzIG93bikuXG4gKiovXG5MaW5raWZ5SXQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSAobWF0Y2gpIHtcbiAgLy8gRG8gbWluaW1hbCBwb3NzaWJsZSBjaGFuZ2VzIGJ5IGRlZmF1bHQuIE5lZWQgdG8gY29sbGVjdCBmZWVkYmFjayBwcmlvclxuICAvLyB0byBtb3ZlIGZvcndhcmQgaHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L2xpbmtpZnktaXQvaXNzdWVzLzFcblxuICBpZiAoIW1hdGNoLnNjaGVtYSkgeyBtYXRjaC51cmwgPSAnaHR0cDovLycgKyBtYXRjaC51cmwgfVxuXG4gIGlmIChtYXRjaC5zY2hlbWEgPT09ICdtYWlsdG86JyAmJiAhL15tYWlsdG86L2kudGVzdChtYXRjaC51cmwpKSB7XG4gICAgbWF0Y2gudXJsID0gJ21haWx0bzonICsgbWF0Y2gudXJsXG4gIH1cbn1cblxuLyoqXG4gKiBMaW5raWZ5SXQjb25Db21waWxlKClcbiAqXG4gKiBPdmVycmlkZSB0byBtb2RpZnkgYmFzaWMgUmVnRXhwLXMuXG4gKiovXG5MaW5raWZ5SXQucHJvdG90eXBlLm9uQ29tcGlsZSA9IGZ1bmN0aW9uIG9uQ29tcGlsZSAoKSB7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpbmtpZnlJdFxuIiwiaW1wb3J0IHsgQW55LCBDYywgWiwgUCB9IGZyb20gJ3VjLm1pY3JvJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAob3B0cykge1xuICBjb25zdCByZSA9IHt9XG4gIG9wdHMgPSBvcHRzIHx8IHt9XG5cbiAgcmUuc3JjX0FueSA9IEFueS5zb3VyY2VcbiAgcmUuc3JjX0NjID0gQ2Muc291cmNlXG4gIHJlLnNyY19aID0gWi5zb3VyY2VcbiAgcmUuc3JjX1AgPSBQLnNvdXJjZVxuXG4gIC8vIFxccHtcXFpcXFBcXENjXFxDRn0gKHdoaXRlIHNwYWNlcyArIGNvbnRyb2wgKyBmb3JtYXQgKyBwdW5jdHVhdGlvbilcbiAgcmUuc3JjX1pQQ2MgPSBbcmUuc3JjX1osIHJlLnNyY19QLCByZS5zcmNfQ2NdLmpvaW4oJ3wnKVxuXG4gIC8vIFxccHtcXFpcXENjfSAod2hpdGUgc3BhY2VzICsgY29udHJvbClcbiAgcmUuc3JjX1pDYyA9IFtyZS5zcmNfWiwgcmUuc3JjX0NjXS5qb2luKCd8JylcblxuICAvLyBFeHBlcmltZW50YWwuIExpc3Qgb2YgY2hhcnMsIGNvbXBsZXRlbHkgcHJvaGliaXRlZCBpbiBsaW5rc1xuICAvLyBiZWNhdXNlIGNhbiBzZXBhcmF0ZSBpdCBmcm9tIG90aGVyIHBhcnQgb2YgdGV4dFxuICBjb25zdCB0ZXh0X3NlcGFyYXRvcnMgPSAnWz48XFx1ZmY1Y10nXG5cbiAgLy8gQWxsIHBvc3NpYmxlIHdvcmQgY2hhcmFjdGVycyAoZXZlcnl0aGluZyB3aXRob3V0IHB1bmN0dWF0aW9uLCBzcGFjZXMgJiBjb250cm9scylcbiAgLy8gRGVmaW5lZCB2aWEgcHVuY3R1YXRpb24gJiBzcGFjZXMgdG8gc2F2ZSBzcGFjZVxuICAvLyBTaG91bGQgYmUgc29tZXRoaW5nIGxpa2UgXFxwe1xcTFxcTlxcU1xcTX0gKFxcdyBidXQgd2l0aG91dCBgX2ApXG4gIHJlLnNyY19wc2V1ZG9fbGV0dGVyID0gJyg/Oig/IScgKyB0ZXh0X3NlcGFyYXRvcnMgKyAnfCcgKyByZS5zcmNfWlBDYyArICcpJyArIHJlLnNyY19BbnkgKyAnKSdcbiAgLy8gVGhlIHNhbWUgYXMgYWJvdGhlIGJ1dCB3aXRob3V0IFswLTldXG4gIC8vIHZhciBzcmNfcHNldWRvX2xldHRlcl9ub25fZCA9ICcoPzooPyFbMC05XXwnICsgc3JjX1pQQ2MgKyAnKScgKyBzcmNfQW55ICsgJyknO1xuXG4gIHJlLnNyY19pcDQgPVxuXG4gICAgJyg/OigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFxcXC4pezN9KDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPyknXG5cbiAgLy8gUHJvaGliaXQgYW55IG9mIFwiQC9bXSgpXCIgaW4gdXNlci9wYXNzIHRvIGF2b2lkIHdyb25nIGRvbWFpbiBmZXRjaC5cbiAgcmUuc3JjX2F1dGggPSAnKD86KD86KD8hJyArIHJlLnNyY19aQ2MgKyAnfFtAL1xcXFxbXFxcXF0oKV0pLikrQCk/J1xuXG4gIHJlLnNyY19wb3J0ID1cblxuICAgICcoPzo6KD86Nig/OlswLTRdXFxcXGR7M318NSg/OlswLTRdXFxcXGR7Mn18NSg/OlswLTJdXFxcXGR8M1swLTVdKSkpfFsxLTVdP1xcXFxkezEsNH0pKT8nXG5cbiAgcmUuc3JjX2hvc3RfdGVybWluYXRvciA9XG5cbiAgICAnKD89JHwnICsgdGV4dF9zZXBhcmF0b3JzICsgJ3wnICsgcmUuc3JjX1pQQ2MgKyAnKScgK1xuICAgICcoPyEnICsgKG9wdHNbJy0tLSddID8gJy0oPyEtLSl8JyA6ICctfCcpICsgJ198OlxcXFxkfFxcXFwuLXxcXFxcLig/ISR8JyArIHJlLnNyY19aUENjICsgJykpJ1xuXG4gIHJlLnNyY19wYXRoID1cblxuICAgICcoPzonICtcbiAgICAgICdbLz8jXScgK1xuICAgICAgICAnKD86JyArXG4gICAgICAgICAgJyg/IScgKyByZS5zcmNfWkNjICsgJ3wnICsgdGV4dF9zZXBhcmF0b3JzICsgJ3xbKClbXFxcXF17fS4sXCJcXCc/IVxcXFwtO10pLnwnICtcbiAgICAgICAgICAnXFxcXFsoPzooPyEnICsgcmUuc3JjX1pDYyArICd8XFxcXF0pLikqXFxcXF18JyArXG4gICAgICAgICAgJ1xcXFwoKD86KD8hJyArIHJlLnNyY19aQ2MgKyAnfFspXSkuKSpcXFxcKXwnICtcbiAgICAgICAgICAnXFxcXHsoPzooPyEnICsgcmUuc3JjX1pDYyArICd8W31dKS4pKlxcXFx9fCcgK1xuICAgICAgICAgICdcXFxcXCIoPzooPyEnICsgcmUuc3JjX1pDYyArICd8W1wiXSkuKStcXFxcXCJ8JyArXG4gICAgICAgICAgXCJcXFxcJyg/Oig/IVwiICsgcmUuc3JjX1pDYyArIFwifFsnXSkuKStcXFxcJ3xcIiArXG5cbiAgICAgICAgICAvLyBhbGxvdyBgSSdtX2tpbmdgIGlmIG5vIHBhaXIgZm91bmRcbiAgICAgICAgICBcIlxcXFwnKD89XCIgKyByZS5zcmNfcHNldWRvX2xldHRlciArICd8Wy1dKXwnICtcblxuICAgICAgICAgIC8vIGdvb2dsZSBoYXMgbWFueSBkb3RzIGluIFwiZ29vZ2xlIHNlYXJjaFwiIGxpbmtzICgjNjYsICM4MSkuXG4gICAgICAgICAgLy8gZ2l0aHViIGhhcyAuLi4gaW4gY29tbWl0IHJhbmdlIGxpbmtzLFxuICAgICAgICAgIC8vIFJlc3RyaWN0IHRvXG4gICAgICAgICAgLy8gLSBlbmdsaXNoXG4gICAgICAgICAgLy8gLSBwZXJjZW50LWVuY29kZWRcbiAgICAgICAgICAvLyAtIHBhcnRzIG9mIGZpbGUgcGF0aFxuICAgICAgICAgIC8vIC0gcGFyYW1zIHNlcGFyYXRvclxuICAgICAgICAgIC8vIHVudGlsIG1vcmUgZXhhbXBsZXMgZm91bmQuXG4gICAgICAgICAgJ1xcXFwuezIsfVthLXpBLVowLTklLyZdfCcgK1xuXG4gICAgICAgICAgJ1xcXFwuKD8hJyArIHJlLnNyY19aQ2MgKyAnfFsuXXwkKXwnICtcbiAgICAgICAgICAob3B0c1snLS0tJ11cbiAgICAgICAgICAgID8gJ1xcXFwtKD8hLS0oPzpbXi1dfCQpKSg/Oi0qKXwnIC8vIGAtLS1gID0+IGxvbmcgZGFzaCwgdGVybWluYXRlXG4gICAgICAgICAgICA6ICdcXFxcLSt8J1xuICAgICAgICAgICkgK1xuICAgICAgICAgIC8vIGFsbG93IGAsLCxgIGluIHBhdGhzXG4gICAgICAgICAgJywoPyEnICsgcmUuc3JjX1pDYyArICd8JCl8JyArXG5cbiAgICAgICAgICAvLyBhbGxvdyBgO2AgaWYgbm90IGZvbGxvd2VkIGJ5IHNwYWNlLWxpa2UgY2hhclxuICAgICAgICAgICc7KD8hJyArIHJlLnNyY19aQ2MgKyAnfCQpfCcgK1xuXG4gICAgICAgICAgLy8gYWxsb3cgYCEhIWAgaW4gcGF0aHMsIGJ1dCBub3QgYXQgdGhlIGVuZFxuICAgICAgICAgICdcXFxcISsoPyEnICsgcmUuc3JjX1pDYyArICd8WyFdfCQpfCcgK1xuXG4gICAgICAgICAgJ1xcXFw/KD8hJyArIHJlLnNyY19aQ2MgKyAnfFs/XXwkKScgK1xuICAgICAgICAnKSsnICtcbiAgICAgICd8XFxcXC8nICtcbiAgICAnKT8nXG5cbiAgLy8gQWxsb3cgYW55dGhpbmcgaW4gbWFya2Rvd24gc3BlYywgZm9yYmlkIHF1b3RlIChcIikgYXQgdGhlIGZpcnN0IHBvc2l0aW9uXG4gIC8vIGJlY2F1c2UgZW1haWxzIGVuY2xvc2VkIGluIHF1b3RlcyBhcmUgZmFyIG1vcmUgY29tbW9uXG4gIHJlLnNyY19lbWFpbF9uYW1lID1cblxuICAgICdbXFxcXC07OiY9XFxcXCtcXFxcJCxcXFxcLmEtekEtWjAtOV9dW1xcXFwtOzomPVxcXFwrXFxcXCQsXFxcXFwiXFxcXC5hLXpBLVowLTlfXSonXG5cbiAgcmUuc3JjX3huID1cblxuICAgICd4bi0tW2EtejAtOVxcXFwtXXsxLDU5fSdcblxuICAvLyBNb3JlIHRvIHJlYWQgYWJvdXQgZG9tYWluIG5hbWVzXG4gIC8vIGh0dHA6Ly9zZXJ2ZXJmYXVsdC5jb20vcXVlc3Rpb25zLzYzODI2MC9cblxuICByZS5zcmNfZG9tYWluX3Jvb3QgPVxuXG4gICAgLy8gQWxsb3cgbGV0dGVycyAmIGRpZ2l0cyAoaHR0cDovL3Rlc3QxKVxuICAgICcoPzonICtcbiAgICAgIHJlLnNyY194biArXG4gICAgICAnfCcgK1xuICAgICAgcmUuc3JjX3BzZXVkb19sZXR0ZXIgKyAnezEsNjN9JyArXG4gICAgJyknXG5cbiAgcmUuc3JjX2RvbWFpbiA9XG5cbiAgICAnKD86JyArXG4gICAgICByZS5zcmNfeG4gK1xuICAgICAgJ3wnICtcbiAgICAgICcoPzonICsgcmUuc3JjX3BzZXVkb19sZXR0ZXIgKyAnKScgK1xuICAgICAgJ3wnICtcbiAgICAgICcoPzonICsgcmUuc3JjX3BzZXVkb19sZXR0ZXIgKyAnKD86LXwnICsgcmUuc3JjX3BzZXVkb19sZXR0ZXIgKyAnKXswLDYxfScgKyByZS5zcmNfcHNldWRvX2xldHRlciArICcpJyArXG4gICAgJyknXG5cbiAgcmUuc3JjX2hvc3QgPVxuXG4gICAgJyg/OicgK1xuICAgIC8vIERvbid0IG5lZWQgSVAgY2hlY2ssIGJlY2F1c2UgZGlnaXRzIGFyZSBhbHJlYWR5IGFsbG93ZWQgaW4gbm9ybWFsIGRvbWFpbiBuYW1lc1xuICAgIC8vICAgc3JjX2lwNCArXG4gICAgLy8gJ3wnICtcbiAgICAgICcoPzooPzooPzonICsgcmUuc3JjX2RvbWFpbiArICcpXFxcXC4pKicgKyByZS5zcmNfZG9tYWluLyogX3Jvb3QgKi8gKyAnKScgK1xuICAgICcpJ1xuXG4gIHJlLnRwbF9ob3N0X2Z1enp5ID1cblxuICAgICcoPzonICtcbiAgICAgIHJlLnNyY19pcDQgK1xuICAgICd8JyArXG4gICAgICAnKD86KD86KD86JyArIHJlLnNyY19kb21haW4gKyAnKVxcXFwuKSsoPzolVExEUyUpKScgK1xuICAgICcpJ1xuXG4gIHJlLnRwbF9ob3N0X25vX2lwX2Z1enp5ID1cblxuICAgICcoPzooPzooPzonICsgcmUuc3JjX2RvbWFpbiArICcpXFxcXC4pKyg/OiVUTERTJSkpJ1xuXG4gIHJlLnNyY19ob3N0X3N0cmljdCA9XG5cbiAgICByZS5zcmNfaG9zdCArIHJlLnNyY19ob3N0X3Rlcm1pbmF0b3JcblxuICByZS50cGxfaG9zdF9mdXp6eV9zdHJpY3QgPVxuXG4gICAgcmUudHBsX2hvc3RfZnV6enkgKyByZS5zcmNfaG9zdF90ZXJtaW5hdG9yXG5cbiAgcmUuc3JjX2hvc3RfcG9ydF9zdHJpY3QgPVxuXG4gICAgcmUuc3JjX2hvc3QgKyByZS5zcmNfcG9ydCArIHJlLnNyY19ob3N0X3Rlcm1pbmF0b3JcblxuICByZS50cGxfaG9zdF9wb3J0X2Z1enp5X3N0cmljdCA9XG5cbiAgICByZS50cGxfaG9zdF9mdXp6eSArIHJlLnNyY19wb3J0ICsgcmUuc3JjX2hvc3RfdGVybWluYXRvclxuXG4gIHJlLnRwbF9ob3N0X3BvcnRfbm9faXBfZnV6enlfc3RyaWN0ID1cblxuICAgIHJlLnRwbF9ob3N0X25vX2lwX2Z1enp5ICsgcmUuc3JjX3BvcnQgKyByZS5zcmNfaG9zdF90ZXJtaW5hdG9yXG5cbiAgLy9cbiAgLy8gTWFpbiBydWxlc1xuICAvL1xuXG4gIC8vIFJ1ZGUgdGVzdCBmdXp6eSBsaW5rcyBieSBob3N0LCBmb3IgcXVpY2sgZGVueVxuICByZS50cGxfaG9zdF9mdXp6eV90ZXN0ID1cblxuICAgICdsb2NhbGhvc3R8d3d3XFxcXC58XFxcXC5cXFxcZHsxLDN9XFxcXC58KD86XFxcXC4oPzolVExEUyUpKD86JyArIHJlLnNyY19aUENjICsgJ3w+fCQpKSdcblxuICByZS50cGxfZW1haWxfZnV6enkgPVxuXG4gICAgICAnKF58JyArIHRleHRfc2VwYXJhdG9ycyArICd8XCJ8XFxcXCh8JyArIHJlLnNyY19aQ2MgKyAnKScgK1xuICAgICAgJygnICsgcmUuc3JjX2VtYWlsX25hbWUgKyAnQCcgKyByZS50cGxfaG9zdF9mdXp6eV9zdHJpY3QgKyAnKSdcblxuICByZS50cGxfbGlua19mdXp6eSA9XG4gICAgICAvLyBGdXp6eSBsaW5rIGNhbid0IGJlIHByZXBlbmRlZCB3aXRoIC46L1xcLSBhbmQgbm9uIHB1bmN0dWF0aW9uLlxuICAgICAgLy8gYnV0IGNhbiBzdGFydCB3aXRoID4gKG1hcmtkb3duIGJsb2NrcXVvdGUpXG4gICAgICAnKF58KD8hWy46L1xcXFwtX0BdKSg/OlskKzw9Pl5gfFxcdWZmNWNdfCcgKyByZS5zcmNfWlBDYyArICcpKScgK1xuICAgICAgJygoPyFbJCs8PT5eYHxcXHVmZjVjXSknICsgcmUudHBsX2hvc3RfcG9ydF9mdXp6eV9zdHJpY3QgKyByZS5zcmNfcGF0aCArICcpJ1xuXG4gIHJlLnRwbF9saW5rX25vX2lwX2Z1enp5ID1cbiAgICAgIC8vIEZ1enp5IGxpbmsgY2FuJ3QgYmUgcHJlcGVuZGVkIHdpdGggLjovXFwtIGFuZCBub24gcHVuY3R1YXRpb24uXG4gICAgICAvLyBidXQgY2FuIHN0YXJ0IHdpdGggPiAobWFya2Rvd24gYmxvY2txdW90ZSlcbiAgICAgICcoXnwoPyFbLjovXFxcXC1fQF0pKD86WyQrPD0+XmB8XFx1ZmY1Y118JyArIHJlLnNyY19aUENjICsgJykpJyArXG4gICAgICAnKCg/IVskKzw9Pl5gfFxcdWZmNWNdKScgKyByZS50cGxfaG9zdF9wb3J0X25vX2lwX2Z1enp5X3N0cmljdCArIHJlLnNyY19wYXRoICsgJyknXG5cbiAgcmV0dXJuIHJlXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cbmNvbnN0IG1heEludCA9IDIxNDc0ODM2NDc7IC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcblxuLyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqL1xuY29uc3QgYmFzZSA9IDM2O1xuY29uc3QgdE1pbiA9IDE7XG5jb25zdCB0TWF4ID0gMjY7XG5jb25zdCBza2V3ID0gMzg7XG5jb25zdCBkYW1wID0gNzAwO1xuY29uc3QgaW5pdGlhbEJpYXMgPSA3MjtcbmNvbnN0IGluaXRpYWxOID0gMTI4OyAvLyAweDgwXG5jb25zdCBkZWxpbWl0ZXIgPSAnLSc7IC8vICdcXHgyRCdcblxuLyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cbmNvbnN0IHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vO1xuY29uc3QgcmVnZXhOb25BU0NJSSA9IC9bXlxcMC1cXHg3Rl0vOyAvLyBOb3RlOiBVKzAwN0YgREVMIGlzIGV4Y2x1ZGVkIHRvby5cbmNvbnN0IHJlZ2V4U2VwYXJhdG9ycyA9IC9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2c7IC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcblxuLyoqIEVycm9yIG1lc3NhZ2VzICovXG5jb25zdCBlcnJvcnMgPSB7XG5cdCdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsXG5cdCdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsXG5cdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG59O1xuXG4vKiogQ29udmVuaWVuY2Ugc2hvcnRjdXRzICovXG5jb25zdCBiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW47XG5jb25zdCBmbG9vciA9IE1hdGguZmxvb3I7XG5jb25zdCBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuLyoqXG4gKiBBIGdlbmVyaWMgZXJyb3IgdXRpbGl0eSBmdW5jdGlvbi5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgZXJyb3IgdHlwZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhyb3dzIGEgYFJhbmdlRXJyb3JgIHdpdGggdGhlIGFwcGxpY2FibGUgZXJyb3IgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gZXJyb3IodHlwZSkge1xuXHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pO1xufVxuXG4vKipcbiAqIEEgZ2VuZXJpYyBgQXJyYXkjbWFwYCB1dGlsaXR5IGZ1bmN0aW9uLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBnZXRzIGNhbGxlZCBmb3IgZXZlcnkgYXJyYXlcbiAqIGl0ZW0uXG4gKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IGFycmF5IG9mIHZhbHVlcyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hcChhcnJheSwgY2FsbGJhY2spIHtcblx0Y29uc3QgcmVzdWx0ID0gW107XG5cdGxldCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdHdoaWxlIChsZW5ndGgtLSkge1xuXHRcdHJlc3VsdFtsZW5ndGhdID0gY2FsbGJhY2soYXJyYXlbbGVuZ3RoXSk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcbiAqIGFkZHJlc3Nlcy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG4gKiBjaGFyYWN0ZXIuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXBEb21haW4oZG9tYWluLCBjYWxsYmFjaykge1xuXHRjb25zdCBwYXJ0cyA9IGRvbWFpbi5zcGxpdCgnQCcpO1xuXHRsZXQgcmVzdWx0ID0gJyc7XG5cdGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG5cdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdC8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuXG5cdFx0cmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG5cdFx0ZG9tYWluID0gcGFydHNbMV07XG5cdH1cblx0Ly8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuXHRkb21haW4gPSBkb21haW4ucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRjb25zdCBsYWJlbHMgPSBkb21haW4uc3BsaXQoJy4nKTtcblx0Y29uc3QgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGNhbGxiYWNrKS5qb2luKCcuJyk7XG5cdHJldHVybiByZXN1bHQgKyBlbmNvZGVkO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcbiAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG4gKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcbiAqIG1hdGNoaW5nIFVURi0xNi5cbiAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG4gKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuICogQG5hbWUgZGVjb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFRoZSBVbmljb2RlIGlucHV0IHN0cmluZyAoVUNTLTIpLlxuICogQHJldHVybnMge0FycmF5fSBUaGUgbmV3IGFycmF5IG9mIGNvZGUgcG9pbnRzLlxuICovXG5mdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykge1xuXHRjb25zdCBvdXRwdXQgPSBbXTtcblx0bGV0IGNvdW50ZXIgPSAwO1xuXHRjb25zdCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHR3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuXHRcdGNvbnN0IHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHQvLyBJdCdzIGEgaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyLlxuXHRcdFx0Y29uc3QgZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuXHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIExvdyBzdXJyb2dhdGUuXG5cdFx0XHRcdG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJdCdzIGFuIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZVxuXHRcdFx0XHQvLyBuZXh0IGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci5cblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG4gKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcbiAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG4gKiBAbmFtZSBlbmNvZGVcbiAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG4gKi9cbmNvbnN0IHVjczJlbmNvZGUgPSBjb2RlUG9pbnRzID0+IFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cbiAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpbiB0aGUgcmFuZ2UgYDBgIHRvIGBiYXNlIC0gMWAsIG9yIGBiYXNlYCBpZlxuICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG4gKi9cbmNvbnN0IGJhc2ljVG9EaWdpdCA9IGZ1bmN0aW9uKGNvZGVQb2ludCkge1xuXHRpZiAoY29kZVBvaW50ID49IDB4MzAgJiYgY29kZVBvaW50IDwgMHgzQSkge1xuXHRcdHJldHVybiAyNiArIChjb2RlUG9pbnQgLSAweDMwKTtcblx0fVxuXHRpZiAoY29kZVBvaW50ID49IDB4NDEgJiYgY29kZVBvaW50IDwgMHg1Qikge1xuXHRcdHJldHVybiBjb2RlUG9pbnQgLSAweDQxO1xuXHR9XG5cdGlmIChjb2RlUG9pbnQgPj0gMHg2MSAmJiBjb2RlUG9pbnQgPCAweDdCKSB7XG5cdFx0cmV0dXJuIGNvZGVQb2ludCAtIDB4NjE7XG5cdH1cblx0cmV0dXJuIGJhc2U7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cbiAqIEBzZWUgYGJhc2ljVG9EaWdpdCgpYFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYmFzaWMgY29kZSBwb2ludCB3aG9zZSB2YWx1ZSAod2hlbiB1c2VkIGZvclxuICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpcyBgZGlnaXRgLCB3aGljaCBuZWVkcyB0byBiZSBpbiB0aGUgcmFuZ2VcbiAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuICogdXNlZDsgZWxzZSwgdGhlIGxvd2VyY2FzZSBmb3JtIGlzIHVzZWQuIFRoZSBiZWhhdmlvciBpcyB1bmRlZmluZWRcbiAqIGlmIGBmbGFnYCBpcyBub24temVybyBhbmQgYGRpZ2l0YCBoYXMgbm8gdXBwZXJjYXNlIGZvcm0uXG4gKi9cbmNvbnN0IGRpZ2l0VG9CYXNpYyA9IGZ1bmN0aW9uKGRpZ2l0LCBmbGFnKSB7XG5cdC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG5cdC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuXHRyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xufTtcblxuLyoqXG4gKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IGFkYXB0ID0gZnVuY3Rpb24oZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG5cdGxldCBrID0gMDtcblx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0ZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuXHRmb3IgKC8qIG5vIGluaXRpYWxpemF0aW9uICovOyBkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDE7IGsgKz0gYmFzZSkge1xuXHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0fVxuXHRyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcbiAqIHN5bWJvbHMuXG4gKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAqL1xuY29uc3QgZGVjb2RlID0gZnVuY3Rpb24oaW5wdXQpIHtcblx0Ly8gRG9uJ3QgdXNlIFVDUy0yLlxuXHRjb25zdCBvdXRwdXQgPSBbXTtcblx0Y29uc3QgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cdGxldCBpID0gMDtcblx0bGV0IG4gPSBpbml0aWFsTjtcblx0bGV0IGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHQvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcblx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0Ly8gdGhlIGZpcnN0IGJhc2ljIGNvZGUgcG9pbnRzIHRvIHRoZSBvdXRwdXQuXG5cblx0bGV0IGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0aWYgKGJhc2ljIDwgMCkge1xuXHRcdGJhc2ljID0gMDtcblx0fVxuXG5cdGZvciAobGV0IGogPSAwOyBqIDwgYmFzaWM7ICsraikge1xuXHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdGlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHtcblx0XHRcdGVycm9yKCdub3QtYmFzaWMnKTtcblx0XHR9XG5cdFx0b3V0cHV0LnB1c2goaW5wdXQuY2hhckNvZGVBdChqKSk7XG5cdH1cblxuXHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdC8vIHBvaW50cyB3ZXJlIGNvcGllZDsgc3RhcnQgYXQgdGhlIGJlZ2lubmluZyBvdGhlcndpc2UuXG5cblx0Zm9yIChsZXQgaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHQvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuXG5cdFx0Ly8gRGVjb2RlIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIgaW50byBgZGVsdGFgLFxuXHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0Ly8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmdcblx0XHQvLyB2YWx1ZSBhdCB0aGUgZW5kIHRvIG9idGFpbiBgZGVsdGFgLlxuXHRcdGNvbnN0IG9sZGkgPSBpO1xuXHRcdGZvciAobGV0IHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0aWYgKGluZGV4ID49IGlucHV0TGVuZ3RoKSB7XG5cdFx0XHRcdGVycm9yKCdpbnZhbGlkLWlucHV0Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGRpZ2l0ID0gYmFzaWNUb0RpZ2l0KGlucHV0LmNoYXJDb2RlQXQoaW5kZXgrKykpO1xuXG5cdFx0XHRpZiAoZGlnaXQgPj0gYmFzZSkge1xuXHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdGkgKz0gZGlnaXQgKiB3O1xuXHRcdFx0Y29uc3QgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cblx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdGlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHtcblx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHR9XG5cblx0XHRcdHcgKj0gYmFzZU1pbnVzVDtcblxuXHRcdH1cblxuXHRcdGNvbnN0IG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG5cdFx0Ly8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcblx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcblx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdH1cblxuXHRcdG4gKz0gZmxvb3IoaSAvIG91dCk7XG5cdFx0aSAlPSBvdXQ7XG5cblx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0LlxuXHRcdG91dHB1dC5zcGxpY2UoaSsrLCAwLCBuKTtcblxuXHR9XG5cblx0cmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLm91dHB1dCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG4gKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICogQG1lbWJlck9mIHB1bnljb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG4gKi9cbmNvbnN0IGVuY29kZSA9IGZ1bmN0aW9uKGlucHV0KSB7XG5cdGNvbnN0IG91dHB1dCA9IFtdO1xuXG5cdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIGFuIGFycmF5IG9mIFVuaWNvZGUgY29kZSBwb2ludHMuXG5cdGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cblx0Ly8gQ2FjaGUgdGhlIGxlbmd0aC5cblx0Y29uc3QgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cblx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGUuXG5cdGxldCBuID0gaW5pdGlhbE47XG5cdGxldCBkZWx0YSA9IDA7XG5cdGxldCBiaWFzID0gaW5pdGlhbEJpYXM7XG5cblx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50cy5cblx0Zm9yIChjb25zdCBjdXJyZW50VmFsdWUgb2YgaW5wdXQpIHtcblx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0b3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuXHRcdH1cblx0fVxuXG5cdGNvbnN0IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcblx0bGV0IGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGg7XG5cblx0Ly8gYGhhbmRsZWRDUENvdW50YCBpcyB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cdC8vIGBiYXNpY0xlbmd0aGAgaXMgdGhlIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy5cblxuXHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyB3aXRoIGEgZGVsaW1pdGVyIHVubGVzcyBpdCdzIGVtcHR5LlxuXHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRvdXRwdXQucHVzaChkZWxpbWl0ZXIpO1xuXHR9XG5cblx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHR3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkge1xuXG5cdFx0Ly8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dFxuXHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0bGV0IG0gPSBtYXhJbnQ7XG5cdFx0Zm9yIChjb25zdCBjdXJyZW50VmFsdWUgb2YgaW5wdXQpIHtcblx0XHRcdGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG5cdFx0XHRcdG0gPSBjdXJyZW50VmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LFxuXHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93LlxuXHRcdGNvbnN0IGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcblx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0fVxuXG5cdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRuID0gbTtcblxuXHRcdGZvciAoY29uc3QgY3VycmVudFZhbHVlIG9mIGlucHV0KSB7XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA9PT0gbikge1xuXHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cblx0XHRcdFx0bGV0IHEgPSBkZWx0YTtcblx0XHRcdFx0Zm9yIChsZXQgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7XG5cdFx0XHRcdFx0Y29uc3QgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29uc3QgcU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdGNvbnN0IGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0XHRvdXRwdXQucHVzaChcblx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7XG5cdFx0XHRcdGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRkZWx0YSA9IDA7XG5cdFx0XHRcdCsraGFuZGxlZENQQ291bnQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0KytkZWx0YTtcblx0XHQrK247XG5cblx0fVxuXHRyZXR1cm4gb3V0cHV0LmpvaW4oJycpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzXG4gKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuXG4gKiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCBvbiBhIHN0cmluZyB0aGF0IGhhcyBhbHJlYWR5IGJlZW5cbiAqIGNvbnZlcnRlZCB0byBVbmljb2RlLlxuICogQG1lbWJlck9mIHB1bnljb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlZCBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvXG4gKiBjb252ZXJ0IHRvIFVuaWNvZGUuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGVcbiAqIHN0cmluZy5cbiAqL1xuY29uc3QgdG9Vbmljb2RlID0gZnVuY3Rpb24oaW5wdXQpIHtcblx0cmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG5cdFx0cmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpXG5cdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdDogc3RyaW5nO1xuXHR9KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG4gKiBQdW55Y29kZS4gT25seSB0aGUgbm9uLUFTQ0lJIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB3aWxsIGJlIGNvbnZlcnRlZCxcbiAqIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgd2l0aCBhIGRvbWFpbiB0aGF0J3MgYWxyZWFkeSBpblxuICogQVNDSUkuXG4gKiBAbWVtYmVyT2YgcHVueWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0byBjb252ZXJ0LCBhcyBhXG4gKiBVbmljb2RlIHN0cmluZy5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBQdW55Y29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gZG9tYWluIG5hbWUgb3JcbiAqIGVtYWlsIGFkZHJlc3MuXG4gKi9cbmNvbnN0IHRvQVNDSUkgPSBmdW5jdGlvbihpbnB1dCkge1xuXHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRyZXR1cm4gcmVnZXhOb25BU0NJSS50ZXN0KHN0cmluZylcblx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdDogc3RyaW5nO1xuXHR9KTtcbn07XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4vKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5jb25zdCBwdW55Y29kZSA9IHtcblx0LyoqXG5cdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEB0eXBlIFN0cmluZ1xuXHQgKi9cblx0J3ZlcnNpb24nOiAnMi4zLjEnLFxuXHQvKipcblx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0ICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cblx0ICogQHNlZSA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmc+XG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAdHlwZSBPYmplY3Rcblx0ICovXG5cdCd1Y3MyJzoge1xuXHRcdCdkZWNvZGUnOiB1Y3MyZGVjb2RlLFxuXHRcdCdlbmNvZGUnOiB1Y3MyZW5jb2RlXG5cdH0sXG5cdCdkZWNvZGUnOiBkZWNvZGUsXG5cdCdlbmNvZGUnOiBlbmNvZGUsXG5cdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0J3RvVW5pY29kZSc6IHRvVW5pY29kZVxufTtcblxuZXhwb3J0IHsgdWNzMmRlY29kZSwgdWNzMmVuY29kZSwgZGVjb2RlLCBlbmNvZGUsIHRvQVNDSUksIHRvVW5pY29kZSB9O1xuZXhwb3J0IGRlZmF1bHQgcHVueWNvZGU7XG4iLCIvLyBNYWluIHBhcnNlciBjbGFzc1xuXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2NvbW1vbi91dGlscy5tanMnXG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJy4vaGVscGVycy9pbmRleC5tanMnXG5pbXBvcnQgUmVuZGVyZXIgZnJvbSAnLi9yZW5kZXJlci5tanMnXG5pbXBvcnQgUGFyc2VyQ29yZSBmcm9tICcuL3BhcnNlcl9jb3JlLm1qcydcbmltcG9ydCBQYXJzZXJCbG9jayBmcm9tICcuL3BhcnNlcl9ibG9jay5tanMnXG5pbXBvcnQgUGFyc2VySW5saW5lIGZyb20gJy4vcGFyc2VyX2lubGluZS5tanMnXG5pbXBvcnQgTGlua2lmeUl0IGZyb20gJ2xpbmtpZnktaXQnXG5pbXBvcnQgKiBhcyBtZHVybCBmcm9tICdtZHVybCdcbmltcG9ydCBwdW55Y29kZSBmcm9tICdwdW55Y29kZS5qcydcblxuaW1wb3J0IGNmZ19kZWZhdWx0IGZyb20gJy4vcHJlc2V0cy9kZWZhdWx0Lm1qcydcbmltcG9ydCBjZmdfemVybyBmcm9tICcuL3ByZXNldHMvemVyby5tanMnXG5pbXBvcnQgY2ZnX2NvbW1vbm1hcmsgZnJvbSAnLi9wcmVzZXRzL2NvbW1vbm1hcmsubWpzJ1xuXG5jb25zdCBjb25maWcgPSB7XG4gIGRlZmF1bHQ6IGNmZ19kZWZhdWx0LFxuICB6ZXJvOiBjZmdfemVybyxcbiAgY29tbW9ubWFyazogY2ZnX2NvbW1vbm1hcmtcbn1cblxuLy9cbi8vIFRoaXMgdmFsaWRhdG9yIGNhbiBwcm9oaWJpdCBtb3JlIHRoYW4gcmVhbGx5IG5lZWRlZCB0byBwcmV2ZW50IFhTUy4gSXQncyBhXG4vLyB0cmFkZW9mZiB0byBrZWVwIGNvZGUgc2ltcGxlIGFuZCB0byBiZSBzZWN1cmUgYnkgZGVmYXVsdC5cbi8vXG4vLyBJZiB5b3UgbmVlZCBkaWZmZXJlbnQgc2V0dXAgLSBvdmVycmlkZSB2YWxpZGF0b3IgbWV0aG9kIGFzIHlvdSB3aXNoLiBPclxuLy8gcmVwbGFjZSBpdCB3aXRoIGR1bW15IGZ1bmN0aW9uIGFuZCB1c2UgZXh0ZXJuYWwgc2FuaXRpemVyLlxuLy9cblxuY29uc3QgQkFEX1BST1RPX1JFID0gL14odmJzY3JpcHR8amF2YXNjcmlwdHxmaWxlfGRhdGEpOi9cbmNvbnN0IEdPT0RfREFUQV9SRSA9IC9eZGF0YTppbWFnZVxcLyhnaWZ8cG5nfGpwZWd8d2VicCk7L1xuXG5mdW5jdGlvbiB2YWxpZGF0ZUxpbmsgKHVybCkge1xuICAvLyB1cmwgc2hvdWxkIGJlIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludCwgYW5kIGV4aXN0aW5nIGVudGl0aWVzIGFyZSBkZWNvZGVkXG4gIGNvbnN0IHN0ciA9IHVybC50cmltKCkudG9Mb3dlckNhc2UoKVxuXG4gIHJldHVybiBCQURfUFJPVE9fUkUudGVzdChzdHIpID8gR09PRF9EQVRBX1JFLnRlc3Qoc3RyKSA6IHRydWVcbn1cblxuY29uc3QgUkVDT0RFX0hPU1ROQU1FX0ZPUiA9IFsnaHR0cDonLCAnaHR0cHM6JywgJ21haWx0bzonXVxuXG5mdW5jdGlvbiBub3JtYWxpemVMaW5rICh1cmwpIHtcbiAgY29uc3QgcGFyc2VkID0gbWR1cmwucGFyc2UodXJsLCB0cnVlKVxuXG4gIGlmIChwYXJzZWQuaG9zdG5hbWUpIHtcbiAgICAvLyBFbmNvZGUgaG9zdG5hbWVzIGluIHVybHMgbGlrZTpcbiAgICAvLyBgaHR0cDovL2hvc3QvYCwgYGh0dHBzOi8vaG9zdC9gLCBgbWFpbHRvOnVzZXJAaG9zdGAsIGAvL2hvc3QvYFxuICAgIC8vXG4gICAgLy8gV2UgZG9uJ3QgZW5jb2RlIHVua25vd24gc2NoZW1hcywgYmVjYXVzZSBpdCdzIGxpa2VseSB0aGF0IHdlIGVuY29kZVxuICAgIC8vIHNvbWV0aGluZyB3ZSBzaG91bGRuJ3QgKGUuZy4gYHNreXBlOm5hbWVgIHRyZWF0ZWQgYXMgYHNreXBlOmhvc3RgKVxuICAgIC8vXG4gICAgaWYgKCFwYXJzZWQucHJvdG9jb2wgfHwgUkVDT0RFX0hPU1ROQU1FX0ZPUi5pbmRleE9mKHBhcnNlZC5wcm90b2NvbCkgPj0gMCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcGFyc2VkLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSShwYXJzZWQuaG9zdG5hbWUpXG4gICAgICB9IGNhdGNoIChlcikgeyAvKiovIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWR1cmwuZW5jb2RlKG1kdXJsLmZvcm1hdChwYXJzZWQpKVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVMaW5rVGV4dCAodXJsKSB7XG4gIGNvbnN0IHBhcnNlZCA9IG1kdXJsLnBhcnNlKHVybCwgdHJ1ZSlcblxuICBpZiAocGFyc2VkLmhvc3RuYW1lKSB7XG4gICAgLy8gRW5jb2RlIGhvc3RuYW1lcyBpbiB1cmxzIGxpa2U6XG4gICAgLy8gYGh0dHA6Ly9ob3N0L2AsIGBodHRwczovL2hvc3QvYCwgYG1haWx0bzp1c2VyQGhvc3RgLCBgLy9ob3N0L2BcbiAgICAvL1xuICAgIC8vIFdlIGRvbid0IGVuY29kZSB1bmtub3duIHNjaGVtYXMsIGJlY2F1c2UgaXQncyBsaWtlbHkgdGhhdCB3ZSBlbmNvZGVcbiAgICAvLyBzb21ldGhpbmcgd2Ugc2hvdWxkbid0IChlLmcuIGBza3lwZTpuYW1lYCB0cmVhdGVkIGFzIGBza3lwZTpob3N0YClcbiAgICAvL1xuICAgIGlmICghcGFyc2VkLnByb3RvY29sIHx8IFJFQ09ERV9IT1NUTkFNRV9GT1IuaW5kZXhPZihwYXJzZWQucHJvdG9jb2wpID49IDApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHBhcnNlZC5ob3N0bmFtZSA9IHB1bnljb2RlLnRvVW5pY29kZShwYXJzZWQuaG9zdG5hbWUpXG4gICAgICB9IGNhdGNoIChlcikgeyAvKiovIH1cbiAgICB9XG4gIH1cblxuICAvLyBhZGQgJyUnIHRvIGV4Y2x1ZGUgbGlzdCBiZWNhdXNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9tYXJrZG93bi1pdC9pc3N1ZXMvNzIwXG4gIHJldHVybiBtZHVybC5kZWNvZGUobWR1cmwuZm9ybWF0KHBhcnNlZCksIG1kdXJsLmRlY29kZS5kZWZhdWx0Q2hhcnMgKyAnJScpXG59XG5cbi8qKlxuICogY2xhc3MgTWFya2Rvd25JdFxuICpcbiAqIE1haW4gcGFyc2VyL3JlbmRlcmVyIGNsYXNzLlxuICpcbiAqICMjIyMjIFVzYWdlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogLy8gbm9kZS5qcywgXCJjbGFzc2ljXCIgd2F5OlxuICogdmFyIE1hcmtkb3duSXQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpLFxuICogICAgIG1kID0gbmV3IE1hcmtkb3duSXQoKTtcbiAqIHZhciByZXN1bHQgPSBtZC5yZW5kZXIoJyMgbWFya2Rvd24taXQgcnVsZXp6IScpO1xuICpcbiAqIC8vIG5vZGUuanMsIHRoZSBzYW1lLCBidXQgd2l0aCBzdWdhcjpcbiAqIHZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0JykoKTtcbiAqIHZhciByZXN1bHQgPSBtZC5yZW5kZXIoJyMgbWFya2Rvd24taXQgcnVsZXp6IScpO1xuICpcbiAqIC8vIGJyb3dzZXIgd2l0aG91dCBBTUQsIGFkZGVkIHRvIFwid2luZG93XCIgb24gc2NyaXB0IGxvYWRcbiAqIC8vIE5vdGUsIHRoZXJlIGFyZSBubyBkYXNoLlxuICogdmFyIG1kID0gd2luZG93Lm1hcmtkb3duaXQoKTtcbiAqIHZhciByZXN1bHQgPSBtZC5yZW5kZXIoJyMgbWFya2Rvd24taXQgcnVsZXp6IScpO1xuICogYGBgXG4gKlxuICogU2luZ2xlIGxpbmUgcmVuZGVyaW5nLCB3aXRob3V0IHBhcmFncmFwaCB3cmFwOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0JykoKTtcbiAqIHZhciByZXN1bHQgPSBtZC5yZW5kZXJJbmxpbmUoJ19fbWFya2Rvd24taXRfXyBydWxlenohJyk7XG4gKiBgYGBcbiAqKi9cblxuLyoqXG4gKiBuZXcgTWFya2Rvd25JdChbcHJlc2V0TmFtZSwgb3B0aW9uc10pXG4gKiAtIHByZXNldE5hbWUgKFN0cmluZyk6IG9wdGlvbmFsLCBgY29tbW9ubWFya2AgLyBgemVyb2BcbiAqIC0gb3B0aW9ucyAoT2JqZWN0KVxuICpcbiAqIENyZWF0ZXMgcGFyc2VyIGluc3RhbnNlIHdpdGggZ2l2ZW4gY29uZmlnLiBDYW4gYmUgY2FsbGVkIHdpdGhvdXQgYG5ld2AuXG4gKlxuICogIyMjIyMgcHJlc2V0TmFtZVxuICpcbiAqIE1hcmtkb3duSXQgcHJvdmlkZXMgbmFtZWQgcHJlc2V0cyBhcyBhIGNvbnZlbmllbmNlIHRvIHF1aWNrbHlcbiAqIGVuYWJsZS9kaXNhYmxlIGFjdGl2ZSBzeW50YXggcnVsZXMgYW5kIG9wdGlvbnMgZm9yIGNvbW1vbiB1c2UgY2FzZXMuXG4gKlxuICogLSBbXCJjb21tb25tYXJrXCJdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9tYXJrZG93bi1pdC9ibG9iL21hc3Rlci9saWIvcHJlc2V0cy9jb21tb25tYXJrLm1qcykgLVxuICogICBjb25maWd1cmVzIHBhcnNlciB0byBzdHJpY3QgW0NvbW1vbk1hcmtdKGh0dHA6Ly9jb21tb25tYXJrLm9yZy8pIG1vZGUuXG4gKiAtIFtkZWZhdWx0XShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQvYmxvYi9tYXN0ZXIvbGliL3ByZXNldHMvZGVmYXVsdC5tanMpIC1cbiAqICAgc2ltaWxhciB0byBHRk0sIHVzZWQgd2hlbiBubyBwcmVzZXQgbmFtZSBnaXZlbi4gRW5hYmxlcyBhbGwgYXZhaWxhYmxlIHJ1bGVzLFxuICogICBidXQgc3RpbGwgd2l0aG91dCBodG1sLCB0eXBvZ3JhcGhlciAmIGF1dG9saW5rZXIuXG4gKiAtIFtcInplcm9cIl0oaHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0L2Jsb2IvbWFzdGVyL2xpYi9wcmVzZXRzL3plcm8ubWpzKSAtXG4gKiAgIGFsbCBydWxlcyBkaXNhYmxlZC4gVXNlZnVsIHRvIHF1aWNrbHkgc2V0dXAgeW91ciBjb25maWcgdmlhIGAuZW5hYmxlKClgLlxuICogICBGb3IgZXhhbXBsZSwgd2hlbiB5b3UgbmVlZCBvbmx5IGBib2xkYCBhbmQgYGl0YWxpY2AgbWFya3VwIGFuZCBub3RoaW5nIGVsc2UuXG4gKlxuICogIyMjIyMgb3B0aW9uczpcbiAqXG4gKiAtIF9faHRtbF9fIC0gYGZhbHNlYC4gU2V0IGB0cnVlYCB0byBlbmFibGUgSFRNTCB0YWdzIGluIHNvdXJjZS4gQmUgY2FyZWZ1bCFcbiAqICAgVGhhdCdzIG5vdCBzYWZlISBZb3UgbWF5IG5lZWQgZXh0ZXJuYWwgc2FuaXRpemVyIHRvIHByb3RlY3Qgb3V0cHV0IGZyb20gWFNTLlxuICogICBJdCdzIGJldHRlciB0byBleHRlbmQgZmVhdHVyZXMgdmlhIHBsdWdpbnMsIGluc3RlYWQgb2YgZW5hYmxpbmcgSFRNTC5cbiAqIC0gX194aHRtbE91dF9fIC0gYGZhbHNlYC4gU2V0IGB0cnVlYCB0byBhZGQgJy8nIHdoZW4gY2xvc2luZyBzaW5nbGUgdGFnc1xuICogICAoYDxiciAvPmApLiBUaGlzIGlzIG5lZWRlZCBvbmx5IGZvciBmdWxsIENvbW1vbk1hcmsgY29tcGF0aWJpbGl0eS4gSW4gcmVhbFxuICogICB3b3JsZCB5b3Ugd2lsbCBuZWVkIEhUTUwgb3V0cHV0LlxuICogLSBfX2JyZWFrc19fIC0gYGZhbHNlYC4gU2V0IGB0cnVlYCB0byBjb252ZXJ0IGBcXG5gIGluIHBhcmFncmFwaHMgaW50byBgPGJyPmAuXG4gKiAtIF9fbGFuZ1ByZWZpeF9fIC0gYGxhbmd1YWdlLWAuIENTUyBsYW5ndWFnZSBjbGFzcyBwcmVmaXggZm9yIGZlbmNlZCBibG9ja3MuXG4gKiAgIENhbiBiZSB1c2VmdWwgZm9yIGV4dGVybmFsIGhpZ2hsaWdodGVycy5cbiAqIC0gX19saW5raWZ5X18gLSBgZmFsc2VgLiBTZXQgYHRydWVgIHRvIGF1dG9jb252ZXJ0IFVSTC1saWtlIHRleHQgdG8gbGlua3MuXG4gKiAtIF9fdHlwb2dyYXBoZXJfXyAgLSBgZmFsc2VgLiBTZXQgYHRydWVgIHRvIGVuYWJsZSBbc29tZSBsYW5ndWFnZS1uZXV0cmFsXG4gKiAgIHJlcGxhY2VtZW50XShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQvYmxvYi9tYXN0ZXIvbGliL3J1bGVzX2NvcmUvcmVwbGFjZW1lbnRzLm1qcykgK1xuICogICBxdW90ZXMgYmVhdXRpZmljYXRpb24gKHNtYXJ0cXVvdGVzKS5cbiAqIC0gX19xdW90ZXNfXyAtIGDigJzigJ3igJjigJlgLCBTdHJpbmcgb3IgQXJyYXkuIERvdWJsZSArIHNpbmdsZSBxdW90ZXMgcmVwbGFjZW1lbnRcbiAqICAgcGFpcnMsIHdoZW4gdHlwb2dyYXBoZXIgZW5hYmxlZCBhbmQgc21hcnRxdW90ZXMgb24uIEZvciBleGFtcGxlLCB5b3UgY2FuXG4gKiAgIHVzZSBgJ8KrwrvigJ7igJwnYCBmb3IgUnVzc2lhbiwgYCfigJ7igJzigJrigJgnYCBmb3IgR2VybWFuLCBhbmRcbiAqICAgYFsnwqtcXHhBMCcsICdcXHhBMMK7JywgJ+KAuVxceEEwJywgJ1xceEEw4oC6J11gIGZvciBGcmVuY2ggKGluY2x1ZGluZyBuYnNwKS5cbiAqIC0gX19oaWdobGlnaHRfXyAtIGBudWxsYC4gSGlnaGxpZ2h0ZXIgZnVuY3Rpb24gZm9yIGZlbmNlZCBjb2RlIGJsb2Nrcy5cbiAqICAgSGlnaGxpZ2h0ZXIgYGZ1bmN0aW9uIChzdHIsIGxhbmcpYCBzaG91bGQgcmV0dXJuIGVzY2FwZWQgSFRNTC4gSXQgY2FuIGFsc29cbiAqICAgcmV0dXJuIGVtcHR5IHN0cmluZyBpZiB0aGUgc291cmNlIHdhcyBub3QgY2hhbmdlZCBhbmQgc2hvdWxkIGJlIGVzY2FwZWRcbiAqICAgZXh0ZXJuYWx5LiBJZiByZXN1bHQgc3RhcnRzIHdpdGggPHByZS4uLiBpbnRlcm5hbCB3cmFwcGVyIGlzIHNraXBwZWQuXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIGNvbW1vbm1hcmsgbW9kZVxuICogdmFyIG1kID0gcmVxdWlyZSgnbWFya2Rvd24taXQnKSgnY29tbW9ubWFyaycpO1xuICpcbiAqIC8vIGRlZmF1bHQgbW9kZVxuICogdmFyIG1kID0gcmVxdWlyZSgnbWFya2Rvd24taXQnKSgpO1xuICpcbiAqIC8vIGVuYWJsZSBldmVyeXRoaW5nXG4gKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKHtcbiAqICAgaHRtbDogdHJ1ZSxcbiAqICAgbGlua2lmeTogdHJ1ZSxcbiAqICAgdHlwb2dyYXBoZXI6IHRydWVcbiAqIH0pO1xuICogYGBgXG4gKlxuICogIyMjIyMgU3ludGF4IGhpZ2hsaWdodGluZ1xuICpcbiAqIGBgYGpzXG4gKiB2YXIgaGxqcyA9IHJlcXVpcmUoJ2hpZ2hsaWdodC5qcycpIC8vIGh0dHBzOi8vaGlnaGxpZ2h0anMub3JnL1xuICpcbiAqIHZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0Jykoe1xuICogICBoaWdobGlnaHQ6IGZ1bmN0aW9uIChzdHIsIGxhbmcpIHtcbiAqICAgICBpZiAobGFuZyAmJiBobGpzLmdldExhbmd1YWdlKGxhbmcpKSB7XG4gKiAgICAgICB0cnkge1xuICogICAgICAgICByZXR1cm4gaGxqcy5oaWdobGlnaHQoc3RyLCB7IGxhbmd1YWdlOiBsYW5nLCBpZ25vcmVJbGxlZ2FsczogdHJ1ZSB9KS52YWx1ZTtcbiAqICAgICAgIH0gY2F0Y2ggKF9fKSB7fVxuICogICAgIH1cbiAqXG4gKiAgICAgcmV0dXJuICcnOyAvLyB1c2UgZXh0ZXJuYWwgZGVmYXVsdCBlc2NhcGluZ1xuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIE9yIHdpdGggZnVsbCB3cmFwcGVyIG92ZXJyaWRlIChpZiB5b3UgbmVlZCBhc3NpZ24gY2xhc3MgdG8gYDxwcmU+YCBvciBgPGNvZGU+YCk6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIGhsanMgPSByZXF1aXJlKCdoaWdobGlnaHQuanMnKSAvLyBodHRwczovL2hpZ2hsaWdodGpzLm9yZy9cbiAqXG4gKiAvLyBBY3R1YWwgZGVmYXVsdCB2YWx1ZXNcbiAqIHZhciBtZCA9IHJlcXVpcmUoJ21hcmtkb3duLWl0Jykoe1xuICogICBoaWdobGlnaHQ6IGZ1bmN0aW9uIChzdHIsIGxhbmcpIHtcbiAqICAgICBpZiAobGFuZyAmJiBobGpzLmdldExhbmd1YWdlKGxhbmcpKSB7XG4gKiAgICAgICB0cnkge1xuICogICAgICAgICByZXR1cm4gJzxwcmU+PGNvZGUgY2xhc3M9XCJobGpzXCI+JyArXG4gKiAgICAgICAgICAgICAgICBobGpzLmhpZ2hsaWdodChzdHIsIHsgbGFuZ3VhZ2U6IGxhbmcsIGlnbm9yZUlsbGVnYWxzOiB0cnVlIH0pLnZhbHVlICtcbiAqICAgICAgICAgICAgICAgICc8L2NvZGU+PC9wcmU+JztcbiAqICAgICAgIH0gY2F0Y2ggKF9fKSB7fVxuICogICAgIH1cbiAqXG4gKiAgICAgcmV0dXJuICc8cHJlPjxjb2RlIGNsYXNzPVwiaGxqc1wiPicgKyBtZC51dGlscy5lc2NhcGVIdG1sKHN0cikgKyAnPC9jb2RlPjwvcHJlPic7XG4gKiAgIH1cbiAqIH0pO1xuICogYGBgXG4gKlxuICoqL1xuZnVuY3Rpb24gTWFya2Rvd25JdCAocHJlc2V0TmFtZSwgb3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTWFya2Rvd25JdCkpIHtcbiAgICByZXR1cm4gbmV3IE1hcmtkb3duSXQocHJlc2V0TmFtZSwgb3B0aW9ucylcbiAgfVxuXG4gIGlmICghb3B0aW9ucykge1xuICAgIGlmICghdXRpbHMuaXNTdHJpbmcocHJlc2V0TmFtZSkpIHtcbiAgICAgIG9wdGlvbnMgPSBwcmVzZXROYW1lIHx8IHt9XG4gICAgICBwcmVzZXROYW1lID0gJ2RlZmF1bHQnXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1hcmtkb3duSXQjaW5saW5lIC0+IFBhcnNlcklubGluZVxuICAgKlxuICAgKiBJbnN0YW5jZSBvZiBbW1BhcnNlcklubGluZV1dLiBZb3UgbWF5IG5lZWQgaXQgdG8gYWRkIG5ldyBydWxlcyB3aGVuXG4gICAqIHdyaXRpbmcgcGx1Z2lucy4gRm9yIHNpbXBsZSBydWxlcyBjb250cm9sIHVzZSBbW01hcmtkb3duSXQuZGlzYWJsZV1dIGFuZFxuICAgKiBbW01hcmtkb3duSXQuZW5hYmxlXV0uXG4gICAqKi9cbiAgdGhpcy5pbmxpbmUgPSBuZXcgUGFyc2VySW5saW5lKClcblxuICAvKipcbiAgICogTWFya2Rvd25JdCNibG9jayAtPiBQYXJzZXJCbG9ja1xuICAgKlxuICAgKiBJbnN0YW5jZSBvZiBbW1BhcnNlckJsb2NrXV0uIFlvdSBtYXkgbmVlZCBpdCB0byBhZGQgbmV3IHJ1bGVzIHdoZW5cbiAgICogd3JpdGluZyBwbHVnaW5zLiBGb3Igc2ltcGxlIHJ1bGVzIGNvbnRyb2wgdXNlIFtbTWFya2Rvd25JdC5kaXNhYmxlXV0gYW5kXG4gICAqIFtbTWFya2Rvd25JdC5lbmFibGVdXS5cbiAgICoqL1xuICB0aGlzLmJsb2NrID0gbmV3IFBhcnNlckJsb2NrKClcblxuICAvKipcbiAgICogTWFya2Rvd25JdCNjb3JlIC0+IENvcmVcbiAgICpcbiAgICogSW5zdGFuY2Ugb2YgW1tDb3JlXV0gY2hhaW4gZXhlY3V0b3IuIFlvdSBtYXkgbmVlZCBpdCB0byBhZGQgbmV3IHJ1bGVzIHdoZW5cbiAgICogd3JpdGluZyBwbHVnaW5zLiBGb3Igc2ltcGxlIHJ1bGVzIGNvbnRyb2wgdXNlIFtbTWFya2Rvd25JdC5kaXNhYmxlXV0gYW5kXG4gICAqIFtbTWFya2Rvd25JdC5lbmFibGVdXS5cbiAgICoqL1xuICB0aGlzLmNvcmUgPSBuZXcgUGFyc2VyQ29yZSgpXG5cbiAgLyoqXG4gICAqIE1hcmtkb3duSXQjcmVuZGVyZXIgLT4gUmVuZGVyZXJcbiAgICpcbiAgICogSW5zdGFuY2Ugb2YgW1tSZW5kZXJlcl1dLiBVc2UgaXQgdG8gbW9kaWZ5IG91dHB1dCBsb29rLiBPciB0byBhZGQgcmVuZGVyaW5nXG4gICAqIHJ1bGVzIGZvciBuZXcgdG9rZW4gdHlwZXMsIGdlbmVyYXRlZCBieSBwbHVnaW5zLlxuICAgKlxuICAgKiAjIyMjIyBFeGFtcGxlXG4gICAqXG4gICAqIGBgYGphdmFzY3JpcHRcbiAgICogdmFyIG1kID0gcmVxdWlyZSgnbWFya2Rvd24taXQnKSgpO1xuICAgKlxuICAgKiBmdW5jdGlvbiBteVRva2VuKHRva2VucywgaWR4LCBvcHRpb25zLCBlbnYsIHNlbGYpIHtcbiAgICogICAvLy4uLlxuICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAqIH07XG4gICAqXG4gICAqIG1kLnJlbmRlcmVyLnJ1bGVzWydteV90b2tlbiddID0gbXlUb2tlblxuICAgKiBgYGBcbiAgICpcbiAgICogU2VlIFtbUmVuZGVyZXJdXSBkb2NzIGFuZCBbc291cmNlIGNvZGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9tYXJrZG93bi1pdC9ibG9iL21hc3Rlci9saWIvcmVuZGVyZXIubWpzKS5cbiAgICoqL1xuICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKClcblxuICAvKipcbiAgICogTWFya2Rvd25JdCNsaW5raWZ5IC0+IExpbmtpZnlJdFxuICAgKlxuICAgKiBbbGlua2lmeS1pdF0oaHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L2xpbmtpZnktaXQpIGluc3RhbmNlLlxuICAgKiBVc2VkIGJ5IFtsaW5raWZ5XShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQvYmxvYi9tYXN0ZXIvbGliL3J1bGVzX2NvcmUvbGlua2lmeS5tanMpXG4gICAqIHJ1bGUuXG4gICAqKi9cbiAgdGhpcy5saW5raWZ5ID0gbmV3IExpbmtpZnlJdCgpXG5cbiAgLyoqXG4gICAqIE1hcmtkb3duSXQjdmFsaWRhdGVMaW5rKHVybCkgLT4gQm9vbGVhblxuICAgKlxuICAgKiBMaW5rIHZhbGlkYXRpb24gZnVuY3Rpb24uIENvbW1vbk1hcmsgYWxsb3dzIHRvbyBtdWNoIGluIGxpbmtzLiBCeSBkZWZhdWx0XG4gICAqIHdlIGRpc2FibGUgYGphdmFzY3JpcHQ6YCwgYHZic2NyaXB0OmAsIGBmaWxlOmAgc2NoZW1hcywgYW5kIGFsbW9zdCBhbGwgYGRhdGE6Li4uYCBzY2hlbWFzXG4gICAqIGV4Y2VwdCBzb21lIGVtYmVkZGVkIGltYWdlIHR5cGVzLlxuICAgKlxuICAgKiBZb3UgY2FuIGNoYW5nZSB0aGlzIGJlaGF2aW91cjpcbiAgICpcbiAgICogYGBgamF2YXNjcmlwdFxuICAgKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKCk7XG4gICAqIC8vIGVuYWJsZSBldmVyeXRoaW5nXG4gICAqIG1kLnZhbGlkYXRlTGluayA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH1cbiAgICogYGBgXG4gICAqKi9cbiAgdGhpcy52YWxpZGF0ZUxpbmsgPSB2YWxpZGF0ZUxpbmtcblxuICAvKipcbiAgICogTWFya2Rvd25JdCNub3JtYWxpemVMaW5rKHVybCkgLT4gU3RyaW5nXG4gICAqXG4gICAqIEZ1bmN0aW9uIHVzZWQgdG8gZW5jb2RlIGxpbmsgdXJsIHRvIGEgbWFjaGluZS1yZWFkYWJsZSBmb3JtYXQsXG4gICAqIHdoaWNoIGluY2x1ZGVzIHVybC1lbmNvZGluZywgcHVueWNvZGUsIGV0Yy5cbiAgICoqL1xuICB0aGlzLm5vcm1hbGl6ZUxpbmsgPSBub3JtYWxpemVMaW5rXG5cbiAgLyoqXG4gICAqIE1hcmtkb3duSXQjbm9ybWFsaXplTGlua1RleHQodXJsKSAtPiBTdHJpbmdcbiAgICpcbiAgICogRnVuY3Rpb24gdXNlZCB0byBkZWNvZGUgbGluayB1cmwgdG8gYSBodW1hbi1yZWFkYWJsZSBmb3JtYXRgXG4gICAqKi9cbiAgdGhpcy5ub3JtYWxpemVMaW5rVGV4dCA9IG5vcm1hbGl6ZUxpbmtUZXh0XG5cbiAgLy8gRXhwb3NlIHV0aWxzICYgaGVscGVycyBmb3IgZWFzeSBhY2NlcyBmcm9tIHBsdWdpbnNcblxuICAvKipcbiAgICogTWFya2Rvd25JdCN1dGlscyAtPiB1dGlsc1xuICAgKlxuICAgKiBBc3NvcnRlZCB1dGlsaXR5IGZ1bmN0aW9ucywgdXNlZnVsIHRvIHdyaXRlIHBsdWdpbnMuIFNlZSBkZXRhaWxzXG4gICAqIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQvYmxvYi9tYXN0ZXIvbGliL2NvbW1vbi91dGlscy5tanMpLlxuICAgKiovXG4gIHRoaXMudXRpbHMgPSB1dGlsc1xuXG4gIC8qKlxuICAgKiBNYXJrZG93bkl0I2hlbHBlcnMgLT4gaGVscGVyc1xuICAgKlxuICAgKiBMaW5rIGNvbXBvbmVudHMgcGFyc2VyIGZ1bmN0aW9ucywgdXNlZnVsIHRvIHdyaXRlIHBsdWdpbnMuIFNlZSBkZXRhaWxzXG4gICAqIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vbWFya2Rvd24taXQvbWFya2Rvd24taXQvYmxvYi9tYXN0ZXIvbGliL2hlbHBlcnMpLlxuICAgKiovXG4gIHRoaXMuaGVscGVycyA9IHV0aWxzLmFzc2lnbih7fSwgaGVscGVycylcblxuICB0aGlzLm9wdGlvbnMgPSB7fVxuICB0aGlzLmNvbmZpZ3VyZShwcmVzZXROYW1lKVxuXG4gIGlmIChvcHRpb25zKSB7IHRoaXMuc2V0KG9wdGlvbnMpIH1cbn1cblxuLyoqIGNoYWluYWJsZVxuICogTWFya2Rvd25JdC5zZXQob3B0aW9ucylcbiAqXG4gKiBTZXQgcGFyc2VyIG9wdGlvbnMgKGluIHRoZSBzYW1lIGZvcm1hdCBhcyBpbiBjb25zdHJ1Y3RvcikuIFByb2JhYmx5LCB5b3VcbiAqIHdpbGwgbmV2ZXIgbmVlZCBpdCwgYnV0IHlvdSBjYW4gY2hhbmdlIG9wdGlvbnMgYWZ0ZXIgY29uc3RydWN0b3IgY2FsbC5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIG1kID0gcmVxdWlyZSgnbWFya2Rvd24taXQnKSgpXG4gKiAgICAgICAgICAgICAuc2V0KHsgaHRtbDogdHJ1ZSwgYnJlYWtzOiB0cnVlIH0pXG4gKiAgICAgICAgICAgICAuc2V0KHsgdHlwb2dyYXBoZXIsIHRydWUgfSk7XG4gKiBgYGBcbiAqXG4gKiBfX05vdGU6X18gVG8gYWNoaWV2ZSB0aGUgYmVzdCBwb3NzaWJsZSBwZXJmb3JtYW5jZSwgZG9uJ3QgbW9kaWZ5IGFcbiAqIGBtYXJrZG93bi1pdGAgaW5zdGFuY2Ugb3B0aW9ucyBvbiB0aGUgZmx5LiBJZiB5b3UgbmVlZCBtdWx0aXBsZSBjb25maWd1cmF0aW9uc1xuICogaXQncyBiZXN0IHRvIGNyZWF0ZSBtdWx0aXBsZSBpbnN0YW5jZXMgYW5kIGluaXRpYWxpemUgZWFjaCB3aXRoIHNlcGFyYXRlXG4gKiBjb25maWcuXG4gKiovXG5NYXJrZG93bkl0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB1dGlscy5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKVxuICByZXR1cm4gdGhpc1xufVxuXG4vKiogY2hhaW5hYmxlLCBpbnRlcm5hbFxuICogTWFya2Rvd25JdC5jb25maWd1cmUocHJlc2V0cylcbiAqXG4gKiBCYXRjaCBsb2FkIG9mIGFsbCBvcHRpb25zIGFuZCBjb21wZW5lbnQgc2V0dGluZ3MuIFRoaXMgaXMgaW50ZXJuYWwgbWV0aG9kLFxuICogYW5kIHlvdSBwcm9iYWJseSB3aWxsIG5vdCBuZWVkIGl0LiBCdXQgaWYgeW91IHdpbGwgLSBzZWUgYXZhaWxhYmxlIHByZXNldHNcbiAqIGFuZCBkYXRhIHN0cnVjdHVyZSBbaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL21hcmtkb3duLWl0L21hcmtkb3duLWl0L3RyZWUvbWFzdGVyL2xpYi9wcmVzZXRzKVxuICpcbiAqIFdlIHN0cm9uZ2x5IHJlY29tbWVuZCB0byB1c2UgcHJlc2V0cyBpbnN0ZWFkIG9mIGRpcmVjdCBjb25maWcgbG9hZHMuIFRoYXRcbiAqIHdpbGwgZ2l2ZSBiZXR0ZXIgY29tcGF0aWJpbGl0eSB3aXRoIG5leHQgdmVyc2lvbnMuXG4gKiovXG5NYXJrZG93bkl0LnByb3RvdHlwZS5jb25maWd1cmUgPSBmdW5jdGlvbiAocHJlc2V0cykge1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIGlmICh1dGlscy5pc1N0cmluZyhwcmVzZXRzKSkge1xuICAgIGNvbnN0IHByZXNldE5hbWUgPSBwcmVzZXRzXG4gICAgcHJlc2V0cyA9IGNvbmZpZ1twcmVzZXROYW1lXVxuICAgIGlmICghcHJlc2V0cykgeyB0aHJvdyBuZXcgRXJyb3IoJ1dyb25nIGBtYXJrZG93bi1pdGAgcHJlc2V0IFwiJyArIHByZXNldE5hbWUgKyAnXCIsIGNoZWNrIG5hbWUnKSB9XG4gIH1cblxuICBpZiAoIXByZXNldHMpIHsgdGhyb3cgbmV3IEVycm9yKCdXcm9uZyBgbWFya2Rvd24taXRgIHByZXNldCwgY2FuXFwndCBiZSBlbXB0eScpIH1cblxuICBpZiAocHJlc2V0cy5vcHRpb25zKSB7IHNlbGYuc2V0KHByZXNldHMub3B0aW9ucykgfVxuXG4gIGlmIChwcmVzZXRzLmNvbXBvbmVudHMpIHtcbiAgICBPYmplY3Qua2V5cyhwcmVzZXRzLmNvbXBvbmVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIGlmIChwcmVzZXRzLmNvbXBvbmVudHNbbmFtZV0ucnVsZXMpIHtcbiAgICAgICAgc2VsZltuYW1lXS5ydWxlci5lbmFibGVPbmx5KHByZXNldHMuY29tcG9uZW50c1tuYW1lXS5ydWxlcylcbiAgICAgIH1cbiAgICAgIGlmIChwcmVzZXRzLmNvbXBvbmVudHNbbmFtZV0ucnVsZXMyKSB7XG4gICAgICAgIHNlbGZbbmFtZV0ucnVsZXIyLmVuYWJsZU9ubHkocHJlc2V0cy5jb21wb25lbnRzW25hbWVdLnJ1bGVzMilcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbi8qKiBjaGFpbmFibGVcbiAqIE1hcmtkb3duSXQuZW5hYmxlKGxpc3QsIGlnbm9yZUludmFsaWQpXG4gKiAtIGxpc3QgKFN0cmluZ3xBcnJheSk6IHJ1bGUgbmFtZSBvciBsaXN0IG9mIHJ1bGUgbmFtZXMgdG8gZW5hYmxlXG4gKiAtIGlnbm9yZUludmFsaWQgKEJvb2xlYW4pOiBzZXQgYHRydWVgIHRvIGlnbm9yZSBlcnJvcnMgd2hlbiBydWxlIG5vdCBmb3VuZC5cbiAqXG4gKiBFbmFibGUgbGlzdCBvciBydWxlcy4gSXQgd2lsbCBhdXRvbWF0aWNhbGx5IGZpbmQgYXBwcm9wcmlhdGUgY29tcG9uZW50cyxcbiAqIGNvbnRhaW5pbmcgcnVsZXMgd2l0aCBnaXZlbiBuYW1lcy4gSWYgcnVsZSBub3QgZm91bmQsIGFuZCBgaWdub3JlSW52YWxpZGBcbiAqIG5vdCBzZXQgLSB0aHJvd3MgZXhjZXB0aW9uLlxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiB2YXIgbWQgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpKClcbiAqICAgICAgICAgICAgIC5lbmFibGUoWydzdWInLCAnc3VwJ10pXG4gKiAgICAgICAgICAgICAuZGlzYWJsZSgnc21hcnRxdW90ZXMnKTtcbiAqIGBgYFxuICoqL1xuTWFya2Rvd25JdC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKGxpc3QsIGlnbm9yZUludmFsaWQpIHtcbiAgbGV0IHJlc3VsdCA9IFtdXG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGxpc3QpKSB7IGxpc3QgPSBbbGlzdF0gfVxuXG4gIFsnY29yZScsICdibG9jaycsICdpbmxpbmUnXS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFpbikge1xuICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhpc1tjaGFpbl0ucnVsZXIuZW5hYmxlKGxpc3QsIHRydWUpKVxuICB9LCB0aGlzKVxuXG4gIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhpcy5pbmxpbmUucnVsZXIyLmVuYWJsZShsaXN0LCB0cnVlKSlcblxuICBjb25zdCBtaXNzZWQgPSBsaXN0LmZpbHRlcihmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gcmVzdWx0LmluZGV4T2YobmFtZSkgPCAwIH0pXG5cbiAgaWYgKG1pc3NlZC5sZW5ndGggJiYgIWlnbm9yZUludmFsaWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01hcmtkb3duSXQuIEZhaWxlZCB0byBlbmFibGUgdW5rbm93biBydWxlKHMpOiAnICsgbWlzc2VkKVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqIGNoYWluYWJsZVxuICogTWFya2Rvd25JdC5kaXNhYmxlKGxpc3QsIGlnbm9yZUludmFsaWQpXG4gKiAtIGxpc3QgKFN0cmluZ3xBcnJheSk6IHJ1bGUgbmFtZSBvciBsaXN0IG9mIHJ1bGUgbmFtZXMgdG8gZGlzYWJsZS5cbiAqIC0gaWdub3JlSW52YWxpZCAoQm9vbGVhbik6IHNldCBgdHJ1ZWAgdG8gaWdub3JlIGVycm9ycyB3aGVuIHJ1bGUgbm90IGZvdW5kLlxuICpcbiAqIFRoZSBzYW1lIGFzIFtbTWFya2Rvd25JdC5lbmFibGVdXSwgYnV0IHR1cm4gc3BlY2lmaWVkIHJ1bGVzIG9mZi5cbiAqKi9cbk1hcmtkb3duSXQucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAobGlzdCwgaWdub3JlSW52YWxpZCkge1xuICBsZXQgcmVzdWx0ID0gW11cblxuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHsgbGlzdCA9IFtsaXN0XSB9XG5cbiAgWydjb3JlJywgJ2Jsb2NrJywgJ2lubGluZSddLmZvckVhY2goZnVuY3Rpb24gKGNoYWluKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdCh0aGlzW2NoYWluXS5ydWxlci5kaXNhYmxlKGxpc3QsIHRydWUpKVxuICB9LCB0aGlzKVxuXG4gIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhpcy5pbmxpbmUucnVsZXIyLmRpc2FibGUobGlzdCwgdHJ1ZSkpXG5cbiAgY29uc3QgbWlzc2VkID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIHJlc3VsdC5pbmRleE9mKG5hbWUpIDwgMCB9KVxuXG4gIGlmIChtaXNzZWQubGVuZ3RoICYmICFpZ25vcmVJbnZhbGlkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNYXJrZG93bkl0LiBGYWlsZWQgdG8gZGlzYWJsZSB1bmtub3duIHJ1bGUocyk6ICcgKyBtaXNzZWQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqIGNoYWluYWJsZVxuICogTWFya2Rvd25JdC51c2UocGx1Z2luLCBwYXJhbXMpXG4gKlxuICogTG9hZCBzcGVjaWZpZWQgcGx1Z2luIHdpdGggZ2l2ZW4gcGFyYW1zIGludG8gY3VycmVudCBwYXJzZXIgaW5zdGFuY2UuXG4gKiBJdCdzIGp1c3QgYSBzdWdhciB0byBjYWxsIGBwbHVnaW4obWQsIHBhcmFtcylgIHdpdGggY3VycmluZy5cbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogdmFyIGl0ZXJhdG9yID0gcmVxdWlyZSgnbWFya2Rvd24taXQtZm9yLWlubGluZScpO1xuICogdmFyIG1kID0gcmVxdWlyZSgnbWFya2Rvd24taXQnKSgpXG4gKiAgICAgICAgICAgICAudXNlKGl0ZXJhdG9yLCAnZm9vX3JlcGxhY2UnLCAndGV4dCcsIGZ1bmN0aW9uICh0b2tlbnMsIGlkeCkge1xuICogICAgICAgICAgICAgICB0b2tlbnNbaWR4XS5jb250ZW50ID0gdG9rZW5zW2lkeF0uY29udGVudC5yZXBsYWNlKC9mb28vZywgJ2JhcicpO1xuICogICAgICAgICAgICAgfSk7XG4gKiBgYGBcbiAqKi9cbk1hcmtkb3duSXQucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4gLyosIHBhcmFtcywgLi4uICovKSB7XG4gIGNvbnN0IGFyZ3MgPSBbdGhpc10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpXG4gIHBsdWdpbi5hcHBseShwbHVnaW4sIGFyZ3MpXG4gIHJldHVybiB0aGlzXG59XG5cbi8qKiBpbnRlcm5hbFxuICogTWFya2Rvd25JdC5wYXJzZShzcmMsIGVudikgLT4gQXJyYXlcbiAqIC0gc3JjIChTdHJpbmcpOiBzb3VyY2Ugc3RyaW5nXG4gKiAtIGVudiAoT2JqZWN0KTogZW52aXJvbm1lbnQgc2FuZGJveFxuICpcbiAqIFBhcnNlIGlucHV0IHN0cmluZyBhbmQgcmV0dXJuIGxpc3Qgb2YgYmxvY2sgdG9rZW5zIChzcGVjaWFsIHRva2VuIHR5cGVcbiAqIFwiaW5saW5lXCIgd2lsbCBjb250YWluIGxpc3Qgb2YgaW5saW5lIHRva2VucykuIFlvdSBzaG91bGQgbm90IGNhbGwgdGhpc1xuICogbWV0aG9kIGRpcmVjdGx5LCB1bnRpbCB5b3Ugd3JpdGUgY3VzdG9tIHJlbmRlcmVyIChmb3IgZXhhbXBsZSwgdG8gcHJvZHVjZVxuICogQVNUKS5cbiAqXG4gKiBgZW52YCBpcyB1c2VkIHRvIHBhc3MgZGF0YSBiZXR3ZWVuIFwiZGlzdHJpYnV0ZWRcIiBydWxlcyBhbmQgcmV0dXJuIGFkZGl0aW9uYWxcbiAqIG1ldGFkYXRhIGxpa2UgcmVmZXJlbmNlIGluZm8sIG5lZWRlZCBmb3IgdGhlIHJlbmRlcmVyLiBJdCBhbHNvIGNhbiBiZSB1c2VkIHRvXG4gKiBpbmplY3QgZGF0YSBpbiBzcGVjaWZpYyBjYXNlcy4gVXN1YWxseSwgeW91IHdpbGwgYmUgb2sgdG8gcGFzcyBge31gLFxuICogYW5kIHRoZW4gcGFzcyB1cGRhdGVkIG9iamVjdCB0byByZW5kZXJlci5cbiAqKi9cbk1hcmtkb3duSXQucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKHNyYywgZW52KSB7XG4gIGlmICh0eXBlb2Ygc3JjICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgZGF0YSBzaG91bGQgYmUgYSBTdHJpbmcnKVxuICB9XG5cbiAgY29uc3Qgc3RhdGUgPSBuZXcgdGhpcy5jb3JlLlN0YXRlKHNyYywgdGhpcywgZW52KVxuXG4gIHRoaXMuY29yZS5wcm9jZXNzKHN0YXRlKVxuXG4gIHJldHVybiBzdGF0ZS50b2tlbnNcbn1cblxuLyoqXG4gKiBNYXJrZG93bkl0LnJlbmRlcihzcmMgWywgZW52XSkgLT4gU3RyaW5nXG4gKiAtIHNyYyAoU3RyaW5nKTogc291cmNlIHN0cmluZ1xuICogLSBlbnYgKE9iamVjdCk6IGVudmlyb25tZW50IHNhbmRib3hcbiAqXG4gKiBSZW5kZXIgbWFya2Rvd24gc3RyaW5nIGludG8gaHRtbC4gSXQgZG9lcyBhbGwgbWFnaWMgZm9yIHlvdSA6KS5cbiAqXG4gKiBgZW52YCBjYW4gYmUgdXNlZCB0byBpbmplY3QgYWRkaXRpb25hbCBtZXRhZGF0YSAoYHt9YCBieSBkZWZhdWx0KS5cbiAqIEJ1dCB5b3Ugd2lsbCBub3QgbmVlZCBpdCB3aXRoIGhpZ2ggcHJvYmFiaWxpdHkuIFNlZSBhbHNvIGNvbW1lbnRcbiAqIGluIFtbTWFya2Rvd25JdC5wYXJzZV1dLlxuICoqL1xuTWFya2Rvd25JdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHNyYywgZW52KSB7XG4gIGVudiA9IGVudiB8fCB7fVxuXG4gIHJldHVybiB0aGlzLnJlbmRlcmVyLnJlbmRlcih0aGlzLnBhcnNlKHNyYywgZW52KSwgdGhpcy5vcHRpb25zLCBlbnYpXG59XG5cbi8qKiBpbnRlcm5hbFxuICogTWFya2Rvd25JdC5wYXJzZUlubGluZShzcmMsIGVudikgLT4gQXJyYXlcbiAqIC0gc3JjIChTdHJpbmcpOiBzb3VyY2Ugc3RyaW5nXG4gKiAtIGVudiAoT2JqZWN0KTogZW52aXJvbm1lbnQgc2FuZGJveFxuICpcbiAqIFRoZSBzYW1lIGFzIFtbTWFya2Rvd25JdC5wYXJzZV1dIGJ1dCBza2lwIGFsbCBibG9jayBydWxlcy4gSXQgcmV0dXJucyB0aGVcbiAqIGJsb2NrIHRva2VucyBsaXN0IHdpdGggdGhlIHNpbmdsZSBgaW5saW5lYCBlbGVtZW50LCBjb250YWluaW5nIHBhcnNlZCBpbmxpbmVcbiAqIHRva2VucyBpbiBgY2hpbGRyZW5gIHByb3BlcnR5LiBBbHNvIHVwZGF0ZXMgYGVudmAgb2JqZWN0LlxuICoqL1xuTWFya2Rvd25JdC5wcm90b3R5cGUucGFyc2VJbmxpbmUgPSBmdW5jdGlvbiAoc3JjLCBlbnYpIHtcbiAgY29uc3Qgc3RhdGUgPSBuZXcgdGhpcy5jb3JlLlN0YXRlKHNyYywgdGhpcywgZW52KVxuXG4gIHN0YXRlLmlubGluZU1vZGUgPSB0cnVlXG4gIHRoaXMuY29yZS5wcm9jZXNzKHN0YXRlKVxuXG4gIHJldHVybiBzdGF0ZS50b2tlbnNcbn1cblxuLyoqXG4gKiBNYXJrZG93bkl0LnJlbmRlcklubGluZShzcmMgWywgZW52XSkgLT4gU3RyaW5nXG4gKiAtIHNyYyAoU3RyaW5nKTogc291cmNlIHN0cmluZ1xuICogLSBlbnYgKE9iamVjdCk6IGVudmlyb25tZW50IHNhbmRib3hcbiAqXG4gKiBTaW1pbGFyIHRvIFtbTWFya2Rvd25JdC5yZW5kZXJdXSBidXQgZm9yIHNpbmdsZSBwYXJhZ3JhcGggY29udGVudC4gUmVzdWx0XG4gKiB3aWxsIE5PVCBiZSB3cmFwcGVkIGludG8gYDxwPmAgdGFncy5cbiAqKi9cbk1hcmtkb3duSXQucHJvdG90eXBlLnJlbmRlcklubGluZSA9IGZ1bmN0aW9uIChzcmMsIGVudikge1xuICBlbnYgPSBlbnYgfHwge31cblxuICByZXR1cm4gdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5wYXJzZUlubGluZShzcmMsIGVudiksIHRoaXMub3B0aW9ucywgZW52KVxufVxuXG5leHBvcnQgZGVmYXVsdCBNYXJrZG93bkl0XG4iLCIvLyBtYXJrZG93bi1pdCBkZWZhdWx0IG9wdGlvbnNcblxuZXhwb3J0IGRlZmF1bHQge1xuICBvcHRpb25zOiB7XG4gICAgLy8gRW5hYmxlIEhUTUwgdGFncyBpbiBzb3VyY2VcbiAgICBodG1sOiBmYWxzZSxcblxuICAgIC8vIFVzZSAnLycgdG8gY2xvc2Ugc2luZ2xlIHRhZ3MgKDxiciAvPilcbiAgICB4aHRtbE91dDogZmFsc2UsXG5cbiAgICAvLyBDb252ZXJ0ICdcXG4nIGluIHBhcmFncmFwaHMgaW50byA8YnI+XG4gICAgYnJlYWtzOiBmYWxzZSxcblxuICAgIC8vIENTUyBsYW5ndWFnZSBwcmVmaXggZm9yIGZlbmNlZCBibG9ja3NcbiAgICBsYW5nUHJlZml4OiAnbGFuZ3VhZ2UtJyxcblxuICAgIC8vIGF1dG9jb252ZXJ0IFVSTC1saWtlIHRleHRzIHRvIGxpbmtzXG4gICAgbGlua2lmeTogZmFsc2UsXG5cbiAgICAvLyBFbmFibGUgc29tZSBsYW5ndWFnZS1uZXV0cmFsIHJlcGxhY2VtZW50cyArIHF1b3RlcyBiZWF1dGlmaWNhdGlvblxuICAgIHR5cG9ncmFwaGVyOiBmYWxzZSxcblxuICAgIC8vIERvdWJsZSArIHNpbmdsZSBxdW90ZXMgcmVwbGFjZW1lbnQgcGFpcnMsIHdoZW4gdHlwb2dyYXBoZXIgZW5hYmxlZCxcbiAgICAvLyBhbmQgc21hcnRxdW90ZXMgb24uIENvdWxkIGJlIGVpdGhlciBhIFN0cmluZyBvciBhbiBBcnJheS5cbiAgICAvL1xuICAgIC8vIEZvciBleGFtcGxlLCB5b3UgY2FuIHVzZSAnwqvCu+KAnuKAnCcgZm9yIFJ1c3NpYW4sICfigJ7igJzigJrigJgnIGZvciBHZXJtYW4sXG4gICAgLy8gYW5kIFsnwqtcXHhBMCcsICdcXHhBMMK7JywgJ+KAuVxceEEwJywgJ1xceEEw4oC6J10gZm9yIEZyZW5jaCAoaW5jbHVkaW5nIG5ic3ApLlxuICAgIHF1b3RlczogJ1xcdTIwMWNcXHUyMDFkXFx1MjAxOFxcdTIwMTknLCAvKiDigJzigJ3igJjigJkgKi9cblxuICAgIC8vIEhpZ2hsaWdodGVyIGZ1bmN0aW9uLiBTaG91bGQgcmV0dXJuIGVzY2FwZWQgSFRNTCxcbiAgICAvLyBvciAnJyBpZiB0aGUgc291cmNlIHN0cmluZyBpcyBub3QgY2hhbmdlZCBhbmQgc2hvdWxkIGJlIGVzY2FwZWQgZXh0ZXJuYWx5LlxuICAgIC8vIElmIHJlc3VsdCBzdGFydHMgd2l0aCA8cHJlLi4uIGludGVybmFsIHdyYXBwZXIgaXMgc2tpcHBlZC5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uICgvKnN0ciwgbGFuZyovKSB7IHJldHVybiAnJzsgfVxuICAgIC8vXG4gICAgaGlnaGxpZ2h0OiBudWxsLFxuXG4gICAgLy8gSW50ZXJuYWwgcHJvdGVjdGlvbiwgcmVjdXJzaW9uIGxpbWl0XG4gICAgbWF4TmVzdGluZzogMTAwXG4gIH0sXG5cbiAgY29tcG9uZW50czoge1xuICAgIGNvcmU6IHt9LFxuICAgIGJsb2NrOiB7fSxcbiAgICBpbmxpbmU6IHt9XG4gIH1cbn1cbiIsIi8vIFwiWmVyb1wiIHByZXNldCwgd2l0aCBub3RoaW5nIGVuYWJsZWQuIFVzZWZ1bCBmb3IgbWFudWFsIGNvbmZpZ3VyaW5nIG9mIHNpbXBsZVxuLy8gbW9kZXMuIEZvciBleGFtcGxlLCB0byBwYXJzZSBib2xkL2l0YWxpYyBvbmx5LlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG9wdGlvbnM6IHtcbiAgICAvLyBFbmFibGUgSFRNTCB0YWdzIGluIHNvdXJjZVxuICAgIGh0bWw6IGZhbHNlLFxuXG4gICAgLy8gVXNlICcvJyB0byBjbG9zZSBzaW5nbGUgdGFncyAoPGJyIC8+KVxuICAgIHhodG1sT3V0OiBmYWxzZSxcblxuICAgIC8vIENvbnZlcnQgJ1xcbicgaW4gcGFyYWdyYXBocyBpbnRvIDxicj5cbiAgICBicmVha3M6IGZhbHNlLFxuXG4gICAgLy8gQ1NTIGxhbmd1YWdlIHByZWZpeCBmb3IgZmVuY2VkIGJsb2Nrc1xuICAgIGxhbmdQcmVmaXg6ICdsYW5ndWFnZS0nLFxuXG4gICAgLy8gYXV0b2NvbnZlcnQgVVJMLWxpa2UgdGV4dHMgdG8gbGlua3NcbiAgICBsaW5raWZ5OiBmYWxzZSxcblxuICAgIC8vIEVuYWJsZSBzb21lIGxhbmd1YWdlLW5ldXRyYWwgcmVwbGFjZW1lbnRzICsgcXVvdGVzIGJlYXV0aWZpY2F0aW9uXG4gICAgdHlwb2dyYXBoZXI6IGZhbHNlLFxuXG4gICAgLy8gRG91YmxlICsgc2luZ2xlIHF1b3RlcyByZXBsYWNlbWVudCBwYWlycywgd2hlbiB0eXBvZ3JhcGhlciBlbmFibGVkLFxuICAgIC8vIGFuZCBzbWFydHF1b3RlcyBvbi4gQ291bGQgYmUgZWl0aGVyIGEgU3RyaW5nIG9yIGFuIEFycmF5LlxuICAgIC8vXG4gICAgLy8gRm9yIGV4YW1wbGUsIHlvdSBjYW4gdXNlICfCq8K74oCe4oCcJyBmb3IgUnVzc2lhbiwgJ+KAnuKAnOKAmuKAmCcgZm9yIEdlcm1hbixcbiAgICAvLyBhbmQgWyfCq1xceEEwJywgJ1xceEEwwrsnLCAn4oC5XFx4QTAnLCAnXFx4QTDigLonXSBmb3IgRnJlbmNoIChpbmNsdWRpbmcgbmJzcCkuXG4gICAgcXVvdGVzOiAnXFx1MjAxY1xcdTIwMWRcXHUyMDE4XFx1MjAxOScsIC8qIOKAnOKAneKAmOKAmSAqL1xuXG4gICAgLy8gSGlnaGxpZ2h0ZXIgZnVuY3Rpb24uIFNob3VsZCByZXR1cm4gZXNjYXBlZCBIVE1MLFxuICAgIC8vIG9yICcnIGlmIHRoZSBzb3VyY2Ugc3RyaW5nIGlzIG5vdCBjaGFuZ2VkIGFuZCBzaG91bGQgYmUgZXNjYXBlZCBleHRlcm5hbHkuXG4gICAgLy8gSWYgcmVzdWx0IHN0YXJ0cyB3aXRoIDxwcmUuLi4gaW50ZXJuYWwgd3JhcHBlciBpcyBza2lwcGVkLlxuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gKC8qc3RyLCBsYW5nKi8pIHsgcmV0dXJuICcnOyB9XG4gICAgLy9cbiAgICBoaWdobGlnaHQ6IG51bGwsXG5cbiAgICAvLyBJbnRlcm5hbCBwcm90ZWN0aW9uLCByZWN1cnNpb24gbGltaXRcbiAgICBtYXhOZXN0aW5nOiAyMFxuICB9LFxuXG4gIGNvbXBvbmVudHM6IHtcblxuICAgIGNvcmU6IHtcbiAgICAgIHJ1bGVzOiBbXG4gICAgICAgICdub3JtYWxpemUnLFxuICAgICAgICAnYmxvY2snLFxuICAgICAgICAnaW5saW5lJyxcbiAgICAgICAgJ3RleHRfam9pbidcbiAgICAgIF1cbiAgICB9LFxuXG4gICAgYmxvY2s6IHtcbiAgICAgIHJ1bGVzOiBbXG4gICAgICAgICdwYXJhZ3JhcGgnXG4gICAgICBdXG4gICAgfSxcblxuICAgIGlubGluZToge1xuICAgICAgcnVsZXM6IFtcbiAgICAgICAgJ3RleHQnXG4gICAgICBdLFxuICAgICAgcnVsZXMyOiBbXG4gICAgICAgICdiYWxhbmNlX3BhaXJzJyxcbiAgICAgICAgJ2ZyYWdtZW50c19qb2luJ1xuICAgICAgXVxuICAgIH1cbiAgfVxufVxuIiwiLy8gQ29tbW9ubWFyayBkZWZhdWx0IG9wdGlvbnNcblxuZXhwb3J0IGRlZmF1bHQge1xuICBvcHRpb25zOiB7XG4gICAgLy8gRW5hYmxlIEhUTUwgdGFncyBpbiBzb3VyY2VcbiAgICBodG1sOiB0cnVlLFxuXG4gICAgLy8gVXNlICcvJyB0byBjbG9zZSBzaW5nbGUgdGFncyAoPGJyIC8+KVxuICAgIHhodG1sT3V0OiB0cnVlLFxuXG4gICAgLy8gQ29udmVydCAnXFxuJyBpbiBwYXJhZ3JhcGhzIGludG8gPGJyPlxuICAgIGJyZWFrczogZmFsc2UsXG5cbiAgICAvLyBDU1MgbGFuZ3VhZ2UgcHJlZml4IGZvciBmZW5jZWQgYmxvY2tzXG4gICAgbGFuZ1ByZWZpeDogJ2xhbmd1YWdlLScsXG5cbiAgICAvLyBhdXRvY29udmVydCBVUkwtbGlrZSB0ZXh0cyB0byBsaW5rc1xuICAgIGxpbmtpZnk6IGZhbHNlLFxuXG4gICAgLy8gRW5hYmxlIHNvbWUgbGFuZ3VhZ2UtbmV1dHJhbCByZXBsYWNlbWVudHMgKyBxdW90ZXMgYmVhdXRpZmljYXRpb25cbiAgICB0eXBvZ3JhcGhlcjogZmFsc2UsXG5cbiAgICAvLyBEb3VibGUgKyBzaW5nbGUgcXVvdGVzIHJlcGxhY2VtZW50IHBhaXJzLCB3aGVuIHR5cG9ncmFwaGVyIGVuYWJsZWQsXG4gICAgLy8gYW5kIHNtYXJ0cXVvdGVzIG9uLiBDb3VsZCBiZSBlaXRoZXIgYSBTdHJpbmcgb3IgYW4gQXJyYXkuXG4gICAgLy9cbiAgICAvLyBGb3IgZXhhbXBsZSwgeW91IGNhbiB1c2UgJ8KrwrvigJ7igJwnIGZvciBSdXNzaWFuLCAn4oCe4oCc4oCa4oCYJyBmb3IgR2VybWFuLFxuICAgIC8vIGFuZCBbJ8KrXFx4QTAnLCAnXFx4QTDCuycsICfigLlcXHhBMCcsICdcXHhBMOKAuiddIGZvciBGcmVuY2ggKGluY2x1ZGluZyBuYnNwKS5cbiAgICBxdW90ZXM6ICdcXHUyMDFjXFx1MjAxZFxcdTIwMThcXHUyMDE5JywgLyog4oCc4oCd4oCY4oCZICovXG5cbiAgICAvLyBIaWdobGlnaHRlciBmdW5jdGlvbi4gU2hvdWxkIHJldHVybiBlc2NhcGVkIEhUTUwsXG4gICAgLy8gb3IgJycgaWYgdGhlIHNvdXJjZSBzdHJpbmcgaXMgbm90IGNoYW5nZWQgYW5kIHNob3VsZCBiZSBlc2NhcGVkIGV4dGVybmFseS5cbiAgICAvLyBJZiByZXN1bHQgc3RhcnRzIHdpdGggPHByZS4uLiBpbnRlcm5hbCB3cmFwcGVyIGlzIHNraXBwZWQuXG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiAoLypzdHIsIGxhbmcqLykgeyByZXR1cm4gJyc7IH1cbiAgICAvL1xuICAgIGhpZ2hsaWdodDogbnVsbCxcblxuICAgIC8vIEludGVybmFsIHByb3RlY3Rpb24sIHJlY3Vyc2lvbiBsaW1pdFxuICAgIG1heE5lc3Rpbmc6IDIwXG4gIH0sXG5cbiAgY29tcG9uZW50czoge1xuXG4gICAgY29yZToge1xuICAgICAgcnVsZXM6IFtcbiAgICAgICAgJ25vcm1hbGl6ZScsXG4gICAgICAgICdibG9jaycsXG4gICAgICAgICdpbmxpbmUnLFxuICAgICAgICAndGV4dF9qb2luJ1xuICAgICAgXVxuICAgIH0sXG5cbiAgICBibG9jazoge1xuICAgICAgcnVsZXM6IFtcbiAgICAgICAgJ2Jsb2NrcXVvdGUnLFxuICAgICAgICAnY29kZScsXG4gICAgICAgICdmZW5jZScsXG4gICAgICAgICdoZWFkaW5nJyxcbiAgICAgICAgJ2hyJyxcbiAgICAgICAgJ2h0bWxfYmxvY2snLFxuICAgICAgICAnbGhlYWRpbmcnLFxuICAgICAgICAnbGlzdCcsXG4gICAgICAgICdyZWZlcmVuY2UnLFxuICAgICAgICAncGFyYWdyYXBoJ1xuICAgICAgXVxuICAgIH0sXG5cbiAgICBpbmxpbmU6IHtcbiAgICAgIHJ1bGVzOiBbXG4gICAgICAgICdhdXRvbGluaycsXG4gICAgICAgICdiYWNrdGlja3MnLFxuICAgICAgICAnZW1waGFzaXMnLFxuICAgICAgICAnZW50aXR5JyxcbiAgICAgICAgJ2VzY2FwZScsXG4gICAgICAgICdodG1sX2lubGluZScsXG4gICAgICAgICdpbWFnZScsXG4gICAgICAgICdsaW5rJyxcbiAgICAgICAgJ25ld2xpbmUnLFxuICAgICAgICAndGV4dCdcbiAgICAgIF0sXG4gICAgICBydWxlczI6IFtcbiAgICAgICAgJ2JhbGFuY2VfcGFpcnMnLFxuICAgICAgICAnZW1waGFzaXMnLFxuICAgICAgICAnZnJhZ21lbnRzX2pvaW4nXG4gICAgICBdXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTY2hlbWEsIE1hcmsgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgTWFya2Rvd25JdCBmcm9tICdtYXJrZG93bi1pdCc7XG5cbi8qKlxuRG9jdW1lbnQgc2NoZW1hIGZvciB0aGUgZGF0YSBtb2RlbCB1c2VkIGJ5IENvbW1vbk1hcmsuXG4qL1xuY29uc3Qgc2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgbm9kZXM6IHtcbiAgICAgICAgZG9jOiB7XG4gICAgICAgICAgICBjb250ZW50OiBcImJsb2NrK1wiXG4gICAgICAgIH0sXG4gICAgICAgIHBhcmFncmFwaDoge1xuICAgICAgICAgICAgY29udGVudDogXCJpbmxpbmUqXCIsXG4gICAgICAgICAgICBncm91cDogXCJibG9ja1wiLFxuICAgICAgICAgICAgcGFyc2VET006IFt7IHRhZzogXCJwXCIgfV0sXG4gICAgICAgICAgICB0b0RPTSgpIHsgcmV0dXJuIFtcInBcIiwgMF07IH1cbiAgICAgICAgfSxcbiAgICAgICAgYmxvY2txdW90ZToge1xuICAgICAgICAgICAgY29udGVudDogXCJibG9jaytcIixcbiAgICAgICAgICAgIGdyb3VwOiBcImJsb2NrXCIsXG4gICAgICAgICAgICBwYXJzZURPTTogW3sgdGFnOiBcImJsb2NrcXVvdGVcIiB9XSxcbiAgICAgICAgICAgIHRvRE9NKCkgeyByZXR1cm4gW1wiYmxvY2txdW90ZVwiLCAwXTsgfVxuICAgICAgICB9LFxuICAgICAgICBob3Jpem9udGFsX3J1bGU6IHtcbiAgICAgICAgICAgIGdyb3VwOiBcImJsb2NrXCIsXG4gICAgICAgICAgICBwYXJzZURPTTogW3sgdGFnOiBcImhyXCIgfV0sXG4gICAgICAgICAgICB0b0RPTSgpIHsgcmV0dXJuIFtcImRpdlwiLCBbXCJoclwiXV07IH1cbiAgICAgICAgfSxcbiAgICAgICAgaGVhZGluZzoge1xuICAgICAgICAgICAgYXR0cnM6IHsgbGV2ZWw6IHsgZGVmYXVsdDogMSB9IH0sXG4gICAgICAgICAgICBjb250ZW50OiBcIih0ZXh0IHwgaW1hZ2UpKlwiLFxuICAgICAgICAgICAgZ3JvdXA6IFwiYmxvY2tcIixcbiAgICAgICAgICAgIGRlZmluaW5nOiB0cnVlLFxuICAgICAgICAgICAgcGFyc2VET006IFt7IHRhZzogXCJoMVwiLCBhdHRyczogeyBsZXZlbDogMSB9IH0sXG4gICAgICAgICAgICAgICAgeyB0YWc6IFwiaDJcIiwgYXR0cnM6IHsgbGV2ZWw6IDIgfSB9LFxuICAgICAgICAgICAgICAgIHsgdGFnOiBcImgzXCIsIGF0dHJzOiB7IGxldmVsOiAzIH0gfSxcbiAgICAgICAgICAgICAgICB7IHRhZzogXCJoNFwiLCBhdHRyczogeyBsZXZlbDogNCB9IH0sXG4gICAgICAgICAgICAgICAgeyB0YWc6IFwiaDVcIiwgYXR0cnM6IHsgbGV2ZWw6IDUgfSB9LFxuICAgICAgICAgICAgICAgIHsgdGFnOiBcImg2XCIsIGF0dHJzOiB7IGxldmVsOiA2IH0gfV0sXG4gICAgICAgICAgICB0b0RPTShub2RlKSB7IHJldHVybiBbXCJoXCIgKyBub2RlLmF0dHJzLmxldmVsLCAwXTsgfVxuICAgICAgICB9LFxuICAgICAgICBjb2RlX2Jsb2NrOiB7XG4gICAgICAgICAgICBjb250ZW50OiBcInRleHQqXCIsXG4gICAgICAgICAgICBncm91cDogXCJibG9ja1wiLFxuICAgICAgICAgICAgY29kZTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmluaW5nOiB0cnVlLFxuICAgICAgICAgICAgbWFya3M6IFwiXCIsXG4gICAgICAgICAgICBhdHRyczogeyBwYXJhbXM6IHsgZGVmYXVsdDogXCJcIiB9IH0sXG4gICAgICAgICAgICBwYXJzZURPTTogW3sgdGFnOiBcInByZVwiLCBwcmVzZXJ2ZVdoaXRlc3BhY2U6IFwiZnVsbFwiLCBnZXRBdHRyczogbm9kZSA9PiAoeyBwYXJhbXM6IG5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1wYXJhbXNcIikgfHwgXCJcIiB9KSB9XSxcbiAgICAgICAgICAgIHRvRE9NKG5vZGUpIHsgcmV0dXJuIFtcInByZVwiLCBub2RlLmF0dHJzLnBhcmFtcyA/IHsgXCJkYXRhLXBhcmFtc1wiOiBub2RlLmF0dHJzLnBhcmFtcyB9IDoge30sIFtcImNvZGVcIiwgMF1dOyB9XG4gICAgICAgIH0sXG4gICAgICAgIG9yZGVyZWRfbGlzdDoge1xuICAgICAgICAgICAgY29udGVudDogXCJsaXN0X2l0ZW0rXCIsXG4gICAgICAgICAgICBncm91cDogXCJibG9ja1wiLFxuICAgICAgICAgICAgYXR0cnM6IHsgb3JkZXI6IHsgZGVmYXVsdDogMSB9LCB0aWdodDogeyBkZWZhdWx0OiBmYWxzZSB9IH0sXG4gICAgICAgICAgICBwYXJzZURPTTogW3sgdGFnOiBcIm9sXCIsIGdldEF0dHJzKGRvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgb3JkZXI6IGRvbS5oYXNBdHRyaWJ1dGUoXCJzdGFydFwiKSA/ICtkb20uZ2V0QXR0cmlidXRlKFwic3RhcnRcIikgOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpZ2h0OiBkb20uaGFzQXR0cmlidXRlKFwiZGF0YS10aWdodFwiKSB9O1xuICAgICAgICAgICAgICAgICAgICB9IH1dLFxuICAgICAgICAgICAgdG9ET00obm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXCJvbFwiLCB7IHN0YXJ0OiBub2RlLmF0dHJzLm9yZGVyID09IDEgPyBudWxsIDogbm9kZS5hdHRycy5vcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YS10aWdodFwiOiBub2RlLmF0dHJzLnRpZ2h0ID8gXCJ0cnVlXCIgOiBudWxsIH0sIDBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBidWxsZXRfbGlzdDoge1xuICAgICAgICAgICAgY29udGVudDogXCJsaXN0X2l0ZW0rXCIsXG4gICAgICAgICAgICBncm91cDogXCJibG9ja1wiLFxuICAgICAgICAgICAgYXR0cnM6IHsgdGlnaHQ6IHsgZGVmYXVsdDogZmFsc2UgfSB9LFxuICAgICAgICAgICAgcGFyc2VET006IFt7IHRhZzogXCJ1bFwiLCBnZXRBdHRyczogZG9tID0+ICh7IHRpZ2h0OiBkb20uaGFzQXR0cmlidXRlKFwiZGF0YS10aWdodFwiKSB9KSB9XSxcbiAgICAgICAgICAgIHRvRE9NKG5vZGUpIHsgcmV0dXJuIFtcInVsXCIsIHsgXCJkYXRhLXRpZ2h0XCI6IG5vZGUuYXR0cnMudGlnaHQgPyBcInRydWVcIiA6IG51bGwgfSwgMF07IH1cbiAgICAgICAgfSxcbiAgICAgICAgbGlzdF9pdGVtOiB7XG4gICAgICAgICAgICBjb250ZW50OiBcImJsb2NrK1wiLFxuICAgICAgICAgICAgZGVmaW5pbmc6IHRydWUsXG4gICAgICAgICAgICBwYXJzZURPTTogW3sgdGFnOiBcImxpXCIgfV0sXG4gICAgICAgICAgICB0b0RPTSgpIHsgcmV0dXJuIFtcImxpXCIsIDBdOyB9XG4gICAgICAgIH0sXG4gICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgIGdyb3VwOiBcImlubGluZVwiXG4gICAgICAgIH0sXG4gICAgICAgIGltYWdlOiB7XG4gICAgICAgICAgICBpbmxpbmU6IHRydWUsXG4gICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIHNyYzoge30sXG4gICAgICAgICAgICAgICAgYWx0OiB7IGRlZmF1bHQ6IG51bGwgfSxcbiAgICAgICAgICAgICAgICB0aXRsZTogeyBkZWZhdWx0OiBudWxsIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBncm91cDogXCJpbmxpbmVcIixcbiAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHBhcnNlRE9NOiBbeyB0YWc6IFwiaW1nW3NyY11cIiwgZ2V0QXR0cnMoZG9tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogZG9tLmdldEF0dHJpYnV0ZShcInNyY1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZG9tLmdldEF0dHJpYnV0ZShcInRpdGxlXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdDogZG9tLmdldEF0dHJpYnV0ZShcImFsdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSB9XSxcbiAgICAgICAgICAgIHRvRE9NKG5vZGUpIHsgcmV0dXJuIFtcImltZ1wiLCBub2RlLmF0dHJzXTsgfVxuICAgICAgICB9LFxuICAgICAgICBoYXJkX2JyZWFrOiB7XG4gICAgICAgICAgICBpbmxpbmU6IHRydWUsXG4gICAgICAgICAgICBncm91cDogXCJpbmxpbmVcIixcbiAgICAgICAgICAgIHNlbGVjdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgcGFyc2VET006IFt7IHRhZzogXCJiclwiIH1dLFxuICAgICAgICAgICAgdG9ET00oKSB7IHJldHVybiBbXCJiclwiXTsgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBtYXJrczoge1xuICAgICAgICBlbToge1xuICAgICAgICAgICAgcGFyc2VET006IFtcbiAgICAgICAgICAgICAgICB7IHRhZzogXCJpXCIgfSwgeyB0YWc6IFwiZW1cIiB9LFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IFwiZm9udC1zdHlsZT1pdGFsaWNcIiB9LFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IFwiZm9udC1zdHlsZT1ub3JtYWxcIiwgY2xlYXJNYXJrOiBtID0+IG0udHlwZS5uYW1lID09IFwiZW1cIiB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdG9ET00oKSB7IHJldHVybiBbXCJlbVwiXTsgfVxuICAgICAgICB9LFxuICAgICAgICBzdHJvbmc6IHtcbiAgICAgICAgICAgIHBhcnNlRE9NOiBbXG4gICAgICAgICAgICAgICAgeyB0YWc6IFwic3Ryb25nXCIgfSxcbiAgICAgICAgICAgICAgICB7IHRhZzogXCJiXCIsIGdldEF0dHJzOiBub2RlID0+IG5vZGUuc3R5bGUuZm9udFdlaWdodCAhPSBcIm5vcm1hbFwiICYmIG51bGwgfSxcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiBcImZvbnQtd2VpZ2h0PTQwMFwiLCBjbGVhck1hcms6IG0gPT4gbS50eXBlLm5hbWUgPT0gXCJzdHJvbmdcIiB9LFxuICAgICAgICAgICAgICAgIHsgc3R5bGU6IFwiZm9udC13ZWlnaHRcIiwgZ2V0QXR0cnM6IHZhbHVlID0+IC9eKGJvbGQoZXIpP3xbNS05XVxcZHsyLH0pJC8udGVzdCh2YWx1ZSkgJiYgbnVsbCB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdG9ET00oKSB7IHJldHVybiBbXCJzdHJvbmdcIl07IH1cbiAgICAgICAgfSxcbiAgICAgICAgbGluazoge1xuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICBocmVmOiB7fSxcbiAgICAgICAgICAgICAgICB0aXRsZTogeyBkZWZhdWx0OiBudWxsIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgcGFyc2VET006IFt7IHRhZzogXCJhW2hyZWZdXCIsIGdldEF0dHJzKGRvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgaHJlZjogZG9tLmdldEF0dHJpYnV0ZShcImhyZWZcIiksIHRpdGxlOiBkb20uZ2V0QXR0cmlidXRlKFwidGl0bGVcIikgfTtcbiAgICAgICAgICAgICAgICAgICAgfSB9XSxcbiAgICAgICAgICAgIHRvRE9NKG5vZGUpIHsgcmV0dXJuIFtcImFcIiwgbm9kZS5hdHRyc107IH1cbiAgICAgICAgfSxcbiAgICAgICAgY29kZToge1xuICAgICAgICAgICAgY29kZTogdHJ1ZSxcbiAgICAgICAgICAgIHBhcnNlRE9NOiBbeyB0YWc6IFwiY29kZVwiIH1dLFxuICAgICAgICAgICAgdG9ET00oKSB7IHJldHVybiBbXCJjb2RlXCJdOyB9XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLy8gQHRzLWlnbm9yZVxuZnVuY3Rpb24gbWF5YmVNZXJnZShhLCBiKSB7XG4gICAgaWYgKGEuaXNUZXh0ICYmIGIuaXNUZXh0ICYmIE1hcmsuc2FtZVNldChhLm1hcmtzLCBiLm1hcmtzKSlcbiAgICAgICAgcmV0dXJuIGEud2l0aFRleHQoYS50ZXh0ICsgYi50ZXh0KTtcbn1cbi8vIE9iamVjdCB1c2VkIHRvIHRyYWNrIHRoZSBjb250ZXh0IG9mIGEgcnVubmluZyBwYXJzZS5cbmNsYXNzIE1hcmtkb3duUGFyc2VTdGF0ZSB7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hLCB0b2tlbkhhbmRsZXJzKSB7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICB0aGlzLnRva2VuSGFuZGxlcnMgPSB0b2tlbkhhbmRsZXJzO1xuICAgICAgICB0aGlzLnN0YWNrID0gW3sgdHlwZTogc2NoZW1hLnRvcE5vZGVUeXBlLCBhdHRyczogbnVsbCwgY29udGVudDogW10sIG1hcmtzOiBNYXJrLm5vbmUgfV07XG4gICAgfVxuICAgIHRvcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgcHVzaChlbHQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoKVxuICAgICAgICAgICAgdGhpcy50b3AoKS5jb250ZW50LnB1c2goZWx0KTtcbiAgICB9XG4gICAgLy8gQWRkcyB0aGUgZ2l2ZW4gdGV4dCB0byB0aGUgY3VycmVudCBwb3NpdGlvbiBpbiB0aGUgZG9jdW1lbnQsXG4gICAgLy8gdXNpbmcgdGhlIGN1cnJlbnQgbWFya3MgYXMgc3R5bGluZy5cbiAgICBhZGRUZXh0KHRleHQpIHtcbiAgICAgICAgaWYgKCF0ZXh0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBsZXQgdG9wID0gdGhpcy50b3AoKSwgbm9kZXMgPSB0b3AuY29udGVudCwgbGFzdCA9IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuc2NoZW1hLnRleHQodGV4dCwgdG9wLm1hcmtzKSwgbWVyZ2VkO1xuICAgICAgICBpZiAobGFzdCAmJiAobWVyZ2VkID0gbWF5YmVNZXJnZShsYXN0LCBub2RlKSkpXG4gICAgICAgICAgICBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXSA9IG1lcmdlZDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICB9XG4gICAgLy8gQWRkcyB0aGUgZ2l2ZW4gbWFyayB0byB0aGUgc2V0IG9mIGFjdGl2ZSBtYXJrcy5cbiAgICBvcGVuTWFyayhtYXJrKSB7XG4gICAgICAgIGxldCB0b3AgPSB0aGlzLnRvcCgpO1xuICAgICAgICB0b3AubWFya3MgPSBtYXJrLmFkZFRvU2V0KHRvcC5tYXJrcyk7XG4gICAgfVxuICAgIC8vIFJlbW92ZXMgdGhlIGdpdmVuIG1hcmsgZnJvbSB0aGUgc2V0IG9mIGFjdGl2ZSBtYXJrcy5cbiAgICBjbG9zZU1hcmsobWFyaykge1xuICAgICAgICBsZXQgdG9wID0gdGhpcy50b3AoKTtcbiAgICAgICAgdG9wLm1hcmtzID0gbWFyay5yZW1vdmVGcm9tU2V0KHRvcC5tYXJrcyk7XG4gICAgfVxuICAgIHBhcnNlVG9rZW5zKHRva3MpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgdG9rID0gdG9rc1tpXTtcbiAgICAgICAgICAgIGxldCBoYW5kbGVyID0gdGhpcy50b2tlbkhhbmRsZXJzW3Rvay50eXBlXTtcbiAgICAgICAgICAgIGlmICghaGFuZGxlcilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb2tlbiB0eXBlIGBcIiArIHRvay50eXBlICsgXCJgIG5vdCBzdXBwb3J0ZWQgYnkgTWFya2Rvd24gcGFyc2VyXCIpO1xuICAgICAgICAgICAgaGFuZGxlcih0aGlzLCB0b2ssIHRva3MsIGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFkZCBhIG5vZGUgYXQgdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gICAgYWRkTm9kZSh0eXBlLCBhdHRycywgY29udGVudCkge1xuICAgICAgICBsZXQgdG9wID0gdGhpcy50b3AoKTtcbiAgICAgICAgbGV0IG5vZGUgPSB0eXBlLmNyZWF0ZUFuZEZpbGwoYXR0cnMsIGNvbnRlbnQsIHRvcCA/IHRvcC5tYXJrcyA6IFtdKTtcbiAgICAgICAgaWYgKCFub2RlKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHRoaXMucHVzaChub2RlKTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIC8vIFdyYXAgc3Vic2VxdWVudCBjb250ZW50IGluIGEgbm9kZSBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAgICBvcGVuTm9kZSh0eXBlLCBhdHRycykge1xuICAgICAgICB0aGlzLnN0YWNrLnB1c2goeyB0eXBlOiB0eXBlLCBhdHRyczogYXR0cnMsIGNvbnRlbnQ6IFtdLCBtYXJrczogTWFyay5ub25lIH0pO1xuICAgIH1cbiAgICAvLyBDbG9zZSBhbmQgcmV0dXJuIHRoZSBub2RlIHRoYXQgaXMgY3VycmVudGx5IG9uIHRvcCBvZiB0aGUgc3RhY2suXG4gICAgY2xvc2VOb2RlKCkge1xuICAgICAgICBsZXQgaW5mbyA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZE5vZGUoaW5mby50eXBlLCBpbmZvLmF0dHJzLCBpbmZvLmNvbnRlbnQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGF0dHJzKHNwZWMsIHRva2VuLCB0b2tlbnMsIGkpIHtcbiAgICBpZiAoc3BlYy5nZXRBdHRycylcbiAgICAgICAgcmV0dXJuIHNwZWMuZ2V0QXR0cnModG9rZW4sIHRva2VucywgaSk7XG4gICAgLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdoZW4gYGF0dHJzYCBpcyBhIEZ1bmN0aW9uXG4gICAgZWxzZSBpZiAoc3BlYy5hdHRycyBpbnN0YW5jZW9mIEZ1bmN0aW9uKVxuICAgICAgICByZXR1cm4gc3BlYy5hdHRycyh0b2tlbik7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gc3BlYy5hdHRycztcbn1cbi8vIENvZGUgY29udGVudCBpcyByZXByZXNlbnRlZCBhcyBhIHNpbmdsZSB0b2tlbiB3aXRoIGEgYGNvbnRlbnRgXG4vLyBwcm9wZXJ0eSBpbiBNYXJrZG93bi1pdC5cbmZ1bmN0aW9uIG5vQ2xvc2VUb2tlbihzcGVjLCB0eXBlKSB7XG4gICAgcmV0dXJuIHNwZWMubm9DbG9zZVRva2VuIHx8IHR5cGUgPT0gXCJjb2RlX2lubGluZVwiIHx8IHR5cGUgPT0gXCJjb2RlX2Jsb2NrXCIgfHwgdHlwZSA9PSBcImZlbmNlXCI7XG59XG5mdW5jdGlvbiB3aXRob3V0VHJhaWxpbmdOZXdsaW5lKHN0cikge1xuICAgIHJldHVybiBzdHJbc3RyLmxlbmd0aCAtIDFdID09IFwiXFxuXCIgPyBzdHIuc2xpY2UoMCwgc3RyLmxlbmd0aCAtIDEpIDogc3RyO1xufVxuZnVuY3Rpb24gbm9PcCgpIHsgfVxuZnVuY3Rpb24gdG9rZW5IYW5kbGVycyhzY2hlbWEsIHRva2Vucykge1xuICAgIGxldCBoYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChsZXQgdHlwZSBpbiB0b2tlbnMpIHtcbiAgICAgICAgbGV0IHNwZWMgPSB0b2tlbnNbdHlwZV07XG4gICAgICAgIGlmIChzcGVjLmJsb2NrKSB7XG4gICAgICAgICAgICBsZXQgbm9kZVR5cGUgPSBzY2hlbWEubm9kZVR5cGUoc3BlYy5ibG9jayk7XG4gICAgICAgICAgICBpZiAobm9DbG9zZVRva2VuKHNwZWMsIHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnNbdHlwZV0gPSAoc3RhdGUsIHRvaywgdG9rZW5zLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLm9wZW5Ob2RlKG5vZGVUeXBlLCBhdHRycyhzcGVjLCB0b2ssIHRva2VucywgaSkpO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5hZGRUZXh0KHdpdGhvdXRUcmFpbGluZ05ld2xpbmUodG9rLmNvbnRlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2xvc2VOb2RlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzW3R5cGUgKyBcIl9vcGVuXCJdID0gKHN0YXRlLCB0b2ssIHRva2VucywgaSkgPT4gc3RhdGUub3Blbk5vZGUobm9kZVR5cGUsIGF0dHJzKHNwZWMsIHRvaywgdG9rZW5zLCBpKSk7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnNbdHlwZSArIFwiX2Nsb3NlXCJdID0gc3RhdGUgPT4gc3RhdGUuY2xvc2VOb2RlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3BlYy5ub2RlKSB7XG4gICAgICAgICAgICBsZXQgbm9kZVR5cGUgPSBzY2hlbWEubm9kZVR5cGUoc3BlYy5ub2RlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzW3R5cGVdID0gKHN0YXRlLCB0b2ssIHRva2VucywgaSkgPT4gc3RhdGUuYWRkTm9kZShub2RlVHlwZSwgYXR0cnMoc3BlYywgdG9rLCB0b2tlbnMsIGkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzcGVjLm1hcmspIHtcbiAgICAgICAgICAgIGxldCBtYXJrVHlwZSA9IHNjaGVtYS5tYXJrc1tzcGVjLm1hcmtdO1xuICAgICAgICAgICAgaWYgKG5vQ2xvc2VUb2tlbihzcGVjLCB0eXBlKSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzW3R5cGVdID0gKHN0YXRlLCB0b2ssIHRva2VucywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5vcGVuTWFyayhtYXJrVHlwZS5jcmVhdGUoYXR0cnMoc3BlYywgdG9rLCB0b2tlbnMsIGkpKSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmFkZFRleHQod2l0aG91dFRyYWlsaW5nTmV3bGluZSh0b2suY29udGVudCkpO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jbG9zZU1hcmsobWFya1R5cGUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyc1t0eXBlICsgXCJfb3BlblwiXSA9IChzdGF0ZSwgdG9rLCB0b2tlbnMsIGkpID0+IHN0YXRlLm9wZW5NYXJrKG1hcmtUeXBlLmNyZWF0ZShhdHRycyhzcGVjLCB0b2ssIHRva2VucywgaSkpKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVyc1t0eXBlICsgXCJfY2xvc2VcIl0gPSBzdGF0ZSA9PiBzdGF0ZS5jbG9zZU1hcmsobWFya1R5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNwZWMuaWdub3JlKSB7XG4gICAgICAgICAgICBpZiAobm9DbG9zZVRva2VuKHNwZWMsIHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnNbdHlwZV0gPSBub09wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnNbdHlwZSArIFwiX29wZW5cIl0gPSBub09wO1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzW3R5cGUgKyBcIl9jbG9zZVwiXSA9IG5vT3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVucmVjb2duaXplZCBwYXJzaW5nIHNwZWMgXCIgKyBKU09OLnN0cmluZ2lmeShzcGVjKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlcnMudGV4dCA9IChzdGF0ZSwgdG9rKSA9PiBzdGF0ZS5hZGRUZXh0KHRvay5jb250ZW50KTtcbiAgICBoYW5kbGVycy5pbmxpbmUgPSAoc3RhdGUsIHRvaykgPT4gc3RhdGUucGFyc2VUb2tlbnModG9rLmNoaWxkcmVuKTtcbiAgICBoYW5kbGVycy5zb2Z0YnJlYWsgPSBoYW5kbGVycy5zb2Z0YnJlYWsgfHwgKHN0YXRlID0+IHN0YXRlLmFkZFRleHQoXCIgXCIpKTtcbiAgICByZXR1cm4gaGFuZGxlcnM7XG59XG4vKipcbkEgY29uZmlndXJhdGlvbiBvZiBhIE1hcmtkb3duIHBhcnNlci4gU3VjaCBhIHBhcnNlciB1c2VzXG5bbWFya2Rvd24taXRdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZG93bi1pdC9tYXJrZG93bi1pdCkgdG9cbnRva2VuaXplIGEgZmlsZSwgYW5kIHRoZW4gcnVucyB0aGUgY3VzdG9tIHJ1bGVzIGl0IGlzIGdpdmVuIG92ZXJcbnRoZSB0b2tlbnMgdG8gY3JlYXRlIGEgUHJvc2VNaXJyb3IgZG9jdW1lbnQgdHJlZS5cbiovXG5jbGFzcyBNYXJrZG93blBhcnNlciB7XG4gICAgLyoqXG4gICAgQ3JlYXRlIGEgcGFyc2VyIHdpdGggdGhlIGdpdmVuIGNvbmZpZ3VyYXRpb24uIFlvdSBjYW4gY29uZmlndXJlXG4gICAgdGhlIG1hcmtkb3duLWl0IHBhcnNlciB0byBwYXJzZSB0aGUgZGlhbGVjdCB5b3Ugd2FudCwgYW5kIHByb3ZpZGVcbiAgICBhIGRlc2NyaXB0aW9uIG9mIHRoZSBQcm9zZU1pcnJvciBlbnRpdGllcyB0aG9zZSB0b2tlbnMgbWFwIHRvIGluXG4gICAgdGhlIGB0b2tlbnNgIG9iamVjdCwgd2hpY2ggbWFwcyB0b2tlbiBuYW1lcyB0byBkZXNjcmlwdGlvbnMgb2ZcbiAgICB3aGF0IHRvIGRvIHdpdGggdGhlbS4gU3VjaCBhIGRlc2NyaXB0aW9uIGlzIGFuIG9iamVjdCwgYW5kIG1heVxuICAgIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIHBhcnNlcidzIGRvY3VtZW50IHNjaGVtYS5cbiAgICAqL1xuICAgIHNjaGVtYSwgXG4gICAgLyoqXG4gICAgVGhpcyBwYXJzZXIncyBtYXJrZG93bi1pdCB0b2tlbml6ZXIuXG4gICAgKi9cbiAgICB0b2tlbml6ZXIsIFxuICAgIC8qKlxuICAgIFRoZSB2YWx1ZSBvZiB0aGUgYHRva2Vuc2Agb2JqZWN0IHVzZWQgdG8gY29uc3RydWN0IHRoaXNcbiAgICBwYXJzZXIuIENhbiBiZSB1c2VmdWwgdG8gY29weSBhbmQgbW9kaWZ5IHRvIGJhc2Ugb3RoZXIgcGFyc2Vyc1xuICAgIG9uLlxuICAgICovXG4gICAgdG9rZW5zKSB7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgICAgICB0aGlzLnRva2VuaXplciA9IHRva2VuaXplcjtcbiAgICAgICAgdGhpcy50b2tlbnMgPSB0b2tlbnM7XG4gICAgICAgIHRoaXMudG9rZW5IYW5kbGVycyA9IHRva2VuSGFuZGxlcnMoc2NoZW1hLCB0b2tlbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICBQYXJzZSBhIHN0cmluZyBhcyBbQ29tbW9uTWFya10oaHR0cDovL2NvbW1vbm1hcmsub3JnLykgbWFya3VwLFxuICAgIGFuZCBjcmVhdGUgYSBQcm9zZU1pcnJvciBkb2N1bWVudCBhcyBwcmVzY3JpYmVkIGJ5IHRoaXMgcGFyc2VyJ3NcbiAgICBydWxlcy5cbiAgICBcbiAgICBUaGUgc2Vjb25kIGFyZ3VtZW50LCB3aGVuIGdpdmVuLCBpcyBwYXNzZWQgdGhyb3VnaCB0byB0aGVcbiAgICBbTWFya2Rvd25cbiAgICBwYXJzZXJdKGh0dHBzOi8vbWFya2Rvd24taXQuZ2l0aHViLmlvL21hcmtkb3duLWl0LyNNYXJrZG93bkl0LnBhcnNlKS5cbiAgICAqL1xuICAgIHBhcnNlKHRleHQsIG1hcmtkb3duRW52ID0ge30pIHtcbiAgICAgICAgbGV0IHN0YXRlID0gbmV3IE1hcmtkb3duUGFyc2VTdGF0ZSh0aGlzLnNjaGVtYSwgdGhpcy50b2tlbkhhbmRsZXJzKSwgZG9jO1xuICAgICAgICBzdGF0ZS5wYXJzZVRva2Vucyh0aGlzLnRva2VuaXplci5wYXJzZSh0ZXh0LCBtYXJrZG93bkVudikpO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBkb2MgPSBzdGF0ZS5jbG9zZU5vZGUoKTtcbiAgICAgICAgfSB3aGlsZSAoc3RhdGUuc3RhY2subGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGRvYyB8fCB0aGlzLnNjaGVtYS50b3BOb2RlVHlwZS5jcmVhdGVBbmRGaWxsKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbGlzdElzVGlnaHQodG9rZW5zLCBpKSB7XG4gICAgd2hpbGUgKCsraSA8IHRva2Vucy5sZW5ndGgpXG4gICAgICAgIGlmICh0b2tlbnNbaV0udHlwZSAhPSBcImxpc3RfaXRlbV9vcGVuXCIpXG4gICAgICAgICAgICByZXR1cm4gdG9rZW5zW2ldLmhpZGRlbjtcbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbkEgcGFyc2VyIHBhcnNpbmcgdW5leHRlbmRlZCBbQ29tbW9uTWFya10oaHR0cDovL2NvbW1vbm1hcmsub3JnLyksXG53aXRob3V0IGlubGluZSBIVE1MLCBhbmQgcHJvZHVjaW5nIGEgZG9jdW1lbnQgaW4gdGhlIGJhc2ljIHNjaGVtYS5cbiovXG5jb25zdCBkZWZhdWx0TWFya2Rvd25QYXJzZXIgPSBuZXcgTWFya2Rvd25QYXJzZXIoc2NoZW1hLCBNYXJrZG93bkl0KFwiY29tbW9ubWFya1wiLCB7IGh0bWw6IGZhbHNlIH0pLCB7XG4gICAgYmxvY2txdW90ZTogeyBibG9jazogXCJibG9ja3F1b3RlXCIgfSxcbiAgICBwYXJhZ3JhcGg6IHsgYmxvY2s6IFwicGFyYWdyYXBoXCIgfSxcbiAgICBsaXN0X2l0ZW06IHsgYmxvY2s6IFwibGlzdF9pdGVtXCIgfSxcbiAgICBidWxsZXRfbGlzdDogeyBibG9jazogXCJidWxsZXRfbGlzdFwiLCBnZXRBdHRyczogKF8sIHRva2VucywgaSkgPT4gKHsgdGlnaHQ6IGxpc3RJc1RpZ2h0KHRva2VucywgaSkgfSkgfSxcbiAgICBvcmRlcmVkX2xpc3Q6IHsgYmxvY2s6IFwib3JkZXJlZF9saXN0XCIsIGdldEF0dHJzOiAodG9rLCB0b2tlbnMsIGkpID0+ICh7XG4gICAgICAgICAgICBvcmRlcjogK3Rvay5hdHRyR2V0KFwic3RhcnRcIikgfHwgMSxcbiAgICAgICAgICAgIHRpZ2h0OiBsaXN0SXNUaWdodCh0b2tlbnMsIGkpXG4gICAgICAgIH0pIH0sXG4gICAgaGVhZGluZzogeyBibG9jazogXCJoZWFkaW5nXCIsIGdldEF0dHJzOiB0b2sgPT4gKHsgbGV2ZWw6ICt0b2sudGFnLnNsaWNlKDEpIH0pIH0sXG4gICAgY29kZV9ibG9jazogeyBibG9jazogXCJjb2RlX2Jsb2NrXCIsIG5vQ2xvc2VUb2tlbjogdHJ1ZSB9LFxuICAgIGZlbmNlOiB7IGJsb2NrOiBcImNvZGVfYmxvY2tcIiwgZ2V0QXR0cnM6IHRvayA9PiAoeyBwYXJhbXM6IHRvay5pbmZvIHx8IFwiXCIgfSksIG5vQ2xvc2VUb2tlbjogdHJ1ZSB9LFxuICAgIGhyOiB7IG5vZGU6IFwiaG9yaXpvbnRhbF9ydWxlXCIgfSxcbiAgICBpbWFnZTogeyBub2RlOiBcImltYWdlXCIsIGdldEF0dHJzOiB0b2sgPT4gKHtcbiAgICAgICAgICAgIHNyYzogdG9rLmF0dHJHZXQoXCJzcmNcIiksXG4gICAgICAgICAgICB0aXRsZTogdG9rLmF0dHJHZXQoXCJ0aXRsZVwiKSB8fCBudWxsLFxuICAgICAgICAgICAgYWx0OiB0b2suY2hpbGRyZW5bMF0gJiYgdG9rLmNoaWxkcmVuWzBdLmNvbnRlbnQgfHwgbnVsbFxuICAgICAgICB9KSB9LFxuICAgIGhhcmRicmVhazogeyBub2RlOiBcImhhcmRfYnJlYWtcIiB9LFxuICAgIGVtOiB7IG1hcms6IFwiZW1cIiB9LFxuICAgIHN0cm9uZzogeyBtYXJrOiBcInN0cm9uZ1wiIH0sXG4gICAgbGluazogeyBtYXJrOiBcImxpbmtcIiwgZ2V0QXR0cnM6IHRvayA9PiAoe1xuICAgICAgICAgICAgaHJlZjogdG9rLmF0dHJHZXQoXCJocmVmXCIpLFxuICAgICAgICAgICAgdGl0bGU6IHRvay5hdHRyR2V0KFwidGl0bGVcIikgfHwgbnVsbFxuICAgICAgICB9KSB9LFxuICAgIGNvZGVfaW5saW5lOiB7IG1hcms6IFwiY29kZVwiLCBub0Nsb3NlVG9rZW46IHRydWUgfVxufSk7XG5cbmNvbnN0IGJsYW5rTWFyayA9IHsgb3BlbjogXCJcIiwgY2xvc2U6IFwiXCIsIG1peGFibGU6IHRydWUgfTtcbi8qKlxuQSBzcGVjaWZpY2F0aW9uIGZvciBzZXJpYWxpemluZyBhIFByb3NlTWlycm9yIGRvY3VtZW50IGFzXG5NYXJrZG93bi9Db21tb25NYXJrIHRleHQuXG4qL1xuY2xhc3MgTWFya2Rvd25TZXJpYWxpemVyIHtcbiAgICAvKipcbiAgICBDb25zdHJ1Y3QgYSBzZXJpYWxpemVyIHdpdGggdGhlIGdpdmVuIGNvbmZpZ3VyYXRpb24uIFRoZSBgbm9kZXNgXG4gICAgb2JqZWN0IHNob3VsZCBtYXAgbm9kZSBuYW1lcyBpbiBhIGdpdmVuIHNjaGVtYSB0byBmdW5jdGlvbiB0aGF0XG4gICAgdGFrZSBhIHNlcmlhbGl6ZXIgc3RhdGUgYW5kIHN1Y2ggYSBub2RlLCBhbmQgc2VyaWFsaXplIHRoZSBub2RlLlxuICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgVGhlIG5vZGUgc2VyaWFsaXplciBmdW5jdGlvbnMgZm9yIHRoaXMgc2VyaWFsaXplci5cbiAgICAqL1xuICAgIG5vZGVzLCBcbiAgICAvKipcbiAgICBUaGUgbWFyayBzZXJpYWxpemVyIGluZm8uXG4gICAgKi9cbiAgICBtYXJrcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICAgICAgdGhpcy5tYXJrcyA9IG1hcmtzO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICBTZXJpYWxpemUgdGhlIGNvbnRlbnQgb2YgdGhlIGdpdmVuIG5vZGUgdG9cbiAgICBbQ29tbW9uTWFya10oaHR0cDovL2NvbW1vbm1hcmsub3JnLykuXG4gICAgKi9cbiAgICBzZXJpYWxpemUoY29udGVudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBsZXQgc3RhdGUgPSBuZXcgTWFya2Rvd25TZXJpYWxpemVyU3RhdGUodGhpcy5ub2RlcywgdGhpcy5tYXJrcywgb3B0aW9ucyk7XG4gICAgICAgIHN0YXRlLnJlbmRlckNvbnRlbnQoY29udGVudCk7XG4gICAgICAgIHJldHVybiBzdGF0ZS5vdXQ7XG4gICAgfVxufVxuLyoqXG5BIHNlcmlhbGl6ZXIgZm9yIHRoZSBbYmFzaWMgc2NoZW1hXShodHRwczovL3Byb3NlbWlycm9yLm5ldC9kb2NzL3JlZi8jc2NoZW1hKS5cbiovXG5jb25zdCBkZWZhdWx0TWFya2Rvd25TZXJpYWxpemVyID0gbmV3IE1hcmtkb3duU2VyaWFsaXplcih7XG4gICAgYmxvY2txdW90ZShzdGF0ZSwgbm9kZSkge1xuICAgICAgICBzdGF0ZS53cmFwQmxvY2soXCI+IFwiLCBudWxsLCBub2RlLCAoKSA9PiBzdGF0ZS5yZW5kZXJDb250ZW50KG5vZGUpKTtcbiAgICB9LFxuICAgIGNvZGVfYmxvY2soc3RhdGUsIG5vZGUpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBmcm9udCBtYXR0ZXIgZmVuY2VzIGFyZSBsb25nZXIgdGhhbiBhbnkgZGFzaCBzZXF1ZW5jZSB3aXRoaW4gaXRcbiAgICAgICAgY29uc3QgYmFja3RpY2tzID0gbm9kZS50ZXh0Q29udGVudC5tYXRjaCgvYHszLH0vZ20pO1xuICAgICAgICBjb25zdCBmZW5jZSA9IGJhY2t0aWNrcyA/IChiYWNrdGlja3Muc29ydCgpLnNsaWNlKC0xKVswXSArIFwiYFwiKSA6IFwiYGBgXCI7XG4gICAgICAgIHN0YXRlLndyaXRlKGZlbmNlICsgKG5vZGUuYXR0cnMucGFyYW1zIHx8IFwiXCIpICsgXCJcXG5cIik7XG4gICAgICAgIHN0YXRlLnRleHQobm9kZS50ZXh0Q29udGVudCwgZmFsc2UpO1xuICAgICAgICAvLyBBZGQgYSBuZXdsaW5lIHRvIHRoZSBjdXJyZW50IGNvbnRlbnQgYmVmb3JlIGFkZGluZyBjbG9zaW5nIG1hcmtlclxuICAgICAgICBzdGF0ZS53cml0ZShcIlxcblwiKTtcbiAgICAgICAgc3RhdGUud3JpdGUoZmVuY2UpO1xuICAgICAgICBzdGF0ZS5jbG9zZUJsb2NrKG5vZGUpO1xuICAgIH0sXG4gICAgaGVhZGluZyhzdGF0ZSwgbm9kZSkge1xuICAgICAgICBzdGF0ZS53cml0ZShzdGF0ZS5yZXBlYXQoXCIjXCIsIG5vZGUuYXR0cnMubGV2ZWwpICsgXCIgXCIpO1xuICAgICAgICBzdGF0ZS5yZW5kZXJJbmxpbmUobm9kZSwgZmFsc2UpO1xuICAgICAgICBzdGF0ZS5jbG9zZUJsb2NrKG5vZGUpO1xuICAgIH0sXG4gICAgaG9yaXpvbnRhbF9ydWxlKHN0YXRlLCBub2RlKSB7XG4gICAgICAgIHN0YXRlLndyaXRlKG5vZGUuYXR0cnMubWFya3VwIHx8IFwiLS0tXCIpO1xuICAgICAgICBzdGF0ZS5jbG9zZUJsb2NrKG5vZGUpO1xuICAgIH0sXG4gICAgYnVsbGV0X2xpc3Qoc3RhdGUsIG5vZGUpIHtcbiAgICAgICAgc3RhdGUucmVuZGVyTGlzdChub2RlLCBcIiAgXCIsICgpID0+IChub2RlLmF0dHJzLmJ1bGxldCB8fCBcIipcIikgKyBcIiBcIik7XG4gICAgfSxcbiAgICBvcmRlcmVkX2xpc3Qoc3RhdGUsIG5vZGUpIHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gbm9kZS5hdHRycy5vcmRlciB8fCAxO1xuICAgICAgICBsZXQgbWF4VyA9IFN0cmluZyhzdGFydCArIG5vZGUuY2hpbGRDb3VudCAtIDEpLmxlbmd0aDtcbiAgICAgICAgbGV0IHNwYWNlID0gc3RhdGUucmVwZWF0KFwiIFwiLCBtYXhXICsgMik7XG4gICAgICAgIHN0YXRlLnJlbmRlckxpc3Qobm9kZSwgc3BhY2UsIGkgPT4ge1xuICAgICAgICAgICAgbGV0IG5TdHIgPSBTdHJpbmcoc3RhcnQgKyBpKTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5yZXBlYXQoXCIgXCIsIG1heFcgLSBuU3RyLmxlbmd0aCkgKyBuU3RyICsgXCIuIFwiO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGxpc3RfaXRlbShzdGF0ZSwgbm9kZSkge1xuICAgICAgICBzdGF0ZS5yZW5kZXJDb250ZW50KG5vZGUpO1xuICAgIH0sXG4gICAgcGFyYWdyYXBoKHN0YXRlLCBub2RlKSB7XG4gICAgICAgIHN0YXRlLnJlbmRlcklubGluZShub2RlKTtcbiAgICAgICAgc3RhdGUuY2xvc2VCbG9jayhub2RlKTtcbiAgICB9LFxuICAgIGltYWdlKHN0YXRlLCBub2RlKSB7XG4gICAgICAgIHN0YXRlLndyaXRlKFwiIVtcIiArIHN0YXRlLmVzYyhub2RlLmF0dHJzLmFsdCB8fCBcIlwiKSArIFwiXShcIiArIG5vZGUuYXR0cnMuc3JjLnJlcGxhY2UoL1tcXChcXCldL2csIFwiXFxcXCQmXCIpICtcbiAgICAgICAgICAgIChub2RlLmF0dHJzLnRpdGxlID8gJyBcIicgKyBub2RlLmF0dHJzLnRpdGxlLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKSArICdcIicgOiBcIlwiKSArIFwiKVwiKTtcbiAgICB9LFxuICAgIGhhcmRfYnJlYWsoc3RhdGUsIG5vZGUsIHBhcmVudCwgaW5kZXgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGluZGV4ICsgMTsgaSA8IHBhcmVudC5jaGlsZENvdW50OyBpKyspXG4gICAgICAgICAgICBpZiAocGFyZW50LmNoaWxkKGkpLnR5cGUgIT0gbm9kZS50eXBlKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUud3JpdGUoXCJcXFxcXFxuXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICB9LFxuICAgIHRleHQoc3RhdGUsIG5vZGUpIHtcbiAgICAgICAgc3RhdGUudGV4dChub2RlLnRleHQsICFzdGF0ZS5pbkF1dG9saW5rKTtcbiAgICB9XG59LCB7XG4gICAgZW06IHsgb3BlbjogXCIqXCIsIGNsb3NlOiBcIipcIiwgbWl4YWJsZTogdHJ1ZSwgZXhwZWxFbmNsb3NpbmdXaGl0ZXNwYWNlOiB0cnVlIH0sXG4gICAgc3Ryb25nOiB7IG9wZW46IFwiKipcIiwgY2xvc2U6IFwiKipcIiwgbWl4YWJsZTogdHJ1ZSwgZXhwZWxFbmNsb3NpbmdXaGl0ZXNwYWNlOiB0cnVlIH0sXG4gICAgbGluazoge1xuICAgICAgICBvcGVuKHN0YXRlLCBtYXJrLCBwYXJlbnQsIGluZGV4KSB7XG4gICAgICAgICAgICBzdGF0ZS5pbkF1dG9saW5rID0gaXNQbGFpblVSTChtYXJrLCBwYXJlbnQsIGluZGV4KTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5pbkF1dG9saW5rID8gXCI8XCIgOiBcIltcIjtcbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2Uoc3RhdGUsIG1hcmssIHBhcmVudCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGxldCB7IGluQXV0b2xpbmsgfSA9IHN0YXRlO1xuICAgICAgICAgICAgc3RhdGUuaW5BdXRvbGluayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJldHVybiBpbkF1dG9saW5rID8gXCI+XCJcbiAgICAgICAgICAgICAgICA6IFwiXShcIiArIG1hcmsuYXR0cnMuaHJlZi5yZXBsYWNlKC9bXFwoXFwpXCJdL2csIFwiXFxcXCQmXCIpICsgKG1hcmsuYXR0cnMudGl0bGUgPyBgIFwiJHttYXJrLmF0dHJzLnRpdGxlLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKX1cImAgOiBcIlwiKSArIFwiKVwiO1xuICAgICAgICB9LFxuICAgICAgICBtaXhhYmxlOiB0cnVlXG4gICAgfSxcbiAgICBjb2RlOiB7IG9wZW4oX3N0YXRlLCBfbWFyaywgcGFyZW50LCBpbmRleCkgeyByZXR1cm4gYmFja3RpY2tzRm9yKHBhcmVudC5jaGlsZChpbmRleCksIC0xKTsgfSxcbiAgICAgICAgY2xvc2UoX3N0YXRlLCBfbWFyaywgcGFyZW50LCBpbmRleCkgeyByZXR1cm4gYmFja3RpY2tzRm9yKHBhcmVudC5jaGlsZChpbmRleCAtIDEpLCAxKTsgfSxcbiAgICAgICAgZXNjYXBlOiBmYWxzZSB9XG59KTtcbmZ1bmN0aW9uIGJhY2t0aWNrc0Zvcihub2RlLCBzaWRlKSB7XG4gICAgbGV0IHRpY2tzID0gL2ArL2csIG0sIGxlbiA9IDA7XG4gICAgaWYgKG5vZGUuaXNUZXh0KVxuICAgICAgICB3aGlsZSAobSA9IHRpY2tzLmV4ZWMobm9kZS50ZXh0KSlcbiAgICAgICAgICAgIGxlbiA9IE1hdGgubWF4KGxlbiwgbVswXS5sZW5ndGgpO1xuICAgIGxldCByZXN1bHQgPSBsZW4gPiAwICYmIHNpZGUgPiAwID8gXCIgYFwiIDogXCJgXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgICAgcmVzdWx0ICs9IFwiYFwiO1xuICAgIGlmIChsZW4gPiAwICYmIHNpZGUgPCAwKVxuICAgICAgICByZXN1bHQgKz0gXCIgXCI7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGlzUGxhaW5VUkwobGluaywgcGFyZW50LCBpbmRleCkge1xuICAgIGlmIChsaW5rLmF0dHJzLnRpdGxlIHx8ICEvXlxcdys6Ly50ZXN0KGxpbmsuYXR0cnMuaHJlZikpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBsZXQgY29udGVudCA9IHBhcmVudC5jaGlsZChpbmRleCk7XG4gICAgaWYgKCFjb250ZW50LmlzVGV4dCB8fCBjb250ZW50LnRleHQgIT0gbGluay5hdHRycy5ocmVmIHx8IGNvbnRlbnQubWFya3NbY29udGVudC5tYXJrcy5sZW5ndGggLSAxXSAhPSBsaW5rKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIGluZGV4ID09IHBhcmVudC5jaGlsZENvdW50IC0gMSB8fCAhbGluay5pc0luU2V0KHBhcmVudC5jaGlsZChpbmRleCArIDEpLm1hcmtzKTtcbn1cbi8qKlxuVGhpcyBpcyBhbiBvYmplY3QgdXNlZCB0byB0cmFjayBzdGF0ZSBhbmQgZXhwb3NlXG5tZXRob2RzIHJlbGF0ZWQgdG8gbWFya2Rvd24gc2VyaWFsaXphdGlvbi4gSW5zdGFuY2VzIGFyZSBwYXNzZWQgdG9cbm5vZGUgYW5kIG1hcmsgc2VyaWFsaXphdGlvbiBtZXRob2RzIChzZWUgYHRvTWFya2Rvd25gKS5cbiovXG5jbGFzcyBNYXJrZG93blNlcmlhbGl6ZXJTdGF0ZSB7XG4gICAgLyoqXG4gICAgQGludGVybmFsXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIG5vZGVzLCBcbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIG1hcmtzLCBcbiAgICAvKipcbiAgICBUaGUgb3B0aW9ucyBwYXNzZWQgdG8gdGhlIHNlcmlhbGl6ZXIuXG4gICAgKi9cbiAgICBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICAgICAgdGhpcy5tYXJrcyA9IG1hcmtzO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMuZGVsaW0gPSBcIlwiO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMub3V0ID0gXCJcIjtcbiAgICAgICAgLyoqXG4gICAgICAgIEBpbnRlcm5hbFxuICAgICAgICAqL1xuICAgICAgICB0aGlzLmNsb3NlZCA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbkF1dG9saW5rID0gdW5kZWZpbmVkO1xuICAgICAgICAvKipcbiAgICAgICAgQGludGVybmFsXG4gICAgICAgICovXG4gICAgICAgIHRoaXMuYXRCbG9ja1N0YXJ0ID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICBAaW50ZXJuYWxcbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pblRpZ2h0TGlzdCA9IGZhbHNlO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy50aWdodExpc3RzID09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudGlnaHRMaXN0cyA9IGZhbHNlO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5oYXJkQnJlYWtOb2RlTmFtZSA9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmhhcmRCcmVha05vZGVOYW1lID0gXCJoYXJkX2JyZWFrXCI7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZmx1c2hDbG9zZShzaXplID0gMikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hdEJsYW5rKCkpXG4gICAgICAgICAgICAgICAgdGhpcy5vdXQgKz0gXCJcXG5cIjtcbiAgICAgICAgICAgIGlmIChzaXplID4gMSkge1xuICAgICAgICAgICAgICAgIGxldCBkZWxpbU1pbiA9IHRoaXMuZGVsaW07XG4gICAgICAgICAgICAgICAgbGV0IHRyaW0gPSAvXFxzKyQvLmV4ZWMoZGVsaW1NaW4pO1xuICAgICAgICAgICAgICAgIGlmICh0cmltKVxuICAgICAgICAgICAgICAgICAgICBkZWxpbU1pbiA9IGRlbGltTWluLnNsaWNlKDAsIGRlbGltTWluLmxlbmd0aCAtIHRyaW1bMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHNpemU7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXQgKz0gZGVsaW1NaW4gKyBcIlxcblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jbG9zZWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgZ2V0TWFyayhuYW1lKSB7XG4gICAgICAgIGxldCBpbmZvID0gdGhpcy5tYXJrc1tuYW1lXTtcbiAgICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnN0cmljdCAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNYXJrIHR5cGUgXFxgJHtuYW1lfVxcYCBub3Qgc3VwcG9ydGVkIGJ5IE1hcmtkb3duIHJlbmRlcmVyYCk7XG4gICAgICAgICAgICBpbmZvID0gYmxhbmtNYXJrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cbiAgICAvKipcbiAgICBSZW5kZXIgYSBibG9jaywgcHJlZml4aW5nIGVhY2ggbGluZSB3aXRoIGBkZWxpbWAsIGFuZCB0aGUgZmlyc3RcbiAgICBsaW5lIGluIGBmaXJzdERlbGltYC4gYG5vZGVgIHNob3VsZCBiZSB0aGUgbm9kZSB0aGF0IGlzIGNsb3NlZCBhdFxuICAgIHRoZSBlbmQgb2YgdGhlIGJsb2NrLCBhbmQgYGZgIGlzIGEgZnVuY3Rpb24gdGhhdCByZW5kZXJzIHRoZVxuICAgIGNvbnRlbnQgb2YgdGhlIGJsb2NrLlxuICAgICovXG4gICAgd3JhcEJsb2NrKGRlbGltLCBmaXJzdERlbGltLCBub2RlLCBmKSB7XG4gICAgICAgIGxldCBvbGQgPSB0aGlzLmRlbGltO1xuICAgICAgICB0aGlzLndyaXRlKGZpcnN0RGVsaW0gIT0gbnVsbCA/IGZpcnN0RGVsaW0gOiBkZWxpbSk7XG4gICAgICAgIHRoaXMuZGVsaW0gKz0gZGVsaW07XG4gICAgICAgIGYoKTtcbiAgICAgICAgdGhpcy5kZWxpbSA9IG9sZDtcbiAgICAgICAgdGhpcy5jbG9zZUJsb2NrKG5vZGUpO1xuICAgIH1cbiAgICAvKipcbiAgICBAaW50ZXJuYWxcbiAgICAqL1xuICAgIGF0QmxhbmsoKSB7XG4gICAgICAgIHJldHVybiAvKF58XFxuKSQvLnRlc3QodGhpcy5vdXQpO1xuICAgIH1cbiAgICAvKipcbiAgICBFbnN1cmUgdGhlIGN1cnJlbnQgY29udGVudCBlbmRzIHdpdGggYSBuZXdsaW5lLlxuICAgICovXG4gICAgZW5zdXJlTmV3TGluZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmF0QmxhbmsoKSlcbiAgICAgICAgICAgIHRoaXMub3V0ICs9IFwiXFxuXCI7XG4gICAgfVxuICAgIC8qKlxuICAgIFByZXBhcmUgdGhlIHN0YXRlIGZvciB3cml0aW5nIG91dHB1dCAoY2xvc2luZyBjbG9zZWQgcGFyYWdyYXBocyxcbiAgICBhZGRpbmcgZGVsaW1pdGVycywgYW5kIHNvIG9uKSwgYW5kIHRoZW4gb3B0aW9uYWxseSBhZGQgY29udGVudFxuICAgICh1bmVzY2FwZWQpIHRvIHRoZSBvdXRwdXQuXG4gICAgKi9cbiAgICB3cml0ZShjb250ZW50KSB7XG4gICAgICAgIHRoaXMuZmx1c2hDbG9zZSgpO1xuICAgICAgICBpZiAodGhpcy5kZWxpbSAmJiB0aGlzLmF0QmxhbmsoKSlcbiAgICAgICAgICAgIHRoaXMub3V0ICs9IHRoaXMuZGVsaW07XG4gICAgICAgIGlmIChjb250ZW50KVxuICAgICAgICAgICAgdGhpcy5vdXQgKz0gY29udGVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgQ2xvc2UgdGhlIGJsb2NrIGZvciB0aGUgZ2l2ZW4gbm9kZS5cbiAgICAqL1xuICAgIGNsb3NlQmxvY2sobm9kZSkge1xuICAgICAgICB0aGlzLmNsb3NlZCA9IG5vZGU7XG4gICAgfVxuICAgIC8qKlxuICAgIEFkZCB0aGUgZ2l2ZW4gdGV4dCB0byB0aGUgZG9jdW1lbnQuIFdoZW4gZXNjYXBlIGlzIG5vdCBgZmFsc2VgLFxuICAgIGl0IHdpbGwgYmUgZXNjYXBlZC5cbiAgICAqL1xuICAgIHRleHQodGV4dCwgZXNjYXBlID0gdHJ1ZSkge1xuICAgICAgICBsZXQgbGluZXMgPSB0ZXh0LnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLndyaXRlKCk7XG4gICAgICAgICAgICAvLyBFc2NhcGUgZXhjbGFtYXRpb24gbWFya3MgaW4gZnJvbnQgb2YgbGlua3NcbiAgICAgICAgICAgIGlmICghZXNjYXBlICYmIGxpbmVzW2ldWzBdID09IFwiW1wiICYmIC8oXnxbXlxcXFxdKVxcISQvLnRlc3QodGhpcy5vdXQpKVxuICAgICAgICAgICAgICAgIHRoaXMub3V0ID0gdGhpcy5vdXQuc2xpY2UoMCwgdGhpcy5vdXQubGVuZ3RoIC0gMSkgKyBcIlxcXFwhXCI7XG4gICAgICAgICAgICB0aGlzLm91dCArPSBlc2NhcGUgPyB0aGlzLmVzYyhsaW5lc1tpXSwgdGhpcy5hdEJsb2NrU3RhcnQpIDogbGluZXNbaV07XG4gICAgICAgICAgICBpZiAoaSAhPSBsaW5lcy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICAgIHRoaXMub3V0ICs9IFwiXFxuXCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgUmVuZGVyIHRoZSBnaXZlbiBub2RlIGFzIGEgYmxvY2suXG4gICAgKi9cbiAgICByZW5kZXIobm9kZSwgcGFyZW50LCBpbmRleCkge1xuICAgICAgICBpZiAodGhpcy5ub2Rlc1tub2RlLnR5cGUubmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMubm9kZXNbbm9kZS50eXBlLm5hbWVdKHRoaXMsIG5vZGUsIHBhcmVudCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdHJpY3QgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG9rZW4gdHlwZSBgXCIgKyBub2RlLnR5cGUubmFtZSArIFwiYCBub3Qgc3VwcG9ydGVkIGJ5IE1hcmtkb3duIHJlbmRlcmVyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIW5vZGUudHlwZS5pc0xlYWYpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlLmlubGluZUNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVySW5saW5lKG5vZGUpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJDb250ZW50KG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmlzQmxvY2spXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VCbG9jayhub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICBSZW5kZXIgdGhlIGNvbnRlbnRzIG9mIGBwYXJlbnRgIGFzIGJsb2NrIG5vZGVzLlxuICAgICovXG4gICAgcmVuZGVyQ29udGVudChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LmZvckVhY2goKG5vZGUsIF8sIGkpID0+IHRoaXMucmVuZGVyKG5vZGUsIHBhcmVudCwgaSkpO1xuICAgIH1cbiAgICAvKipcbiAgICBSZW5kZXIgdGhlIGNvbnRlbnRzIG9mIGBwYXJlbnRgIGFzIGlubGluZSBjb250ZW50LlxuICAgICovXG4gICAgcmVuZGVySW5saW5lKHBhcmVudCwgZnJvbUJsb2NrU3RhcnQgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuYXRCbG9ja1N0YXJ0ID0gZnJvbUJsb2NrU3RhcnQ7XG4gICAgICAgIGxldCBhY3RpdmUgPSBbXSwgdHJhaWxpbmcgPSBcIlwiO1xuICAgICAgICBsZXQgcHJvZ3Jlc3MgPSAobm9kZSwgb2Zmc2V0LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IG1hcmtzID0gbm9kZSA/IG5vZGUubWFya3MgOiBbXTtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBtYXJrcyBmcm9tIGBoYXJkX2JyZWFrYCB0aGF0IGFyZSB0aGUgbGFzdCBub2RlIGluc2lkZVxuICAgICAgICAgICAgLy8gdGhhdCBtYXJrIHRvIHByZXZlbnQgcGFyc2VyIGVkZ2UgY2FzZXMgd2l0aCBuZXcgbGluZXMganVzdFxuICAgICAgICAgICAgLy8gYmVmb3JlIGNsb3NpbmcgbWFya3MuXG4gICAgICAgICAgICBpZiAobm9kZSAmJiBub2RlLnR5cGUubmFtZSA9PT0gdGhpcy5vcHRpb25zLmhhcmRCcmVha05vZGVOYW1lKVxuICAgICAgICAgICAgICAgIG1hcmtzID0gbWFya3MuZmlsdGVyKG0gPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggKyAxID09IHBhcmVudC5jaGlsZENvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHBhcmVudC5jaGlsZChpbmRleCArIDEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5pc0luU2V0KG5leHQubWFya3MpICYmICghbmV4dC5pc1RleHQgfHwgL1xcUy8udGVzdChuZXh0LnRleHQpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBsZWFkaW5nID0gdHJhaWxpbmc7XG4gICAgICAgICAgICB0cmFpbGluZyA9IFwiXCI7XG4gICAgICAgICAgICAvLyBJZiB3aGl0ZXNwYWNlIGhhcyB0byBiZSBleHBlbGxlZCBmcm9tIHRoZSBub2RlLCBhZGp1c3RcbiAgICAgICAgICAgIC8vIGxlYWRpbmcgYW5kIHRyYWlsaW5nIGFjY29yZGluZ2x5LlxuICAgICAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5pc1RleHQgJiYgbWFya3Muc29tZShtYXJrID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgaW5mbyA9IHRoaXMuZ2V0TWFyayhtYXJrLnR5cGUubmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZm8gJiYgaW5mby5leHBlbEVuY2xvc2luZ1doaXRlc3BhY2UgJiYgIW1hcmsuaXNJblNldChhY3RpdmUpO1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgW18sIGxlYWQsIHJlc3RdID0gL14oXFxzKikoLiopJC9tLmV4ZWMobm9kZS50ZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAobGVhZCkge1xuICAgICAgICAgICAgICAgICAgICBsZWFkaW5nICs9IGxlYWQ7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSByZXN0ID8gbm9kZS53aXRoVGV4dChyZXN0KSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbm9kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtzID0gYWN0aXZlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2RlICYmIG5vZGUuaXNUZXh0ICYmIG1hcmtzLnNvbWUobWFyayA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGluZm8gPSB0aGlzLmdldE1hcmsobWFyay50eXBlLm5hbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmZvICYmIGluZm8uZXhwZWxFbmNsb3NpbmdXaGl0ZXNwYWNlICYmXG4gICAgICAgICAgICAgICAgICAgIChpbmRleCA9PSBwYXJlbnQuY2hpbGRDb3VudCAtIDEgfHwgIW1hcmsuaXNJblNldChwYXJlbnQuY2hpbGQoaW5kZXggKyAxKS5tYXJrcykpO1xuICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgW18sIHJlc3QsIHRyYWlsXSA9IC9eKC4qPykoXFxzKikkL20uZXhlYyhub2RlLnRleHQpO1xuICAgICAgICAgICAgICAgIGlmICh0cmFpbCkge1xuICAgICAgICAgICAgICAgICAgICB0cmFpbGluZyA9IHRyYWlsO1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gcmVzdCA/IG5vZGUud2l0aFRleHQocmVzdCkgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrcyA9IGFjdGl2ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaW5uZXIgPSBtYXJrcy5sZW5ndGggPyBtYXJrc1ttYXJrcy5sZW5ndGggLSAxXSA6IG51bGw7XG4gICAgICAgICAgICBsZXQgbm9Fc2MgPSBpbm5lciAmJiB0aGlzLmdldE1hcmsoaW5uZXIudHlwZS5uYW1lKS5lc2NhcGUgPT09IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGxlbiA9IG1hcmtzLmxlbmd0aCAtIChub0VzYyA/IDEgOiAwKTtcbiAgICAgICAgICAgIC8vIFRyeSB0byByZW9yZGVyICdtaXhhYmxlJyBtYXJrcywgc3VjaCBhcyBlbSBhbmQgc3Ryb25nLCB3aGljaFxuICAgICAgICAgICAgLy8gaW4gTWFya2Rvd24gbWF5IGJlIG9wZW5lZCBhbmQgY2xvc2VkIGluIGRpZmZlcmVudCBvcmRlciwgc29cbiAgICAgICAgICAgIC8vIHRoYXQgb3JkZXIgb2YgdGhlIG1hcmtzIGZvciB0aGUgdG9rZW4gbWF0Y2hlcyB0aGUgb3JkZXIgaW5cbiAgICAgICAgICAgIC8vIGFjdGl2ZS5cbiAgICAgICAgICAgIG91dGVyOiBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hcmsgPSBtYXJrc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2V0TWFyayhtYXJrLnR5cGUubmFtZSkubWl4YWJsZSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhY3RpdmUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG90aGVyID0gYWN0aXZlW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ2V0TWFyayhvdGhlci50eXBlLm5hbWUpLm1peGFibGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmsuZXEob3RoZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IGopXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya3MgPSBtYXJrcy5zbGljZSgwLCBqKS5jb25jYXQobWFyaykuY29uY2F0KG1hcmtzLnNsaWNlKGosIGkpKS5jb25jYXQobWFya3Muc2xpY2UoaSArIDEsIGxlbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaiA+IGkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya3MgPSBtYXJrcy5zbGljZSgwLCBpKS5jb25jYXQobWFya3Muc2xpY2UoaSArIDEsIGopKS5jb25jYXQobWFyaykuY29uY2F0KG1hcmtzLnNsaWNlKGosIGxlbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBwcmVmaXggb2YgdGhlIG1hcmsgc2V0IHRoYXQgZGlkbid0IGNoYW5nZVxuICAgICAgICAgICAgbGV0IGtlZXAgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGtlZXAgPCBNYXRoLm1pbihhY3RpdmUubGVuZ3RoLCBsZW4pICYmIG1hcmtzW2tlZXBdLmVxKGFjdGl2ZVtrZWVwXSkpXG4gICAgICAgICAgICAgICAgKytrZWVwO1xuICAgICAgICAgICAgLy8gQ2xvc2UgdGhlIG1hcmtzIHRoYXQgbmVlZCB0byBiZSBjbG9zZWRcbiAgICAgICAgICAgIHdoaWxlIChrZWVwIDwgYWN0aXZlLmxlbmd0aClcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQodGhpcy5tYXJrU3RyaW5nKGFjdGl2ZS5wb3AoKSwgZmFsc2UsIHBhcmVudCwgaW5kZXgpLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyBPdXRwdXQgYW55IHByZXZpb3VzbHkgZXhwZWxsZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvdXRzaWRlIHRoZSBtYXJrc1xuICAgICAgICAgICAgaWYgKGxlYWRpbmcpXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0KGxlYWRpbmcpO1xuICAgICAgICAgICAgLy8gT3BlbiB0aGUgbWFya3MgdGhhdCBuZWVkIHRvIGJlIG9wZW5lZFxuICAgICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoYWN0aXZlLmxlbmd0aCA8IGxlbikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYWRkID0gbWFya3NbYWN0aXZlLmxlbmd0aF07XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS5wdXNoKGFkZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGV4dCh0aGlzLm1hcmtTdHJpbmcoYWRkLCB0cnVlLCBwYXJlbnQsIGluZGV4KSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0QmxvY2tTdGFydCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBSZW5kZXIgdGhlIG5vZGUuIFNwZWNpYWwgY2FzZSBjb2RlIG1hcmtzLCBzaW5jZSB0aGVpciBjb250ZW50XG4gICAgICAgICAgICAgICAgLy8gbWF5IG5vdCBiZSBlc2NhcGVkLlxuICAgICAgICAgICAgICAgIGlmIChub0VzYyAmJiBub2RlLmlzVGV4dClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXh0KHRoaXMubWFya1N0cmluZyhpbm5lciwgdHJ1ZSwgcGFyZW50LCBpbmRleCkgKyBub2RlLnRleHQgK1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrU3RyaW5nKGlubmVyLCBmYWxzZSwgcGFyZW50LCBpbmRleCArIDEpLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcihub2RlLCBwYXJlbnQsIGluZGV4KTtcbiAgICAgICAgICAgICAgICB0aGlzLmF0QmxvY2tTdGFydCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWZ0ZXIgdGhlIGZpcnN0IG5vbi1lbXB0eSB0ZXh0IG5vZGUgaXMgcmVuZGVyZWQsIHRoZSBlbmQgb2Ygb3V0cHV0XG4gICAgICAgICAgICAvLyBpcyBubyBsb25nZXIgYXQgYmxvY2sgc3RhcnQuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gRklYTUU6IElmIGEgbm9uLXRleHQgbm9kZSB3cml0ZXMgc29tZXRoaW5nIHRvIHRoZSBvdXRwdXQgZm9yIHRoaXNcbiAgICAgICAgICAgIC8vIGJsb2NrLCB0aGUgZW5kIG9mIG91dHB1dCBpcyBhbHNvIG5vIGxvbmdlciBhdCBibG9jayBzdGFydC4gQnV0IGhvd1xuICAgICAgICAgICAgLy8gY2FuIHdlIGRldGVjdCB0aGF0P1xuICAgICAgICAgICAgaWYgKChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5vZGUuaXNUZXh0KSAmJiBub2RlLm5vZGVTaXplID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXRCbG9ja1N0YXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHBhcmVudC5mb3JFYWNoKHByb2dyZXNzKTtcbiAgICAgICAgcHJvZ3Jlc3MobnVsbCwgMCwgcGFyZW50LmNoaWxkQ291bnQpO1xuICAgICAgICB0aGlzLmF0QmxvY2tTdGFydCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICBSZW5kZXIgYSBub2RlJ3MgY29udGVudCBhcyBhIGxpc3QuIGBkZWxpbWAgc2hvdWxkIGJlIHRoZSBleHRyYVxuICAgIGluZGVudGF0aW9uIGFkZGVkIHRvIGFsbCBsaW5lcyBleGNlcHQgdGhlIGZpcnN0IGluIGFuIGl0ZW0sXG4gICAgYGZpcnN0RGVsaW1gIGlzIGEgZnVuY3Rpb24gZ29pbmcgZnJvbSBhbiBpdGVtIGluZGV4IHRvIGFcbiAgICBkZWxpbWl0ZXIgZm9yIHRoZSBmaXJzdCBsaW5lIG9mIHRoZSBpdGVtLlxuICAgICovXG4gICAgcmVuZGVyTGlzdChub2RlLCBkZWxpbSwgZmlyc3REZWxpbSkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQgJiYgdGhpcy5jbG9zZWQudHlwZSA9PSBub2RlLnR5cGUpXG4gICAgICAgICAgICB0aGlzLmZsdXNoQ2xvc2UoMyk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaW5UaWdodExpc3QpXG4gICAgICAgICAgICB0aGlzLmZsdXNoQ2xvc2UoMSk7XG4gICAgICAgIGxldCBpc1RpZ2h0ID0gdHlwZW9mIG5vZGUuYXR0cnMudGlnaHQgIT0gXCJ1bmRlZmluZWRcIiA/IG5vZGUuYXR0cnMudGlnaHQgOiB0aGlzLm9wdGlvbnMudGlnaHRMaXN0cztcbiAgICAgICAgbGV0IHByZXZUaWdodCA9IHRoaXMuaW5UaWdodExpc3Q7XG4gICAgICAgIHRoaXMuaW5UaWdodExpc3QgPSBpc1RpZ2h0O1xuICAgICAgICBub2RlLmZvckVhY2goKGNoaWxkLCBfLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoaSAmJiBpc1RpZ2h0KVxuICAgICAgICAgICAgICAgIHRoaXMuZmx1c2hDbG9zZSgxKTtcbiAgICAgICAgICAgIHRoaXMud3JhcEJsb2NrKGRlbGltLCBmaXJzdERlbGltKGkpLCBub2RlLCAoKSA9PiB0aGlzLnJlbmRlcihjaGlsZCwgbm9kZSwgaSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pblRpZ2h0TGlzdCA9IHByZXZUaWdodDtcbiAgICB9XG4gICAgLyoqXG4gICAgRXNjYXBlIHRoZSBnaXZlbiBzdHJpbmcgc28gdGhhdCBpdCBjYW4gc2FmZWx5IGFwcGVhciBpbiBNYXJrZG93blxuICAgIGNvbnRlbnQuIElmIGBzdGFydE9mTGluZWAgaXMgdHJ1ZSwgYWxzbyBlc2NhcGUgY2hhcmFjdGVycyB0aGF0XG4gICAgaGF2ZSBzcGVjaWFsIG1lYW5pbmcgb25seSBhdCB0aGUgc3RhcnQgb2YgdGhlIGxpbmUuXG4gICAgKi9cbiAgICBlc2Moc3RyLCBzdGFydE9mTGluZSA9IGZhbHNlKSB7XG4gICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9bYCpcXFxcflxcW1xcXV9dL2csIChtLCBpKSA9PiBtID09IFwiX1wiICYmIGkgPiAwICYmIGkgKyAxIDwgc3RyLmxlbmd0aCAmJiBzdHJbaSAtIDFdLm1hdGNoKC9cXHcvKSAmJiBzdHJbaSArIDFdLm1hdGNoKC9cXHcvKSA/IG0gOiBcIlxcXFxcIiArIG0pO1xuICAgICAgICBpZiAoc3RhcnRPZkxpbmUpXG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXihcXCtbIF18W1xcLSo+XSkvLCBcIlxcXFwkJlwiKS5yZXBsYWNlKC9eKFxccyopKCN7MSw2fSkoXFxzfCQpLywgJyQxXFxcXCQyJDMnKS5yZXBsYWNlKC9eKFxccypcXGQrKVxcLlxccy8sIFwiJDFcXFxcLiBcIik7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZXNjYXBlRXh0cmFDaGFyYWN0ZXJzKVxuICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UodGhpcy5vcHRpb25zLmVzY2FwZUV4dHJhQ2hhcmFjdGVycywgXCJcXFxcJCZcIik7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIC8qKlxuICAgIEBpbnRlcm5hbFxuICAgICovXG4gICAgcXVvdGUoc3RyKSB7XG4gICAgICAgIGxldCB3cmFwID0gc3RyLmluZGV4T2YoJ1wiJykgPT0gLTEgPyAnXCJcIicgOiBzdHIuaW5kZXhPZihcIidcIikgPT0gLTEgPyBcIicnXCIgOiBcIigpXCI7XG4gICAgICAgIHJldHVybiB3cmFwWzBdICsgc3RyICsgd3JhcFsxXTtcbiAgICB9XG4gICAgLyoqXG4gICAgUmVwZWF0IHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICovXG4gICAgcmVwZWF0KHN0ciwgbikge1xuICAgICAgICBsZXQgb3V0ID0gXCJcIjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspXG4gICAgICAgICAgICBvdXQgKz0gc3RyO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgdGhlIG1hcmtkb3duIHN0cmluZyBmb3IgYSBnaXZlbiBvcGVuaW5nIG9yIGNsb3NpbmcgbWFyay5cbiAgICAqL1xuICAgIG1hcmtTdHJpbmcobWFyaywgb3BlbiwgcGFyZW50LCBpbmRleCkge1xuICAgICAgICBsZXQgaW5mbyA9IHRoaXMuZ2V0TWFyayhtYXJrLnR5cGUubmFtZSk7XG4gICAgICAgIGxldCB2YWx1ZSA9IG9wZW4gPyBpbmZvLm9wZW4gOiBpbmZvLmNsb3NlO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIgPyB2YWx1ZSA6IHZhbHVlKHRoaXMsIG1hcmssIHBhcmVudCwgaW5kZXgpO1xuICAgIH1cbiAgICAvKipcbiAgICBHZXQgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBmcm9tIGEgc3RyaW5nLiBWYWx1ZXMgb2ZcbiAgICBsZWFkaW5nIG9yIHRyYWlsaW5nIHByb3BlcnR5IG9mIHRoZSByZXR1cm4gb2JqZWN0IHdpbGwgYmUgdW5kZWZpbmVkXG4gICAgaWYgdGhlcmUgaXMgbm8gbWF0Y2guXG4gICAgKi9cbiAgICBnZXRFbmNsb3NpbmdXaGl0ZXNwYWNlKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlYWRpbmc6ICh0ZXh0Lm1hdGNoKC9eKFxccyspLykgfHwgW3VuZGVmaW5lZF0pWzBdLFxuICAgICAgICAgICAgdHJhaWxpbmc6ICh0ZXh0Lm1hdGNoKC8oXFxzKykkLykgfHwgW3VuZGVmaW5lZF0pWzBdXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgeyBNYXJrZG93blBhcnNlciwgTWFya2Rvd25TZXJpYWxpemVyLCBNYXJrZG93blNlcmlhbGl6ZXJTdGF0ZSwgZGVmYXVsdE1hcmtkb3duUGFyc2VyLCBkZWZhdWx0TWFya2Rvd25TZXJpYWxpemVyLCBzY2hlbWEgfTtcbiIsImltcG9ydCBtYXJrZG93bml0IGZyb20gJ21hcmtkb3duLWl0JztcbmltcG9ydCB7XG4gIE1hcmtkb3duUGFyc2VyLFxuICBNYXJrZG93blNlcmlhbGl6ZXIsXG4gIGRlZmF1bHRNYXJrZG93blNlcmlhbGl6ZXIsXG59IGZyb20gJ3Byb3NlbWlycm9yLW1hcmtkb3duJztcbmltcG9ydCB7XG4gIEFVVE9fTElOS19BVFRSLFxuICBNQVJLRE9XTl9FU0NBUEVEX0FUVFIsXG4gIENoZWNrYm94U3RhdHVzLFxuICBzY2hlbWEsXG59IGZyb20gJy4vc2NoZW1hJztcblxuZXhwb3J0IGNvbnN0IG1hcmtkb3duU2VyaWFsaXplciA9IG5ldyBNYXJrZG93blNlcmlhbGl6ZXIoXG4gIHtcbiAgICBoZWFkaW5nMShzdGF0ZSwgbm9kZSwgcGFyZW50LCBpbmRleCkge1xuICAgICAgc3RhdGUud3JpdGUoJyMgJyk7XG4gICAgICBzdGF0ZS5yZW5kZXJJbmxpbmUobm9kZSk7XG4gICAgICBzdGF0ZS5jbG9zZUJsb2NrKG5vZGUpO1xuICAgIH0sXG4gICAgaGVhZGluZzIoc3RhdGUsIG5vZGUsIHBhcmVudCwgaW5kZXgpIHtcbiAgICAgIHN0YXRlLndyaXRlKCcjIyAnKTtcbiAgICAgIHN0YXRlLnJlbmRlcklubGluZShub2RlKTtcbiAgICAgIHN0YXRlLmNsb3NlQmxvY2sobm9kZSk7XG4gICAgfSxcbiAgICBoZWFkaW5nMyhzdGF0ZSwgbm9kZSwgcGFyZW50LCBpbmRleCkge1xuICAgICAgc3RhdGUud3JpdGUoJyMjIyAnKTtcbiAgICAgIHN0YXRlLnJlbmRlcklubGluZShub2RlKTtcbiAgICAgIHN0YXRlLmNsb3NlQmxvY2sobm9kZSk7XG4gICAgfSxcbiAgICBjaGVja2xpc3RfaXRlbShzdGF0ZSwgbm9kZSwgcGFyZW50LCBpbmRleCkge1xuICAgICAgY29uc3QgYm94VGV4dCA9XG4gICAgICAgIG5vZGUuYXR0cnMuc3RhdHVzID09PSBDaGVja2JveFN0YXR1cy5ET05FID8gJ1t4XSAnIDogJ1sgXSAnO1xuICAgICAgc3RhdGUud3JpdGUoYm94VGV4dCk7XG4gICAgICBzdGF0ZS5yZW5kZXJJbmxpbmUobm9kZSk7XG4gICAgICBzdGF0ZS5jbG9zZUJsb2NrKG5vZGUpO1xuICAgIH0sXG4gICAgcGFyYWdyYXBoKHN0YXRlLCBub2RlLCBwYXJlbnQsIGluZGV4KSB7XG4gICAgICBpZiAobm9kZS5ub2RlU2l6ZSA9PT0gMikge1xuICAgICAgICAvLyBXcml0ZSBhIG5vbi1icmVha2luZyBlbXB0eSBzcGFjZSBzbyBtYXJrZG93biByZXRhaW5zIHRoZSBsaW5lIGFzIGFuIGVtcHR5IHBhcmFncmFwaFxuICAgICAgICBzdGF0ZS53cml0ZSgnXFx1MDBBMCcpO1xuICAgICAgICBzdGF0ZS5jbG9zZUJsb2NrKG5vZGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkZWZhdWx0TWFya2Rvd25TZXJpYWxpemVyLm5vZGVzLnBhcmFncmFwaChzdGF0ZSwgbm9kZSwgcGFyZW50LCBpbmRleCk7XG4gICAgfSxcbiAgICBsaXN0X2l0ZW0oc3RhdGUsIG5vZGUsIHBhcmVudCwgaW5kZXgpIHtcbiAgICAgIGRlZmF1bHRNYXJrZG93blNlcmlhbGl6ZXIubm9kZXMubGlzdF9pdGVtKHN0YXRlLCBub2RlLCBwYXJlbnQsIGluZGV4KTtcbiAgICB9LFxuICAgIG9yZGVyZWRfbGlzdChzdGF0ZSwgbm9kZSwgcGFyZW50LCBpbmRleCkge1xuICAgICAgZGVmYXVsdE1hcmtkb3duU2VyaWFsaXplci5ub2Rlcy5vcmRlcmVkX2xpc3Qoc3RhdGUsIG5vZGUsIHBhcmVudCwgaW5kZXgpO1xuICAgIH0sXG4gICAgdW5vcmRlcmVkX2xpc3Qoc3RhdGUsIG5vZGUsIHBhcmVudCwgaW5kZXgpIHtcbiAgICAgIGRlZmF1bHRNYXJrZG93blNlcmlhbGl6ZXIubm9kZXMuYnVsbGV0X2xpc3Qoc3RhdGUsIG5vZGUsIHBhcmVudCwgaW5kZXgpO1xuICAgIH0sXG4gICAgdGV4dChzdGF0ZSwgbm9kZSwgcGFyZW50LCBpbmRleCkge1xuICAgICAgZGVmYXVsdE1hcmtkb3duU2VyaWFsaXplci5ub2Rlcy50ZXh0KHN0YXRlLCBub2RlLCBwYXJlbnQsIGluZGV4KTtcbiAgICB9LFxuICAgIGNvZGVfYmxvY2soc3RhdGUsIG5vZGUsIHBhcmVudCwgaW5kZXgpIHtcbiAgICAgIGlmIChub2RlLmF0dHJzW01BUktET1dOX0VTQ0FQRURfQVRUUl0pIHtcbiAgICAgICAgc3RhdGUud3JpdGUobm9kZS50ZXh0Q29udGVudCk7XG4gICAgICAgIHN0YXRlLmVuc3VyZU5ld0xpbmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmF1bHRNYXJrZG93blNlcmlhbGl6ZXIubm9kZXMuY29kZV9ibG9jayhzdGF0ZSwgbm9kZSwgcGFyZW50LCBpbmRleCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbiAge1xuICAgIC4uLmRlZmF1bHRNYXJrZG93blNlcmlhbGl6ZXIubWFya3MsXG4gICAgaW5saW5lX2xpbms6IGRlZmF1bHRNYXJrZG93blNlcmlhbGl6ZXIubWFya3MubGluayxcbiAgICBjb2RlOiB7XG4gICAgICBjbG9zZShzdGF0ZSwgbWFyaykge1xuICAgICAgICByZXR1cm4gbWFyay5hdHRyc1tNQVJLRE9XTl9FU0NBUEVEX0FUVFJdID8gJycgOiAnYCc7XG4gICAgICB9LFxuICAgICAgZXNjYXBlOiBmYWxzZSxcbiAgICAgIG9wZW4oc3RhdGUsIG1hcmspIHtcbiAgICAgICAgcmV0dXJuIG1hcmsuYXR0cnNbTUFSS0RPV05fRVNDQVBFRF9BVFRSXSA/ICcnIDogJ2AnO1xuICAgICAgfSxcbiAgICB9LFxuICB9LFxuKTtcblxuY29uc3QgbWFya2Rvd25JdFBhcnNlciA9IG1hcmtkb3duaXQoKTtcbmNvbnN0IFRva2VuID0gbWFya2Rvd25JdFBhcnNlci5jb3JlLlN0YXRlLnByb3RvdHlwZS5Ub2tlbjtcbi8vIFdlIG5lZWQgdG8gYWNjZXNzIHRoZSBkZWZhdWx0IGltYWdlIHBhcnNlciBydWxlIHNvIHdlIGNhbiB3cmFwIGl0IGluIGN1c3RvbVxuLy8gbG9naWMuIFRoZXNlIG1ldGhvZHMgYW5kIG9iamVjdHMgYXJlIG1lYW50IHRvIGJlIGludGVybmFsIGJ1dCB0aGVyZSBzZWVtcyB0b1xuLy8gYmUgbm8gb3RoZXIgd2F5IHRvIGdldCBhdCB0aGUgZGVmYXVsdCBydWxlcy5cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGltYWdlUnVsZUluZGV4ID0gbWFya2Rvd25JdFBhcnNlci5pbmxpbmUucnVsZXIuX19maW5kX18oJ2ltYWdlJyk7XG5jb25zdCBkZWZhdWx0SW1hZ2VSdWxlID1cbiAgLy8gQHRzLWlnbm9yZVxuICBtYXJrZG93bkl0UGFyc2VyLmlubGluZS5ydWxlci5fX3J1bGVzX19baW1hZ2VSdWxlSW5kZXhdLmZuO1xuXG5jb25zdCBDSEVDS0xJU1RfSVRFTV9PUEVOX01BUktFUlMgPSBbJ1t4XScsICdbWF0nLCAnWyBdJ107XG5cbm1hcmtkb3duSXRQYXJzZXIudXNlKChtZCkgPT4ge1xuICBtZC5jb3JlLnJ1bGVyLmFmdGVyKCdibG9jaycsICdjaGVja2xpc3RfaXRlbScsIChjb3JlU3RhdGUpID0+IHtcbiAgICBjb25zdCBzcmNMaW5lcyA9IGNvcmVTdGF0ZS5zcmMuc3BsaXQoJ1xcbicpO1xuICAgIGxldCBpc0NoZWNrbGlzdE9wZW4gPSBmYWxzZTtcbiAgICBsZXQgaGFzQ2hlY2tsaXN0ID0gZmFsc2U7XG5cbiAgICBjb3JlU3RhdGUudG9rZW5zID0gY29yZVN0YXRlLnRva2Vucy5tYXAoKHRva2VuKSA9PiB7XG4gICAgICBpZiAoaXNDaGVja2xpc3RPcGVuICYmIHRva2VuLnR5cGUgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgIHRva2VuLmNvbnRlbnQgPSB0b2tlbi5jb250ZW50LnNsaWNlKDMpLnRyaW1MZWZ0KCk7XG4gICAgICB9XG4gICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ3BhcmFncmFwaF9vcGVuJykge1xuICAgICAgICBjb25zdCBbc3RhcnRMaW5lLCBlbmRMaW5lXSA9IHRva2VuLm1hcDtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHNyY0xpbmVzW3N0YXJ0TGluZV07XG4gICAgICAgIGlmIChDSEVDS0xJU1RfSVRFTV9PUEVOX01BUktFUlMuaW5jbHVkZXMoY29udGVudC5zbGljZSgwLCAzKSkpIHtcbiAgICAgICAgICBoYXNDaGVja2xpc3QgPSB0cnVlO1xuICAgICAgICAgIGlzQ2hlY2tsaXN0T3BlbiA9IHRydWU7XG4gICAgICAgICAgY29uc3QgeyBUb2tlbiB9ID0gY29yZVN0YXRlO1xuICAgICAgICAgIGNvbnN0IHRva2VuID0gbmV3IFRva2VuKCdjaGVja2xpc3RfaXRlbV9vcGVuJywgJ2RpdicsIDEpO1xuICAgICAgICAgIHRva2VuLmF0dHJQdXNoKFtcbiAgICAgICAgICAgICdzdGF0dXMnLFxuICAgICAgICAgICAgY29udGVudFsxXS50b0xvd2VyQ2FzZSgpID09PSAneCdcbiAgICAgICAgICAgICAgPyBDaGVja2JveFN0YXR1cy5ET05FLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgOiBDaGVja2JveFN0YXR1cy5FTVBUWS50b1N0cmluZygpLFxuICAgICAgICAgIF0pO1xuICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0NoZWNrbGlzdE9wZW4gJiYgdG9rZW4udHlwZSA9PT0gJ3BhcmFncmFwaF9jbG9zZScpIHtcbiAgICAgICAgaXNDaGVja2xpc3RPcGVuID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBuZXcgY29yZVN0YXRlLlRva2VuKCdjaGVja2xpc3RfaXRlbV9jbG9zZScsICdkaXYnLCAtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9KTtcblxuICAgIHJldHVybiBoYXNDaGVja2xpc3Q7XG4gIH0pO1xuXG4gIG1kLmlubGluZS5ydWxlci5hdCgnaW1hZ2UnLCAoaW5saW5lU3RhdGUpID0+IHtcbiAgICBjb25zdCB7IHBvczogb3JpZ2luYWxQb3MgfSA9IGlubGluZVN0YXRlO1xuICAgIGNvbnN0IHJlc3VsdCA9IGRlZmF1bHRJbWFnZVJ1bGUoaW5saW5lU3RhdGUpO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGNvbnN0IGNvZGVUb2tlbiA9IG5ldyBpbmxpbmVTdGF0ZS5Ub2tlbignY29kZV9pbmxpbmUnLCAnY29kZScsIDApO1xuICAgICAgY29kZVRva2VuLm1hcmt1cCA9ICdgJztcbiAgICAgIGNvZGVUb2tlbi5jb250ZW50ID0gaW5saW5lU3RhdGUuc3JjLnNsaWNlKG9yaWdpbmFsUG9zLCBpbmxpbmVTdGF0ZS5wb3MpO1xuICAgICAgY29kZVRva2VuLmF0dHJTZXQoTUFSS0RPV05fRVNDQVBFRF9BVFRSLCAndHJ1ZScpO1xuICAgICAgaW5saW5lU3RhdGUudG9rZW5zW2lubGluZVN0YXRlLnRva2Vucy5sZW5ndGggLSAxXSA9IGNvZGVUb2tlbjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG59KTtcblxuY2xhc3MgU2NyYXRjaFRva2VuUGFyc2VyIHtcbiAgcHJpdmF0ZSBmdWxsVG9rZW5MaXN0OiBtYXJrZG93bml0LlRva2VuW107XG4gIHByaXZhdGUgdG9rZW5TdGFjazogbWFya2Rvd25pdC5Ub2tlbltdO1xuICBwcml2YXRlIHBhcnNlYWJsZTogYm9vbGVhbjtcbiAgcHJpdmF0ZSBzcmM6IHN0cmluZztcblxuICBzdGF0aWMgRE9DVU1FTlRfTUFQID0gbmV3IE1hcChbXG4gICAgWydoZWFkaW5nMScsIFsnaW5saW5lJ11dLFxuICAgIFsnaGVhZGluZzInLCBbJ2lubGluZSddXSxcbiAgICBbJ2hlYWRpbmczJywgWydpbmxpbmUnXV0sXG4gICAgWydwYXJhZ3JhcGgnLCBbJ2lubGluZSddXSxcbiAgICBbJ2ZlbmNlJywgWydpbmxpbmUnXV0sXG4gICAgWydidWxsZXRfbGlzdCcsIFsnbGlzdF9pdGVtJywgJ2lubGluZSddXSxcbiAgICBbJ29yZGVyZWRfbGlzdCcsIFsnbGlzdF9pdGVtJywgJ2lubGluZSddXSxcbiAgICBbJ2xpc3RfaXRlbScsIFsncGFyYWdyYXBoJywgJ2lubGluZSddXSxcbiAgICBbJ2NoZWNrbGlzdF9pdGVtJywgWydpbmxpbmUnXV0sXG4gICAgWydpbmxpbmUnLCBbXV0sXG4gIF0pO1xuXG4gIHN0YXRpYyBnZXRUeXBlTmFtZSh0b2tlblR5cGU6IHN0cmluZykge1xuICAgIHJldHVybiB0b2tlblR5cGUucmVwbGFjZSgnX29wZW4nLCAnJykucmVwbGFjZSgnX2Nsb3NlJywgJycpO1xuICB9XG5cbiAgY29uc3RydWN0b3Ioc3JjOiBzdHJpbmcpIHtcbiAgICB0aGlzLnJlc2V0SW50ZXJuYWxTdGF0ZSgpO1xuICAgIHRoaXMuc3JjID0gc3JjO1xuICB9XG5cbiAgdGFrZSh0b2tlbjogbWFya2Rvd25pdC5Ub2tlbik6IG51bGwgfCBtYXJrZG93bml0LlRva2VuW10ge1xuICAgIGNvbnN0IHsgbmVzdGluZyB9ID0gdG9rZW47XG4gICAgbGV0IHsgdHlwZSB9ID0gdG9rZW47XG4gICAgdHlwZSA9IFNjcmF0Y2hUb2tlblBhcnNlci5nZXRUeXBlTmFtZSh0eXBlKTtcblxuICAgIHRoaXMuZnVsbFRva2VuTGlzdC5wdXNoKHRva2VuKTtcblxuICAgIGlmIChcbiAgICAgIFNjcmF0Y2hUb2tlblBhcnNlci5ET0NVTUVOVF9NQVAuaGFzKHR5cGUpID09PSBmYWxzZSAmJlxuICAgICAgdHlwZSAhPT0gJ2lubGluZSdcbiAgICApIHtcbiAgICAgIHRoaXMucGFyc2VhYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGFyc2VhYmxlICYmIHRoaXMudG9rZW5TdGFjay5sZW5ndGggJiYgbmVzdGluZyA+PSAwKSB7XG4gICAgICBjb25zdCBwYXJlbnRUeXBlID0gU2NyYXRjaFRva2VuUGFyc2VyLmdldFR5cGVOYW1lKFxuICAgICAgICB0aGlzLnRva2VuU3RhY2tbdGhpcy50b2tlblN0YWNrLmxlbmd0aCAtIDFdLnR5cGUsXG4gICAgICApO1xuXG4gICAgICBpZiAoXG4gICAgICAgIFNjcmF0Y2hUb2tlblBhcnNlci5ET0NVTUVOVF9NQVAuZ2V0KHBhcmVudFR5cGUpLmluY2x1ZGVzKHR5cGUpID09PSBmYWxzZVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMucGFyc2VhYmxlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5lc3RpbmcgPiAwKSB7XG4gICAgICB0aGlzLnRva2VuU3RhY2sucHVzaCh0b2tlbik7XG4gICAgfVxuXG4gICAgaWYgKG5lc3RpbmcgPCAwKSB7XG4gICAgICB0aGlzLnRva2VuU3RhY2sucG9wKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudG9rZW5TdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnN0IG91dCA9IHRoaXMuZ2V0VG9rZW5zKCk7XG4gICAgICB0aGlzLnJlc2V0SW50ZXJuYWxTdGF0ZSgpO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VG9rZW5zID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZnVsbFRva2VuTGlzdCwgcGFyc2VhYmxlIH0gPSB0aGlzO1xuXG4gICAgaWYgKHBhcnNlYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbWFwOiBbZW5kTGluZSwgc3RhcnRMaW5lXSxcbiAgICAgIH0gPSBmdWxsVG9rZW5MaXN0WzBdO1xuICAgICAgY29uc3QgY29kZVRva2VuID0gbmV3IFRva2VuKCdmZW5jZScsICdjb2RlJywgMCk7XG4gICAgICBjb2RlVG9rZW4uY29udGVudCA9IHRoaXMuc3JjXG4gICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgLnNsaWNlKGVuZExpbmUsIHN0YXJ0TGluZSlcbiAgICAgICAgLmpvaW4oJ1xcbicpO1xuICAgICAgY29kZVRva2VuLmF0dHJQdXNoKFtNQVJLRE9XTl9FU0NBUEVEX0FUVFIsICd0cnVlJ10pO1xuICAgICAgcmV0dXJuIFtjb2RlVG9rZW5dO1xuICAgIH1cblxuICAgIHJldHVybiBmdWxsVG9rZW5MaXN0O1xuICB9O1xuXG4gIHByaXZhdGUgcmVzZXRJbnRlcm5hbFN0YXRlID0gKCkgPT4ge1xuICAgIHRoaXMuZnVsbFRva2VuTGlzdCA9IFtdO1xuICAgIHRoaXMudG9rZW5TdGFjayA9IFtdO1xuICAgIHRoaXMucGFyc2VhYmxlID0gdHJ1ZTtcbiAgfTtcbn1cblxuY29uc3QgcGFyc2VyU2hpbSA9ICgpID0+ICh7XG4gIHBhcnNlKC4uLmFyZ3MpIHtcbiAgICAod2luZG93IGFzIGFueSkubWlwID0gbWFya2Rvd25JdFBhcnNlcjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3QgaW5pdGlhbCA9IG1hcmtkb3duSXRQYXJzZXIucGFyc2UoLi4uYXJncyk7XG4gICAgY29uc3Qgb3V0ID0gW107XG4gICAgY29uc3QgdG9rZW5QYXJzZXIgPSBuZXcgU2NyYXRjaFRva2VuUGFyc2VyKGFyZ3NbMF0pO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbml0aWFsLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IGluaXRpYWxbaV07XG4gICAgICBjb25zdCB7IG5lc3RpbmcsIHRhZywgdHlwZSB9ID0gdG9rZW47XG5cbiAgICAgIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ2hlYWRpbmcnKSAmJiB0YWcgPT09ICdoMScpIHtcbiAgICAgICAgdG9rZW4udHlwZSA9IHRva2VuLnR5cGUucmVwbGFjZSgnaGVhZGluZycsICdoZWFkaW5nMScpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUuc3RhcnRzV2l0aCgnaGVhZGluZycpICYmIHRhZyA9PT0gJ2gyJykge1xuICAgICAgICB0b2tlbi50eXBlID0gdHlwZS5yZXBsYWNlKCdoZWFkaW5nJywgJ2hlYWRpbmcyJyk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZS5zdGFydHNXaXRoKCdoZWFkaW5nJykgJiYgdGFnID09PSAnaDMnKSB7XG4gICAgICAgIHRva2VuLnR5cGUgPSB0eXBlLnJlcGxhY2UoJ2hlYWRpbmcnLCAnaGVhZGluZzMnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSAnbGluaycgJiYgdG9rZW4uYXR0ckdldCgnaHJlZicpID09PSB0b2tlbi5jb250ZW50KSB7XG4gICAgICAgIHRva2VuLmF0dHJTZXQoQVVUT19MSU5LX0FUVFIsICd0cnVlJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG91dHB1dCA9IHRva2VuUGFyc2VyLnRha2UodG9rZW4pO1xuXG4gICAgICBpZiAob3V0cHV0KSB7XG4gICAgICAgIG91dC5wdXNoKC4uLm91dHB1dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dDtcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgbWFya2Rvd25QYXJzZXIgPSBuZXcgTWFya2Rvd25QYXJzZXIoXG4gIHNjaGVtYSxcbiAgLy8gQHRzLWlnbm9yZVxuICBwYXJzZXJTaGltKCksXG4gIHtcbiAgICBibG9ja3F1b3RlOiB7IGJsb2NrOiAnY29kZV9ibG9jaycgfSxcbiAgICBidWxsZXRfbGlzdDogeyBibG9jazogJ3Vub3JkZXJlZF9saXN0JyB9LFxuICAgIGZlbmNlOiB7XG4gICAgICBibG9jazogJ2NvZGVfYmxvY2snLFxuICAgICAgZ2V0QXR0cnModG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIHRva2VuLmF0dHJHZXQoTUFSS0RPV05fRVNDQVBFRF9BVFRSKSA9PT0gJ3RydWUnXG4gICAgICAgICAgPyB7IFtNQVJLRE9XTl9FU0NBUEVEX0FUVFJdOiB0cnVlIH1cbiAgICAgICAgICA6IHt9O1xuICAgICAgfSxcbiAgICB9LFxuICAgIGhlYWRpbmcxOiB7IGJsb2NrOiAnaGVhZGluZzEnIH0sXG4gICAgaGVhZGluZzI6IHsgYmxvY2s6ICdoZWFkaW5nMicgfSxcbiAgICBoZWFkaW5nMzogeyBibG9jazogJ2hlYWRpbmczJyB9LFxuICAgIGxpc3RfaXRlbTogeyBibG9jazogJ2xpc3RfaXRlbScgfSxcbiAgICBvcmRlcmVkX2xpc3Q6IHsgYmxvY2s6ICdvcmRlcmVkX2xpc3QnIH0sXG4gICAgcGFyYWdyYXBoOiB7IGJsb2NrOiAncGFyYWdyYXBoJyB9LFxuICAgIGNoZWNrbGlzdF9pdGVtOiB7XG4gICAgICBibG9jazogJ2NoZWNrbGlzdF9pdGVtJyxcbiAgICAgIGdldEF0dHJzKHRvaykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXR1czpcbiAgICAgICAgICAgIHRvay5hdHRyR2V0KCdzdGF0dXMnKSA9PT0gQ2hlY2tib3hTdGF0dXMuRE9ORS50b1N0cmluZygpXG4gICAgICAgICAgICAgID8gQ2hlY2tib3hTdGF0dXMuRE9ORVxuICAgICAgICAgICAgICA6IENoZWNrYm94U3RhdHVzLkVNUFRZLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICB9LFxuICAgIGVtOiB7IG1hcms6ICdlbScgfSxcbiAgICBzdHJvbmc6IHsgbWFyazogJ3N0cm9uZycgfSxcbiAgICBjb2RlX2lubGluZToge1xuICAgICAgZ2V0QXR0cnModG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIHRva2VuLmF0dHJHZXQoTUFSS0RPV05fRVNDQVBFRF9BVFRSKSA9PT0gJ3RydWUnXG4gICAgICAgICAgPyB7IFtNQVJLRE9XTl9FU0NBUEVEX0FUVFJdOiB0cnVlIH1cbiAgICAgICAgICA6IHt9O1xuICAgICAgfSxcbiAgICAgIG1hcms6ICdjb2RlJyxcbiAgICAgIG5vQ2xvc2VUb2tlbjogdHJ1ZSxcbiAgICB9LFxuICAgIGxpbms6IHtcbiAgICAgIG1hcms6ICdsaW5rJyxcbiAgICAgIGdldEF0dHJzKHRvaykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHRvay5hdHRyR2V0KCdocmVmJyksXG4gICAgICAgICAgdGl0bGU6IHRvay5hdHRyR2V0KCd0aXRsZScpIHx8IG51bGwsXG4gICAgICAgICAgLi4uKHRvay5pbmZvID09PSAnYXV0bycgJiYge1xuICAgICAgICAgICAgW0FVVE9fTElOS19BVFRSXTogdHJ1ZSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbik7XG4iLCJpbXBvcnQgeyBQbHVnaW4sIFRyYW5zYWN0aW9uIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuaW1wb3J0IHsgQVVUT19MSU5LX0FUVFIsIHNjaGVtYSB9IGZyb20gJy4vc2NoZW1hJztcbmltcG9ydCBMaW5raWZ5SXQgZnJvbSAnbGlua2lmeS1pdCc7XG5cbmNvbnN0IGxpbmtpZnkgPSBuZXcgTGlua2lmeUl0KCk7XG5cbmV4cG9ydCBjb25zdCBmaW5kQW5kSW5zZXJ0SW5saW5lTGlua3MgPSAoc3RhdGUpOiBUcmFuc2FjdGlvbiA9PiB7XG4gIGNvbnN0IHsgdHIgfSA9IHN0YXRlO1xuXG4gIHRyLmRvYy5kZXNjZW5kYW50cygobm9kZSwgcG9zLCBwYXJlbnQpID0+IHtcbiAgICBpZiAoIW5vZGUuaXNUZXh0YmxvY2spIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGaXJzdCwgZmluZCBhbmQgdmFsaWRhdGUgYWxsIGV4aXN0aW5nIGF1dG9saW5rcy4gSWYgYW4gYXV0b2xpbmsgY29udGFpbnMgdGV4dCB0aGF0IGlzIG5vdCBhIHZhbGlkIFVSTCwgcmVtb3ZlIHRoZSBsaW5rLlxuICAgIGNvbnN0IHN0YXJ0aW5nUG9zaXRpb25JbnNpZGVOb2RlID0gcG9zICsgMTtcbiAgICBjb25zdCBhdXRvTGlua01hcHM6IHsgc3RhcnRQb3M6IG51bWJlcjsgZW5kUG9zOiBudW1iZXIgfVtdID0gW107XG4gICAgbm9kZS5mb3JFYWNoKChjaGlsZCwgb2Zmc2V0LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKCFjaGlsZC5pc1RleHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IGNoaWxkTGlua01hcmsgPSBjaGlsZC5tYXJrcy5maW5kKFxuICAgICAgICAobWFyaykgPT4gbWFyay50eXBlID09PSBzY2hlbWEubWFya3MubGluayxcbiAgICAgICk7XG4gICAgICBpZiAoY2hpbGRMaW5rTWFyayAmJiBjaGlsZExpbmtNYXJrLmF0dHJzW0FVVE9fTElOS19BVFRSXSA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAoYXV0b0xpbmtNYXBzLmxlbmd0aCkge1xuICAgICAgICAgIGNvbnN0IGxhc3RNYXAgPSBhdXRvTGlua01hcHNbYXV0b0xpbmtNYXBzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0TWFwLmVuZFBvcyA9PT0gc3RhcnRpbmdQb3NpdGlvbkluc2lkZU5vZGUgKyBvZmZzZXQpIHtcbiAgICAgICAgICAgIGxhc3RNYXAuZW5kUG9zID0gcG9zICsgb2Zmc2V0ICsgY2hpbGQubm9kZVNpemU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGF1dG9MaW5rTWFwcy5wdXNoKHtcbiAgICAgICAgICAgIHN0YXJ0UG9zOiBzdGFydGluZ1Bvc2l0aW9uSW5zaWRlTm9kZSArIG9mZnNldCxcbiAgICAgICAgICAgIGVuZFBvczogc3RhcnRpbmdQb3NpdGlvbkluc2lkZU5vZGUgKyBvZmZzZXQgKyBjaGlsZC5ub2RlU2l6ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZm9yIChjb25zdCBhdXRvTGlua01hcCBvZiBhdXRvTGlua01hcHMpIHtcbiAgICAgIGNvbnN0IGxpbmtUZXh0ID0gdHIuZG9jLnRleHRCZXR3ZWVuKFxuICAgICAgICBhdXRvTGlua01hcC5zdGFydFBvcyxcbiAgICAgICAgYXV0b0xpbmtNYXAuZW5kUG9zLFxuICAgICAgKTtcbiAgICAgIGlmICghbGlua2lmeS50ZXN0KGxpbmtUZXh0KSkge1xuICAgICAgICB0ci5yZW1vdmVNYXJrKFxuICAgICAgICAgIGF1dG9MaW5rTWFwLnN0YXJ0UG9zLFxuICAgICAgICAgIGF1dG9MaW5rTWFwLmVuZFBvcyxcbiAgICAgICAgICBzY2hlbWEubWFya3MubGluayxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgZWxzZSBzdGF0ZW1lbnQgZW5zdXJlcyB0aGF0IGV4aXN0aW5nIGF1dG9saW5rcyB3aWxsIGNvbnRpbnVlIHRvIHVwZGF0ZSBldmVuIGlmIHRoZXkgYXJlXG4gICAgICAgIC8vIGFkamFjZW50IHRvIG90aGVyIHRleHQ7IHRoZSByZWdleCBVUkwgdGVzdCB3aWxsIHN0b3AgZmluZGluZyB0aGVtIGluIHRoaXMgY2FzZS5cbiAgICAgICAgdHIuYWRkTWFyayhcbiAgICAgICAgICBhdXRvTGlua01hcC5zdGFydFBvcyxcbiAgICAgICAgICBhdXRvTGlua01hcC5lbmRQb3MsXG4gICAgICAgICAgc2NoZW1hLm1hcmtzLmxpbmsuY3JlYXRlKHsgaHJlZjogbGlua1RleHQsIFtBVVRPX0xJTktfQVRUUl06IHRydWUgfSksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhlbiwgZmluZCBhbmQgaW5zZXJ0IG5ldyBhdXRvbGlua3MgYmFzZWQgb24gdGhlIHNhbWUgdGVzdC5cbiAgICBjb25zdCBtYXRjaGVzID0gbGlua2lmeS5tYXRjaChub2RlLnRleHRDb250ZW50KTtcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIG1hdGNoZXMpIHtcbiAgICAgIGNvbnN0IHN0YXJ0ID0gcG9zICsgMSArIG1hdGNoLmluZGV4O1xuICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBtYXRjaC50ZXh0Lmxlbmd0aDtcblxuICAgICAgaWYgKHRyLmRvYy5yYW5nZUhhc01hcmsoc3RhcnQsIGVuZCwgc2NoZW1hLm1hcmtzLmNvZGUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHIuZG9jLnJhbmdlSGFzTWFyayhzdGFydCwgZW5kLCBzY2hlbWEubWFya3MubGluaykpIHtcbiAgICAgICAgbGV0IGxpbmtNYXJrcyA9IFtdO1xuICAgICAgICB0ci5kb2Mubm9kZXNCZXR3ZWVuKHN0YXJ0LCBlbmQsIChub2RlKSA9PiB7XG4gICAgICAgICAgaWYgKG5vZGUuaXNUZXh0KSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rTWFyayA9IG5vZGUubWFya3MuZmluZChcbiAgICAgICAgICAgICAgKG1hcmspID0+IG1hcmsudHlwZSA9PT0gc2NoZW1hLm1hcmtzLmxpbmssXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGxpbmtNYXJrICYmIGxpbmtNYXJrLmF0dHJzW0FVVE9fTElOS19BVFRSXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgbGlua01hcmtzLnB1c2gobGlua01hcmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChsaW5rTWFya3MubGVuZ3RoKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHIuYWRkTWFyayhcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZCxcbiAgICAgICAgc2NoZW1hLm1hcmtzLmxpbmsuY3JlYXRlKHsgaHJlZjogbWF0Y2gudXJsLCBbQVVUT19MSU5LX0FUVFJdOiB0cnVlIH0pLFxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0cjtcbn07XG5cbmV4cG9ydCBjbGFzcyBJbmxpbmVMaW5rUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgYXBwZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb25zLCBvbGRTdGF0ZSwgbmV3U3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRBbmRJbnNlcnRJbmxpbmVMaW5rcyhuZXdTdGF0ZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCBDb21wb25lbnRNYW5hZ2VyIGZyb20gJ0BzdGFuZGFyZG5vdGVzL2NvbXBvbmVudC1yZWxheSc7XG5pbXBvcnQgeyBiYXNlS2V5bWFwIH0gZnJvbSAncHJvc2VtaXJyb3ItY29tbWFuZHMnO1xuaW1wb3J0IHsgRWRpdG9yVmlldyB9IGZyb20gJ3Byb3NlbWlycm9yLXZpZXcnO1xuaW1wb3J0IHsgRWRpdG9yU3RhdGUsIFBsdWdpbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcbmltcG9ydCB7IGhpc3RvcnkgfSBmcm9tICdwcm9zZW1pcnJvci1oaXN0b3J5JztcbmltcG9ydCB7IGlucHV0UnVsZXNQbHVnaW4gfSBmcm9tICcuL2lucHV0UnVsZXMnO1xuaW1wb3J0IHsgVG9vbGJhclBsdWdpbiB9IGZyb20gJy4vVG9vbGJhclBsdWdpbic7XG5pbXBvcnQgeyBUb29sdGlwUGx1Z2luIH0gZnJvbSAnLi9Ub29sdGlwUGx1Z2luJztcbmltcG9ydCB7IEVkaXRvckV4dGVuZGVyUGx1Z2luIH0gZnJvbSAnLi9FZGl0b3JFeHRlbmRlclBsdWdpbic7XG5pbXBvcnQgeyBzY2hlbWEgfSBmcm9tICcuL3NjaGVtYSc7XG5pbXBvcnQgeyBjbGllbnQgfSBmcm9tICcuL2NsaWVudCc7XG5pbXBvcnQgeyBub2RlVmlld3MgfSBmcm9tICcuL25vZGVWaWV3cyc7XG5pbXBvcnQgeyBrZXltYXBQbHVnaW5zIH0gZnJvbSAnLi9rZXltYXBzJztcbmltcG9ydCB7IG1hcmtkb3duUGFyc2VyLCBtYXJrZG93blNlcmlhbGl6ZXIgfSBmcm9tICcuL21hcmtkb3duJztcbmltcG9ydCB7IElubGluZUxpbmtQbHVnaW4gfSBmcm9tICcuL0lubGluZUxpbmtQbHVnaW4nO1xuXG5pbnRlcmZhY2UgQXBwV2luZG93IGV4dGVuZHMgV2luZG93IHtcbiAgdmlldzogRWRpdG9yVmlldztcbn1cblxuZGVjbGFyZSBjb25zdCB3aW5kb3c6IEFwcFdpbmRvdztcblxuZnVuY3Rpb24gZ2V0RG9jRm9yTmV3RWRpdG9yU3RhdGUoKSB7XG4gIHJldHVybiBjbGllbnQubGF0ZXN0VGV4dFxuICAgID8gbWFya2Rvd25QYXJzZXIucGFyc2UoY2xpZW50LmxhdGVzdFRleHQpXG4gICAgOiBjbGllbnQubGF0ZXN0RG9jXG4gICAgICA/IHNjaGVtYS5ub2RlRnJvbUpTT04oY2xpZW50LmxhdGVzdERvYylcbiAgICAgIDogc2NoZW1hLnRvcE5vZGVUeXBlLmNyZWF0ZUFuZEZpbGwoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgYXdhaXQgY2xpZW50LnJlYWR5KCk7XG5cbiAgY29uc3QgdmlldyA9ICh3aW5kb3cudmlldyA9IG5ldyBFZGl0b3JWaWV3KFxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlZGl0b3InKSxcbiAgICB7XG4gICAgICBzdGF0ZTogRWRpdG9yU3RhdGUuY3JlYXRlKHtcbiAgICAgICAgZG9jOiBnZXREb2NGb3JOZXdFZGl0b3JTdGF0ZSgpLFxuICAgICAgICBwbHVnaW5zOiBbXG4gICAgICAgICAgLi4ua2V5bWFwUGx1Z2lucyxcbiAgICAgICAgICBuZXcgVG9vbGJhclBsdWdpbihcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0b29sYmFyJyksXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbGluay1tb2RhbCcpLFxuICAgICAgICAgICksXG4gICAgICAgICAgbmV3IFRvb2x0aXBQbHVnaW4oZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpbmstdG9vbHRpcCcpKSxcbiAgICAgICAgICBuZXcgRWRpdG9yRXh0ZW5kZXJQbHVnaW4oZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2V4dGVuZGVyJykpLFxuICAgICAgICAgIG5ldyBQbHVnaW4oe1xuICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgbm9kZVZpZXdzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBuZXcgSW5saW5lTGlua1BsdWdpbigpLFxuICAgICAgICAgIGlucHV0UnVsZXNQbHVnaW4sXG4gICAgICAgICAgaGlzdG9yeSgpLFxuICAgICAgICBdLFxuICAgICAgfSksXG4gICAgICBkaXNwYXRjaFRyYW5zYWN0aW9uKHRyKSB7XG4gICAgICAgIGNvbnN0IG5leHQgPSB2aWV3LnN0YXRlLmFwcGx5KHRyKTtcbiAgICAgICAgdmlldy51cGRhdGVTdGF0ZShuZXh0KTtcbiAgICAgICAgaWYgKHRyLmRvY0NoYW5nZWQpIHtcbiAgICAgICAgICBjbGllbnQuc2F2ZU5vdGUoXG4gICAgICAgICAgICBuZXh0LmRvYy50b0pTT04oKSxcbiAgICAgICAgICAgIG1hcmtkb3duU2VyaWFsaXplci5zZXJpYWxpemUobmV4dC5kb2MpLFxuICAgICAgICAgICAgbmV4dC5kb2MudGV4dEJldHdlZW4oMCwgbmV4dC5kb2Mubm9kZVNpemUgLSAyLCAnICcpLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgKSk7XG5cbiAgY2xpZW50Lm9uVXBkYXRlKChkb2MpID0+IHtcbiAgICAvLyBXaGVuIHRoZSB1c2VyIG9wZW5zIGEgbmV3IG5vdGUsIGtlZXAgYWxsIHRoZSBwbHVnaW4gaW5zdGFuY2VzIGV4Y2VwdCB0aGUgdG9vbGJhclxuICAgIGNvbnN0IHBsdWdpbnMgPSB2aWV3LnN0YXRlLnBsdWdpbnMuZmlsdGVyKFxuICAgICAgKHBsdWdpbikgPT4gcGx1Z2luIGluc3RhbmNlb2YgVG9vbGJhclBsdWdpbiA9PT0gZmFsc2UsXG4gICAgKTtcblxuICAgIHZpZXcuc2V0UHJvcHMoe1xuICAgICAgc3RhdGU6IEVkaXRvclN0YXRlLmNyZWF0ZSh7XG4gICAgICAgIGRvYzogZ2V0RG9jRm9yTmV3RWRpdG9yU3RhdGUoKSxcbiAgICAgICAgcGx1Z2luczogW1xuICAgICAgICAgIC4uLnBsdWdpbnMsXG4gICAgICAgICAgbmV3IFRvb2xiYXJQbHVnaW4oXG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG9vbGJhcicpLFxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpbmstbW9kYWwnKSxcbiAgICAgICAgICApLFxuICAgICAgICBdLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pbml0KCk7XG4iXSwibmFtZXMiOlsic2VsZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiQ29tcG9uZW50QWN0aW9uIiwiRW52aXJvbm1lbnQiLCJDb250ZW50VHlwZSIsIkFwcERhdGFGaWVsZCIsImdldFJhbmRvbVZhbHVlcyIsInJuZHM4IiwiVWludDhBcnJheSIsInJuZyIsImNyeXB0byIsImJpbmQiLCJtc0NyeXB0byIsIkVycm9yIiwidXVpZCIsImJ5dGVUb0hleCIsImkiLCJwdXNoIiwidG9TdHJpbmciLCJzdWJzdHIiLCJvcHRpb25zIiwiYnVmIiwib2Zmc2V0Iiwicm5kcyIsInJhbmRvbSIsImFyciIsImFyZ3VtZW50cyIsImxlbmd0aCIsInRvTG93ZXJDYXNlIiwiVHlwZUVycm9yIiwiZW52aXJvbm1lbnRUb1N0cmluZyIsImVudmlyb25tZW50IiwibWFwIiwiV2ViIiwiRGVza3RvcCIsIk1vYmlsZSIsImlzTm90VW5kZWZpbmVkT3JOdWxsIiwidmFsdWUiLCJub29wIiwiTG9nZ2VyIiwid2luZG93IiwiY29uc29sZSIsImlzU3VwcG9ydGVkIiwidGhpcyIsImVuYWJsZWQiLCJsb2ciLCJlcnJvciIsIk1lc3NhZ2VQYXlsb2FkQXBpIiwiS2V5Ym9hcmRNb2RpZmllciIsIkNvbXBvbmVudFJlbGF5IiwiY29uc3RydWN0b3IiLCJwYXJhbXMiLCJhY3RpdmVUaGVtZXMiLCJhY2NlcHRzVGhlbWVzIiwidGFyZ2V0V2luZG93IiwiY29udGVudFdpbmRvdyIsInByb2Nlc3NQYXJhbWV0ZXJzIiwicmVnaXN0ZXJNZXNzYWdlSGFuZGxlciIsInJlZ2lzdGVyS2V5Ym9hcmRFdmVudExpc3RlbmVycyIsInJlZ2lzdGVyTW91c2VFdmVudExpc3RlbmVycyIsImluaXRpYWxQZXJtaXNzaW9ucyIsIm9uUmVhZHkiLCJvblRoZW1lc0NoYW5nZSIsImNvYWxsZXNlZFNhdmluZyIsImNvYWxsZXNlZFNhdmluZ0RlbGF5IiwiY29tcG9uZW50Iiwib25SZWFkeUNhbGxiYWNrIiwib25UaGVtZXNDaGFuZ2VDYWxsYmFjayIsImRlYnVnIiwiZGVpbml0IiwibWVzc2FnZVF1ZXVlIiwic2VudE1lc3NhZ2VzIiwibGFzdFN0cmVhbWVkSXRlbSIsInBlbmRpbmdTYXZlSXRlbXMiLCJwZW5kaW5nU2F2ZVRpbWVvdXQiLCJwZW5kaW5nU2F2ZVBhcmFtcyIsIm1lc3NhZ2VIYW5kbGVyIiwiZG9jdW1lbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwia2V5RG93bkV2ZW50TGlzdGVuZXIiLCJrZXlVcEV2ZW50TGlzdGVuZXIiLCJjbGlja0V2ZW50TGlzdGVuZXIiLCJldmVudCIsImRhdGEiLCJyZWZlcnJlciIsIlVSTCIsIm9yaWdpbiIsInBhcnNlZERhdGEiLCJzdHIiLCJyZXN1bHQiLCJKU09OIiwicGFyc2UiLCJ0eXBlIiwiZSIsImFjdGlvbiIsIkNvbXBvbmVudFJlZ2lzdGVyZWQiLCJoYW5kbGVNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImN0cmxLZXkiLCJrZXlEb3duRXZlbnQiLCJDdHJsIiwic2hpZnRLZXkiLCJTaGlmdCIsIm1ldGFLZXkiLCJNZXRhIiwia2V5VXBFdmVudCIsIl9ldmVudCIsIm1vdXNlQ2xpY2tFdmVudCIsInBheWxvYWQiLCJzZXNzaW9uS2V5IiwiY29tcG9uZW50RGF0YSIsIkFjdGl2YXRlVGhlbWVzIiwiYWN0aXZhdGVUaGVtZXMiLCJ0aGVtZXMiLCJvcmlnaW5hbCIsIm9yaWdpbmFsTWVzc2FnZSIsInQiLCJmaWx0ZXIiLCJtZXNzYWdlIiwibWVzc2FnZUlkIiwiZXh0ZW5zaW9uTmFtZSIsInRpdGxlIiwiYWxlcnRNZXNzYWdlIiwicmVwbGFjZSIsImNhbGxiYWNrIiwicGxhdGZvcm0iLCJyZXF1ZXN0UGVybWlzc2lvbnMiLCJwb3N0TWVzc2FnZSIsImFjdGl2ZVRoZW1lVXJscyIsIlRoZW1lc0FjdGl2YXRlZCIsImdldFNlbGZDb21wb25lbnRVVUlEIiwiaXNSdW5uaW5nSW5EZXNrdG9wQXBwbGljYXRpb24iLCJpc1J1bm5pbmdJbk1vYmlsZUFwcGxpY2F0aW9uIiwiZ2V0Q29tcG9uZW50RGF0YVZhbHVlRm9yS2V5Iiwic2V0Q29tcG9uZW50RGF0YVZhbHVlRm9yS2V5IiwiU2V0Q29tcG9uZW50RGF0YSIsImNsZWFyQ29tcG9uZW50RGF0YSIsImFwaSIsIkNvbXBvbmVudCIsImdlbmVyYXRlVVVJRCIsInNlbnRNZXNzYWdlIiwic3RyaW5naWZ5IiwicG9zdE1lc3NhZ2VQYXlsb2FkIiwicGFyZW50IiwicGVybWlzc2lvbnMiLCJSZXF1ZXN0UGVybWlzc2lvbnMiLCJpbmNvbWluZ1VybHMiLCJzb3J0IiwidGhlbWVzVG9BY3RpdmF0ZSIsInRoZW1lc1RvRGVhY3RpdmF0ZSIsImFjdGl2ZVVybCIsImluY2x1ZGVzIiwiY2FuZGlkYXRlIiwidGhlbWVVcmwiLCJkZWFjdGl2YXRlVGhlbWUiLCJsaW5rIiwiY3JlYXRlRWxlbWVudCIsImlkIiwiYnRvYSIsImhyZWYiLCJyZWwiLCJtZWRpYSIsImNsYXNzTmFtZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJ0aGVtZUVsZW1lbnRGb3JVcmwiLCJBcnJheSIsImZyb20iLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic2xpY2UiLCJmaW5kIiwiZWxlbWVudCIsInBhcmVudE5vZGUiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVDaGlsZCIsInV1aWR2NCIsInN0cmVhbUl0ZW1zIiwiY29udGVudFR5cGVzIiwiU3RyZWFtSXRlbXMiLCJjb250ZW50X3R5cGVzIiwiaXRlbXMiLCJzdHJlYW1Db250ZXh0SXRlbSIsIlN0cmVhbUNvbnRleHRJdGVtIiwiaXRlbSIsImNsZWFyVGltZW91dCIsInBlcmZvcm1TYXZpbmdPZkl0ZW1zIiwic2VsZWN0SXRlbSIsIlNlbGVjdEl0ZW0iLCJqc29uT2JqZWN0Rm9ySXRlbSIsImNsZWFyU2VsZWN0aW9uIiwiQ2xlYXJTZWxlY3Rpb24iLCJjb250ZW50X3R5cGUiLCJUYWciLCJjcmVhdGVJdGVtIiwiQ3JlYXRlSXRlbSIsImFzc29jaWF0ZUl0ZW0iLCJjcmVhdGVJdGVtcyIsIm1hcHBlZCIsIkNyZWF0ZUl0ZW1zIiwiQXNzb2NpYXRlSXRlbSIsImRlYXNzb2NpYXRlSXRlbSIsIkRlYXNzb2NpYXRlSXRlbSIsImRlbGV0ZUl0ZW0iLCJkZWxldGVJdGVtcyIsIkRlbGV0ZUl0ZW1zIiwic2VuZEN1c3RvbUV2ZW50Iiwic2F2ZUl0ZW0iLCJza2lwRGVib3VuY2VyIiwic2F2ZUl0ZW1zIiwic2F2ZUl0ZW1XaXRoUHJlc2F2ZSIsInByZXNhdmUiLCJzYXZlSXRlbXNXaXRoUHJlc2F2ZSIsImNvbmNlcm5UaW1lb3V0Iiwic2V0VGltZW91dCIsImNvbmNlcm5UaW1lb3V0cyIsImZvckVhY2giLCJ0aW1lb3V0IiwiYWxlcnQiLCJtYXBwZWRJdGVtcyIsIlNhdmVJdGVtcyIsImluY29taW5nSWRzIiwicHJlZXhpc3RpbmdJdGVtcyIsImNvbmNhdCIsInNldFNpemUiLCJ3aWR0aCIsImhlaWdodCIsIlNldFNpemUiLCJrZXlib2FyZE1vZGlmaWVyIiwiS2V5RG93biIsIktleVVwIiwiQ2xpY2siLCJjb3B5IiwiYXNzaWduIiwiY2hpbGRyZW4iLCJnZXRJdGVtQXBwRGF0YVZhbHVlIiwiY29udGVudCIsImFwcERhdGEiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiT3JkZXJlZE1hcCIsImZvdW5kIiwidXBkYXRlIiwibmV3S2V5IiwicmVtb3ZlIiwic3BsaWNlIiwiYWRkVG9TdGFydCIsImFkZFRvRW5kIiwiYWRkQmVmb3JlIiwicGxhY2UiLCJ3aXRob3V0IiwiZiIsInByZXBlbmQiLCJzaXplIiwic3VidHJhY3QiLCJhcHBlbmQiLCJ0b09iamVjdCIsImZpbmREaWZmU3RhcnQiLCJiIiwicG9zIiwiY2hpbGRDb3VudCIsImNoaWxkQSIsImNoaWxkIiwiY2hpbGRCIiwic2FtZU1hcmt1cCIsImlzVGV4dCIsInRleHQiLCJqIiwiaW5uZXIiLCJub2RlU2l6ZSIsImZpbmREaWZmRW5kIiwicG9zQSIsInBvc0IiLCJpQSIsImlCIiwic2FtZSIsIm1pblNpemUiLCJNYXRoIiwibWluIiwibm9kZXNCZXR3ZWVuIiwidG8iLCJub2RlU3RhcnQiLCJlbmQiLCJzdGFydCIsIm1heCIsImRlc2NlbmRhbnRzIiwidGV4dEJldHdlZW4iLCJibG9ja1NlcGFyYXRvciIsImxlYWZUZXh0IiwiZmlyc3QiLCJub2RlIiwibm9kZVRleHQiLCJpc0xlYWYiLCJzcGVjIiwiaXNCbG9jayIsImlzVGV4dGJsb2NrIiwib3RoZXIiLCJsYXN0IiwibGFzdENoaWxkIiwiZmlyc3RDaGlsZCIsIndpdGhUZXh0IiwiY3V0IiwiY3V0QnlJbmRleCIsImVtcHR5IiwicmVwbGFjZUNoaWxkIiwiaW5kZXgiLCJjdXJyZW50IiwiZXEiLCJSYW5nZUVycm9yIiwibWF5YmVDaGlsZCIsInAiLCJvdGhlclBvcyIsImZpbmRJbmRleCIsInJvdW5kIiwicmV0SW5kZXgiLCJjdXJQb3MiLCJ0b1N0cmluZ0lubmVyIiwiam9pbiIsInRvSlNPTiIsImZyb21KU09OIiwic2NoZW1hIiwiaXNBcnJheSIsIm5vZGVGcm9tSlNPTiIsImZyb21BcnJheSIsImFycmF5Iiwiam9pbmVkIiwibm9kZXMiLCJhdHRycyIsImNvbXBhcmVEZWVwIiwiTWFyayIsImFkZFRvU2V0Iiwic2V0IiwicGxhY2VkIiwiZXhjbHVkZXMiLCJyYW5rIiwicmVtb3ZlRnJvbVNldCIsImlzSW5TZXQiLCJuYW1lIiwiXyIsImpzb24iLCJtYXJrcyIsIm1hcmsiLCJjcmVhdGUiLCJjaGVja0F0dHJzIiwic2FtZVNldCIsInNldEZyb20iLCJub25lIiwiUmVwbGFjZUVycm9yIiwib3BlblN0YXJ0Iiwib3BlbkVuZCIsImluc2VydEF0IiwiZnJhZ21lbnQiLCJpbnNlcnRJbnRvIiwicmVtb3ZlQmV0d2VlbiIsInJlbW92ZVJhbmdlIiwibWF4T3BlbiIsIm9wZW5Jc29sYXRpbmciLCJpc29sYXRpbmciLCJpbmRleFRvIiwib2Zmc2V0VG8iLCJkaXN0IiwiaW5zZXJ0IiwiY2FuUmVwbGFjZSIsIiRmcm9tIiwiJHRvIiwiZGVwdGgiLCJyZXBsYWNlT3V0ZXIiLCIkYWxvbmciLCJleHRyYSIsInJlc29sdmVOb0NhY2hlIiwicHJlcGFyZVNsaWNlRm9yUmVwbGFjZSIsInJlcGxhY2VUaHJlZVdheSIsInBhcmVudE9mZnNldCIsInJlcGxhY2VUd29XYXkiLCJjaGVja0pvaW4iLCJtYWluIiwic3ViIiwiY29tcGF0aWJsZUNvbnRlbnQiLCJqb2luYWJsZSIsIiRiZWZvcmUiLCIkYWZ0ZXIiLCJhZGROb2RlIiwidGFyZ2V0IiwiYWRkUmFuZ2UiLCIkc3RhcnQiLCIkZW5kIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwidGV4dE9mZnNldCIsIm5vZGVBZnRlciIsIm5vZGVCZWZvcmUiLCJjaGVja0NvbnRlbnQiLCJSZXNvbHZlZFBvcyIsInBhdGgiLCJyZXNvbHZlRGVwdGgiLCJ2YWwiLCJkb2MiLCJpbmRleEFmdGVyIiwiYmVmb3JlIiwiYWZ0ZXIiLCJkT2ZmIiwicG9zQXRJbmRleCIsInRtcCIsImluY2x1c2l2ZSIsIm1hcmtzQWNyb3NzIiwiaXNJbmxpbmUiLCJuZXh0Iiwic2hhcmVkRGVwdGgiLCJibG9ja1JhbmdlIiwicHJlZCIsImlubGluZUNvbnRlbnQiLCJOb2RlUmFuZ2UiLCJzYW1lUGFyZW50IiwicmVzb2x2ZSIsInJlbSIsInJlc29sdmVDYWNoZWQiLCJjYWNoZSIsInJlc29sdmVDYWNoZSIsImVsdHMiLCJlbHQiLCJSZXNvbHZlQ2FjaGUiLCJyZXNvbHZlQ2FjaGVTaXplIiwiV2Vha01hcCIsImVtcHR5QXR0cnMiLCJOb2RlIiwic3RhcnRQb3MiLCJ0ZXh0Q29udGVudCIsImhhc01hcmt1cCIsImRlZmF1bHRBdHRycyIsImluY2x1ZGVQYXJlbnRzIiwibm9kZUF0IiwiY2hpbGRBZnRlciIsImNoaWxkQmVmb3JlIiwicmFuZ2VIYXNNYXJrIiwiaXNBdG9tIiwidG9EZWJ1Z1N0cmluZyIsIndyYXBNYXJrcyIsImNvbnRlbnRNYXRjaEF0IiwibWF0Y2giLCJjb250ZW50TWF0Y2giLCJtYXRjaEZyYWdtZW50IiwicmVwbGFjZW1lbnQiLCJvbmUiLCJ0d28iLCJ2YWxpZEVuZCIsImFsbG93c01hcmtzIiwiY2FuUmVwbGFjZVdpdGgiLCJtYXRjaFR5cGUiLCJjYW5BcHBlbmQiLCJjaGVjayIsIm0iLCJtYXJrRnJvbUpTT04iLCJub2RlVHlwZSIsIlRleHROb2RlIiwic3VwZXIiLCJiYXNlIiwiQ29udGVudE1hdGNoIiwid3JhcENhY2hlIiwic3RyaW5nIiwibm9kZVR5cGVzIiwic3RyZWFtIiwiVG9rZW5TdHJlYW0iLCJleHByIiwicGFyc2VFeHByIiwiZXJyIiwibmZhIiwibGFiZWxlZCIsImV4cGxvcmUiLCJudWxsRnJvbSIsInN0YXRlcyIsIm91dCIsInRlcm0iLCJpbmRleE9mIiwic3RhdGUiLCJjbXAiLCJkZmEiLCJjb25uZWN0IiwiY29tcGlsZSIsImVkZ2UiLCJlZGdlcyIsImV4cHJzIiwicmVkdWNlIiwibG9vcCIsImN1ciIsIndvcmsiLCJkZWFkIiwiaGFzUmVxdWlyZWRBdHRycyIsImNoZWNrRm9yRGVhZEVuZHMiLCJmcmFnIiwiZGVmYXVsdFR5cGUiLCJjb21wYXRpYmxlIiwiZmlsbEJlZm9yZSIsInRvRW5kIiwic2VlbiIsInNlYXJjaCIsInR5cGVzIiwiZmluaXNoZWQiLCJ0cCIsImNyZWF0ZUFuZEZpbGwiLCJmaW5kV3JhcHBpbmciLCJjb21wdXRlZCIsImNvbXB1dGVXcmFwcGluZyIsImFjdGl2ZSIsInZpYSIsInNoaWZ0IiwicmV2ZXJzZSIsImVkZ2VDb3VudCIsInNjYW4iLCJpbmxpbmUiLCJ0b2tlbnMiLCJzcGxpdCIsInBvcCIsImVhdCIsInRvayIsIlN5bnRheEVycm9yIiwicGFyc2VFeHByU2VxIiwicGFyc2VFeHByU3Vic2NyaXB0IiwidGVzdCIsInR5cGVOYW1lIiwiaXNJbkdyb3VwIiwicmVzb2x2ZU5hbWUiLCJwYXJzZUV4cHJBdG9tIiwicGFyc2VFeHByUmFuZ2UiLCJwYXJzZU51bSIsIk51bWJlciIsImRlZmF1bHRzIiwiYXR0ck5hbWUiLCJhdHRyIiwiaGFzRGVmYXVsdCIsImRlZmF1bHQiLCJjb21wdXRlQXR0cnMiLCJidWlsdCIsImdpdmVuIiwidmFsdWVzIiwidmFsaWRhdGUiLCJpbml0QXR0cnMiLCJBdHRyaWJ1dGUiLCJOb2RlVHlwZSIsIm1hcmtTZXQiLCJncm91cHMiLCJncm91cCIsImF0b20iLCJ3aGl0ZXNwYWNlIiwiY29kZSIsImlzUmVxdWlyZWQiLCJjcmVhdGVDaGVja2VkIiwibWF0Y2hlZCIsInZhbGlkQ29udGVudCIsImFsbG93c01hcmtUeXBlIiwibWFya1R5cGUiLCJhbGxvd2VkTWFya3MiLCJ0b3BUeXBlIiwidG9wTm9kZSIsInZhbGlkYXRlVHlwZSIsIk1hcmtUeXBlIiwiZXhjbHVkZWQiLCJpbnN0YW5jZSIsIlNjaGVtYSIsImxpbmVicmVha1JlcGxhY2VtZW50IiwiY2FjaGVkIiwiaW5zdGFuY2VTcGVjIiwiY29udGVudEV4cHJDYWNoZSIsImNvbnRlbnRFeHByIiwibWFya0V4cHIiLCJnYXRoZXJNYXJrcyIsImV4Y2wiLCJ0b3BOb2RlVHlwZSIsIndyYXBwaW5ncyIsIm9rIiwiRE9NUGFyc2VyIiwicnVsZXMiLCJ0YWdzIiwic3R5bGVzIiwibWF0Y2hlZFN0eWxlcyIsInJ1bGUiLCJ0YWciLCJpc1RhZ1J1bGUiLCJzdHlsZSIsImlzU3R5bGVSdWxlIiwiZXhlYyIsIm5vcm1hbGl6ZUxpc3RzIiwic29tZSIsImRvbSIsImNvbnRleHQiLCJQYXJzZUNvbnRleHQiLCJhZGRBbGwiLCJmaW5pc2giLCJwYXJzZVNsaWNlIiwibWF0Y2hUYWciLCJtYXRjaGVzIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwibWF0Y2hlc0NvbnRleHQiLCJnZXRBdHRycyIsIm1hdGNoU3R5bGUiLCJjaGFyQ29kZUF0Iiwic2NoZW1hUnVsZXMiLCJwcmlvcml0eSIsInBhcnNlRE9NIiwiaWdub3JlIiwiY2xlYXJNYXJrIiwiZnJvbVNjaGVtYSIsImRvbVBhcnNlciIsImJsb2NrVGFncyIsImFkZHJlc3MiLCJhcnRpY2xlIiwiYXNpZGUiLCJibG9ja3F1b3RlIiwiY2FudmFzIiwiZGQiLCJkaXYiLCJkbCIsImZpZWxkc2V0IiwiZmlnY2FwdGlvbiIsImZpZ3VyZSIsImZvb3RlciIsImZvcm0iLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJoZWFkZXIiLCJoZ3JvdXAiLCJociIsImxpIiwibm9zY3JpcHQiLCJvbCIsIm91dHB1dCIsInByZSIsInNlY3Rpb24iLCJ0YWJsZSIsInRmb290IiwidWwiLCJpZ25vcmVUYWdzIiwiaGVhZCIsIm9iamVjdCIsInNjcmlwdCIsImxpc3RUYWdzIiwid3NPcHRpb25zRm9yIiwicHJlc2VydmVXaGl0ZXNwYWNlIiwiT1BUX1BSRVNFUlZFX1dTIiwiTm9kZUNvbnRleHQiLCJzb2xpZCIsImFjdGl2ZU1hcmtzIiwiZmlsbCIsIndyYXAiLCJpbmxpbmVDb250ZXh0Iiwibm9kZU5hbWUiLCJwYXJzZXIiLCJpc09wZW4iLCJvcGVuIiwibG9jYWxQcmVzZXJ2ZVdTIiwidG9wQ29udGV4dCIsInRvcE9wdGlvbnMiLCJ0b3BNYXRjaCIsImZpbmRQb3NpdGlvbnMiLCJuZWVkc0Jsb2NrIiwidG9wIiwiYWRkRE9NIiwiYWRkVGV4dE5vZGUiLCJhZGRFbGVtZW50Iiwibm9kZVZhbHVlIiwicHJlc2VydmVXUyIsImRvbU5vZGVCZWZvcmUiLCJwcmV2aW91c1NpYmxpbmciLCJpbnNlcnROb2RlIiwiZmluZEluVGV4dCIsImZpbmRJbnNpZGUiLCJtYXRjaEFmdGVyIiwib3V0ZXJXUyIsInRhZ05hbWUiLCJ3aGl0ZVNwYWNlIiwicnVsZUlEIiwicHJldkl0ZW0iLCJuZXh0U2libGluZyIsIm5vcm1hbGl6ZUxpc3QiLCJydWxlRnJvbU5vZGUiLCJpZ25vcmVGYWxsYmFjayIsInNraXAiLCJjbG9zZVBhcmVudCIsInN5bmMiLCJvbGROZWVkc0Jsb2NrIiwibGVhZkZhbGxiYWNrIiwiaW5uZXJNYXJrcyIsInJlYWRTdHlsZXMiLCJhZGRFbGVtZW50QnlSdWxlIiwiY29uc3VtaW5nIiwib3duZXJEb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiZmluZFBsYWNlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImNvbnRpbnVlQWZ0ZXIiLCJlbnRlciIsInN0YXJ0SW4iLCJnZXRDb250ZW50IiwiY29udGVudERPTSIsImNvbnRlbnRFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImZpbmRBcm91bmQiLCJjaGlsZE5vZGVzIiwiZmluZEF0UG9pbnQiLCJjYXV0aW91cyIsInJvdXRlIiwicGVuYWx0eSIsImN4IiwiZW50ZXJJbm5lciIsImJsb2NrIiwidGV4dGJsb2NrRnJvbUNvbnRleHQiLCJjbG9zZUV4dHJhIiwibm9kZU1hcmtzIiwibWFya01heUFwcGx5IiwiYXBwbHlNYXJrcyIsInRvcE9wZW4iLCJjdXJyZW50UG9zIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInRleHROb2RlIiwicGFydHMiLCJvcHRpb24iLCJ1c2VSb290IiwibWluRGVwdGgiLCJwYXJ0IiwiJGNvbnRleHQiLCJkZWZsdCIsInNlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJET01TZXJpYWxpemVyIiwic2VyaWFsaXplRnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwia2VlcCIsInJlbmRlcmVkIiwic3Bhbm5pbmciLCJhZGQiLCJtYXJrRE9NIiwic2VyaWFsaXplTWFyayIsInNlcmlhbGl6ZU5vZGVJbm5lciIsInJlbmRlclNwZWMiLCJzZXJpYWxpemVOb2RlIiwidG9ET00iLCJzdHJ1Y3R1cmUiLCJ4bWxOUyIsImJsb2NrQXJyYXlzSW4iLCJkb21TZXJpYWxpemVyIiwibm9kZXNGcm9tU2NoZW1hIiwibWFya3NGcm9tU2NoZW1hIiwiZ2F0aGVyVG9ET00iLCJzdXNwaWNpb3VzQXR0cmlidXRlQ2FjaGUiLCJzdXNwaWNpb3VzQXR0cmlidXRlcyIsInN1c3BpY2lvdXNBdHRyaWJ1dGVzSW5uZXIiLCJzdXNwaWNpb3VzIiwic3BhY2UiLCJjcmVhdGVFbGVtZW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImlubmVyQ29udGVudCIsImZhY3RvcjE2IiwicG93IiwicmVjb3ZlckluZGV4IiwiTWFwUmVzdWx0IiwiZGVsSW5mbyIsInJlY292ZXIiLCJkZWxldGVkIiwiZGVsZXRlZEJlZm9yZSIsImRlbGV0ZWRBZnRlciIsImRlbGV0ZWRBY3Jvc3MiLCJTdGVwTWFwIiwicmFuZ2VzIiwiaW52ZXJ0ZWQiLCJkaWZmIiwicmVjb3Zlck9mZnNldCIsIm1hcFJlc3VsdCIsImFzc29jIiwiX21hcCIsInNpbXBsZSIsIm9sZEluZGV4IiwibmV3SW5kZXgiLCJvbGRTaXplIiwibmV3U2l6ZSIsImRlbCIsInRvdWNoZXMiLCJvbGRTdGFydCIsIm5ld1N0YXJ0IiwiaW52ZXJ0IiwiTWFwcGluZyIsIm1hcHMiLCJtaXJyb3IiLCJfbWFwcyIsIm93bkRhdGEiLCJhcHBlbmRNYXAiLCJtaXJyb3JzIiwic2V0TWlycm9yIiwiYXBwZW5kTWFwcGluZyIsIm1hcHBpbmciLCJzdGFydFNpemUiLCJtaXJyIiwiZ2V0TWlycm9yIiwiYXBwZW5kTWFwcGluZ0ludmVydGVkIiwidG90YWxTaXplIiwiaW52ZXJzZSIsImNvcnIiLCJzdGVwc0J5SUQiLCJTdGVwIiwiZ2V0TWFwIiwibWVyZ2UiLCJzdGVwVHlwZSIsImpzb25JRCIsInN0ZXBDbGFzcyIsIlN0ZXBSZXN1bHQiLCJmYWlsZWQiLCJmYWlsIiwiZnJvbVJlcGxhY2UiLCJtYXBGcmFnbWVudCIsIkFkZE1hcmtTdGVwIiwiYXBwbHkiLCJvbGRTbGljZSIsIlJlbW92ZU1hcmtTdGVwIiwiQWRkTm9kZU1hcmtTdGVwIiwidXBkYXRlZCIsIm5ld1NldCIsIlJlbW92ZU5vZGVNYXJrU3RlcCIsImNvbnRlbnRCZXR3ZWVuIiwiZ2FwRnJvbSIsImdhcFRvIiwiZ2FwIiwiaW5zZXJ0ZWQiLCJjbGVhckluY29tcGF0aWJsZSIsInRyIiwicGFyZW50VHlwZSIsImNsZWFyTmV3bGluZXMiLCJyZXBsU3RlcHMiLCJhbGxvd2VkIiwic3RlcCIsIm5ld2xpbmUiLCJjYW5DdXQiLCJyYW5nZSIsIndpdGhBdHRycyIsInJlcGxhY2VOZXdsaW5lcyIsIm1hcEZyb20iLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VMaW5lYnJlYWtzIiwiY2FuU3BsaXQiLCJ0eXBlc0FmdGVyIiwiJHBvcyIsImlubmVyVHlwZSIsInJlc3QiLCJvdmVycmlkZUNoaWxkIiwiYmFzZVR5cGUiLCJjYW5BcHBlbmRXaXRoU3Vic3RpdHV0ZWRMaW5lYnJlYWtzIiwiZml0c1RyaXZpYWxseSIsIkZpdHRlciIsImZpdCIsInVucGxhY2VkIiwiZnJvbnRpZXIiLCJmaW5kRml0dGFibGUiLCJwbGFjZU5vZGVzIiwib3Blbk1vcmUiLCJkcm9wTm9kZSIsIm1vdmVJbmxpbmUiLCJtdXN0TW92ZUlubGluZSIsInBsYWNlZFNpemUiLCJjbG9zZSIsInN0YXJ0RGVwdGgiLCJwYXNzIiwic2xpY2VEZXB0aCIsImNvbnRlbnRBdCIsImZyb250aWVyRGVwdGgiLCJpbmplY3QiLCJvcGVuQXRFbmQiLCJkcm9wRnJvbUZyYWdtZW50IiwiY2xvc2VGcm9udGllck5vZGUiLCJvcGVuRnJvbnRpZXJOb2RlIiwidGFrZW4iLCJvcGVuRW5kQ291bnQiLCJjbG9zZU5vZGVTdGFydCIsImFkZFRvRnJhZ21lbnQiLCJsZXZlbCIsImNvbnRlbnRBZnRlckZpdHMiLCJmaW5kQ2xvc2VMZXZlbCIsImRyb3BJbm5lciIsIm1vdmUiLCJjb3VudCIsImludmFsaWRNYXJrcyIsImNsb3NlRnJhZ21lbnQiLCJvbGRPcGVuIiwibmV3T3BlbiIsImNvdmVyZWREZXB0aHMiLCJBdHRyU3RlcCIsIkRvY0F0dHJTdGVwIiwiVHJhbnNmb3JtRXJyb3IiLCJfX3Byb3RvX18iLCJUcmFuc2Zvcm0iLCJzdGVwcyIsImRvY3MiLCJtYXliZVN0ZXAiLCJhZGRTdGVwIiwiZG9jQ2hhbmdlZCIsInJlcGxhY2VSYW5nZSIsImRlbGV0ZVJhbmdlIiwidGFyZ2V0RGVwdGhzIiwicHJlZmVycmVkVGFyZ2V0IiwidW5zaGlmdCIsImRlZmluaW5nIiwiZGVmaW5pbmdBc0NvbnRleHQiLCJwcmVmZXJyZWRUYXJnZXRJbmRleCIsImxlZnROb2RlcyIsInByZWZlcnJlZERlcHRoIiwibGVmdE5vZGUiLCJkZWYiLCJkZWZpbmluZ0ZvckNvbnRlbnQiLCJhYnMiLCJvcGVuRGVwdGgiLCJ0YXJnZXREZXB0aCIsImV4cGFuZCIsInN0YXJ0U3RlcHMiLCJyZXBsYWNlUmFuZ2VXaXRoIiwicG9pbnQiLCJpbnNlcnRQb2ludCIsImNvdmVyZWQiLCJkZWxldGUiLCJsaWZ0IiwiZ2FwU3RhcnQiLCJnYXBFbmQiLCJzcGxpdHRpbmciLCJjb252ZXJ0TmV3bGluZXMiLCJiZWZvcmVUeXBlIiwic3VwcG9ydExpbmVicmVhayIsIiRmdWxsIiwid3JhcHBlcnMiLCJzZXRCbG9ja1R5cGUiLCJhdHRyc0hlcmUiLCJjYW5DaGFuZ2VUeXBlIiwic3RhcnRNIiwiZW5kTSIsInNldE5vZGVNYXJrdXAiLCJuZXdOb2RlIiwic2V0Tm9kZUF0dHJpYnV0ZSIsInNldERvY0F0dHJpYnV0ZSIsImFkZE5vZGVNYXJrIiwicmVtb3ZlTm9kZU1hcmsiLCJ0eXBlQWZ0ZXIiLCJhZGRNYXJrIiwicmVtb3ZpbmciLCJhZGRpbmciLCJyZW1vdmVkIiwiYWRkZWQiLCJzIiwicmVtb3ZlTWFyayIsInRvUmVtb3ZlIiwiY2xhc3Nlc0J5SWQiLCJTZWxlY3Rpb24iLCIkYW5jaG9yIiwiJGhlYWQiLCJTZWxlY3Rpb25SYW5nZSIsImFuY2hvciIsImxhc3ROb2RlIiwibGFzdFBhcmVudCIsInNlbGVjdGlvblRvSW5zZXJ0aW9uRW5kIiwiZmluZEZyb20iLCJkaXIiLCJ0ZXh0T25seSIsImZpbmRTZWxlY3Rpb25JbiIsIm5lYXIiLCJiaWFzIiwiQWxsU2VsZWN0aW9uIiwiYXRTdGFydCIsImF0RW5kIiwiY2xzIiwic2VsZWN0aW9uQ2xhc3MiLCJnZXRCb29rbWFyayIsImJldHdlZW4iLCJ2aXNpYmxlIiwid2FybmVkQWJvdXRUZXh0U2VsZWN0aW9uIiwiY2hlY2tUZXh0U2VsZWN0aW9uIiwiJGN1cnNvciIsImVuc3VyZU1hcmtzIiwiVGV4dEJvb2ttYXJrIiwiZFBvcyIsIk5vZGVCb29rbWFyayIsImlzU2VsZWN0YWJsZSIsInNlbGVjdGFibGUiLCJzZWwiLCJzZWxlY3Rpb24iLCJzZXRTZWxlY3Rpb24iLCJBbGxCb29rbWFyayIsInN0YXJ0TGVuIiwiX2Zyb20iLCJfdG8iLCJfbmV3RnJvbSIsIm5ld1RvIiwiVHJhbnNhY3Rpb24iLCJjdXJTZWxlY3Rpb25Gb3IiLCJtZXRhIiwidGltZSIsIkRhdGUiLCJub3ciLCJjdXJTZWxlY3Rpb24iLCJzdG9yZWRNYXJrcyIsInNlbGVjdGlvblNldCIsInNldFN0b3JlZE1hcmtzIiwiYWRkU3RvcmVkTWFyayIsInJlbW92ZVN0b3JlZE1hcmsiLCJzdG9yZWRNYXJrc1NldCIsInNldFRpbWUiLCJyZXBsYWNlU2VsZWN0aW9uIiwicmVwbGFjZVNlbGVjdGlvbldpdGgiLCJpbmhlcml0TWFya3MiLCJkZWxldGVTZWxlY3Rpb24iLCJpbnNlcnRUZXh0Iiwic2V0TWV0YSIsImdldE1ldGEiLCJpc0dlbmVyaWMiLCJzY3JvbGxJbnRvVmlldyIsInNjcm9sbGVkSW50b1ZpZXciLCJGaWVsZERlc2MiLCJkZXNjIiwiaW5pdCIsImJhc2VGaWVsZHMiLCJjb25maWciLCJfbWFya3MiLCJfb2xkIiwicHJldiIsIkNvbmZpZ3VyYXRpb24iLCJwbHVnaW5zIiwicGx1Z2luc0J5S2V5IiwiZmllbGRzIiwicGx1Z2luIiwiRWRpdG9yU3RhdGUiLCJhcHBseVRyYW5zYWN0aW9uIiwiZmlsdGVyVHJhbnNhY3Rpb24iLCJyb290VHIiLCJ0cmFuc2FjdGlvbnMiLCJ0cnMiLCJuZXdTdGF0ZSIsImFwcGx5SW5uZXIiLCJoYXZlTmV3IiwiYXBwZW5kVHJhbnNhY3Rpb24iLCJvbGRTdGF0ZSIsIm5ld0luc3RhbmNlIiwiZmllbGQiLCIkY29uZmlnIiwicmVjb25maWd1cmUiLCJwbHVnaW5GaWVsZHMiLCJiaW5kUHJvcHMiLCJGdW5jdGlvbiIsIlBsdWdpbiIsInByb3BzIiwiY3JlYXRlS2V5IiwiZ2V0U3RhdGUiLCJrZXlzIiwiUGx1Z2luS2V5IiwiZG9tSW5kZXgiLCJhc3NpZ25lZFNsb3QiLCJob3N0IiwicmV1c2VkUmFuZ2UiLCJ0ZXh0UmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldEVuZCIsInNldFN0YXJ0IiwiaXNFcXVpdmFsZW50UG9zaXRpb24iLCJvZmYiLCJ0YXJnZXROb2RlIiwidGFyZ2V0T2ZmIiwic2NhbkZvciIsImF0b21FbGVtZW50cyIsImhhc0Jsb2NrRGVzYyIsImNvbnRlbnRFZGl0YWJsZSIsInBtVmlld0Rlc2MiLCJzZWxlY3Rpb25Db2xsYXBzZWQiLCJkb21TZWwiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJrZXlFdmVudCIsImtleUNvZGUiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsIm5hdiIsIm5hdmlnYXRvciIsImFnZW50IiwidXNlckFnZW50IiwiaWVfZWRnZSIsImllX3VwdG8xMCIsImllXzExdXAiLCJpZSIsImllX3ZlcnNpb24iLCJkb2N1bWVudE1vZGUiLCJnZWNrbyIsIl9jaHJvbWUiLCJjaHJvbWUiLCJjaHJvbWVfdmVyc2lvbiIsInNhZmFyaSIsInZlbmRvciIsImlvcyIsIm1heFRvdWNoUG9pbnRzIiwibWFjIiwid2luZG93cyIsImFuZHJvaWQiLCJ3ZWJraXQiLCJkb2N1bWVudEVsZW1lbnQiLCJ3ZWJraXRfdmVyc2lvbiIsIndpbmRvd1JlY3QiLCJ2cCIsImRlZmF1bHRWaWV3IiwidmlzdWFsVmlld3BvcnQiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldFNpZGUiLCJzaWRlIiwiY2xpZW50UmVjdCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY2FsZVgiLCJvZmZzZXRXaWR0aCIsInNjYWxlWSIsIm9mZnNldEhlaWdodCIsInNjcm9sbFJlY3RJbnRvVmlldyIsInZpZXciLCJzdGFydERPTSIsInNjcm9sbFRocmVzaG9sZCIsInNvbWVQcm9wIiwic2Nyb2xsTWFyZ2luIiwiYXRUb3AiLCJib2R5IiwiYm91bmRpbmciLCJtb3ZlWCIsIm1vdmVZIiwic2Nyb2xsQnkiLCJzdGFydFgiLCJzY3JvbGxMZWZ0Iiwic3RhcnRZIiwic2Nyb2xsVG9wIiwiZFgiLCJkWSIsImdldENvbXB1dGVkU3R5bGUiLCJwb3NpdGlvbiIsIm9mZnNldFBhcmVudCIsInNjcm9sbFN0YWNrIiwic3RhY2siLCJyZXN0b3JlU2Nyb2xsU3RhY2siLCJkVG9wIiwicHJldmVudFNjcm9sbFN1cHBvcnRlZCIsImZpbmRPZmZzZXRJbk5vZGUiLCJjb29yZHMiLCJjbG9zZXN0IiwiY29vcmRzQ2xvc2VzdCIsImZpcnN0QmVsb3ciLCJjb29yZHNCZWxvdyIsImR4Q2xvc2VzdCIsInJvd0JvdCIsInJvd1RvcCIsImNoaWxkSW5kZXgiLCJyZWN0cyIsImdldENsaWVudFJlY3RzIiwiZHgiLCJsZW4iLCJzaW5nbGVSZWN0IiwiaW5SZWN0IiwiZmluZE9mZnNldEluVGV4dCIsImVsZW1lbnRGcm9tUG9pbnQiLCJib3giLCJzdGFydEkiLCJmbG9vciIsInBvc0F0Q29vcmRzIiwiY2FyZXQiLCJ4IiwieSIsImNhcmV0UG9zaXRpb25Gcm9tUG9pbnQiLCJvZmZzZXROb2RlIiwiY2FyZXRSYW5nZUZyb21Qb2ludCIsInN0YXJ0Q29udGFpbmVyIiwic3RhcnRPZmZzZXQiLCJjYXJldEZyb21Qb2ludCIsInJvb3QiLCJkcmFnZ2FibGUiLCJ0YXJnZXRLbHVkZ2UiLCJvdXRzaWRlQmxvY2siLCJzYXdCbG9jayIsImRvY1ZpZXciLCJuZWFyZXN0RGVzYyIsInBvc0JlZm9yZSIsInBvc0FmdGVyIiwicG9zRnJvbURPTSIsInBvc0Zyb21DYXJldCIsInBvc0Zyb21FbGVtZW50IiwiaW5zaWRlIiwicG9zQXRTdGFydCIsImJvcmRlciIsIm5vblplcm8iLCJCSURJIiwiY29vcmRzQXRQb3MiLCJkb21Gcm9tUG9zIiwic3VwcG9ydEVtcHR5UmFuZ2UiLCJ0YWtlU2lkZSIsImZsYXR0ZW5WIiwicmVjdEJlZm9yZSIsInJlY3RBZnRlciIsImZsYXR0ZW5IIiwiaWdub3JlRm9yQ29vcmRzIiwid2l0aEZsdXNoZWRTdGF0ZSIsInZpZXdTdGF0ZSIsImFjdGl2ZUVsZW1lbnQiLCJ1cGRhdGVTdGF0ZSIsImZvY3VzIiwibWF5YmVSVEwiLCJjYWNoZWRTdGF0ZSIsImNhY2hlZERpciIsImNhY2hlZFJlc3VsdCIsImVuZE9mVGV4dGJsb2NrIiwibmVhcmVzdCIsImJveGVzIiwiZW5kT2ZUZXh0YmxvY2tWZXJ0aWNhbCIsImRvbVNlbGVjdGlvbiIsIm1vZGlmeSIsIm9sZE5vZGUiLCJvbGRPZmYiLCJkb21TZWxlY3Rpb25SYW5nZSIsIm9sZEJpZGlMZXZlbCIsImNhcmV0QmlkaUxldmVsIiwicGFyZW50RE9NIiwiZG9tQWZ0ZXJQb3MiLCJuZXdPZmYiLCJjb2xsYXBzZSIsImV4dGVuZCIsImVuZE9mVGV4dGJsb2NrSG9yaXpvbnRhbCIsIlZpZXdEZXNjIiwiZGlydHkiLCJtYXRjaGVzV2lkZ2V0Iiwid2lkZ2V0IiwibWF0Y2hlc01hcmsiLCJtYXRjaGVzTm9kZSIsIm91dGVyRGVjbyIsImlubmVyRGVjbyIsIm1hdGNoZXNIYWNrIiwicGFyc2VSdWxlIiwic3RvcEV2ZW50IiwiZGVzdHJveSIsInBvc0JlZm9yZUNoaWxkIiwicG9zQXRFbmQiLCJsb2NhbFBvc0Zyb21ET00iLCJkb21CZWZvcmUiLCJkb21BZnRlciIsIm9ubHlOb2RlcyIsIm5vZGVET00iLCJnZXREZXNjIiwiZGVzY0F0IiwiVHJhaWxpbmdIYWNrVmlld0Rlc2MiLCJXaWRnZXRWaWV3RGVzYyIsImRvbUF0b20iLCJwYXJzZVJhbmdlIiwiZnJvbU9mZnNldCIsInRvT2Zmc2V0IiwiY2hpbGRCYXNlIiwiZW1wdHlDaGlsZEF0IiwiZm9yY2UiLCJhbmNob3JET00iLCJoZWFkRE9NIiwiZ2V0U2VsZWN0aW9uIiwic2VsUmFuZ2UiLCJicktsdWRnZSIsImRvbVNlbEV4dGVuZGVkIiwicmVtb3ZlQWxsUmFuZ2VzIiwiaWdub3JlTXV0YXRpb24iLCJtdXRhdGlvbiIsImNvbnRlbnRMb3N0IiwibWFya0RpcnR5Iiwic3RhcnRJbnNpZGUiLCJlbmRJbnNpZGUiLCJtYXJrUGFyZW50c0RpcnR5IiwicmF3IiwiY2xhc3NMaXN0Iiwic3RvcCIsImlnbm9yZVNlbGVjdGlvbiIsIkNvbXBvc2l0aW9uVmlld0Rlc2MiLCJ0ZXh0RE9NIiwibXV0Iiwib2xkVmFsdWUiLCJNYXJrVmlld0Rlc2MiLCJjdXN0b20iLCJub2RlVmlld3MiLCJyZXBhcnNlSW5WaWV3IiwicmVwbGFjZU5vZGVzIiwiTm9kZVZpZXdEZXNjIiwiZGVzY09iaiIsImhhc0F0dHJpYnV0ZSIsImFwcGx5T3V0ZXJEZWNvIiwiQ3VzdG9tTm9kZVZpZXdEZXNjIiwiVGV4dFZpZXdEZXNjIiwic2FtZU91dGVyRGVjbyIsInVwZGF0ZUNoaWxkcmVuIiwiY29tcG9zaXRpb24iLCJjb21wb3NpbmciLCJsb2NhbENvbXBvc2l0aW9uSW5mbyIsImxvY2FsQ29tcG9zaXRpb24iLCJjb21wb3NpdGlvbkluQ2hpbGQiLCJ1cGRhdGVyIiwiVmlld1RyZWVVcGRhdGVyIiwiZGVjbyIsIm9uV2lkZ2V0Iiwib25Ob2RlIiwibG9jYWxzIiwiZm9yQ2hpbGQiLCJkZWNvSW5kZXgiLCJyZXN0Tm9kZSIsInBhcmVudEluZGV4Iiwid2lkZ2V0cyIsImNvbXBhcmVTaWRlIiwiY3V0QXQiLCJpdGVyRGVjbyIsImluc2lkZU5vZGUiLCJzeW5jVG9NYXJrcyIsInBsYWNlV2lkZ2V0IiwiY29tcEluZGV4IiwiZmluZE5vZGVNYXRjaCIsImZpbmRJbmRleFdpdGhDaGlsZCIsInVwZGF0ZU5vZGVBdCIsInVwZGF0ZU5leHROb2RlIiwiYWRkVGV4dGJsb2NrSGFja3MiLCJkZXN0cm95UmVzdCIsImNoYW5nZWQiLCJwcm90ZWN0TG9jYWxDb21wb3NpdGlvbiIsInJlbmRlckRlc2NzIiwib2xkQ1NTIiwiY3NzVGV4dCIsImxpc3RTdHlsZSIsImlvc0hhY2tzIiwiaW5wdXQiLCJjb21wb3NpdGlvbk5vZGUiLCJ0ZXh0UG9zIiwiY2hpbGRTdGFydCIsImxhc3RJbmRleE9mIiwiZmluZFRleHRJbkZyYWdtZW50IiwiY29tcG9zaXRpb25Ob2RlcyIsInVwZGF0ZUlubmVyIiwidXBkYXRlT3V0ZXJEZWNvIiwibmVlZHNXcmFwIiwib2xkRE9NIiwicGF0Y2hPdXRlckRlY28iLCJjb21wdXRlT3V0ZXJEZWNvIiwic2VsZWN0Tm9kZSIsImRlc2VsZWN0Tm9kZSIsInJlbW92ZUF0dHJpYnV0ZSIsImRvY1ZpZXdEZXNjIiwicG1Jc0RlY28iLCJpblBhcmVudCIsInRyYWNrV3JpdGVzIiwibXVsdGlUeXBlIiwiZGVzY3MiLCJ3cml0dGVuIiwiY2hpbGRET00iLCJybSIsImluc2VydEJlZm9yZSIsIk91dGVyRGVjb0xldmVsIiwibm9EZWNvIiwiY2xhc3MiLCJvdXRlckRPTSIsInByZXZDb21wdXRlZCIsImN1ckNvbXB1dGVkIiwiY3VyRE9NIiwicGF0Y2hBdHRyaWJ1dGVzIiwicHJldkxpc3QiLCJCb29sZWFuIiwiY3VyTGlzdCIsInJlbW92ZVByb3BlcnR5IiwibG9jayIsInByZU1hdGNoIiwicGFyZW50RGVzYyIsImN1ckRlc2MiLCJkZXNjSSIsImZJIiwiTWFwIiwib3V0ZXIiLCJkZXN0cm95QmV0d2VlbiIsIm1heEtlZXAiLCJpc0xvY2tlZCIsIm1hcmtEZXNjIiwidGFyZ2V0RGVzYyIsImhhcyIsImRvbU5vZGUiLCJuZXh0RE9NIiwibG9ja2VkIiwicmVjcmVhdGVXcmFwcGVyIiwid3JhcHBlciIsImNoIiwicmVxdWlyZXNHZWNrb0hhY2tOb2RlIiwiYWRkSGFja05vZGUiLCJhbHQiLCJoYWNrIiwic2VsZWN0aW9uRnJvbURPTSIsImluV2lkZ2V0IiwibmVhcmVzdERlc2NOb2RlIiwiaXNPbkVkZ2UiLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsImVuZENvbnRhaW5lciIsImVuZE9mZnNldCIsInNlbGVjdGlvbkJldHdlZW4iLCJlZGl0b3JPd25zU2VsZWN0aW9uIiwiZWRpdGFibGUiLCJoYXNGb2N1cyIsImhhc1NlbGVjdGlvbiIsInNlbGVjdGlvblRvRE9NIiwic3luY05vZGVTZWxlY3Rpb24iLCJtb3VzZURvd24iLCJhbGxvd0RlZmF1bHQiLCJjdXJTZWwiLCJkb21PYnNlcnZlciIsImN1cnJlbnRTZWxlY3Rpb24iLCJkZWxheWVkU2VsZWN0aW9uU3luYyIsInNldEN1clNlbGVjdGlvbiIsImRpc2Nvbm5lY3RTZWxlY3Rpb24iLCJjdXJzb3JXcmFwcGVyIiwiaW1nIiwiZGlzYWJsZWQiLCJzZWxlY3RDdXJzb3JXcmFwcGVyIiwicmVzZXRFZGl0YWJsZUZyb20iLCJyZXNldEVkaXRhYmxlVG8iLCJicm9rZW5TZWxlY3RCZXR3ZWVuVW5lZGl0YWJsZSIsInRlbXBvcmFyaWx5RWRpdGFibGVOZWFyIiwicmVzZXRFZGl0YWJsZSIsImhpZGVTZWxlY3Rpb25HdWFyZCIsInJlbW92ZUNsYXNzT25TZWxlY3Rpb25DaGFuZ2UiLCJjb25uZWN0U2VsZWN0aW9uIiwic2V0RWRpdGFibGUiLCJ3YXNEcmFnZ2FibGUiLCJsYXN0U2VsZWN0ZWRWaWV3RGVzYyIsImNsZWFyTm9kZVNlbGVjdGlvbiIsImhhc0ZvY3VzQW5kU2VsZWN0aW9uIiwibW92ZVNlbGVjdGlvbkJsb2NrIiwiJHNpZGUiLCJkaXNwYXRjaCIsInNlbGVjdEhvcml6b250YWxseSIsIm1vZHMiLCIkbmV3SGVhZCIsIm5vZGVQb3MiLCJub2RlTGVuIiwiaXNJZ25vcmFibGUiLCJza2lwSWdub3JlZE5vZGVzIiwibW92ZU5vZGUiLCJtb3ZlT2Zmc2V0IiwiaXNCbG9ja05vZGUiLCJzZXRTZWxGb2N1cyIsInNraXBJZ25vcmVkTm9kZXNCZWZvcmUiLCJza2lwSWdub3JlZE5vZGVzQWZ0ZXIiLCJ0ZXh0Tm9kZUFmdGVyIiwidGV4dE5vZGVCZWZvcmUiLCJmaW5kRGlyZWN0aW9uIiwibWlkIiwiZGlyZWN0aW9uIiwic2VsZWN0VmVydGljYWxseSIsImJleW9uZCIsInN0b3BOYXRpdmVIb3Jpem9udGFsRGVsZXRlIiwibmV4dE5vZGUiLCJzd2l0Y2hFZGl0YWJsZSIsImNhcHR1cmVLZXlEb3duIiwiYWx0S2V5IiwiZ2V0TW9kcyIsInNhZmFyaURvd25BcnJvd0J1ZyIsInNlcmlhbGl6ZUZvckNsaXBib2FyZCIsInNlcmlhbGl6ZXIiLCJkZXRhY2hlZERvYyIsIndyYXBNYXAiLCJwYXJzZUZyb21DbGlwYm9hcmQiLCJodG1sIiwicGxhaW5UZXh0IiwiaW5Db2RlIiwiYXNUZXh0IiwicGFyc2VkIiwibWV0YXMiLCJmaXJzdFRhZyIsImlubmVySFRNTCIsInRydXN0ZWRUeXBlcyIsIl9wb2xpY3kiLCJkZWZhdWx0UG9saWN5IiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsIm1heWJlV3JhcFRydXN0ZWQiLCJyZWFkSFRNTCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJyZXN0b3JlUmVwbGFjZWRTcGFjZXMiLCJjb250ZXh0Tm9kZSIsInNsaWNlRGF0YSIsImdldEF0dHJpYnV0ZSIsImlubGluZVBhcmVudHMiLCJhZGRDb250ZXh0IiwiY2xvc2VTbGljZSIsImxhc3RXcmFwIiwiaW5MYXN0IiwiYWRkVG9TaWJsaW5nIiwiY2xvc2VSaWdodCIsIndyYXBwZWQiLCJ3aXRoV3JhcHBlcnMiLCJub3JtYWxpemVTaWJsaW5ncyIsInNpYmxpbmciLCJjbG9zZVJhbmdlIiwidGhlYWQiLCJ0Ym9keSIsImNhcHRpb24iLCJjb2xncm91cCIsImNvbCIsInRkIiwidGgiLCJfZGV0YWNoZWREb2MiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImhhbmRsZXJzIiwiZWRpdEhhbmRsZXJzIiwicGFzc2l2ZUhhbmRsZXJzIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsIklucHV0U3RhdGUiLCJsYXN0S2V5Q29kZSIsImxhc3RLZXlDb2RlVGltZSIsImxhc3RDbGljayIsImJ1dHRvbiIsImxhc3RTZWxlY3Rpb25PcmlnaW4iLCJsYXN0U2VsZWN0aW9uVGltZSIsImxhc3RJT1NFbnRlciIsImxhc3RJT1NFbnRlckZhbGxiYWNrVGltZW91dCIsImxhc3RGb2N1cyIsImxhc3RUb3VjaCIsImxhc3RDaHJvbWVEZWxldGUiLCJjb21wb3NpbmdUaW1lb3V0IiwiY29tcG9zaXRpb25FbmRlZEF0IiwiY29tcG9zaXRpb25JRCIsImNvbXBvc2l0aW9uUGVuZGluZ0NoYW5nZXMiLCJkb21DaGFuZ2VDb3VudCIsImV2ZW50SGFuZGxlcnMiLCJzZXRTZWxlY3Rpb25PcmlnaW4iLCJlbnN1cmVMaXN0ZW5lcnMiLCJjdXJyZW50SGFuZGxlcnMiLCJydW5DdXN0b21IYW5kbGVyIiwiaGFuZGxlciIsImRlZmF1bHRQcmV2ZW50ZWQiLCJldmVudEJlbG9uZ3NUb1ZpZXciLCJidWJibGVzIiwiZXZlbnRDb29yZHMiLCJjbGllbnRYIiwiY2xpZW50WSIsInJ1bkhhbmRsZXJPbkNvbnRleHQiLCJwcm9wTmFtZSIsInVwZGF0ZVNlbGVjdGlvbiIsImZvY3VzZWQiLCJoYW5kbGVTaW5nbGVDbGljayIsInNlbGVjdGVkTm9kZSIsInNlbGVjdEF0Iiwic2VsZWN0Q2xpY2tlZE5vZGUiLCJzZWxlY3RDbGlja2VkTGVhZiIsImhhbmRsZURvdWJsZUNsaWNrIiwiaGFuZGxlVHJpcGxlQ2xpY2siLCJkZWZhdWx0VHJpcGxlQ2xpY2siLCJmb3JjZURPTUZsdXNoIiwiZW5kQ29tcG9zaXRpb24iLCJrZXlkb3duIiwiaW5Pck5lYXJDb21wb3NpdGlvbiIsImZvcmNlRmx1c2giLCJwcmV2ZW50RGVmYXVsdCIsImtleXVwIiwia2V5cHJlc3MiLCJjaGFyQ29kZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInNlbGVjdE5vZGVNb2RpZmllciIsIm1vdXNlZG93biIsImZsdXNoZWQiLCJjbGljayIsImR5IiwiaXNOZWFyIiwiZG9uZSIsIk1vdXNlRG93biIsInRhcmdldFBvcyIsIm1pZ2h0RHJhZyIsInN0YXJ0RG9jIiwiYWRkQXR0ciIsInNldFVuZWRpdGFibGUiLCJ1cCIsInVwZGF0ZUFsbG93RGVmYXVsdCIsImJ1dHRvbnMiLCJ0aW1lU3RhbXAiLCJjb250ZXh0bWVudSIsInRpbWVvdXRDb21wb3NpdGlvbiIsInNjaGVkdWxlQ29tcG9zZUVuZCIsImRlbGF5IiwiY2xlYXJDb21wb3NpdGlvbiIsInRpbWVzdGFtcEZyb21DdXN0b21FdmVudCIsImZpbmRDb21wb3NpdGlvbk5vZGUiLCJ0ZXh0QmVmb3JlIiwidGV4dE5vZGVCZWZvcmUkMSIsInRleHRBZnRlciIsInRleHROb2RlQWZ0ZXIkMSIsImRlc2NBZnRlciIsImxhc3RDaGFuZ2VkIiwibGFzdENoYW5nZWRUZXh0Tm9kZSIsImRlc2NCZWZvcmUiLCJyZXN0YXJ0aW5nIiwiZmx1c2hpbmdTb29uIiwibWFya0N1cnNvciIsImNvbXBvc2l0aW9uc3RhcnQiLCJjb21wb3NpdGlvbnVwZGF0ZSIsImZsdXNoIiwiY29tcG9zaXRpb25lbmQiLCJwZW5kaW5nUmVjb3JkcyIsIlByb21pc2UiLCJ0aGVuIiwiYnJva2VuQ2xpcGJvYXJkQVBJIiwiZG9QYXN0ZSIsInByZWZlclBsYWluIiwic2luZ2xlTm9kZSIsInNsaWNlU2luZ2xlTm9kZSIsImdldFRleHQiLCJjbGlwYm9hcmREYXRhIiwiZ2V0RGF0YSIsInVyaXMiLCJjbGVhckRhdGEiLCJzZXREYXRhIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwiYmx1ciIsImNhcHR1cmVDb3B5IiwicGFzdGUiLCJwbGFpbiIsImNhcHR1cmVQYXN0ZSIsIkRyYWdnaW5nIiwiZHJhZ0NvcHlNb2RpZmllciIsImRyYWdNb3ZlcyIsIm1vdmVzIiwiZHJhZ3N0YXJ0IiwiZGF0YVRyYW5zZmVyIiwiZHJhZ2dlZFNsaWNlIiwiZmlsZXMiLCJlZmZlY3RBbGxvd2VkIiwiZHJhZ2dpbmciLCJkcmFnZW5kIiwiZHJhZ292ZXIiLCJkcmFnZW50ZXIiLCJkcm9wIiwiZXZlbnRQb3MiLCIkbW91c2UiLCJpbnNlcnRQb3MiLCJmaXRzIiwid3JhcHBpbmciLCJkcm9wUG9pbnQiLCJpc05vZGUiLCJiZWZvcmVJbnNlcnQiLCJyZWxhdGVkVGFyZ2V0IiwiY2xlYXIiLCJiZWZvcmVpbnB1dCIsImlucHV0VHlwZSIsImZsdXNoU29vbiIsImNvbXBhcmVPYmpzIiwiV2lkZ2V0VHlwZSIsIm5vU3BlYyIsInNwYW4iLCJvbGRPZmZzZXQiLCJEZWNvcmF0aW9uIiwidmFsaWQiLCJJbmxpbmVUeXBlIiwiaW5jbHVzaXZlU3RhcnQiLCJpbmNsdXNpdmVFbmQiLCJpcyIsIkRlY29yYXRpb25TZXQiLCJsb2NhbCIsImRlY29yYXRpb25zIiwiYnVpbGRUcmVlIiwicHJlZGljYXRlIiwiZmluZElubmVyIiwiY2hpbGRPZmYiLCJtYXBJbm5lciIsIm5ld0xvY2FsIiwib25SZW1vdmUiLCJvbGRDaGlsZHJlbiIsImJhc2VPZmZzZXQiLCJtb3ZlZCIsIm9sZEVuZCIsIm5ld0VuZCIsImRTaXplIiwibXVzdFJlYnVpbGQiLCJmcm9tTG9jYWwiLCJ0b0xvY2FsIiwiY2hpbGRPZmZzZXQiLCJjaGlsZE5vZGUiLCJnYXRoZXIiLCJtYXBBbmRHYXRoZXJSZW1haW5pbmdEZWNvcmF0aW9ucyIsImJ5UG9zIiwibWFwQ2hpbGRyZW4iLCJhZGRJbm5lciIsInRha2VTcGFuc0Zvck5vZGUiLCJtb3ZlU3BhbnMiLCJ3aXRob3V0TnVsbHMiLCJyZW1vdmVJbm5lciIsImRlYyIsImxvY2FsU2V0IiwiRGVjb3JhdGlvbkdyb3VwIiwicmVtb3ZlT3ZlcmxhcCIsImxvY2Fsc0lubmVyIiwiZm9yRWFjaFNldCIsIm1lbWJlcnMiLCJtYXBwZWREZWNvcyIsIm1lbWJlciIsInNvcnRlZCIsImV2ZXJ5Iiwic3BhbnMiLCJoYXNOdWxscyIsImxvY2FsU3RhcnQiLCJzdWJ0cmVlIiwid29ya2luZyIsImluc2VydEFoZWFkIiwidmlld0RlY29yYXRpb25zIiwib2JzZXJ2ZU9wdGlvbnMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwiY2hhcmFjdGVyRGF0YU9sZFZhbHVlIiwiYXR0cmlidXRlcyIsImF0dHJpYnV0ZU9sZFZhbHVlIiwidXNlQ2hhckRhdGEiLCJTZWxlY3Rpb25TdGF0ZSIsIkRPTU9ic2VydmVyIiwiaGFuZGxlRE9NQ2hhbmdlIiwicXVldWUiLCJvYnNlcnZlciIsIm9uQ2hhckRhdGEiLCJzdXBwcmVzc2luZ1NlbGVjdGlvblVwZGF0ZXMiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwicmVtb3ZlZE5vZGVzIiwicHJldlZhbHVlIiwib25TZWxlY3Rpb25DaGFuZ2UiLCJ0YWtlUmVjb3JkcyIsIm9ic2VydmUiLCJ0YWtlIiwiZGlzY29ubmVjdCIsInN1cHByZXNzU2VsZWN0aW9uVXBkYXRlcyIsImlnbm9yZVNlbGVjdGlvbkNoYW5nZSIsImNvbnRhaW5lciIsImFuY2VzdG9ycyIsIlNldCIsIm5ld1NlbCIsInR5cGVPdmVyIiwicmVnaXN0ZXJNdXRhdGlvbiIsImJycyIsImJyIiwiYmxvY2tQYXJlbnQiLCJyZWFkU2VsIiwic2Nyb2xsVG9TZWxlY3Rpb24iLCJjc3NDaGVja2VkIiwiY3NzQ2hlY2tXYXJuZWQiLCJjaGVja0NTUyIsImF0dHJpYnV0ZU5hbWUiLCJhZGRlZE5vZGVzIiwicmFuZ2VUb1NlbGVjdGlvblJhbmdlIiwiY3VycmVudEFuY2hvciIsImRvbUF0UG9zIiwicmVhZERPTUNoYW5nZSIsInNoYXJlZCIsInByZWZlcnJlZFBvcyIsInByZWZlcnJlZFNpZGUiLCJmcm9tXyIsInRvXyIsInBhcnNlQmV0d2VlbiIsImNvbXBhcmUiLCJjaGFuZ2UiLCJlbmRBIiwiZW5kQiIsImlzU3Vycm9nYXRlUGFpciIsImZpbmREaWZmIiwicmVzb2x2ZVNlbGVjdGlvbiIsIm5leHRTZWwiLCIkZnJvbUEiLCJpbmxpbmVDaGFuZ2UiLCJvbGQiLCIkbmV3U3RhcnQiLCIkbmV3RW5kIiwic2tpcENsb3NpbmdBbmRPcGVuaW5nIiwiJG5leHQiLCJsb29rc0xpa2VCYWNrc3BhY2UiLCJtYXJrQ2hhbmdlIiwiY2hGcm9tIiwiY2hUbyIsImN1ck1hcmtzIiwicHJldk1hcmtzIiwiaXNNYXJrQ2hhbmdlIiwicGFyc2VkU2VsIiwiZnJvbUVuZCIsIm1heU9wZW4iLCJFZGl0b3JWaWV3IiwiX3Jvb3QiLCJtb3VudGVkIiwicHJldkRpcmVjdFBsdWdpbnMiLCJwbHVnaW5WaWV3cyIsIl9wcm9wcyIsImRpcmVjdFBsdWdpbnMiLCJjaGVja1N0YXRlQ29tcG9uZW50IiwibW91bnQiLCJnZXRFZGl0YWJsZSIsInVwZGF0ZUN1cnNvcldyYXBwZXIiLCJidWlsZE5vZGVWaWV3cyIsImNvbXB1dGVEb2NEZWNvIiwicGFzc2l2ZSIsImluaXRJbnB1dCIsInVwZGF0ZVBsdWdpblZpZXdzIiwiaGFuZGxlRE9NRXZlbnRzIiwicHJldlByb3BzIiwidXBkYXRlU3RhdGVJbm5lciIsInNldFByb3BzIiwiX2EiLCJyZWRyYXciLCJ1cGRhdGVTZWwiLCJwbHVnaW5zQ2hhbmdlZCIsIm5BIiwibkIiLCJjaGFuZ2VkTm9kZVZpZXdzIiwic2Nyb2xsIiwidXBkYXRlRG9jIiwib2xkU2Nyb2xsUG9zIiwib3ZlcmZsb3dBbmNob3IiLCJyZWZET00iLCJyZWZUb3AiLCJpbm5lckhlaWdodCIsImxvY2FsUmVjdCIsInN0b3JlU2Nyb2xsUG9zIiwiZm9yY2VTZWxVcGRhdGUiLCJzZWwxIiwic2VsMiIsInNlbGVjdGlvbkNvbnRleHRDaGFuZ2VkIiwiY2hyb21lS2x1ZGdlIiwiYW5jaG9ySW5SaWdodFBsYWNlIiwidXBkYXRlRHJhZ2dlZE5vZGUiLCJuZXdSZWZUb3AiLCJyZXNldFNjcm9sbFBvcyIsImRlc3Ryb3lQbHVnaW5WaWV3cyIsInByZXZTdGF0ZSIsInBsdWdpblZpZXciLCJtb3ZlZFBvcyIsInBhcmVudEVsZW1lbnQiLCJzZXRBY3RpdmUiLCJzdG9yZWQiLCJwcmV2ZW50U2Nyb2xsIiwiZm9jdXNQcmV2ZW50U2Nyb2xsIiwiZ2V0UHJvdG90eXBlT2YiLCJ1cGRhdGVSb290IiwicG9zQXRET00iLCJwYXN0ZUhUTUwiLCJDbGlwYm9hcmRFdmVudCIsInBhc3RlVGV4dCIsImRlc3Ryb3lJbnB1dCIsImlzRGVzdHJveWVkIiwiZGlzcGF0Y2hFdmVudCIsImRpc3BhdGNoVHJhbnNhY3Rpb24iLCJzaGFkb3dSb290IiwiZGVlcEFjdGl2ZUVsZW1lbnQiLCJnZXRDb21wb3NlZFJhbmdlcyIsInJlYWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJnZXRUYXJnZXRSYW5nZXMiLCJleGVjQ29tbWFuZCIsInNhZmFyaVNoYWRvd1NlbGVjdGlvblJhbmdlIiwiY29udGVudGVkaXRhYmxlIiwidHJhbnNsYXRlIiwiR09PRF9MRUFGX1NJWkUiLCJSb3BlU2VxdWVuY2UiLCJsZWFmQXBwZW5kIiwibGVhZlByZXBlbmQiLCJhcHBlbmRJbm5lciIsIkFwcGVuZCIsInNsaWNlSW5uZXIiLCJnZXRJbm5lciIsImZvckVhY2hJbm5lciIsImZvckVhY2hJbnZlcnRlZElubmVyIiwiTGVhZiIsInByb3RvdHlwZUFjY2Vzc29ycyIsImNvbmZpZ3VyYWJsZSIsImZsYXR0ZW4iLCJkZWZpbmVQcm9wZXJ0aWVzIiwibGVmdExlbiIsIkJyYW5jaCIsImV2ZW50Q291bnQiLCJwb3BFdmVudCIsInByZXNlcnZlSXRlbXMiLCJyZW1hcCIsInJlbWFwcGluZyIsInJlbWFpbmluZyIsInRyYW5zZm9ybSIsImFkZEFmdGVyIiwiSXRlbSIsImFkZFRyYW5zZm9ybSIsImhpc3RPcHRpb25zIiwibmV3SXRlbXMiLCJvbGRJdGVtcyIsImxhc3RJdGVtIiwibWVyZ2VkIiwib3ZlcmZsb3ciLCJERVBUSF9PVkVSRkxPVyIsImN1dFBvaW50IiwiY3V0T2ZmRXZlbnRzIiwibWlycm9yUG9zIiwibWlycm9yT2Zmc2V0IiwiYWRkTWFwcyIsInJlYmFzZWQiLCJyZWJhc2VkVHJhbnNmb3JtIiwicmViYXNlZENvdW50IiwicmViYXNlZEl0ZW1zIiwibmV3VW50aWwiLCJpUmViYXNlZCIsIm5ld01hcHMiLCJicmFuY2giLCJlbXB0eUl0ZW1Db3VudCIsImNvbXByZXNzIiwidXB0byIsImV2ZW50cyIsIm5ld0l0ZW0iLCJIaXN0b3J5U3RhdGUiLCJ1bmRvbmUiLCJwcmV2UmFuZ2VzIiwicHJldlRpbWUiLCJwcmV2Q29tcG9zaXRpb24iLCJyYW5nZXNGb3IiLCJtYXBSYW5nZXMiLCJjYWNoZWRQcmVzZXJ2ZUl0ZW1zIiwiY2FjaGVkUHJlc2VydmVJdGVtc1BsdWdpbnMiLCJtdXN0UHJlc2VydmVJdGVtcyIsImhpc3RvcnlQcmVzZXJ2ZUl0ZW1zIiwiaGlzdG9yeUtleSIsImNsb3NlSGlzdG9yeUtleSIsIm5ld0dyb3VwRGVsYXkiLCJoaXN0IiwiaGlzdG9yeSIsImhpc3RvcnlUciIsImhpc3RvcnlTdGF0ZSIsImFwcGVuZGVkIiwicmVkbyIsIm5ld0dyb3VwIiwiYWRqYWNlbnQiLCJpc0FkamFjZW50VG8iLCJjb21tYW5kIiwidW5kbyIsImJ1aWxkQ29tbWFuZCIsIm5ld0hpc3QiLCJoaXN0VHJhbnNhY3Rpb24iLCJJbnB1dFJ1bGUiLCJjdXRPZmYiLCJ1bmRvYWJsZSIsImluQ29kZU1hcmsiLCJydW4iLCJlbGxpcHNpcyIsInNtYXJ0UXVvdGVzIiwidGV4dGJsb2NrVHlwZUlucHV0UnVsZSIsInJlZ2V4cCIsIm9sRE9NIiwidWxET00iLCJsaURPTSIsIm9yZGVyZWRMaXN0Iiwib3JkZXIiLCJidWxsZXRMaXN0IiwibGlzdEl0ZW0iLCJ3cmFwSW5MaXN0IiwibGlzdFR5cGUiLCJkb0pvaW4iLCJvdXRlclJhbmdlIiwiJGluc2VydCIsImlubmVyUmFuZ2UiLCJhcm91bmQiLCJmaW5kV3JhcHBpbmdPdXRzaWRlIiwiaW5uZXJNYXRjaCIsImZpbmRXcmFwcGluZ0luc2lkZSIsImpvaW5CZWZvcmUiLCJzcGxpdERlcHRoIiwic3BsaXRQb3MiLCJkb1dyYXBJbkxpc3QiLCJ3cmFwUmFuZ2VJbkxpc3QiLCJzcGxpdExpc3RJdGVtIiwiaXRlbVR5cGUiLCJpdGVtQXR0cnMiLCJncmFuZFBhcmVudCIsImRlcHRoQmVmb3JlIiwiZGVwdGhBZnRlciIsIm5leHRUeXBlIiwibGlmdExpc3RJdGVtIiwiZW5kT2ZMaXN0IiwibGlmdFRvT3V0ZXJMaXN0IiwibGlzdCIsImluZGV4QmVmb3JlIiwibGlmdE91dE9mTGlzdCIsInBET00iLCJibG9ja3F1b3RlRE9NIiwiaHJET00iLCJwcmVET00iLCJickRPTSIsInBhcmFncmFwaCIsImhvcml6b250YWxfcnVsZSIsImhlYWRpbmciLCJjb2RlX2Jsb2NrIiwiaW1hZ2UiLCJzcmMiLCJoYXJkX2JyZWFrIiwiZW1ET00iLCJzdHJvbmdET00iLCJjb2RlRE9NIiwiZW0iLCJzdHJvbmciLCJmb250V2VpZ2h0IiwiTUFSS0RPV05fRVNDQVBFRF9BVFRSIiwiQVVUT19MSU5LX0FUVFIiLCJFRElUT1JfQ0xTIiwiZG9jU3BlYyIsImhlYWRpbmcxU3BlYyIsImhlYWRpbmcyU3BlYyIsImhlYWRpbmczU3BlYyIsInBhcmFncmFwaFNwZWMiLCJDaGVja2JveFN0YXR1cyIsImNoZWNrbGlzdEl0ZW1TcGVjIiwic3RhdHVzIiwiRU1QVFkiLCJET05FIiwiY2hlY2tlZCIsImNvZGVCbG9ja1NwZWMiLCJjaGVja2xpc3RfaXRlbSIsInVub3JkZXJlZF9saXN0Iiwib3JkZXJlZF9saXN0IiwibGlzdF9pdGVtIiwiaGVhZGluZzEiLCJoZWFkaW5nMiIsImhlYWRpbmczIiwibWFya1dyYXBwaW5nUnVsZSIsImMiLCJSZWdFeHAiLCJleGlzdGluZ01hcmtzIiwibGlzdFR5cGVSdWxlIiwicHJlZml4IiwicmFuZ2VBZnRlclByZWZpeCIsInNsaWNlQWZ0ZXJQcmVmaXgiLCJpbnB1dFJ1bGVzUGx1Z2luIiwiaGFuZGxlVGV4dElucHV0IiwiaXNJbnB1dFJ1bGVzIiwiaW5wdXRSdWxlcyIsImF0QmxvY2tTdGFydCIsInRleHRibG9ja0F0Iiwib25seSIsImZpbmRDdXRCZWZvcmUiLCJhdEJsb2NrRW5kIiwiZmluZEN1dEFmdGVyIiwiZGVmYXVsdEJsb2NrQXQiLCJzcGxpdEJsb2NrIiwic3BsaXRUeXBlIiwic3BsaXROb2RlIiwiY2FuIiwiJGZpcnN0IiwiZGVsZXRlQmFycmllciIsIiRjdXQiLCJjb25uIiwiaXNvbGF0ZWQiLCJqb2luTWF5YmVDbGVhciIsImNhbkRlbEFmdGVyIiwiJGpvaW5BdCIsInNlbEFmdGVyIiwiYXQiLCJhZnRlclRleHQiLCJhZnRlckRlcHRoIiwic2VsZWN0VGV4dGJsb2NrU2lkZSIsInNlbGVjdFRleHRibG9ja1N0YXJ0Iiwic2VsZWN0VGV4dGJsb2NrRW5kIiwidG9nZ2xlTWFyayIsInJlbW92ZVdoZW5QcmVzZW50IiwiZW50ZXJBdG9tcyIsImVudGVySW5saW5lQXRvbXMiLCJkcm9wU3BhY2UiLCJpbmNsdWRlV2hpdGVzcGFjZSIsIm1hcmtBcHBsaWVzIiwicmVtb3ZlSW5saW5lQXRvbXMiLCJtaXNzaW5nIiwic3BhY2VTdGFydCIsInNwYWNlRW5kIiwiY2hhaW5Db21tYW5kcyIsImNvbW1hbmRzIiwiYmFja3NwYWNlIiwiZGVsU3RlcCIsInBjQmFzZUtleW1hcCIsImFib3ZlIiwibWFjQmFzZUtleW1hcCIsImJhc2VLZXltYXAiLCJvcyIsIkFQUExZX0ZPUk1BVF9BVFRSIiwiTGlua01vZGFsIiwiZWwiLCJvbkNvbmZpcm0iLCJvbkNsZWFyIiwidXJsIiwic2hvd0NscyIsImNvbmZpcm1CdG4iLCJoYW5kbGVDb25maXJtIiwiY2FuY2VsQnRuIiwiaGFuZGxlQ2FuY2VsIiwiY2xlYXJCdG4iLCJoYW5kbGVDbGVhciIsImhhbmRsZUdsb2JhbEtleWRvd24iLCJ0ZXh0SW5wdXQiLCJ1cmxJbnB1dCIsImlzRW50ZXIiLCJ3aGljaCIsImhhbmRsZUdsb2JhbENsaWNrIiwiZnJhbWVFbCIsIlRvb2xiYXJQbHVnaW4iLCJ0b29sYmFyRWwiLCJtb2RhbEVsIiwidmlld0luc3RhbmNlIiwiaGFuZGxlVG9vbGJhckNsaWNrIiwidW5oaWdobGlnaHRTZWxlY3RlZEF0dHJzIiwibW9kYWwiLCJwcmV2aW91c1N0YXRlIiwiaGlnaGxpZ2h0U2VsZWN0ZWRBdHRycyIsImhhbmRsZUtleURvd24iLCJpc1QiLCJoYXNDdHJsIiwidG9nZ2xlQ2hlY2tsaXN0SXRlbSIsImlzNyIsImhhc01vZCIsInRvZ2dsZUxpc3QiLCJwcm9tb3RlSGVhZGluZyIsInN3YXBUZXh0QmxvY2siLCJpc1NwYWNlIiwiaGFzQ2hlY2tlZCIsInRvZ2dsZUNoZWNrbGlzdEl0ZW1TdGF0ZSIsImlzWiIsImlzWSIsImlzSSIsImlzQiIsImlzUHJpbWUiLCJpc0siLCJhY3RpdmF0ZUxpbmtNb2RhbCIsImxpbmtNYXJrQXRTdGFydCIsImxpbmtNYXJrQXRFbmQiLCJzZWxlY3Rpb25Jc0luc2lkZUxpbmsiLCJuZXdTZWxlY3Rpb24iLCJidG4iLCJzZWxlY3RlZEF0dHJzIiwiZ2V0U2VsZWN0ZWRGb3JtYXRBdHRycyIsImdldFNlbGVjdGVkRm9ybWF0QW5kTWFya3MiLCJzZWxlY3RlZCIsImN1cnJlbnRUeXBlIiwibWFya1R5cGVzIiwiaW5saW5lX2xpbmsiLCJzdG9wUHJvcGFnYXRpb24iLCJhcHBseUZvcm1hdCIsImRhdGFGb3JtYXRTdHIiLCJTSE9XX0NMUyIsIkhUVFBfTElOSyIsIk1BSUxUT19MSU5LIiwiVG9vbHRpcFBsdWdpbiIsIm5vZGVUb0FuY2hvckhyZWYiLCJoaWRlIiwiY2hlY2tTZWxlY3Rpb24iLCJ3aXRoaW5MaW5rIiwic2hvdyIsInRvb2x0aXBFbCIsImlzQXV0b0xpbmsiLCJsaW5rVGV4dEVsIiwiaW5uZXJUZXh0IiwiYW5jaG9yRWwiLCJ0b2dnbGUiLCJhY3R1YWxXaWR0aCIsImF2YWlsYWJsZVdpZHRoIiwic2Nyb2xsZWQiLCJFZGl0b3JFeHRlbmRlclBsdWdpbiIsImV4dGVuZGVyRWwiLCJoYW5kbGVDbGljayIsImxhc3RQb3MiLCJsYXN0Tm9kZVR5cGUiLCJyYW5kb21VVUlEIiwidW5zYWZlU3RyaW5naWZ5IiwiU05fSVRFTV9TQVZFX0tFWSIsImdldE5hbWVzcGFjZWRDb250ZW50IiwiZ2V0VXVpZCIsIkNsaWVudCIsInJlc29sdmVDbGllbnRSZWFkeSIsIl9pdGVtIiwic2hvdWxkQ2FsbExpc3RlbmVycyIsIm5leHRJdGVtIiwicHJldmlvdXNJdGVtIiwiaXNNZXRhZGF0YVVwZGF0ZSIsImxhc3RTYXZlZEJ5IiwiZ2V0TGFzdFNhdmVkQnkiLCJfaWQiLCJfbGlzdGVuZXJzIiwiX3JlYWR5IiwiY29tcG9uZW50TWFuYWdlciIsImNhbGxMaXN0ZW5lcnMiLCJsaXN0ZW5lciIsImxhdGVzdERvYyIsImdldERvYyIsImxhdGVzdFRleHQiLCJvblVwZGF0ZSIsInJlYWR5Iiwic2F2ZU5vdGUiLCJqc29uRG9jIiwibWREb2MiLCJ0ZXh0UHJldmlldyIsInRvU2F2ZSIsInByZXZpZXdfcGxhaW4iLCJpdGVtU2VsZWN0b3JzIiwiY2xpZW50IiwiQ0hFQ0tCT1hfQ0hFQ0tFRF9DTEFTU05BTUUiLCJnZXRQb3MiLCJpbnB1dERpdiIsImNsaWNrVGFyZ2V0RGl2IiwidGFiSW5kZXgiLCJmb2N1c0hhbmRsZXIiLCJjbGlja0hhbmRsZXIiLCJub3JtYWxpemVLZXlOYW1lIiwiY3RybCIsIm1vZCIsIm1vZGlmaWVycyIsImtleW1hcCIsImJpbmRpbmdzIiwia2V5ZG93bkhhbmRsZXIiLCJub3JtYWxpemUiLCJiYXNlTmFtZSIsImtleU5hbWUiLCJkaXJlY3QiLCJub1NoaWZ0IiwiZnJvbUNvZGUiLCJyZWN1cnNpdmVEZWxldGVFbXB0eSIsImtleW1hcFBsdWdpbnMiLCJCYWNrc3BhY2UiLCJlbnN1cmVDaGVja2xpc3RJdGVtVGV4dFNlbGVjdGlvbiIsImFwcGxpY2FibGUiLCJFbnRlciIsIm5leHQkRnJvbSIsIm5leHRGcm9tIiwiZW5zdXJlVGV4dFNlbGVjdGlvbkluRW1wdHlOb2RlIiwicG9zc2libGVTZWxlY3Rpb24iLCJkZWNvZGVDYWNoZSIsImRlY29kZSIsImV4Y2x1ZGUiLCJkZWZhdWx0Q2hhcnMiLCJ0b1VwcGVyQ2FzZSIsImdldERlY29kZUNhY2hlIiwic2VxIiwibCIsImIxIiwicGFyc2VJbnQiLCJiMiIsImNociIsImIzIiwiYjQiLCJjb21wb25lbnRDaGFycyIsImVuY29kZUNhY2hlIiwiZW5jb2RlIiwia2VlcEVzY2FwZWQiLCJnZXRFbmNvZGVDYWNoZSIsIm5leHRDb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZm9ybWF0IiwicHJvdG9jb2wiLCJzbGFzaGVzIiwiYXV0aCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiaGFzaCIsIlVybCIsInByb3RvY29sUGF0dGVybiIsInBvcnRQYXR0ZXJuIiwic2ltcGxlUGF0aFBhdHRlcm4iLCJ1bndpc2UiLCJhdXRvRXNjYXBlIiwibm9uSG9zdENoYXJzIiwiaG9zdEVuZGluZ0NoYXJzIiwiaG9zdG5hbWVQYXJ0UGF0dGVybiIsImhvc3RuYW1lUGFydFN0YXJ0IiwiaG9zdGxlc3NQcm90b2NvbCIsImphdmFzY3JpcHQiLCJzbGFzaGVkUHJvdG9jb2wiLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJnb3BoZXIiLCJmaWxlIiwic2xhc2hlc0Rlbm90ZUhvc3QiLCJsb3dlclByb3RvIiwiaGVjIiwidHJpbSIsInNpbXBsZVBhdGgiLCJwcm90byIsImF0U2lnbiIsImhvc3RFbmQiLCJwYXJzZUhvc3QiLCJpcHY2SG9zdG5hbWUiLCJob3N0cGFydHMiLCJuZXdwYXJ0IiwiayIsInZhbGlkUGFydHMiLCJub3RIb3N0IiwiYml0IiwicW0iLCJ1IiwiaXNTdHJpbmciLCJfY2xhc3MiLCJfaGFzT3duUHJvcGVydHkiLCJzb3VyY2UiLCJhcnJheVJlcGxhY2VBdCIsIm5ld0VsZW1lbnRzIiwiaXNWYWxpZEVudGl0eUNvZGUiLCJzdXJyb2dhdGUxIiwic3Vycm9nYXRlMiIsIlVORVNDQVBFX01EX1JFIiwiVU5FU0NBUEVfQUxMX1JFIiwiRElHSVRBTF9FTlRJVFlfVEVTVF9SRSIsInVuZXNjYXBlTWQiLCJ1bmVzY2FwZUFsbCIsImVzY2FwZWQiLCJlbnRpdHkiLCJkZWNvZGVkIiwicmVwbGFjZUVudGl0eVBhdHRlcm4iLCJIVE1MX0VTQ0FQRV9URVNUX1JFIiwiSFRNTF9FU0NBUEVfUkVQTEFDRV9SRSIsIkhUTUxfUkVQTEFDRU1FTlRTIiwicmVwbGFjZVVuc2FmZUNoYXIiLCJlc2NhcGVIdG1sIiwiUkVHRVhQX0VTQ0FQRV9SRSIsImVzY2FwZVJFIiwiaXNXaGl0ZVNwYWNlIiwiaXNQdW5jdENoYXIiLCJpc01kQXNjaWlQdW5jdCIsIm5vcm1hbGl6ZVJlZmVyZW5jZSIsImxpYiIsIm1kdXJsIiwicGFyc2VMaW5rTGFiZWwiLCJkaXNhYmxlTmVzdGVkIiwibWFya2VyIiwicHJldlBvcyIsInBvc01heCIsIm9sZFBvcyIsIm1kIiwic2tpcFRva2VuIiwibGFiZWxFbmQiLCJwYXJzZUxpbmtEZXN0aW5hdGlvbiIsInBhcnNlTGlua1RpdGxlIiwicHJldl9zdGF0ZSIsImNhbl9jb250aW51ZSIsImRlZmF1bHRfcnVsZXMiLCJSZW5kZXJlciIsImNvZGVfaW5saW5lIiwiaWR4IiwiZW52Iiwic2xmIiwidG9rZW4iLCJyZW5kZXJBdHRycyIsImZlbmNlIiwiaW5mbyIsImhpZ2hsaWdodGVkIiwibGFuZ05hbWUiLCJsYW5nQXR0cnMiLCJoaWdobGlnaHQiLCJhdHRySW5kZXgiLCJ0bXBBdHRycyIsImxhbmdQcmVmaXgiLCJ0bXBUb2tlbiIsInJlbmRlcklubGluZUFzVGV4dCIsInJlbmRlclRva2VuIiwiaGFyZGJyZWFrIiwieGh0bWxPdXQiLCJzb2Z0YnJlYWsiLCJicmVha3MiLCJodG1sX2Jsb2NrIiwiaHRtbF9pbmxpbmUiLCJoaWRkZW4iLCJuZXN0aW5nIiwibmVlZExmIiwibmV4dFRva2VuIiwicmVuZGVySW5saW5lIiwicmVuZGVyIiwiUnVsZXIiLCJfX3J1bGVzX18iLCJfX2NhY2hlX18iLCJfX2ZpbmRfXyIsIl9fY29tcGlsZV9fIiwiY2hhaW5zIiwiYWx0TmFtZSIsImNoYWluIiwiZm4iLCJvcHQiLCJiZWZvcmVOYW1lIiwicnVsZU5hbWUiLCJhZnRlck5hbWUiLCJlbmFibGUiLCJpZ25vcmVJbnZhbGlkIiwiZW5hYmxlT25seSIsImRpc2FibGUiLCJnZXRSdWxlcyIsImNoYWluTmFtZSIsIlRva2VuIiwibWFya3VwIiwiYXR0clB1c2giLCJhdHRyRGF0YSIsImF0dHJTZXQiLCJhdHRyR2V0IiwiYXR0ckpvaW4iLCJTdGF0ZUNvcmUiLCJpbmxpbmVNb2RlIiwiTkVXTElORVNfUkUiLCJOVUxMX1JFIiwiaXNMaW5rQ2xvc2UiLCJSQVJFX1JFIiwiU0NPUEVEX0FCQlJfVEVTVF9SRSIsIlNDT1BFRF9BQkJSX1JFIiwiU0NPUEVEX0FCQlIiLCJ0bSIsInJlcGxhY2VGbiIsInJlcGxhY2Vfc2NvcGVkIiwiaW5saW5lVG9rZW5zIiwiaW5zaWRlX2F1dG9saW5rIiwicmVwbGFjZV9yYXJlIiwiUVVPVEVfVEVTVF9SRSIsIlFVT1RFX1JFIiwicmVwbGFjZUF0IiwicHJvY2Vzc19pbmxpbmVzIiwidGhpc0xldmVsIiwiT1VURVIiLCJsYXN0SW5kZXgiLCJjYW5PcGVuIiwiY2FuQ2xvc2UiLCJpc1NpbmdsZSIsImxhc3RDaGFyIiwibmV4dENoYXIiLCJpc0xhc3RQdW5jdENoYXIiLCJpc05leHRQdW5jdENoYXIiLCJpc0xhc3RXaGl0ZVNwYWNlIiwiaXNOZXh0V2hpdGVTcGFjZSIsInNpbmdsZSIsIm9wZW5RdW90ZSIsImNsb3NlUXVvdGUiLCJxdW90ZXMiLCJfcnVsZXMiLCJibG9ja1Rva2VucyIsImxpbmtpZnkiLCJwcmV0ZXN0IiwiaHRtbExpbmtMZXZlbCIsImN1cnJlbnRUb2tlbiIsImxpbmtzIiwibG4iLCJmdWxsVXJsIiwibm9ybWFsaXplTGluayIsInZhbGlkYXRlTGluayIsInVybFRleHQiLCJub3JtYWxpemVMaW5rVGV4dCIsInRva2VuX28iLCJ0b2tlbl90IiwidG9rZW5fYyIsImJsa0lkeCIsInR5cG9ncmFwaGVyIiwiY3VyciIsIkNvcmUiLCJydWxlciIsInByb2Nlc3MiLCJTdGF0ZSIsIlN0YXRlQmxvY2siLCJiTWFya3MiLCJlTWFya3MiLCJ0U2hpZnQiLCJzQ291bnQiLCJic0NvdW50IiwiYmxrSW5kZW50IiwibGluZSIsImxpbmVNYXgiLCJ0aWdodCIsImRkSW5kZW50IiwibGlzdEluZGVudCIsImluZGVudCIsImluZGVudF9mb3VuZCIsImlzRW1wdHkiLCJza2lwRW1wdHlMaW5lcyIsInNraXBTcGFjZXMiLCJza2lwU3BhY2VzQmFjayIsInNraXBDaGFycyIsInNraXBDaGFyc0JhY2siLCJnZXRMaW5lcyIsImJlZ2luIiwia2VlcExhc3RMRiIsImxpbmVJbmRlbnQiLCJsaW5lU3RhcnQiLCJnZXRMaW5lIiwiZXNjYXBlZFNwbGl0IiwiaXNFc2NhcGVkIiwic3Vic3RyaW5nIiwic2tpcEJ1bGxldExpc3RNYXJrZXIiLCJzdGFydExpbmUiLCJza2lwT3JkZXJlZExpc3RNYXJrZXIiLCJvcGVuX3RhZyIsImNsb3NlX3RhZyIsIkhUTUxfVEFHX1JFIiwiSFRNTF9PUEVOX0NMT1NFX1RBR19SRSIsIkhUTUxfU0VRVUVOQ0VTIiwiZW5kTGluZSIsInNpbGVudCIsIm5leHRMaW5lIiwiZmlyc3RDaCIsInNlY29uZENoIiwibGluZVRleHQiLCJjb2x1bW5zIiwiYWxpZ25zIiwiY29sdW1uQ291bnQiLCJvbGRQYXJlbnRUeXBlIiwidGVybWluYXRvclJ1bGVzIiwidGFibGVMaW5lcyIsInRva2VuX2hvIiwidG9rZW5faWwiLCJ0Ym9keUxpbmVzIiwiYXV0b2NvbXBsZXRlZENlbGxzIiwidGVybWluYXRlIiwidG9rZW5fdGRvIiwibWVtIiwiaGF2ZUVuZE1hcmtlciIsIm9sZExpbmVNYXgiLCJvbGRCTWFya3MiLCJvbGRCU0NvdW50Iiwib2xkU0NvdW50Iiwib2xkVFNoaWZ0IiwibGFzdExpbmVFbXB0eSIsImlzT3V0ZGVudGVkIiwic3BhY2VBZnRlck1hcmtlciIsImFkanVzdFRhYiIsImluaXRpYWwiLCJvbGRJbmRlbnQiLCJsaW5lcyIsInRva2VuaXplIiwiY250IiwiaXNPcmRlcmVkIiwibWFya2VyVmFsdWUiLCJwb3NBZnRlck1hcmtlciIsImlzVGVybWluYXRpbmdQYXJhZ3JhcGgiLCJtYXJrZXJDaGFyQ29kZSIsImxpc3RUb2tJZHgiLCJsaXN0TGluZXMiLCJwcmV2RW1wdHlFbmQiLCJjb250ZW50U3RhcnQiLCJpbmRlbnRBZnRlck1hcmtlciIsIml0ZW1MaW5lcyIsIm9sZFRpZ2h0Iiwib2xkTGlzdEluZGVudCIsIm1hcmtUaWdodFBhcmFncmFwaHMiLCJfZW5kTGluZSIsImdldE5leHRMaW5lIiwiaXNDb250aW51YXRpb24iLCJsaW5lQ29udGVudCIsImRlc3RSZXMiLCJoZWxwZXJzIiwiZGVzdEVuZFBvcyIsImRlc3RFbmRMaW5lTm8iLCJ0aXRsZVJlcyIsImxhYmVsIiwicmVmZXJlbmNlcyIsInRva2VuX2kiLCJQYXJzZXJCbG9jayIsIm1heE5lc3RpbmciLCJoYXNFbXB0eUxpbmVzIiwicHJldkxpbmUiLCJvdXRUb2tlbnMiLCJTdGF0ZUlubGluZSIsInRva2Vuc19tZXRhIiwicGVuZGluZyIsInBlbmRpbmdMZXZlbCIsImRlbGltaXRlcnMiLCJfcHJldl9kZWxpbWl0ZXJzIiwiYmFja3RpY2tzIiwiYmFja3RpY2tzU2Nhbm5lZCIsImxpbmtMZXZlbCIsInB1c2hQZW5kaW5nIiwidG9rZW5fbWV0YSIsInNjYW5EZWxpbXMiLCJjYW5TcGxpdFdvcmQiLCJsZWZ0X2ZsYW5raW5nIiwicmlnaHRfZmxhbmtpbmciLCJjYW5fb3BlbiIsImNhbl9jbG9zZSIsImlzVGVybWluYXRvckNoYXIiLCJTQ0hFTUVfUkUiLCJFU0NBUEVEIiwicG9zdFByb2Nlc3MiLCJsb25lTWFya2VycyIsInN0YXJ0RGVsaW0iLCJlbmREZWxpbSIsInNjYW5uZWQiLCJpc1N0cm9uZyIsIkVNQUlMX1JFIiwiQVVUT0xJTktfUkUiLCJESUdJVEFMX1JFIiwiTkFNRURfUkUiLCJwcm9jZXNzRGVsaW1pdGVycyIsIm9wZW5lcnNCb3R0b20iLCJoZWFkZXJJZHgiLCJsYXN0VG9rZW5JZHgiLCJqdW1wcyIsImNsb3NlcklkeCIsImNsb3NlciIsIm1pbk9wZW5lcklkeCIsIm9wZW5lcklkeCIsIm5ld01pbk9wZW5lcklkeCIsIm9wZW5lciIsImlzT2RkTWF0Y2giLCJsYXN0SnVtcCIsIm1hdGNoQXRTdGFydCIsInBtYXgiLCJ3cyIsImNoMSIsImVzY2FwZWRTdHIiLCJjaDIiLCJvcmlnU3RyIiwib3BlbmVyTGVuZ3RoIiwibWF0Y2hTdGFydCIsIm1hdGNoRW5kIiwiY2xvc2VyTGVuZ3RoIiwicmVzIiwicmVmIiwicGFyc2VSZWZlcmVuY2UiLCJsYWJlbFN0YXJ0IiwibGMiLCJpc0xldHRlciIsIl9ydWxlczIiLCJQYXJzZXJJbmxpbmUiLCJydWxlcjIiLCJpc0Z1bmN0aW9uIiwiZGVmYXVsdE9wdGlvbnMiLCJmdXp6eUxpbmsiLCJmdXp6eUVtYWlsIiwiZnV6enlJUCIsImRlZmF1bHRTY2hlbWFzIiwidGFpbCIsInJlIiwic3JjX2F1dGgiLCJzcmNfaG9zdF9wb3J0X3N0cmljdCIsInNyY19wYXRoIiwibm9faHR0cCIsInNyY19kb21haW4iLCJzcmNfZG9tYWluX3Jvb3QiLCJzcmNfcG9ydCIsInNyY19ob3N0X3Rlcm1pbmF0b3IiLCJtYWlsdG8iLCJzcmNfZW1haWxfbmFtZSIsInNyY19ob3N0X3N0cmljdCIsInRsZHNfZGVmYXVsdCIsIm9wdHMiLCJzcmNfQW55Iiwic3JjX0NjIiwic3JjX1oiLCJzcmNfUCIsInNyY19aUENjIiwic3JjX1pDYyIsInRleHRfc2VwYXJhdG9ycyIsInNyY19wc2V1ZG9fbGV0dGVyIiwic3JjX2lwNCIsInNyY194biIsInNyY19ob3N0IiwidHBsX2hvc3RfZnV6enkiLCJ0cGxfaG9zdF9ub19pcF9mdXp6eSIsInRwbF9ob3N0X2Z1enp5X3N0cmljdCIsInRwbF9ob3N0X3BvcnRfZnV6enlfc3RyaWN0IiwidHBsX2hvc3RfcG9ydF9ub19pcF9mdXp6eV9zdHJpY3QiLCJ0cGxfaG9zdF9mdXp6eV90ZXN0IiwidHBsX2VtYWlsX2Z1enp5IiwidHBsX2xpbmtfZnV6enkiLCJ0cGxfbGlua19ub19pcF9mdXp6eSIsIl9fb3B0c19fIiwidGxkcyIsIl9fdGxkc19fIiwidW50cGwiLCJ0cGwiLCJzcmNfdGxkcyIsIm9uQ29tcGlsZSIsIl9fdGxkc19yZXBsYWNlZF9fIiwiZW1haWxfZnV6enkiLCJsaW5rX2Z1enp5IiwibGlua19ub19pcF9mdXp6eSIsImhvc3RfZnV6enlfdGVzdCIsImFsaWFzZXMiLCJzY2hlbWFFcnJvciIsIl9fY29tcGlsZWRfXyIsIl9fc2NoZW1hc19fIiwiY29tcGlsZWQiLCJpc1JlZ0V4cCIsImNyZWF0ZVZhbGlkYXRvciIsImFsaWFzIiwic2xpc3QiLCJzY2hlbWFfdGVzdCIsInNjaGVtYV9zZWFyY2giLCJzY2hlbWFfYXRfc3RhcnQiLCJfX2luZGV4X18iLCJfX3RleHRfY2FjaGVfXyIsInJlc2V0U2NhbkNhY2hlIiwiTWF0Y2giLCJfX2xhc3RfaW5kZXhfXyIsIl9fc2NoZW1hX18iLCJjcmVhdGVNYXRjaCIsIkxpbmtpZnlJdCIsInNjaGVtYXMiLCJhY2MiLCJtbCIsIm1lIiwidGxkX3BvcyIsImF0X3BvcyIsInRlc3RTY2hlbWFBdCIsImtlZXBPbGQiLCJtYXhJbnQiLCJyZWdleFB1bnljb2RlIiwicmVnZXhOb25BU0NJSSIsInJlZ2V4U2VwYXJhdG9ycyIsImVycm9ycyIsInN0cmluZ0Zyb21DaGFyQ29kZSIsIm1hcERvbWFpbiIsImRvbWFpbiIsImVuY29kZWQiLCJ1Y3MyZGVjb2RlIiwiY291bnRlciIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiZmxhZyIsImFkYXB0IiwiZGVsdGEiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwiaW5wdXRMZW5ndGgiLCJiYXNpYyIsIm9sZGkiLCJ3IiwiY29kZVBvaW50IiwiYmFzZU1pbnVzVCIsImZyb21Db2RlUG9pbnQiLCJjdXJyZW50VmFsdWUiLCJiYXNpY0xlbmd0aCIsImhhbmRsZWRDUENvdW50IiwiaGFuZGxlZENQQ291bnRQbHVzT25lIiwicSIsInFNaW51c1QiLCJjb2RlUG9pbnRzIiwiY29tcG9uZW50cyIsImNvcmUiLCJ6ZXJvIiwicnVsZXMyIiwiY29tbW9ubWFyayIsIkJBRF9QUk9UT19SRSIsIkdPT0RfREFUQV9SRSIsIlJFQ09ERV9IT1NUTkFNRV9GT1IiLCJlciIsIk1hcmtkb3duSXQiLCJwcmVzZXROYW1lIiwicmVuZGVyZXIiLCJ1dGlscyIsImNvbmZpZ3VyZSIsInByZXNldHMiLCJtaXNzZWQiLCJ1c2UiLCJhcmdzIiwicGFyc2VJbmxpbmUiLCJidWxsZXRfbGlzdCIsIk1hcmtkb3duUGFyc2VTdGF0ZSIsInRva2VuSGFuZGxlcnMiLCJhZGRUZXh0IiwibWF5YmVNZXJnZSIsIm9wZW5NYXJrIiwiY2xvc2VNYXJrIiwicGFyc2VUb2tlbnMiLCJ0b2tzIiwib3Blbk5vZGUiLCJjbG9zZU5vZGUiLCJub0Nsb3NlVG9rZW4iLCJ3aXRob3V0VHJhaWxpbmdOZXdsaW5lIiwibm9PcCIsIk1hcmtkb3duUGFyc2VyIiwidG9rZW5pemVyIiwibWFya2Rvd25FbnYiLCJsaXN0SXNUaWdodCIsImJsYW5rTWFyayIsIm1peGFibGUiLCJNYXJrZG93blNlcmlhbGl6ZXIiLCJzZXJpYWxpemUiLCJNYXJrZG93blNlcmlhbGl6ZXJTdGF0ZSIsInJlbmRlckNvbnRlbnQiLCJkZWZhdWx0TWFya2Rvd25TZXJpYWxpemVyIiwid3JhcEJsb2NrIiwid3JpdGUiLCJjbG9zZUJsb2NrIiwicmVwZWF0IiwicmVuZGVyTGlzdCIsImJ1bGxldCIsIm1heFciLCJuU3RyIiwiZXNjIiwiaW5BdXRvbGluayIsImV4cGVsRW5jbG9zaW5nV2hpdGVzcGFjZSIsImlzUGxhaW5VUkwiLCJfc3RhdGUiLCJfbWFyayIsImJhY2t0aWNrc0ZvciIsImVzY2FwZSIsInRpY2tzIiwiZGVsaW0iLCJjbG9zZWQiLCJpblRpZ2h0TGlzdCIsInRpZ2h0TGlzdHMiLCJoYXJkQnJlYWtOb2RlTmFtZSIsImZsdXNoQ2xvc2UiLCJhdEJsYW5rIiwiZGVsaW1NaW4iLCJnZXRNYXJrIiwic3RyaWN0IiwiZmlyc3REZWxpbSIsImVuc3VyZU5ld0xpbmUiLCJmcm9tQmxvY2tTdGFydCIsInRyYWlsaW5nIiwicHJvZ3Jlc3MiLCJsZWFkaW5nIiwibGVhZCIsInRyYWlsIiwibm9Fc2MiLCJtYXJrU3RyaW5nIiwiaXNUaWdodCIsInByZXZUaWdodCIsInN0YXJ0T2ZMaW5lIiwiZXNjYXBlRXh0cmFDaGFyYWN0ZXJzIiwicXVvdGUiLCJnZXRFbmNsb3NpbmdXaGl0ZXNwYWNlIiwibWFya2Rvd25TZXJpYWxpemVyIiwiYm94VGV4dCIsIm1hcmtkb3duSXRQYXJzZXIiLCJpbWFnZVJ1bGVJbmRleCIsImRlZmF1bHRJbWFnZVJ1bGUiLCJDSEVDS0xJU1RfSVRFTV9PUEVOX01BUktFUlMiLCJjb3JlU3RhdGUiLCJzcmNMaW5lcyIsImlzQ2hlY2tsaXN0T3BlbiIsImhhc0NoZWNrbGlzdCIsInRyaW1MZWZ0IiwiaW5saW5lU3RhdGUiLCJvcmlnaW5hbFBvcyIsImNvZGVUb2tlbiIsIlNjcmF0Y2hUb2tlblBhcnNlciIsImdldFR5cGVOYW1lIiwidG9rZW5UeXBlIiwiZ2V0VG9rZW5zIiwiZnVsbFRva2VuTGlzdCIsInBhcnNlYWJsZSIsInJlc2V0SW50ZXJuYWxTdGF0ZSIsInRva2VuU3RhY2siLCJET0NVTUVOVF9NQVAiLCJtYXJrZG93blBhcnNlciIsIm1pcCIsInRva2VuUGFyc2VyIiwic3RhcnRzV2l0aCIsIklubGluZUxpbmtQbHVnaW4iLCJzdGFydGluZ1Bvc2l0aW9uSW5zaWRlTm9kZSIsImF1dG9MaW5rTWFwcyIsImNoaWxkTGlua01hcmsiLCJsYXN0TWFwIiwiZW5kUG9zIiwiYXV0b0xpbmtNYXAiLCJsaW5rVGV4dCIsImxpbmtNYXJrcyIsImxpbmtNYXJrIiwiZmluZEFuZEluc2VydElubGluZUxpbmtzIiwiZ2V0RG9jRm9yTmV3RWRpdG9yU3RhdGUiXSwic291cmNlUm9vdCI6IiJ9